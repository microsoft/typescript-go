package options

import (
	"github.com/microsoft/typescript-go/internal/compiler/diagnostics"
	"github.com/microsoft/typescript-go/internal/core"
)

var optionsDeclarations = []CommandLineOption{
	//******* commandOptionsWithoutBuild *******
	{
		name:                     "help",
		shortName:                "h",
		kind:                     CommandLineOptionTypeBoolean,
		showInSimplifiedHelpView: true,
		isCommandLineOnly:        true,
		category:                 diagnostics.Command_line_Options,
		description:              diagnostics.Print_this_message,
		defaultValueDescription:  false,
	},
	{
		name:                    "help",
		shortName:               "?",
		kind:                    CommandLineOptionTypeBoolean,
		isCommandLineOnly:       true,
		category:                diagnostics.Command_line_Options,
		defaultValueDescription: false,
	},
	{
		name:                     "watch",
		shortName:                "w",
		kind:                     CommandLineOptionTypeBoolean,
		showInSimplifiedHelpView: true,
		isCommandLineOnly:        true,
		category:                 diagnostics.Command_line_Options,
		description:              diagnostics.Watch_input_files,
		defaultValueDescription:  false,
	},
	{
		name:                     "preserveWatchOutput",
		kind:                     CommandLineOptionTypeBoolean,
		showInSimplifiedHelpView: false,
		category:                 diagnostics.Output_Formatting,
		description:              diagnostics.Disable_wiping_the_console_in_watch_mode,
		defaultValueDescription:  false,
	},
	{
		name:                    "listFiles",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Compiler_Diagnostics,
		description:             diagnostics.Print_all_of_the_files_read_during_the_compilation,
		defaultValueDescription: false,
	},
	{
		name:                    "explainFiles",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Compiler_Diagnostics,
		description:             diagnostics.Print_files_read_during_the_compilation_including_why_it_was_included,
		defaultValueDescription: false,
	},
	{
		name:                    "listEmittedFiles",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Compiler_Diagnostics,
		description:             diagnostics.Print_the_names_of_emitted_files_after_a_compilation,
		defaultValueDescription: false,
	},
	{
		name:                     "pretty",
		kind:                     CommandLineOptionTypeBoolean,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Output_Formatting,
		description:              diagnostics.Enable_color_and_formatting_in_TypeScript_s_output_to_make_compiler_errors_easier_to_read,
		defaultValueDescription:  true,
	},
	{
		name:                    "traceResolution",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Compiler_Diagnostics,
		description:             diagnostics.Log_paths_used_during_the_moduleResolution_process,
		defaultValueDescription: false,
	},
	{
		name:                    "diagnostics",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Compiler_Diagnostics,
		description:             diagnostics.Output_compiler_performance_information_after_building,
		defaultValueDescription: false,
	},
	{
		name:                    "extendedDiagnostics",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Compiler_Diagnostics,
		description:             diagnostics.Output_more_detailed_compiler_performance_information_after_building,
		defaultValueDescription: false,
	},
	{
		name:                    "generateCpuProfile",
		kind:                    CommandLineOptionTypeString,
		isFilePath:              true,
		category:                diagnostics.Compiler_Diagnostics,
		description:             diagnostics.Emit_a_v8_CPU_profile_of_the_compiler_run_for_debugging,
		defaultValueDescription: "profile.cpuprofile",
	},
	{
		name:        "generateTrace",
		kind:        CommandLineOptionTypeString,
		isFilePath:  true,
		category:    diagnostics.Compiler_Diagnostics,
		description: diagnostics.Generates_an_event_trace_and_a_list_of_types,
	},
	{
		name:                    "incremental",
		shortName:               "i",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Projects,
		description:             diagnostics.Save_tsbuildinfo_files_to_allow_for_incremental_compilation_of_projects,
		transpileOptionValue:    core.TSUnknown,
		defaultValueDescription: diagnostics.X_false_unless_composite_is_set,
	},
	{
		name:      "declaration",
		shortName: "d",
		kind:      CommandLineOptionTypeBoolean,
		// Not setting affectsEmit because we calculate this flag might not affect full emit
		affectsBuildInfo:         true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Emit,
		transpileOptionValue:     core.TSUnknown,
		description:              diagnostics.Generate_d_ts_files_from_TypeScript_and_JavaScript_files_in_your_project,
		defaultValueDescription:  diagnostics.X_false_unless_composite_is_set,
	},
	{
		name: "declarationMap",
		kind: CommandLineOptionTypeBoolean,
		// Not setting affectsEmit because we calculate this flag might not affect full emit
		affectsBuildInfo:         true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Emit,
		defaultValueDescription:  false,
		description:              diagnostics.Create_sourcemaps_for_d_ts_files,
	},
	{
		name: "emitDeclarationOnly",
		kind: CommandLineOptionTypeBoolean,
		// Not setting affectsEmit because we calculate this flag might not affect full emit
		affectsBuildInfo:         true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Emit,
		description:              diagnostics.Only_output_d_ts_files_and_not_JavaScript_files,
		transpileOptionValue:     core.TSUnknown,
		defaultValueDescription:  false,
	},
	{
		name: "sourceMap",
		kind: CommandLineOptionTypeBoolean,
		// Not setting affectsEmit because we calculate this flag might not affect full emit
		affectsBuildInfo:         true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Emit,
		defaultValueDescription:  false,
		description:              diagnostics.Create_source_map_files_for_emitted_JavaScript_files,
	},
	{
		name: "inlineSourceMap",
		kind: CommandLineOptionTypeBoolean,
		// Not setting affectsEmit because we calculate this flag might not affect full emit
		affectsBuildInfo:        true,
		category:                diagnostics.Emit,
		description:             diagnostics.Include_sourcemap_files_inside_the_emitted_JavaScript,
		defaultValueDescription: false,
	},
	{
		name:                     "noCheck",
		kind:                     CommandLineOptionTypeBoolean,
		showInSimplifiedHelpView: false,
		category:                 diagnostics.Compiler_Diagnostics,
		description:              diagnostics.Disable_full_type_checking_only_critical_parse_and_emit_errors_will_be_reported,
		transpileOptionValue:     core.TSTrue,
		defaultValueDescription:  false,
		// Not setting affectsSemanticDiagnostics or affectsBuildInfo because we dont want all diagnostics to go away, its handled in builder
	},
	{
		name:                     "noEmit",
		kind:                     CommandLineOptionTypeBoolean,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Emit,
		description:              diagnostics.Disable_emitting_files_from_a_compilation,
		transpileOptionValue:     core.TSUnknown,
		defaultValueDescription:  false,
	},
	{
		name:                       "assumeChangesOnlyAffectDirectDependencies",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsEmit:                true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Watch_and_Build_Modes,
		description:                diagnostics.Have_recompiles_in_projects_that_use_incremental_and_watch_mode_assume_that_changes_within_a_file_will_only_affect_files_directly_depending_on_it,
		defaultValueDescription:    false,
	},
	{
		name:                    "locale",
		kind:                    CommandLineOptionTypeString,
		category:                diagnostics.Command_line_Options,
		isCommandLineOnly:       true,
		description:             diagnostics.Set_the_language_of_the_messaging_from_TypeScript_This_does_not_affect_emit,
		defaultValueDescription: diagnostics.Platform_specific,
	},

	//******* commandOptionsWithoutBuild *******

	// CommandLine only options
	{
		name:                     "all",
		kind:                     CommandLineOptionTypeBoolean,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Command_line_Options,
		description:              diagnostics.Show_all_compiler_options,
		defaultValueDescription:  false,
	},
	{
		name:                     "version",
		shortName:                "v",
		kind:                     CommandLineOptionTypeBoolean,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Command_line_Options,
		description:              diagnostics.Print_the_compiler_s_version,
		defaultValueDescription:  false,
	},
	{
		name:                     "init",
		kind:                     CommandLineOptionTypeBoolean,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Command_line_Options,
		description:              diagnostics.Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file,
		defaultValueDescription:  false,
	},
	{
		name:                     "project",
		shortName:                "p",
		kind:                     CommandLineOptionTypeString,
		isFilePath:               true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Command_line_Options,
		description:              diagnostics.Compile_the_project_given_the_path_to_its_configuration_file_or_to_a_folder_with_a_tsconfig_json,
	},
	{
		name:                     "showConfig",
		kind:                     CommandLineOptionTypeBoolean,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Command_line_Options,
		isCommandLineOnly:        true,
		description:              diagnostics.Print_the_final_configuration_instead_of_building,
		defaultValueDescription:  false,
	},
	{
		name:                    "listFilesOnly",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Command_line_Options,
		isCommandLineOnly:       true,
		description:             diagnostics.Print_names_of_files_that_are_part_of_the_compilation_and_then_stop_processing,
		defaultValueDescription: false,
	},

	// Basic
	// targetOptionDeclaration,
	{
		name:                     "target",
		shortName:                "t",
		kind:                     CommandLineOptionTypeEnum, //targetOptionMap
		affectsSourceFile:        true,
		affectsModuleResolution:  true,
		affectsEmit:              true,
		affectsBuildInfo:         true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Language_and_Environment,
		description:              diagnostics.Set_the_JavaScript_language_version_for_emitted_JavaScript_and_include_compatible_library_declarations,
		defaultValueDescription:  core.ScriptTargetES5,
	},

	// moduleOptionDeclaration,
	{
		name:                     "module",
		shortName:                "m",
		kind:                     CommandLineOptionTypeEnum, //moduleOptionMap
		affectsSourceFile:        true,
		affectsModuleResolution:  true,
		affectsEmit:              true,
		affectsBuildInfo:         true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Modules,
		description:              diagnostics.Specify_what_module_code_is_generated,
		defaultValueDescription:  core.TSUnknown,
	},
	{
		name: "lib",
		kind: CommandLineOptionTypeList,
		// elements: &CommandLineOption{
		// 	name:                    "lib",
		// 	kind:                   CommandLineOptionTypeEnum, //libMap,
		// 	defaultValueDescription: core.TSUnknown,
		// },
		affectsProgramStructure:  true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Language_and_Environment,
		description:              diagnostics.Specify_a_set_of_bundled_library_declaration_files_that_describe_the_target_runtime_environment,
		transpileOptionValue:     core.TSUnknown,
	},
	{
		name:                     "allowJs",
		kind:                     CommandLineOptionTypeBoolean,
		allowJsFlag:              true,
		affectsBuildInfo:         true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.JavaScript_Support,
		description:              diagnostics.Allow_JavaScript_files_to_be_a_part_of_your_program_Use_the_checkJS_option_to_get_errors_from_these_files,
		defaultValueDescription:  false,
	},
	{
		name:                       "checkJs",
		kind:                       CommandLineOptionTypeBoolean,
		affectsModuleResolution:    true,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		showInSimplifiedHelpView:   true,
		category:                   diagnostics.JavaScript_Support,
		description:                diagnostics.Enable_error_reporting_in_type_checked_JavaScript_files,
		defaultValueDescription:    false,
	},
	{
		name:                    "jsx",
		kind:                    CommandLineOptionTypeEnum, //jsxOptionMap,
		affectsSourceFile:       true,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		affectsModuleResolution: true,
		// The checker emits an error when it sees JSX but this option is not set in compilerOptions.
		// This is effectively a semantic error, so mark this option as affecting semantic diagnostics
		// so we know to refresh errors when this option is changed.
		affectsSemanticDiagnostics: true,
		showInSimplifiedHelpView:   true,
		category:                   diagnostics.Language_and_Environment,
		description:                diagnostics.Specify_what_JSX_code_is_generated,
		defaultValueDescription:    core.TSUnknown,
	},
	{
		name:                     "outFile",
		kind:                     CommandLineOptionTypeString,
		affectsEmit:              true,
		affectsBuildInfo:         true,
		affectsDeclarationPath:   true,
		isFilePath:               true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Emit,
		description:              diagnostics.Specify_a_file_that_bundles_all_outputs_into_one_JavaScript_file_If_declaration_is_true_also_designates_a_file_that_bundles_all_d_ts_output,
		transpileOptionValue:     core.TSUnknown,
	},
	{
		name:                     "outDir",
		kind:                     CommandLineOptionTypeString,
		affectsEmit:              true,
		affectsBuildInfo:         true,
		affectsDeclarationPath:   true,
		isFilePath:               true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Emit,
		description:              diagnostics.Specify_an_output_folder_for_all_emitted_files,
	},
	{
		name:                    "rootDir",
		kind:                    CommandLineOptionTypeString,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		affectsDeclarationPath:  true,
		isFilePath:              true,
		category:                diagnostics.Modules,
		description:             diagnostics.Specify_the_root_folder_within_your_source_files,
		defaultValueDescription: diagnostics.Computed_from_the_list_of_input_files,
	},
	{
		name: "composite",
		kind: CommandLineOptionTypeBoolean,
		// Not setting affectsEmit because we calculate this flag might not affect full emit
		affectsBuildInfo:        true,
		isTSConfigOnly:          true,
		category:                diagnostics.Projects,
		transpileOptionValue:    core.TSUnknown,
		defaultValueDescription: false,
		description:             diagnostics.Enable_constraints_that_allow_a_TypeScript_project_to_be_used_with_project_references,
	},
	{
		name:                    "tsBuildInfoFile",
		kind:                    CommandLineOptionTypeString,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		isFilePath:              true,
		category:                diagnostics.Projects,
		transpileOptionValue:    core.TSUnknown,
		defaultValueDescription: ".tsbuildinfo",
		description:             diagnostics.Specify_the_path_to_tsbuildinfo_incremental_compilation_file,
	},
	{
		name:                     "removeComments",
		kind:                     CommandLineOptionTypeBoolean,
		affectsEmit:              true,
		affectsBuildInfo:         true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Emit,
		defaultValueDescription:  false,
		description:              diagnostics.Disable_emitting_comments,
	},
	{
		name:                    "importHelpers",
		kind:                    CommandLineOptionTypeBoolean,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		affectsSourceFile:       true,
		category:                diagnostics.Emit,
		description:             diagnostics.Allow_importing_helper_functions_from_tslib_once_per_project_instead_of_including_them_per_file,
		defaultValueDescription: false,
	},
	{
		name:                    "downlevelIteration",
		kind:                    CommandLineOptionTypeBoolean,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		category:                diagnostics.Emit,
		description:             diagnostics.Emit_more_compliant_but_verbose_and_less_performant_JavaScript_for_iteration,
		defaultValueDescription: false,
	},
	{
		name:                    "isolatedModules",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Interop_Constraints,
		description:             diagnostics.Ensure_that_each_file_can_be_safely_transpiled_without_relying_on_other_imports,
		transpileOptionValue:    core.TSTrue,
		defaultValueDescription: false,
	},
	{
		name:                       "verbatimModuleSyntax",
		kind:                       CommandLineOptionTypeBoolean,
		affectsEmit:                true,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Interop_Constraints,
		description:                diagnostics.Do_not_transform_or_elide_any_imports_or_exports_not_marked_as_type_only_ensuring_they_are_written_in_the_output_file_s_format_based_on_the_module_setting,
		defaultValueDescription:    false,
	},
	{
		name:                       "isolatedDeclarations",
		kind:                       CommandLineOptionTypeBoolean,
		category:                   diagnostics.Interop_Constraints,
		description:                diagnostics.Require_sufficient_annotation_on_exports_so_other_tools_can_trivially_generate_declaration_files,
		defaultValueDescription:    false,
		affectsBuildInfo:           true,
		affectsSemanticDiagnostics: true,
	},

	// Strict Type Checks
	{
		name: "strict",
		kind: CommandLineOptionTypeBoolean,
		// Though this affects semantic diagnostics, affectsSemanticDiagnostics is not set here
		// The value of each strictFlag depends on own strictFlag value or this and never accessed directly.
		// But we need to store `strict` in builf info, even though it won't be examined directly, so that the
		// flags it controls (e.g. `strictNullChecks`) will be retrieved correctly
		affectsBuildInfo:         true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Type_Checking,
		description:              diagnostics.Enable_all_strict_type_checking_options,
		defaultValueDescription:  false,
	},
	{
		name:                       "noImplicitAny",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		strictFlag:                 true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Enable_error_reporting_for_expressions_and_declarations_with_an_implied_any_type,
		defaultValueDescription:    diagnostics.X_false_unless_strict_is_set,
	},
	{
		name:                       "strictNullChecks",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		strictFlag:                 true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.When_type_checking_take_into_account_null_and_undefined,
		defaultValueDescription:    diagnostics.X_false_unless_strict_is_set,
	},
	{
		name:                       "strictFunctionTypes",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		strictFlag:                 true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.When_assigning_functions_check_to_ensure_parameters_and_the_return_values_are_subtype_compatible,
		defaultValueDescription:    diagnostics.X_false_unless_strict_is_set,
	},
	{
		name:                       "strictBindCallApply",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		strictFlag:                 true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Check_that_the_arguments_for_bind_call_and_apply_methods_match_the_original_function,
		defaultValueDescription:    diagnostics.X_false_unless_strict_is_set,
	},
	{
		name:                       "strictPropertyInitialization",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		strictFlag:                 true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Check_for_class_properties_that_are_declared_but_not_set_in_the_constructor,
		defaultValueDescription:    diagnostics.X_false_unless_strict_is_set,
	},
	{
		name:                       "strictBuiltinIteratorReturn",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		strictFlag:                 true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Built_in_iterators_are_instantiated_with_a_TReturn_type_of_undefined_instead_of_any,
		defaultValueDescription:    diagnostics.X_false_unless_strict_is_set,
	},
	{
		name:                       "noImplicitThis",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		strictFlag:                 true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Enable_error_reporting_when_this_is_given_the_type_any,
		defaultValueDescription:    diagnostics.X_false_unless_strict_is_set,
	},
	{
		name:                       "useUnknownInCatchVariables",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		strictFlag:                 true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Default_catch_clause_variables_as_unknown_instead_of_any,
		defaultValueDescription:    diagnostics.X_false_unless_strict_is_set,
	},
	{
		name:                    "alwaysStrict",
		kind:                    CommandLineOptionTypeBoolean,
		affectsSourceFile:       true,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		strictFlag:              true,
		category:                diagnostics.Type_Checking,
		description:             diagnostics.Ensure_use_strict_is_always_emitted,
		defaultValueDescription: diagnostics.X_false_unless_strict_is_set,
	},

	// Additional Checks
	{
		name:                       "noUnusedLocals",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Enable_error_reporting_when_local_variables_aren_t_read,
		defaultValueDescription:    false,
	},
	{
		name:                       "noUnusedParameters",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Raise_an_error_when_a_function_parameter_isn_t_read,
		defaultValueDescription:    false,
	},
	{
		name:                       "exactOptionalPropertyTypes",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Interpret_optional_property_types_as_written_rather_than_adding_undefined,
		defaultValueDescription:    false,
	},
	{
		name:                       "noImplicitReturns",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Enable_error_reporting_for_codepaths_that_do_not_explicitly_return_in_a_function,
		defaultValueDescription:    false,
	},
	{
		name:                       "noFallthroughCasesInSwitch",
		kind:                       CommandLineOptionTypeBoolean,
		affectsBindDiagnostics:     true,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Enable_error_reporting_for_fallthrough_cases_in_switch_statements,
		defaultValueDescription:    false,
	},
	{
		name:                       "noUncheckedIndexedAccess",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Add_undefined_to_a_type_when_accessed_using_an_index,
		defaultValueDescription:    false,
	},
	{
		name:                       "noImplicitOverride",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Ensure_overriding_members_in_derived_classes_are_marked_with_an_override_modifier,
		defaultValueDescription:    false,
	},
	{
		name:                       "noPropertyAccessFromIndexSignature",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		showInSimplifiedHelpView:   false,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Enforces_using_indexed_accessors_for_keys_declared_using_an_indexed_type,
		defaultValueDescription:    false,
	},

	// Module Resolution
	{
		name: "moduleResolution",
		kind: CommandLineOptionTypeEnum,
		//    new Map(Object.entries({
		//         // N.B. The first entry specifies the value shown in `tsc --init`
		//         node10: ModuleResolutionKind.Node10,
		//         node: ModuleResolutionKind.Node10,
		//         classic: ModuleResolutionKind.Classic,
		//         node16: ModuleResolutionKind.Node16,
		//         nodenext: ModuleResolutionKind.NodeNext,
		//         bundler: ModuleResolutionKind.Bundler,
		//     })),
		affectsSourceFile:       true,
		affectsModuleResolution: true,
		category:                diagnostics.Modules,
		description:             diagnostics.Specify_how_TypeScript_looks_up_a_file_from_a_given_module_specifier,
		defaultValueDescription: diagnostics.X_module_AMD_or_UMD_or_System_or_ES6_then_Classic_Otherwise_Node,
	},
	{
		name:                    "baseUrl",
		kind:                    CommandLineOptionTypeString,
		affectsModuleResolution: true,
		isFilePath:              true,
		category:                diagnostics.Modules,
		description:             diagnostics.Specify_the_base_directory_to_resolve_non_relative_module_names,
	},
	{
		// this option can only be specified in tsconfig.json
		// use type = object to copy the value as-is
		name:                               "paths",
		kind:                               CommandLineOptionTypeObject,
		affectsModuleResolution:            true,
		allowConfigDirTemplateSubstitution: true,
		isTSConfigOnly:                     true,
		category:                           diagnostics.Modules,
		description:                        diagnostics.Specify_a_set_of_entries_that_re_map_imports_to_additional_lookup_locations,
		transpileOptionValue:               core.TSUnknown,
	},
	{
		// this option can only be specified in tsconfig.json
		// use type = object to copy the value as-is
		name:                               "rootDirs",
		kind:                               CommandLineOptionTypeList,
		isTSConfigOnly:                     true,
		affectsModuleResolution:            true,
		allowConfigDirTemplateSubstitution: true,
		category:                           diagnostics.Modules,
		description:                        diagnostics.Allow_multiple_folders_to_be_treated_as_one_when_resolving_modules,
		transpileOptionValue:               core.TSUnknown,
		defaultValueDescription:            diagnostics.Computed_from_the_list_of_input_files,
	},
	{
		name:                               "typeRoots",
		kind:                               CommandLineOptionTypeList,
		affectsModuleResolution:            true,
		allowConfigDirTemplateSubstitution: true,
		category:                           diagnostics.Modules,
		description:                        diagnostics.Specify_multiple_folders_that_act_like_Slashnode_modules_Slash_types,
	},
	{
		name:                     "types",
		kind:                     CommandLineOptionTypeList,
		affectsProgramStructure:  true,
		showInSimplifiedHelpView: true,
		category:                 diagnostics.Modules,
		description:              diagnostics.Specify_type_package_names_to_be_included_without_being_referenced_in_a_source_file,
		transpileOptionValue:     core.TSUnknown,
	},
	{
		name:                       "allowSyntheticDefaultImports",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Interop_Constraints,
		description:                diagnostics.Allow_import_x_from_y_when_a_module_doesn_t_have_a_default_export,
		defaultValueDescription:    diagnostics.X_module_system_or_esModuleInterop,
	},
	{
		name:                       "esModuleInterop",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsEmit:                true,
		affectsBuildInfo:           true,
		showInSimplifiedHelpView:   true,
		category:                   diagnostics.Interop_Constraints,
		description:                diagnostics.Emit_additional_JavaScript_to_ease_support_for_importing_CommonJS_modules_This_enables_allowSyntheticDefaultImports_for_type_compatibility,
		defaultValueDescription:    false,
	},
	{
		name:                    "preserveSymlinks",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Interop_Constraints,
		description:             diagnostics.Disable_resolving_symlinks_to_their_realpath_This_correlates_to_the_same_flag_in_node,
		defaultValueDescription: false,
	},
	{
		name:                       "allowUmdGlobalAccess",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Modules,
		description:                diagnostics.Allow_accessing_UMD_globals_from_modules,
		defaultValueDescription:    false,
	},
	{
		name:                    "moduleSuffixes",
		kind:                    CommandLineOptionTypeList,
		listPreserveFalsyValues: true,
		affectsModuleResolution: true,
		category:                diagnostics.Modules,
		description:             diagnostics.List_of_file_name_suffixes_to_search_when_resolving_a_module,
	},
	{
		name:                       "allowImportingTsExtensions",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Modules,
		description:                diagnostics.Allow_imports_to_include_TypeScript_file_extensions_Requires_moduleResolution_bundler_and_either_noEmit_or_emitDeclarationOnly_to_be_set,
		defaultValueDescription:    false,
		transpileOptionValue:       core.TSUnknown,
	},
	{
		name:                       "rewriteRelativeImportExtensions",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Modules,
		// description: diagnostics.Rewrite_ts_tsx_mts_and_cts_file_extensions_in_relative_import_paths_to_their_JavaScript_equivalent_in_output_files,
		defaultValueDescription: false,
	},
	{
		name:                    "resolvePackageJsonExports",
		kind:                    CommandLineOptionTypeBoolean,
		affectsModuleResolution: true,
		category:                diagnostics.Modules,
		description:             diagnostics.Use_the_package_json_exports_field_when_resolving_package_imports,
		defaultValueDescription: diagnostics.X_true_when_moduleResolution_is_node16_nodenext_or_bundler_otherwise_false,
	},
	{
		name:                    "resolvePackageJsonImports",
		kind:                    CommandLineOptionTypeBoolean,
		affectsModuleResolution: true,
		category:                diagnostics.Modules,
		description:             diagnostics.Use_the_package_json_imports_field_when_resolving_imports,
		defaultValueDescription: diagnostics.X_true_when_moduleResolution_is_node16_nodenext_or_bundler_otherwise_false,
	},
	{
		name:                    "customConditions",
		kind:                    CommandLineOptionTypeList,
		affectsModuleResolution: true,
		category:                diagnostics.Modules,
		description:             diagnostics.Conditions_to_set_in_addition_to_the_resolver_specific_defaults_when_resolving_imports,
	},
	{
		name:                       "noUncheckedSideEffectImports",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Modules,
		description:                diagnostics.Check_side_effect_imports,
		defaultValueDescription:    false,
	},

	// Source Maps
	{
		name:             "sourceRoot",
		kind:             CommandLineOptionTypeString,
		affectsEmit:      true,
		affectsBuildInfo: true,
		category:         diagnostics.Emit,
		description:      diagnostics.Specify_the_root_path_for_debuggers_to_find_the_reference_source_code,
	},
	{
		name:             "mapRoot",
		kind:             CommandLineOptionTypeString,
		affectsEmit:      true,
		affectsBuildInfo: true,
		category:         diagnostics.Emit,
		description:      diagnostics.Specify_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations,
	},
	{
		name:                    "inlineSources",
		kind:                    CommandLineOptionTypeBoolean,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		category:                diagnostics.Emit,
		description:             diagnostics.Include_source_code_in_the_sourcemaps_inside_the_emitted_JavaScript,
		defaultValueDescription: false,
	},

	// Experimental
	{
		name:                       "experimentalDecorators",
		kind:                       CommandLineOptionTypeBoolean,
		affectsEmit:                true,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Language_and_Environment,
		description:                diagnostics.Enable_experimental_support_for_legacy_experimental_decorators,
		defaultValueDescription:    false,
	},
	{
		name:                       "emitDecoratorMetadata",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsEmit:                true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Language_and_Environment,
		description:                diagnostics.Emit_design_type_metadata_for_decorated_declarations_in_source_files,
		defaultValueDescription:    false,
	},

	// Advanced
	{
		name:                    "jsxFactory",
		kind:                    CommandLineOptionTypeString,
		category:                diagnostics.Language_and_Environment,
		description:             diagnostics.Specify_the_JSX_factory_function_used_when_targeting_React_JSX_emit_e_g_React_createElement_or_h,
		defaultValueDescription: "`React.createElement`",
	},
	{
		name:                    "jsxFragmentFactory",
		kind:                    CommandLineOptionTypeString,
		category:                diagnostics.Language_and_Environment,
		description:             diagnostics.Specify_the_JSX_Fragment_reference_used_for_fragments_when_targeting_React_JSX_emit_e_g_React_Fragment_or_Fragment,
		defaultValueDescription: "React.Fragment",
	},
	{
		name:                       "jsxImportSource",
		kind:                       CommandLineOptionTypeString,
		affectsSemanticDiagnostics: true,
		affectsEmit:                true,
		affectsBuildInfo:           true,
		affectsModuleResolution:    true,
		affectsSourceFile:          true,
		category:                   diagnostics.Language_and_Environment,
		description:                diagnostics.Specify_module_specifier_used_to_import_the_JSX_factory_functions_when_using_jsx_Colon_react_jsx_Asterisk,
		defaultValueDescription:    "react",
	},
	{
		name:                    "resolveJsonModule",
		kind:                    CommandLineOptionTypeBoolean,
		affectsModuleResolution: true,
		category:                diagnostics.Modules,
		description:             diagnostics.Enable_importing_json_files,
		defaultValueDescription: false,
	},
	{
		name:                    "allowArbitraryExtensions",
		kind:                    CommandLineOptionTypeBoolean,
		affectsProgramStructure: true,
		category:                diagnostics.Modules,
		description:             diagnostics.Enable_importing_files_with_any_extension_provided_a_declaration_file_is_present,
		defaultValueDescription: false,
	},

	{
		name:                   "out",
		kind:                   CommandLineOptionTypeString,
		affectsEmit:            true,
		affectsBuildInfo:       true,
		affectsDeclarationPath: true,
		isFilePath:             false, // This is intentionally broken to support compatibility with existing tsconfig files
		// for correct behaviour, please use outFile
		category:             diagnostics.Backwards_Compatibility,
		transpileOptionValue: core.TSUnknown,
		description:          diagnostics.Deprecated_setting_Use_outFile_instead,
	},
	{
		name:                    "reactNamespace",
		kind:                    CommandLineOptionTypeString,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		category:                diagnostics.Language_and_Environment,
		description:             diagnostics.Specify_the_object_invoked_for_createElement_This_only_applies_when_targeting_react_JSX_emit,
		defaultValueDescription: "`React`",
	},
	{
		name: "skipDefaultLibCheck",
		kind: CommandLineOptionTypeBoolean,
		// We need to store these to determine whether `lib` files need to be rechecked
		affectsBuildInfo:        true,
		category:                diagnostics.Completeness,
		description:             diagnostics.Skip_type_checking_d_ts_files_that_are_included_with_TypeScript,
		defaultValueDescription: false,
	},
	{
		name:                    "charset",
		kind:                    CommandLineOptionTypeString,
		category:                diagnostics.Backwards_Compatibility,
		description:             diagnostics.No_longer_supported_In_early_versions_manually_set_the_text_encoding_for_reading_files,
		defaultValueDescription: "utf8",
	},
	{
		name:                    "emitBOM",
		kind:                    CommandLineOptionTypeBoolean,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		category:                diagnostics.Emit,
		description:             diagnostics.Emit_a_UTF_8_Byte_Order_Mark_BOM_in_the_beginning_of_output_files,
		defaultValueDescription: false,
	},
	{
		name:                    "newLine",
		kind:                    CommandLineOptionTypeEnum, //newLineOptionMap,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		category:                diagnostics.Emit,
		description:             diagnostics.Set_the_newline_character_for_emitting_files,
		defaultValueDescription: "lf",
	},
	{
		name:                       "noErrorTruncation",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Output_Formatting,
		description:                diagnostics.Disable_truncating_types_in_error_messages,
		defaultValueDescription:    false,
	},
	{
		name:                    "noLib",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Language_and_Environment,
		affectsProgramStructure: true,
		description:             diagnostics.Disable_including_any_library_files_including_the_default_lib_d_ts,
		// We are not returning a sourceFile for lib file when asked by the program,
		// so pass --noLib to avoid reporting a file not found error.
		transpileOptionValue:    core.TSTrue,
		defaultValueDescription: false,
	},
	{
		name:                    "noResolve",
		kind:                    CommandLineOptionTypeBoolean,
		affectsModuleResolution: true,
		category:                diagnostics.Modules,
		description:             diagnostics.Disallow_import_s_require_s_or_reference_s_from_expanding_the_number_of_files_TypeScript_should_add_to_a_project,
		// We are not doing a full typecheck, we are not resolving the whole context,
		// so pass --noResolve to avoid reporting missing file errors.
		transpileOptionValue:    core.TSTrue,
		defaultValueDescription: false,
	},
	{
		name:                    "stripInternal",
		kind:                    CommandLineOptionTypeBoolean,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		category:                diagnostics.Emit,
		description:             diagnostics.Disable_emitting_declarations_that_have_internal_in_their_JSDoc_comments,
		defaultValueDescription: false,
	},
	{
		name:                    "disableSizeLimit",
		kind:                    CommandLineOptionTypeBoolean,
		affectsProgramStructure: true,
		category:                diagnostics.Editor_Support,
		description:             diagnostics.Remove_the_20mb_cap_on_total_source_code_size_for_JavaScript_files_in_the_TypeScript_language_server,
		defaultValueDescription: false,
	},
	{
		name:                    "disableSourceOfProjectReferenceRedirect",
		kind:                    CommandLineOptionTypeBoolean,
		isTSConfigOnly:          true,
		category:                diagnostics.Projects,
		description:             diagnostics.Disable_preferring_source_files_instead_of_declaration_files_when_referencing_composite_projects,
		defaultValueDescription: false,
	},
	{
		name:                    "disableSolutionSearching",
		kind:                    CommandLineOptionTypeBoolean,
		isTSConfigOnly:          true,
		category:                diagnostics.Projects,
		description:             diagnostics.Opt_a_project_out_of_multi_project_reference_checking_when_editing,
		defaultValueDescription: false,
	},
	{
		name:                    "disableReferencedProjectLoad",
		kind:                    CommandLineOptionTypeBoolean,
		isTSConfigOnly:          true,
		category:                diagnostics.Projects,
		description:             diagnostics.Reduce_the_number_of_projects_loaded_automatically_by_TypeScript,
		defaultValueDescription: false,
	},
	{
		name:                       "noImplicitUseStrict",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Backwards_Compatibility,
		description:                diagnostics.Disable_adding_use_strict_directives_in_emitted_JavaScript_files,
		defaultValueDescription:    false,
	},
	{
		name:                    "noEmitHelpers",
		kind:                    CommandLineOptionTypeBoolean,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		category:                diagnostics.Emit,
		description:             diagnostics.Disable_generating_custom_helper_functions_like_extends_in_compiled_output,
		defaultValueDescription: false,
	},
	{
		name:                    "noEmitOnError",
		kind:                    CommandLineOptionTypeBoolean,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		category:                diagnostics.Emit,
		transpileOptionValue:    core.TSUnknown,
		description:             diagnostics.Disable_emitting_files_if_any_type_checking_errors_are_reported,
		defaultValueDescription: false,
	},
	{
		name:                    "preserveConstEnums",
		kind:                    CommandLineOptionTypeBoolean,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		category:                diagnostics.Emit,
		description:             diagnostics.Disable_erasing_const_enum_declarations_in_generated_code,
		defaultValueDescription: false,
	},
	{
		name:                   "declarationDir",
		kind:                   CommandLineOptionTypeString,
		affectsEmit:            true,
		affectsBuildInfo:       true,
		affectsDeclarationPath: true,
		isFilePath:             true,
		category:               diagnostics.Emit,
		transpileOptionValue:   core.TSUnknown,
		description:            diagnostics.Specify_the_output_directory_for_generated_declaration_files,
	},
	{
		name: "skipLibCheck",
		kind: CommandLineOptionTypeBoolean,
		// We need to store these to determine whether `lib` files need to be rechecked
		affectsBuildInfo:        true,
		category:                diagnostics.Completeness,
		description:             diagnostics.Skip_type_checking_all_d_ts_files,
		defaultValueDescription: false,
	},
	{
		name:                       "allowUnusedLabels",
		kind:                       CommandLineOptionTypeBoolean,
		affectsBindDiagnostics:     true,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Disable_error_reporting_for_unused_labels,
		defaultValueDescription:    core.TSUnknown,
	},
	{
		name:                       "allowUnreachableCode",
		kind:                       CommandLineOptionTypeBoolean,
		affectsBindDiagnostics:     true,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Type_Checking,
		description:                diagnostics.Disable_error_reporting_for_unreachable_code,
		defaultValueDescription:    core.TSUnknown,
	},
	{
		name:                       "suppressExcessPropertyErrors",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Backwards_Compatibility,
		description:                diagnostics.Disable_reporting_of_excess_property_errors_during_the_creation_of_object_literals,
		defaultValueDescription:    false,
	},
	{
		name:                       "suppressImplicitAnyIndexErrors",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Backwards_Compatibility,
		description:                diagnostics.Suppress_noImplicitAny_errors_when_indexing_objects_that_lack_index_signatures,
		defaultValueDescription:    false,
	},
	{
		name:                    "forceConsistentCasingInFileNames",
		kind:                    CommandLineOptionTypeBoolean,
		affectsModuleResolution: true,
		category:                diagnostics.Interop_Constraints,
		description:             diagnostics.Ensure_that_casing_is_correct_in_imports,
		defaultValueDescription: true,
	},
	{
		name:                    "maxNodeModuleJsDepth",
		kind:                    CommandLineOptionTypeNumber,
		affectsModuleResolution: true,
		category:                diagnostics.JavaScript_Support,
		description:             diagnostics.Specify_the_maximum_folder_depth_used_for_checking_JavaScript_files_from_node_modules_Only_applicable_with_allowJs,
		defaultValueDescription: 0,
	},
	{
		name:                       "noStrictGenericChecks",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Backwards_Compatibility,
		description:                diagnostics.Disable_strict_checking_of_generic_signatures_in_function_types,
		defaultValueDescription:    false,
	},
	{
		name:                       "useDefineForClassFields",
		kind:                       CommandLineOptionTypeBoolean,
		affectsSemanticDiagnostics: true,
		affectsEmit:                true,
		affectsBuildInfo:           true,
		category:                   diagnostics.Language_and_Environment,
		description:                diagnostics.Emit_ECMAScript_standard_compliant_class_fields,
		defaultValueDescription:    diagnostics.X_true_for_ES2022_and_above_including_ESNext,
	},
	{
		name:                    "preserveValueImports",
		kind:                    CommandLineOptionTypeBoolean,
		affectsEmit:             true,
		affectsBuildInfo:        true,
		category:                diagnostics.Backwards_Compatibility,
		description:             diagnostics.Preserve_unused_imported_values_in_the_JavaScript_output_that_would_otherwise_be_removed,
		defaultValueDescription: false,
	},

	{
		name:                    "keyofStringsOnly",
		kind:                    CommandLineOptionTypeBoolean,
		category:                diagnostics.Backwards_Compatibility,
		description:             diagnostics.Make_keyof_only_return_strings_instead_of_string_numbers_or_symbols_Legacy_option,
		defaultValueDescription: false,
	},
	{
		// A list of plugins to load in the language service
		name:           "plugins",
		kind:           CommandLineOptionTypeList,
		isTSConfigOnly: true,
		description:    diagnostics.Specify_a_list_of_language_service_plugins_to_include,
		category:       diagnostics.Editor_Support,
	},
	{
		name:                    "moduleDetection",
		kind:                    CommandLineOptionTypeEnum,
		affectsSourceFile:       true,
		affectsModuleResolution: true,
		description:             diagnostics.Control_what_method_is_used_to_detect_module_format_JS_files,
		category:                diagnostics.Language_and_Environment,
		defaultValueDescription: diagnostics.X_auto_Colon_Treat_files_with_imports_exports_import_meta_jsx_with_jsx_Colon_react_jsx_or_esm_format_with_module_Colon_node16_as_modules,
	},
	{
		name:                    "ignoreDeprecations",
		kind:                    CommandLineOptionTypeString,
		defaultValueDescription: core.TSUnknown,
	},
}
