// Code generated by generate2.mjs; DO NOT EDIT.

package lsproto

import (
	"encoding/json"
	"fmt"
)

// Meta model version 3.17.0

// Union types

type LocationOrLocations struct {
	Location  *Location
	Locations *[]*Location
}

func (o LocationOrLocations) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of LocationOrLocations is set", o.Location != nil, o.Locations != nil)

	if o.Location != nil {
		return json.Marshal(*o.Location)
	}
	if o.Locations != nil {
		return json.Marshal(*o.Locations)
	}
	return []byte("null"), nil
}

func (o *LocationOrLocations) UnmarshalJSON(data []byte) error {
	*o = LocationOrLocations{}
	if string(data) == "null" {
		return nil
	}

	{
		var v Location
		if err := json.Unmarshal(data, &v); err == nil {
			o.Location = &v
			return nil
		}
	}
	{
		var v []*Location
		if err := json.Unmarshal(data, &v); err == nil {
			o.Locations = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into LocationOrLocations", string(data))
}

type InlineValueTextOrInlineValueVariableLookupOrInlineValueEvaluatableExpression struct {
	InlineValueText                  *InlineValueText
	InlineValueVariableLookup        *InlineValueVariableLookup
	InlineValueEvaluatableExpression *InlineValueEvaluatableExpression
}

func (o InlineValueTextOrInlineValueVariableLookupOrInlineValueEvaluatableExpression) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of InlineValueTextOrInlineValueVariableLookupOrInlineValueEvaluatableExpression is set", o.InlineValueText != nil, o.InlineValueVariableLookup != nil, o.InlineValueEvaluatableExpression != nil)

	if o.InlineValueText != nil {
		return json.Marshal(*o.InlineValueText)
	}
	if o.InlineValueVariableLookup != nil {
		return json.Marshal(*o.InlineValueVariableLookup)
	}
	if o.InlineValueEvaluatableExpression != nil {
		return json.Marshal(*o.InlineValueEvaluatableExpression)
	}
	return []byte("null"), nil
}

func (o *InlineValueTextOrInlineValueVariableLookupOrInlineValueEvaluatableExpression) UnmarshalJSON(data []byte) error {
	*o = InlineValueTextOrInlineValueVariableLookupOrInlineValueEvaluatableExpression{}
	if string(data) == "null" {
		return nil
	}

	{
		var v InlineValueText
		if err := json.Unmarshal(data, &v); err == nil {
			o.InlineValueText = &v
			return nil
		}
	}
	{
		var v InlineValueVariableLookup
		if err := json.Unmarshal(data, &v); err == nil {
			o.InlineValueVariableLookup = &v
			return nil
		}
	}
	{
		var v InlineValueEvaluatableExpression
		if err := json.Unmarshal(data, &v); err == nil {
			o.InlineValueEvaluatableExpression = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into InlineValueTextOrInlineValueVariableLookupOrInlineValueEvaluatableExpression", string(data))
}

type RelatedFullDocumentDiagnosticReportOrRelatedUnchangedDocumentDiagnosticReport struct {
	RelatedFullDocumentDiagnosticReport      *RelatedFullDocumentDiagnosticReport
	RelatedUnchangedDocumentDiagnosticReport *RelatedUnchangedDocumentDiagnosticReport
}

func (o RelatedFullDocumentDiagnosticReportOrRelatedUnchangedDocumentDiagnosticReport) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of RelatedFullDocumentDiagnosticReportOrRelatedUnchangedDocumentDiagnosticReport is set", o.RelatedFullDocumentDiagnosticReport != nil, o.RelatedUnchangedDocumentDiagnosticReport != nil)

	if o.RelatedFullDocumentDiagnosticReport != nil {
		return json.Marshal(*o.RelatedFullDocumentDiagnosticReport)
	}
	if o.RelatedUnchangedDocumentDiagnosticReport != nil {
		return json.Marshal(*o.RelatedUnchangedDocumentDiagnosticReport)
	}
	return []byte("null"), nil
}

func (o *RelatedFullDocumentDiagnosticReportOrRelatedUnchangedDocumentDiagnosticReport) UnmarshalJSON(data []byte) error {
	*o = RelatedFullDocumentDiagnosticReportOrRelatedUnchangedDocumentDiagnosticReport{}
	if string(data) == "null" {
		return nil
	}

	{
		var v RelatedFullDocumentDiagnosticReport
		if err := json.Unmarshal(data, &v); err == nil {
			o.RelatedFullDocumentDiagnosticReport = &v
			return nil
		}
	}
	{
		var v RelatedUnchangedDocumentDiagnosticReport
		if err := json.Unmarshal(data, &v); err == nil {
			o.RelatedUnchangedDocumentDiagnosticReport = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into RelatedFullDocumentDiagnosticReportOrRelatedUnchangedDocumentDiagnosticReport", string(data))
}

type RangeOrPrepareRenamePlaceholderOrPrepareRenameDefaultBehavior struct {
	Range                        *Range
	PrepareRenamePlaceholder     *PrepareRenamePlaceholder
	PrepareRenameDefaultBehavior *PrepareRenameDefaultBehavior
}

func (o RangeOrPrepareRenamePlaceholderOrPrepareRenameDefaultBehavior) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of RangeOrPrepareRenamePlaceholderOrPrepareRenameDefaultBehavior is set", o.Range != nil, o.PrepareRenamePlaceholder != nil, o.PrepareRenameDefaultBehavior != nil)

	if o.Range != nil {
		return json.Marshal(*o.Range)
	}
	if o.PrepareRenamePlaceholder != nil {
		return json.Marshal(*o.PrepareRenamePlaceholder)
	}
	if o.PrepareRenameDefaultBehavior != nil {
		return json.Marshal(*o.PrepareRenameDefaultBehavior)
	}
	return []byte("null"), nil
}

func (o *RangeOrPrepareRenamePlaceholderOrPrepareRenameDefaultBehavior) UnmarshalJSON(data []byte) error {
	*o = RangeOrPrepareRenamePlaceholderOrPrepareRenameDefaultBehavior{}
	if string(data) == "null" {
		return nil
	}

	{
		var v Range
		if err := json.Unmarshal(data, &v); err == nil {
			o.Range = &v
			return nil
		}
	}
	{
		var v PrepareRenamePlaceholder
		if err := json.Unmarshal(data, &v); err == nil {
			o.PrepareRenamePlaceholder = &v
			return nil
		}
	}
	{
		var v PrepareRenameDefaultBehavior
		if err := json.Unmarshal(data, &v); err == nil {
			o.PrepareRenameDefaultBehavior = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into RangeOrPrepareRenamePlaceholderOrPrepareRenameDefaultBehavior", string(data))
}

type IntegerOrString struct {
	Integer *int32
	String  *string
}

func (o IntegerOrString) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of IntegerOrString is set", o.Integer != nil, o.String != nil)

	if o.Integer != nil {
		return json.Marshal(*o.Integer)
	}
	if o.String != nil {
		return json.Marshal(*o.String)
	}
	return []byte("null"), nil
}

func (o *IntegerOrString) UnmarshalJSON(data []byte) error {
	*o = IntegerOrString{}
	if string(data) == "null" {
		return nil
	}

	{
		var v int32
		if err := json.Unmarshal(data, &v); err == nil {
			o.Integer = &v
			return nil
		}
	}
	{
		var v string
		if err := json.Unmarshal(data, &v); err == nil {
			o.String = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into IntegerOrString", string(data))
}

type WorkspaceFullDocumentDiagnosticReportOrWorkspaceUnchangedDocumentDiagnosticReport struct {
	WorkspaceFullDocumentDiagnosticReport      *WorkspaceFullDocumentDiagnosticReport
	WorkspaceUnchangedDocumentDiagnosticReport *WorkspaceUnchangedDocumentDiagnosticReport
}

func (o WorkspaceFullDocumentDiagnosticReportOrWorkspaceUnchangedDocumentDiagnosticReport) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of WorkspaceFullDocumentDiagnosticReportOrWorkspaceUnchangedDocumentDiagnosticReport is set", o.WorkspaceFullDocumentDiagnosticReport != nil, o.WorkspaceUnchangedDocumentDiagnosticReport != nil)

	if o.WorkspaceFullDocumentDiagnosticReport != nil {
		return json.Marshal(*o.WorkspaceFullDocumentDiagnosticReport)
	}
	if o.WorkspaceUnchangedDocumentDiagnosticReport != nil {
		return json.Marshal(*o.WorkspaceUnchangedDocumentDiagnosticReport)
	}
	return []byte("null"), nil
}

func (o *WorkspaceFullDocumentDiagnosticReportOrWorkspaceUnchangedDocumentDiagnosticReport) UnmarshalJSON(data []byte) error {
	*o = WorkspaceFullDocumentDiagnosticReportOrWorkspaceUnchangedDocumentDiagnosticReport{}
	if string(data) == "null" {
		return nil
	}

	{
		var v WorkspaceFullDocumentDiagnosticReport
		if err := json.Unmarshal(data, &v); err == nil {
			o.WorkspaceFullDocumentDiagnosticReport = &v
			return nil
		}
	}
	{
		var v WorkspaceUnchangedDocumentDiagnosticReport
		if err := json.Unmarshal(data, &v); err == nil {
			o.WorkspaceUnchangedDocumentDiagnosticReport = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into WorkspaceFullDocumentDiagnosticReportOrWorkspaceUnchangedDocumentDiagnosticReport", string(data))
}

type TextDocumentContentChangePartialOrTextDocumentContentChangeWholeDocument struct {
	TextDocumentContentChangePartial       *TextDocumentContentChangePartial
	TextDocumentContentChangeWholeDocument *TextDocumentContentChangeWholeDocument
}

func (o TextDocumentContentChangePartialOrTextDocumentContentChangeWholeDocument) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of TextDocumentContentChangePartialOrTextDocumentContentChangeWholeDocument is set", o.TextDocumentContentChangePartial != nil, o.TextDocumentContentChangeWholeDocument != nil)

	if o.TextDocumentContentChangePartial != nil {
		return json.Marshal(*o.TextDocumentContentChangePartial)
	}
	if o.TextDocumentContentChangeWholeDocument != nil {
		return json.Marshal(*o.TextDocumentContentChangeWholeDocument)
	}
	return []byte("null"), nil
}

func (o *TextDocumentContentChangePartialOrTextDocumentContentChangeWholeDocument) UnmarshalJSON(data []byte) error {
	*o = TextDocumentContentChangePartialOrTextDocumentContentChangeWholeDocument{}
	if string(data) == "null" {
		return nil
	}

	{
		var v TextDocumentContentChangePartial
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextDocumentContentChangePartial = &v
			return nil
		}
	}
	{
		var v TextDocumentContentChangeWholeDocument
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextDocumentContentChangeWholeDocument = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into TextDocumentContentChangePartialOrTextDocumentContentChangeWholeDocument", string(data))
}

type StringOrMarkedStringWithLanguage struct {
	String                   *string
	MarkedStringWithLanguage *MarkedStringWithLanguage
}

func (o StringOrMarkedStringWithLanguage) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of StringOrMarkedStringWithLanguage is set", o.String != nil, o.MarkedStringWithLanguage != nil)

	if o.String != nil {
		return json.Marshal(*o.String)
	}
	if o.MarkedStringWithLanguage != nil {
		return json.Marshal(*o.MarkedStringWithLanguage)
	}
	return []byte("null"), nil
}

func (o *StringOrMarkedStringWithLanguage) UnmarshalJSON(data []byte) error {
	*o = StringOrMarkedStringWithLanguage{}
	if string(data) == "null" {
		return nil
	}

	{
		var v string
		if err := json.Unmarshal(data, &v); err == nil {
			o.String = &v
			return nil
		}
	}
	{
		var v MarkedStringWithLanguage
		if err := json.Unmarshal(data, &v); err == nil {
			o.MarkedStringWithLanguage = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into StringOrMarkedStringWithLanguage", string(data))
}

type TextDocumentFilterOrNotebookCellTextDocumentFilter struct {
	TextDocumentFilter             *TextDocumentFilterLanguageOrTextDocumentFilterSchemeOrTextDocumentFilterPattern
	NotebookCellTextDocumentFilter *NotebookCellTextDocumentFilter
}

func (o TextDocumentFilterOrNotebookCellTextDocumentFilter) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of TextDocumentFilterOrNotebookCellTextDocumentFilter is set", o.TextDocumentFilter != nil, o.NotebookCellTextDocumentFilter != nil)

	if o.TextDocumentFilter != nil {
		return json.Marshal(*o.TextDocumentFilter)
	}
	if o.NotebookCellTextDocumentFilter != nil {
		return json.Marshal(*o.NotebookCellTextDocumentFilter)
	}
	return []byte("null"), nil
}

func (o *TextDocumentFilterOrNotebookCellTextDocumentFilter) UnmarshalJSON(data []byte) error {
	*o = TextDocumentFilterOrNotebookCellTextDocumentFilter{}
	if string(data) == "null" {
		return nil
	}

	{
		var v TextDocumentFilterLanguageOrTextDocumentFilterSchemeOrTextDocumentFilterPattern
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextDocumentFilter = &v
			return nil
		}
	}
	{
		var v NotebookCellTextDocumentFilter
		if err := json.Unmarshal(data, &v); err == nil {
			o.NotebookCellTextDocumentFilter = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into TextDocumentFilterOrNotebookCellTextDocumentFilter", string(data))
}

type PatternOrRelativePattern struct {
	Pattern         *string
	RelativePattern *RelativePattern
}

func (o PatternOrRelativePattern) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of PatternOrRelativePattern is set", o.Pattern != nil, o.RelativePattern != nil)

	if o.Pattern != nil {
		return json.Marshal(*o.Pattern)
	}
	if o.RelativePattern != nil {
		return json.Marshal(*o.RelativePattern)
	}
	return []byte("null"), nil
}

func (o *PatternOrRelativePattern) UnmarshalJSON(data []byte) error {
	*o = PatternOrRelativePattern{}
	if string(data) == "null" {
		return nil
	}

	{
		var v string
		if err := json.Unmarshal(data, &v); err == nil {
			o.Pattern = &v
			return nil
		}
	}
	{
		var v RelativePattern
		if err := json.Unmarshal(data, &v); err == nil {
			o.RelativePattern = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into PatternOrRelativePattern", string(data))
}

type TextDocumentFilterLanguageOrTextDocumentFilterSchemeOrTextDocumentFilterPattern struct {
	TextDocumentFilterLanguage *TextDocumentFilterLanguage
	TextDocumentFilterScheme   *TextDocumentFilterScheme
	TextDocumentFilterPattern  *TextDocumentFilterPattern
}

func (o TextDocumentFilterLanguageOrTextDocumentFilterSchemeOrTextDocumentFilterPattern) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of TextDocumentFilterLanguageOrTextDocumentFilterSchemeOrTextDocumentFilterPattern is set", o.TextDocumentFilterLanguage != nil, o.TextDocumentFilterScheme != nil, o.TextDocumentFilterPattern != nil)

	if o.TextDocumentFilterLanguage != nil {
		return json.Marshal(*o.TextDocumentFilterLanguage)
	}
	if o.TextDocumentFilterScheme != nil {
		return json.Marshal(*o.TextDocumentFilterScheme)
	}
	if o.TextDocumentFilterPattern != nil {
		return json.Marshal(*o.TextDocumentFilterPattern)
	}
	return []byte("null"), nil
}

func (o *TextDocumentFilterLanguageOrTextDocumentFilterSchemeOrTextDocumentFilterPattern) UnmarshalJSON(data []byte) error {
	*o = TextDocumentFilterLanguageOrTextDocumentFilterSchemeOrTextDocumentFilterPattern{}
	if string(data) == "null" {
		return nil
	}

	{
		var v TextDocumentFilterLanguage
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextDocumentFilterLanguage = &v
			return nil
		}
	}
	{
		var v TextDocumentFilterScheme
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextDocumentFilterScheme = &v
			return nil
		}
	}
	{
		var v TextDocumentFilterPattern
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextDocumentFilterPattern = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into TextDocumentFilterLanguageOrTextDocumentFilterSchemeOrTextDocumentFilterPattern", string(data))
}

type NotebookDocumentFilterNotebookTypeOrNotebookDocumentFilterSchemeOrNotebookDocumentFilterPattern struct {
	NotebookDocumentFilterNotebookType *NotebookDocumentFilterNotebookType
	NotebookDocumentFilterScheme       *NotebookDocumentFilterScheme
	NotebookDocumentFilterPattern      *NotebookDocumentFilterPattern
}

func (o NotebookDocumentFilterNotebookTypeOrNotebookDocumentFilterSchemeOrNotebookDocumentFilterPattern) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of NotebookDocumentFilterNotebookTypeOrNotebookDocumentFilterSchemeOrNotebookDocumentFilterPattern is set", o.NotebookDocumentFilterNotebookType != nil, o.NotebookDocumentFilterScheme != nil, o.NotebookDocumentFilterPattern != nil)

	if o.NotebookDocumentFilterNotebookType != nil {
		return json.Marshal(*o.NotebookDocumentFilterNotebookType)
	}
	if o.NotebookDocumentFilterScheme != nil {
		return json.Marshal(*o.NotebookDocumentFilterScheme)
	}
	if o.NotebookDocumentFilterPattern != nil {
		return json.Marshal(*o.NotebookDocumentFilterPattern)
	}
	return []byte("null"), nil
}

func (o *NotebookDocumentFilterNotebookTypeOrNotebookDocumentFilterSchemeOrNotebookDocumentFilterPattern) UnmarshalJSON(data []byte) error {
	*o = NotebookDocumentFilterNotebookTypeOrNotebookDocumentFilterSchemeOrNotebookDocumentFilterPattern{}
	if string(data) == "null" {
		return nil
	}

	{
		var v NotebookDocumentFilterNotebookType
		if err := json.Unmarshal(data, &v); err == nil {
			o.NotebookDocumentFilterNotebookType = &v
			return nil
		}
	}
	{
		var v NotebookDocumentFilterScheme
		if err := json.Unmarshal(data, &v); err == nil {
			o.NotebookDocumentFilterScheme = &v
			return nil
		}
	}
	{
		var v NotebookDocumentFilterPattern
		if err := json.Unmarshal(data, &v); err == nil {
			o.NotebookDocumentFilterPattern = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into NotebookDocumentFilterNotebookTypeOrNotebookDocumentFilterSchemeOrNotebookDocumentFilterPattern", string(data))
}

type TextDocumentEditOrCreateFileOrRenameFileOrDeleteFile struct {
	TextDocumentEdit *TextDocumentEdit
	CreateFile       *CreateFile
	RenameFile       *RenameFile
	DeleteFile       *DeleteFile
}

func (o TextDocumentEditOrCreateFileOrRenameFileOrDeleteFile) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of TextDocumentEditOrCreateFileOrRenameFileOrDeleteFile is set", o.TextDocumentEdit != nil, o.CreateFile != nil, o.RenameFile != nil, o.DeleteFile != nil)

	if o.TextDocumentEdit != nil {
		return json.Marshal(*o.TextDocumentEdit)
	}
	if o.CreateFile != nil {
		return json.Marshal(*o.CreateFile)
	}
	if o.RenameFile != nil {
		return json.Marshal(*o.RenameFile)
	}
	if o.DeleteFile != nil {
		return json.Marshal(*o.DeleteFile)
	}
	return []byte("null"), nil
}

func (o *TextDocumentEditOrCreateFileOrRenameFileOrDeleteFile) UnmarshalJSON(data []byte) error {
	*o = TextDocumentEditOrCreateFileOrRenameFileOrDeleteFile{}
	if string(data) == "null" {
		return nil
	}

	{
		var v TextDocumentEdit
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextDocumentEdit = &v
			return nil
		}
	}
	{
		var v CreateFile
		if err := json.Unmarshal(data, &v); err == nil {
			o.CreateFile = &v
			return nil
		}
	}
	{
		var v RenameFile
		if err := json.Unmarshal(data, &v); err == nil {
			o.RenameFile = &v
			return nil
		}
	}
	{
		var v DeleteFile
		if err := json.Unmarshal(data, &v); err == nil {
			o.DeleteFile = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into TextDocumentEditOrCreateFileOrRenameFileOrDeleteFile", string(data))
}

type StringOrInlayHintLabelParts struct {
	String              *string
	InlayHintLabelParts *[]*InlayHintLabelPart
}

func (o StringOrInlayHintLabelParts) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of StringOrInlayHintLabelParts is set", o.String != nil, o.InlayHintLabelParts != nil)

	if o.String != nil {
		return json.Marshal(*o.String)
	}
	if o.InlayHintLabelParts != nil {
		return json.Marshal(*o.InlayHintLabelParts)
	}
	return []byte("null"), nil
}

func (o *StringOrInlayHintLabelParts) UnmarshalJSON(data []byte) error {
	*o = StringOrInlayHintLabelParts{}
	if string(data) == "null" {
		return nil
	}

	{
		var v string
		if err := json.Unmarshal(data, &v); err == nil {
			o.String = &v
			return nil
		}
	}
	{
		var v []*InlayHintLabelPart
		if err := json.Unmarshal(data, &v); err == nil {
			o.InlayHintLabelParts = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into StringOrInlayHintLabelParts", string(data))
}

type StringOrMarkupContent struct {
	String        *string
	MarkupContent *MarkupContent
}

func (o StringOrMarkupContent) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of StringOrMarkupContent is set", o.String != nil, o.MarkupContent != nil)

	if o.String != nil {
		return json.Marshal(*o.String)
	}
	if o.MarkupContent != nil {
		return json.Marshal(*o.MarkupContent)
	}
	return []byte("null"), nil
}

func (o *StringOrMarkupContent) UnmarshalJSON(data []byte) error {
	*o = StringOrMarkupContent{}
	if string(data) == "null" {
		return nil
	}

	{
		var v string
		if err := json.Unmarshal(data, &v); err == nil {
			o.String = &v
			return nil
		}
	}
	{
		var v MarkupContent
		if err := json.Unmarshal(data, &v); err == nil {
			o.MarkupContent = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into StringOrMarkupContent", string(data))
}

type FullDocumentDiagnosticReportOrUnchangedDocumentDiagnosticReport struct {
	FullDocumentDiagnosticReport      *FullDocumentDiagnosticReport
	UnchangedDocumentDiagnosticReport *UnchangedDocumentDiagnosticReport
}

func (o FullDocumentDiagnosticReportOrUnchangedDocumentDiagnosticReport) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of FullDocumentDiagnosticReportOrUnchangedDocumentDiagnosticReport is set", o.FullDocumentDiagnosticReport != nil, o.UnchangedDocumentDiagnosticReport != nil)

	if o.FullDocumentDiagnosticReport != nil {
		return json.Marshal(*o.FullDocumentDiagnosticReport)
	}
	if o.UnchangedDocumentDiagnosticReport != nil {
		return json.Marshal(*o.UnchangedDocumentDiagnosticReport)
	}
	return []byte("null"), nil
}

func (o *FullDocumentDiagnosticReportOrUnchangedDocumentDiagnosticReport) UnmarshalJSON(data []byte) error {
	*o = FullDocumentDiagnosticReportOrUnchangedDocumentDiagnosticReport{}
	if string(data) == "null" {
		return nil
	}

	{
		var v FullDocumentDiagnosticReport
		if err := json.Unmarshal(data, &v); err == nil {
			o.FullDocumentDiagnosticReport = &v
			return nil
		}
	}
	{
		var v UnchangedDocumentDiagnosticReport
		if err := json.Unmarshal(data, &v); err == nil {
			o.UnchangedDocumentDiagnosticReport = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into FullDocumentDiagnosticReportOrUnchangedDocumentDiagnosticReport", string(data))
}

type StringOrStringValue struct {
	String      *string
	StringValue *StringValue
}

func (o StringOrStringValue) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of StringOrStringValue is set", o.String != nil, o.StringValue != nil)

	if o.String != nil {
		return json.Marshal(*o.String)
	}
	if o.StringValue != nil {
		return json.Marshal(*o.StringValue)
	}
	return []byte("null"), nil
}

func (o *StringOrStringValue) UnmarshalJSON(data []byte) error {
	*o = StringOrStringValue{}
	if string(data) == "null" {
		return nil
	}

	{
		var v string
		if err := json.Unmarshal(data, &v); err == nil {
			o.String = &v
			return nil
		}
	}
	{
		var v StringValue
		if err := json.Unmarshal(data, &v); err == nil {
			o.StringValue = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into StringOrStringValue", string(data))
}

type StringOrStrings struct {
	String  *string
	Strings *[]string
}

func (o StringOrStrings) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of StringOrStrings is set", o.String != nil, o.Strings != nil)

	if o.String != nil {
		return json.Marshal(*o.String)
	}
	if o.Strings != nil {
		return json.Marshal(*o.Strings)
	}
	return []byte("null"), nil
}

func (o *StringOrStrings) UnmarshalJSON(data []byte) error {
	*o = StringOrStrings{}
	if string(data) == "null" {
		return nil
	}

	{
		var v string
		if err := json.Unmarshal(data, &v); err == nil {
			o.String = &v
			return nil
		}
	}
	{
		var v []string
		if err := json.Unmarshal(data, &v); err == nil {
			o.Strings = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into StringOrStrings", string(data))
}

type TextEditOrInsertReplaceEdit struct {
	TextEdit          *TextEdit
	InsertReplaceEdit *InsertReplaceEdit
}

func (o TextEditOrInsertReplaceEdit) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of TextEditOrInsertReplaceEdit is set", o.TextEdit != nil, o.InsertReplaceEdit != nil)

	if o.TextEdit != nil {
		return json.Marshal(*o.TextEdit)
	}
	if o.InsertReplaceEdit != nil {
		return json.Marshal(*o.InsertReplaceEdit)
	}
	return []byte("null"), nil
}

func (o *TextEditOrInsertReplaceEdit) UnmarshalJSON(data []byte) error {
	*o = TextEditOrInsertReplaceEdit{}
	if string(data) == "null" {
		return nil
	}

	{
		var v TextEdit
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextEdit = &v
			return nil
		}
	}
	{
		var v InsertReplaceEdit
		if err := json.Unmarshal(data, &v); err == nil {
			o.InsertReplaceEdit = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into TextEditOrInsertReplaceEdit", string(data))
}

type MarkupContentOrMarkedStringOrMarkedStrings struct {
	MarkupContent *MarkupContent
	MarkedString  *StringOrMarkedStringWithLanguage
	MarkedStrings *[]*StringOrMarkedStringWithLanguage
}

func (o MarkupContentOrMarkedStringOrMarkedStrings) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of MarkupContentOrMarkedStringOrMarkedStrings is set", o.MarkupContent != nil, o.MarkedString != nil, o.MarkedStrings != nil)

	if o.MarkupContent != nil {
		return json.Marshal(*o.MarkupContent)
	}
	if o.MarkedString != nil {
		return json.Marshal(*o.MarkedString)
	}
	if o.MarkedStrings != nil {
		return json.Marshal(*o.MarkedStrings)
	}
	return []byte("null"), nil
}

func (o *MarkupContentOrMarkedStringOrMarkedStrings) UnmarshalJSON(data []byte) error {
	*o = MarkupContentOrMarkedStringOrMarkedStrings{}
	if string(data) == "null" {
		return nil
	}

	{
		var v MarkupContent
		if err := json.Unmarshal(data, &v); err == nil {
			o.MarkupContent = &v
			return nil
		}
	}
	{
		var v StringOrMarkedStringWithLanguage
		if err := json.Unmarshal(data, &v); err == nil {
			o.MarkedString = &v
			return nil
		}
	}
	{
		var v []*StringOrMarkedStringWithLanguage
		if err := json.Unmarshal(data, &v); err == nil {
			o.MarkedStrings = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into MarkupContentOrMarkedStringOrMarkedStrings", string(data))
}

type LocationOrLocationUriOnly struct {
	Location        *Location
	LocationUriOnly *LocationUriOnly
}

func (o LocationOrLocationUriOnly) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of LocationOrLocationUriOnly is set", o.Location != nil, o.LocationUriOnly != nil)

	if o.Location != nil {
		return json.Marshal(*o.Location)
	}
	if o.LocationUriOnly != nil {
		return json.Marshal(*o.LocationUriOnly)
	}
	return []byte("null"), nil
}

func (o *LocationOrLocationUriOnly) UnmarshalJSON(data []byte) error {
	*o = LocationOrLocationUriOnly{}
	if string(data) == "null" {
		return nil
	}

	{
		var v Location
		if err := json.Unmarshal(data, &v); err == nil {
			o.Location = &v
			return nil
		}
	}
	{
		var v LocationUriOnly
		if err := json.Unmarshal(data, &v); err == nil {
			o.LocationUriOnly = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into LocationOrLocationUriOnly", string(data))
}

type BooleanOrEmptyObject struct {
	Boolean     *bool
	EmptyObject *struct{}
}

func (o BooleanOrEmptyObject) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrEmptyObject is set", o.Boolean != nil, o.EmptyObject != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.EmptyObject != nil {
		return json.Marshal(*o.EmptyObject)
	}
	return []byte("null"), nil
}

func (o *BooleanOrEmptyObject) UnmarshalJSON(data []byte) error {
	*o = BooleanOrEmptyObject{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v struct{}
		if err := json.Unmarshal(data, &v); err == nil {
			o.EmptyObject = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrEmptyObject", string(data))
}

type BooleanOrSemanticTokensFullDelta struct {
	Boolean                 *bool
	SemanticTokensFullDelta *SemanticTokensFullDelta
}

func (o BooleanOrSemanticTokensFullDelta) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrSemanticTokensFullDelta is set", o.Boolean != nil, o.SemanticTokensFullDelta != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.SemanticTokensFullDelta != nil {
		return json.Marshal(*o.SemanticTokensFullDelta)
	}
	return []byte("null"), nil
}

func (o *BooleanOrSemanticTokensFullDelta) UnmarshalJSON(data []byte) error {
	*o = BooleanOrSemanticTokensFullDelta{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v SemanticTokensFullDelta
		if err := json.Unmarshal(data, &v); err == nil {
			o.SemanticTokensFullDelta = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrSemanticTokensFullDelta", string(data))
}

type TextEditOrAnnotatedTextEditOrSnippetTextEdit struct {
	TextEdit          *TextEdit
	AnnotatedTextEdit *AnnotatedTextEdit
	SnippetTextEdit   *SnippetTextEdit
}

func (o TextEditOrAnnotatedTextEditOrSnippetTextEdit) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of TextEditOrAnnotatedTextEditOrSnippetTextEdit is set", o.TextEdit != nil, o.AnnotatedTextEdit != nil, o.SnippetTextEdit != nil)

	if o.TextEdit != nil {
		return json.Marshal(*o.TextEdit)
	}
	if o.AnnotatedTextEdit != nil {
		return json.Marshal(*o.AnnotatedTextEdit)
	}
	if o.SnippetTextEdit != nil {
		return json.Marshal(*o.SnippetTextEdit)
	}
	return []byte("null"), nil
}

func (o *TextEditOrAnnotatedTextEditOrSnippetTextEdit) UnmarshalJSON(data []byte) error {
	*o = TextEditOrAnnotatedTextEditOrSnippetTextEdit{}
	if string(data) == "null" {
		return nil
	}

	{
		var v TextEdit
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextEdit = &v
			return nil
		}
	}
	{
		var v AnnotatedTextEdit
		if err := json.Unmarshal(data, &v); err == nil {
			o.AnnotatedTextEdit = &v
			return nil
		}
	}
	{
		var v SnippetTextEdit
		if err := json.Unmarshal(data, &v); err == nil {
			o.SnippetTextEdit = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into TextEditOrAnnotatedTextEditOrSnippetTextEdit", string(data))
}

type NotebookDocumentFilterWithNotebookOrNotebookDocumentFilterWithCells struct {
	NotebookDocumentFilterWithNotebook *NotebookDocumentFilterWithNotebook
	NotebookDocumentFilterWithCells    *NotebookDocumentFilterWithCells
}

func (o NotebookDocumentFilterWithNotebookOrNotebookDocumentFilterWithCells) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of NotebookDocumentFilterWithNotebookOrNotebookDocumentFilterWithCells is set", o.NotebookDocumentFilterWithNotebook != nil, o.NotebookDocumentFilterWithCells != nil)

	if o.NotebookDocumentFilterWithNotebook != nil {
		return json.Marshal(*o.NotebookDocumentFilterWithNotebook)
	}
	if o.NotebookDocumentFilterWithCells != nil {
		return json.Marshal(*o.NotebookDocumentFilterWithCells)
	}
	return []byte("null"), nil
}

func (o *NotebookDocumentFilterWithNotebookOrNotebookDocumentFilterWithCells) UnmarshalJSON(data []byte) error {
	*o = NotebookDocumentFilterWithNotebookOrNotebookDocumentFilterWithCells{}
	if string(data) == "null" {
		return nil
	}

	{
		var v NotebookDocumentFilterWithNotebook
		if err := json.Unmarshal(data, &v); err == nil {
			o.NotebookDocumentFilterWithNotebook = &v
			return nil
		}
	}
	{
		var v NotebookDocumentFilterWithCells
		if err := json.Unmarshal(data, &v); err == nil {
			o.NotebookDocumentFilterWithCells = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into NotebookDocumentFilterWithNotebookOrNotebookDocumentFilterWithCells", string(data))
}

type TextDocumentSyncOptionsOrTextDocumentSyncKind struct {
	TextDocumentSyncOptions *TextDocumentSyncOptions
	TextDocumentSyncKind    *TextDocumentSyncKind
}

func (o TextDocumentSyncOptionsOrTextDocumentSyncKind) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of TextDocumentSyncOptionsOrTextDocumentSyncKind is set", o.TextDocumentSyncOptions != nil, o.TextDocumentSyncKind != nil)

	if o.TextDocumentSyncOptions != nil {
		return json.Marshal(*o.TextDocumentSyncOptions)
	}
	if o.TextDocumentSyncKind != nil {
		return json.Marshal(*o.TextDocumentSyncKind)
	}
	return []byte("null"), nil
}

func (o *TextDocumentSyncOptionsOrTextDocumentSyncKind) UnmarshalJSON(data []byte) error {
	*o = TextDocumentSyncOptionsOrTextDocumentSyncKind{}
	if string(data) == "null" {
		return nil
	}

	{
		var v TextDocumentSyncOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextDocumentSyncOptions = &v
			return nil
		}
	}
	{
		var v TextDocumentSyncKind
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextDocumentSyncKind = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into TextDocumentSyncOptionsOrTextDocumentSyncKind", string(data))
}

type NotebookDocumentSyncOptionsOrNotebookDocumentSyncRegistrationOptions struct {
	NotebookDocumentSyncOptions             *NotebookDocumentSyncOptions
	NotebookDocumentSyncRegistrationOptions *NotebookDocumentSyncRegistrationOptions
}

func (o NotebookDocumentSyncOptionsOrNotebookDocumentSyncRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of NotebookDocumentSyncOptionsOrNotebookDocumentSyncRegistrationOptions is set", o.NotebookDocumentSyncOptions != nil, o.NotebookDocumentSyncRegistrationOptions != nil)

	if o.NotebookDocumentSyncOptions != nil {
		return json.Marshal(*o.NotebookDocumentSyncOptions)
	}
	if o.NotebookDocumentSyncRegistrationOptions != nil {
		return json.Marshal(*o.NotebookDocumentSyncRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *NotebookDocumentSyncOptionsOrNotebookDocumentSyncRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = NotebookDocumentSyncOptionsOrNotebookDocumentSyncRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v NotebookDocumentSyncOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.NotebookDocumentSyncOptions = &v
			return nil
		}
	}
	{
		var v NotebookDocumentSyncRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.NotebookDocumentSyncRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into NotebookDocumentSyncOptionsOrNotebookDocumentSyncRegistrationOptions", string(data))
}

type BooleanOrHoverOptions struct {
	Boolean      *bool
	HoverOptions *HoverOptions
}

func (o BooleanOrHoverOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrHoverOptions is set", o.Boolean != nil, o.HoverOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.HoverOptions != nil {
		return json.Marshal(*o.HoverOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrHoverOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrHoverOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v HoverOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.HoverOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrHoverOptions", string(data))
}

type BooleanOrDeclarationOptionsOrDeclarationRegistrationOptions struct {
	Boolean                        *bool
	DeclarationOptions             *DeclarationOptions
	DeclarationRegistrationOptions *DeclarationRegistrationOptions
}

func (o BooleanOrDeclarationOptionsOrDeclarationRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrDeclarationOptionsOrDeclarationRegistrationOptions is set", o.Boolean != nil, o.DeclarationOptions != nil, o.DeclarationRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.DeclarationOptions != nil {
		return json.Marshal(*o.DeclarationOptions)
	}
	if o.DeclarationRegistrationOptions != nil {
		return json.Marshal(*o.DeclarationRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrDeclarationOptionsOrDeclarationRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrDeclarationOptionsOrDeclarationRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v DeclarationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.DeclarationOptions = &v
			return nil
		}
	}
	{
		var v DeclarationRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.DeclarationRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrDeclarationOptionsOrDeclarationRegistrationOptions", string(data))
}

type BooleanOrDefinitionOptions struct {
	Boolean           *bool
	DefinitionOptions *DefinitionOptions
}

func (o BooleanOrDefinitionOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrDefinitionOptions is set", o.Boolean != nil, o.DefinitionOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.DefinitionOptions != nil {
		return json.Marshal(*o.DefinitionOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrDefinitionOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrDefinitionOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v DefinitionOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.DefinitionOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrDefinitionOptions", string(data))
}

type BooleanOrTypeDefinitionOptionsOrTypeDefinitionRegistrationOptions struct {
	Boolean                           *bool
	TypeDefinitionOptions             *TypeDefinitionOptions
	TypeDefinitionRegistrationOptions *TypeDefinitionRegistrationOptions
}

func (o BooleanOrTypeDefinitionOptionsOrTypeDefinitionRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrTypeDefinitionOptionsOrTypeDefinitionRegistrationOptions is set", o.Boolean != nil, o.TypeDefinitionOptions != nil, o.TypeDefinitionRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.TypeDefinitionOptions != nil {
		return json.Marshal(*o.TypeDefinitionOptions)
	}
	if o.TypeDefinitionRegistrationOptions != nil {
		return json.Marshal(*o.TypeDefinitionRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrTypeDefinitionOptionsOrTypeDefinitionRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrTypeDefinitionOptionsOrTypeDefinitionRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v TypeDefinitionOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.TypeDefinitionOptions = &v
			return nil
		}
	}
	{
		var v TypeDefinitionRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.TypeDefinitionRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrTypeDefinitionOptionsOrTypeDefinitionRegistrationOptions", string(data))
}

type BooleanOrImplementationOptionsOrImplementationRegistrationOptions struct {
	Boolean                           *bool
	ImplementationOptions             *ImplementationOptions
	ImplementationRegistrationOptions *ImplementationRegistrationOptions
}

func (o BooleanOrImplementationOptionsOrImplementationRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrImplementationOptionsOrImplementationRegistrationOptions is set", o.Boolean != nil, o.ImplementationOptions != nil, o.ImplementationRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.ImplementationOptions != nil {
		return json.Marshal(*o.ImplementationOptions)
	}
	if o.ImplementationRegistrationOptions != nil {
		return json.Marshal(*o.ImplementationRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrImplementationOptionsOrImplementationRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrImplementationOptionsOrImplementationRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v ImplementationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.ImplementationOptions = &v
			return nil
		}
	}
	{
		var v ImplementationRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.ImplementationRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrImplementationOptionsOrImplementationRegistrationOptions", string(data))
}

type BooleanOrReferenceOptions struct {
	Boolean          *bool
	ReferenceOptions *ReferenceOptions
}

func (o BooleanOrReferenceOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrReferenceOptions is set", o.Boolean != nil, o.ReferenceOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.ReferenceOptions != nil {
		return json.Marshal(*o.ReferenceOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrReferenceOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrReferenceOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v ReferenceOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.ReferenceOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrReferenceOptions", string(data))
}

type BooleanOrDocumentHighlightOptions struct {
	Boolean                  *bool
	DocumentHighlightOptions *DocumentHighlightOptions
}

func (o BooleanOrDocumentHighlightOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrDocumentHighlightOptions is set", o.Boolean != nil, o.DocumentHighlightOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.DocumentHighlightOptions != nil {
		return json.Marshal(*o.DocumentHighlightOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrDocumentHighlightOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrDocumentHighlightOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v DocumentHighlightOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.DocumentHighlightOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrDocumentHighlightOptions", string(data))
}

type BooleanOrDocumentSymbolOptions struct {
	Boolean               *bool
	DocumentSymbolOptions *DocumentSymbolOptions
}

func (o BooleanOrDocumentSymbolOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrDocumentSymbolOptions is set", o.Boolean != nil, o.DocumentSymbolOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.DocumentSymbolOptions != nil {
		return json.Marshal(*o.DocumentSymbolOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrDocumentSymbolOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrDocumentSymbolOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v DocumentSymbolOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.DocumentSymbolOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrDocumentSymbolOptions", string(data))
}

type BooleanOrCodeActionOptions struct {
	Boolean           *bool
	CodeActionOptions *CodeActionOptions
}

func (o BooleanOrCodeActionOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrCodeActionOptions is set", o.Boolean != nil, o.CodeActionOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.CodeActionOptions != nil {
		return json.Marshal(*o.CodeActionOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrCodeActionOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrCodeActionOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v CodeActionOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.CodeActionOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrCodeActionOptions", string(data))
}

type BooleanOrDocumentColorOptionsOrDocumentColorRegistrationOptions struct {
	Boolean                          *bool
	DocumentColorOptions             *DocumentColorOptions
	DocumentColorRegistrationOptions *DocumentColorRegistrationOptions
}

func (o BooleanOrDocumentColorOptionsOrDocumentColorRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrDocumentColorOptionsOrDocumentColorRegistrationOptions is set", o.Boolean != nil, o.DocumentColorOptions != nil, o.DocumentColorRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.DocumentColorOptions != nil {
		return json.Marshal(*o.DocumentColorOptions)
	}
	if o.DocumentColorRegistrationOptions != nil {
		return json.Marshal(*o.DocumentColorRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrDocumentColorOptionsOrDocumentColorRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrDocumentColorOptionsOrDocumentColorRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v DocumentColorOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.DocumentColorOptions = &v
			return nil
		}
	}
	{
		var v DocumentColorRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.DocumentColorRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrDocumentColorOptionsOrDocumentColorRegistrationOptions", string(data))
}

type BooleanOrWorkspaceSymbolOptions struct {
	Boolean                *bool
	WorkspaceSymbolOptions *WorkspaceSymbolOptions
}

func (o BooleanOrWorkspaceSymbolOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrWorkspaceSymbolOptions is set", o.Boolean != nil, o.WorkspaceSymbolOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.WorkspaceSymbolOptions != nil {
		return json.Marshal(*o.WorkspaceSymbolOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrWorkspaceSymbolOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrWorkspaceSymbolOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v WorkspaceSymbolOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.WorkspaceSymbolOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrWorkspaceSymbolOptions", string(data))
}

type BooleanOrDocumentFormattingOptions struct {
	Boolean                   *bool
	DocumentFormattingOptions *DocumentFormattingOptions
}

func (o BooleanOrDocumentFormattingOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrDocumentFormattingOptions is set", o.Boolean != nil, o.DocumentFormattingOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.DocumentFormattingOptions != nil {
		return json.Marshal(*o.DocumentFormattingOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrDocumentFormattingOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrDocumentFormattingOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v DocumentFormattingOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.DocumentFormattingOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrDocumentFormattingOptions", string(data))
}

type BooleanOrDocumentRangeFormattingOptions struct {
	Boolean                        *bool
	DocumentRangeFormattingOptions *DocumentRangeFormattingOptions
}

func (o BooleanOrDocumentRangeFormattingOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrDocumentRangeFormattingOptions is set", o.Boolean != nil, o.DocumentRangeFormattingOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.DocumentRangeFormattingOptions != nil {
		return json.Marshal(*o.DocumentRangeFormattingOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrDocumentRangeFormattingOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrDocumentRangeFormattingOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v DocumentRangeFormattingOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.DocumentRangeFormattingOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrDocumentRangeFormattingOptions", string(data))
}

type BooleanOrRenameOptions struct {
	Boolean       *bool
	RenameOptions *RenameOptions
}

func (o BooleanOrRenameOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrRenameOptions is set", o.Boolean != nil, o.RenameOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.RenameOptions != nil {
		return json.Marshal(*o.RenameOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrRenameOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrRenameOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v RenameOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.RenameOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrRenameOptions", string(data))
}

type BooleanOrFoldingRangeOptionsOrFoldingRangeRegistrationOptions struct {
	Boolean                         *bool
	FoldingRangeOptions             *FoldingRangeOptions
	FoldingRangeRegistrationOptions *FoldingRangeRegistrationOptions
}

func (o BooleanOrFoldingRangeOptionsOrFoldingRangeRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrFoldingRangeOptionsOrFoldingRangeRegistrationOptions is set", o.Boolean != nil, o.FoldingRangeOptions != nil, o.FoldingRangeRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.FoldingRangeOptions != nil {
		return json.Marshal(*o.FoldingRangeOptions)
	}
	if o.FoldingRangeRegistrationOptions != nil {
		return json.Marshal(*o.FoldingRangeRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrFoldingRangeOptionsOrFoldingRangeRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrFoldingRangeOptionsOrFoldingRangeRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v FoldingRangeOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.FoldingRangeOptions = &v
			return nil
		}
	}
	{
		var v FoldingRangeRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.FoldingRangeRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrFoldingRangeOptionsOrFoldingRangeRegistrationOptions", string(data))
}

type BooleanOrSelectionRangeOptionsOrSelectionRangeRegistrationOptions struct {
	Boolean                           *bool
	SelectionRangeOptions             *SelectionRangeOptions
	SelectionRangeRegistrationOptions *SelectionRangeRegistrationOptions
}

func (o BooleanOrSelectionRangeOptionsOrSelectionRangeRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrSelectionRangeOptionsOrSelectionRangeRegistrationOptions is set", o.Boolean != nil, o.SelectionRangeOptions != nil, o.SelectionRangeRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.SelectionRangeOptions != nil {
		return json.Marshal(*o.SelectionRangeOptions)
	}
	if o.SelectionRangeRegistrationOptions != nil {
		return json.Marshal(*o.SelectionRangeRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrSelectionRangeOptionsOrSelectionRangeRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrSelectionRangeOptionsOrSelectionRangeRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v SelectionRangeOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.SelectionRangeOptions = &v
			return nil
		}
	}
	{
		var v SelectionRangeRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.SelectionRangeRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrSelectionRangeOptionsOrSelectionRangeRegistrationOptions", string(data))
}

type BooleanOrCallHierarchyOptionsOrCallHierarchyRegistrationOptions struct {
	Boolean                          *bool
	CallHierarchyOptions             *CallHierarchyOptions
	CallHierarchyRegistrationOptions *CallHierarchyRegistrationOptions
}

func (o BooleanOrCallHierarchyOptionsOrCallHierarchyRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrCallHierarchyOptionsOrCallHierarchyRegistrationOptions is set", o.Boolean != nil, o.CallHierarchyOptions != nil, o.CallHierarchyRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.CallHierarchyOptions != nil {
		return json.Marshal(*o.CallHierarchyOptions)
	}
	if o.CallHierarchyRegistrationOptions != nil {
		return json.Marshal(*o.CallHierarchyRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrCallHierarchyOptionsOrCallHierarchyRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrCallHierarchyOptionsOrCallHierarchyRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v CallHierarchyOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.CallHierarchyOptions = &v
			return nil
		}
	}
	{
		var v CallHierarchyRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.CallHierarchyRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrCallHierarchyOptionsOrCallHierarchyRegistrationOptions", string(data))
}

type BooleanOrLinkedEditingRangeOptionsOrLinkedEditingRangeRegistrationOptions struct {
	Boolean                               *bool
	LinkedEditingRangeOptions             *LinkedEditingRangeOptions
	LinkedEditingRangeRegistrationOptions *LinkedEditingRangeRegistrationOptions
}

func (o BooleanOrLinkedEditingRangeOptionsOrLinkedEditingRangeRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrLinkedEditingRangeOptionsOrLinkedEditingRangeRegistrationOptions is set", o.Boolean != nil, o.LinkedEditingRangeOptions != nil, o.LinkedEditingRangeRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.LinkedEditingRangeOptions != nil {
		return json.Marshal(*o.LinkedEditingRangeOptions)
	}
	if o.LinkedEditingRangeRegistrationOptions != nil {
		return json.Marshal(*o.LinkedEditingRangeRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrLinkedEditingRangeOptionsOrLinkedEditingRangeRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrLinkedEditingRangeOptionsOrLinkedEditingRangeRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v LinkedEditingRangeOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.LinkedEditingRangeOptions = &v
			return nil
		}
	}
	{
		var v LinkedEditingRangeRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.LinkedEditingRangeRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrLinkedEditingRangeOptionsOrLinkedEditingRangeRegistrationOptions", string(data))
}

type SemanticTokensOptionsOrSemanticTokensRegistrationOptions struct {
	SemanticTokensOptions             *SemanticTokensOptions
	SemanticTokensRegistrationOptions *SemanticTokensRegistrationOptions
}

func (o SemanticTokensOptionsOrSemanticTokensRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of SemanticTokensOptionsOrSemanticTokensRegistrationOptions is set", o.SemanticTokensOptions != nil, o.SemanticTokensRegistrationOptions != nil)

	if o.SemanticTokensOptions != nil {
		return json.Marshal(*o.SemanticTokensOptions)
	}
	if o.SemanticTokensRegistrationOptions != nil {
		return json.Marshal(*o.SemanticTokensRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *SemanticTokensOptionsOrSemanticTokensRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = SemanticTokensOptionsOrSemanticTokensRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v SemanticTokensOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.SemanticTokensOptions = &v
			return nil
		}
	}
	{
		var v SemanticTokensRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.SemanticTokensRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into SemanticTokensOptionsOrSemanticTokensRegistrationOptions", string(data))
}

type BooleanOrMonikerOptionsOrMonikerRegistrationOptions struct {
	Boolean                    *bool
	MonikerOptions             *MonikerOptions
	MonikerRegistrationOptions *MonikerRegistrationOptions
}

func (o BooleanOrMonikerOptionsOrMonikerRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrMonikerOptionsOrMonikerRegistrationOptions is set", o.Boolean != nil, o.MonikerOptions != nil, o.MonikerRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.MonikerOptions != nil {
		return json.Marshal(*o.MonikerOptions)
	}
	if o.MonikerRegistrationOptions != nil {
		return json.Marshal(*o.MonikerRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrMonikerOptionsOrMonikerRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrMonikerOptionsOrMonikerRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v MonikerOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.MonikerOptions = &v
			return nil
		}
	}
	{
		var v MonikerRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.MonikerRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrMonikerOptionsOrMonikerRegistrationOptions", string(data))
}

type BooleanOrTypeHierarchyOptionsOrTypeHierarchyRegistrationOptions struct {
	Boolean                          *bool
	TypeHierarchyOptions             *TypeHierarchyOptions
	TypeHierarchyRegistrationOptions *TypeHierarchyRegistrationOptions
}

func (o BooleanOrTypeHierarchyOptionsOrTypeHierarchyRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrTypeHierarchyOptionsOrTypeHierarchyRegistrationOptions is set", o.Boolean != nil, o.TypeHierarchyOptions != nil, o.TypeHierarchyRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.TypeHierarchyOptions != nil {
		return json.Marshal(*o.TypeHierarchyOptions)
	}
	if o.TypeHierarchyRegistrationOptions != nil {
		return json.Marshal(*o.TypeHierarchyRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrTypeHierarchyOptionsOrTypeHierarchyRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrTypeHierarchyOptionsOrTypeHierarchyRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v TypeHierarchyOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.TypeHierarchyOptions = &v
			return nil
		}
	}
	{
		var v TypeHierarchyRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.TypeHierarchyRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrTypeHierarchyOptionsOrTypeHierarchyRegistrationOptions", string(data))
}

type BooleanOrInlineValueOptionsOrInlineValueRegistrationOptions struct {
	Boolean                        *bool
	InlineValueOptions             *InlineValueOptions
	InlineValueRegistrationOptions *InlineValueRegistrationOptions
}

func (o BooleanOrInlineValueOptionsOrInlineValueRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrInlineValueOptionsOrInlineValueRegistrationOptions is set", o.Boolean != nil, o.InlineValueOptions != nil, o.InlineValueRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.InlineValueOptions != nil {
		return json.Marshal(*o.InlineValueOptions)
	}
	if o.InlineValueRegistrationOptions != nil {
		return json.Marshal(*o.InlineValueRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrInlineValueOptionsOrInlineValueRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrInlineValueOptionsOrInlineValueRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v InlineValueOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.InlineValueOptions = &v
			return nil
		}
	}
	{
		var v InlineValueRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.InlineValueRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrInlineValueOptionsOrInlineValueRegistrationOptions", string(data))
}

type BooleanOrInlayHintOptionsOrInlayHintRegistrationOptions struct {
	Boolean                      *bool
	InlayHintOptions             *InlayHintOptions
	InlayHintRegistrationOptions *InlayHintRegistrationOptions
}

func (o BooleanOrInlayHintOptionsOrInlayHintRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrInlayHintOptionsOrInlayHintRegistrationOptions is set", o.Boolean != nil, o.InlayHintOptions != nil, o.InlayHintRegistrationOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.InlayHintOptions != nil {
		return json.Marshal(*o.InlayHintOptions)
	}
	if o.InlayHintRegistrationOptions != nil {
		return json.Marshal(*o.InlayHintRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrInlayHintOptionsOrInlayHintRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrInlayHintOptionsOrInlayHintRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v InlayHintOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.InlayHintOptions = &v
			return nil
		}
	}
	{
		var v InlayHintRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.InlayHintRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrInlayHintOptionsOrInlayHintRegistrationOptions", string(data))
}

type DiagnosticOptionsOrDiagnosticRegistrationOptions struct {
	DiagnosticOptions             *DiagnosticOptions
	DiagnosticRegistrationOptions *DiagnosticRegistrationOptions
}

func (o DiagnosticOptionsOrDiagnosticRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of DiagnosticOptionsOrDiagnosticRegistrationOptions is set", o.DiagnosticOptions != nil, o.DiagnosticRegistrationOptions != nil)

	if o.DiagnosticOptions != nil {
		return json.Marshal(*o.DiagnosticOptions)
	}
	if o.DiagnosticRegistrationOptions != nil {
		return json.Marshal(*o.DiagnosticRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *DiagnosticOptionsOrDiagnosticRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = DiagnosticOptionsOrDiagnosticRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v DiagnosticOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.DiagnosticOptions = &v
			return nil
		}
	}
	{
		var v DiagnosticRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.DiagnosticRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into DiagnosticOptionsOrDiagnosticRegistrationOptions", string(data))
}

type BooleanOrInlineCompletionOptions struct {
	Boolean                 *bool
	InlineCompletionOptions *InlineCompletionOptions
}

func (o BooleanOrInlineCompletionOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrInlineCompletionOptions is set", o.Boolean != nil, o.InlineCompletionOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.InlineCompletionOptions != nil {
		return json.Marshal(*o.InlineCompletionOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrInlineCompletionOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrInlineCompletionOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v InlineCompletionOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.InlineCompletionOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrInlineCompletionOptions", string(data))
}

type RangeOrEditRangeWithInsertReplace struct {
	Range                      *Range
	EditRangeWithInsertReplace *EditRangeWithInsertReplace
}

func (o RangeOrEditRangeWithInsertReplace) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of RangeOrEditRangeWithInsertReplace is set", o.Range != nil, o.EditRangeWithInsertReplace != nil)

	if o.Range != nil {
		return json.Marshal(*o.Range)
	}
	if o.EditRangeWithInsertReplace != nil {
		return json.Marshal(*o.EditRangeWithInsertReplace)
	}
	return []byte("null"), nil
}

func (o *RangeOrEditRangeWithInsertReplace) UnmarshalJSON(data []byte) error {
	*o = RangeOrEditRangeWithInsertReplace{}
	if string(data) == "null" {
		return nil
	}

	{
		var v Range
		if err := json.Unmarshal(data, &v); err == nil {
			o.Range = &v
			return nil
		}
	}
	{
		var v EditRangeWithInsertReplace
		if err := json.Unmarshal(data, &v); err == nil {
			o.EditRangeWithInsertReplace = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into RangeOrEditRangeWithInsertReplace", string(data))
}

type StringOrNotebookDocumentFilter struct {
	String                 *string
	NotebookDocumentFilter *NotebookDocumentFilterNotebookTypeOrNotebookDocumentFilterSchemeOrNotebookDocumentFilterPattern
}

func (o StringOrNotebookDocumentFilter) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of StringOrNotebookDocumentFilter is set", o.String != nil, o.NotebookDocumentFilter != nil)

	if o.String != nil {
		return json.Marshal(*o.String)
	}
	if o.NotebookDocumentFilter != nil {
		return json.Marshal(*o.NotebookDocumentFilter)
	}
	return []byte("null"), nil
}

func (o *StringOrNotebookDocumentFilter) UnmarshalJSON(data []byte) error {
	*o = StringOrNotebookDocumentFilter{}
	if string(data) == "null" {
		return nil
	}

	{
		var v string
		if err := json.Unmarshal(data, &v); err == nil {
			o.String = &v
			return nil
		}
	}
	{
		var v NotebookDocumentFilterNotebookTypeOrNotebookDocumentFilterSchemeOrNotebookDocumentFilterPattern
		if err := json.Unmarshal(data, &v); err == nil {
			o.NotebookDocumentFilter = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into StringOrNotebookDocumentFilter", string(data))
}

type BooleanOrSaveOptions struct {
	Boolean     *bool
	SaveOptions *SaveOptions
}

func (o BooleanOrSaveOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrSaveOptions is set", o.Boolean != nil, o.SaveOptions != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.SaveOptions != nil {
		return json.Marshal(*o.SaveOptions)
	}
	return []byte("null"), nil
}

func (o *BooleanOrSaveOptions) UnmarshalJSON(data []byte) error {
	*o = BooleanOrSaveOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v SaveOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.SaveOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrSaveOptions", string(data))
}

type TextDocumentContentOptionsOrTextDocumentContentRegistrationOptions struct {
	TextDocumentContentOptions             *TextDocumentContentOptions
	TextDocumentContentRegistrationOptions *TextDocumentContentRegistrationOptions
}

func (o TextDocumentContentOptionsOrTextDocumentContentRegistrationOptions) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of TextDocumentContentOptionsOrTextDocumentContentRegistrationOptions is set", o.TextDocumentContentOptions != nil, o.TextDocumentContentRegistrationOptions != nil)

	if o.TextDocumentContentOptions != nil {
		return json.Marshal(*o.TextDocumentContentOptions)
	}
	if o.TextDocumentContentRegistrationOptions != nil {
		return json.Marshal(*o.TextDocumentContentRegistrationOptions)
	}
	return []byte("null"), nil
}

func (o *TextDocumentContentOptionsOrTextDocumentContentRegistrationOptions) UnmarshalJSON(data []byte) error {
	*o = TextDocumentContentOptionsOrTextDocumentContentRegistrationOptions{}
	if string(data) == "null" {
		return nil
	}

	{
		var v TextDocumentContentOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextDocumentContentOptions = &v
			return nil
		}
	}
	{
		var v TextDocumentContentRegistrationOptions
		if err := json.Unmarshal(data, &v); err == nil {
			o.TextDocumentContentRegistrationOptions = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into TextDocumentContentOptionsOrTextDocumentContentRegistrationOptions", string(data))
}

type StringOrTuple struct {
	String *string
	Tuple  *[2]uint32
}

func (o StringOrTuple) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of StringOrTuple is set", o.String != nil, o.Tuple != nil)

	if o.String != nil {
		return json.Marshal(*o.String)
	}
	if o.Tuple != nil {
		return json.Marshal(*o.Tuple)
	}
	return []byte("null"), nil
}

func (o *StringOrTuple) UnmarshalJSON(data []byte) error {
	*o = StringOrTuple{}
	if string(data) == "null" {
		return nil
	}

	{
		var v string
		if err := json.Unmarshal(data, &v); err == nil {
			o.String = &v
			return nil
		}
	}
	{
		var v [2]uint32
		if err := json.Unmarshal(data, &v); err == nil {
			o.Tuple = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into StringOrTuple", string(data))
}

type StringOrBoolean struct {
	String  *string
	Boolean *bool
}

func (o StringOrBoolean) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of StringOrBoolean is set", o.String != nil, o.Boolean != nil)

	if o.String != nil {
		return json.Marshal(*o.String)
	}
	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	return []byte("null"), nil
}

func (o *StringOrBoolean) UnmarshalJSON(data []byte) error {
	*o = StringOrBoolean{}
	if string(data) == "null" {
		return nil
	}

	{
		var v string
		if err := json.Unmarshal(data, &v); err == nil {
			o.String = &v
			return nil
		}
	}
	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into StringOrBoolean", string(data))
}

type WorkspaceFolderOrURI struct {
	WorkspaceFolder *WorkspaceFolder
	URI             *URI
}

func (o WorkspaceFolderOrURI) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of WorkspaceFolderOrURI is set", o.WorkspaceFolder != nil, o.URI != nil)

	if o.WorkspaceFolder != nil {
		return json.Marshal(*o.WorkspaceFolder)
	}
	if o.URI != nil {
		return json.Marshal(*o.URI)
	}
	return []byte("null"), nil
}

func (o *WorkspaceFolderOrURI) UnmarshalJSON(data []byte) error {
	*o = WorkspaceFolderOrURI{}
	if string(data) == "null" {
		return nil
	}

	{
		var v WorkspaceFolder
		if err := json.Unmarshal(data, &v); err == nil {
			o.WorkspaceFolder = &v
			return nil
		}
	}
	{
		var v URI
		if err := json.Unmarshal(data, &v); err == nil {
			o.URI = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into WorkspaceFolderOrURI", string(data))
}

type BooleanOrClientSemanticTokensRequestFullDelta struct {
	Boolean                              *bool
	ClientSemanticTokensRequestFullDelta *ClientSemanticTokensRequestFullDelta
}

func (o BooleanOrClientSemanticTokensRequestFullDelta) MarshalJSON() ([]byte, error) {
	assertOnlyOne("more than one element of BooleanOrClientSemanticTokensRequestFullDelta is set", o.Boolean != nil, o.ClientSemanticTokensRequestFullDelta != nil)

	if o.Boolean != nil {
		return json.Marshal(*o.Boolean)
	}
	if o.ClientSemanticTokensRequestFullDelta != nil {
		return json.Marshal(*o.ClientSemanticTokensRequestFullDelta)
	}
	return []byte("null"), nil
}

func (o *BooleanOrClientSemanticTokensRequestFullDelta) UnmarshalJSON(data []byte) error {
	*o = BooleanOrClientSemanticTokensRequestFullDelta{}
	if string(data) == "null" {
		return nil
	}

	{
		var v bool
		if err := json.Unmarshal(data, &v); err == nil {
			o.Boolean = &v
			return nil
		}
	}
	{
		var v ClientSemanticTokensRequestFullDelta
		if err := json.Unmarshal(data, &v); err == nil {
			o.ClientSemanticTokensRequestFullDelta = &v
			return nil
		}
	}
	return fmt.Errorf("cannot unmarshal %s into BooleanOrClientSemanticTokensRequestFullDelta", string(data))
}

// Literal types

// StringLiteralBegin is a literal type for "begin"
type StringLiteralBegin struct{}

func (o StringLiteralBegin) MarshalJSON() ([]byte, error) {
	return []byte("begin"), nil
}

func (o *StringLiteralBegin) UnmarshalJSON(data []byte) error {
	if string(data) != "begin" {
		return fmt.Errorf("invalid StringLiteralBegin: %s", string(data))
	}
	return nil
}

// StringLiteralReport is a literal type for "report"
type StringLiteralReport struct{}

func (o StringLiteralReport) MarshalJSON() ([]byte, error) {
	return []byte("report"), nil
}

func (o *StringLiteralReport) UnmarshalJSON(data []byte) error {
	if string(data) != "report" {
		return fmt.Errorf("invalid StringLiteralReport: %s", string(data))
	}
	return nil
}

// StringLiteralEnd is a literal type for "end"
type StringLiteralEnd struct{}

func (o StringLiteralEnd) MarshalJSON() ([]byte, error) {
	return []byte("end"), nil
}

func (o *StringLiteralEnd) UnmarshalJSON(data []byte) error {
	if string(data) != "end" {
		return fmt.Errorf("invalid StringLiteralEnd: %s", string(data))
	}
	return nil
}

// StringLiteralCreate is a literal type for "create"
type StringLiteralCreate struct{}

func (o StringLiteralCreate) MarshalJSON() ([]byte, error) {
	return []byte("create"), nil
}

func (o *StringLiteralCreate) UnmarshalJSON(data []byte) error {
	if string(data) != "create" {
		return fmt.Errorf("invalid StringLiteralCreate: %s", string(data))
	}
	return nil
}

// StringLiteralRename is a literal type for "rename"
type StringLiteralRename struct{}

func (o StringLiteralRename) MarshalJSON() ([]byte, error) {
	return []byte("rename"), nil
}

func (o *StringLiteralRename) UnmarshalJSON(data []byte) error {
	if string(data) != "rename" {
		return fmt.Errorf("invalid StringLiteralRename: %s", string(data))
	}
	return nil
}

// StringLiteralDelete is a literal type for "delete"
type StringLiteralDelete struct{}

func (o StringLiteralDelete) MarshalJSON() ([]byte, error) {
	return []byte("delete"), nil
}

func (o *StringLiteralDelete) UnmarshalJSON(data []byte) error {
	if string(data) != "delete" {
		return fmt.Errorf("invalid StringLiteralDelete: %s", string(data))
	}
	return nil
}

// StringLiteralFull is a literal type for "full"
type StringLiteralFull struct{}

func (o StringLiteralFull) MarshalJSON() ([]byte, error) {
	return []byte("full"), nil
}

func (o *StringLiteralFull) UnmarshalJSON(data []byte) error {
	if string(data) != "full" {
		return fmt.Errorf("invalid StringLiteralFull: %s", string(data))
	}
	return nil
}

// StringLiteralUnchanged is a literal type for "unchanged"
type StringLiteralUnchanged struct{}

func (o StringLiteralUnchanged) MarshalJSON() ([]byte, error) {
	return []byte("unchanged"), nil
}

func (o *StringLiteralUnchanged) UnmarshalJSON(data []byte) error {
	if string(data) != "unchanged" {
		return fmt.Errorf("invalid StringLiteralUnchanged: %s", string(data))
	}
	return nil
}

// StringLiteralSnippet is a literal type for "snippet"
type StringLiteralSnippet struct{}

func (o StringLiteralSnippet) MarshalJSON() ([]byte, error) {
	return []byte("snippet"), nil
}

func (o *StringLiteralSnippet) UnmarshalJSON(data []byte) error {
	if string(data) != "snippet" {
		return fmt.Errorf("invalid StringLiteralSnippet: %s", string(data))
	}
	return nil
}
