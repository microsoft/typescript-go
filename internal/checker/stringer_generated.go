// Code generated by "stringer -type=SignatureKind,TypeFlags -output=stringer_generated.go"; DO NOT EDIT.

package checker

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SignatureKindCall-0]
	_ = x[SignatureKindConstruct-1]
}

const _SignatureKind_name = "SignatureKindCallSignatureKindConstruct"

var _SignatureKind_index = [...]uint8{0, 17, 39}

func (i SignatureKind) String() string {
	if i < 0 || i >= SignatureKind(len(_SignatureKind_index)-1) {
		return "SignatureKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SignatureKind_name[_SignatureKind_index[i]:_SignatureKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TypeFlagsNone-0]
	_ = x[TypeFlagsAny-1]
	_ = x[TypeFlagsUnknown-2]
	_ = x[TypeFlagsUndefined-4]
	_ = x[TypeFlagsNull-8]
	_ = x[TypeFlagsVoid-16]
	_ = x[TypeFlagsString-32]
	_ = x[TypeFlagsNumber-64]
	_ = x[TypeFlagsBigInt-128]
	_ = x[TypeFlagsBoolean-256]
	_ = x[TypeFlagsESSymbol-512]
	_ = x[TypeFlagsStringLiteral-1024]
	_ = x[TypeFlagsNumberLiteral-2048]
	_ = x[TypeFlagsBigIntLiteral-4096]
	_ = x[TypeFlagsBooleanLiteral-8192]
	_ = x[TypeFlagsUniqueESSymbol-16384]
	_ = x[TypeFlagsEnumLiteral-32768]
	_ = x[TypeFlagsEnum-65536]
	_ = x[TypeFlagsNever-131072]
	_ = x[TypeFlagsTypeParameter-262144]
	_ = x[TypeFlagsObject-524288]
	_ = x[TypeFlagsUnion-1048576]
	_ = x[TypeFlagsIntersection-2097152]
	_ = x[TypeFlagsIndex-4194304]
	_ = x[TypeFlagsIndexedAccess-8388608]
	_ = x[TypeFlagsConditional-16777216]
	_ = x[TypeFlagsSubstitution-33554432]
	_ = x[TypeFlagsNonPrimitive-67108864]
	_ = x[TypeFlagsTemplateLiteral-134217728]
	_ = x[TypeFlagsStringMapping-268435456]
	_ = x[TypeFlagsReserved1-536870912]
	_ = x[TypeFlagsReserved2-1073741824]
	_ = x[TypeFlagsReserved3-2147483648]
}

const _TypeFlags_name = "TypeFlagsNoneTypeFlagsAnyTypeFlagsUnknownTypeFlagsUndefinedTypeFlagsNullTypeFlagsVoidTypeFlagsStringTypeFlagsNumberTypeFlagsBigIntTypeFlagsBooleanTypeFlagsESSymbolTypeFlagsStringLiteralTypeFlagsNumberLiteralTypeFlagsBigIntLiteralTypeFlagsBooleanLiteralTypeFlagsUniqueESSymbolTypeFlagsEnumLiteralTypeFlagsEnumTypeFlagsNeverTypeFlagsTypeParameterTypeFlagsObjectTypeFlagsUnionTypeFlagsIntersectionTypeFlagsIndexTypeFlagsIndexedAccessTypeFlagsConditionalTypeFlagsSubstitutionTypeFlagsNonPrimitiveTypeFlagsTemplateLiteralTypeFlagsStringMappingTypeFlagsReserved1TypeFlagsReserved2TypeFlagsReserved3"

var _TypeFlags_map = map[TypeFlags]string{
	0:          _TypeFlags_name[0:13],
	1:          _TypeFlags_name[13:25],
	2:          _TypeFlags_name[25:41],
	4:          _TypeFlags_name[41:59],
	8:          _TypeFlags_name[59:72],
	16:         _TypeFlags_name[72:85],
	32:         _TypeFlags_name[85:100],
	64:         _TypeFlags_name[100:115],
	128:        _TypeFlags_name[115:130],
	256:        _TypeFlags_name[130:146],
	512:        _TypeFlags_name[146:163],
	1024:       _TypeFlags_name[163:185],
	2048:       _TypeFlags_name[185:207],
	4096:       _TypeFlags_name[207:229],
	8192:       _TypeFlags_name[229:252],
	16384:      _TypeFlags_name[252:275],
	32768:      _TypeFlags_name[275:295],
	65536:      _TypeFlags_name[295:308],
	131072:     _TypeFlags_name[308:322],
	262144:     _TypeFlags_name[322:344],
	524288:     _TypeFlags_name[344:359],
	1048576:    _TypeFlags_name[359:373],
	2097152:    _TypeFlags_name[373:394],
	4194304:    _TypeFlags_name[394:408],
	8388608:    _TypeFlags_name[408:430],
	16777216:   _TypeFlags_name[430:450],
	33554432:   _TypeFlags_name[450:471],
	67108864:   _TypeFlags_name[471:492],
	134217728:  _TypeFlags_name[492:516],
	268435456:  _TypeFlags_name[516:538],
	536870912:  _TypeFlags_name[538:556],
	1073741824: _TypeFlags_name[556:574],
	2147483648: _TypeFlags_name[574:592],
}

func (i TypeFlags) String() string {
	if str, ok := _TypeFlags_map[i]; ok {
		return str
	}
	return "TypeFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
