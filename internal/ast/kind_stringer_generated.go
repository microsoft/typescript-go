// Code generated by "stringer -type=Kind -output=kind_stringer_generated.go"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[KindUnknown-0]
	_ = x[KindEndOfFile-1]
	_ = x[KindWhitespaceTrivia-2]
	_ = x[KindNewLineTrivia-3]
	_ = x[KindConflictMarkerTrivia-4]
	_ = x[KindNonTextFileMarkerTrivia-5]
	_ = x[KindNumericLiteral-6]
	_ = x[KindBigIntLiteral-7]
	_ = x[KindStringLiteral-8]
	_ = x[KindJsxText-9]
	_ = x[KindJsxTextAllWhiteSpaces-10]
	_ = x[KindRegularExpressionLiteral-11]
	_ = x[KindNoSubstitutionTemplateLiteral-12]
	_ = x[KindTemplateHead-13]
	_ = x[KindTemplateMiddle-14]
	_ = x[KindTemplateTail-15]
	_ = x[KindOpenBraceToken-16]
	_ = x[KindCloseBraceToken-17]
	_ = x[KindOpenParenToken-18]
	_ = x[KindCloseParenToken-19]
	_ = x[KindOpenBracketToken-20]
	_ = x[KindCloseBracketToken-21]
	_ = x[KindDotToken-22]
	_ = x[KindDotDotDotToken-23]
	_ = x[KindSemicolonToken-24]
	_ = x[KindCommaToken-25]
	_ = x[KindQuestionDotToken-26]
	_ = x[KindLessThanToken-27]
	_ = x[KindLessThanSlashToken-28]
	_ = x[KindGreaterThanToken-29]
	_ = x[KindLessThanEqualsToken-30]
	_ = x[KindGreaterThanEqualsToken-31]
	_ = x[KindEqualsEqualsToken-32]
	_ = x[KindExclamationEqualsToken-33]
	_ = x[KindEqualsEqualsEqualsToken-34]
	_ = x[KindExclamationEqualsEqualsToken-35]
	_ = x[KindEqualsGreaterThanToken-36]
	_ = x[KindPlusToken-37]
	_ = x[KindMinusToken-38]
	_ = x[KindAsteriskToken-39]
	_ = x[KindAsteriskAsteriskToken-40]
	_ = x[KindSlashToken-41]
	_ = x[KindPercentToken-42]
	_ = x[KindPlusPlusToken-43]
	_ = x[KindMinusMinusToken-44]
	_ = x[KindLessThanLessThanToken-45]
	_ = x[KindGreaterThanGreaterThanToken-46]
	_ = x[KindGreaterThanGreaterThanGreaterThanToken-47]
	_ = x[KindAmpersandToken-48]
	_ = x[KindBarToken-49]
	_ = x[KindCaretToken-50]
	_ = x[KindExclamationToken-51]
	_ = x[KindTildeToken-52]
	_ = x[KindAmpersandAmpersandToken-53]
	_ = x[KindBarBarToken-54]
	_ = x[KindQuestionToken-55]
	_ = x[KindColonToken-56]
	_ = x[KindAtToken-57]
	_ = x[KindQuestionQuestionToken-58]
	_ = x[KindBacktickToken-59]
	_ = x[KindHashToken-60]
	_ = x[KindEqualsToken-61]
	_ = x[KindPlusEqualsToken-62]
	_ = x[KindMinusEqualsToken-63]
	_ = x[KindAsteriskEqualsToken-64]
	_ = x[KindAsteriskAsteriskEqualsToken-65]
	_ = x[KindSlashEqualsToken-66]
	_ = x[KindPercentEqualsToken-67]
	_ = x[KindLessThanLessThanEqualsToken-68]
	_ = x[KindGreaterThanGreaterThanEqualsToken-69]
	_ = x[KindGreaterThanGreaterThanGreaterThanEqualsToken-70]
	_ = x[KindAmpersandEqualsToken-71]
	_ = x[KindBarEqualsToken-72]
	_ = x[KindBarBarEqualsToken-73]
	_ = x[KindAmpersandAmpersandEqualsToken-74]
	_ = x[KindQuestionQuestionEqualsToken-75]
	_ = x[KindCaretEqualsToken-76]
	_ = x[KindIdentifier-77]
	_ = x[KindPrivateIdentifier-78]
	_ = x[KindJSDocCommentTextToken-79]
	_ = x[KindBreakKeyword-80]
	_ = x[KindCaseKeyword-81]
	_ = x[KindCatchKeyword-82]
	_ = x[KindClassKeyword-83]
	_ = x[KindConstKeyword-84]
	_ = x[KindContinueKeyword-85]
	_ = x[KindDebuggerKeyword-86]
	_ = x[KindDefaultKeyword-87]
	_ = x[KindDeleteKeyword-88]
	_ = x[KindDoKeyword-89]
	_ = x[KindElseKeyword-90]
	_ = x[KindEnumKeyword-91]
	_ = x[KindExportKeyword-92]
	_ = x[KindExtendsKeyword-93]
	_ = x[KindFalseKeyword-94]
	_ = x[KindFinallyKeyword-95]
	_ = x[KindForKeyword-96]
	_ = x[KindFunctionKeyword-97]
	_ = x[KindIfKeyword-98]
	_ = x[KindImportKeyword-99]
	_ = x[KindInKeyword-100]
	_ = x[KindInstanceOfKeyword-101]
	_ = x[KindNewKeyword-102]
	_ = x[KindNullKeyword-103]
	_ = x[KindReturnKeyword-104]
	_ = x[KindSuperKeyword-105]
	_ = x[KindSwitchKeyword-106]
	_ = x[KindThisKeyword-107]
	_ = x[KindThrowKeyword-108]
	_ = x[KindTrueKeyword-109]
	_ = x[KindTryKeyword-110]
	_ = x[KindTypeOfKeyword-111]
	_ = x[KindVarKeyword-112]
	_ = x[KindVoidKeyword-113]
	_ = x[KindWhileKeyword-114]
	_ = x[KindWithKeyword-115]
	_ = x[KindImplementsKeyword-116]
	_ = x[KindInterfaceKeyword-117]
	_ = x[KindLetKeyword-118]
	_ = x[KindPackageKeyword-119]
	_ = x[KindPrivateKeyword-120]
	_ = x[KindProtectedKeyword-121]
	_ = x[KindPublicKeyword-122]
	_ = x[KindStaticKeyword-123]
	_ = x[KindYieldKeyword-124]
	_ = x[KindAbstractKeyword-125]
	_ = x[KindAccessorKeyword-126]
	_ = x[KindAsKeyword-127]
	_ = x[KindAssertsKeyword-128]
	_ = x[KindAssertKeyword-129]
	_ = x[KindAnyKeyword-130]
	_ = x[KindAsyncKeyword-131]
	_ = x[KindAwaitKeyword-132]
	_ = x[KindBooleanKeyword-133]
	_ = x[KindConstructorKeyword-134]
	_ = x[KindDeclareKeyword-135]
	_ = x[KindGetKeyword-136]
	_ = x[KindImmediateKeyword-137]
	_ = x[KindInferKeyword-138]
	_ = x[KindIntrinsicKeyword-139]
	_ = x[KindIsKeyword-140]
	_ = x[KindKeyOfKeyword-141]
	_ = x[KindModuleKeyword-142]
	_ = x[KindNamespaceKeyword-143]
	_ = x[KindNeverKeyword-144]
	_ = x[KindOutKeyword-145]
	_ = x[KindReadonlyKeyword-146]
	_ = x[KindRequireKeyword-147]
	_ = x[KindNumberKeyword-148]
	_ = x[KindObjectKeyword-149]
	_ = x[KindSatisfiesKeyword-150]
	_ = x[KindSetKeyword-151]
	_ = x[KindStringKeyword-152]
	_ = x[KindSymbolKeyword-153]
	_ = x[KindTypeKeyword-154]
	_ = x[KindUndefinedKeyword-155]
	_ = x[KindUniqueKeyword-156]
	_ = x[KindUnknownKeyword-157]
	_ = x[KindUsingKeyword-158]
	_ = x[KindFromKeyword-159]
	_ = x[KindGlobalKeyword-160]
	_ = x[KindBigIntKeyword-161]
	_ = x[KindOverrideKeyword-162]
	_ = x[KindOfKeyword-163]
	_ = x[KindQualifiedName-164]
	_ = x[KindComputedPropertyName-165]
	_ = x[KindTypeParameter-166]
	_ = x[KindParameter-167]
	_ = x[KindDecorator-168]
	_ = x[KindPropertySignature-169]
	_ = x[KindPropertyDeclaration-170]
	_ = x[KindMethodSignature-171]
	_ = x[KindMethodDeclaration-172]
	_ = x[KindClassStaticBlockDeclaration-173]
	_ = x[KindConstructor-174]
	_ = x[KindGetAccessor-175]
	_ = x[KindSetAccessor-176]
	_ = x[KindCallSignature-177]
	_ = x[KindConstructSignature-178]
	_ = x[KindIndexSignature-179]
	_ = x[KindTypePredicate-180]
	_ = x[KindTypeReference-181]
	_ = x[KindFunctionType-182]
	_ = x[KindConstructorType-183]
	_ = x[KindTypeQuery-184]
	_ = x[KindTypeLiteral-185]
	_ = x[KindArrayType-186]
	_ = x[KindTupleType-187]
	_ = x[KindOptionalType-188]
	_ = x[KindRestType-189]
	_ = x[KindUnionType-190]
	_ = x[KindIntersectionType-191]
	_ = x[KindConditionalType-192]
	_ = x[KindInferType-193]
	_ = x[KindParenthesizedType-194]
	_ = x[KindThisType-195]
	_ = x[KindTypeOperator-196]
	_ = x[KindIndexedAccessType-197]
	_ = x[KindMappedType-198]
	_ = x[KindLiteralType-199]
	_ = x[KindNamedTupleMember-200]
	_ = x[KindTemplateLiteralType-201]
	_ = x[KindTemplateLiteralTypeSpan-202]
	_ = x[KindImportType-203]
	_ = x[KindObjectBindingPattern-204]
	_ = x[KindArrayBindingPattern-205]
	_ = x[KindBindingElement-206]
	_ = x[KindArrayLiteralExpression-207]
	_ = x[KindObjectLiteralExpression-208]
	_ = x[KindPropertyAccessExpression-209]
	_ = x[KindElementAccessExpression-210]
	_ = x[KindCallExpression-211]
	_ = x[KindNewExpression-212]
	_ = x[KindTaggedTemplateExpression-213]
	_ = x[KindTypeAssertionExpression-214]
	_ = x[KindParenthesizedExpression-215]
	_ = x[KindFunctionExpression-216]
	_ = x[KindArrowFunction-217]
	_ = x[KindDeleteExpression-218]
	_ = x[KindTypeOfExpression-219]
	_ = x[KindVoidExpression-220]
	_ = x[KindAwaitExpression-221]
	_ = x[KindPrefixUnaryExpression-222]
	_ = x[KindPostfixUnaryExpression-223]
	_ = x[KindBinaryExpression-224]
	_ = x[KindConditionalExpression-225]
	_ = x[KindTemplateExpression-226]
	_ = x[KindYieldExpression-227]
	_ = x[KindSpreadElement-228]
	_ = x[KindClassExpression-229]
	_ = x[KindOmittedExpression-230]
	_ = x[KindExpressionWithTypeArguments-231]
	_ = x[KindAsExpression-232]
	_ = x[KindNonNullExpression-233]
	_ = x[KindMetaProperty-234]
	_ = x[KindSyntheticExpression-235]
	_ = x[KindSatisfiesExpression-236]
	_ = x[KindTemplateSpan-237]
	_ = x[KindSemicolonClassElement-238]
	_ = x[KindBlock-239]
	_ = x[KindEmptyStatement-240]
	_ = x[KindVariableStatement-241]
	_ = x[KindExpressionStatement-242]
	_ = x[KindIfStatement-243]
	_ = x[KindDoStatement-244]
	_ = x[KindWhileStatement-245]
	_ = x[KindForStatement-246]
	_ = x[KindForInStatement-247]
	_ = x[KindForOfStatement-248]
	_ = x[KindContinueStatement-249]
	_ = x[KindBreakStatement-250]
	_ = x[KindReturnStatement-251]
	_ = x[KindWithStatement-252]
	_ = x[KindSwitchStatement-253]
	_ = x[KindLabeledStatement-254]
	_ = x[KindThrowStatement-255]
	_ = x[KindTryStatement-256]
	_ = x[KindDebuggerStatement-257]
	_ = x[KindVariableDeclaration-258]
	_ = x[KindVariableDeclarationList-259]
	_ = x[KindFunctionDeclaration-260]
	_ = x[KindClassDeclaration-261]
	_ = x[KindInterfaceDeclaration-262]
	_ = x[KindTypeAliasDeclaration-263]
	_ = x[KindEnumDeclaration-264]
	_ = x[KindModuleDeclaration-265]
	_ = x[KindModuleBlock-266]
	_ = x[KindCaseBlock-267]
	_ = x[KindNamespaceExportDeclaration-268]
	_ = x[KindImportEqualsDeclaration-269]
	_ = x[KindImportDeclaration-270]
	_ = x[KindImportClause-271]
	_ = x[KindNamespaceImport-272]
	_ = x[KindNamedImports-273]
	_ = x[KindImportSpecifier-274]
	_ = x[KindExportAssignment-275]
	_ = x[KindExportDeclaration-276]
	_ = x[KindNamedExports-277]
	_ = x[KindNamespaceExport-278]
	_ = x[KindExportSpecifier-279]
	_ = x[KindMissingDeclaration-280]
	_ = x[KindExternalModuleReference-281]
	_ = x[KindJsxElement-282]
	_ = x[KindJsxSelfClosingElement-283]
	_ = x[KindJsxOpeningElement-284]
	_ = x[KindJsxClosingElement-285]
	_ = x[KindJsxFragment-286]
	_ = x[KindJsxOpeningFragment-287]
	_ = x[KindJsxClosingFragment-288]
	_ = x[KindJsxAttribute-289]
	_ = x[KindJsxAttributes-290]
	_ = x[KindJsxSpreadAttribute-291]
	_ = x[KindJsxExpression-292]
	_ = x[KindJsxNamespacedName-293]
	_ = x[KindCaseClause-294]
	_ = x[KindDefaultClause-295]
	_ = x[KindHeritageClause-296]
	_ = x[KindCatchClause-297]
	_ = x[KindImportAttributes-298]
	_ = x[KindImportAttribute-299]
	_ = x[KindPropertyAssignment-300]
	_ = x[KindShorthandPropertyAssignment-301]
	_ = x[KindSpreadAssignment-302]
	_ = x[KindEnumMember-303]
	_ = x[KindSourceFile-304]
	_ = x[KindBundle-305]
	_ = x[KindJSDocTypeExpression-306]
	_ = x[KindJSDocNameReference-307]
	_ = x[KindJSDocMemberName-308]
	_ = x[KindJSDocAllType-309]
	_ = x[KindJSDocUnknownType-310]
	_ = x[KindJSDocNullableType-311]
	_ = x[KindJSDocNonNullableType-312]
	_ = x[KindJSDocOptionalType-313]
	_ = x[KindJSDocVariadicType-314]
	_ = x[KindJSDocNamepathType-315]
	_ = x[KindJSDoc-316]
	_ = x[KindJSDocText-317]
	_ = x[KindJSDocTypeLiteral-318]
	_ = x[KindJSDocSignature-319]
	_ = x[KindJSDocLink-320]
	_ = x[KindJSDocLinkCode-321]
	_ = x[KindJSDocLinkPlain-322]
	_ = x[KindJSDocTag-323]
	_ = x[KindJSDocAugmentsTag-324]
	_ = x[KindJSDocImplementsTag-325]
	_ = x[KindJSDocAuthorTag-326]
	_ = x[KindJSDocDeprecatedTag-327]
	_ = x[KindJSDocImmediateTag-328]
	_ = x[KindJSDocClassTag-329]
	_ = x[KindJSDocPublicTag-330]
	_ = x[KindJSDocPrivateTag-331]
	_ = x[KindJSDocProtectedTag-332]
	_ = x[KindJSDocReadonlyTag-333]
	_ = x[KindJSDocOverrideTag-334]
	_ = x[KindJSDocCallbackTag-335]
	_ = x[KindJSDocOverloadTag-336]
	_ = x[KindJSDocEnumTag-337]
	_ = x[KindJSDocParameterTag-338]
	_ = x[KindJSDocReturnTag-339]
	_ = x[KindJSDocThisTag-340]
	_ = x[KindJSDocTypeTag-341]
	_ = x[KindJSDocTemplateTag-342]
	_ = x[KindJSDocTypedefTag-343]
	_ = x[KindJSDocSeeTag-344]
	_ = x[KindJSDocPropertyTag-345]
	_ = x[KindJSDocThrowsTag-346]
	_ = x[KindJSDocSatisfiesTag-347]
	_ = x[KindJSDocImportTag-348]
	_ = x[KindSyntaxList-349]
	_ = x[KindNotEmittedStatement-350]
	_ = x[KindPartiallyEmittedExpression-351]
	_ = x[KindCommaListExpression-352]
	_ = x[KindSyntheticReferenceExpression-353]
	_ = x[KindCount-354]
}

const _Kind_name = "KindUnknownKindEndOfFileKindWhitespaceTriviaKindNewLineTriviaKindConflictMarkerTriviaKindNonTextFileMarkerTriviaKindNumericLiteralKindBigIntLiteralKindStringLiteralKindJsxTextKindJsxTextAllWhiteSpacesKindRegularExpressionLiteralKindNoSubstitutionTemplateLiteralKindTemplateHeadKindTemplateMiddleKindTemplateTailKindOpenBraceTokenKindCloseBraceTokenKindOpenParenTokenKindCloseParenTokenKindOpenBracketTokenKindCloseBracketTokenKindDotTokenKindDotDotDotTokenKindSemicolonTokenKindCommaTokenKindQuestionDotTokenKindLessThanTokenKindLessThanSlashTokenKindGreaterThanTokenKindLessThanEqualsTokenKindGreaterThanEqualsTokenKindEqualsEqualsTokenKindExclamationEqualsTokenKindEqualsEqualsEqualsTokenKindExclamationEqualsEqualsTokenKindEqualsGreaterThanTokenKindPlusTokenKindMinusTokenKindAsteriskTokenKindAsteriskAsteriskTokenKindSlashTokenKindPercentTokenKindPlusPlusTokenKindMinusMinusTokenKindLessThanLessThanTokenKindGreaterThanGreaterThanTokenKindGreaterThanGreaterThanGreaterThanTokenKindAmpersandTokenKindBarTokenKindCaretTokenKindExclamationTokenKindTildeTokenKindAmpersandAmpersandTokenKindBarBarTokenKindQuestionTokenKindColonTokenKindAtTokenKindQuestionQuestionTokenKindBacktickTokenKindHashTokenKindEqualsTokenKindPlusEqualsTokenKindMinusEqualsTokenKindAsteriskEqualsTokenKindAsteriskAsteriskEqualsTokenKindSlashEqualsTokenKindPercentEqualsTokenKindLessThanLessThanEqualsTokenKindGreaterThanGreaterThanEqualsTokenKindGreaterThanGreaterThanGreaterThanEqualsTokenKindAmpersandEqualsTokenKindBarEqualsTokenKindBarBarEqualsTokenKindAmpersandAmpersandEqualsTokenKindQuestionQuestionEqualsTokenKindCaretEqualsTokenKindIdentifierKindPrivateIdentifierKindJSDocCommentTextTokenKindBreakKeywordKindCaseKeywordKindCatchKeywordKindClassKeywordKindConstKeywordKindContinueKeywordKindDebuggerKeywordKindDefaultKeywordKindDeleteKeywordKindDoKeywordKindElseKeywordKindEnumKeywordKindExportKeywordKindExtendsKeywordKindFalseKeywordKindFinallyKeywordKindForKeywordKindFunctionKeywordKindIfKeywordKindImportKeywordKindInKeywordKindInstanceOfKeywordKindNewKeywordKindNullKeywordKindReturnKeywordKindSuperKeywordKindSwitchKeywordKindThisKeywordKindThrowKeywordKindTrueKeywordKindTryKeywordKindTypeOfKeywordKindVarKeywordKindVoidKeywordKindWhileKeywordKindWithKeywordKindImplementsKeywordKindInterfaceKeywordKindLetKeywordKindPackageKeywordKindPrivateKeywordKindProtectedKeywordKindPublicKeywordKindStaticKeywordKindYieldKeywordKindAbstractKeywordKindAccessorKeywordKindAsKeywordKindAssertsKeywordKindAssertKeywordKindAnyKeywordKindAsyncKeywordKindAwaitKeywordKindBooleanKeywordKindConstructorKeywordKindDeclareKeywordKindGetKeywordKindImmediateKeywordKindInferKeywordKindIntrinsicKeywordKindIsKeywordKindKeyOfKeywordKindModuleKeywordKindNamespaceKeywordKindNeverKeywordKindOutKeywordKindReadonlyKeywordKindRequireKeywordKindNumberKeywordKindObjectKeywordKindSatisfiesKeywordKindSetKeywordKindStringKeywordKindSymbolKeywordKindTypeKeywordKindUndefinedKeywordKindUniqueKeywordKindUnknownKeywordKindUsingKeywordKindFromKeywordKindGlobalKeywordKindBigIntKeywordKindOverrideKeywordKindOfKeywordKindQualifiedNameKindComputedPropertyNameKindTypeParameterKindParameterKindDecoratorKindPropertySignatureKindPropertyDeclarationKindMethodSignatureKindMethodDeclarationKindClassStaticBlockDeclarationKindConstructorKindGetAccessorKindSetAccessorKindCallSignatureKindConstructSignatureKindIndexSignatureKindTypePredicateKindTypeReferenceKindFunctionTypeKindConstructorTypeKindTypeQueryKindTypeLiteralKindArrayTypeKindTupleTypeKindOptionalTypeKindRestTypeKindUnionTypeKindIntersectionTypeKindConditionalTypeKindInferTypeKindParenthesizedTypeKindThisTypeKindTypeOperatorKindIndexedAccessTypeKindMappedTypeKindLiteralTypeKindNamedTupleMemberKindTemplateLiteralTypeKindTemplateLiteralTypeSpanKindImportTypeKindObjectBindingPatternKindArrayBindingPatternKindBindingElementKindArrayLiteralExpressionKindObjectLiteralExpressionKindPropertyAccessExpressionKindElementAccessExpressionKindCallExpressionKindNewExpressionKindTaggedTemplateExpressionKindTypeAssertionExpressionKindParenthesizedExpressionKindFunctionExpressionKindArrowFunctionKindDeleteExpressionKindTypeOfExpressionKindVoidExpressionKindAwaitExpressionKindPrefixUnaryExpressionKindPostfixUnaryExpressionKindBinaryExpressionKindConditionalExpressionKindTemplateExpressionKindYieldExpressionKindSpreadElementKindClassExpressionKindOmittedExpressionKindExpressionWithTypeArgumentsKindAsExpressionKindNonNullExpressionKindMetaPropertyKindSyntheticExpressionKindSatisfiesExpressionKindTemplateSpanKindSemicolonClassElementKindBlockKindEmptyStatementKindVariableStatementKindExpressionStatementKindIfStatementKindDoStatementKindWhileStatementKindForStatementKindForInStatementKindForOfStatementKindContinueStatementKindBreakStatementKindReturnStatementKindWithStatementKindSwitchStatementKindLabeledStatementKindThrowStatementKindTryStatementKindDebuggerStatementKindVariableDeclarationKindVariableDeclarationListKindFunctionDeclarationKindClassDeclarationKindInterfaceDeclarationKindTypeAliasDeclarationKindEnumDeclarationKindModuleDeclarationKindModuleBlockKindCaseBlockKindNamespaceExportDeclarationKindImportEqualsDeclarationKindImportDeclarationKindImportClauseKindNamespaceImportKindNamedImportsKindImportSpecifierKindExportAssignmentKindExportDeclarationKindNamedExportsKindNamespaceExportKindExportSpecifierKindMissingDeclarationKindExternalModuleReferenceKindJsxElementKindJsxSelfClosingElementKindJsxOpeningElementKindJsxClosingElementKindJsxFragmentKindJsxOpeningFragmentKindJsxClosingFragmentKindJsxAttributeKindJsxAttributesKindJsxSpreadAttributeKindJsxExpressionKindJsxNamespacedNameKindCaseClauseKindDefaultClauseKindHeritageClauseKindCatchClauseKindImportAttributesKindImportAttributeKindPropertyAssignmentKindShorthandPropertyAssignmentKindSpreadAssignmentKindEnumMemberKindSourceFileKindBundleKindJSDocTypeExpressionKindJSDocNameReferenceKindJSDocMemberNameKindJSDocAllTypeKindJSDocUnknownTypeKindJSDocNullableTypeKindJSDocNonNullableTypeKindJSDocOptionalTypeKindJSDocVariadicTypeKindJSDocNamepathTypeKindJSDocKindJSDocTextKindJSDocTypeLiteralKindJSDocSignatureKindJSDocLinkKindJSDocLinkCodeKindJSDocLinkPlainKindJSDocTagKindJSDocAugmentsTagKindJSDocImplementsTagKindJSDocAuthorTagKindJSDocDeprecatedTagKindJSDocImmediateTagKindJSDocClassTagKindJSDocPublicTagKindJSDocPrivateTagKindJSDocProtectedTagKindJSDocReadonlyTagKindJSDocOverrideTagKindJSDocCallbackTagKindJSDocOverloadTagKindJSDocEnumTagKindJSDocParameterTagKindJSDocReturnTagKindJSDocThisTagKindJSDocTypeTagKindJSDocTemplateTagKindJSDocTypedefTagKindJSDocSeeTagKindJSDocPropertyTagKindJSDocThrowsTagKindJSDocSatisfiesTagKindJSDocImportTagKindSyntaxListKindNotEmittedStatementKindPartiallyEmittedExpressionKindCommaListExpressionKindSyntheticReferenceExpressionKindCount"

var _Kind_index = [...]uint16{0, 11, 24, 44, 61, 85, 112, 130, 147, 164, 175, 200, 228, 261, 277, 295, 311, 329, 348, 366, 385, 405, 426, 438, 456, 474, 488, 508, 525, 547, 567, 590, 616, 637, 663, 690, 722, 748, 761, 775, 792, 817, 831, 847, 864, 883, 908, 939, 981, 999, 1011, 1025, 1045, 1059, 1086, 1101, 1118, 1132, 1143, 1168, 1185, 1198, 1213, 1232, 1252, 1275, 1306, 1326, 1348, 1379, 1416, 1464, 1488, 1506, 1527, 1560, 1591, 1611, 1625, 1646, 1671, 1687, 1702, 1718, 1734, 1750, 1769, 1788, 1806, 1823, 1836, 1851, 1866, 1883, 1901, 1917, 1935, 1949, 1968, 1981, 1998, 2011, 2032, 2046, 2061, 2078, 2094, 2111, 2126, 2142, 2157, 2171, 2188, 2202, 2217, 2233, 2248, 2269, 2289, 2303, 2321, 2339, 2359, 2376, 2393, 2409, 2428, 2447, 2460, 2478, 2495, 2509, 2525, 2541, 2559, 2581, 2599, 2613, 2633, 2649, 2669, 2682, 2698, 2715, 2735, 2751, 2765, 2784, 2802, 2819, 2836, 2856, 2870, 2887, 2904, 2919, 2939, 2956, 2974, 2990, 3005, 3022, 3039, 3058, 3071, 3088, 3112, 3129, 3142, 3155, 3176, 3199, 3218, 3239, 3270, 3285, 3300, 3315, 3332, 3354, 3372, 3389, 3406, 3422, 3441, 3454, 3469, 3482, 3495, 3511, 3523, 3536, 3556, 3575, 3588, 3609, 3621, 3637, 3658, 3672, 3687, 3707, 3730, 3757, 3771, 3795, 3818, 3836, 3862, 3889, 3917, 3944, 3962, 3979, 4007, 4034, 4061, 4083, 4100, 4120, 4140, 4158, 4177, 4202, 4228, 4248, 4273, 4295, 4314, 4331, 4350, 4371, 4402, 4418, 4439, 4455, 4478, 4501, 4517, 4542, 4551, 4569, 4590, 4613, 4628, 4643, 4661, 4677, 4695, 4713, 4734, 4752, 4771, 4788, 4807, 4827, 4845, 4861, 4882, 4905, 4932, 4955, 4975, 4999, 5023, 5042, 5063, 5078, 5091, 5121, 5148, 5169, 5185, 5204, 5220, 5239, 5259, 5280, 5296, 5315, 5334, 5356, 5383, 5397, 5422, 5443, 5464, 5479, 5501, 5523, 5539, 5556, 5578, 5595, 5616, 5630, 5647, 5665, 5680, 5700, 5719, 5741, 5772, 5792, 5806, 5820, 5830, 5853, 5875, 5894, 5910, 5930, 5951, 5975, 5996, 6017, 6038, 6047, 6060, 6080, 6098, 6111, 6128, 6146, 6158, 6178, 6200, 6218, 6240, 6261, 6278, 6296, 6315, 6336, 6356, 6376, 6396, 6416, 6432, 6453, 6471, 6487, 6503, 6523, 6542, 6557, 6577, 6595, 6616, 6634, 6648, 6671, 6701, 6724, 6756, 6765}

func (i Kind) String() string {
	if i < 0 || i >= Kind(len(_Kind_index)-1) {
		return "Kind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Kind_name[_Kind_index[i]:_Kind_index[i+1]]
}
