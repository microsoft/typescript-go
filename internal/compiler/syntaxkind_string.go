// Code generated by "stringer -type=SyntaxKind -trimprefix=SyntaxKind"; DO NOT EDIT.

package compiler

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SyntaxKindUnknown-0]
	_ = x[SyntaxKindEndOfFile-1]
	_ = x[SyntaxKindConflictMarkerTrivia-2]
	_ = x[SyntaxKindNonTextFileMarkerTrivia-3]
	_ = x[SyntaxKindNumericLiteral-4]
	_ = x[SyntaxKindBigintLiteral-5]
	_ = x[SyntaxKindStringLiteral-6]
	_ = x[SyntaxKindJsxText-7]
	_ = x[SyntaxKindJsxTextAllWhiteSpaces-8]
	_ = x[SyntaxKindRegularExpressionLiteral-9]
	_ = x[SyntaxKindNoSubstitutionTemplateLiteral-10]
	_ = x[SyntaxKindTemplateHead-11]
	_ = x[SyntaxKindTemplateMiddle-12]
	_ = x[SyntaxKindTemplateTail-13]
	_ = x[SyntaxKindOpenBraceToken-14]
	_ = x[SyntaxKindCloseBraceToken-15]
	_ = x[SyntaxKindOpenParenToken-16]
	_ = x[SyntaxKindCloseParenToken-17]
	_ = x[SyntaxKindOpenBracketToken-18]
	_ = x[SyntaxKindCloseBracketToken-19]
	_ = x[SyntaxKindDotToken-20]
	_ = x[SyntaxKindDotDotDotToken-21]
	_ = x[SyntaxKindSemicolonToken-22]
	_ = x[SyntaxKindCommaToken-23]
	_ = x[SyntaxKindQuestionDotToken-24]
	_ = x[SyntaxKindLessThanToken-25]
	_ = x[SyntaxKindLessThanSlashToken-26]
	_ = x[SyntaxKindGreaterThanToken-27]
	_ = x[SyntaxKindLessThanEqualsToken-28]
	_ = x[SyntaxKindGreaterThanEqualsToken-29]
	_ = x[SyntaxKindEqualsEqualsToken-30]
	_ = x[SyntaxKindExclamationEqualsToken-31]
	_ = x[SyntaxKindEqualsEqualsEqualsToken-32]
	_ = x[SyntaxKindExclamationEqualsEqualsToken-33]
	_ = x[SyntaxKindEqualsGreaterThanToken-34]
	_ = x[SyntaxKindPlusToken-35]
	_ = x[SyntaxKindMinusToken-36]
	_ = x[SyntaxKindAsteriskToken-37]
	_ = x[SyntaxKindAsteriskAsteriskToken-38]
	_ = x[SyntaxKindSlashToken-39]
	_ = x[SyntaxKindPercentToken-40]
	_ = x[SyntaxKindPlusPlusToken-41]
	_ = x[SyntaxKindMinusMinusToken-42]
	_ = x[SyntaxKindLessThanLessThanToken-43]
	_ = x[SyntaxKindGreaterThanGreaterThanToken-44]
	_ = x[SyntaxKindGreaterThanGreaterThanGreaterThanToken-45]
	_ = x[SyntaxKindAmpersandToken-46]
	_ = x[SyntaxKindBarToken-47]
	_ = x[SyntaxKindCaretToken-48]
	_ = x[SyntaxKindExclamationToken-49]
	_ = x[SyntaxKindTildeToken-50]
	_ = x[SyntaxKindAmpersandAmpersandToken-51]
	_ = x[SyntaxKindBarBarToken-52]
	_ = x[SyntaxKindQuestionToken-53]
	_ = x[SyntaxKindColonToken-54]
	_ = x[SyntaxKindAtToken-55]
	_ = x[SyntaxKindQuestionQuestionToken-56]
	_ = x[SyntaxKindBacktickToken-57]
	_ = x[SyntaxKindHashToken-58]
	_ = x[SyntaxKindEqualsToken-59]
	_ = x[SyntaxKindPlusEqualsToken-60]
	_ = x[SyntaxKindMinusEqualsToken-61]
	_ = x[SyntaxKindAsteriskEqualsToken-62]
	_ = x[SyntaxKindAsteriskAsteriskEqualsToken-63]
	_ = x[SyntaxKindSlashEqualsToken-64]
	_ = x[SyntaxKindPercentEqualsToken-65]
	_ = x[SyntaxKindLessThanLessThanEqualsToken-66]
	_ = x[SyntaxKindGreaterThanGreaterThanEqualsToken-67]
	_ = x[SyntaxKindGreaterThanGreaterThanGreaterThanEqualsToken-68]
	_ = x[SyntaxKindAmpersandEqualsToken-69]
	_ = x[SyntaxKindBarEqualsToken-70]
	_ = x[SyntaxKindBarBarEqualsToken-71]
	_ = x[SyntaxKindAmpersandAmpersandEqualsToken-72]
	_ = x[SyntaxKindQuestionQuestionEqualsToken-73]
	_ = x[SyntaxKindCaretEqualsToken-74]
	_ = x[SyntaxKindIdentifier-75]
	_ = x[SyntaxKindPrivateIdentifier-76]
	_ = x[SyntaxKindJSDocCommentTextToken-77]
	_ = x[SyntaxKindBreakKeyword-78]
	_ = x[SyntaxKindCaseKeyword-79]
	_ = x[SyntaxKindCatchKeyword-80]
	_ = x[SyntaxKindClassKeyword-81]
	_ = x[SyntaxKindConstKeyword-82]
	_ = x[SyntaxKindContinueKeyword-83]
	_ = x[SyntaxKindDebuggerKeyword-84]
	_ = x[SyntaxKindDefaultKeyword-85]
	_ = x[SyntaxKindDeleteKeyword-86]
	_ = x[SyntaxKindDoKeyword-87]
	_ = x[SyntaxKindElseKeyword-88]
	_ = x[SyntaxKindEnumKeyword-89]
	_ = x[SyntaxKindExportKeyword-90]
	_ = x[SyntaxKindExtendsKeyword-91]
	_ = x[SyntaxKindFalseKeyword-92]
	_ = x[SyntaxKindFinallyKeyword-93]
	_ = x[SyntaxKindForKeyword-94]
	_ = x[SyntaxKindFunctionKeyword-95]
	_ = x[SyntaxKindIfKeyword-96]
	_ = x[SyntaxKindImportKeyword-97]
	_ = x[SyntaxKindInKeyword-98]
	_ = x[SyntaxKindInstanceOfKeyword-99]
	_ = x[SyntaxKindNewKeyword-100]
	_ = x[SyntaxKindNullKeyword-101]
	_ = x[SyntaxKindReturnKeyword-102]
	_ = x[SyntaxKindSuperKeyword-103]
	_ = x[SyntaxKindSwitchKeyword-104]
	_ = x[SyntaxKindThisKeyword-105]
	_ = x[SyntaxKindThrowKeyword-106]
	_ = x[SyntaxKindTrueKeyword-107]
	_ = x[SyntaxKindTryKeyword-108]
	_ = x[SyntaxKindTypeOfKeyword-109]
	_ = x[SyntaxKindVarKeyword-110]
	_ = x[SyntaxKindVoidKeyword-111]
	_ = x[SyntaxKindWhileKeyword-112]
	_ = x[SyntaxKindWithKeyword-113]
	_ = x[SyntaxKindImplementsKeyword-114]
	_ = x[SyntaxKindInterfaceKeyword-115]
	_ = x[SyntaxKindLetKeyword-116]
	_ = x[SyntaxKindPackageKeyword-117]
	_ = x[SyntaxKindPrivateKeyword-118]
	_ = x[SyntaxKindProtectedKeyword-119]
	_ = x[SyntaxKindPublicKeyword-120]
	_ = x[SyntaxKindStaticKeyword-121]
	_ = x[SyntaxKindYieldKeyword-122]
	_ = x[SyntaxKindAbstractKeyword-123]
	_ = x[SyntaxKindAccessorKeyword-124]
	_ = x[SyntaxKindAsKeyword-125]
	_ = x[SyntaxKindAssertsKeyword-126]
	_ = x[SyntaxKindAssertKeyword-127]
	_ = x[SyntaxKindAnyKeyword-128]
	_ = x[SyntaxKindAsyncKeyword-129]
	_ = x[SyntaxKindAwaitKeyword-130]
	_ = x[SyntaxKindBooleanKeyword-131]
	_ = x[SyntaxKindConstructorKeyword-132]
	_ = x[SyntaxKindDeclareKeyword-133]
	_ = x[SyntaxKindGetKeyword-134]
	_ = x[SyntaxKindImmediateKeyword-135]
	_ = x[SyntaxKindInferKeyword-136]
	_ = x[SyntaxKindIntrinsicKeyword-137]
	_ = x[SyntaxKindIsKeyword-138]
	_ = x[SyntaxKindKeyOfKeyword-139]
	_ = x[SyntaxKindModuleKeyword-140]
	_ = x[SyntaxKindNamespaceKeyword-141]
	_ = x[SyntaxKindNeverKeyword-142]
	_ = x[SyntaxKindOutKeyword-143]
	_ = x[SyntaxKindReadonlyKeyword-144]
	_ = x[SyntaxKindRequireKeyword-145]
	_ = x[SyntaxKindNumberKeyword-146]
	_ = x[SyntaxKindObjectKeyword-147]
	_ = x[SyntaxKindSatisfiesKeyword-148]
	_ = x[SyntaxKindSetKeyword-149]
	_ = x[SyntaxKindStringKeyword-150]
	_ = x[SyntaxKindSymbolKeyword-151]
	_ = x[SyntaxKindTypeKeyword-152]
	_ = x[SyntaxKindUndefinedKeyword-153]
	_ = x[SyntaxKindUniqueKeyword-154]
	_ = x[SyntaxKindUnknownKeyword-155]
	_ = x[SyntaxKindUsingKeyword-156]
	_ = x[SyntaxKindFromKeyword-157]
	_ = x[SyntaxKindGlobalKeyword-158]
	_ = x[SyntaxKindBigIntKeyword-159]
	_ = x[SyntaxKindOverrideKeyword-160]
	_ = x[SyntaxKindOfKeyword-161]
	_ = x[SyntaxKindQualifiedName-162]
	_ = x[SyntaxKindComputedPropertyName-163]
	_ = x[SyntaxKindModifierList-164]
	_ = x[SyntaxKindTypeParameterList-165]
	_ = x[SyntaxKindTypeArgumentList-166]
	_ = x[SyntaxKindTypeParameter-167]
	_ = x[SyntaxKindParameter-168]
	_ = x[SyntaxKindDecorator-169]
	_ = x[SyntaxKindPropertySignature-170]
	_ = x[SyntaxKindPropertyDeclaration-171]
	_ = x[SyntaxKindMethodSignature-172]
	_ = x[SyntaxKindMethodDeclaration-173]
	_ = x[SyntaxKindClassStaticBlockDeclaration-174]
	_ = x[SyntaxKindConstructor-175]
	_ = x[SyntaxKindGetAccessor-176]
	_ = x[SyntaxKindSetAccessor-177]
	_ = x[SyntaxKindCallSignature-178]
	_ = x[SyntaxKindConstructSignature-179]
	_ = x[SyntaxKindIndexSignature-180]
	_ = x[SyntaxKindTypePredicate-181]
	_ = x[SyntaxKindTypeReference-182]
	_ = x[SyntaxKindFunctionType-183]
	_ = x[SyntaxKindConstructorType-184]
	_ = x[SyntaxKindTypeQuery-185]
	_ = x[SyntaxKindTypeLiteral-186]
	_ = x[SyntaxKindArrayType-187]
	_ = x[SyntaxKindTupleType-188]
	_ = x[SyntaxKindOptionalType-189]
	_ = x[SyntaxKindRestType-190]
	_ = x[SyntaxKindUnionType-191]
	_ = x[SyntaxKindIntersectionType-192]
	_ = x[SyntaxKindConditionalType-193]
	_ = x[SyntaxKindInferType-194]
	_ = x[SyntaxKindParenthesizedType-195]
	_ = x[SyntaxKindThisType-196]
	_ = x[SyntaxKindTypeOperator-197]
	_ = x[SyntaxKindIndexedAccessType-198]
	_ = x[SyntaxKindMappedType-199]
	_ = x[SyntaxKindLiteralType-200]
	_ = x[SyntaxKindNamedTupleMember-201]
	_ = x[SyntaxKindTemplateLiteralType-202]
	_ = x[SyntaxKindTemplateLiteralTypeSpan-203]
	_ = x[SyntaxKindImportType-204]
	_ = x[SyntaxKindObjectBindingPattern-205]
	_ = x[SyntaxKindArrayBindingPattern-206]
	_ = x[SyntaxKindBindingElement-207]
	_ = x[SyntaxKindArrayLiteralExpression-208]
	_ = x[SyntaxKindObjectLiteralExpression-209]
	_ = x[SyntaxKindPropertyAccessExpression-210]
	_ = x[SyntaxKindElementAccessExpression-211]
	_ = x[SyntaxKindCallExpression-212]
	_ = x[SyntaxKindNewExpression-213]
	_ = x[SyntaxKindTaggedTemplateExpression-214]
	_ = x[SyntaxKindTypeAssertionExpression-215]
	_ = x[SyntaxKindParenthesizedExpression-216]
	_ = x[SyntaxKindFunctionExpression-217]
	_ = x[SyntaxKindArrowFunction-218]
	_ = x[SyntaxKindDeleteExpression-219]
	_ = x[SyntaxKindTypeOfExpression-220]
	_ = x[SyntaxKindVoidExpression-221]
	_ = x[SyntaxKindAwaitExpression-222]
	_ = x[SyntaxKindPrefixUnaryExpression-223]
	_ = x[SyntaxKindPostfixUnaryExpression-224]
	_ = x[SyntaxKindBinaryExpression-225]
	_ = x[SyntaxKindConditionalExpression-226]
	_ = x[SyntaxKindTemplateExpression-227]
	_ = x[SyntaxKindYieldExpression-228]
	_ = x[SyntaxKindSpreadElement-229]
	_ = x[SyntaxKindClassExpression-230]
	_ = x[SyntaxKindOmittedExpression-231]
	_ = x[SyntaxKindExpressionWithTypeArguments-232]
	_ = x[SyntaxKindAsExpression-233]
	_ = x[SyntaxKindNonNullExpression-234]
	_ = x[SyntaxKindMetaProperty-235]
	_ = x[SyntaxKindSyntheticExpression-236]
	_ = x[SyntaxKindSatisfiesExpression-237]
	_ = x[SyntaxKindTemplateSpan-238]
	_ = x[SyntaxKindSemicolonClassElement-239]
	_ = x[SyntaxKindBlock-240]
	_ = x[SyntaxKindEmptyStatement-241]
	_ = x[SyntaxKindVariableStatement-242]
	_ = x[SyntaxKindExpressionStatement-243]
	_ = x[SyntaxKindIfStatement-244]
	_ = x[SyntaxKindDoStatement-245]
	_ = x[SyntaxKindWhileStatement-246]
	_ = x[SyntaxKindForStatement-247]
	_ = x[SyntaxKindForInStatement-248]
	_ = x[SyntaxKindForOfStatement-249]
	_ = x[SyntaxKindContinueStatement-250]
	_ = x[SyntaxKindBreakStatement-251]
	_ = x[SyntaxKindReturnStatement-252]
	_ = x[SyntaxKindWithStatement-253]
	_ = x[SyntaxKindSwitchStatement-254]
	_ = x[SyntaxKindLabeledStatement-255]
	_ = x[SyntaxKindThrowStatement-256]
	_ = x[SyntaxKindTryStatement-257]
	_ = x[SyntaxKindDebuggerStatement-258]
	_ = x[SyntaxKindVariableDeclaration-259]
	_ = x[SyntaxKindVariableDeclarationList-260]
	_ = x[SyntaxKindFunctionDeclaration-261]
	_ = x[SyntaxKindClassDeclaration-262]
	_ = x[SyntaxKindInterfaceDeclaration-263]
	_ = x[SyntaxKindTypeAliasDeclaration-264]
	_ = x[SyntaxKindEnumDeclaration-265]
	_ = x[SyntaxKindModuleDeclaration-266]
	_ = x[SyntaxKindModuleBlock-267]
	_ = x[SyntaxKindCaseBlock-268]
	_ = x[SyntaxKindNamespaceExportDeclaration-269]
	_ = x[SyntaxKindImportEqualsDeclaration-270]
	_ = x[SyntaxKindImportDeclaration-271]
	_ = x[SyntaxKindImportClause-272]
	_ = x[SyntaxKindNamespaceImport-273]
	_ = x[SyntaxKindNamedImports-274]
	_ = x[SyntaxKindImportSpecifier-275]
	_ = x[SyntaxKindExportAssignment-276]
	_ = x[SyntaxKindExportDeclaration-277]
	_ = x[SyntaxKindNamedExports-278]
	_ = x[SyntaxKindNamespaceExport-279]
	_ = x[SyntaxKindExportSpecifier-280]
	_ = x[SyntaxKindMissingDeclaration-281]
	_ = x[SyntaxKindExternalModuleReference-282]
	_ = x[SyntaxKindJsxElement-283]
	_ = x[SyntaxKindJsxSelfClosingElement-284]
	_ = x[SyntaxKindJsxOpeningElement-285]
	_ = x[SyntaxKindJsxClosingElement-286]
	_ = x[SyntaxKindJsxFragment-287]
	_ = x[SyntaxKindJsxOpeningFragment-288]
	_ = x[SyntaxKindJsxClosingFragment-289]
	_ = x[SyntaxKindJsxAttribute-290]
	_ = x[SyntaxKindJsxAttributes-291]
	_ = x[SyntaxKindJsxSpreadAttribute-292]
	_ = x[SyntaxKindJsxExpression-293]
	_ = x[SyntaxKindJsxNamespacedName-294]
	_ = x[SyntaxKindCaseClause-295]
	_ = x[SyntaxKindDefaultClause-296]
	_ = x[SyntaxKindHeritageClause-297]
	_ = x[SyntaxKindCatchClause-298]
	_ = x[SyntaxKindImportAttributes-299]
	_ = x[SyntaxKindImportAttribute-300]
	_ = x[SyntaxKindPropertyAssignment-301]
	_ = x[SyntaxKindShorthandPropertyAssignment-302]
	_ = x[SyntaxKindSpreadAssignment-303]
	_ = x[SyntaxKindEnumMember-304]
	_ = x[SyntaxKindSourceFile-305]
	_ = x[SyntaxKindBundle-306]
	_ = x[SyntaxKindJSDocTypeExpression-307]
	_ = x[SyntaxKindJSDocNameReference-308]
	_ = x[SyntaxKindJSDocMemberName-309]
	_ = x[SyntaxKindJSDocAllType-310]
	_ = x[SyntaxKindJSDocUnknownType-311]
	_ = x[SyntaxKindJSDocNullableType-312]
	_ = x[SyntaxKindJSDocNonNullableType-313]
	_ = x[SyntaxKindJSDocOptionalType-314]
	_ = x[SyntaxKindJSDocFunctionType-315]
	_ = x[SyntaxKindJSDocVariadicType-316]
	_ = x[SyntaxKindJSDocNamepathType-317]
	_ = x[SyntaxKindJSDoc-318]
	_ = x[SyntaxKindJSDocText-319]
	_ = x[SyntaxKindJSDocTypeLiteral-320]
	_ = x[SyntaxKindJSDocSignature-321]
	_ = x[SyntaxKindJSDocLink-322]
	_ = x[SyntaxKindJSDocLinkCode-323]
	_ = x[SyntaxKindJSDocLinkPlain-324]
	_ = x[SyntaxKindJSDocTag-325]
	_ = x[SyntaxKindJSDocAugmentsTag-326]
	_ = x[SyntaxKindJSDocImplementsTag-327]
	_ = x[SyntaxKindJSDocAuthorTag-328]
	_ = x[SyntaxKindJSDocDeprecatedTag-329]
	_ = x[SyntaxKindJSDocImmediateTag-330]
	_ = x[SyntaxKindJSDocClassTag-331]
	_ = x[SyntaxKindJSDocPublicTag-332]
	_ = x[SyntaxKindJSDocPrivateTag-333]
	_ = x[SyntaxKindJSDocProtectedTag-334]
	_ = x[SyntaxKindJSDocReadonlyTag-335]
	_ = x[SyntaxKindJSDocOverrideTag-336]
	_ = x[SyntaxKindJSDocCallbackTag-337]
	_ = x[SyntaxKindJSDocOverloadTag-338]
	_ = x[SyntaxKindJSDocEnumTag-339]
	_ = x[SyntaxKindJSDocParameterTag-340]
	_ = x[SyntaxKindJSDocReturnTag-341]
	_ = x[SyntaxKindJSDocThisTag-342]
	_ = x[SyntaxKindJSDocTypeTag-343]
	_ = x[SyntaxKindJSDocTemplateTag-344]
	_ = x[SyntaxKindJSDocTypedefTag-345]
	_ = x[SyntaxKindJSDocSeeTag-346]
	_ = x[SyntaxKindJSDocPropertyTag-347]
	_ = x[SyntaxKindJSDocThrowsTag-348]
	_ = x[SyntaxKindJSDocSatisfiesTag-349]
	_ = x[SyntaxKindJSDocImportTag-350]
	_ = x[SyntaxKindSyntaxList-351]
	_ = x[SyntaxKindNotEmittedStatement-352]
	_ = x[SyntaxKindPartiallyEmittedExpression-353]
	_ = x[SyntaxKindCommaListExpression-354]
	_ = x[SyntaxKindSyntheticReferenceExpression-355]
	_ = x[SyntaxKindCount-356]
}

const _SyntaxKind_name = "UnknownEndOfFileConflictMarkerTriviaNonTextFileMarkerTriviaNumericLiteralBigintLiteralStringLiteralJsxTextJsxTextAllWhiteSpacesRegularExpressionLiteralNoSubstitutionTemplateLiteralTemplateHeadTemplateMiddleTemplateTailOpenBraceTokenCloseBraceTokenOpenParenTokenCloseParenTokenOpenBracketTokenCloseBracketTokenDotTokenDotDotDotTokenSemicolonTokenCommaTokenQuestionDotTokenLessThanTokenLessThanSlashTokenGreaterThanTokenLessThanEqualsTokenGreaterThanEqualsTokenEqualsEqualsTokenExclamationEqualsTokenEqualsEqualsEqualsTokenExclamationEqualsEqualsTokenEqualsGreaterThanTokenPlusTokenMinusTokenAsteriskTokenAsteriskAsteriskTokenSlashTokenPercentTokenPlusPlusTokenMinusMinusTokenLessThanLessThanTokenGreaterThanGreaterThanTokenGreaterThanGreaterThanGreaterThanTokenAmpersandTokenBarTokenCaretTokenExclamationTokenTildeTokenAmpersandAmpersandTokenBarBarTokenQuestionTokenColonTokenAtTokenQuestionQuestionTokenBacktickTokenHashTokenEqualsTokenPlusEqualsTokenMinusEqualsTokenAsteriskEqualsTokenAsteriskAsteriskEqualsTokenSlashEqualsTokenPercentEqualsTokenLessThanLessThanEqualsTokenGreaterThanGreaterThanEqualsTokenGreaterThanGreaterThanGreaterThanEqualsTokenAmpersandEqualsTokenBarEqualsTokenBarBarEqualsTokenAmpersandAmpersandEqualsTokenQuestionQuestionEqualsTokenCaretEqualsTokenIdentifierPrivateIdentifierJSDocCommentTextTokenBreakKeywordCaseKeywordCatchKeywordClassKeywordConstKeywordContinueKeywordDebuggerKeywordDefaultKeywordDeleteKeywordDoKeywordElseKeywordEnumKeywordExportKeywordExtendsKeywordFalseKeywordFinallyKeywordForKeywordFunctionKeywordIfKeywordImportKeywordInKeywordInstanceOfKeywordNewKeywordNullKeywordReturnKeywordSuperKeywordSwitchKeywordThisKeywordThrowKeywordTrueKeywordTryKeywordTypeOfKeywordVarKeywordVoidKeywordWhileKeywordWithKeywordImplementsKeywordInterfaceKeywordLetKeywordPackageKeywordPrivateKeywordProtectedKeywordPublicKeywordStaticKeywordYieldKeywordAbstractKeywordAccessorKeywordAsKeywordAssertsKeywordAssertKeywordAnyKeywordAsyncKeywordAwaitKeywordBooleanKeywordConstructorKeywordDeclareKeywordGetKeywordImmediateKeywordInferKeywordIntrinsicKeywordIsKeywordKeyOfKeywordModuleKeywordNamespaceKeywordNeverKeywordOutKeywordReadonlyKeywordRequireKeywordNumberKeywordObjectKeywordSatisfiesKeywordSetKeywordStringKeywordSymbolKeywordTypeKeywordUndefinedKeywordUniqueKeywordUnknownKeywordUsingKeywordFromKeywordGlobalKeywordBigIntKeywordOverrideKeywordOfKeywordQualifiedNameComputedPropertyNameModifierListTypeParameterListTypeArgumentListTypeParameterParameterDecoratorPropertySignaturePropertyDeclarationMethodSignatureMethodDeclarationClassStaticBlockDeclarationConstructorGetAccessorSetAccessorCallSignatureConstructSignatureIndexSignatureTypePredicateTypeReferenceFunctionTypeConstructorTypeTypeQueryTypeLiteralArrayTypeTupleTypeOptionalTypeRestTypeUnionTypeIntersectionTypeConditionalTypeInferTypeParenthesizedTypeThisTypeTypeOperatorIndexedAccessTypeMappedTypeLiteralTypeNamedTupleMemberTemplateLiteralTypeTemplateLiteralTypeSpanImportTypeObjectBindingPatternArrayBindingPatternBindingElementArrayLiteralExpressionObjectLiteralExpressionPropertyAccessExpressionElementAccessExpressionCallExpressionNewExpressionTaggedTemplateExpressionTypeAssertionExpressionParenthesizedExpressionFunctionExpressionArrowFunctionDeleteExpressionTypeOfExpressionVoidExpressionAwaitExpressionPrefixUnaryExpressionPostfixUnaryExpressionBinaryExpressionConditionalExpressionTemplateExpressionYieldExpressionSpreadElementClassExpressionOmittedExpressionExpressionWithTypeArgumentsAsExpressionNonNullExpressionMetaPropertySyntheticExpressionSatisfiesExpressionTemplateSpanSemicolonClassElementBlockEmptyStatementVariableStatementExpressionStatementIfStatementDoStatementWhileStatementForStatementForInStatementForOfStatementContinueStatementBreakStatementReturnStatementWithStatementSwitchStatementLabeledStatementThrowStatementTryStatementDebuggerStatementVariableDeclarationVariableDeclarationListFunctionDeclarationClassDeclarationInterfaceDeclarationTypeAliasDeclarationEnumDeclarationModuleDeclarationModuleBlockCaseBlockNamespaceExportDeclarationImportEqualsDeclarationImportDeclarationImportClauseNamespaceImportNamedImportsImportSpecifierExportAssignmentExportDeclarationNamedExportsNamespaceExportExportSpecifierMissingDeclarationExternalModuleReferenceJsxElementJsxSelfClosingElementJsxOpeningElementJsxClosingElementJsxFragmentJsxOpeningFragmentJsxClosingFragmentJsxAttributeJsxAttributesJsxSpreadAttributeJsxExpressionJsxNamespacedNameCaseClauseDefaultClauseHeritageClauseCatchClauseImportAttributesImportAttributePropertyAssignmentShorthandPropertyAssignmentSpreadAssignmentEnumMemberSourceFileBundleJSDocTypeExpressionJSDocNameReferenceJSDocMemberNameJSDocAllTypeJSDocUnknownTypeJSDocNullableTypeJSDocNonNullableTypeJSDocOptionalTypeJSDocFunctionTypeJSDocVariadicTypeJSDocNamepathTypeJSDocJSDocTextJSDocTypeLiteralJSDocSignatureJSDocLinkJSDocLinkCodeJSDocLinkPlainJSDocTagJSDocAugmentsTagJSDocImplementsTagJSDocAuthorTagJSDocDeprecatedTagJSDocImmediateTagJSDocClassTagJSDocPublicTagJSDocPrivateTagJSDocProtectedTagJSDocReadonlyTagJSDocOverrideTagJSDocCallbackTagJSDocOverloadTagJSDocEnumTagJSDocParameterTagJSDocReturnTagJSDocThisTagJSDocTypeTagJSDocTemplateTagJSDocTypedefTagJSDocSeeTagJSDocPropertyTagJSDocThrowsTagJSDocSatisfiesTagJSDocImportTagSyntaxListNotEmittedStatementPartiallyEmittedExpressionCommaListExpressionSyntheticReferenceExpressionCount"

var _SyntaxKind_index = [...]uint16{0, 7, 16, 36, 59, 73, 86, 99, 106, 127, 151, 180, 192, 206, 218, 232, 247, 261, 276, 292, 309, 317, 331, 345, 355, 371, 384, 402, 418, 437, 459, 476, 498, 521, 549, 571, 580, 590, 603, 624, 634, 646, 659, 674, 695, 722, 760, 774, 782, 792, 808, 818, 841, 852, 865, 875, 882, 903, 916, 925, 936, 951, 967, 986, 1013, 1029, 1047, 1074, 1107, 1151, 1171, 1185, 1202, 1231, 1258, 1274, 1284, 1301, 1322, 1334, 1345, 1357, 1369, 1381, 1396, 1411, 1425, 1438, 1447, 1458, 1469, 1482, 1496, 1508, 1522, 1532, 1547, 1556, 1569, 1578, 1595, 1605, 1616, 1629, 1641, 1654, 1665, 1677, 1688, 1698, 1711, 1721, 1732, 1744, 1755, 1772, 1788, 1798, 1812, 1826, 1842, 1855, 1868, 1880, 1895, 1910, 1919, 1933, 1946, 1956, 1968, 1980, 1994, 2012, 2026, 2036, 2052, 2064, 2080, 2089, 2101, 2114, 2130, 2142, 2152, 2167, 2181, 2194, 2207, 2223, 2233, 2246, 2259, 2270, 2286, 2299, 2313, 2325, 2336, 2349, 2362, 2377, 2386, 2399, 2419, 2431, 2448, 2464, 2477, 2486, 2495, 2512, 2531, 2546, 2563, 2590, 2601, 2612, 2623, 2636, 2654, 2668, 2681, 2694, 2706, 2721, 2730, 2741, 2750, 2759, 2771, 2779, 2788, 2804, 2819, 2828, 2845, 2853, 2865, 2882, 2892, 2903, 2919, 2938, 2961, 2971, 2991, 3010, 3024, 3046, 3069, 3093, 3116, 3130, 3143, 3167, 3190, 3213, 3231, 3244, 3260, 3276, 3290, 3305, 3326, 3348, 3364, 3385, 3403, 3418, 3431, 3446, 3463, 3490, 3502, 3519, 3531, 3550, 3569, 3581, 3602, 3607, 3621, 3638, 3657, 3668, 3679, 3693, 3705, 3719, 3733, 3750, 3764, 3779, 3792, 3807, 3823, 3837, 3849, 3866, 3885, 3908, 3927, 3943, 3963, 3983, 3998, 4015, 4026, 4035, 4061, 4084, 4101, 4113, 4128, 4140, 4155, 4171, 4188, 4200, 4215, 4230, 4248, 4271, 4281, 4302, 4319, 4336, 4347, 4365, 4383, 4395, 4408, 4426, 4439, 4456, 4466, 4479, 4493, 4504, 4520, 4535, 4553, 4580, 4596, 4606, 4616, 4622, 4641, 4659, 4674, 4686, 4702, 4719, 4739, 4756, 4773, 4790, 4807, 4812, 4821, 4837, 4851, 4860, 4873, 4887, 4895, 4911, 4929, 4943, 4961, 4978, 4991, 5005, 5020, 5037, 5053, 5069, 5085, 5101, 5113, 5130, 5144, 5156, 5168, 5184, 5199, 5210, 5226, 5240, 5257, 5271, 5281, 5300, 5326, 5345, 5373, 5378}

func (i SyntaxKind) String() string {
	if i < 0 || i >= SyntaxKind(len(_SyntaxKind_index)-1) {
		return "SyntaxKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SyntaxKind_name[_SyntaxKind_index[i]:_SyntaxKind_index[i+1]]
}
