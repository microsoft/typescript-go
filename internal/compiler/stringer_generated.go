// Code generated by "stringer -type=LanguageVariant,ModuleResolutionKind,ScriptKind,ScriptTarget,SignatureKind,SyntaxKind,Tristate -output=stringer_generated.go"; DO NOT EDIT.

package compiler

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LanguageVariantStandard-0]
	_ = x[LanguageVariantJSX-1]
}

const _LanguageVariant_name = "LanguageVariantStandardLanguageVariantJSX"

var _LanguageVariant_index = [...]uint8{0, 23, 41}

func (i LanguageVariant) String() string {
	if i < 0 || i >= LanguageVariant(len(_LanguageVariant_index)-1) {
		return "LanguageVariant(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LanguageVariant_name[_LanguageVariant_index[i]:_LanguageVariant_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ModuleResolutionKindUnknown-0]
	_ = x[ModuleResolutionKindNode16-3]
	_ = x[ModuleResolutionKindNodeNext-99]
	_ = x[ModuleResolutionKindBundler-100]
}

const (
	_ModuleResolutionKind_name_0 = "ModuleResolutionKindUnknown"
	_ModuleResolutionKind_name_1 = "ModuleResolutionKindNode16"
	_ModuleResolutionKind_name_2 = "ModuleResolutionKindNodeNextModuleResolutionKindBundler"
)

var (
	_ModuleResolutionKind_index_2 = [...]uint8{0, 28, 55}
)

func (i ModuleResolutionKind) String() string {
	switch {
	case i == 0:
		return _ModuleResolutionKind_name_0
	case i == 3:
		return _ModuleResolutionKind_name_1
	case 99 <= i && i <= 100:
		i -= 99
		return _ModuleResolutionKind_name_2[_ModuleResolutionKind_index_2[i]:_ModuleResolutionKind_index_2[i+1]]
	default:
		return "ModuleResolutionKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ScriptKindUnknown-0]
	_ = x[ScriptKindJS-1]
	_ = x[ScriptKindJSX-2]
	_ = x[ScriptKindTS-3]
	_ = x[ScriptKindTSX-4]
	_ = x[ScriptKindExternal-5]
	_ = x[ScriptKindJSON-6]
	_ = x[ScriptKindDeferred-7]
}

const _ScriptKind_name = "ScriptKindUnknownScriptKindJSScriptKindJSXScriptKindTSScriptKindTSXScriptKindExternalScriptKindJSONScriptKindDeferred"

var _ScriptKind_index = [...]uint8{0, 17, 29, 42, 54, 67, 85, 99, 117}

func (i ScriptKind) String() string {
	if i < 0 || i >= ScriptKind(len(_ScriptKind_index)-1) {
		return "ScriptKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ScriptKind_name[_ScriptKind_index[i]:_ScriptKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ScriptTargetNone-0]
	_ = x[ScriptTargetES3-0]
	_ = x[ScriptTargetES5-1]
	_ = x[ScriptTargetES2015-2]
	_ = x[ScriptTargetES2016-3]
	_ = x[ScriptTargetES2017-4]
	_ = x[ScriptTargetES2018-5]
	_ = x[ScriptTargetES2019-6]
	_ = x[ScriptTargetES2020-7]
	_ = x[ScriptTargetES2021-8]
	_ = x[ScriptTargetES2022-9]
	_ = x[ScriptTargetES2023-10]
	_ = x[ScriptTargetESNext-99]
	_ = x[ScriptTargetJSON-100]
	_ = x[ScriptTargetLatest-99]
}

const (
	_ScriptTarget_name_0 = "ScriptTargetNoneScriptTargetES5ScriptTargetES2015ScriptTargetES2016ScriptTargetES2017ScriptTargetES2018ScriptTargetES2019ScriptTargetES2020ScriptTargetES2021ScriptTargetES2022ScriptTargetES2023"
	_ScriptTarget_name_1 = "ScriptTargetESNextScriptTargetJSON"
)

var (
	_ScriptTarget_index_0 = [...]uint8{0, 16, 31, 49, 67, 85, 103, 121, 139, 157, 175, 193}
	_ScriptTarget_index_1 = [...]uint8{0, 18, 34}
)

func (i ScriptTarget) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _ScriptTarget_name_0[_ScriptTarget_index_0[i]:_ScriptTarget_index_0[i+1]]
	case 99 <= i && i <= 100:
		i -= 99
		return _ScriptTarget_name_1[_ScriptTarget_index_1[i]:_ScriptTarget_index_1[i+1]]
	default:
		return "ScriptTarget(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SignatureKindCall-0]
	_ = x[SignatureKindConstruct-1]
}

const _SignatureKind_name = "SignatureKindCallSignatureKindConstruct"

var _SignatureKind_index = [...]uint8{0, 17, 39}

func (i SignatureKind) String() string {
	if i < 0 || i >= SignatureKind(len(_SignatureKind_index)-1) {
		return "SignatureKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SignatureKind_name[_SignatureKind_index[i]:_SignatureKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SyntaxKindUnknown-0]
	_ = x[SyntaxKindEndOfFile-1]
	_ = x[SyntaxKindConflictMarkerTrivia-2]
	_ = x[SyntaxKindNonTextFileMarkerTrivia-3]
	_ = x[SyntaxKindNumericLiteral-4]
	_ = x[SyntaxKindBigIntLiteral-5]
	_ = x[SyntaxKindStringLiteral-6]
	_ = x[SyntaxKindJsxText-7]
	_ = x[SyntaxKindJsxTextAllWhiteSpaces-8]
	_ = x[SyntaxKindRegularExpressionLiteral-9]
	_ = x[SyntaxKindNoSubstitutionTemplateLiteral-10]
	_ = x[SyntaxKindTemplateHead-11]
	_ = x[SyntaxKindTemplateMiddle-12]
	_ = x[SyntaxKindTemplateTail-13]
	_ = x[SyntaxKindOpenBraceToken-14]
	_ = x[SyntaxKindCloseBraceToken-15]
	_ = x[SyntaxKindOpenParenToken-16]
	_ = x[SyntaxKindCloseParenToken-17]
	_ = x[SyntaxKindOpenBracketToken-18]
	_ = x[SyntaxKindCloseBracketToken-19]
	_ = x[SyntaxKindDotToken-20]
	_ = x[SyntaxKindDotDotDotToken-21]
	_ = x[SyntaxKindSemicolonToken-22]
	_ = x[SyntaxKindCommaToken-23]
	_ = x[SyntaxKindQuestionDotToken-24]
	_ = x[SyntaxKindLessThanToken-25]
	_ = x[SyntaxKindLessThanSlashToken-26]
	_ = x[SyntaxKindGreaterThanToken-27]
	_ = x[SyntaxKindLessThanEqualsToken-28]
	_ = x[SyntaxKindGreaterThanEqualsToken-29]
	_ = x[SyntaxKindEqualsEqualsToken-30]
	_ = x[SyntaxKindExclamationEqualsToken-31]
	_ = x[SyntaxKindEqualsEqualsEqualsToken-32]
	_ = x[SyntaxKindExclamationEqualsEqualsToken-33]
	_ = x[SyntaxKindEqualsGreaterThanToken-34]
	_ = x[SyntaxKindPlusToken-35]
	_ = x[SyntaxKindMinusToken-36]
	_ = x[SyntaxKindAsteriskToken-37]
	_ = x[SyntaxKindAsteriskAsteriskToken-38]
	_ = x[SyntaxKindSlashToken-39]
	_ = x[SyntaxKindPercentToken-40]
	_ = x[SyntaxKindPlusPlusToken-41]
	_ = x[SyntaxKindMinusMinusToken-42]
	_ = x[SyntaxKindLessThanLessThanToken-43]
	_ = x[SyntaxKindGreaterThanGreaterThanToken-44]
	_ = x[SyntaxKindGreaterThanGreaterThanGreaterThanToken-45]
	_ = x[SyntaxKindAmpersandToken-46]
	_ = x[SyntaxKindBarToken-47]
	_ = x[SyntaxKindCaretToken-48]
	_ = x[SyntaxKindExclamationToken-49]
	_ = x[SyntaxKindTildeToken-50]
	_ = x[SyntaxKindAmpersandAmpersandToken-51]
	_ = x[SyntaxKindBarBarToken-52]
	_ = x[SyntaxKindQuestionToken-53]
	_ = x[SyntaxKindColonToken-54]
	_ = x[SyntaxKindAtToken-55]
	_ = x[SyntaxKindQuestionQuestionToken-56]
	_ = x[SyntaxKindBacktickToken-57]
	_ = x[SyntaxKindHashToken-58]
	_ = x[SyntaxKindEqualsToken-59]
	_ = x[SyntaxKindPlusEqualsToken-60]
	_ = x[SyntaxKindMinusEqualsToken-61]
	_ = x[SyntaxKindAsteriskEqualsToken-62]
	_ = x[SyntaxKindAsteriskAsteriskEqualsToken-63]
	_ = x[SyntaxKindSlashEqualsToken-64]
	_ = x[SyntaxKindPercentEqualsToken-65]
	_ = x[SyntaxKindLessThanLessThanEqualsToken-66]
	_ = x[SyntaxKindGreaterThanGreaterThanEqualsToken-67]
	_ = x[SyntaxKindGreaterThanGreaterThanGreaterThanEqualsToken-68]
	_ = x[SyntaxKindAmpersandEqualsToken-69]
	_ = x[SyntaxKindBarEqualsToken-70]
	_ = x[SyntaxKindBarBarEqualsToken-71]
	_ = x[SyntaxKindAmpersandAmpersandEqualsToken-72]
	_ = x[SyntaxKindQuestionQuestionEqualsToken-73]
	_ = x[SyntaxKindCaretEqualsToken-74]
	_ = x[SyntaxKindIdentifier-75]
	_ = x[SyntaxKindPrivateIdentifier-76]
	_ = x[SyntaxKindJSDocCommentTextToken-77]
	_ = x[SyntaxKindBreakKeyword-78]
	_ = x[SyntaxKindCaseKeyword-79]
	_ = x[SyntaxKindCatchKeyword-80]
	_ = x[SyntaxKindClassKeyword-81]
	_ = x[SyntaxKindConstKeyword-82]
	_ = x[SyntaxKindContinueKeyword-83]
	_ = x[SyntaxKindDebuggerKeyword-84]
	_ = x[SyntaxKindDefaultKeyword-85]
	_ = x[SyntaxKindDeleteKeyword-86]
	_ = x[SyntaxKindDoKeyword-87]
	_ = x[SyntaxKindElseKeyword-88]
	_ = x[SyntaxKindEnumKeyword-89]
	_ = x[SyntaxKindExportKeyword-90]
	_ = x[SyntaxKindExtendsKeyword-91]
	_ = x[SyntaxKindFalseKeyword-92]
	_ = x[SyntaxKindFinallyKeyword-93]
	_ = x[SyntaxKindForKeyword-94]
	_ = x[SyntaxKindFunctionKeyword-95]
	_ = x[SyntaxKindIfKeyword-96]
	_ = x[SyntaxKindImportKeyword-97]
	_ = x[SyntaxKindInKeyword-98]
	_ = x[SyntaxKindInstanceOfKeyword-99]
	_ = x[SyntaxKindNewKeyword-100]
	_ = x[SyntaxKindNullKeyword-101]
	_ = x[SyntaxKindReturnKeyword-102]
	_ = x[SyntaxKindSuperKeyword-103]
	_ = x[SyntaxKindSwitchKeyword-104]
	_ = x[SyntaxKindThisKeyword-105]
	_ = x[SyntaxKindThrowKeyword-106]
	_ = x[SyntaxKindTrueKeyword-107]
	_ = x[SyntaxKindTryKeyword-108]
	_ = x[SyntaxKindTypeOfKeyword-109]
	_ = x[SyntaxKindVarKeyword-110]
	_ = x[SyntaxKindVoidKeyword-111]
	_ = x[SyntaxKindWhileKeyword-112]
	_ = x[SyntaxKindWithKeyword-113]
	_ = x[SyntaxKindImplementsKeyword-114]
	_ = x[SyntaxKindInterfaceKeyword-115]
	_ = x[SyntaxKindLetKeyword-116]
	_ = x[SyntaxKindPackageKeyword-117]
	_ = x[SyntaxKindPrivateKeyword-118]
	_ = x[SyntaxKindProtectedKeyword-119]
	_ = x[SyntaxKindPublicKeyword-120]
	_ = x[SyntaxKindStaticKeyword-121]
	_ = x[SyntaxKindYieldKeyword-122]
	_ = x[SyntaxKindAbstractKeyword-123]
	_ = x[SyntaxKindAccessorKeyword-124]
	_ = x[SyntaxKindAsKeyword-125]
	_ = x[SyntaxKindAssertsKeyword-126]
	_ = x[SyntaxKindAssertKeyword-127]
	_ = x[SyntaxKindAnyKeyword-128]
	_ = x[SyntaxKindAsyncKeyword-129]
	_ = x[SyntaxKindAwaitKeyword-130]
	_ = x[SyntaxKindBooleanKeyword-131]
	_ = x[SyntaxKindConstructorKeyword-132]
	_ = x[SyntaxKindDeclareKeyword-133]
	_ = x[SyntaxKindGetKeyword-134]
	_ = x[SyntaxKindImmediateKeyword-135]
	_ = x[SyntaxKindInferKeyword-136]
	_ = x[SyntaxKindIntrinsicKeyword-137]
	_ = x[SyntaxKindIsKeyword-138]
	_ = x[SyntaxKindKeyOfKeyword-139]
	_ = x[SyntaxKindModuleKeyword-140]
	_ = x[SyntaxKindNamespaceKeyword-141]
	_ = x[SyntaxKindNeverKeyword-142]
	_ = x[SyntaxKindOutKeyword-143]
	_ = x[SyntaxKindReadonlyKeyword-144]
	_ = x[SyntaxKindRequireKeyword-145]
	_ = x[SyntaxKindNumberKeyword-146]
	_ = x[SyntaxKindObjectKeyword-147]
	_ = x[SyntaxKindSatisfiesKeyword-148]
	_ = x[SyntaxKindSetKeyword-149]
	_ = x[SyntaxKindStringKeyword-150]
	_ = x[SyntaxKindSymbolKeyword-151]
	_ = x[SyntaxKindTypeKeyword-152]
	_ = x[SyntaxKindUndefinedKeyword-153]
	_ = x[SyntaxKindUniqueKeyword-154]
	_ = x[SyntaxKindUnknownKeyword-155]
	_ = x[SyntaxKindUsingKeyword-156]
	_ = x[SyntaxKindFromKeyword-157]
	_ = x[SyntaxKindGlobalKeyword-158]
	_ = x[SyntaxKindBigIntKeyword-159]
	_ = x[SyntaxKindOverrideKeyword-160]
	_ = x[SyntaxKindOfKeyword-161]
	_ = x[SyntaxKindQualifiedName-162]
	_ = x[SyntaxKindComputedPropertyName-163]
	_ = x[SyntaxKindModifierList-164]
	_ = x[SyntaxKindTypeParameterList-165]
	_ = x[SyntaxKindTypeArgumentList-166]
	_ = x[SyntaxKindJSDocList-167]
	_ = x[SyntaxKindJSDocCommentList-168]
	_ = x[SyntaxKindJSDocTagList-169]
	_ = x[SyntaxKindTypeParameter-170]
	_ = x[SyntaxKindParameter-171]
	_ = x[SyntaxKindDecorator-172]
	_ = x[SyntaxKindPropertySignature-173]
	_ = x[SyntaxKindPropertyDeclaration-174]
	_ = x[SyntaxKindMethodSignature-175]
	_ = x[SyntaxKindMethodDeclaration-176]
	_ = x[SyntaxKindClassStaticBlockDeclaration-177]
	_ = x[SyntaxKindConstructor-178]
	_ = x[SyntaxKindGetAccessor-179]
	_ = x[SyntaxKindSetAccessor-180]
	_ = x[SyntaxKindCallSignature-181]
	_ = x[SyntaxKindConstructSignature-182]
	_ = x[SyntaxKindIndexSignature-183]
	_ = x[SyntaxKindTypePredicate-184]
	_ = x[SyntaxKindTypeReference-185]
	_ = x[SyntaxKindFunctionType-186]
	_ = x[SyntaxKindConstructorType-187]
	_ = x[SyntaxKindTypeQuery-188]
	_ = x[SyntaxKindTypeLiteral-189]
	_ = x[SyntaxKindArrayType-190]
	_ = x[SyntaxKindTupleType-191]
	_ = x[SyntaxKindOptionalType-192]
	_ = x[SyntaxKindRestType-193]
	_ = x[SyntaxKindUnionType-194]
	_ = x[SyntaxKindIntersectionType-195]
	_ = x[SyntaxKindConditionalType-196]
	_ = x[SyntaxKindInferType-197]
	_ = x[SyntaxKindParenthesizedType-198]
	_ = x[SyntaxKindThisType-199]
	_ = x[SyntaxKindTypeOperator-200]
	_ = x[SyntaxKindIndexedAccessType-201]
	_ = x[SyntaxKindMappedType-202]
	_ = x[SyntaxKindLiteralType-203]
	_ = x[SyntaxKindNamedTupleMember-204]
	_ = x[SyntaxKindTemplateLiteralType-205]
	_ = x[SyntaxKindTemplateLiteralTypeSpan-206]
	_ = x[SyntaxKindImportType-207]
	_ = x[SyntaxKindObjectBindingPattern-208]
	_ = x[SyntaxKindArrayBindingPattern-209]
	_ = x[SyntaxKindBindingElement-210]
	_ = x[SyntaxKindArrayLiteralExpression-211]
	_ = x[SyntaxKindObjectLiteralExpression-212]
	_ = x[SyntaxKindPropertyAccessExpression-213]
	_ = x[SyntaxKindElementAccessExpression-214]
	_ = x[SyntaxKindCallExpression-215]
	_ = x[SyntaxKindNewExpression-216]
	_ = x[SyntaxKindTaggedTemplateExpression-217]
	_ = x[SyntaxKindTypeAssertionExpression-218]
	_ = x[SyntaxKindParenthesizedExpression-219]
	_ = x[SyntaxKindFunctionExpression-220]
	_ = x[SyntaxKindArrowFunction-221]
	_ = x[SyntaxKindDeleteExpression-222]
	_ = x[SyntaxKindTypeOfExpression-223]
	_ = x[SyntaxKindVoidExpression-224]
	_ = x[SyntaxKindAwaitExpression-225]
	_ = x[SyntaxKindPrefixUnaryExpression-226]
	_ = x[SyntaxKindPostfixUnaryExpression-227]
	_ = x[SyntaxKindBinaryExpression-228]
	_ = x[SyntaxKindConditionalExpression-229]
	_ = x[SyntaxKindTemplateExpression-230]
	_ = x[SyntaxKindYieldExpression-231]
	_ = x[SyntaxKindSpreadElement-232]
	_ = x[SyntaxKindClassExpression-233]
	_ = x[SyntaxKindOmittedExpression-234]
	_ = x[SyntaxKindExpressionWithTypeArguments-235]
	_ = x[SyntaxKindAsExpression-236]
	_ = x[SyntaxKindNonNullExpression-237]
	_ = x[SyntaxKindMetaProperty-238]
	_ = x[SyntaxKindSyntheticExpression-239]
	_ = x[SyntaxKindSatisfiesExpression-240]
	_ = x[SyntaxKindTemplateSpan-241]
	_ = x[SyntaxKindSemicolonClassElement-242]
	_ = x[SyntaxKindBlock-243]
	_ = x[SyntaxKindEmptyStatement-244]
	_ = x[SyntaxKindVariableStatement-245]
	_ = x[SyntaxKindExpressionStatement-246]
	_ = x[SyntaxKindIfStatement-247]
	_ = x[SyntaxKindDoStatement-248]
	_ = x[SyntaxKindWhileStatement-249]
	_ = x[SyntaxKindForStatement-250]
	_ = x[SyntaxKindForInStatement-251]
	_ = x[SyntaxKindForOfStatement-252]
	_ = x[SyntaxKindContinueStatement-253]
	_ = x[SyntaxKindBreakStatement-254]
	_ = x[SyntaxKindReturnStatement-255]
	_ = x[SyntaxKindWithStatement-256]
	_ = x[SyntaxKindSwitchStatement-257]
	_ = x[SyntaxKindLabeledStatement-258]
	_ = x[SyntaxKindThrowStatement-259]
	_ = x[SyntaxKindTryStatement-260]
	_ = x[SyntaxKindDebuggerStatement-261]
	_ = x[SyntaxKindVariableDeclaration-262]
	_ = x[SyntaxKindVariableDeclarationList-263]
	_ = x[SyntaxKindFunctionDeclaration-264]
	_ = x[SyntaxKindClassDeclaration-265]
	_ = x[SyntaxKindInterfaceDeclaration-266]
	_ = x[SyntaxKindTypeAliasDeclaration-267]
	_ = x[SyntaxKindEnumDeclaration-268]
	_ = x[SyntaxKindModuleDeclaration-269]
	_ = x[SyntaxKindModuleBlock-270]
	_ = x[SyntaxKindCaseBlock-271]
	_ = x[SyntaxKindNamespaceExportDeclaration-272]
	_ = x[SyntaxKindImportEqualsDeclaration-273]
	_ = x[SyntaxKindImportDeclaration-274]
	_ = x[SyntaxKindImportClause-275]
	_ = x[SyntaxKindNamespaceImport-276]
	_ = x[SyntaxKindNamedImports-277]
	_ = x[SyntaxKindImportSpecifier-278]
	_ = x[SyntaxKindExportAssignment-279]
	_ = x[SyntaxKindExportDeclaration-280]
	_ = x[SyntaxKindNamedExports-281]
	_ = x[SyntaxKindNamespaceExport-282]
	_ = x[SyntaxKindExportSpecifier-283]
	_ = x[SyntaxKindMissingDeclaration-284]
	_ = x[SyntaxKindExternalModuleReference-285]
	_ = x[SyntaxKindJsxElement-286]
	_ = x[SyntaxKindJsxSelfClosingElement-287]
	_ = x[SyntaxKindJsxOpeningElement-288]
	_ = x[SyntaxKindJsxClosingElement-289]
	_ = x[SyntaxKindJsxFragment-290]
	_ = x[SyntaxKindJsxOpeningFragment-291]
	_ = x[SyntaxKindJsxClosingFragment-292]
	_ = x[SyntaxKindJsxAttribute-293]
	_ = x[SyntaxKindJsxAttributes-294]
	_ = x[SyntaxKindJsxSpreadAttribute-295]
	_ = x[SyntaxKindJsxExpression-296]
	_ = x[SyntaxKindJsxNamespacedName-297]
	_ = x[SyntaxKindCaseClause-298]
	_ = x[SyntaxKindDefaultClause-299]
	_ = x[SyntaxKindHeritageClause-300]
	_ = x[SyntaxKindCatchClause-301]
	_ = x[SyntaxKindImportAttributes-302]
	_ = x[SyntaxKindImportAttribute-303]
	_ = x[SyntaxKindPropertyAssignment-304]
	_ = x[SyntaxKindShorthandPropertyAssignment-305]
	_ = x[SyntaxKindSpreadAssignment-306]
	_ = x[SyntaxKindEnumMember-307]
	_ = x[SyntaxKindSourceFile-308]
	_ = x[SyntaxKindBundle-309]
	_ = x[SyntaxKindJSDocTypeExpression-310]
	_ = x[SyntaxKindJSDocNameReference-311]
	_ = x[SyntaxKindJSDocMemberName-312]
	_ = x[SyntaxKindJSDocAllType-313]
	_ = x[SyntaxKindJSDocUnknownType-314]
	_ = x[SyntaxKindJSDocNullableType-315]
	_ = x[SyntaxKindJSDocNonNullableType-316]
	_ = x[SyntaxKindJSDocOptionalType-317]
	_ = x[SyntaxKindJSDocFunctionType-318]
	_ = x[SyntaxKindJSDocVariadicType-319]
	_ = x[SyntaxKindJSDocNamepathType-320]
	_ = x[SyntaxKindJSDoc-321]
	_ = x[SyntaxKindJSDocText-322]
	_ = x[SyntaxKindJSDocTypeLiteral-323]
	_ = x[SyntaxKindJSDocSignature-324]
	_ = x[SyntaxKindJSDocLink-325]
	_ = x[SyntaxKindJSDocLinkCode-326]
	_ = x[SyntaxKindJSDocLinkPlain-327]
	_ = x[SyntaxKindJSDocTag-328]
	_ = x[SyntaxKindJSDocAugmentsTag-329]
	_ = x[SyntaxKindJSDocImplementsTag-330]
	_ = x[SyntaxKindJSDocAuthorTag-331]
	_ = x[SyntaxKindJSDocDeprecatedTag-332]
	_ = x[SyntaxKindJSDocImmediateTag-333]
	_ = x[SyntaxKindJSDocClassTag-334]
	_ = x[SyntaxKindJSDocPublicTag-335]
	_ = x[SyntaxKindJSDocPrivateTag-336]
	_ = x[SyntaxKindJSDocProtectedTag-337]
	_ = x[SyntaxKindJSDocReadonlyTag-338]
	_ = x[SyntaxKindJSDocOverrideTag-339]
	_ = x[SyntaxKindJSDocCallbackTag-340]
	_ = x[SyntaxKindJSDocOverloadTag-341]
	_ = x[SyntaxKindJSDocEnumTag-342]
	_ = x[SyntaxKindJSDocParameterTag-343]
	_ = x[SyntaxKindJSDocReturnTag-344]
	_ = x[SyntaxKindJSDocThisTag-345]
	_ = x[SyntaxKindJSDocTypeTag-346]
	_ = x[SyntaxKindJSDocTemplateTag-347]
	_ = x[SyntaxKindJSDocTypedefTag-348]
	_ = x[SyntaxKindJSDocSeeTag-349]
	_ = x[SyntaxKindJSDocPropertyTag-350]
	_ = x[SyntaxKindJSDocThrowsTag-351]
	_ = x[SyntaxKindJSDocSatisfiesTag-352]
	_ = x[SyntaxKindJSDocImportTag-353]
	_ = x[SyntaxKindSyntaxList-354]
	_ = x[SyntaxKindNotEmittedStatement-355]
	_ = x[SyntaxKindPartiallyEmittedExpression-356]
	_ = x[SyntaxKindCommaListExpression-357]
	_ = x[SyntaxKindSyntheticReferenceExpression-358]
	_ = x[SyntaxKindCount-359]
}

const _SyntaxKind_name = "SyntaxKindUnknownSyntaxKindEndOfFileSyntaxKindConflictMarkerTriviaSyntaxKindNonTextFileMarkerTriviaSyntaxKindNumericLiteralSyntaxKindBigIntLiteralSyntaxKindStringLiteralSyntaxKindJsxTextSyntaxKindJsxTextAllWhiteSpacesSyntaxKindRegularExpressionLiteralSyntaxKindNoSubstitutionTemplateLiteralSyntaxKindTemplateHeadSyntaxKindTemplateMiddleSyntaxKindTemplateTailSyntaxKindOpenBraceTokenSyntaxKindCloseBraceTokenSyntaxKindOpenParenTokenSyntaxKindCloseParenTokenSyntaxKindOpenBracketTokenSyntaxKindCloseBracketTokenSyntaxKindDotTokenSyntaxKindDotDotDotTokenSyntaxKindSemicolonTokenSyntaxKindCommaTokenSyntaxKindQuestionDotTokenSyntaxKindLessThanTokenSyntaxKindLessThanSlashTokenSyntaxKindGreaterThanTokenSyntaxKindLessThanEqualsTokenSyntaxKindGreaterThanEqualsTokenSyntaxKindEqualsEqualsTokenSyntaxKindExclamationEqualsTokenSyntaxKindEqualsEqualsEqualsTokenSyntaxKindExclamationEqualsEqualsTokenSyntaxKindEqualsGreaterThanTokenSyntaxKindPlusTokenSyntaxKindMinusTokenSyntaxKindAsteriskTokenSyntaxKindAsteriskAsteriskTokenSyntaxKindSlashTokenSyntaxKindPercentTokenSyntaxKindPlusPlusTokenSyntaxKindMinusMinusTokenSyntaxKindLessThanLessThanTokenSyntaxKindGreaterThanGreaterThanTokenSyntaxKindGreaterThanGreaterThanGreaterThanTokenSyntaxKindAmpersandTokenSyntaxKindBarTokenSyntaxKindCaretTokenSyntaxKindExclamationTokenSyntaxKindTildeTokenSyntaxKindAmpersandAmpersandTokenSyntaxKindBarBarTokenSyntaxKindQuestionTokenSyntaxKindColonTokenSyntaxKindAtTokenSyntaxKindQuestionQuestionTokenSyntaxKindBacktickTokenSyntaxKindHashTokenSyntaxKindEqualsTokenSyntaxKindPlusEqualsTokenSyntaxKindMinusEqualsTokenSyntaxKindAsteriskEqualsTokenSyntaxKindAsteriskAsteriskEqualsTokenSyntaxKindSlashEqualsTokenSyntaxKindPercentEqualsTokenSyntaxKindLessThanLessThanEqualsTokenSyntaxKindGreaterThanGreaterThanEqualsTokenSyntaxKindGreaterThanGreaterThanGreaterThanEqualsTokenSyntaxKindAmpersandEqualsTokenSyntaxKindBarEqualsTokenSyntaxKindBarBarEqualsTokenSyntaxKindAmpersandAmpersandEqualsTokenSyntaxKindQuestionQuestionEqualsTokenSyntaxKindCaretEqualsTokenSyntaxKindIdentifierSyntaxKindPrivateIdentifierSyntaxKindJSDocCommentTextTokenSyntaxKindBreakKeywordSyntaxKindCaseKeywordSyntaxKindCatchKeywordSyntaxKindClassKeywordSyntaxKindConstKeywordSyntaxKindContinueKeywordSyntaxKindDebuggerKeywordSyntaxKindDefaultKeywordSyntaxKindDeleteKeywordSyntaxKindDoKeywordSyntaxKindElseKeywordSyntaxKindEnumKeywordSyntaxKindExportKeywordSyntaxKindExtendsKeywordSyntaxKindFalseKeywordSyntaxKindFinallyKeywordSyntaxKindForKeywordSyntaxKindFunctionKeywordSyntaxKindIfKeywordSyntaxKindImportKeywordSyntaxKindInKeywordSyntaxKindInstanceOfKeywordSyntaxKindNewKeywordSyntaxKindNullKeywordSyntaxKindReturnKeywordSyntaxKindSuperKeywordSyntaxKindSwitchKeywordSyntaxKindThisKeywordSyntaxKindThrowKeywordSyntaxKindTrueKeywordSyntaxKindTryKeywordSyntaxKindTypeOfKeywordSyntaxKindVarKeywordSyntaxKindVoidKeywordSyntaxKindWhileKeywordSyntaxKindWithKeywordSyntaxKindImplementsKeywordSyntaxKindInterfaceKeywordSyntaxKindLetKeywordSyntaxKindPackageKeywordSyntaxKindPrivateKeywordSyntaxKindProtectedKeywordSyntaxKindPublicKeywordSyntaxKindStaticKeywordSyntaxKindYieldKeywordSyntaxKindAbstractKeywordSyntaxKindAccessorKeywordSyntaxKindAsKeywordSyntaxKindAssertsKeywordSyntaxKindAssertKeywordSyntaxKindAnyKeywordSyntaxKindAsyncKeywordSyntaxKindAwaitKeywordSyntaxKindBooleanKeywordSyntaxKindConstructorKeywordSyntaxKindDeclareKeywordSyntaxKindGetKeywordSyntaxKindImmediateKeywordSyntaxKindInferKeywordSyntaxKindIntrinsicKeywordSyntaxKindIsKeywordSyntaxKindKeyOfKeywordSyntaxKindModuleKeywordSyntaxKindNamespaceKeywordSyntaxKindNeverKeywordSyntaxKindOutKeywordSyntaxKindReadonlyKeywordSyntaxKindRequireKeywordSyntaxKindNumberKeywordSyntaxKindObjectKeywordSyntaxKindSatisfiesKeywordSyntaxKindSetKeywordSyntaxKindStringKeywordSyntaxKindSymbolKeywordSyntaxKindTypeKeywordSyntaxKindUndefinedKeywordSyntaxKindUniqueKeywordSyntaxKindUnknownKeywordSyntaxKindUsingKeywordSyntaxKindFromKeywordSyntaxKindGlobalKeywordSyntaxKindBigIntKeywordSyntaxKindOverrideKeywordSyntaxKindOfKeywordSyntaxKindQualifiedNameSyntaxKindComputedPropertyNameSyntaxKindModifierListSyntaxKindTypeParameterListSyntaxKindTypeArgumentListSyntaxKindJSDocListSyntaxKindJSDocCommentListSyntaxKindJSDocTagListSyntaxKindTypeParameterSyntaxKindParameterSyntaxKindDecoratorSyntaxKindPropertySignatureSyntaxKindPropertyDeclarationSyntaxKindMethodSignatureSyntaxKindMethodDeclarationSyntaxKindClassStaticBlockDeclarationSyntaxKindConstructorSyntaxKindGetAccessorSyntaxKindSetAccessorSyntaxKindCallSignatureSyntaxKindConstructSignatureSyntaxKindIndexSignatureSyntaxKindTypePredicateSyntaxKindTypeReferenceSyntaxKindFunctionTypeSyntaxKindConstructorTypeSyntaxKindTypeQuerySyntaxKindTypeLiteralSyntaxKindArrayTypeSyntaxKindTupleTypeSyntaxKindOptionalTypeSyntaxKindRestTypeSyntaxKindUnionTypeSyntaxKindIntersectionTypeSyntaxKindConditionalTypeSyntaxKindInferTypeSyntaxKindParenthesizedTypeSyntaxKindThisTypeSyntaxKindTypeOperatorSyntaxKindIndexedAccessTypeSyntaxKindMappedTypeSyntaxKindLiteralTypeSyntaxKindNamedTupleMemberSyntaxKindTemplateLiteralTypeSyntaxKindTemplateLiteralTypeSpanSyntaxKindImportTypeSyntaxKindObjectBindingPatternSyntaxKindArrayBindingPatternSyntaxKindBindingElementSyntaxKindArrayLiteralExpressionSyntaxKindObjectLiteralExpressionSyntaxKindPropertyAccessExpressionSyntaxKindElementAccessExpressionSyntaxKindCallExpressionSyntaxKindNewExpressionSyntaxKindTaggedTemplateExpressionSyntaxKindTypeAssertionExpressionSyntaxKindParenthesizedExpressionSyntaxKindFunctionExpressionSyntaxKindArrowFunctionSyntaxKindDeleteExpressionSyntaxKindTypeOfExpressionSyntaxKindVoidExpressionSyntaxKindAwaitExpressionSyntaxKindPrefixUnaryExpressionSyntaxKindPostfixUnaryExpressionSyntaxKindBinaryExpressionSyntaxKindConditionalExpressionSyntaxKindTemplateExpressionSyntaxKindYieldExpressionSyntaxKindSpreadElementSyntaxKindClassExpressionSyntaxKindOmittedExpressionSyntaxKindExpressionWithTypeArgumentsSyntaxKindAsExpressionSyntaxKindNonNullExpressionSyntaxKindMetaPropertySyntaxKindSyntheticExpressionSyntaxKindSatisfiesExpressionSyntaxKindTemplateSpanSyntaxKindSemicolonClassElementSyntaxKindBlockSyntaxKindEmptyStatementSyntaxKindVariableStatementSyntaxKindExpressionStatementSyntaxKindIfStatementSyntaxKindDoStatementSyntaxKindWhileStatementSyntaxKindForStatementSyntaxKindForInStatementSyntaxKindForOfStatementSyntaxKindContinueStatementSyntaxKindBreakStatementSyntaxKindReturnStatementSyntaxKindWithStatementSyntaxKindSwitchStatementSyntaxKindLabeledStatementSyntaxKindThrowStatementSyntaxKindTryStatementSyntaxKindDebuggerStatementSyntaxKindVariableDeclarationSyntaxKindVariableDeclarationListSyntaxKindFunctionDeclarationSyntaxKindClassDeclarationSyntaxKindInterfaceDeclarationSyntaxKindTypeAliasDeclarationSyntaxKindEnumDeclarationSyntaxKindModuleDeclarationSyntaxKindModuleBlockSyntaxKindCaseBlockSyntaxKindNamespaceExportDeclarationSyntaxKindImportEqualsDeclarationSyntaxKindImportDeclarationSyntaxKindImportClauseSyntaxKindNamespaceImportSyntaxKindNamedImportsSyntaxKindImportSpecifierSyntaxKindExportAssignmentSyntaxKindExportDeclarationSyntaxKindNamedExportsSyntaxKindNamespaceExportSyntaxKindExportSpecifierSyntaxKindMissingDeclarationSyntaxKindExternalModuleReferenceSyntaxKindJsxElementSyntaxKindJsxSelfClosingElementSyntaxKindJsxOpeningElementSyntaxKindJsxClosingElementSyntaxKindJsxFragmentSyntaxKindJsxOpeningFragmentSyntaxKindJsxClosingFragmentSyntaxKindJsxAttributeSyntaxKindJsxAttributesSyntaxKindJsxSpreadAttributeSyntaxKindJsxExpressionSyntaxKindJsxNamespacedNameSyntaxKindCaseClauseSyntaxKindDefaultClauseSyntaxKindHeritageClauseSyntaxKindCatchClauseSyntaxKindImportAttributesSyntaxKindImportAttributeSyntaxKindPropertyAssignmentSyntaxKindShorthandPropertyAssignmentSyntaxKindSpreadAssignmentSyntaxKindEnumMemberSyntaxKindSourceFileSyntaxKindBundleSyntaxKindJSDocTypeExpressionSyntaxKindJSDocNameReferenceSyntaxKindJSDocMemberNameSyntaxKindJSDocAllTypeSyntaxKindJSDocUnknownTypeSyntaxKindJSDocNullableTypeSyntaxKindJSDocNonNullableTypeSyntaxKindJSDocOptionalTypeSyntaxKindJSDocFunctionTypeSyntaxKindJSDocVariadicTypeSyntaxKindJSDocNamepathTypeSyntaxKindJSDocSyntaxKindJSDocTextSyntaxKindJSDocTypeLiteralSyntaxKindJSDocSignatureSyntaxKindJSDocLinkSyntaxKindJSDocLinkCodeSyntaxKindJSDocLinkPlainSyntaxKindJSDocTagSyntaxKindJSDocAugmentsTagSyntaxKindJSDocImplementsTagSyntaxKindJSDocAuthorTagSyntaxKindJSDocDeprecatedTagSyntaxKindJSDocImmediateTagSyntaxKindJSDocClassTagSyntaxKindJSDocPublicTagSyntaxKindJSDocPrivateTagSyntaxKindJSDocProtectedTagSyntaxKindJSDocReadonlyTagSyntaxKindJSDocOverrideTagSyntaxKindJSDocCallbackTagSyntaxKindJSDocOverloadTagSyntaxKindJSDocEnumTagSyntaxKindJSDocParameterTagSyntaxKindJSDocReturnTagSyntaxKindJSDocThisTagSyntaxKindJSDocTypeTagSyntaxKindJSDocTemplateTagSyntaxKindJSDocTypedefTagSyntaxKindJSDocSeeTagSyntaxKindJSDocPropertyTagSyntaxKindJSDocThrowsTagSyntaxKindJSDocSatisfiesTagSyntaxKindJSDocImportTagSyntaxKindSyntaxListSyntaxKindNotEmittedStatementSyntaxKindPartiallyEmittedExpressionSyntaxKindCommaListExpressionSyntaxKindSyntheticReferenceExpressionSyntaxKindCount"

var _SyntaxKind_index = [...]uint16{0, 17, 36, 66, 99, 123, 146, 169, 186, 217, 251, 290, 312, 336, 358, 382, 407, 431, 456, 482, 509, 527, 551, 575, 595, 621, 644, 672, 698, 727, 759, 786, 818, 851, 889, 921, 940, 960, 983, 1014, 1034, 1056, 1079, 1104, 1135, 1172, 1220, 1244, 1262, 1282, 1308, 1328, 1361, 1382, 1405, 1425, 1442, 1473, 1496, 1515, 1536, 1561, 1587, 1616, 1653, 1679, 1707, 1744, 1787, 1841, 1871, 1895, 1922, 1961, 1998, 2024, 2044, 2071, 2102, 2124, 2145, 2167, 2189, 2211, 2236, 2261, 2285, 2308, 2327, 2348, 2369, 2392, 2416, 2438, 2462, 2482, 2507, 2526, 2549, 2568, 2595, 2615, 2636, 2659, 2681, 2704, 2725, 2747, 2768, 2788, 2811, 2831, 2852, 2874, 2895, 2922, 2948, 2968, 2992, 3016, 3042, 3065, 3088, 3110, 3135, 3160, 3179, 3203, 3226, 3246, 3268, 3290, 3314, 3342, 3366, 3386, 3412, 3434, 3460, 3479, 3501, 3524, 3550, 3572, 3592, 3617, 3641, 3664, 3687, 3713, 3733, 3756, 3779, 3800, 3826, 3849, 3873, 3895, 3916, 3939, 3962, 3987, 4006, 4029, 4059, 4081, 4108, 4134, 4153, 4179, 4201, 4224, 4243, 4262, 4289, 4318, 4343, 4370, 4407, 4428, 4449, 4470, 4493, 4521, 4545, 4568, 4591, 4613, 4638, 4657, 4678, 4697, 4716, 4738, 4756, 4775, 4801, 4826, 4845, 4872, 4890, 4912, 4939, 4959, 4980, 5006, 5035, 5068, 5088, 5118, 5147, 5171, 5203, 5236, 5270, 5303, 5327, 5350, 5384, 5417, 5450, 5478, 5501, 5527, 5553, 5577, 5602, 5633, 5665, 5691, 5722, 5750, 5775, 5798, 5823, 5850, 5887, 5909, 5936, 5958, 5987, 6016, 6038, 6069, 6084, 6108, 6135, 6164, 6185, 6206, 6230, 6252, 6276, 6300, 6327, 6351, 6376, 6399, 6424, 6450, 6474, 6496, 6523, 6552, 6585, 6614, 6640, 6670, 6700, 6725, 6752, 6773, 6792, 6828, 6861, 6888, 6910, 6935, 6957, 6982, 7008, 7035, 7057, 7082, 7107, 7135, 7168, 7188, 7219, 7246, 7273, 7294, 7322, 7350, 7372, 7395, 7423, 7446, 7473, 7493, 7516, 7540, 7561, 7587, 7612, 7640, 7677, 7703, 7723, 7743, 7759, 7788, 7816, 7841, 7863, 7889, 7916, 7946, 7973, 8000, 8027, 8054, 8069, 8088, 8114, 8138, 8157, 8180, 8204, 8222, 8248, 8276, 8300, 8328, 8355, 8378, 8402, 8427, 8454, 8480, 8506, 8532, 8558, 8580, 8607, 8631, 8653, 8675, 8701, 8726, 8747, 8773, 8797, 8824, 8848, 8868, 8897, 8933, 8962, 9000, 9015}

func (i SyntaxKind) String() string {
	if i < 0 || i >= SyntaxKind(len(_SyntaxKind_index)-1) {
		return "SyntaxKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SyntaxKind_name[_SyntaxKind_index[i]:_SyntaxKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TSUnknown-0]
	_ = x[TSFalse-1]
	_ = x[TSTrue-2]
}

const _Tristate_name = "TSUnknownTSFalseTSTrue"

var _Tristate_index = [...]uint8{0, 9, 16, 22}

func (i Tristate) String() string {
	if i >= Tristate(len(_Tristate_index)-1) {
		return "Tristate(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Tristate_name[_Tristate_index[i]:_Tristate_index[i+1]]
}
