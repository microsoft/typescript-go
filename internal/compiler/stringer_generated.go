// Code generated by "stringer -type=LanguageVariant,ModuleResolutionKind,ScriptKind,ScriptTarget,SignatureKind,SyntaxKind,Tristate -output=stringer_generated.go"; DO NOT EDIT.

package compiler

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LanguageVariantStandard-0]
	_ = x[LanguageVariantJSX-1]
}

const _LanguageVariant_name = "LanguageVariantStandardLanguageVariantJSX"

var _LanguageVariant_index = [...]uint8{0, 23, 41}

func (i LanguageVariant) String() string {
	if i < 0 || i >= LanguageVariant(len(_LanguageVariant_index)-1) {
		return "LanguageVariant(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LanguageVariant_name[_LanguageVariant_index[i]:_LanguageVariant_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ModuleResolutionKindUnknown-0]
	_ = x[ModuleResolutionKindNode16-3]
	_ = x[ModuleResolutionKindNodeNext-99]
	_ = x[ModuleResolutionKindBundler-100]
}

const (
	_ModuleResolutionKind_name_0 = "ModuleResolutionKindUnknown"
	_ModuleResolutionKind_name_1 = "ModuleResolutionKindNode16"
	_ModuleResolutionKind_name_2 = "ModuleResolutionKindNodeNextModuleResolutionKindBundler"
)

var (
	_ModuleResolutionKind_index_2 = [...]uint8{0, 28, 55}
)

func (i ModuleResolutionKind) String() string {
	switch {
	case i == 0:
		return _ModuleResolutionKind_name_0
	case i == 3:
		return _ModuleResolutionKind_name_1
	case 99 <= i && i <= 100:
		i -= 99
		return _ModuleResolutionKind_name_2[_ModuleResolutionKind_index_2[i]:_ModuleResolutionKind_index_2[i+1]]
	default:
		return "ModuleResolutionKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ScriptKindUnknown-0]
	_ = x[ScriptKindJS-1]
	_ = x[ScriptKindJSX-2]
	_ = x[ScriptKindTS-3]
	_ = x[ScriptKindTSX-4]
	_ = x[ScriptKindExternal-5]
	_ = x[ScriptKindJSON-6]
	_ = x[ScriptKindDeferred-7]
}

const _ScriptKind_name = "ScriptKindUnknownScriptKindJSScriptKindJSXScriptKindTSScriptKindTSXScriptKindExternalScriptKindJSONScriptKindDeferred"

var _ScriptKind_index = [...]uint8{0, 17, 29, 42, 54, 67, 85, 99, 117}

func (i ScriptKind) String() string {
	if i < 0 || i >= ScriptKind(len(_ScriptKind_index)-1) {
		return "ScriptKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ScriptKind_name[_ScriptKind_index[i]:_ScriptKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ScriptTargetNone-0]
	_ = x[ScriptTargetES3-0]
	_ = x[ScriptTargetES5-1]
	_ = x[ScriptTargetES2015-2]
	_ = x[ScriptTargetES2016-3]
	_ = x[ScriptTargetES2017-4]
	_ = x[ScriptTargetES2018-5]
	_ = x[ScriptTargetES2019-6]
	_ = x[ScriptTargetES2020-7]
	_ = x[ScriptTargetES2021-8]
	_ = x[ScriptTargetES2022-9]
	_ = x[ScriptTargetES2023-10]
	_ = x[ScriptTargetESNext-99]
	_ = x[ScriptTargetJSON-100]
	_ = x[ScriptTargetLatest-99]
}

const (
	_ScriptTarget_name_0 = "ScriptTargetNoneScriptTargetES5ScriptTargetES2015ScriptTargetES2016ScriptTargetES2017ScriptTargetES2018ScriptTargetES2019ScriptTargetES2020ScriptTargetES2021ScriptTargetES2022ScriptTargetES2023"
	_ScriptTarget_name_1 = "ScriptTargetESNextScriptTargetJSON"
)

var (
	_ScriptTarget_index_0 = [...]uint8{0, 16, 31, 49, 67, 85, 103, 121, 139, 157, 175, 193}
	_ScriptTarget_index_1 = [...]uint8{0, 18, 34}
)

func (i ScriptTarget) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _ScriptTarget_name_0[_ScriptTarget_index_0[i]:_ScriptTarget_index_0[i+1]]
	case 99 <= i && i <= 100:
		i -= 99
		return _ScriptTarget_name_1[_ScriptTarget_index_1[i]:_ScriptTarget_index_1[i+1]]
	default:
		return "ScriptTarget(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SignatureKindCall-0]
	_ = x[SignatureKindConstruct-1]
}

const _SignatureKind_name = "SignatureKindCallSignatureKindConstruct"

var _SignatureKind_index = [...]uint8{0, 17, 39}

func (i SignatureKind) String() string {
	if i < 0 || i >= SignatureKind(len(_SignatureKind_index)-1) {
		return "SignatureKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SignatureKind_name[_SignatureKind_index[i]:_SignatureKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SyntaxKindUnknown-0]
	_ = x[SyntaxKindEndOfFile-1]
	_ = x[SyntaxKindConflictMarkerTrivia-2]
	_ = x[SyntaxKindNonTextFileMarkerTrivia-3]
	_ = x[SyntaxKindNumericLiteral-4]
	_ = x[SyntaxKindBigintLiteral-5]
	_ = x[SyntaxKindStringLiteral-6]
	_ = x[SyntaxKindJsxText-7]
	_ = x[SyntaxKindJsxTextAllWhiteSpaces-8]
	_ = x[SyntaxKindRegularExpressionLiteral-9]
	_ = x[SyntaxKindNoSubstitutionTemplateLiteral-10]
	_ = x[SyntaxKindTemplateHead-11]
	_ = x[SyntaxKindTemplateMiddle-12]
	_ = x[SyntaxKindTemplateTail-13]
	_ = x[SyntaxKindOpenBraceToken-14]
	_ = x[SyntaxKindCloseBraceToken-15]
	_ = x[SyntaxKindOpenParenToken-16]
	_ = x[SyntaxKindCloseParenToken-17]
	_ = x[SyntaxKindOpenBracketToken-18]
	_ = x[SyntaxKindCloseBracketToken-19]
	_ = x[SyntaxKindDotToken-20]
	_ = x[SyntaxKindDotDotDotToken-21]
	_ = x[SyntaxKindSemicolonToken-22]
	_ = x[SyntaxKindCommaToken-23]
	_ = x[SyntaxKindQuestionDotToken-24]
	_ = x[SyntaxKindLessThanToken-25]
	_ = x[SyntaxKindLessThanSlashToken-26]
	_ = x[SyntaxKindGreaterThanToken-27]
	_ = x[SyntaxKindLessThanEqualsToken-28]
	_ = x[SyntaxKindGreaterThanEqualsToken-29]
	_ = x[SyntaxKindEqualsEqualsToken-30]
	_ = x[SyntaxKindExclamationEqualsToken-31]
	_ = x[SyntaxKindEqualsEqualsEqualsToken-32]
	_ = x[SyntaxKindExclamationEqualsEqualsToken-33]
	_ = x[SyntaxKindEqualsGreaterThanToken-34]
	_ = x[SyntaxKindPlusToken-35]
	_ = x[SyntaxKindMinusToken-36]
	_ = x[SyntaxKindAsteriskToken-37]
	_ = x[SyntaxKindAsteriskAsteriskToken-38]
	_ = x[SyntaxKindSlashToken-39]
	_ = x[SyntaxKindPercentToken-40]
	_ = x[SyntaxKindPlusPlusToken-41]
	_ = x[SyntaxKindMinusMinusToken-42]
	_ = x[SyntaxKindLessThanLessThanToken-43]
	_ = x[SyntaxKindGreaterThanGreaterThanToken-44]
	_ = x[SyntaxKindGreaterThanGreaterThanGreaterThanToken-45]
	_ = x[SyntaxKindAmpersandToken-46]
	_ = x[SyntaxKindBarToken-47]
	_ = x[SyntaxKindCaretToken-48]
	_ = x[SyntaxKindExclamationToken-49]
	_ = x[SyntaxKindTildeToken-50]
	_ = x[SyntaxKindAmpersandAmpersandToken-51]
	_ = x[SyntaxKindBarBarToken-52]
	_ = x[SyntaxKindQuestionToken-53]
	_ = x[SyntaxKindColonToken-54]
	_ = x[SyntaxKindAtToken-55]
	_ = x[SyntaxKindQuestionQuestionToken-56]
	_ = x[SyntaxKindBacktickToken-57]
	_ = x[SyntaxKindHashToken-58]
	_ = x[SyntaxKindEqualsToken-59]
	_ = x[SyntaxKindPlusEqualsToken-60]
	_ = x[SyntaxKindMinusEqualsToken-61]
	_ = x[SyntaxKindAsteriskEqualsToken-62]
	_ = x[SyntaxKindAsteriskAsteriskEqualsToken-63]
	_ = x[SyntaxKindSlashEqualsToken-64]
	_ = x[SyntaxKindPercentEqualsToken-65]
	_ = x[SyntaxKindLessThanLessThanEqualsToken-66]
	_ = x[SyntaxKindGreaterThanGreaterThanEqualsToken-67]
	_ = x[SyntaxKindGreaterThanGreaterThanGreaterThanEqualsToken-68]
	_ = x[SyntaxKindAmpersandEqualsToken-69]
	_ = x[SyntaxKindBarEqualsToken-70]
	_ = x[SyntaxKindBarBarEqualsToken-71]
	_ = x[SyntaxKindAmpersandAmpersandEqualsToken-72]
	_ = x[SyntaxKindQuestionQuestionEqualsToken-73]
	_ = x[SyntaxKindCaretEqualsToken-74]
	_ = x[SyntaxKindIdentifier-75]
	_ = x[SyntaxKindPrivateIdentifier-76]
	_ = x[SyntaxKindJSDocCommentTextToken-77]
	_ = x[SyntaxKindBreakKeyword-78]
	_ = x[SyntaxKindCaseKeyword-79]
	_ = x[SyntaxKindCatchKeyword-80]
	_ = x[SyntaxKindClassKeyword-81]
	_ = x[SyntaxKindConstKeyword-82]
	_ = x[SyntaxKindContinueKeyword-83]
	_ = x[SyntaxKindDebuggerKeyword-84]
	_ = x[SyntaxKindDefaultKeyword-85]
	_ = x[SyntaxKindDeleteKeyword-86]
	_ = x[SyntaxKindDoKeyword-87]
	_ = x[SyntaxKindElseKeyword-88]
	_ = x[SyntaxKindEnumKeyword-89]
	_ = x[SyntaxKindExportKeyword-90]
	_ = x[SyntaxKindExtendsKeyword-91]
	_ = x[SyntaxKindFalseKeyword-92]
	_ = x[SyntaxKindFinallyKeyword-93]
	_ = x[SyntaxKindForKeyword-94]
	_ = x[SyntaxKindFunctionKeyword-95]
	_ = x[SyntaxKindIfKeyword-96]
	_ = x[SyntaxKindImportKeyword-97]
	_ = x[SyntaxKindInKeyword-98]
	_ = x[SyntaxKindInstanceOfKeyword-99]
	_ = x[SyntaxKindNewKeyword-100]
	_ = x[SyntaxKindNullKeyword-101]
	_ = x[SyntaxKindReturnKeyword-102]
	_ = x[SyntaxKindSuperKeyword-103]
	_ = x[SyntaxKindSwitchKeyword-104]
	_ = x[SyntaxKindThisKeyword-105]
	_ = x[SyntaxKindThrowKeyword-106]
	_ = x[SyntaxKindTrueKeyword-107]
	_ = x[SyntaxKindTryKeyword-108]
	_ = x[SyntaxKindTypeOfKeyword-109]
	_ = x[SyntaxKindVarKeyword-110]
	_ = x[SyntaxKindVoidKeyword-111]
	_ = x[SyntaxKindWhileKeyword-112]
	_ = x[SyntaxKindWithKeyword-113]
	_ = x[SyntaxKindImplementsKeyword-114]
	_ = x[SyntaxKindInterfaceKeyword-115]
	_ = x[SyntaxKindLetKeyword-116]
	_ = x[SyntaxKindPackageKeyword-117]
	_ = x[SyntaxKindPrivateKeyword-118]
	_ = x[SyntaxKindProtectedKeyword-119]
	_ = x[SyntaxKindPublicKeyword-120]
	_ = x[SyntaxKindStaticKeyword-121]
	_ = x[SyntaxKindYieldKeyword-122]
	_ = x[SyntaxKindAbstractKeyword-123]
	_ = x[SyntaxKindAccessorKeyword-124]
	_ = x[SyntaxKindAsKeyword-125]
	_ = x[SyntaxKindAssertsKeyword-126]
	_ = x[SyntaxKindAssertKeyword-127]
	_ = x[SyntaxKindAnyKeyword-128]
	_ = x[SyntaxKindAsyncKeyword-129]
	_ = x[SyntaxKindAwaitKeyword-130]
	_ = x[SyntaxKindBooleanKeyword-131]
	_ = x[SyntaxKindConstructorKeyword-132]
	_ = x[SyntaxKindDeclareKeyword-133]
	_ = x[SyntaxKindGetKeyword-134]
	_ = x[SyntaxKindImmediateKeyword-135]
	_ = x[SyntaxKindInferKeyword-136]
	_ = x[SyntaxKindIntrinsicKeyword-137]
	_ = x[SyntaxKindIsKeyword-138]
	_ = x[SyntaxKindKeyOfKeyword-139]
	_ = x[SyntaxKindModuleKeyword-140]
	_ = x[SyntaxKindNamespaceKeyword-141]
	_ = x[SyntaxKindNeverKeyword-142]
	_ = x[SyntaxKindOutKeyword-143]
	_ = x[SyntaxKindReadonlyKeyword-144]
	_ = x[SyntaxKindRequireKeyword-145]
	_ = x[SyntaxKindNumberKeyword-146]
	_ = x[SyntaxKindObjectKeyword-147]
	_ = x[SyntaxKindSatisfiesKeyword-148]
	_ = x[SyntaxKindSetKeyword-149]
	_ = x[SyntaxKindStringKeyword-150]
	_ = x[SyntaxKindSymbolKeyword-151]
	_ = x[SyntaxKindTypeKeyword-152]
	_ = x[SyntaxKindUndefinedKeyword-153]
	_ = x[SyntaxKindUniqueKeyword-154]
	_ = x[SyntaxKindUnknownKeyword-155]
	_ = x[SyntaxKindUsingKeyword-156]
	_ = x[SyntaxKindFromKeyword-157]
	_ = x[SyntaxKindGlobalKeyword-158]
	_ = x[SyntaxKindBigIntKeyword-159]
	_ = x[SyntaxKindOverrideKeyword-160]
	_ = x[SyntaxKindOfKeyword-161]
	_ = x[SyntaxKindQualifiedName-162]
	_ = x[SyntaxKindComputedPropertyName-163]
	_ = x[SyntaxKindModifierList-164]
	_ = x[SyntaxKindTypeParameterList-165]
	_ = x[SyntaxKindTypeArgumentList-166]
	_ = x[SyntaxKindTypeParameter-167]
	_ = x[SyntaxKindParameter-168]
	_ = x[SyntaxKindDecorator-169]
	_ = x[SyntaxKindPropertySignature-170]
	_ = x[SyntaxKindPropertyDeclaration-171]
	_ = x[SyntaxKindMethodSignature-172]
	_ = x[SyntaxKindMethodDeclaration-173]
	_ = x[SyntaxKindClassStaticBlockDeclaration-174]
	_ = x[SyntaxKindConstructor-175]
	_ = x[SyntaxKindGetAccessor-176]
	_ = x[SyntaxKindSetAccessor-177]
	_ = x[SyntaxKindCallSignature-178]
	_ = x[SyntaxKindConstructSignature-179]
	_ = x[SyntaxKindIndexSignature-180]
	_ = x[SyntaxKindTypePredicate-181]
	_ = x[SyntaxKindTypeReference-182]
	_ = x[SyntaxKindFunctionType-183]
	_ = x[SyntaxKindConstructorType-184]
	_ = x[SyntaxKindTypeQuery-185]
	_ = x[SyntaxKindTypeLiteral-186]
	_ = x[SyntaxKindArrayType-187]
	_ = x[SyntaxKindTupleType-188]
	_ = x[SyntaxKindOptionalType-189]
	_ = x[SyntaxKindRestType-190]
	_ = x[SyntaxKindUnionType-191]
	_ = x[SyntaxKindIntersectionType-192]
	_ = x[SyntaxKindConditionalType-193]
	_ = x[SyntaxKindInferType-194]
	_ = x[SyntaxKindParenthesizedType-195]
	_ = x[SyntaxKindThisType-196]
	_ = x[SyntaxKindTypeOperator-197]
	_ = x[SyntaxKindIndexedAccessType-198]
	_ = x[SyntaxKindMappedType-199]
	_ = x[SyntaxKindLiteralType-200]
	_ = x[SyntaxKindNamedTupleMember-201]
	_ = x[SyntaxKindTemplateLiteralType-202]
	_ = x[SyntaxKindTemplateLiteralTypeSpan-203]
	_ = x[SyntaxKindImportType-204]
	_ = x[SyntaxKindObjectBindingPattern-205]
	_ = x[SyntaxKindArrayBindingPattern-206]
	_ = x[SyntaxKindBindingElement-207]
	_ = x[SyntaxKindArrayLiteralExpression-208]
	_ = x[SyntaxKindObjectLiteralExpression-209]
	_ = x[SyntaxKindPropertyAccessExpression-210]
	_ = x[SyntaxKindElementAccessExpression-211]
	_ = x[SyntaxKindCallExpression-212]
	_ = x[SyntaxKindNewExpression-213]
	_ = x[SyntaxKindTaggedTemplateExpression-214]
	_ = x[SyntaxKindTypeAssertionExpression-215]
	_ = x[SyntaxKindParenthesizedExpression-216]
	_ = x[SyntaxKindFunctionExpression-217]
	_ = x[SyntaxKindArrowFunction-218]
	_ = x[SyntaxKindDeleteExpression-219]
	_ = x[SyntaxKindTypeOfExpression-220]
	_ = x[SyntaxKindVoidExpression-221]
	_ = x[SyntaxKindAwaitExpression-222]
	_ = x[SyntaxKindPrefixUnaryExpression-223]
	_ = x[SyntaxKindPostfixUnaryExpression-224]
	_ = x[SyntaxKindBinaryExpression-225]
	_ = x[SyntaxKindConditionalExpression-226]
	_ = x[SyntaxKindTemplateExpression-227]
	_ = x[SyntaxKindYieldExpression-228]
	_ = x[SyntaxKindSpreadElement-229]
	_ = x[SyntaxKindClassExpression-230]
	_ = x[SyntaxKindOmittedExpression-231]
	_ = x[SyntaxKindExpressionWithTypeArguments-232]
	_ = x[SyntaxKindAsExpression-233]
	_ = x[SyntaxKindNonNullExpression-234]
	_ = x[SyntaxKindMetaProperty-235]
	_ = x[SyntaxKindSyntheticExpression-236]
	_ = x[SyntaxKindSatisfiesExpression-237]
	_ = x[SyntaxKindTemplateSpan-238]
	_ = x[SyntaxKindSemicolonClassElement-239]
	_ = x[SyntaxKindBlock-240]
	_ = x[SyntaxKindEmptyStatement-241]
	_ = x[SyntaxKindVariableStatement-242]
	_ = x[SyntaxKindExpressionStatement-243]
	_ = x[SyntaxKindIfStatement-244]
	_ = x[SyntaxKindDoStatement-245]
	_ = x[SyntaxKindWhileStatement-246]
	_ = x[SyntaxKindForStatement-247]
	_ = x[SyntaxKindForInStatement-248]
	_ = x[SyntaxKindForOfStatement-249]
	_ = x[SyntaxKindContinueStatement-250]
	_ = x[SyntaxKindBreakStatement-251]
	_ = x[SyntaxKindReturnStatement-252]
	_ = x[SyntaxKindWithStatement-253]
	_ = x[SyntaxKindSwitchStatement-254]
	_ = x[SyntaxKindLabeledStatement-255]
	_ = x[SyntaxKindThrowStatement-256]
	_ = x[SyntaxKindTryStatement-257]
	_ = x[SyntaxKindDebuggerStatement-258]
	_ = x[SyntaxKindVariableDeclaration-259]
	_ = x[SyntaxKindVariableDeclarationList-260]
	_ = x[SyntaxKindFunctionDeclaration-261]
	_ = x[SyntaxKindClassDeclaration-262]
	_ = x[SyntaxKindInterfaceDeclaration-263]
	_ = x[SyntaxKindTypeAliasDeclaration-264]
	_ = x[SyntaxKindEnumDeclaration-265]
	_ = x[SyntaxKindModuleDeclaration-266]
	_ = x[SyntaxKindModuleBlock-267]
	_ = x[SyntaxKindCaseBlock-268]
	_ = x[SyntaxKindNamespaceExportDeclaration-269]
	_ = x[SyntaxKindImportEqualsDeclaration-270]
	_ = x[SyntaxKindImportDeclaration-271]
	_ = x[SyntaxKindImportClause-272]
	_ = x[SyntaxKindNamespaceImport-273]
	_ = x[SyntaxKindNamedImports-274]
	_ = x[SyntaxKindImportSpecifier-275]
	_ = x[SyntaxKindExportAssignment-276]
	_ = x[SyntaxKindExportDeclaration-277]
	_ = x[SyntaxKindNamedExports-278]
	_ = x[SyntaxKindNamespaceExport-279]
	_ = x[SyntaxKindExportSpecifier-280]
	_ = x[SyntaxKindMissingDeclaration-281]
	_ = x[SyntaxKindExternalModuleReference-282]
	_ = x[SyntaxKindJsxElement-283]
	_ = x[SyntaxKindJsxSelfClosingElement-284]
	_ = x[SyntaxKindJsxOpeningElement-285]
	_ = x[SyntaxKindJsxClosingElement-286]
	_ = x[SyntaxKindJsxFragment-287]
	_ = x[SyntaxKindJsxOpeningFragment-288]
	_ = x[SyntaxKindJsxClosingFragment-289]
	_ = x[SyntaxKindJsxAttribute-290]
	_ = x[SyntaxKindJsxAttributes-291]
	_ = x[SyntaxKindJsxSpreadAttribute-292]
	_ = x[SyntaxKindJsxExpression-293]
	_ = x[SyntaxKindJsxNamespacedName-294]
	_ = x[SyntaxKindCaseClause-295]
	_ = x[SyntaxKindDefaultClause-296]
	_ = x[SyntaxKindHeritageClause-297]
	_ = x[SyntaxKindCatchClause-298]
	_ = x[SyntaxKindImportAttributes-299]
	_ = x[SyntaxKindImportAttribute-300]
	_ = x[SyntaxKindPropertyAssignment-301]
	_ = x[SyntaxKindShorthandPropertyAssignment-302]
	_ = x[SyntaxKindSpreadAssignment-303]
	_ = x[SyntaxKindEnumMember-304]
	_ = x[SyntaxKindSourceFile-305]
	_ = x[SyntaxKindBundle-306]
	_ = x[SyntaxKindJSDocTypeExpression-307]
	_ = x[SyntaxKindJSDocNameReference-308]
	_ = x[SyntaxKindJSDocMemberName-309]
	_ = x[SyntaxKindJSDocAllType-310]
	_ = x[SyntaxKindJSDocUnknownType-311]
	_ = x[SyntaxKindJSDocNullableType-312]
	_ = x[SyntaxKindJSDocNonNullableType-313]
	_ = x[SyntaxKindJSDocOptionalType-314]
	_ = x[SyntaxKindJSDocFunctionType-315]
	_ = x[SyntaxKindJSDocVariadicType-316]
	_ = x[SyntaxKindJSDocNamepathType-317]
	_ = x[SyntaxKindJSDoc-318]
	_ = x[SyntaxKindJSDocText-319]
	_ = x[SyntaxKindJSDocTypeLiteral-320]
	_ = x[SyntaxKindJSDocSignature-321]
	_ = x[SyntaxKindJSDocLink-322]
	_ = x[SyntaxKindJSDocLinkCode-323]
	_ = x[SyntaxKindJSDocLinkPlain-324]
	_ = x[SyntaxKindJSDocTag-325]
	_ = x[SyntaxKindJSDocAugmentsTag-326]
	_ = x[SyntaxKindJSDocImplementsTag-327]
	_ = x[SyntaxKindJSDocAuthorTag-328]
	_ = x[SyntaxKindJSDocDeprecatedTag-329]
	_ = x[SyntaxKindJSDocImmediateTag-330]
	_ = x[SyntaxKindJSDocClassTag-331]
	_ = x[SyntaxKindJSDocPublicTag-332]
	_ = x[SyntaxKindJSDocPrivateTag-333]
	_ = x[SyntaxKindJSDocProtectedTag-334]
	_ = x[SyntaxKindJSDocReadonlyTag-335]
	_ = x[SyntaxKindJSDocOverrideTag-336]
	_ = x[SyntaxKindJSDocCallbackTag-337]
	_ = x[SyntaxKindJSDocOverloadTag-338]
	_ = x[SyntaxKindJSDocEnumTag-339]
	_ = x[SyntaxKindJSDocParameterTag-340]
	_ = x[SyntaxKindJSDocReturnTag-341]
	_ = x[SyntaxKindJSDocThisTag-342]
	_ = x[SyntaxKindJSDocTypeTag-343]
	_ = x[SyntaxKindJSDocTemplateTag-344]
	_ = x[SyntaxKindJSDocTypedefTag-345]
	_ = x[SyntaxKindJSDocSeeTag-346]
	_ = x[SyntaxKindJSDocPropertyTag-347]
	_ = x[SyntaxKindJSDocThrowsTag-348]
	_ = x[SyntaxKindJSDocSatisfiesTag-349]
	_ = x[SyntaxKindJSDocImportTag-350]
	_ = x[SyntaxKindSyntaxList-351]
	_ = x[SyntaxKindNotEmittedStatement-352]
	_ = x[SyntaxKindPartiallyEmittedExpression-353]
	_ = x[SyntaxKindCommaListExpression-354]
	_ = x[SyntaxKindSyntheticReferenceExpression-355]
	_ = x[SyntaxKindCount-356]
}

const _SyntaxKind_name = "SyntaxKindUnknownSyntaxKindEndOfFileSyntaxKindConflictMarkerTriviaSyntaxKindNonTextFileMarkerTriviaSyntaxKindNumericLiteralSyntaxKindBigintLiteralSyntaxKindStringLiteralSyntaxKindJsxTextSyntaxKindJsxTextAllWhiteSpacesSyntaxKindRegularExpressionLiteralSyntaxKindNoSubstitutionTemplateLiteralSyntaxKindTemplateHeadSyntaxKindTemplateMiddleSyntaxKindTemplateTailSyntaxKindOpenBraceTokenSyntaxKindCloseBraceTokenSyntaxKindOpenParenTokenSyntaxKindCloseParenTokenSyntaxKindOpenBracketTokenSyntaxKindCloseBracketTokenSyntaxKindDotTokenSyntaxKindDotDotDotTokenSyntaxKindSemicolonTokenSyntaxKindCommaTokenSyntaxKindQuestionDotTokenSyntaxKindLessThanTokenSyntaxKindLessThanSlashTokenSyntaxKindGreaterThanTokenSyntaxKindLessThanEqualsTokenSyntaxKindGreaterThanEqualsTokenSyntaxKindEqualsEqualsTokenSyntaxKindExclamationEqualsTokenSyntaxKindEqualsEqualsEqualsTokenSyntaxKindExclamationEqualsEqualsTokenSyntaxKindEqualsGreaterThanTokenSyntaxKindPlusTokenSyntaxKindMinusTokenSyntaxKindAsteriskTokenSyntaxKindAsteriskAsteriskTokenSyntaxKindSlashTokenSyntaxKindPercentTokenSyntaxKindPlusPlusTokenSyntaxKindMinusMinusTokenSyntaxKindLessThanLessThanTokenSyntaxKindGreaterThanGreaterThanTokenSyntaxKindGreaterThanGreaterThanGreaterThanTokenSyntaxKindAmpersandTokenSyntaxKindBarTokenSyntaxKindCaretTokenSyntaxKindExclamationTokenSyntaxKindTildeTokenSyntaxKindAmpersandAmpersandTokenSyntaxKindBarBarTokenSyntaxKindQuestionTokenSyntaxKindColonTokenSyntaxKindAtTokenSyntaxKindQuestionQuestionTokenSyntaxKindBacktickTokenSyntaxKindHashTokenSyntaxKindEqualsTokenSyntaxKindPlusEqualsTokenSyntaxKindMinusEqualsTokenSyntaxKindAsteriskEqualsTokenSyntaxKindAsteriskAsteriskEqualsTokenSyntaxKindSlashEqualsTokenSyntaxKindPercentEqualsTokenSyntaxKindLessThanLessThanEqualsTokenSyntaxKindGreaterThanGreaterThanEqualsTokenSyntaxKindGreaterThanGreaterThanGreaterThanEqualsTokenSyntaxKindAmpersandEqualsTokenSyntaxKindBarEqualsTokenSyntaxKindBarBarEqualsTokenSyntaxKindAmpersandAmpersandEqualsTokenSyntaxKindQuestionQuestionEqualsTokenSyntaxKindCaretEqualsTokenSyntaxKindIdentifierSyntaxKindPrivateIdentifierSyntaxKindJSDocCommentTextTokenSyntaxKindBreakKeywordSyntaxKindCaseKeywordSyntaxKindCatchKeywordSyntaxKindClassKeywordSyntaxKindConstKeywordSyntaxKindContinueKeywordSyntaxKindDebuggerKeywordSyntaxKindDefaultKeywordSyntaxKindDeleteKeywordSyntaxKindDoKeywordSyntaxKindElseKeywordSyntaxKindEnumKeywordSyntaxKindExportKeywordSyntaxKindExtendsKeywordSyntaxKindFalseKeywordSyntaxKindFinallyKeywordSyntaxKindForKeywordSyntaxKindFunctionKeywordSyntaxKindIfKeywordSyntaxKindImportKeywordSyntaxKindInKeywordSyntaxKindInstanceOfKeywordSyntaxKindNewKeywordSyntaxKindNullKeywordSyntaxKindReturnKeywordSyntaxKindSuperKeywordSyntaxKindSwitchKeywordSyntaxKindThisKeywordSyntaxKindThrowKeywordSyntaxKindTrueKeywordSyntaxKindTryKeywordSyntaxKindTypeOfKeywordSyntaxKindVarKeywordSyntaxKindVoidKeywordSyntaxKindWhileKeywordSyntaxKindWithKeywordSyntaxKindImplementsKeywordSyntaxKindInterfaceKeywordSyntaxKindLetKeywordSyntaxKindPackageKeywordSyntaxKindPrivateKeywordSyntaxKindProtectedKeywordSyntaxKindPublicKeywordSyntaxKindStaticKeywordSyntaxKindYieldKeywordSyntaxKindAbstractKeywordSyntaxKindAccessorKeywordSyntaxKindAsKeywordSyntaxKindAssertsKeywordSyntaxKindAssertKeywordSyntaxKindAnyKeywordSyntaxKindAsyncKeywordSyntaxKindAwaitKeywordSyntaxKindBooleanKeywordSyntaxKindConstructorKeywordSyntaxKindDeclareKeywordSyntaxKindGetKeywordSyntaxKindImmediateKeywordSyntaxKindInferKeywordSyntaxKindIntrinsicKeywordSyntaxKindIsKeywordSyntaxKindKeyOfKeywordSyntaxKindModuleKeywordSyntaxKindNamespaceKeywordSyntaxKindNeverKeywordSyntaxKindOutKeywordSyntaxKindReadonlyKeywordSyntaxKindRequireKeywordSyntaxKindNumberKeywordSyntaxKindObjectKeywordSyntaxKindSatisfiesKeywordSyntaxKindSetKeywordSyntaxKindStringKeywordSyntaxKindSymbolKeywordSyntaxKindTypeKeywordSyntaxKindUndefinedKeywordSyntaxKindUniqueKeywordSyntaxKindUnknownKeywordSyntaxKindUsingKeywordSyntaxKindFromKeywordSyntaxKindGlobalKeywordSyntaxKindBigIntKeywordSyntaxKindOverrideKeywordSyntaxKindOfKeywordSyntaxKindQualifiedNameSyntaxKindComputedPropertyNameSyntaxKindModifierListSyntaxKindTypeParameterListSyntaxKindTypeArgumentListSyntaxKindTypeParameterSyntaxKindParameterSyntaxKindDecoratorSyntaxKindPropertySignatureSyntaxKindPropertyDeclarationSyntaxKindMethodSignatureSyntaxKindMethodDeclarationSyntaxKindClassStaticBlockDeclarationSyntaxKindConstructorSyntaxKindGetAccessorSyntaxKindSetAccessorSyntaxKindCallSignatureSyntaxKindConstructSignatureSyntaxKindIndexSignatureSyntaxKindTypePredicateSyntaxKindTypeReferenceSyntaxKindFunctionTypeSyntaxKindConstructorTypeSyntaxKindTypeQuerySyntaxKindTypeLiteralSyntaxKindArrayTypeSyntaxKindTupleTypeSyntaxKindOptionalTypeSyntaxKindRestTypeSyntaxKindUnionTypeSyntaxKindIntersectionTypeSyntaxKindConditionalTypeSyntaxKindInferTypeSyntaxKindParenthesizedTypeSyntaxKindThisTypeSyntaxKindTypeOperatorSyntaxKindIndexedAccessTypeSyntaxKindMappedTypeSyntaxKindLiteralTypeSyntaxKindNamedTupleMemberSyntaxKindTemplateLiteralTypeSyntaxKindTemplateLiteralTypeSpanSyntaxKindImportTypeSyntaxKindObjectBindingPatternSyntaxKindArrayBindingPatternSyntaxKindBindingElementSyntaxKindArrayLiteralExpressionSyntaxKindObjectLiteralExpressionSyntaxKindPropertyAccessExpressionSyntaxKindElementAccessExpressionSyntaxKindCallExpressionSyntaxKindNewExpressionSyntaxKindTaggedTemplateExpressionSyntaxKindTypeAssertionExpressionSyntaxKindParenthesizedExpressionSyntaxKindFunctionExpressionSyntaxKindArrowFunctionSyntaxKindDeleteExpressionSyntaxKindTypeOfExpressionSyntaxKindVoidExpressionSyntaxKindAwaitExpressionSyntaxKindPrefixUnaryExpressionSyntaxKindPostfixUnaryExpressionSyntaxKindBinaryExpressionSyntaxKindConditionalExpressionSyntaxKindTemplateExpressionSyntaxKindYieldExpressionSyntaxKindSpreadElementSyntaxKindClassExpressionSyntaxKindOmittedExpressionSyntaxKindExpressionWithTypeArgumentsSyntaxKindAsExpressionSyntaxKindNonNullExpressionSyntaxKindMetaPropertySyntaxKindSyntheticExpressionSyntaxKindSatisfiesExpressionSyntaxKindTemplateSpanSyntaxKindSemicolonClassElementSyntaxKindBlockSyntaxKindEmptyStatementSyntaxKindVariableStatementSyntaxKindExpressionStatementSyntaxKindIfStatementSyntaxKindDoStatementSyntaxKindWhileStatementSyntaxKindForStatementSyntaxKindForInStatementSyntaxKindForOfStatementSyntaxKindContinueStatementSyntaxKindBreakStatementSyntaxKindReturnStatementSyntaxKindWithStatementSyntaxKindSwitchStatementSyntaxKindLabeledStatementSyntaxKindThrowStatementSyntaxKindTryStatementSyntaxKindDebuggerStatementSyntaxKindVariableDeclarationSyntaxKindVariableDeclarationListSyntaxKindFunctionDeclarationSyntaxKindClassDeclarationSyntaxKindInterfaceDeclarationSyntaxKindTypeAliasDeclarationSyntaxKindEnumDeclarationSyntaxKindModuleDeclarationSyntaxKindModuleBlockSyntaxKindCaseBlockSyntaxKindNamespaceExportDeclarationSyntaxKindImportEqualsDeclarationSyntaxKindImportDeclarationSyntaxKindImportClauseSyntaxKindNamespaceImportSyntaxKindNamedImportsSyntaxKindImportSpecifierSyntaxKindExportAssignmentSyntaxKindExportDeclarationSyntaxKindNamedExportsSyntaxKindNamespaceExportSyntaxKindExportSpecifierSyntaxKindMissingDeclarationSyntaxKindExternalModuleReferenceSyntaxKindJsxElementSyntaxKindJsxSelfClosingElementSyntaxKindJsxOpeningElementSyntaxKindJsxClosingElementSyntaxKindJsxFragmentSyntaxKindJsxOpeningFragmentSyntaxKindJsxClosingFragmentSyntaxKindJsxAttributeSyntaxKindJsxAttributesSyntaxKindJsxSpreadAttributeSyntaxKindJsxExpressionSyntaxKindJsxNamespacedNameSyntaxKindCaseClauseSyntaxKindDefaultClauseSyntaxKindHeritageClauseSyntaxKindCatchClauseSyntaxKindImportAttributesSyntaxKindImportAttributeSyntaxKindPropertyAssignmentSyntaxKindShorthandPropertyAssignmentSyntaxKindSpreadAssignmentSyntaxKindEnumMemberSyntaxKindSourceFileSyntaxKindBundleSyntaxKindJSDocTypeExpressionSyntaxKindJSDocNameReferenceSyntaxKindJSDocMemberNameSyntaxKindJSDocAllTypeSyntaxKindJSDocUnknownTypeSyntaxKindJSDocNullableTypeSyntaxKindJSDocNonNullableTypeSyntaxKindJSDocOptionalTypeSyntaxKindJSDocFunctionTypeSyntaxKindJSDocVariadicTypeSyntaxKindJSDocNamepathTypeSyntaxKindJSDocSyntaxKindJSDocTextSyntaxKindJSDocTypeLiteralSyntaxKindJSDocSignatureSyntaxKindJSDocLinkSyntaxKindJSDocLinkCodeSyntaxKindJSDocLinkPlainSyntaxKindJSDocTagSyntaxKindJSDocAugmentsTagSyntaxKindJSDocImplementsTagSyntaxKindJSDocAuthorTagSyntaxKindJSDocDeprecatedTagSyntaxKindJSDocImmediateTagSyntaxKindJSDocClassTagSyntaxKindJSDocPublicTagSyntaxKindJSDocPrivateTagSyntaxKindJSDocProtectedTagSyntaxKindJSDocReadonlyTagSyntaxKindJSDocOverrideTagSyntaxKindJSDocCallbackTagSyntaxKindJSDocOverloadTagSyntaxKindJSDocEnumTagSyntaxKindJSDocParameterTagSyntaxKindJSDocReturnTagSyntaxKindJSDocThisTagSyntaxKindJSDocTypeTagSyntaxKindJSDocTemplateTagSyntaxKindJSDocTypedefTagSyntaxKindJSDocSeeTagSyntaxKindJSDocPropertyTagSyntaxKindJSDocThrowsTagSyntaxKindJSDocSatisfiesTagSyntaxKindJSDocImportTagSyntaxKindSyntaxListSyntaxKindNotEmittedStatementSyntaxKindPartiallyEmittedExpressionSyntaxKindCommaListExpressionSyntaxKindSyntheticReferenceExpressionSyntaxKindCount"

var _SyntaxKind_index = [...]uint16{0, 17, 36, 66, 99, 123, 146, 169, 186, 217, 251, 290, 312, 336, 358, 382, 407, 431, 456, 482, 509, 527, 551, 575, 595, 621, 644, 672, 698, 727, 759, 786, 818, 851, 889, 921, 940, 960, 983, 1014, 1034, 1056, 1079, 1104, 1135, 1172, 1220, 1244, 1262, 1282, 1308, 1328, 1361, 1382, 1405, 1425, 1442, 1473, 1496, 1515, 1536, 1561, 1587, 1616, 1653, 1679, 1707, 1744, 1787, 1841, 1871, 1895, 1922, 1961, 1998, 2024, 2044, 2071, 2102, 2124, 2145, 2167, 2189, 2211, 2236, 2261, 2285, 2308, 2327, 2348, 2369, 2392, 2416, 2438, 2462, 2482, 2507, 2526, 2549, 2568, 2595, 2615, 2636, 2659, 2681, 2704, 2725, 2747, 2768, 2788, 2811, 2831, 2852, 2874, 2895, 2922, 2948, 2968, 2992, 3016, 3042, 3065, 3088, 3110, 3135, 3160, 3179, 3203, 3226, 3246, 3268, 3290, 3314, 3342, 3366, 3386, 3412, 3434, 3460, 3479, 3501, 3524, 3550, 3572, 3592, 3617, 3641, 3664, 3687, 3713, 3733, 3756, 3779, 3800, 3826, 3849, 3873, 3895, 3916, 3939, 3962, 3987, 4006, 4029, 4059, 4081, 4108, 4134, 4157, 4176, 4195, 4222, 4251, 4276, 4303, 4340, 4361, 4382, 4403, 4426, 4454, 4478, 4501, 4524, 4546, 4571, 4590, 4611, 4630, 4649, 4671, 4689, 4708, 4734, 4759, 4778, 4805, 4823, 4845, 4872, 4892, 4913, 4939, 4968, 5001, 5021, 5051, 5080, 5104, 5136, 5169, 5203, 5236, 5260, 5283, 5317, 5350, 5383, 5411, 5434, 5460, 5486, 5510, 5535, 5566, 5598, 5624, 5655, 5683, 5708, 5731, 5756, 5783, 5820, 5842, 5869, 5891, 5920, 5949, 5971, 6002, 6017, 6041, 6068, 6097, 6118, 6139, 6163, 6185, 6209, 6233, 6260, 6284, 6309, 6332, 6357, 6383, 6407, 6429, 6456, 6485, 6518, 6547, 6573, 6603, 6633, 6658, 6685, 6706, 6725, 6761, 6794, 6821, 6843, 6868, 6890, 6915, 6941, 6968, 6990, 7015, 7040, 7068, 7101, 7121, 7152, 7179, 7206, 7227, 7255, 7283, 7305, 7328, 7356, 7379, 7406, 7426, 7449, 7473, 7494, 7520, 7545, 7573, 7610, 7636, 7656, 7676, 7692, 7721, 7749, 7774, 7796, 7822, 7849, 7879, 7906, 7933, 7960, 7987, 8002, 8021, 8047, 8071, 8090, 8113, 8137, 8155, 8181, 8209, 8233, 8261, 8288, 8311, 8335, 8360, 8387, 8413, 8439, 8465, 8491, 8513, 8540, 8564, 8586, 8608, 8634, 8659, 8680, 8706, 8730, 8757, 8781, 8801, 8830, 8866, 8895, 8933, 8948}

func (i SyntaxKind) String() string {
	if i < 0 || i >= SyntaxKind(len(_SyntaxKind_index)-1) {
		return "SyntaxKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SyntaxKind_name[_SyntaxKind_index[i]:_SyntaxKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TSUnknown-0]
	_ = x[TSFalse-1]
	_ = x[TSTrue-2]
}

const _Tristate_name = "TSUnknownTSFalseTSTrue"

var _Tristate_index = [...]uint8{0, 9, 16, 22}

func (i Tristate) String() string {
	if i >= Tristate(len(_Tristate_index)-1) {
		return "Tristate(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Tristate_name[_Tristate_index[i]:_Tristate_index[i+1]]
}
