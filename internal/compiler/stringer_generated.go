// Code generated by "stringer -type=ModuleResolutionKind,SignatureKind -output=stringer_generated.go"; DO NOT EDIT.

package compiler

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ModuleResolutionKindUnknown-0]
	_ = x[ModuleResolutionKindNode16-3]
	_ = x[ModuleResolutionKindNodeNext-99]
	_ = x[ModuleResolutionKindBundler-100]
}

const (
	_ModuleResolutionKind_name_0 = "ModuleResolutionKindUnknown"
	_ModuleResolutionKind_name_1 = "ModuleResolutionKindNode16"
	_ModuleResolutionKind_name_2 = "ModuleResolutionKindNodeNextModuleResolutionKindBundler"
)

var (
	_ModuleResolutionKind_index_2 = [...]uint8{0, 28, 55}
)

func (i ModuleResolutionKind) String() string {
	switch {
	case i == 0:
		return _ModuleResolutionKind_name_0
	case i == 3:
		return _ModuleResolutionKind_name_1
	case 99 <= i && i <= 100:
		i -= 99
		return _ModuleResolutionKind_name_2[_ModuleResolutionKind_index_2[i]:_ModuleResolutionKind_index_2[i+1]]
	default:
		return "ModuleResolutionKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SignatureKindCall-0]
	_ = x[SignatureKindConstruct-1]
}

const _SignatureKind_name = "SignatureKindCallSignatureKindConstruct"

var _SignatureKind_index = [...]uint8{0, 17, 39}

func (i SignatureKind) String() string {
	if i < 0 || i >= SignatureKind(len(_SignatureKind_index)-1) {
		return "SignatureKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SignatureKind_name[_SignatureKind_index[i]:_SignatureKind_index[i+1]]
}
