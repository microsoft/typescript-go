// Code generated by "stringer -type=LanguageVariant,ModuleResolutionKind,ScriptKind,ScriptTarget,SignatureKind,SyntaxKind,Tristate -output=stringer_generated.go"; DO NOT EDIT.

package compiler

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LanguageVariantStandard-0]
	_ = x[LanguageVariantJSX-1]
}

const _LanguageVariant_name = "LanguageVariantStandardLanguageVariantJSX"

var _LanguageVariant_index = [...]uint8{0, 23, 41}

func (i LanguageVariant) String() string {
	if i < 0 || i >= LanguageVariant(len(_LanguageVariant_index)-1) {
		return "LanguageVariant(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LanguageVariant_name[_LanguageVariant_index[i]:_LanguageVariant_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ModuleResolutionKindUnknown-0]
	_ = x[ModuleResolutionKindNode16-3]
	_ = x[ModuleResolutionKindNodeNext-99]
	_ = x[ModuleResolutionKindBundler-100]
}

const (
	_ModuleResolutionKind_name_0 = "ModuleResolutionKindUnknown"
	_ModuleResolutionKind_name_1 = "ModuleResolutionKindNode16"
	_ModuleResolutionKind_name_2 = "ModuleResolutionKindNodeNextModuleResolutionKindBundler"
)

var (
	_ModuleResolutionKind_index_2 = [...]uint8{0, 28, 55}
)

func (i ModuleResolutionKind) String() string {
	switch {
	case i == 0:
		return _ModuleResolutionKind_name_0
	case i == 3:
		return _ModuleResolutionKind_name_1
	case 99 <= i && i <= 100:
		i -= 99
		return _ModuleResolutionKind_name_2[_ModuleResolutionKind_index_2[i]:_ModuleResolutionKind_index_2[i+1]]
	default:
		return "ModuleResolutionKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ScriptKindUnknown-0]
	_ = x[ScriptKindJS-1]
	_ = x[ScriptKindJSX-2]
	_ = x[ScriptKindTS-3]
	_ = x[ScriptKindTSX-4]
	_ = x[ScriptKindExternal-5]
	_ = x[ScriptKindJSON-6]
	_ = x[ScriptKindDeferred-7]
}

const _ScriptKind_name = "ScriptKindUnknownScriptKindJSScriptKindJSXScriptKindTSScriptKindTSXScriptKindExternalScriptKindJSONScriptKindDeferred"

var _ScriptKind_index = [...]uint8{0, 17, 29, 42, 54, 67, 85, 99, 117}

func (i ScriptKind) String() string {
	if i < 0 || i >= ScriptKind(len(_ScriptKind_index)-1) {
		return "ScriptKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ScriptKind_name[_ScriptKind_index[i]:_ScriptKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ScriptTargetNone-0]
	_ = x[ScriptTargetES3-0]
	_ = x[ScriptTargetES5-1]
	_ = x[ScriptTargetES2015-2]
	_ = x[ScriptTargetES2016-3]
	_ = x[ScriptTargetES2017-4]
	_ = x[ScriptTargetES2018-5]
	_ = x[ScriptTargetES2019-6]
	_ = x[ScriptTargetES2020-7]
	_ = x[ScriptTargetES2021-8]
	_ = x[ScriptTargetES2022-9]
	_ = x[ScriptTargetES2023-10]
	_ = x[ScriptTargetESNext-99]
	_ = x[ScriptTargetJSON-100]
	_ = x[ScriptTargetLatest-99]
}

const (
	_ScriptTarget_name_0 = "ScriptTargetNoneScriptTargetES5ScriptTargetES2015ScriptTargetES2016ScriptTargetES2017ScriptTargetES2018ScriptTargetES2019ScriptTargetES2020ScriptTargetES2021ScriptTargetES2022ScriptTargetES2023"
	_ScriptTarget_name_1 = "ScriptTargetESNextScriptTargetJSON"
)

var (
	_ScriptTarget_index_0 = [...]uint8{0, 16, 31, 49, 67, 85, 103, 121, 139, 157, 175, 193}
	_ScriptTarget_index_1 = [...]uint8{0, 18, 34}
)

func (i ScriptTarget) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _ScriptTarget_name_0[_ScriptTarget_index_0[i]:_ScriptTarget_index_0[i+1]]
	case 99 <= i && i <= 100:
		i -= 99
		return _ScriptTarget_name_1[_ScriptTarget_index_1[i]:_ScriptTarget_index_1[i+1]]
	default:
		return "ScriptTarget(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SignatureKindCall-0]
	_ = x[SignatureKindConstruct-1]
}

const _SignatureKind_name = "SignatureKindCallSignatureKindConstruct"

var _SignatureKind_index = [...]uint8{0, 17, 39}

func (i SignatureKind) String() string {
	if i < 0 || i >= SignatureKind(len(_SignatureKind_index)-1) {
		return "SignatureKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SignatureKind_name[_SignatureKind_index[i]:_SignatureKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SyntaxKindUnknown-0]
	_ = x[SyntaxKindEndOfFile-1]
	_ = x[SyntaxKindConflictMarkerTrivia-2]
	_ = x[SyntaxKindNonTextFileMarkerTrivia-3]
	_ = x[SyntaxKindNumericLiteral-4]
	_ = x[SyntaxKindBigIntLiteral-5]
	_ = x[SyntaxKindStringLiteral-6]
	_ = x[SyntaxKindJsxText-7]
	_ = x[SyntaxKindJsxTextAllWhiteSpaces-8]
	_ = x[SyntaxKindRegularExpressionLiteral-9]
	_ = x[SyntaxKindNoSubstitutionTemplateLiteral-10]
	_ = x[SyntaxKindTemplateHead-11]
	_ = x[SyntaxKindTemplateMiddle-12]
	_ = x[SyntaxKindTemplateTail-13]
	_ = x[SyntaxKindOpenBraceToken-14]
	_ = x[SyntaxKindCloseBraceToken-15]
	_ = x[SyntaxKindOpenParenToken-16]
	_ = x[SyntaxKindCloseParenToken-17]
	_ = x[SyntaxKindOpenBracketToken-18]
	_ = x[SyntaxKindCloseBracketToken-19]
	_ = x[SyntaxKindDotToken-20]
	_ = x[SyntaxKindDotDotDotToken-21]
	_ = x[SyntaxKindSemicolonToken-22]
	_ = x[SyntaxKindCommaToken-23]
	_ = x[SyntaxKindQuestionDotToken-24]
	_ = x[SyntaxKindLessThanToken-25]
	_ = x[SyntaxKindLessThanSlashToken-26]
	_ = x[SyntaxKindGreaterThanToken-27]
	_ = x[SyntaxKindLessThanEqualsToken-28]
	_ = x[SyntaxKindGreaterThanEqualsToken-29]
	_ = x[SyntaxKindEqualsEqualsToken-30]
	_ = x[SyntaxKindExclamationEqualsToken-31]
	_ = x[SyntaxKindEqualsEqualsEqualsToken-32]
	_ = x[SyntaxKindExclamationEqualsEqualsToken-33]
	_ = x[SyntaxKindEqualsGreaterThanToken-34]
	_ = x[SyntaxKindPlusToken-35]
	_ = x[SyntaxKindMinusToken-36]
	_ = x[SyntaxKindAsteriskToken-37]
	_ = x[SyntaxKindAsteriskAsteriskToken-38]
	_ = x[SyntaxKindSlashToken-39]
	_ = x[SyntaxKindPercentToken-40]
	_ = x[SyntaxKindPlusPlusToken-41]
	_ = x[SyntaxKindMinusMinusToken-42]
	_ = x[SyntaxKindLessThanLessThanToken-43]
	_ = x[SyntaxKindGreaterThanGreaterThanToken-44]
	_ = x[SyntaxKindGreaterThanGreaterThanGreaterThanToken-45]
	_ = x[SyntaxKindAmpersandToken-46]
	_ = x[SyntaxKindBarToken-47]
	_ = x[SyntaxKindCaretToken-48]
	_ = x[SyntaxKindExclamationToken-49]
	_ = x[SyntaxKindTildeToken-50]
	_ = x[SyntaxKindAmpersandAmpersandToken-51]
	_ = x[SyntaxKindBarBarToken-52]
	_ = x[SyntaxKindQuestionToken-53]
	_ = x[SyntaxKindColonToken-54]
	_ = x[SyntaxKindAtToken-55]
	_ = x[SyntaxKindQuestionQuestionToken-56]
	_ = x[SyntaxKindBacktickToken-57]
	_ = x[SyntaxKindHashToken-58]
	_ = x[SyntaxKindEqualsToken-59]
	_ = x[SyntaxKindPlusEqualsToken-60]
	_ = x[SyntaxKindMinusEqualsToken-61]
	_ = x[SyntaxKindAsteriskEqualsToken-62]
	_ = x[SyntaxKindAsteriskAsteriskEqualsToken-63]
	_ = x[SyntaxKindSlashEqualsToken-64]
	_ = x[SyntaxKindPercentEqualsToken-65]
	_ = x[SyntaxKindLessThanLessThanEqualsToken-66]
	_ = x[SyntaxKindGreaterThanGreaterThanEqualsToken-67]
	_ = x[SyntaxKindGreaterThanGreaterThanGreaterThanEqualsToken-68]
	_ = x[SyntaxKindAmpersandEqualsToken-69]
	_ = x[SyntaxKindBarEqualsToken-70]
	_ = x[SyntaxKindBarBarEqualsToken-71]
	_ = x[SyntaxKindAmpersandAmpersandEqualsToken-72]
	_ = x[SyntaxKindQuestionQuestionEqualsToken-73]
	_ = x[SyntaxKindCaretEqualsToken-74]
	_ = x[SyntaxKindIdentifierName-75]
	_ = x[SyntaxKindIdentifierReference-76]
	_ = x[SyntaxKindBindingIdentifier-77]
	_ = x[SyntaxKindLabelIdentifier-78]
	_ = x[SyntaxKindPrivateIdentifier-79]
	_ = x[SyntaxKindJSDocCommentTextToken-80]
	_ = x[SyntaxKindBreakKeyword-81]
	_ = x[SyntaxKindCaseKeyword-82]
	_ = x[SyntaxKindCatchKeyword-83]
	_ = x[SyntaxKindClassKeyword-84]
	_ = x[SyntaxKindConstKeyword-85]
	_ = x[SyntaxKindContinueKeyword-86]
	_ = x[SyntaxKindDebuggerKeyword-87]
	_ = x[SyntaxKindDefaultKeyword-88]
	_ = x[SyntaxKindDeleteKeyword-89]
	_ = x[SyntaxKindDoKeyword-90]
	_ = x[SyntaxKindElseKeyword-91]
	_ = x[SyntaxKindEnumKeyword-92]
	_ = x[SyntaxKindExportKeyword-93]
	_ = x[SyntaxKindExtendsKeyword-94]
	_ = x[SyntaxKindFalseKeyword-95]
	_ = x[SyntaxKindFinallyKeyword-96]
	_ = x[SyntaxKindForKeyword-97]
	_ = x[SyntaxKindFunctionKeyword-98]
	_ = x[SyntaxKindIfKeyword-99]
	_ = x[SyntaxKindImportKeyword-100]
	_ = x[SyntaxKindInKeyword-101]
	_ = x[SyntaxKindInstanceOfKeyword-102]
	_ = x[SyntaxKindNewKeyword-103]
	_ = x[SyntaxKindNullKeyword-104]
	_ = x[SyntaxKindReturnKeyword-105]
	_ = x[SyntaxKindSuperKeyword-106]
	_ = x[SyntaxKindSwitchKeyword-107]
	_ = x[SyntaxKindThisKeyword-108]
	_ = x[SyntaxKindThrowKeyword-109]
	_ = x[SyntaxKindTrueKeyword-110]
	_ = x[SyntaxKindTryKeyword-111]
	_ = x[SyntaxKindTypeOfKeyword-112]
	_ = x[SyntaxKindVarKeyword-113]
	_ = x[SyntaxKindVoidKeyword-114]
	_ = x[SyntaxKindWhileKeyword-115]
	_ = x[SyntaxKindWithKeyword-116]
	_ = x[SyntaxKindImplementsKeyword-117]
	_ = x[SyntaxKindInterfaceKeyword-118]
	_ = x[SyntaxKindLetKeyword-119]
	_ = x[SyntaxKindPackageKeyword-120]
	_ = x[SyntaxKindPrivateKeyword-121]
	_ = x[SyntaxKindProtectedKeyword-122]
	_ = x[SyntaxKindPublicKeyword-123]
	_ = x[SyntaxKindStaticKeyword-124]
	_ = x[SyntaxKindYieldKeyword-125]
	_ = x[SyntaxKindAbstractKeyword-126]
	_ = x[SyntaxKindAccessorKeyword-127]
	_ = x[SyntaxKindAsKeyword-128]
	_ = x[SyntaxKindAssertsKeyword-129]
	_ = x[SyntaxKindAssertKeyword-130]
	_ = x[SyntaxKindAnyKeyword-131]
	_ = x[SyntaxKindAsyncKeyword-132]
	_ = x[SyntaxKindAwaitKeyword-133]
	_ = x[SyntaxKindBooleanKeyword-134]
	_ = x[SyntaxKindConstructorKeyword-135]
	_ = x[SyntaxKindDeclareKeyword-136]
	_ = x[SyntaxKindGetKeyword-137]
	_ = x[SyntaxKindImmediateKeyword-138]
	_ = x[SyntaxKindInferKeyword-139]
	_ = x[SyntaxKindIntrinsicKeyword-140]
	_ = x[SyntaxKindIsKeyword-141]
	_ = x[SyntaxKindKeyOfKeyword-142]
	_ = x[SyntaxKindModuleKeyword-143]
	_ = x[SyntaxKindNamespaceKeyword-144]
	_ = x[SyntaxKindNeverKeyword-145]
	_ = x[SyntaxKindOutKeyword-146]
	_ = x[SyntaxKindReadonlyKeyword-147]
	_ = x[SyntaxKindRequireKeyword-148]
	_ = x[SyntaxKindNumberKeyword-149]
	_ = x[SyntaxKindObjectKeyword-150]
	_ = x[SyntaxKindSatisfiesKeyword-151]
	_ = x[SyntaxKindSetKeyword-152]
	_ = x[SyntaxKindStringKeyword-153]
	_ = x[SyntaxKindSymbolKeyword-154]
	_ = x[SyntaxKindTypeKeyword-155]
	_ = x[SyntaxKindUndefinedKeyword-156]
	_ = x[SyntaxKindUniqueKeyword-157]
	_ = x[SyntaxKindUnknownKeyword-158]
	_ = x[SyntaxKindUsingKeyword-159]
	_ = x[SyntaxKindFromKeyword-160]
	_ = x[SyntaxKindGlobalKeyword-161]
	_ = x[SyntaxKindBigIntKeyword-162]
	_ = x[SyntaxKindOverrideKeyword-163]
	_ = x[SyntaxKindOfKeyword-164]
	_ = x[SyntaxKindQualifiedName-165]
	_ = x[SyntaxKindComputedPropertyName-166]
	_ = x[SyntaxKindModifierList-167]
	_ = x[SyntaxKindTypeParameterList-168]
	_ = x[SyntaxKindTypeArgumentList-169]
	_ = x[SyntaxKindTypeParameter-170]
	_ = x[SyntaxKindParameter-171]
	_ = x[SyntaxKindDecorator-172]
	_ = x[SyntaxKindPropertySignature-173]
	_ = x[SyntaxKindPropertyDeclaration-174]
	_ = x[SyntaxKindMethodSignature-175]
	_ = x[SyntaxKindMethodDeclaration-176]
	_ = x[SyntaxKindClassStaticBlockDeclaration-177]
	_ = x[SyntaxKindConstructor-178]
	_ = x[SyntaxKindGetAccessor-179]
	_ = x[SyntaxKindSetAccessor-180]
	_ = x[SyntaxKindCallSignature-181]
	_ = x[SyntaxKindConstructSignature-182]
	_ = x[SyntaxKindIndexSignature-183]
	_ = x[SyntaxKindTypePredicate-184]
	_ = x[SyntaxKindTypeReference-185]
	_ = x[SyntaxKindFunctionType-186]
	_ = x[SyntaxKindConstructorType-187]
	_ = x[SyntaxKindTypeQuery-188]
	_ = x[SyntaxKindTypeLiteral-189]
	_ = x[SyntaxKindArrayType-190]
	_ = x[SyntaxKindTupleType-191]
	_ = x[SyntaxKindOptionalType-192]
	_ = x[SyntaxKindRestType-193]
	_ = x[SyntaxKindUnionType-194]
	_ = x[SyntaxKindIntersectionType-195]
	_ = x[SyntaxKindConditionalType-196]
	_ = x[SyntaxKindInferType-197]
	_ = x[SyntaxKindParenthesizedType-198]
	_ = x[SyntaxKindThisType-199]
	_ = x[SyntaxKindTypeOperator-200]
	_ = x[SyntaxKindIndexedAccessType-201]
	_ = x[SyntaxKindMappedType-202]
	_ = x[SyntaxKindLiteralType-203]
	_ = x[SyntaxKindNamedTupleMember-204]
	_ = x[SyntaxKindTemplateLiteralType-205]
	_ = x[SyntaxKindTemplateLiteralTypeSpan-206]
	_ = x[SyntaxKindImportType-207]
	_ = x[SyntaxKindObjectBindingPattern-208]
	_ = x[SyntaxKindArrayBindingPattern-209]
	_ = x[SyntaxKindBindingElement-210]
	_ = x[SyntaxKindArrayLiteralExpression-211]
	_ = x[SyntaxKindObjectLiteralExpression-212]
	_ = x[SyntaxKindPropertyAccessExpression-213]
	_ = x[SyntaxKindElementAccessExpression-214]
	_ = x[SyntaxKindCallExpression-215]
	_ = x[SyntaxKindNewExpression-216]
	_ = x[SyntaxKindTaggedTemplateExpression-217]
	_ = x[SyntaxKindTypeAssertionExpression-218]
	_ = x[SyntaxKindParenthesizedExpression-219]
	_ = x[SyntaxKindFunctionExpression-220]
	_ = x[SyntaxKindArrowFunction-221]
	_ = x[SyntaxKindDeleteExpression-222]
	_ = x[SyntaxKindTypeOfExpression-223]
	_ = x[SyntaxKindVoidExpression-224]
	_ = x[SyntaxKindAwaitExpression-225]
	_ = x[SyntaxKindPrefixUnaryExpression-226]
	_ = x[SyntaxKindPostfixUnaryExpression-227]
	_ = x[SyntaxKindBinaryExpression-228]
	_ = x[SyntaxKindConditionalExpression-229]
	_ = x[SyntaxKindTemplateExpression-230]
	_ = x[SyntaxKindYieldExpression-231]
	_ = x[SyntaxKindSpreadElement-232]
	_ = x[SyntaxKindClassExpression-233]
	_ = x[SyntaxKindOmittedExpression-234]
	_ = x[SyntaxKindExpressionWithTypeArguments-235]
	_ = x[SyntaxKindAsExpression-236]
	_ = x[SyntaxKindNonNullExpression-237]
	_ = x[SyntaxKindMetaProperty-238]
	_ = x[SyntaxKindSyntheticExpression-239]
	_ = x[SyntaxKindSatisfiesExpression-240]
	_ = x[SyntaxKindTemplateSpan-241]
	_ = x[SyntaxKindSemicolonClassElement-242]
	_ = x[SyntaxKindBlock-243]
	_ = x[SyntaxKindFunctionBody-244]
	_ = x[SyntaxKindEmptyStatement-245]
	_ = x[SyntaxKindVariableStatement-246]
	_ = x[SyntaxKindExpressionStatement-247]
	_ = x[SyntaxKindIfStatement-248]
	_ = x[SyntaxKindDoStatement-249]
	_ = x[SyntaxKindWhileStatement-250]
	_ = x[SyntaxKindForStatement-251]
	_ = x[SyntaxKindForInStatement-252]
	_ = x[SyntaxKindForOfStatement-253]
	_ = x[SyntaxKindContinueStatement-254]
	_ = x[SyntaxKindBreakStatement-255]
	_ = x[SyntaxKindReturnStatement-256]
	_ = x[SyntaxKindWithStatement-257]
	_ = x[SyntaxKindSwitchStatement-258]
	_ = x[SyntaxKindLabeledStatement-259]
	_ = x[SyntaxKindThrowStatement-260]
	_ = x[SyntaxKindTryStatement-261]
	_ = x[SyntaxKindDebuggerStatement-262]
	_ = x[SyntaxKindVariableDeclaration-263]
	_ = x[SyntaxKindVariableDeclarationList-264]
	_ = x[SyntaxKindFunctionDeclaration-265]
	_ = x[SyntaxKindClassDeclaration-266]
	_ = x[SyntaxKindInterfaceDeclaration-267]
	_ = x[SyntaxKindTypeAliasDeclaration-268]
	_ = x[SyntaxKindEnumDeclaration-269]
	_ = x[SyntaxKindModuleDeclaration-270]
	_ = x[SyntaxKindModuleBlock-271]
	_ = x[SyntaxKindCaseBlock-272]
	_ = x[SyntaxKindNamespaceExportDeclaration-273]
	_ = x[SyntaxKindImportEqualsDeclaration-274]
	_ = x[SyntaxKindImportDeclaration-275]
	_ = x[SyntaxKindImportClause-276]
	_ = x[SyntaxKindNamespaceImport-277]
	_ = x[SyntaxKindNamedImports-278]
	_ = x[SyntaxKindImportSpecifier-279]
	_ = x[SyntaxKindExportAssignment-280]
	_ = x[SyntaxKindExportDeclaration-281]
	_ = x[SyntaxKindNamedExports-282]
	_ = x[SyntaxKindNamespaceExport-283]
	_ = x[SyntaxKindExportSpecifier-284]
	_ = x[SyntaxKindMissingDeclaration-285]
	_ = x[SyntaxKindExternalModuleReference-286]
	_ = x[SyntaxKindJsxElement-287]
	_ = x[SyntaxKindJsxSelfClosingElement-288]
	_ = x[SyntaxKindJsxOpeningElement-289]
	_ = x[SyntaxKindJsxClosingElement-290]
	_ = x[SyntaxKindJsxFragment-291]
	_ = x[SyntaxKindJsxOpeningFragment-292]
	_ = x[SyntaxKindJsxClosingFragment-293]
	_ = x[SyntaxKindJsxAttribute-294]
	_ = x[SyntaxKindJsxAttributes-295]
	_ = x[SyntaxKindJsxSpreadAttribute-296]
	_ = x[SyntaxKindJsxExpression-297]
	_ = x[SyntaxKindJsxNamespacedName-298]
	_ = x[SyntaxKindCaseClause-299]
	_ = x[SyntaxKindDefaultClause-300]
	_ = x[SyntaxKindHeritageClause-301]
	_ = x[SyntaxKindCatchClause-302]
	_ = x[SyntaxKindImportAttributes-303]
	_ = x[SyntaxKindImportAttribute-304]
	_ = x[SyntaxKindPropertyAssignment-305]
	_ = x[SyntaxKindShorthandPropertyAssignment-306]
	_ = x[SyntaxKindSpreadAssignment-307]
	_ = x[SyntaxKindEnumMember-308]
	_ = x[SyntaxKindSourceFile-309]
	_ = x[SyntaxKindBundle-310]
	_ = x[SyntaxKindJSDocTypeExpression-311]
	_ = x[SyntaxKindJSDocNameReference-312]
	_ = x[SyntaxKindJSDocMemberName-313]
	_ = x[SyntaxKindJSDocAllType-314]
	_ = x[SyntaxKindJSDocUnknownType-315]
	_ = x[SyntaxKindJSDocNullableType-316]
	_ = x[SyntaxKindJSDocNonNullableType-317]
	_ = x[SyntaxKindJSDocOptionalType-318]
	_ = x[SyntaxKindJSDocFunctionType-319]
	_ = x[SyntaxKindJSDocVariadicType-320]
	_ = x[SyntaxKindJSDocNamepathType-321]
	_ = x[SyntaxKindJSDoc-322]
	_ = x[SyntaxKindJSDocText-323]
	_ = x[SyntaxKindJSDocTypeLiteral-324]
	_ = x[SyntaxKindJSDocSignature-325]
	_ = x[SyntaxKindJSDocLink-326]
	_ = x[SyntaxKindJSDocLinkCode-327]
	_ = x[SyntaxKindJSDocLinkPlain-328]
	_ = x[SyntaxKindJSDocTag-329]
	_ = x[SyntaxKindJSDocAugmentsTag-330]
	_ = x[SyntaxKindJSDocImplementsTag-331]
	_ = x[SyntaxKindJSDocAuthorTag-332]
	_ = x[SyntaxKindJSDocDeprecatedTag-333]
	_ = x[SyntaxKindJSDocImmediateTag-334]
	_ = x[SyntaxKindJSDocClassTag-335]
	_ = x[SyntaxKindJSDocPublicTag-336]
	_ = x[SyntaxKindJSDocPrivateTag-337]
	_ = x[SyntaxKindJSDocProtectedTag-338]
	_ = x[SyntaxKindJSDocReadonlyTag-339]
	_ = x[SyntaxKindJSDocOverrideTag-340]
	_ = x[SyntaxKindJSDocCallbackTag-341]
	_ = x[SyntaxKindJSDocOverloadTag-342]
	_ = x[SyntaxKindJSDocEnumTag-343]
	_ = x[SyntaxKindJSDocParameterTag-344]
	_ = x[SyntaxKindJSDocReturnTag-345]
	_ = x[SyntaxKindJSDocThisTag-346]
	_ = x[SyntaxKindJSDocTypeTag-347]
	_ = x[SyntaxKindJSDocTemplateTag-348]
	_ = x[SyntaxKindJSDocTypedefTag-349]
	_ = x[SyntaxKindJSDocSeeTag-350]
	_ = x[SyntaxKindJSDocPropertyTag-351]
	_ = x[SyntaxKindJSDocThrowsTag-352]
	_ = x[SyntaxKindJSDocSatisfiesTag-353]
	_ = x[SyntaxKindJSDocImportTag-354]
	_ = x[SyntaxKindSyntaxList-355]
	_ = x[SyntaxKindNotEmittedStatement-356]
	_ = x[SyntaxKindPartiallyEmittedExpression-357]
	_ = x[SyntaxKindCommaListExpression-358]
	_ = x[SyntaxKindSyntheticReferenceExpression-359]
	_ = x[SyntaxKindCount-360]
}

const _SyntaxKind_name = "SyntaxKindUnknownSyntaxKindEndOfFileSyntaxKindConflictMarkerTriviaSyntaxKindNonTextFileMarkerTriviaSyntaxKindNumericLiteralSyntaxKindBigIntLiteralSyntaxKindStringLiteralSyntaxKindJsxTextSyntaxKindJsxTextAllWhiteSpacesSyntaxKindRegularExpressionLiteralSyntaxKindNoSubstitutionTemplateLiteralSyntaxKindTemplateHeadSyntaxKindTemplateMiddleSyntaxKindTemplateTailSyntaxKindOpenBraceTokenSyntaxKindCloseBraceTokenSyntaxKindOpenParenTokenSyntaxKindCloseParenTokenSyntaxKindOpenBracketTokenSyntaxKindCloseBracketTokenSyntaxKindDotTokenSyntaxKindDotDotDotTokenSyntaxKindSemicolonTokenSyntaxKindCommaTokenSyntaxKindQuestionDotTokenSyntaxKindLessThanTokenSyntaxKindLessThanSlashTokenSyntaxKindGreaterThanTokenSyntaxKindLessThanEqualsTokenSyntaxKindGreaterThanEqualsTokenSyntaxKindEqualsEqualsTokenSyntaxKindExclamationEqualsTokenSyntaxKindEqualsEqualsEqualsTokenSyntaxKindExclamationEqualsEqualsTokenSyntaxKindEqualsGreaterThanTokenSyntaxKindPlusTokenSyntaxKindMinusTokenSyntaxKindAsteriskTokenSyntaxKindAsteriskAsteriskTokenSyntaxKindSlashTokenSyntaxKindPercentTokenSyntaxKindPlusPlusTokenSyntaxKindMinusMinusTokenSyntaxKindLessThanLessThanTokenSyntaxKindGreaterThanGreaterThanTokenSyntaxKindGreaterThanGreaterThanGreaterThanTokenSyntaxKindAmpersandTokenSyntaxKindBarTokenSyntaxKindCaretTokenSyntaxKindExclamationTokenSyntaxKindTildeTokenSyntaxKindAmpersandAmpersandTokenSyntaxKindBarBarTokenSyntaxKindQuestionTokenSyntaxKindColonTokenSyntaxKindAtTokenSyntaxKindQuestionQuestionTokenSyntaxKindBacktickTokenSyntaxKindHashTokenSyntaxKindEqualsTokenSyntaxKindPlusEqualsTokenSyntaxKindMinusEqualsTokenSyntaxKindAsteriskEqualsTokenSyntaxKindAsteriskAsteriskEqualsTokenSyntaxKindSlashEqualsTokenSyntaxKindPercentEqualsTokenSyntaxKindLessThanLessThanEqualsTokenSyntaxKindGreaterThanGreaterThanEqualsTokenSyntaxKindGreaterThanGreaterThanGreaterThanEqualsTokenSyntaxKindAmpersandEqualsTokenSyntaxKindBarEqualsTokenSyntaxKindBarBarEqualsTokenSyntaxKindAmpersandAmpersandEqualsTokenSyntaxKindQuestionQuestionEqualsTokenSyntaxKindCaretEqualsTokenSyntaxKindIdentifierNameSyntaxKindIdentifierReferenceSyntaxKindBindingIdentifierSyntaxKindLabelIdentifierSyntaxKindPrivateIdentifierSyntaxKindJSDocCommentTextTokenSyntaxKindBreakKeywordSyntaxKindCaseKeywordSyntaxKindCatchKeywordSyntaxKindClassKeywordSyntaxKindConstKeywordSyntaxKindContinueKeywordSyntaxKindDebuggerKeywordSyntaxKindDefaultKeywordSyntaxKindDeleteKeywordSyntaxKindDoKeywordSyntaxKindElseKeywordSyntaxKindEnumKeywordSyntaxKindExportKeywordSyntaxKindExtendsKeywordSyntaxKindFalseKeywordSyntaxKindFinallyKeywordSyntaxKindForKeywordSyntaxKindFunctionKeywordSyntaxKindIfKeywordSyntaxKindImportKeywordSyntaxKindInKeywordSyntaxKindInstanceOfKeywordSyntaxKindNewKeywordSyntaxKindNullKeywordSyntaxKindReturnKeywordSyntaxKindSuperKeywordSyntaxKindSwitchKeywordSyntaxKindThisKeywordSyntaxKindThrowKeywordSyntaxKindTrueKeywordSyntaxKindTryKeywordSyntaxKindTypeOfKeywordSyntaxKindVarKeywordSyntaxKindVoidKeywordSyntaxKindWhileKeywordSyntaxKindWithKeywordSyntaxKindImplementsKeywordSyntaxKindInterfaceKeywordSyntaxKindLetKeywordSyntaxKindPackageKeywordSyntaxKindPrivateKeywordSyntaxKindProtectedKeywordSyntaxKindPublicKeywordSyntaxKindStaticKeywordSyntaxKindYieldKeywordSyntaxKindAbstractKeywordSyntaxKindAccessorKeywordSyntaxKindAsKeywordSyntaxKindAssertsKeywordSyntaxKindAssertKeywordSyntaxKindAnyKeywordSyntaxKindAsyncKeywordSyntaxKindAwaitKeywordSyntaxKindBooleanKeywordSyntaxKindConstructorKeywordSyntaxKindDeclareKeywordSyntaxKindGetKeywordSyntaxKindImmediateKeywordSyntaxKindInferKeywordSyntaxKindIntrinsicKeywordSyntaxKindIsKeywordSyntaxKindKeyOfKeywordSyntaxKindModuleKeywordSyntaxKindNamespaceKeywordSyntaxKindNeverKeywordSyntaxKindOutKeywordSyntaxKindReadonlyKeywordSyntaxKindRequireKeywordSyntaxKindNumberKeywordSyntaxKindObjectKeywordSyntaxKindSatisfiesKeywordSyntaxKindSetKeywordSyntaxKindStringKeywordSyntaxKindSymbolKeywordSyntaxKindTypeKeywordSyntaxKindUndefinedKeywordSyntaxKindUniqueKeywordSyntaxKindUnknownKeywordSyntaxKindUsingKeywordSyntaxKindFromKeywordSyntaxKindGlobalKeywordSyntaxKindBigIntKeywordSyntaxKindOverrideKeywordSyntaxKindOfKeywordSyntaxKindQualifiedNameSyntaxKindComputedPropertyNameSyntaxKindModifierListSyntaxKindTypeParameterListSyntaxKindTypeArgumentListSyntaxKindTypeParameterSyntaxKindParameterSyntaxKindDecoratorSyntaxKindPropertySignatureSyntaxKindPropertyDeclarationSyntaxKindMethodSignatureSyntaxKindMethodDeclarationSyntaxKindClassStaticBlockDeclarationSyntaxKindConstructorSyntaxKindGetAccessorSyntaxKindSetAccessorSyntaxKindCallSignatureSyntaxKindConstructSignatureSyntaxKindIndexSignatureSyntaxKindTypePredicateSyntaxKindTypeReferenceSyntaxKindFunctionTypeSyntaxKindConstructorTypeSyntaxKindTypeQuerySyntaxKindTypeLiteralSyntaxKindArrayTypeSyntaxKindTupleTypeSyntaxKindOptionalTypeSyntaxKindRestTypeSyntaxKindUnionTypeSyntaxKindIntersectionTypeSyntaxKindConditionalTypeSyntaxKindInferTypeSyntaxKindParenthesizedTypeSyntaxKindThisTypeSyntaxKindTypeOperatorSyntaxKindIndexedAccessTypeSyntaxKindMappedTypeSyntaxKindLiteralTypeSyntaxKindNamedTupleMemberSyntaxKindTemplateLiteralTypeSyntaxKindTemplateLiteralTypeSpanSyntaxKindImportTypeSyntaxKindObjectBindingPatternSyntaxKindArrayBindingPatternSyntaxKindBindingElementSyntaxKindArrayLiteralExpressionSyntaxKindObjectLiteralExpressionSyntaxKindPropertyAccessExpressionSyntaxKindElementAccessExpressionSyntaxKindCallExpressionSyntaxKindNewExpressionSyntaxKindTaggedTemplateExpressionSyntaxKindTypeAssertionExpressionSyntaxKindParenthesizedExpressionSyntaxKindFunctionExpressionSyntaxKindArrowFunctionSyntaxKindDeleteExpressionSyntaxKindTypeOfExpressionSyntaxKindVoidExpressionSyntaxKindAwaitExpressionSyntaxKindPrefixUnaryExpressionSyntaxKindPostfixUnaryExpressionSyntaxKindBinaryExpressionSyntaxKindConditionalExpressionSyntaxKindTemplateExpressionSyntaxKindYieldExpressionSyntaxKindSpreadElementSyntaxKindClassExpressionSyntaxKindOmittedExpressionSyntaxKindExpressionWithTypeArgumentsSyntaxKindAsExpressionSyntaxKindNonNullExpressionSyntaxKindMetaPropertySyntaxKindSyntheticExpressionSyntaxKindSatisfiesExpressionSyntaxKindTemplateSpanSyntaxKindSemicolonClassElementSyntaxKindBlockSyntaxKindFunctionBodySyntaxKindEmptyStatementSyntaxKindVariableStatementSyntaxKindExpressionStatementSyntaxKindIfStatementSyntaxKindDoStatementSyntaxKindWhileStatementSyntaxKindForStatementSyntaxKindForInStatementSyntaxKindForOfStatementSyntaxKindContinueStatementSyntaxKindBreakStatementSyntaxKindReturnStatementSyntaxKindWithStatementSyntaxKindSwitchStatementSyntaxKindLabeledStatementSyntaxKindThrowStatementSyntaxKindTryStatementSyntaxKindDebuggerStatementSyntaxKindVariableDeclarationSyntaxKindVariableDeclarationListSyntaxKindFunctionDeclarationSyntaxKindClassDeclarationSyntaxKindInterfaceDeclarationSyntaxKindTypeAliasDeclarationSyntaxKindEnumDeclarationSyntaxKindModuleDeclarationSyntaxKindModuleBlockSyntaxKindCaseBlockSyntaxKindNamespaceExportDeclarationSyntaxKindImportEqualsDeclarationSyntaxKindImportDeclarationSyntaxKindImportClauseSyntaxKindNamespaceImportSyntaxKindNamedImportsSyntaxKindImportSpecifierSyntaxKindExportAssignmentSyntaxKindExportDeclarationSyntaxKindNamedExportsSyntaxKindNamespaceExportSyntaxKindExportSpecifierSyntaxKindMissingDeclarationSyntaxKindExternalModuleReferenceSyntaxKindJsxElementSyntaxKindJsxSelfClosingElementSyntaxKindJsxOpeningElementSyntaxKindJsxClosingElementSyntaxKindJsxFragmentSyntaxKindJsxOpeningFragmentSyntaxKindJsxClosingFragmentSyntaxKindJsxAttributeSyntaxKindJsxAttributesSyntaxKindJsxSpreadAttributeSyntaxKindJsxExpressionSyntaxKindJsxNamespacedNameSyntaxKindCaseClauseSyntaxKindDefaultClauseSyntaxKindHeritageClauseSyntaxKindCatchClauseSyntaxKindImportAttributesSyntaxKindImportAttributeSyntaxKindPropertyAssignmentSyntaxKindShorthandPropertyAssignmentSyntaxKindSpreadAssignmentSyntaxKindEnumMemberSyntaxKindSourceFileSyntaxKindBundleSyntaxKindJSDocTypeExpressionSyntaxKindJSDocNameReferenceSyntaxKindJSDocMemberNameSyntaxKindJSDocAllTypeSyntaxKindJSDocUnknownTypeSyntaxKindJSDocNullableTypeSyntaxKindJSDocNonNullableTypeSyntaxKindJSDocOptionalTypeSyntaxKindJSDocFunctionTypeSyntaxKindJSDocVariadicTypeSyntaxKindJSDocNamepathTypeSyntaxKindJSDocSyntaxKindJSDocTextSyntaxKindJSDocTypeLiteralSyntaxKindJSDocSignatureSyntaxKindJSDocLinkSyntaxKindJSDocLinkCodeSyntaxKindJSDocLinkPlainSyntaxKindJSDocTagSyntaxKindJSDocAugmentsTagSyntaxKindJSDocImplementsTagSyntaxKindJSDocAuthorTagSyntaxKindJSDocDeprecatedTagSyntaxKindJSDocImmediateTagSyntaxKindJSDocClassTagSyntaxKindJSDocPublicTagSyntaxKindJSDocPrivateTagSyntaxKindJSDocProtectedTagSyntaxKindJSDocReadonlyTagSyntaxKindJSDocOverrideTagSyntaxKindJSDocCallbackTagSyntaxKindJSDocOverloadTagSyntaxKindJSDocEnumTagSyntaxKindJSDocParameterTagSyntaxKindJSDocReturnTagSyntaxKindJSDocThisTagSyntaxKindJSDocTypeTagSyntaxKindJSDocTemplateTagSyntaxKindJSDocTypedefTagSyntaxKindJSDocSeeTagSyntaxKindJSDocPropertyTagSyntaxKindJSDocThrowsTagSyntaxKindJSDocSatisfiesTagSyntaxKindJSDocImportTagSyntaxKindSyntaxListSyntaxKindNotEmittedStatementSyntaxKindPartiallyEmittedExpressionSyntaxKindCommaListExpressionSyntaxKindSyntheticReferenceExpressionSyntaxKindCount"

var _SyntaxKind_index = [...]uint16{0, 17, 36, 66, 99, 123, 146, 169, 186, 217, 251, 290, 312, 336, 358, 382, 407, 431, 456, 482, 509, 527, 551, 575, 595, 621, 644, 672, 698, 727, 759, 786, 818, 851, 889, 921, 940, 960, 983, 1014, 1034, 1056, 1079, 1104, 1135, 1172, 1220, 1244, 1262, 1282, 1308, 1328, 1361, 1382, 1405, 1425, 1442, 1473, 1496, 1515, 1536, 1561, 1587, 1616, 1653, 1679, 1707, 1744, 1787, 1841, 1871, 1895, 1922, 1961, 1998, 2024, 2048, 2077, 2104, 2129, 2156, 2187, 2209, 2230, 2252, 2274, 2296, 2321, 2346, 2370, 2393, 2412, 2433, 2454, 2477, 2501, 2523, 2547, 2567, 2592, 2611, 2634, 2653, 2680, 2700, 2721, 2744, 2766, 2789, 2810, 2832, 2853, 2873, 2896, 2916, 2937, 2959, 2980, 3007, 3033, 3053, 3077, 3101, 3127, 3150, 3173, 3195, 3220, 3245, 3264, 3288, 3311, 3331, 3353, 3375, 3399, 3427, 3451, 3471, 3497, 3519, 3545, 3564, 3586, 3609, 3635, 3657, 3677, 3702, 3726, 3749, 3772, 3798, 3818, 3841, 3864, 3885, 3911, 3934, 3958, 3980, 4001, 4024, 4047, 4072, 4091, 4114, 4144, 4166, 4193, 4219, 4242, 4261, 4280, 4307, 4336, 4361, 4388, 4425, 4446, 4467, 4488, 4511, 4539, 4563, 4586, 4609, 4631, 4656, 4675, 4696, 4715, 4734, 4756, 4774, 4793, 4819, 4844, 4863, 4890, 4908, 4930, 4957, 4977, 4998, 5024, 5053, 5086, 5106, 5136, 5165, 5189, 5221, 5254, 5288, 5321, 5345, 5368, 5402, 5435, 5468, 5496, 5519, 5545, 5571, 5595, 5620, 5651, 5683, 5709, 5740, 5768, 5793, 5816, 5841, 5868, 5905, 5927, 5954, 5976, 6005, 6034, 6056, 6087, 6102, 6124, 6148, 6175, 6204, 6225, 6246, 6270, 6292, 6316, 6340, 6367, 6391, 6416, 6439, 6464, 6490, 6514, 6536, 6563, 6592, 6625, 6654, 6680, 6710, 6740, 6765, 6792, 6813, 6832, 6868, 6901, 6928, 6950, 6975, 6997, 7022, 7048, 7075, 7097, 7122, 7147, 7175, 7208, 7228, 7259, 7286, 7313, 7334, 7362, 7390, 7412, 7435, 7463, 7486, 7513, 7533, 7556, 7580, 7601, 7627, 7652, 7680, 7717, 7743, 7763, 7783, 7799, 7828, 7856, 7881, 7903, 7929, 7956, 7986, 8013, 8040, 8067, 8094, 8109, 8128, 8154, 8178, 8197, 8220, 8244, 8262, 8288, 8316, 8340, 8368, 8395, 8418, 8442, 8467, 8494, 8520, 8546, 8572, 8598, 8620, 8647, 8671, 8693, 8715, 8741, 8766, 8787, 8813, 8837, 8864, 8888, 8908, 8937, 8973, 9002, 9040, 9055}

func (i SyntaxKind) String() string {
	if i < 0 || i >= SyntaxKind(len(_SyntaxKind_index)-1) {
		return "SyntaxKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SyntaxKind_name[_SyntaxKind_index[i]:_SyntaxKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TSUnknown-0]
	_ = x[TSFalse-1]
	_ = x[TSTrue-2]
}

const _Tristate_name = "TSUnknownTSFalseTSTrue"

var _Tristate_index = [...]uint8{0, 9, 16, 22}

func (i Tristate) String() string {
	if i >= Tristate(len(_Tristate_index)-1) {
		return "Tristate(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Tristate_name[_Tristate_index[i]:_Tristate_index[i+1]]
}
