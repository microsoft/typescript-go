// Code generated by "stringer -type=LanguageVariant,ModuleResolutionKind,ScriptKind,ScriptTarget,SignatureKind,SyntaxKind,Tristate -output=stringer_generated.go"; DO NOT EDIT.

package compiler

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LanguageVariantStandard-0]
	_ = x[LanguageVariantJSX-1]
}

const _LanguageVariant_name = "LanguageVariantStandardLanguageVariantJSX"

var _LanguageVariant_index = [...]uint8{0, 23, 41}

func (i LanguageVariant) String() string {
	if i < 0 || i >= LanguageVariant(len(_LanguageVariant_index)-1) {
		return "LanguageVariant(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LanguageVariant_name[_LanguageVariant_index[i]:_LanguageVariant_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ModuleResolutionKindUnknown-0]
	_ = x[ModuleResolutionKindNode16-3]
	_ = x[ModuleResolutionKindNodeNext-99]
	_ = x[ModuleResolutionKindBundler-100]
}

const (
	_ModuleResolutionKind_name_0 = "ModuleResolutionKindUnknown"
	_ModuleResolutionKind_name_1 = "ModuleResolutionKindNode16"
	_ModuleResolutionKind_name_2 = "ModuleResolutionKindNodeNextModuleResolutionKindBundler"
)

var (
	_ModuleResolutionKind_index_2 = [...]uint8{0, 28, 55}
)

func (i ModuleResolutionKind) String() string {
	switch {
	case i == 0:
		return _ModuleResolutionKind_name_0
	case i == 3:
		return _ModuleResolutionKind_name_1
	case 99 <= i && i <= 100:
		i -= 99
		return _ModuleResolutionKind_name_2[_ModuleResolutionKind_index_2[i]:_ModuleResolutionKind_index_2[i+1]]
	default:
		return "ModuleResolutionKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ScriptKindUnknown-0]
	_ = x[ScriptKindJS-1]
	_ = x[ScriptKindJSX-2]
	_ = x[ScriptKindTS-3]
	_ = x[ScriptKindTSX-4]
	_ = x[ScriptKindExternal-5]
	_ = x[ScriptKindJSON-6]
	_ = x[ScriptKindDeferred-7]
}

const _ScriptKind_name = "ScriptKindUnknownScriptKindJSScriptKindJSXScriptKindTSScriptKindTSXScriptKindExternalScriptKindJSONScriptKindDeferred"

var _ScriptKind_index = [...]uint8{0, 17, 29, 42, 54, 67, 85, 99, 117}

func (i ScriptKind) String() string {
	if i < 0 || i >= ScriptKind(len(_ScriptKind_index)-1) {
		return "ScriptKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ScriptKind_name[_ScriptKind_index[i]:_ScriptKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ScriptTargetNone-0]
	_ = x[ScriptTargetES3-0]
	_ = x[ScriptTargetES5-1]
	_ = x[ScriptTargetES2015-2]
	_ = x[ScriptTargetES2016-3]
	_ = x[ScriptTargetES2017-4]
	_ = x[ScriptTargetES2018-5]
	_ = x[ScriptTargetES2019-6]
	_ = x[ScriptTargetES2020-7]
	_ = x[ScriptTargetES2021-8]
	_ = x[ScriptTargetES2022-9]
	_ = x[ScriptTargetES2023-10]
	_ = x[ScriptTargetESNext-99]
	_ = x[ScriptTargetJSON-100]
	_ = x[ScriptTargetLatest-99]
}

const (
	_ScriptTarget_name_0 = "ScriptTargetNoneScriptTargetES5ScriptTargetES2015ScriptTargetES2016ScriptTargetES2017ScriptTargetES2018ScriptTargetES2019ScriptTargetES2020ScriptTargetES2021ScriptTargetES2022ScriptTargetES2023"
	_ScriptTarget_name_1 = "ScriptTargetESNextScriptTargetJSON"
)

var (
	_ScriptTarget_index_0 = [...]uint8{0, 16, 31, 49, 67, 85, 103, 121, 139, 157, 175, 193}
	_ScriptTarget_index_1 = [...]uint8{0, 18, 34}
)

func (i ScriptTarget) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _ScriptTarget_name_0[_ScriptTarget_index_0[i]:_ScriptTarget_index_0[i+1]]
	case 99 <= i && i <= 100:
		i -= 99
		return _ScriptTarget_name_1[_ScriptTarget_index_1[i]:_ScriptTarget_index_1[i+1]]
	default:
		return "ScriptTarget(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SignatureKindCall-0]
	_ = x[SignatureKindConstruct-1]
}

const _SignatureKind_name = "SignatureKindCallSignatureKindConstruct"

var _SignatureKind_index = [...]uint8{0, 17, 39}

func (i SignatureKind) String() string {
	if i < 0 || i >= SignatureKind(len(_SignatureKind_index)-1) {
		return "SignatureKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SignatureKind_name[_SignatureKind_index[i]:_SignatureKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SyntaxKindUnknown-0]
	_ = x[SyntaxKindEndOfFile-1]
	_ = x[SyntaxKindWhitespaceTrivia-2]
	_ = x[SyntaxKindNewLineTrivia-3]
	_ = x[SyntaxKindConflictMarkerTrivia-4]
	_ = x[SyntaxKindNonTextFileMarkerTrivia-5]
	_ = x[SyntaxKindNumericLiteral-6]
	_ = x[SyntaxKindBigintLiteral-7]
	_ = x[SyntaxKindStringLiteral-8]
	_ = x[SyntaxKindJsxText-9]
	_ = x[SyntaxKindJsxTextAllWhiteSpaces-10]
	_ = x[SyntaxKindRegularExpressionLiteral-11]
	_ = x[SyntaxKindNoSubstitutionTemplateLiteral-12]
	_ = x[SyntaxKindTemplateHead-13]
	_ = x[SyntaxKindTemplateMiddle-14]
	_ = x[SyntaxKindTemplateTail-15]
	_ = x[SyntaxKindOpenBraceToken-16]
	_ = x[SyntaxKindCloseBraceToken-17]
	_ = x[SyntaxKindOpenParenToken-18]
	_ = x[SyntaxKindCloseParenToken-19]
	_ = x[SyntaxKindOpenBracketToken-20]
	_ = x[SyntaxKindCloseBracketToken-21]
	_ = x[SyntaxKindDotToken-22]
	_ = x[SyntaxKindDotDotDotToken-23]
	_ = x[SyntaxKindSemicolonToken-24]
	_ = x[SyntaxKindCommaToken-25]
	_ = x[SyntaxKindQuestionDotToken-26]
	_ = x[SyntaxKindLessThanToken-27]
	_ = x[SyntaxKindLessThanSlashToken-28]
	_ = x[SyntaxKindGreaterThanToken-29]
	_ = x[SyntaxKindLessThanEqualsToken-30]
	_ = x[SyntaxKindGreaterThanEqualsToken-31]
	_ = x[SyntaxKindEqualsEqualsToken-32]
	_ = x[SyntaxKindExclamationEqualsToken-33]
	_ = x[SyntaxKindEqualsEqualsEqualsToken-34]
	_ = x[SyntaxKindExclamationEqualsEqualsToken-35]
	_ = x[SyntaxKindEqualsGreaterThanToken-36]
	_ = x[SyntaxKindPlusToken-37]
	_ = x[SyntaxKindMinusToken-38]
	_ = x[SyntaxKindAsteriskToken-39]
	_ = x[SyntaxKindAsteriskAsteriskToken-40]
	_ = x[SyntaxKindSlashToken-41]
	_ = x[SyntaxKindPercentToken-42]
	_ = x[SyntaxKindPlusPlusToken-43]
	_ = x[SyntaxKindMinusMinusToken-44]
	_ = x[SyntaxKindLessThanLessThanToken-45]
	_ = x[SyntaxKindGreaterThanGreaterThanToken-46]
	_ = x[SyntaxKindGreaterThanGreaterThanGreaterThanToken-47]
	_ = x[SyntaxKindAmpersandToken-48]
	_ = x[SyntaxKindBarToken-49]
	_ = x[SyntaxKindCaretToken-50]
	_ = x[SyntaxKindExclamationToken-51]
	_ = x[SyntaxKindTildeToken-52]
	_ = x[SyntaxKindAmpersandAmpersandToken-53]
	_ = x[SyntaxKindBarBarToken-54]
	_ = x[SyntaxKindQuestionToken-55]
	_ = x[SyntaxKindColonToken-56]
	_ = x[SyntaxKindAtToken-57]
	_ = x[SyntaxKindQuestionQuestionToken-58]
	_ = x[SyntaxKindBacktickToken-59]
	_ = x[SyntaxKindHashToken-60]
	_ = x[SyntaxKindEqualsToken-61]
	_ = x[SyntaxKindPlusEqualsToken-62]
	_ = x[SyntaxKindMinusEqualsToken-63]
	_ = x[SyntaxKindAsteriskEqualsToken-64]
	_ = x[SyntaxKindAsteriskAsteriskEqualsToken-65]
	_ = x[SyntaxKindSlashEqualsToken-66]
	_ = x[SyntaxKindPercentEqualsToken-67]
	_ = x[SyntaxKindLessThanLessThanEqualsToken-68]
	_ = x[SyntaxKindGreaterThanGreaterThanEqualsToken-69]
	_ = x[SyntaxKindGreaterThanGreaterThanGreaterThanEqualsToken-70]
	_ = x[SyntaxKindAmpersandEqualsToken-71]
	_ = x[SyntaxKindBarEqualsToken-72]
	_ = x[SyntaxKindBarBarEqualsToken-73]
	_ = x[SyntaxKindAmpersandAmpersandEqualsToken-74]
	_ = x[SyntaxKindQuestionQuestionEqualsToken-75]
	_ = x[SyntaxKindCaretEqualsToken-76]
	_ = x[SyntaxKindIdentifier-77]
	_ = x[SyntaxKindPrivateIdentifier-78]
	_ = x[SyntaxKindJSDocCommentTextToken-79]
	_ = x[SyntaxKindBreakKeyword-80]
	_ = x[SyntaxKindCaseKeyword-81]
	_ = x[SyntaxKindCatchKeyword-82]
	_ = x[SyntaxKindClassKeyword-83]
	_ = x[SyntaxKindConstKeyword-84]
	_ = x[SyntaxKindContinueKeyword-85]
	_ = x[SyntaxKindDebuggerKeyword-86]
	_ = x[SyntaxKindDefaultKeyword-87]
	_ = x[SyntaxKindDeleteKeyword-88]
	_ = x[SyntaxKindDoKeyword-89]
	_ = x[SyntaxKindElseKeyword-90]
	_ = x[SyntaxKindEnumKeyword-91]
	_ = x[SyntaxKindExportKeyword-92]
	_ = x[SyntaxKindExtendsKeyword-93]
	_ = x[SyntaxKindFalseKeyword-94]
	_ = x[SyntaxKindFinallyKeyword-95]
	_ = x[SyntaxKindForKeyword-96]
	_ = x[SyntaxKindFunctionKeyword-97]
	_ = x[SyntaxKindIfKeyword-98]
	_ = x[SyntaxKindImportKeyword-99]
	_ = x[SyntaxKindInKeyword-100]
	_ = x[SyntaxKindInstanceOfKeyword-101]
	_ = x[SyntaxKindNewKeyword-102]
	_ = x[SyntaxKindNullKeyword-103]
	_ = x[SyntaxKindReturnKeyword-104]
	_ = x[SyntaxKindSuperKeyword-105]
	_ = x[SyntaxKindSwitchKeyword-106]
	_ = x[SyntaxKindThisKeyword-107]
	_ = x[SyntaxKindThrowKeyword-108]
	_ = x[SyntaxKindTrueKeyword-109]
	_ = x[SyntaxKindTryKeyword-110]
	_ = x[SyntaxKindTypeOfKeyword-111]
	_ = x[SyntaxKindVarKeyword-112]
	_ = x[SyntaxKindVoidKeyword-113]
	_ = x[SyntaxKindWhileKeyword-114]
	_ = x[SyntaxKindWithKeyword-115]
	_ = x[SyntaxKindImplementsKeyword-116]
	_ = x[SyntaxKindInterfaceKeyword-117]
	_ = x[SyntaxKindLetKeyword-118]
	_ = x[SyntaxKindPackageKeyword-119]
	_ = x[SyntaxKindPrivateKeyword-120]
	_ = x[SyntaxKindProtectedKeyword-121]
	_ = x[SyntaxKindPublicKeyword-122]
	_ = x[SyntaxKindStaticKeyword-123]
	_ = x[SyntaxKindYieldKeyword-124]
	_ = x[SyntaxKindAbstractKeyword-125]
	_ = x[SyntaxKindAccessorKeyword-126]
	_ = x[SyntaxKindAsKeyword-127]
	_ = x[SyntaxKindAssertsKeyword-128]
	_ = x[SyntaxKindAssertKeyword-129]
	_ = x[SyntaxKindAnyKeyword-130]
	_ = x[SyntaxKindAsyncKeyword-131]
	_ = x[SyntaxKindAwaitKeyword-132]
	_ = x[SyntaxKindBooleanKeyword-133]
	_ = x[SyntaxKindConstructorKeyword-134]
	_ = x[SyntaxKindDeclareKeyword-135]
	_ = x[SyntaxKindGetKeyword-136]
	_ = x[SyntaxKindImmediateKeyword-137]
	_ = x[SyntaxKindInferKeyword-138]
	_ = x[SyntaxKindIntrinsicKeyword-139]
	_ = x[SyntaxKindIsKeyword-140]
	_ = x[SyntaxKindKeyOfKeyword-141]
	_ = x[SyntaxKindModuleKeyword-142]
	_ = x[SyntaxKindNamespaceKeyword-143]
	_ = x[SyntaxKindNeverKeyword-144]
	_ = x[SyntaxKindOutKeyword-145]
	_ = x[SyntaxKindReadonlyKeyword-146]
	_ = x[SyntaxKindRequireKeyword-147]
	_ = x[SyntaxKindNumberKeyword-148]
	_ = x[SyntaxKindObjectKeyword-149]
	_ = x[SyntaxKindSatisfiesKeyword-150]
	_ = x[SyntaxKindSetKeyword-151]
	_ = x[SyntaxKindStringKeyword-152]
	_ = x[SyntaxKindSymbolKeyword-153]
	_ = x[SyntaxKindTypeKeyword-154]
	_ = x[SyntaxKindUndefinedKeyword-155]
	_ = x[SyntaxKindUniqueKeyword-156]
	_ = x[SyntaxKindUnknownKeyword-157]
	_ = x[SyntaxKindUsingKeyword-158]
	_ = x[SyntaxKindFromKeyword-159]
	_ = x[SyntaxKindGlobalKeyword-160]
	_ = x[SyntaxKindBigIntKeyword-161]
	_ = x[SyntaxKindOverrideKeyword-162]
	_ = x[SyntaxKindOfKeyword-163]
	_ = x[SyntaxKindQualifiedName-164]
	_ = x[SyntaxKindComputedPropertyName-165]
	_ = x[SyntaxKindModifierList-166]
	_ = x[SyntaxKindTypeParameterList-167]
	_ = x[SyntaxKindTypeArgumentList-168]
	_ = x[SyntaxKindJSDocList-169]
	_ = x[SyntaxKindJSDocCommentList-170]
	_ = x[SyntaxKindJSDocTagList-171]
	_ = x[SyntaxKindTypeParameter-172]
	_ = x[SyntaxKindParameter-173]
	_ = x[SyntaxKindDecorator-174]
	_ = x[SyntaxKindPropertySignature-175]
	_ = x[SyntaxKindPropertyDeclaration-176]
	_ = x[SyntaxKindMethodSignature-177]
	_ = x[SyntaxKindMethodDeclaration-178]
	_ = x[SyntaxKindClassStaticBlockDeclaration-179]
	_ = x[SyntaxKindConstructor-180]
	_ = x[SyntaxKindGetAccessor-181]
	_ = x[SyntaxKindSetAccessor-182]
	_ = x[SyntaxKindCallSignature-183]
	_ = x[SyntaxKindConstructSignature-184]
	_ = x[SyntaxKindIndexSignature-185]
	_ = x[SyntaxKindTypePredicate-186]
	_ = x[SyntaxKindTypeReference-187]
	_ = x[SyntaxKindFunctionType-188]
	_ = x[SyntaxKindConstructorType-189]
	_ = x[SyntaxKindTypeQuery-190]
	_ = x[SyntaxKindTypeLiteral-191]
	_ = x[SyntaxKindArrayType-192]
	_ = x[SyntaxKindTupleType-193]
	_ = x[SyntaxKindOptionalType-194]
	_ = x[SyntaxKindRestType-195]
	_ = x[SyntaxKindUnionType-196]
	_ = x[SyntaxKindIntersectionType-197]
	_ = x[SyntaxKindConditionalType-198]
	_ = x[SyntaxKindInferType-199]
	_ = x[SyntaxKindParenthesizedType-200]
	_ = x[SyntaxKindThisType-201]
	_ = x[SyntaxKindTypeOperator-202]
	_ = x[SyntaxKindIndexedAccessType-203]
	_ = x[SyntaxKindMappedType-204]
	_ = x[SyntaxKindLiteralType-205]
	_ = x[SyntaxKindNamedTupleMember-206]
	_ = x[SyntaxKindTemplateLiteralType-207]
	_ = x[SyntaxKindTemplateLiteralTypeSpan-208]
	_ = x[SyntaxKindImportType-209]
	_ = x[SyntaxKindObjectBindingPattern-210]
	_ = x[SyntaxKindArrayBindingPattern-211]
	_ = x[SyntaxKindBindingElement-212]
	_ = x[SyntaxKindArrayLiteralExpression-213]
	_ = x[SyntaxKindObjectLiteralExpression-214]
	_ = x[SyntaxKindPropertyAccessExpression-215]
	_ = x[SyntaxKindElementAccessExpression-216]
	_ = x[SyntaxKindCallExpression-217]
	_ = x[SyntaxKindNewExpression-218]
	_ = x[SyntaxKindTaggedTemplateExpression-219]
	_ = x[SyntaxKindTypeAssertionExpression-220]
	_ = x[SyntaxKindParenthesizedExpression-221]
	_ = x[SyntaxKindFunctionExpression-222]
	_ = x[SyntaxKindArrowFunction-223]
	_ = x[SyntaxKindDeleteExpression-224]
	_ = x[SyntaxKindTypeOfExpression-225]
	_ = x[SyntaxKindVoidExpression-226]
	_ = x[SyntaxKindAwaitExpression-227]
	_ = x[SyntaxKindPrefixUnaryExpression-228]
	_ = x[SyntaxKindPostfixUnaryExpression-229]
	_ = x[SyntaxKindBinaryExpression-230]
	_ = x[SyntaxKindConditionalExpression-231]
	_ = x[SyntaxKindTemplateExpression-232]
	_ = x[SyntaxKindYieldExpression-233]
	_ = x[SyntaxKindSpreadElement-234]
	_ = x[SyntaxKindClassExpression-235]
	_ = x[SyntaxKindOmittedExpression-236]
	_ = x[SyntaxKindExpressionWithTypeArguments-237]
	_ = x[SyntaxKindAsExpression-238]
	_ = x[SyntaxKindNonNullExpression-239]
	_ = x[SyntaxKindMetaProperty-240]
	_ = x[SyntaxKindSyntheticExpression-241]
	_ = x[SyntaxKindSatisfiesExpression-242]
	_ = x[SyntaxKindTemplateSpan-243]
	_ = x[SyntaxKindSemicolonClassElement-244]
	_ = x[SyntaxKindBlock-245]
	_ = x[SyntaxKindEmptyStatement-246]
	_ = x[SyntaxKindVariableStatement-247]
	_ = x[SyntaxKindExpressionStatement-248]
	_ = x[SyntaxKindIfStatement-249]
	_ = x[SyntaxKindDoStatement-250]
	_ = x[SyntaxKindWhileStatement-251]
	_ = x[SyntaxKindForStatement-252]
	_ = x[SyntaxKindForInStatement-253]
	_ = x[SyntaxKindForOfStatement-254]
	_ = x[SyntaxKindContinueStatement-255]
	_ = x[SyntaxKindBreakStatement-256]
	_ = x[SyntaxKindReturnStatement-257]
	_ = x[SyntaxKindWithStatement-258]
	_ = x[SyntaxKindSwitchStatement-259]
	_ = x[SyntaxKindLabeledStatement-260]
	_ = x[SyntaxKindThrowStatement-261]
	_ = x[SyntaxKindTryStatement-262]
	_ = x[SyntaxKindDebuggerStatement-263]
	_ = x[SyntaxKindVariableDeclaration-264]
	_ = x[SyntaxKindVariableDeclarationList-265]
	_ = x[SyntaxKindFunctionDeclaration-266]
	_ = x[SyntaxKindClassDeclaration-267]
	_ = x[SyntaxKindInterfaceDeclaration-268]
	_ = x[SyntaxKindTypeAliasDeclaration-269]
	_ = x[SyntaxKindEnumDeclaration-270]
	_ = x[SyntaxKindModuleDeclaration-271]
	_ = x[SyntaxKindModuleBlock-272]
	_ = x[SyntaxKindCaseBlock-273]
	_ = x[SyntaxKindNamespaceExportDeclaration-274]
	_ = x[SyntaxKindImportEqualsDeclaration-275]
	_ = x[SyntaxKindImportDeclaration-276]
	_ = x[SyntaxKindImportClause-277]
	_ = x[SyntaxKindNamespaceImport-278]
	_ = x[SyntaxKindNamedImports-279]
	_ = x[SyntaxKindImportSpecifier-280]
	_ = x[SyntaxKindExportAssignment-281]
	_ = x[SyntaxKindExportDeclaration-282]
	_ = x[SyntaxKindNamedExports-283]
	_ = x[SyntaxKindNamespaceExport-284]
	_ = x[SyntaxKindExportSpecifier-285]
	_ = x[SyntaxKindMissingDeclaration-286]
	_ = x[SyntaxKindExternalModuleReference-287]
	_ = x[SyntaxKindJsxElement-288]
	_ = x[SyntaxKindJsxSelfClosingElement-289]
	_ = x[SyntaxKindJsxOpeningElement-290]
	_ = x[SyntaxKindJsxClosingElement-291]
	_ = x[SyntaxKindJsxFragment-292]
	_ = x[SyntaxKindJsxOpeningFragment-293]
	_ = x[SyntaxKindJsxClosingFragment-294]
	_ = x[SyntaxKindJsxAttribute-295]
	_ = x[SyntaxKindJsxAttributes-296]
	_ = x[SyntaxKindJsxSpreadAttribute-297]
	_ = x[SyntaxKindJsxExpression-298]
	_ = x[SyntaxKindJsxNamespacedName-299]
	_ = x[SyntaxKindCaseClause-300]
	_ = x[SyntaxKindDefaultClause-301]
	_ = x[SyntaxKindHeritageClause-302]
	_ = x[SyntaxKindCatchClause-303]
	_ = x[SyntaxKindImportAttributes-304]
	_ = x[SyntaxKindImportAttribute-305]
	_ = x[SyntaxKindPropertyAssignment-306]
	_ = x[SyntaxKindShorthandPropertyAssignment-307]
	_ = x[SyntaxKindSpreadAssignment-308]
	_ = x[SyntaxKindEnumMember-309]
	_ = x[SyntaxKindSourceFile-310]
	_ = x[SyntaxKindBundle-311]
	_ = x[SyntaxKindJSDocTypeExpression-312]
	_ = x[SyntaxKindJSDocNameReference-313]
	_ = x[SyntaxKindJSDocMemberName-314]
	_ = x[SyntaxKindJSDocAllType-315]
	_ = x[SyntaxKindJSDocUnknownType-316]
	_ = x[SyntaxKindJSDocNullableType-317]
	_ = x[SyntaxKindJSDocNonNullableType-318]
	_ = x[SyntaxKindJSDocOptionalType-319]
	_ = x[SyntaxKindJSDocFunctionType-320]
	_ = x[SyntaxKindJSDocVariadicType-321]
	_ = x[SyntaxKindJSDocNamepathType-322]
	_ = x[SyntaxKindJSDoc-323]
	_ = x[SyntaxKindJSDocText-324]
	_ = x[SyntaxKindJSDocTypeLiteral-325]
	_ = x[SyntaxKindJSDocSignature-326]
	_ = x[SyntaxKindJSDocLink-327]
	_ = x[SyntaxKindJSDocLinkCode-328]
	_ = x[SyntaxKindJSDocLinkPlain-329]
	_ = x[SyntaxKindJSDocTag-330]
	_ = x[SyntaxKindJSDocAugmentsTag-331]
	_ = x[SyntaxKindJSDocImplementsTag-332]
	_ = x[SyntaxKindJSDocAuthorTag-333]
	_ = x[SyntaxKindJSDocDeprecatedTag-334]
	_ = x[SyntaxKindJSDocImmediateTag-335]
	_ = x[SyntaxKindJSDocClassTag-336]
	_ = x[SyntaxKindJSDocPublicTag-337]
	_ = x[SyntaxKindJSDocPrivateTag-338]
	_ = x[SyntaxKindJSDocProtectedTag-339]
	_ = x[SyntaxKindJSDocReadonlyTag-340]
	_ = x[SyntaxKindJSDocOverrideTag-341]
	_ = x[SyntaxKindJSDocCallbackTag-342]
	_ = x[SyntaxKindJSDocOverloadTag-343]
	_ = x[SyntaxKindJSDocEnumTag-344]
	_ = x[SyntaxKindJSDocParameterTag-345]
	_ = x[SyntaxKindJSDocReturnTag-346]
	_ = x[SyntaxKindJSDocThisTag-347]
	_ = x[SyntaxKindJSDocTypeTag-348]
	_ = x[SyntaxKindJSDocTemplateTag-349]
	_ = x[SyntaxKindJSDocTypedefTag-350]
	_ = x[SyntaxKindJSDocSeeTag-351]
	_ = x[SyntaxKindJSDocPropertyTag-352]
	_ = x[SyntaxKindJSDocThrowsTag-353]
	_ = x[SyntaxKindJSDocSatisfiesTag-354]
	_ = x[SyntaxKindJSDocImportTag-355]
	_ = x[SyntaxKindSyntaxList-356]
	_ = x[SyntaxKindNotEmittedStatement-357]
	_ = x[SyntaxKindPartiallyEmittedExpression-358]
	_ = x[SyntaxKindCommaListExpression-359]
	_ = x[SyntaxKindSyntheticReferenceExpression-360]
	_ = x[SyntaxKindCount-361]
}

const _SyntaxKind_name = "SyntaxKindUnknownSyntaxKindEndOfFileSyntaxKindWhitespaceTriviaSyntaxKindNewLineTriviaSyntaxKindConflictMarkerTriviaSyntaxKindNonTextFileMarkerTriviaSyntaxKindNumericLiteralSyntaxKindBigintLiteralSyntaxKindStringLiteralSyntaxKindJsxTextSyntaxKindJsxTextAllWhiteSpacesSyntaxKindRegularExpressionLiteralSyntaxKindNoSubstitutionTemplateLiteralSyntaxKindTemplateHeadSyntaxKindTemplateMiddleSyntaxKindTemplateTailSyntaxKindOpenBraceTokenSyntaxKindCloseBraceTokenSyntaxKindOpenParenTokenSyntaxKindCloseParenTokenSyntaxKindOpenBracketTokenSyntaxKindCloseBracketTokenSyntaxKindDotTokenSyntaxKindDotDotDotTokenSyntaxKindSemicolonTokenSyntaxKindCommaTokenSyntaxKindQuestionDotTokenSyntaxKindLessThanTokenSyntaxKindLessThanSlashTokenSyntaxKindGreaterThanTokenSyntaxKindLessThanEqualsTokenSyntaxKindGreaterThanEqualsTokenSyntaxKindEqualsEqualsTokenSyntaxKindExclamationEqualsTokenSyntaxKindEqualsEqualsEqualsTokenSyntaxKindExclamationEqualsEqualsTokenSyntaxKindEqualsGreaterThanTokenSyntaxKindPlusTokenSyntaxKindMinusTokenSyntaxKindAsteriskTokenSyntaxKindAsteriskAsteriskTokenSyntaxKindSlashTokenSyntaxKindPercentTokenSyntaxKindPlusPlusTokenSyntaxKindMinusMinusTokenSyntaxKindLessThanLessThanTokenSyntaxKindGreaterThanGreaterThanTokenSyntaxKindGreaterThanGreaterThanGreaterThanTokenSyntaxKindAmpersandTokenSyntaxKindBarTokenSyntaxKindCaretTokenSyntaxKindExclamationTokenSyntaxKindTildeTokenSyntaxKindAmpersandAmpersandTokenSyntaxKindBarBarTokenSyntaxKindQuestionTokenSyntaxKindColonTokenSyntaxKindAtTokenSyntaxKindQuestionQuestionTokenSyntaxKindBacktickTokenSyntaxKindHashTokenSyntaxKindEqualsTokenSyntaxKindPlusEqualsTokenSyntaxKindMinusEqualsTokenSyntaxKindAsteriskEqualsTokenSyntaxKindAsteriskAsteriskEqualsTokenSyntaxKindSlashEqualsTokenSyntaxKindPercentEqualsTokenSyntaxKindLessThanLessThanEqualsTokenSyntaxKindGreaterThanGreaterThanEqualsTokenSyntaxKindGreaterThanGreaterThanGreaterThanEqualsTokenSyntaxKindAmpersandEqualsTokenSyntaxKindBarEqualsTokenSyntaxKindBarBarEqualsTokenSyntaxKindAmpersandAmpersandEqualsTokenSyntaxKindQuestionQuestionEqualsTokenSyntaxKindCaretEqualsTokenSyntaxKindIdentifierSyntaxKindPrivateIdentifierSyntaxKindJSDocCommentTextTokenSyntaxKindBreakKeywordSyntaxKindCaseKeywordSyntaxKindCatchKeywordSyntaxKindClassKeywordSyntaxKindConstKeywordSyntaxKindContinueKeywordSyntaxKindDebuggerKeywordSyntaxKindDefaultKeywordSyntaxKindDeleteKeywordSyntaxKindDoKeywordSyntaxKindElseKeywordSyntaxKindEnumKeywordSyntaxKindExportKeywordSyntaxKindExtendsKeywordSyntaxKindFalseKeywordSyntaxKindFinallyKeywordSyntaxKindForKeywordSyntaxKindFunctionKeywordSyntaxKindIfKeywordSyntaxKindImportKeywordSyntaxKindInKeywordSyntaxKindInstanceOfKeywordSyntaxKindNewKeywordSyntaxKindNullKeywordSyntaxKindReturnKeywordSyntaxKindSuperKeywordSyntaxKindSwitchKeywordSyntaxKindThisKeywordSyntaxKindThrowKeywordSyntaxKindTrueKeywordSyntaxKindTryKeywordSyntaxKindTypeOfKeywordSyntaxKindVarKeywordSyntaxKindVoidKeywordSyntaxKindWhileKeywordSyntaxKindWithKeywordSyntaxKindImplementsKeywordSyntaxKindInterfaceKeywordSyntaxKindLetKeywordSyntaxKindPackageKeywordSyntaxKindPrivateKeywordSyntaxKindProtectedKeywordSyntaxKindPublicKeywordSyntaxKindStaticKeywordSyntaxKindYieldKeywordSyntaxKindAbstractKeywordSyntaxKindAccessorKeywordSyntaxKindAsKeywordSyntaxKindAssertsKeywordSyntaxKindAssertKeywordSyntaxKindAnyKeywordSyntaxKindAsyncKeywordSyntaxKindAwaitKeywordSyntaxKindBooleanKeywordSyntaxKindConstructorKeywordSyntaxKindDeclareKeywordSyntaxKindGetKeywordSyntaxKindImmediateKeywordSyntaxKindInferKeywordSyntaxKindIntrinsicKeywordSyntaxKindIsKeywordSyntaxKindKeyOfKeywordSyntaxKindModuleKeywordSyntaxKindNamespaceKeywordSyntaxKindNeverKeywordSyntaxKindOutKeywordSyntaxKindReadonlyKeywordSyntaxKindRequireKeywordSyntaxKindNumberKeywordSyntaxKindObjectKeywordSyntaxKindSatisfiesKeywordSyntaxKindSetKeywordSyntaxKindStringKeywordSyntaxKindSymbolKeywordSyntaxKindTypeKeywordSyntaxKindUndefinedKeywordSyntaxKindUniqueKeywordSyntaxKindUnknownKeywordSyntaxKindUsingKeywordSyntaxKindFromKeywordSyntaxKindGlobalKeywordSyntaxKindBigIntKeywordSyntaxKindOverrideKeywordSyntaxKindOfKeywordSyntaxKindQualifiedNameSyntaxKindComputedPropertyNameSyntaxKindModifierListSyntaxKindTypeParameterListSyntaxKindTypeArgumentListSyntaxKindJSDocListSyntaxKindJSDocCommentListSyntaxKindJSDocTagListSyntaxKindTypeParameterSyntaxKindParameterSyntaxKindDecoratorSyntaxKindPropertySignatureSyntaxKindPropertyDeclarationSyntaxKindMethodSignatureSyntaxKindMethodDeclarationSyntaxKindClassStaticBlockDeclarationSyntaxKindConstructorSyntaxKindGetAccessorSyntaxKindSetAccessorSyntaxKindCallSignatureSyntaxKindConstructSignatureSyntaxKindIndexSignatureSyntaxKindTypePredicateSyntaxKindTypeReferenceSyntaxKindFunctionTypeSyntaxKindConstructorTypeSyntaxKindTypeQuerySyntaxKindTypeLiteralSyntaxKindArrayTypeSyntaxKindTupleTypeSyntaxKindOptionalTypeSyntaxKindRestTypeSyntaxKindUnionTypeSyntaxKindIntersectionTypeSyntaxKindConditionalTypeSyntaxKindInferTypeSyntaxKindParenthesizedTypeSyntaxKindThisTypeSyntaxKindTypeOperatorSyntaxKindIndexedAccessTypeSyntaxKindMappedTypeSyntaxKindLiteralTypeSyntaxKindNamedTupleMemberSyntaxKindTemplateLiteralTypeSyntaxKindTemplateLiteralTypeSpanSyntaxKindImportTypeSyntaxKindObjectBindingPatternSyntaxKindArrayBindingPatternSyntaxKindBindingElementSyntaxKindArrayLiteralExpressionSyntaxKindObjectLiteralExpressionSyntaxKindPropertyAccessExpressionSyntaxKindElementAccessExpressionSyntaxKindCallExpressionSyntaxKindNewExpressionSyntaxKindTaggedTemplateExpressionSyntaxKindTypeAssertionExpressionSyntaxKindParenthesizedExpressionSyntaxKindFunctionExpressionSyntaxKindArrowFunctionSyntaxKindDeleteExpressionSyntaxKindTypeOfExpressionSyntaxKindVoidExpressionSyntaxKindAwaitExpressionSyntaxKindPrefixUnaryExpressionSyntaxKindPostfixUnaryExpressionSyntaxKindBinaryExpressionSyntaxKindConditionalExpressionSyntaxKindTemplateExpressionSyntaxKindYieldExpressionSyntaxKindSpreadElementSyntaxKindClassExpressionSyntaxKindOmittedExpressionSyntaxKindExpressionWithTypeArgumentsSyntaxKindAsExpressionSyntaxKindNonNullExpressionSyntaxKindMetaPropertySyntaxKindSyntheticExpressionSyntaxKindSatisfiesExpressionSyntaxKindTemplateSpanSyntaxKindSemicolonClassElementSyntaxKindBlockSyntaxKindEmptyStatementSyntaxKindVariableStatementSyntaxKindExpressionStatementSyntaxKindIfStatementSyntaxKindDoStatementSyntaxKindWhileStatementSyntaxKindForStatementSyntaxKindForInStatementSyntaxKindForOfStatementSyntaxKindContinueStatementSyntaxKindBreakStatementSyntaxKindReturnStatementSyntaxKindWithStatementSyntaxKindSwitchStatementSyntaxKindLabeledStatementSyntaxKindThrowStatementSyntaxKindTryStatementSyntaxKindDebuggerStatementSyntaxKindVariableDeclarationSyntaxKindVariableDeclarationListSyntaxKindFunctionDeclarationSyntaxKindClassDeclarationSyntaxKindInterfaceDeclarationSyntaxKindTypeAliasDeclarationSyntaxKindEnumDeclarationSyntaxKindModuleDeclarationSyntaxKindModuleBlockSyntaxKindCaseBlockSyntaxKindNamespaceExportDeclarationSyntaxKindImportEqualsDeclarationSyntaxKindImportDeclarationSyntaxKindImportClauseSyntaxKindNamespaceImportSyntaxKindNamedImportsSyntaxKindImportSpecifierSyntaxKindExportAssignmentSyntaxKindExportDeclarationSyntaxKindNamedExportsSyntaxKindNamespaceExportSyntaxKindExportSpecifierSyntaxKindMissingDeclarationSyntaxKindExternalModuleReferenceSyntaxKindJsxElementSyntaxKindJsxSelfClosingElementSyntaxKindJsxOpeningElementSyntaxKindJsxClosingElementSyntaxKindJsxFragmentSyntaxKindJsxOpeningFragmentSyntaxKindJsxClosingFragmentSyntaxKindJsxAttributeSyntaxKindJsxAttributesSyntaxKindJsxSpreadAttributeSyntaxKindJsxExpressionSyntaxKindJsxNamespacedNameSyntaxKindCaseClauseSyntaxKindDefaultClauseSyntaxKindHeritageClauseSyntaxKindCatchClauseSyntaxKindImportAttributesSyntaxKindImportAttributeSyntaxKindPropertyAssignmentSyntaxKindShorthandPropertyAssignmentSyntaxKindSpreadAssignmentSyntaxKindEnumMemberSyntaxKindSourceFileSyntaxKindBundleSyntaxKindJSDocTypeExpressionSyntaxKindJSDocNameReferenceSyntaxKindJSDocMemberNameSyntaxKindJSDocAllTypeSyntaxKindJSDocUnknownTypeSyntaxKindJSDocNullableTypeSyntaxKindJSDocNonNullableTypeSyntaxKindJSDocOptionalTypeSyntaxKindJSDocFunctionTypeSyntaxKindJSDocVariadicTypeSyntaxKindJSDocNamepathTypeSyntaxKindJSDocSyntaxKindJSDocTextSyntaxKindJSDocTypeLiteralSyntaxKindJSDocSignatureSyntaxKindJSDocLinkSyntaxKindJSDocLinkCodeSyntaxKindJSDocLinkPlainSyntaxKindJSDocTagSyntaxKindJSDocAugmentsTagSyntaxKindJSDocImplementsTagSyntaxKindJSDocAuthorTagSyntaxKindJSDocDeprecatedTagSyntaxKindJSDocImmediateTagSyntaxKindJSDocClassTagSyntaxKindJSDocPublicTagSyntaxKindJSDocPrivateTagSyntaxKindJSDocProtectedTagSyntaxKindJSDocReadonlyTagSyntaxKindJSDocOverrideTagSyntaxKindJSDocCallbackTagSyntaxKindJSDocOverloadTagSyntaxKindJSDocEnumTagSyntaxKindJSDocParameterTagSyntaxKindJSDocReturnTagSyntaxKindJSDocThisTagSyntaxKindJSDocTypeTagSyntaxKindJSDocTemplateTagSyntaxKindJSDocTypedefTagSyntaxKindJSDocSeeTagSyntaxKindJSDocPropertyTagSyntaxKindJSDocThrowsTagSyntaxKindJSDocSatisfiesTagSyntaxKindJSDocImportTagSyntaxKindSyntaxListSyntaxKindNotEmittedStatementSyntaxKindPartiallyEmittedExpressionSyntaxKindCommaListExpressionSyntaxKindSyntheticReferenceExpressionSyntaxKindCount"

var _SyntaxKind_index = [...]uint16{0, 17, 36, 62, 85, 115, 148, 172, 195, 218, 235, 266, 300, 339, 361, 385, 407, 431, 456, 480, 505, 531, 558, 576, 600, 624, 644, 670, 693, 721, 747, 776, 808, 835, 867, 900, 938, 970, 989, 1009, 1032, 1063, 1083, 1105, 1128, 1153, 1184, 1221, 1269, 1293, 1311, 1331, 1357, 1377, 1410, 1431, 1454, 1474, 1491, 1522, 1545, 1564, 1585, 1610, 1636, 1665, 1702, 1728, 1756, 1793, 1836, 1890, 1920, 1944, 1971, 2010, 2047, 2073, 2093, 2120, 2151, 2173, 2194, 2216, 2238, 2260, 2285, 2310, 2334, 2357, 2376, 2397, 2418, 2441, 2465, 2487, 2511, 2531, 2556, 2575, 2598, 2617, 2644, 2664, 2685, 2708, 2730, 2753, 2774, 2796, 2817, 2837, 2860, 2880, 2901, 2923, 2944, 2971, 2997, 3017, 3041, 3065, 3091, 3114, 3137, 3159, 3184, 3209, 3228, 3252, 3275, 3295, 3317, 3339, 3363, 3391, 3415, 3435, 3461, 3483, 3509, 3528, 3550, 3573, 3599, 3621, 3641, 3666, 3690, 3713, 3736, 3762, 3782, 3805, 3828, 3849, 3875, 3898, 3922, 3944, 3965, 3988, 4011, 4036, 4055, 4078, 4108, 4130, 4157, 4183, 4202, 4228, 4250, 4273, 4292, 4311, 4338, 4367, 4392, 4419, 4456, 4477, 4498, 4519, 4542, 4570, 4594, 4617, 4640, 4662, 4687, 4706, 4727, 4746, 4765, 4787, 4805, 4824, 4850, 4875, 4894, 4921, 4939, 4961, 4988, 5008, 5029, 5055, 5084, 5117, 5137, 5167, 5196, 5220, 5252, 5285, 5319, 5352, 5376, 5399, 5433, 5466, 5499, 5527, 5550, 5576, 5602, 5626, 5651, 5682, 5714, 5740, 5771, 5799, 5824, 5847, 5872, 5899, 5936, 5958, 5985, 6007, 6036, 6065, 6087, 6118, 6133, 6157, 6184, 6213, 6234, 6255, 6279, 6301, 6325, 6349, 6376, 6400, 6425, 6448, 6473, 6499, 6523, 6545, 6572, 6601, 6634, 6663, 6689, 6719, 6749, 6774, 6801, 6822, 6841, 6877, 6910, 6937, 6959, 6984, 7006, 7031, 7057, 7084, 7106, 7131, 7156, 7184, 7217, 7237, 7268, 7295, 7322, 7343, 7371, 7399, 7421, 7444, 7472, 7495, 7522, 7542, 7565, 7589, 7610, 7636, 7661, 7689, 7726, 7752, 7772, 7792, 7808, 7837, 7865, 7890, 7912, 7938, 7965, 7995, 8022, 8049, 8076, 8103, 8118, 8137, 8163, 8187, 8206, 8229, 8253, 8271, 8297, 8325, 8349, 8377, 8404, 8427, 8451, 8476, 8503, 8529, 8555, 8581, 8607, 8629, 8656, 8680, 8702, 8724, 8750, 8775, 8796, 8822, 8846, 8873, 8897, 8917, 8946, 8982, 9011, 9049, 9064}

func (i SyntaxKind) String() string {
	if i < 0 || i >= SyntaxKind(len(_SyntaxKind_index)-1) {
		return "SyntaxKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SyntaxKind_name[_SyntaxKind_index[i]:_SyntaxKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TSUnknown-0]
	_ = x[TSFalse-1]
	_ = x[TSTrue-2]
}

const _Tristate_name = "TSUnknownTSFalseTSTrue"

var _Tristate_index = [...]uint8{0, 9, 16, 22}

func (i Tristate) String() string {
	if i >= Tristate(len(_Tristate_index)-1) {
		return "Tristate(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Tristate_name[_Tristate_index[i]:_Tristate_index[i+1]]
}
