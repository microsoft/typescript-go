//// [tests/cases/compiler/emptyObjectUnionComparison.ts] ////

=== emptyObjectUnionComparison.ts ===
function f() {
>f : Symbol(f, Decl(emptyObjectUnionComparison.ts, 0, 0))

  const v: {} = "lol";
>v : Symbol(v, Decl(emptyObjectUnionComparison.ts, 1, 7))

  const acceptsRecord = (record: Record<string, string>) => {};
>acceptsRecord : Symbol(acceptsRecord, Decl(emptyObjectUnionComparison.ts, 2, 7))
>record : Symbol(record, Decl(emptyObjectUnionComparison.ts, 2, 25))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))

  acceptsRecord(v || {});
>acceptsRecord : Symbol(acceptsRecord, Decl(emptyObjectUnionComparison.ts, 2, 7))
>v : Symbol(v, Decl(emptyObjectUnionComparison.ts, 1, 7))
}

function g() {
>g : Symbol(g, Decl(emptyObjectUnionComparison.ts, 4, 1))

  const v: unknown = "lol";
>v : Symbol(v, Decl(emptyObjectUnionComparison.ts, 7, 7))

  const acceptsRecord = (record: Record<string, string>) => {};
>acceptsRecord : Symbol(acceptsRecord, Decl(emptyObjectUnionComparison.ts, 8, 7))
>record : Symbol(record, Decl(emptyObjectUnionComparison.ts, 8, 25))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))

  acceptsRecord(v || {});
>acceptsRecord : Symbol(acceptsRecord, Decl(emptyObjectUnionComparison.ts, 8, 7))
>v : Symbol(v, Decl(emptyObjectUnionComparison.ts, 7, 7))
}
