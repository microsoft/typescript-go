//// [tests/cases/compiler/pnpDeclarationEmitWorkspace.ts] ////

=== /src/index.ts ===
import type { ServiceConfig, ConfigFactory } from 'package-a/other-subpath';
>ServiceConfig : Symbol(ServiceConfig, Decl(index.ts, 0, 13))
>ConfigFactory : Symbol(ConfigFactory, Decl(index.ts, 0, 28))

import { createServiceConfig } from 'package-a/other-subpath';
>createServiceConfig : Symbol(createServiceConfig, Decl(index.ts, 1, 8))

export function initializeService(url: string): ServiceConfig {
>initializeService : Symbol(initializeService, Decl(index.ts, 1, 62))
>url : Symbol(url, Decl(index.ts, 3, 34))
>ServiceConfig : Symbol(ServiceConfig, Decl(index.ts, 0, 13))

  return createServiceConfig(url);
>createServiceConfig : Symbol(createServiceConfig, Decl(index.ts, 1, 8))
>url : Symbol(url, Decl(index.ts, 3, 34))
}

export const factory = createServiceConfig;
>factory : Symbol(factory, Decl(index.ts, 7, 12))
>createServiceConfig : Symbol(createServiceConfig, Decl(index.ts, 1, 8))

export interface AppConfig {
>AppConfig : Symbol(AppConfig, Decl(index.ts, 7, 43))

  service: ServiceConfig;
>service : Symbol(AppConfig.service, Decl(index.ts, 9, 28))
>ServiceConfig : Symbol(ServiceConfig, Decl(index.ts, 0, 13))

  debug: boolean;
>debug : Symbol(AppConfig.debug, Decl(index.ts, 10, 25))
}

=== /packages/package-a/index.d.ts ===
export interface BaseConfig {
>BaseConfig : Symbol(BaseConfig, Decl(index.d.ts, 0, 0))

  timeout: number;
>timeout : Symbol(BaseConfig.timeout, Decl(index.d.ts, 0, 29))

  retries: number;
>retries : Symbol(BaseConfig.retries, Decl(index.d.ts, 1, 18))
}

export interface DataOptions {
>DataOptions : Symbol(DataOptions, Decl(index.d.ts, 3, 1))

  format: "json" | "xml";
>format : Symbol(DataOptions.format, Decl(index.d.ts, 5, 30))

  encoding: string;
>encoding : Symbol(DataOptions.encoding, Decl(index.d.ts, 6, 25))
}

export interface ServiceConfig extends BaseConfig {
>ServiceConfig : Symbol(ServiceConfig, Decl(index.d.ts, 8, 1))
>BaseConfig : Symbol(BaseConfig, Decl(index.d.ts, 0, 0))

  endpoint: string;
>endpoint : Symbol(ServiceConfig.endpoint, Decl(index.d.ts, 10, 51))

  options: DataOptions;
>options : Symbol(ServiceConfig.options, Decl(index.d.ts, 11, 19))
>DataOptions : Symbol(DataOptions, Decl(index.d.ts, 3, 1))
}

export type ConfigFactory = (endpoint: string) => ServiceConfig;
>ConfigFactory : Symbol(ConfigFactory, Decl(index.d.ts, 13, 1))
>endpoint : Symbol(endpoint, Decl(index.d.ts, 15, 29))
>ServiceConfig : Symbol(ServiceConfig, Decl(index.d.ts, 8, 1))

export declare function createServiceConfig(endpoint: string): ServiceConfig;
>createServiceConfig : Symbol(createServiceConfig, Decl(index.d.ts, 15, 64))
>endpoint : Symbol(endpoint, Decl(index.d.ts, 17, 44))
>ServiceConfig : Symbol(ServiceConfig, Decl(index.d.ts, 8, 1))

