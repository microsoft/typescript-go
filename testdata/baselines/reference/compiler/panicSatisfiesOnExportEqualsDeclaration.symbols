//// [tests/cases/compiler/panicSatisfiesOnExportEqualsDeclaration.ts] ////

=== types.d.ts ===
export interface SupportVersionTraceMap {
>SupportVersionTraceMap : Symbol(SupportVersionTraceMap, Decl(types.d.ts, 0, 0))

    zlib?: any;
>zlib : Symbol(SupportVersionTraceMap.zlib, Decl(types.d.ts, 0, 41))

    'node:zlib'?: any;
>'node:zlib' : Symbol(SupportVersionTraceMap["node:zlib"], Decl(types.d.ts, 1, 15))
}

=== panicSatisfiesOnExportEqualsDeclaration.js ===
const zlib = {};
>zlib : Symbol(zlib, Decl(panicSatisfiesOnExportEqualsDeclaration.js, 0, 5))

const READ = Symbol('read');
>READ : Symbol(READ, Decl(panicSatisfiesOnExportEqualsDeclaration.js, 1, 5))

/**
 * @satisfies {import('./types').SupportVersionTraceMap}
 */
module.exports = {
>module.exports : Symbol(export=, Decl(panicSatisfiesOnExportEqualsDeclaration.js, 1, 28))
>module : Symbol(module.exports)
>exports : Symbol(export=, Decl(panicSatisfiesOnExportEqualsDeclaration.js, 1, 28))

    zlib: zlib,
>zlib : Symbol(zlib, Decl(panicSatisfiesOnExportEqualsDeclaration.js, 6, 18))
>zlib : Symbol(zlib, Decl(panicSatisfiesOnExportEqualsDeclaration.js, 0, 5))

    'node:zlib': {
>'node:zlib' : Symbol('node:zlib', Decl(panicSatisfiesOnExportEqualsDeclaration.js, 7, 15))

        ...zlib,
>zlib : Symbol(zlib, Decl(panicSatisfiesOnExportEqualsDeclaration.js, 0, 5))

        [READ]: { supported: ['14.13.1', '12.20.0'] },
>[READ] : Symbol([READ], Decl(panicSatisfiesOnExportEqualsDeclaration.js, 9, 16))
>READ : Symbol(READ, Decl(panicSatisfiesOnExportEqualsDeclaration.js, 1, 5))
>supported : Symbol(supported, Decl(panicSatisfiesOnExportEqualsDeclaration.js, 10, 17))

    },
};

