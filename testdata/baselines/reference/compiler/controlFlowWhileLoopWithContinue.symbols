//// [tests/cases/compiler/controlFlowWhileLoopWithContinue.ts] ////

=== controlFlowWhileLoopWithContinue.ts ===
class A {
>A : Symbol(A, Decl(controlFlowWhileLoopWithContinue.ts, 0, 0))

  next: A | null = null;
>next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
>A : Symbol(A, Decl(controlFlowWhileLoopWithContinue.ts, 0, 0))

  constructor(readonly children: (A | null)[]) {}
>children : Symbol(children, Decl(controlFlowWhileLoopWithContinue.ts, 3, 14))
>A : Symbol(A, Decl(controlFlowWhileLoopWithContinue.ts, 0, 0))
}

function getNodes(): A[] {
>getNodes : Symbol(getNodes, Decl(controlFlowWhileLoopWithContinue.ts, 4, 1))
>A : Symbol(A, Decl(controlFlowWhileLoopWithContinue.ts, 0, 0))

  const out: A[] = [];
>out : Symbol(out, Decl(controlFlowWhileLoopWithContinue.ts, 7, 7))
>A : Symbol(A, Decl(controlFlowWhileLoopWithContinue.ts, 0, 0))

  let current: A | null = new A([]);
>current : Symbol(current, Decl(controlFlowWhileLoopWithContinue.ts, 9, 5))
>A : Symbol(A, Decl(controlFlowWhileLoopWithContinue.ts, 0, 0))
>A : Symbol(A, Decl(controlFlowWhileLoopWithContinue.ts, 0, 0))

  while (current !== null) {
>current : Symbol(current, Decl(controlFlowWhileLoopWithContinue.ts, 9, 5))

    let firstChild = null;
>firstChild : Symbol(firstChild, Decl(controlFlowWhileLoopWithContinue.ts, 12, 7))

    // If the following if block is commented out, then current TS also shows an error
    if (out.length) {
>out.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
>out : Symbol(out, Decl(controlFlowWhileLoopWithContinue.ts, 7, 7))
>length : Symbol(length, Decl(lib.es5.d.ts, --, --))

      current = current.next;
>current : Symbol(current, Decl(controlFlowWhileLoopWithContinue.ts, 9, 5))
>current.next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
>current : Symbol(current, Decl(controlFlowWhileLoopWithContinue.ts, 9, 5))
>next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))

      continue;
    }

    for (let i = 0; i < current.children.length; i++) {
>i : Symbol(i, Decl(controlFlowWhileLoopWithContinue.ts, 20, 12))
>i : Symbol(i, Decl(controlFlowWhileLoopWithContinue.ts, 20, 12))
>current.children.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
>current.children : Symbol(children, Decl(controlFlowWhileLoopWithContinue.ts, 3, 14))
>current : Symbol(current, Decl(controlFlowWhileLoopWithContinue.ts, 9, 5))
>children : Symbol(children, Decl(controlFlowWhileLoopWithContinue.ts, 3, 14))
>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
>i : Symbol(i, Decl(controlFlowWhileLoopWithContinue.ts, 20, 12))

      const child = current.children[i];
>child : Symbol(child, Decl(controlFlowWhileLoopWithContinue.ts, 21, 11))
>current.children : Symbol(children, Decl(controlFlowWhileLoopWithContinue.ts, 3, 14))
>current : Symbol(current, Decl(controlFlowWhileLoopWithContinue.ts, 9, 5))
>children : Symbol(children, Decl(controlFlowWhileLoopWithContinue.ts, 3, 14))
>i : Symbol(i, Decl(controlFlowWhileLoopWithContinue.ts, 20, 12))

      if (child) {
>child : Symbol(child, Decl(controlFlowWhileLoopWithContinue.ts, 21, 11))

        if (!firstChild) {
>firstChild : Symbol(firstChild, Decl(controlFlowWhileLoopWithContinue.ts, 12, 7))

          firstChild = child;
>firstChild : Symbol(firstChild, Decl(controlFlowWhileLoopWithContinue.ts, 12, 7))
>child : Symbol(child, Decl(controlFlowWhileLoopWithContinue.ts, 21, 11))

          firstChild.next = current.next;
>firstChild.next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
>firstChild : Symbol(firstChild, Decl(controlFlowWhileLoopWithContinue.ts, 12, 7))
>next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
>current.next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
>current : Symbol(current, Decl(controlFlowWhileLoopWithContinue.ts, 9, 5))
>next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
        }

        child.next = current.next;
>child.next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
>child : Symbol(child, Decl(controlFlowWhileLoopWithContinue.ts, 21, 11))
>next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
>current.next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
>current : Symbol(current, Decl(controlFlowWhileLoopWithContinue.ts, 9, 5))
>next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
      }
    }

    current = firstChild || current.next;
>current : Symbol(current, Decl(controlFlowWhileLoopWithContinue.ts, 9, 5))
>firstChild : Symbol(firstChild, Decl(controlFlowWhileLoopWithContinue.ts, 12, 7))
>current.next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
>current : Symbol(current, Decl(controlFlowWhileLoopWithContinue.ts, 9, 5))
>next : Symbol(next, Decl(controlFlowWhileLoopWithContinue.ts, 0, 9))
  }

  return out;
>out : Symbol(out, Decl(controlFlowWhileLoopWithContinue.ts, 7, 7))
}
