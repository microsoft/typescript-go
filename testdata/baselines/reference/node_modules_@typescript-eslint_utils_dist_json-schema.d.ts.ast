SourceFile
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4TypeName'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4Type'
    UnionType
      BooleanKeyword
      NumberKeyword
      StringKeyword
      LiteralType
        NullKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4TypeExtended'
    UnionType
      TypeReference
        Identifier: ' JSONSchema4Array'
      TypeReference
        Identifier: ' JSONSchema4Object'
      TypeReference
        Identifier: ' JSONSchema4Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4Object'
    IndexSignature
      Parameter
        Identifier: 'key'
        StringKeyword
      TypeReference
        Identifier: ' JSONSchema4TypeExtended'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4Array'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Array'
        TypeReference
          Identifier: 'JSONSchema4TypeExtended'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4Version'
    StringKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4'
    UnionType
      TypeReference
        Identifier: ' JSONSchema4AllOfSchema'
      TypeReference
        Identifier: ' JSONSchema4AnyOfSchema'
      TypeReference
        Identifier: ' JSONSchema4AnySchema'
      TypeReference
        Identifier: ' JSONSchema4ArraySchema'
      TypeReference
        Identifier: ' JSONSchema4BooleanSchema'
      TypeReference
        Identifier: ' JSONSchema4MultiSchema'
      TypeReference
        Identifier: ' JSONSchema4NullSchema'
      TypeReference
        Identifier: ' JSONSchema4NumberSchema'
      TypeReference
        Identifier: ' JSONSchema4ObjectSchema'
      TypeReference
        Identifier: ' JSONSchema4OneOfSchema'
      TypeReference
        Identifier: ' JSONSchema4RefSchema'
      TypeReference
        Identifier: ' JSONSchema4StringSchema'
  InterfaceDeclaration
    Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    /**
     * Reusable definitions that can be referenced via `$ref`
     */
    $defs'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Record'
          StringKeyword
          TypeReference
            Identifier: ' JSONSchema4'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Path to a schema defined in `definitions`/`$defs` that will form the base
     * for this schema.
     *
     * If you are defining an "array" schema (`schema: [ ... ]`) for your rule
     * then you should prefix this with `items/0` so that the validator can find
     * your definitions.
     *
     * eg: `'#/items/0/definitions/myDef'`
     *
     * Otherwise if you are defining an "object" schema (`schema: { ... }`) for
     * your rule you can directly reference your definitions
     *
     * eg: `'#/definitions/myDef'`
     */
    $ref'
      QuestionToken
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    $schema'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' JSONSchema4Version'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * (AND) Must be valid against all of the sub-schemas
     */
    allOf'
      QuestionToken
      UnionType
        ArrayType
          TypeReference
            Identifier: ' JSONSchema4'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * (OR) Must be valid against any of the sub-schemas
     */
    anyOf'
      QuestionToken
      UnionType
        ArrayType
          TypeReference
            Identifier: ' JSONSchema4'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The default value for the item if not present
     */
    default'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' JSONSchema4TypeExtended'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Reusable definitions that can be referenced via `$ref`
     */
    definitions'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Record'
          StringKeyword
          TypeReference
            Identifier: ' JSONSchema4'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * This attribute is a string that provides a full description of the of
     * purpose the instance property.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.22
     */
    description'
      QuestionToken
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The value of this property MUST be another schema which will provide
     * a base schema which the current schema will inherit from.  The
     * inheritance rules are such that any instance that is valid according
     * to the current schema MUST be valid according to the referenced
     * schema.  This MAY also be an array, in which case, the instance MUST
     * be valid for all the schemas in the array.  A schema that extends
     * another schema MAY define additional attributes, constrain existing
     * attributes, or add other constraints.
     *
     * Conceptually, the behavior of extends can be seen as validating an
     * instance against all constraints in the extending schema as well as
     * the extended schema(s).
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.26
     */
    extends'
      QuestionToken
      UnionType
        ArrayType
          StringKeyword
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    id'
      QuestionToken
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * (NOT) Must not be valid against the given schema
     */
    not'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' JSONSchema4'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * (XOR) Must be valid against exactly one of the sub-schemas
     */
    oneOf'
      QuestionToken
      UnionType
        ArrayType
          TypeReference
            Identifier: ' JSONSchema4'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * This attribute indicates if the instance must have a value, and not
     * be undefined. This is false by default, making the instance
     * optional.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.7
     */
    required'
      QuestionToken
      UnionType
        ArrayType
          StringKeyword
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * This attribute is a string that provides a short description of the
     * instance property.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.21
     */
    title'
      QuestionToken
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * A single type, or a union of simple types
     */
    type'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' JSONSchema4TypeName'
        ArrayType
          TypeReference
            Identifier: ' JSONSchema4TypeName'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4RefSchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    $ref'
      StringKeyword
    PropertySignature
      Identifier: '
    type'
      QuestionToken
      UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4AllOfSchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    allOf'
      ArrayType
        TypeReference
          Identifier: ' JSONSchema4'
    PropertySignature
      Identifier: '
    type'
      QuestionToken
      UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4AnyOfSchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    anyOf'
      ArrayType
        TypeReference
          Identifier: ' JSONSchema4'
    PropertySignature
      Identifier: '
    type'
      QuestionToken
      UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4OneOfSchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    oneOf'
      ArrayType
        TypeReference
          Identifier: ' JSONSchema4'
    PropertySignature
      Identifier: '
    type'
      QuestionToken
      UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4MultiSchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Omit'
        TypeReference
          Identifier: 'JSONSchema4ObjectSchema'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      ExpressionWithTypeArguments
        Identifier: ' Omit'
        TypeReference
          Identifier: 'JSONSchema4ArraySchema'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      ExpressionWithTypeArguments
        Identifier: ' Omit'
        TypeReference
          Identifier: 'JSONSchema4StringSchema'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      ExpressionWithTypeArguments
        Identifier: ' Omit'
        TypeReference
          Identifier: 'JSONSchema4NumberSchema'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      ExpressionWithTypeArguments
        Identifier: ' Omit'
        TypeReference
          Identifier: 'JSONSchema4BooleanSchema'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      ExpressionWithTypeArguments
        Identifier: ' Omit'
        TypeReference
          Identifier: 'JSONSchema4NullSchema'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      ExpressionWithTypeArguments
        Identifier: ' Omit'
        TypeReference
          Identifier: 'JSONSchema4AnySchema'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
    PropertySignature
      Identifier: '
    /**
     * This provides an enumeration of all possible values that are valid
     * for the instance property. This MUST be an array, and each item in
     * the array represents a possible value for the instance value. If
     * this attribute is defined, the instance value MUST be one of the
     * values in the array in order for the schema to be valid.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.19
     */
    enum'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' JSONSchema4Type'
    PropertySignature
      Identifier: '
    type'
      ArrayType
        TypeReference
          Identifier: ' JSONSchema4TypeName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4ObjectSchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    /**
     * This attribute defines a schema for all properties that are not
     * explicitly defined in an object type definition. If specified, the
     * value MUST be a schema or a boolean. If false is provided, no
     * additional properties are allowed beyond the properties defined in
     * the schema. The default value is an empty schema which allows any
     * value for additional properties.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.4
     */
    additionalProperties'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' JSONSchema4'
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The `dependencies` keyword conditionally applies a sub-schema when a given
     * property is present. This schema is applied in the same way `allOf` applies
     * schemas. Nothing is merged or extended. Both schemas apply independently.
     */
    dependencies'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Record'
          StringKeyword
          UnionType
            TypeReference
              Identifier: ' JSONSchema4'
            ArrayType
              StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The maximum number of properties allowed for record-style schemas
     */
    maxProperties'
      QuestionToken
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The minimum number of properties required for record-style schemas
     */
    minProperties'
      QuestionToken
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * This attribute is an object that defines the schema for a set of
     * property names of an object instance. The name of each property of
     * this attribute's object is a regular expression pattern in the ECMA
     * 262/Perl 5 format, while the value is a schema. If the pattern
     * matches the name of a property on the instance object, the value of
     * the instance's property MUST be valid against the pattern name's
     * schema value.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.3
     */
    patternProperties'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Record'
          StringKeyword
          TypeReference
            Identifier: ' JSONSchema4'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * This attribute is an object with property definitions that define the
     * valid values of instance object property values. When the instance
     * value is an object, the property values of the instance object MUST
     * conform to the property definitions in this object. In this object,
     * each property definition's value MUST be a schema, and the property's
     * name MUST be the name of the instance property that it defines.  The
     * instance property value MUST be valid according to the schema from
     * the property definition. Properties are considered unordered, the
     * order of the instance properties MAY be in any order.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.2
     */
    properties'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Record'
          StringKeyword
          TypeReference
            Identifier: ' JSONSchema4'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4ArraySchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    /**
     * May only be defined when "items" is defined, and is a tuple of JSONSchemas.
     *
     * This provides a definition for additional items in an array instance
     * when tuple definitions of the items is provided.  This can be false
     * to indicate additional items in the array are not allowed, or it can
     * be a schema that defines the schema of the additional items.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.6
     */
    additionalItems'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' JSONSchema4'
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * This attribute defines the allowed items in an instance array, and
     * MUST be a schema or an array of schemas.  The default value is an
     * empty schema which allows any value for items in the instance array.
     *
     * When this attribute value is a schema and the instance value is an
     * array, then all the items in the array MUST be valid according to the
     * schema.
     *
     * When this attribute value is an array of schemas and the instance
     * value is an array, each position in the instance array MUST conform
     * to the schema in the corresponding position for this array.  This
     * called tuple typing.  When tuple typing is used, additional items are
     * allowed, disallowed, or constrained by the "additionalItems"
     * (Section 5.6) attribute using the same rules as
     * "additionalProperties" (Section 5.4) for objects.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.5
     */
    items'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' JSONSchema4'
        ArrayType
          TypeReference
            Identifier: ' JSONSchema4'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Defines the maximum length of an array
     */
    maxItems'
      QuestionToken
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Defines the minimum length of an array
     */
    minItems'
      QuestionToken
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      LiteralType
        StringLiteral
    PropertySignature
      Identifier: '
    /**
     * Enforces that all items in the array are unique
     */
    uniqueItems'
      QuestionToken
      UnionType
        BooleanKeyword
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4StringSchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    enum'
      QuestionToken
      UnionType
        ArrayType
          StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The `format` keyword allows for basic semantic identification of certain
     * kinds of string values that are commonly used.
     *
     * For example, because JSON doesn’t have a “DateTime” type, dates need to be
     * encoded as strings. `format` allows the schema author to indicate that the
     * string value should be interpreted as a date.
     *
     * ajv v6 provides a few built-in formats - all other strings will cause AJV
     * to throw during schema compilation
     */
    format'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The maximum allowed length for the string
     */
    maxLength'
      QuestionToken
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The minimum allowed length for the string
     */
    minLength'
      QuestionToken
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The `pattern` keyword is used to restrict a string to a particular regular
     * expression. The regular expression syntax is the one defined in JavaScript
     * (ECMA 262 specifically) with Unicode support.
     *
     * When defining the regular expressions, it’s important to note that the
     * string is considered valid if the expression matches anywhere within the
     * string. For example, the regular expression "p" will match any string with
     * a p in it, such as "apple" not just a string that is simply "p". Therefore,
     * it is usually less confusing, as a matter of course, to surround the
     * regular expression in ^...$, for example, "^p$", unless there is a good
     * reason not to do so.
     */
    pattern'
      QuestionToken
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4NumberSchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    /**
     * This provides an enumeration of all possible values that are valid
     * for the instance property. This MUST be an array, and each item in
     * the array represents a possible value for the instance value. If
     * this attribute is defined, the instance value MUST be one of the
     * values in the array in order for the schema to be valid.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.19
     */
    enum'
      QuestionToken
      UnionType
        ArrayType
          NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The exclusive minimum allowed value for the number
     * - `true` = `x < maximum`
     * - `false` = `x <= maximum`
     *
     * Default is `false`
     */
    exclusiveMaximum'
      QuestionToken
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Indicates whether or not `minimum` is the inclusive or exclusive minimum
     * - `true` = `x > minimum`
     * - `false` = `x ≥ minimum`
     *
     * Default is `false`
     */
    exclusiveMinimum'
      QuestionToken
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The maximum allowed value for the number
     */
    maximum'
      QuestionToken
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The minimum allowed value for the number
     */
    minimum'
      QuestionToken
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Numbers can be restricted to a multiple of a given number, using the
     * `multipleOf` keyword. It may be set to any positive number.
     */
    multipleOf'
      QuestionToken
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4BooleanSchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    /**
     * This provides an enumeration of all possible values that are valid
     * for the instance property. This MUST be an array, and each item in
     * the array represents a possible value for the instance value. If
     * this attribute is defined, the instance value MUST be one of the
     * values in the array in order for the schema to be valid.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.19
     */
    enum'
      QuestionToken
      UnionType
        ArrayType
          BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4NullSchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    /**
     * This provides an enumeration of all possible values that are valid
     * for the instance property. This MUST be an array, and each item in
     * the array represents a possible value for the instance value. If
     * this attribute is defined, the instance value MUST be one of the
     * values in the array in order for the schema to be valid.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.19
     */
    enum'
      QuestionToken
      UnionType
        ArrayType
          LiteralType
            NullKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSONSchema4AnySchema'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSONSchema4Base'
    PropertySignature
      Identifier: '
    type'
      LiteralType
        StringLiteral
  ExportDeclaration
    NamedExports
