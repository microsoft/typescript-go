SourceFile
  TypeAliasDeclaration
    Identifier: ' ClassMemberDecoratorContext'
    UnionType
      TypeReference
        Identifier: ' ClassMethodDecoratorContext'
      TypeReference
        Identifier: ' ClassGetterDecoratorContext'
      TypeReference
        Identifier: ' ClassSetterDecoratorContext'
      TypeReference
        Identifier: ' ClassFieldDecoratorContext'
      TypeReference
        Identifier: ' ClassAccessorDecoratorContext'
  TypeAliasDeclaration
    Identifier: ' DecoratorContext'
    UnionType
      TypeReference
        Identifier: ' ClassDecoratorContext'
      TypeReference
        Identifier: ' ClassMemberDecoratorContext'
  TypeAliasDeclaration
    Identifier: ' DecoratorMetadataObject'
    IntersectionType
      TypeReference
        Identifier: ' Record'
        TypeReference
          Identifier: 'PropertyKey'
        UnknownKeyword
      ObjectKeyword
  TypeAliasDeclaration
    Identifier: ' DecoratorMetadata'
    ConditionalType
      TypeQuery
        Identifier: ' globalThis'
      TypeLiteral
        PropertySignature
          Identifier: ' Symbol'
          TypeLiteral
            PropertySignature
              ReadonlyKeyword
              Identifier: ' metadata'
              SymbolKeyword
      TypeReference
        Identifier: ' DecoratorMetadataObject'
      UnionType
        TypeReference
          Identifier: ' DecoratorMetadataObject'
        UndefinedKeyword
  InterfaceDeclaration
    Identifier: ' ClassDecoratorContext'
    TypeParameter
      Identifier: '
    Class'
      ConstructorType
        AbstractKeyword
        Parameter
          DotDotDotToken
          Identifier: 'args'
          AnyKeyword
        AnyKeyword
      ConstructorType
        AbstractKeyword
        Parameter
          DotDotDotToken
          Identifier: 'args'
          AnyKeyword
        AnyKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      LiteralType
        StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds a callback to be invoked after the class definition has been finalized.
     *
     * @example
     * ```ts
     * function customElement(name: string): ClassDecoratorFunction {
     *   return (target, context) => {
     *     context.addInitializer(function () {
     *       customElements.define(name, this);
     *     });
     *   }
     * }
     *
     * @customElement("my-element")
     * class MyElement {}
     * ```
     */
    addInitializer'
      Parameter
        Identifier: 'initializer'
        FunctionType
          Parameter
            Identifier: 'this'
            TypeReference
              Identifier: ' Class'
          VoidKeyword
      VoidKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' metadata'
      TypeReference
        Identifier: ' DecoratorMetadata'
  InterfaceDeclaration
    Identifier: ' ClassMethodDecoratorContext'
    TypeParameter
      Identifier: '
    This'
      UnknownKeyword
    TypeParameter
      Identifier: '
    Value'
      FunctionType
        Parameter
          Identifier: 'this'
          TypeReference
            Identifier: ' This'
        Parameter
          DotDotDotToken
          Identifier: 'args'
          AnyKeyword
        AnyKeyword
      FunctionType
        Parameter
          Identifier: 'this'
          TypeReference
            Identifier: ' This'
        Parameter
          DotDotDotToken
          Identifier: 'args'
          AnyKeyword
        AnyKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      LiteralType
        StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      UnionType
        StringKeyword
        SymbolKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' static'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' private'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' access'
      TypeLiteral
        MethodSignature
          Identifier: '
        /**
         * Determines whether an object has a property with the same name as the decorated element.
         */
        has'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          BooleanKeyword
        MethodSignature
          Identifier: '
        /**
         * Gets the current value of the method from the provided object.
         *
         * @example
         * let fn = context.access.get(instance);
         */
        get'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          TypeReference
            Identifier: ' Value'
    MethodSignature
      Identifier: '

    /**
     * Adds a callback to be invoked either before static initializers are run (when
     * decorating a `static` element), or before instance initializers are run (when
     * decorating a non-`static` element).
     *
     * @example
     * ```ts
     * const bound: ClassMethodDecoratorFunction = (value, context) {
     *   if (context.private) throw new TypeError("Not supported on private methods.");
     *   context.addInitializer(function () {
     *     this[context.name] = this[context.name].bind(this);
     *   });
     * }
     *
     * class C {
     *   message = "Hello";
     *
     *   @bound
     *   m() {
     *     console.log(this.message);
     *   }
     * }
     * ```
     */
    addInitializer'
      Parameter
        Identifier: 'initializer'
        FunctionType
          Parameter
            Identifier: 'this'
            TypeReference
              Identifier: ' This'
          VoidKeyword
      VoidKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' metadata'
      TypeReference
        Identifier: ' DecoratorMetadata'
  InterfaceDeclaration
    Identifier: ' ClassGetterDecoratorContext'
    TypeParameter
      Identifier: '
    This'
      UnknownKeyword
    TypeParameter
      Identifier: '
    Value'
      UnknownKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      LiteralType
        StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      UnionType
        StringKeyword
        SymbolKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' static'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' private'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' access'
      TypeLiteral
        MethodSignature
          Identifier: '
        /**
         * Determines whether an object has a property with the same name as the decorated element.
         */
        has'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          BooleanKeyword
        MethodSignature
          Identifier: '
        /**
         * Invokes the getter on the provided object.
         *
         * @example
         * let value = context.access.get(instance);
         */
        get'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          TypeReference
            Identifier: ' Value'
    MethodSignature
      Identifier: '

    /**
     * Adds a callback to be invoked either before static initializers are run (when
     * decorating a `static` element), or before instance initializers are run (when
     * decorating a non-`static` element).
     */
    addInitializer'
      Parameter
        Identifier: 'initializer'
        FunctionType
          Parameter
            Identifier: 'this'
            TypeReference
              Identifier: ' This'
          VoidKeyword
      VoidKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' metadata'
      TypeReference
        Identifier: ' DecoratorMetadata'
  InterfaceDeclaration
    Identifier: ' ClassSetterDecoratorContext'
    TypeParameter
      Identifier: '
    This'
      UnknownKeyword
    TypeParameter
      Identifier: '
    Value'
      UnknownKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      LiteralType
        StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      UnionType
        StringKeyword
        SymbolKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' static'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' private'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' access'
      TypeLiteral
        MethodSignature
          Identifier: '
        /**
         * Determines whether an object has a property with the same name as the decorated element.
         */
        has'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          BooleanKeyword
        MethodSignature
          Identifier: '
        /**
         * Invokes the setter on the provided object.
         *
         * @example
         * context.access.set(instance, value);
         */
        set'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          Parameter
            Identifier: ' value'
            TypeReference
              Identifier: ' Value'
          VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds a callback to be invoked either before static initializers are run (when
     * decorating a `static` element), or before instance initializers are run (when
     * decorating a non-`static` element).
     */
    addInitializer'
      Parameter
        Identifier: 'initializer'
        FunctionType
          Parameter
            Identifier: 'this'
            TypeReference
              Identifier: ' This'
          VoidKeyword
      VoidKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' metadata'
      TypeReference
        Identifier: ' DecoratorMetadata'
  InterfaceDeclaration
    Identifier: ' ClassAccessorDecoratorContext'
    TypeParameter
      Identifier: '
    This'
      UnknownKeyword
    TypeParameter
      Identifier: '
    Value'
      UnknownKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      LiteralType
        StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      UnionType
        StringKeyword
        SymbolKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' static'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' private'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' access'
      TypeLiteral
        MethodSignature
          Identifier: '
        /**
         * Determines whether an object has a property with the same name as the decorated element.
         */
        has'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          BooleanKeyword
        MethodSignature
          Identifier: '

        /**
         * Invokes the getter on the provided object.
         *
         * @example
         * let value = context.access.get(instance);
         */
        get'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          TypeReference
            Identifier: ' Value'
        MethodSignature
          Identifier: '

        /**
         * Invokes the setter on the provided object.
         *
         * @example
         * context.access.set(instance, value);
         */
        set'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          Parameter
            Identifier: ' value'
            TypeReference
              Identifier: ' Value'
          VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds a callback to be invoked either before static initializers are run (when
     * decorating a `static` element), or before instance initializers are run (when
     * decorating a non-`static` element).
     */
    addInitializer'
      Parameter
        Identifier: 'initializer'
        FunctionType
          Parameter
            Identifier: 'this'
            TypeReference
              Identifier: ' This'
          VoidKeyword
      VoidKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' metadata'
      TypeReference
        Identifier: ' DecoratorMetadata'
  InterfaceDeclaration
    Identifier: ' ClassAccessorDecoratorTarget'
    TypeParameter
      Identifier: 'This'
    TypeParameter
      Identifier: ' Value'
    MethodSignature
      Identifier: '
    /**
     * Invokes the getter that was defined prior to decorator application.
     *
     * @example
     * let value = target.get.call(instance);
     */
    get'
      Parameter
        Identifier: 'this'
        TypeReference
          Identifier: ' This'
      TypeReference
        Identifier: ' Value'
    MethodSignature
      Identifier: '

    /**
     * Invokes the setter that was defined prior to decorator application.
     *
     * @example
     * target.set.call(instance, value);
     */
    set'
      Parameter
        Identifier: 'this'
        TypeReference
          Identifier: ' This'
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' Value'
      VoidKeyword
  InterfaceDeclaration
    Identifier: ' ClassAccessorDecoratorResult'
    TypeParameter
      Identifier: 'This'
    TypeParameter
      Identifier: ' Value'
    MethodSignature
      Identifier: '
    /**
     * An optional replacement getter function. If not provided, the existing getter function is used instead.
     */
    get'
      QuestionToken
      Parameter
        Identifier: 'this'
        TypeReference
          Identifier: ' This'
      TypeReference
        Identifier: ' Value'
    MethodSignature
      Identifier: '

    /**
     * An optional replacement setter function. If not provided, the existing setter function is used instead.
     */
    set'
      QuestionToken
      Parameter
        Identifier: 'this'
        TypeReference
          Identifier: ' This'
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' Value'
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * An optional initializer mutator that is invoked when the underlying field initializer is evaluated.
     * @param value The incoming initializer value.
     * @returns The replacement initializer value.
     */
    init'
      QuestionToken
      Parameter
        Identifier: 'this'
        TypeReference
          Identifier: ' This'
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' Value'
      TypeReference
        Identifier: ' Value'
  InterfaceDeclaration
    Identifier: ' ClassFieldDecoratorContext'
    TypeParameter
      Identifier: '
    This'
      UnknownKeyword
    TypeParameter
      Identifier: '
    Value'
      UnknownKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      LiteralType
        StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      UnionType
        StringKeyword
        SymbolKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' static'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' private'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' access'
      TypeLiteral
        MethodSignature
          Identifier: '
        /**
         * Determines whether an object has a property with the same name as the decorated element.
         */
        has'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          BooleanKeyword
        MethodSignature
          Identifier: '

        /**
         * Gets the value of the field on the provided object.
         */
        get'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          TypeReference
            Identifier: ' Value'
        MethodSignature
          Identifier: '

        /**
         * Sets the value of the field on the provided object.
         */
        set'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' This'
          Parameter
            Identifier: ' value'
            TypeReference
              Identifier: ' Value'
          VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds a callback to be invoked either before static initializers are run (when
     * decorating a `static` element), or before instance initializers are run (when
     * decorating a non-`static` element).
     */
    addInitializer'
      Parameter
        Identifier: 'initializer'
        FunctionType
          Parameter
            Identifier: 'this'
            TypeReference
              Identifier: ' This'
          VoidKeyword
      VoidKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' metadata'
      TypeReference
        Identifier: ' DecoratorMetadata'
