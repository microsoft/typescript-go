SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: '
    ApplicableRefactorInfo'
        ImportSpecifier
          Identifier: '
    BinaryExpression'
        ImportSpecifier
          Identifier: '
    CallExpression'
        ImportSpecifier
          Identifier: '
    ConditionalExpression'
        ImportSpecifier
          Identifier: '
    createTextSpanFromBounds'
        ImportSpecifier
          Identifier: '
    Debug'
        ImportSpecifier
          Identifier: '
    Diagnostics'
        ImportSpecifier
          Identifier: '
    ElementAccessExpression'
        ImportSpecifier
          Identifier: '
    emptyArray'
        ImportSpecifier
          Identifier: '
    Expression'
        ImportSpecifier
          Identifier: '
    ExpressionStatement'
        ImportSpecifier
          Identifier: '
    factory'
        ImportSpecifier
          Identifier: '
    findTokenOnLeftOfPosition'
        ImportSpecifier
          Identifier: '
    getLocaleSpecificMessage'
        ImportSpecifier
          Identifier: '
    getRefactorContextSpan'
        ImportSpecifier
          Identifier: '
    getSingleVariableOfVariableStatement'
        ImportSpecifier
          Identifier: '
    getTokenAtPosition'
        ImportSpecifier
          Identifier: '
    Identifier'
        ImportSpecifier
          Identifier: '
    isBinaryExpression'
        ImportSpecifier
          Identifier: '
    isCallExpression'
        ImportSpecifier
          Identifier: '
    isConditionalExpression'
        ImportSpecifier
          Identifier: '
    isElementAccessExpression'
        ImportSpecifier
          Identifier: '
    isExpressionStatement'
        ImportSpecifier
          Identifier: '
    isIdentifier'
        ImportSpecifier
          Identifier: '
    isOptionalChain'
        ImportSpecifier
          Identifier: '
    isPropertyAccessExpression'
        ImportSpecifier
          Identifier: '
    isReturnStatement'
        ImportSpecifier
          Identifier: '
    isStringOrNumericLiteralLike'
        ImportSpecifier
          Identifier: '
    isVariableStatement'
        ImportSpecifier
          Identifier: '
    Node'
        ImportSpecifier
          Identifier: '
    PropertyAccessExpression'
        ImportSpecifier
          Identifier: '
    RefactorContext'
        ImportSpecifier
          Identifier: '
    RefactorEditInfo'
        ImportSpecifier
          Identifier: '
    ReturnStatement'
        ImportSpecifier
          Identifier: '
    skipParentheses'
        ImportSpecifier
          Identifier: '
    SourceFile'
        ImportSpecifier
          Identifier: '
    SyntaxKind'
        ImportSpecifier
          Identifier: '
    textChanges'
        ImportSpecifier
          Identifier: '
    TextSpan'
        ImportSpecifier
          Identifier: '
    TypeChecker'
        ImportSpecifier
          Identifier: '
    VariableStatement'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: '
    isRefactorErrorInfo'
        ImportSpecifier
          Identifier: '
    RefactorErrorInfo'
        ImportSpecifier
          Identifier: '
    registerRefactor'
    StringLiteral
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' refactorName'
        StringLiteral
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' convertToOptionalChainExpressionMessage'
        CallExpression
          Identifier: ' getLocaleSpecificMessage'
          PropertyAccessExpression
            Identifier: 'Diagnostics'
            Identifier: 'Convert_to_optional_chain_expression'
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' toOptionalChainAction'
        ObjectLiteralExpression
          PropertyAssignment
            Identifier: '
    name'
            Identifier: ' refactorName'
          PropertyAssignment
            Identifier: '
    description'
            Identifier: ' convertToOptionalChainExpressionMessage'
          PropertyAssignment
            Identifier: '
    kind'
            StringLiteral
  ExpressionStatement
    CallExpression
      Identifier: '
registerRefactor'
      Identifier: 'refactorName'
      ObjectLiteralExpression
        PropertyAssignment
          Identifier: '
    kinds'
          ArrayLiteralExpression
            PropertyAccessExpression
              Identifier: 'toOptionalChainAction'
              Identifier: 'kind'
        PropertyAssignment
          Identifier: '
    getEditsForAction'
          Identifier: ' getRefactorEditsToConvertToOptionalChain'
        PropertyAssignment
          Identifier: '
    getAvailableActions'
          Identifier: ' getRefactorActionsToConvertToOptionalChain'
  FunctionDeclaration
    Identifier: ' getRefactorActionsToConvertToOptionalChain'
    Parameter
      Identifier: 'context'
      TypeReference
        Identifier: ' RefactorContext'
    TypeOperator
      ArrayType
        TypeReference
          Identifier: ' ApplicableRefactorInfo'
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' info'
            CallExpression
              Identifier: ' getInfo'
              Identifier: 'context'
              BinaryExpression
                PropertyAccessExpression
                  Identifier: ' context'
                  Identifier: 'triggerReason'
                EqualsEqualsEqualsToken
                StringLiteral
      IfStatement
        PrefixUnaryExpression
          Identifier: 'info'
        ReturnStatement
          Identifier: ' emptyArray'
      IfStatement
        PrefixUnaryExpression
          CallExpression
            Identifier: 'isRefactorErrorInfo'
            Identifier: 'info'
        Block
          ReturnStatement
            ArrayLiteralExpression
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: '
            name'
                  Identifier: ' refactorName'
                PropertyAssignment
                  Identifier: '
            description'
                  Identifier: ' convertToOptionalChainExpressionMessage'
                PropertyAssignment
                  Identifier: '
            actions'
                  ArrayLiteralExpression
                    Identifier: 'toOptionalChainAction'
      IfStatement
        PropertyAccessExpression
          PropertyAccessExpression
            Identifier: 'context'
            Identifier: 'preferences'
          Identifier: 'provideRefactorNotApplicableReason'
        Block
          ReturnStatement
            ArrayLiteralExpression
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: '
            name'
                  Identifier: ' refactorName'
                PropertyAssignment
                  Identifier: '
            description'
                  Identifier: ' convertToOptionalChainExpressionMessage'
                PropertyAssignment
                  Identifier: '
            actions'
                  ArrayLiteralExpression
                    ObjectLiteralExpression
                      SpreadAssignment
                        Identifier: 'toOptionalChainAction'
                      PropertyAssignment
                        Identifier: ' notApplicableReason'
                        PropertyAccessExpression
                          Identifier: ' info'
                          Identifier: 'error'
      ReturnStatement
        Identifier: ' emptyArray'
  FunctionDeclaration
    Identifier: ' getRefactorEditsToConvertToOptionalChain'
    Parameter
      Identifier: 'context'
      TypeReference
        Identifier: ' RefactorContext'
    Parameter
      Identifier: ' actionName'
      StringKeyword
    UnionType
      TypeReference
        Identifier: ' RefactorEditInfo'
      UndefinedKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' info'
            CallExpression
              Identifier: ' getInfo'
              Identifier: 'context'
      ExpressionStatement
        CallExpression
          PropertyAccessExpression
            Identifier: '
    Debug'
            Identifier: 'assert'
          BinaryExpression
            Identifier: 'info'
            AmpersandAmpersandToken
            PrefixUnaryExpression
              CallExpression
                Identifier: 'isRefactorErrorInfo'
                Identifier: 'info'
          StringLiteral
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' edits'
            CallExpression
              PropertyAccessExpression
                PropertyAccessExpression
                  Identifier: ' textChanges'
                  Identifier: 'ChangeTracker'
                Identifier: 'with'
              Identifier: 'context'
              ArrowFunction
                Parameter
                  Identifier: ' t'
                EqualsGreaterThanToken
                CallExpression
                  Identifier: ' doChange'
                  PropertyAccessExpression
                    Identifier: 'context'
                    Identifier: 'file'
                  CallExpression
                    PropertyAccessExpression
                      PropertyAccessExpression
                        Identifier: ' context'
                        Identifier: 'program'
                      Identifier: 'getTypeChecker'
                  Identifier: ' t'
                  Identifier: ' info'
                  Identifier: ' actionName'
      ReturnStatement
        ObjectLiteralExpression
          ShorthandPropertyAssignment
            Identifier: ' edits'
          PropertyAssignment
            Identifier: ' renameFilename'
            Identifier: ' undefined'
          PropertyAssignment
            Identifier: ' renameLocation'
            Identifier: ' undefined'
  TypeAliasDeclaration
    Identifier: ' Occurrence'
    UnionType
      TypeReference
        Identifier: ' PropertyAccessExpression'
      TypeReference
        Identifier: ' ElementAccessExpression'
      TypeReference
        Identifier: ' Identifier'
  InterfaceDeclaration
    Identifier: ' OptionalChainInfo'
    PropertySignature
      Identifier: '
    finalExpression'
      UnionType
        TypeReference
          Identifier: ' PropertyAccessExpression'
        TypeReference
          Identifier: ' ElementAccessExpression'
        TypeReference
          Identifier: ' CallExpression'
    PropertySignature
      Identifier: '
    occurrences'
      ArrayType
        TypeReference
          Identifier: ' Occurrence'
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' ValidExpression'
  TypeAliasDeclaration
    Identifier: ' ValidExpressionOrStatement'
    UnionType
      TypeReference
        Identifier: ' ValidExpression'
      TypeReference
        Identifier: ' ValidStatement'
  TypeAliasDeclaration
    Identifier: ' ValidExpression'
    UnionType
      TypeReference
        Identifier: ' BinaryExpression'
      TypeReference
        Identifier: ' ConditionalExpression'
  TypeAliasDeclaration
    Identifier: ' ValidStatement'
    UnionType
      TypeReference
        Identifier: ' ExpressionStatement'
      TypeReference
        Identifier: ' ReturnStatement'
      TypeReference
        Identifier: ' VariableStatement'
  FunctionDeclaration
    Identifier: ' isValidExpression'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Node'
    TypePredicate
      Identifier: ' node'
      TypeReference
        Identifier: ' ValidExpression'
    Block
      ReturnStatement
        BinaryExpression
          CallExpression
            Identifier: ' isBinaryExpression'
            Identifier: 'node'
          BarBarToken
          CallExpression
            Identifier: ' isConditionalExpression'
            Identifier: 'node'
  FunctionDeclaration
    Identifier: ' isValidStatement'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Node'
    TypePredicate
      Identifier: ' node'
      TypeReference
        Identifier: ' ValidStatement'
    Block
      ReturnStatement
        BinaryExpression
          BinaryExpression
            CallExpression
              Identifier: ' isExpressionStatement'
              Identifier: 'node'
            BarBarToken
            CallExpression
              Identifier: ' isReturnStatement'
              Identifier: 'node'
          BarBarToken
          CallExpression
            Identifier: ' isVariableStatement'
            Identifier: 'node'
  FunctionDeclaration
    Identifier: ' isValidExpressionOrStatement'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Node'
    TypePredicate
      Identifier: ' node'
      TypeReference
        Identifier: ' ValidExpressionOrStatement'
    Block
      ReturnStatement
        BinaryExpression
          CallExpression
            Identifier: ' isValidExpression'
            Identifier: 'node'
          BarBarToken
          CallExpression
            Identifier: ' isValidStatement'
            Identifier: 'node'
  FunctionDeclaration
    Identifier: ' getInfo'
    Parameter
      Identifier: 'context'
      TypeReference
        Identifier: ' RefactorContext'
    Parameter
      Identifier: ' considerEmptySpans'
      TrueKeyword
    UnionType
      TypeReference
        Identifier: ' OptionalChainInfo'
      TypeReference
        Identifier: ' RefactorErrorInfo'
      UndefinedKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            ObjectBindingPattern
              BindingElement
                Identifier: ' file'
              BindingElement
                Identifier: ' program'
            Identifier: ' context'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' span'
            CallExpression
              Identifier: ' getRefactorContextSpan'
              Identifier: 'context'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' forEmptySpan'
            BinaryExpression
              PropertyAccessExpression
                Identifier: ' span'
                Identifier: 'length'
              EqualsEqualsEqualsToken
              NumericLiteral
      IfStatement
        BinaryExpression
          Identifier: 'forEmptySpan'
          AmpersandAmpersandToken
          PrefixUnaryExpression
            Identifier: 'considerEmptySpans'
        ReturnStatement
          Identifier: ' undefined'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' startToken'
            CallExpression
              Identifier: ' getTokenAtPosition'
              Identifier: 'file'
              PropertyAccessExpression
                Identifier: ' span'
                Identifier: 'start'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' endToken'
            CallExpression
              Identifier: ' findTokenOnLeftOfPosition'
              Identifier: 'file'
              BinaryExpression
                PropertyAccessExpression
                  Identifier: ' span'
                  Identifier: 'start'
                PlusToken
                PropertyAccessExpression
                  Identifier: ' span'
                  Identifier: 'length'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' adjustedSpan'
            CallExpression
              Identifier: ' createTextSpanFromBounds'
              PropertyAccessExpression
                Identifier: 'startToken'
                Identifier: 'pos'
              ConditionalExpression
                BinaryExpression
                  Identifier: ' endToken'
                  AmpersandAmpersandToken
                  BinaryExpression
                    PropertyAccessExpression
                      Identifier: ' endToken'
                      Identifier: 'end'
                    GreaterThanEqualsToken
                    PropertyAccessExpression
                      Identifier: ' startToken'
                      Identifier: 'pos'
                QuestionToken
                CallExpression
                  PropertyAccessExpression
                    Identifier: ' endToken'
                    Identifier: 'getEnd'
                ColonToken
                CallExpression
                  PropertyAccessExpression
                    Identifier: ' startToken'
                    Identifier: 'getEnd'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' parent'
            ConditionalExpression
              Identifier: ' forEmptySpan'
              QuestionToken
              CallExpression
                Identifier: ' getValidParentNodeOfEmptySpan'
                Identifier: 'startToken'
              ColonToken
              CallExpression
                Identifier: ' getValidParentNodeContainingSpan'
                Identifier: 'startToken'
                Identifier: ' adjustedSpan'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' expression'
            ConditionalExpression
              BinaryExpression
                Identifier: ' parent'
                AmpersandAmpersandToken
                CallExpression
                  Identifier: ' isValidExpressionOrStatement'
                  Identifier: 'parent'
              QuestionToken
              CallExpression
                Identifier: ' getExpression'
                Identifier: 'parent'
              ColonToken
              Identifier: ' undefined'
      IfStatement
        PrefixUnaryExpression
          Identifier: 'expression'
        ReturnStatement
          ObjectLiteralExpression
            PropertyAssignment
              Identifier: ' error'
              CallExpression
                Identifier: ' getLocaleSpecificMessage'
                PropertyAccessExpression
                  Identifier: 'Diagnostics'
                  Identifier: 'Could_not_find_convertible_access_expression'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' checker'
            CallExpression
              PropertyAccessExpression
                Identifier: ' program'
                Identifier: 'getTypeChecker'
      ReturnStatement
        ConditionalExpression
          CallExpression
            Identifier: ' isConditionalExpression'
            Identifier: 'expression'
          QuestionToken
          CallExpression
            Identifier: ' getConditionalInfo'
            Identifier: 'expression'
            Identifier: ' checker'
          ColonToken
          CallExpression
            Identifier: ' getBinaryInfo'
            Identifier: 'expression'
  FunctionDeclaration
    Identifier: ' getConditionalInfo'
    Parameter
      Identifier: 'expression'
      TypeReference
        Identifier: ' ConditionalExpression'
    Parameter
      Identifier: ' checker'
      TypeReference
        Identifier: ' TypeChecker'
    UnionType
      TypeReference
        Identifier: ' OptionalChainInfo'
      TypeReference
        Identifier: ' RefactorErrorInfo'
      UndefinedKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' condition'
            PropertyAccessExpression
              Identifier: ' expression'
              Identifier: 'condition'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' finalExpression'
            CallExpression
              Identifier: ' getFinalExpressionInChain'
              PropertyAccessExpression
                Identifier: 'expression'
                Identifier: 'whenTrue'
      IfStatement
        BinaryExpression
          PrefixUnaryExpression
            Identifier: 'finalExpression'
          BarBarToken
          CallExpression
            PropertyAccessExpression
              Identifier: ' checker'
              Identifier: 'isNullableType'
            CallExpression
              PropertyAccessExpression
                Identifier: 'checker'
                Identifier: 'getTypeAtLocation'
              Identifier: 'finalExpression'
        Block
          ReturnStatement
            ObjectLiteralExpression
              PropertyAssignment
                Identifier: ' error'
                CallExpression
                  Identifier: ' getLocaleSpecificMessage'
                  PropertyAccessExpression
                    Identifier: 'Diagnostics'
                    Identifier: 'Could_not_find_convertible_access_expression'
      IfStatement
        BinaryExpression
          ParenthesizedExpression
            BinaryExpression
              CallExpression
                Identifier: 'isPropertyAccessExpression'
                Identifier: 'condition'
              BarBarToken
              CallExpression
                Identifier: ' isIdentifier'
                Identifier: 'condition'
          AmpersandAmpersandToken
          CallExpression
            Identifier: ' getMatchingStart'
            Identifier: 'condition'
            PropertyAccessExpression
              Identifier: ' finalExpression'
              Identifier: 'expression'
        Block
          ReturnStatement
            ObjectLiteralExpression
              ShorthandPropertyAssignment
                Identifier: ' finalExpression'
              PropertyAssignment
                Identifier: ' occurrences'
                ArrayLiteralExpression
                  Identifier: 'condition'
              ShorthandPropertyAssignment
                Identifier: ' expression'
        IfStatement
          CallExpression
            Identifier: 'isBinaryExpression'
            Identifier: 'condition'
          Block
            VariableStatement
              VariableDeclarationList
                VariableDeclaration
                  Identifier: ' occurrences'
                  CallExpression
                    Identifier: ' getOccurrencesInExpression'
                    PropertyAccessExpression
                      Identifier: 'finalExpression'
                      Identifier: 'expression'
                    Identifier: ' condition'
            ReturnStatement
              ConditionalExpression
                Identifier: ' occurrences'
                QuestionToken
                ObjectLiteralExpression
                  ShorthandPropertyAssignment
                    Identifier: ' finalExpression'
                  ShorthandPropertyAssignment
                    Identifier: ' occurrences'
                  ShorthandPropertyAssignment
                    Identifier: ' expression'
                ColonToken
                ObjectLiteralExpression
                  PropertyAssignment
                    Identifier: ' error'
                    CallExpression
                      Identifier: ' getLocaleSpecificMessage'
                      PropertyAccessExpression
                        Identifier: 'Diagnostics'
                        Identifier: 'Could_not_find_matching_access_expressions'
  FunctionDeclaration
    Identifier: ' getBinaryInfo'
    Parameter
      Identifier: 'expression'
      TypeReference
        Identifier: ' BinaryExpression'
    UnionType
      TypeReference
        Identifier: ' OptionalChainInfo'
      TypeReference
        Identifier: ' RefactorErrorInfo'
      UndefinedKeyword
    Block
      IfStatement
        BinaryExpression
          PropertyAccessExpression
            PropertyAccessExpression
              Identifier: 'expression'
              Identifier: 'operatorToken'
            Identifier: 'kind'
          ExclamationEqualsEqualsToken
          PropertyAccessExpression
            Identifier: ' SyntaxKind'
            Identifier: 'AmpersandAmpersandToken'
        Block
          ReturnStatement
            ObjectLiteralExpression
              PropertyAssignment
                Identifier: ' error'
                CallExpression
                  Identifier: ' getLocaleSpecificMessage'
                  PropertyAccessExpression
                    Identifier: 'Diagnostics'
                    Identifier: 'Can_only_convert_logical_AND_access_chains'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' finalExpression'
            CallExpression
              Identifier: ' getFinalExpressionInChain'
              PropertyAccessExpression
                Identifier: 'expression'
                Identifier: 'right'
      IfStatement
        PrefixUnaryExpression
          Identifier: 'finalExpression'
        ReturnStatement
          ObjectLiteralExpression
            PropertyAssignment
              Identifier: ' error'
              CallExpression
                Identifier: ' getLocaleSpecificMessage'
                PropertyAccessExpression
                  Identifier: 'Diagnostics'
                  Identifier: 'Could_not_find_convertible_access_expression'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' occurrences'
            CallExpression
              Identifier: ' getOccurrencesInExpression'
              PropertyAccessExpression
                Identifier: 'finalExpression'
                Identifier: 'expression'
              PropertyAccessExpression
                Identifier: ' expression'
                Identifier: 'left'
      ReturnStatement
        ConditionalExpression
          Identifier: ' occurrences'
          QuestionToken
          ObjectLiteralExpression
            ShorthandPropertyAssignment
              Identifier: ' finalExpression'
            ShorthandPropertyAssignment
              Identifier: ' occurrences'
            ShorthandPropertyAssignment
              Identifier: ' expression'
          ColonToken
          ObjectLiteralExpression
            PropertyAssignment
              Identifier: ' error'
              CallExpression
                Identifier: ' getLocaleSpecificMessage'
                PropertyAccessExpression
                  Identifier: 'Diagnostics'
                  Identifier: 'Could_not_find_matching_access_expressions'
  FunctionDeclaration
    Identifier: ' getOccurrencesInExpression'
    Parameter
      Identifier: 'matchTo'
      TypeReference
        Identifier: ' Expression'
    Parameter
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
    UnionType
      ArrayType
        TypeReference
          Identifier: ' Occurrence'
      UndefinedKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' occurrences'
            ArrayType
              TypeReference
                Identifier: ' Occurrence'
            ArrayLiteralExpression
      WhileStatement
        BinaryExpression
          CallExpression
            Identifier: 'isBinaryExpression'
            Identifier: 'expression'
          AmpersandAmpersandToken
          BinaryExpression
            PropertyAccessExpression
              PropertyAccessExpression
                Identifier: ' expression'
                Identifier: 'operatorToken'
              Identifier: 'kind'
            EqualsEqualsEqualsToken
            PropertyAccessExpression
              Identifier: ' SyntaxKind'
              Identifier: 'AmpersandAmpersandToken'
        Block
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' match'
                CallExpression
                  Identifier: ' getMatchingStart'
                  CallExpression
                    Identifier: 'skipParentheses'
                    Identifier: 'matchTo'
                  CallExpression
                    Identifier: ' skipParentheses'
                    PropertyAccessExpression
                      Identifier: 'expression'
                      Identifier: 'right'
          IfStatement
            PrefixUnaryExpression
              Identifier: 'match'
            Block
              BreakStatement
          ExpressionStatement
            CallExpression
              PropertyAccessExpression
                Identifier: '
        occurrences'
                Identifier: 'push'
              Identifier: 'match'
          ExpressionStatement
            BinaryExpression
              Identifier: '
        matchTo'
              EqualsToken
              Identifier: ' match'
          ExpressionStatement
            BinaryExpression
              Identifier: '
        expression'
              EqualsToken
              PropertyAccessExpression
                Identifier: ' expression'
                Identifier: 'left'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' finalMatch'
            CallExpression
              Identifier: ' getMatchingStart'
              Identifier: 'matchTo'
              Identifier: ' expression'
      IfStatement
        Identifier: 'finalMatch'
        Block
          ExpressionStatement
            CallExpression
              PropertyAccessExpression
                Identifier: '
        occurrences'
                Identifier: 'push'
              Identifier: 'finalMatch'
      ReturnStatement
        ConditionalExpression
          BinaryExpression
            PropertyAccessExpression
              Identifier: ' occurrences'
              Identifier: 'length'
            GreaterThanToken
            NumericLiteral
          QuestionToken
          Identifier: ' occurrences'
          ColonToken
          Identifier: ' undefined'
  FunctionDeclaration
    Identifier: ' getMatchingStart'
    Parameter
      Identifier: 'chain'
      TypeReference
        Identifier: ' Expression'
    Parameter
      Identifier: ' subchain'
      TypeReference
        Identifier: ' Expression'
    UnionType
      TypeReference
        Identifier: ' PropertyAccessExpression'
      TypeReference
        Identifier: ' ElementAccessExpression'
      TypeReference
        Identifier: ' Identifier'
      UndefinedKeyword
    Block
      IfStatement
        BinaryExpression
          BinaryExpression
            PrefixUnaryExpression
              CallExpression
                Identifier: 'isIdentifier'
                Identifier: 'subchain'
            AmpersandAmpersandToken
            PrefixUnaryExpression
              CallExpression
                Identifier: 'isPropertyAccessExpression'
                Identifier: 'subchain'
          AmpersandAmpersandToken
          PrefixUnaryExpression
            CallExpression
              Identifier: 'isElementAccessExpression'
              Identifier: 'subchain'
        Block
          ReturnStatement
            Identifier: ' undefined'
      ReturnStatement
        ConditionalExpression
          CallExpression
            Identifier: ' chainStartsWith'
            Identifier: 'chain'
            Identifier: ' subchain'
          QuestionToken
          Identifier: ' subchain'
          ColonToken
          Identifier: ' undefined'
  FunctionDeclaration
    Identifier: ' chainStartsWith'
    Parameter
      Identifier: 'chain'
      TypeReference
        Identifier: ' Node'
    Parameter
      Identifier: ' subchain'
      TypeReference
        Identifier: ' Node'
    BooleanKeyword
    Block
      WhileStatement
        BinaryExpression
          BinaryExpression
            CallExpression
              Identifier: 'isCallExpression'
              Identifier: 'chain'
            BarBarToken
            CallExpression
              Identifier: ' isPropertyAccessExpression'
              Identifier: 'chain'
          BarBarToken
          CallExpression
            Identifier: ' isElementAccessExpression'
            Identifier: 'chain'
        Block
          IfStatement
            BinaryExpression
              CallExpression
                Identifier: 'getTextOfChainNode'
                Identifier: 'chain'
              EqualsEqualsEqualsToken
              CallExpression
                Identifier: ' getTextOfChainNode'
                Identifier: 'subchain'
            BreakStatement
          ExpressionStatement
            BinaryExpression
              Identifier: '
        chain'
              EqualsToken
              PropertyAccessExpression
                Identifier: ' chain'
                Identifier: 'expression'
      WhileStatement
        BinaryExpression
          ParenthesizedExpression
            BinaryExpression
              CallExpression
                Identifier: 'isPropertyAccessExpression'
                Identifier: 'chain'
              AmpersandAmpersandToken
              CallExpression
                Identifier: ' isPropertyAccessExpression'
                Identifier: 'subchain'
          BarBarToken
          ParenthesizedExpression
            BinaryExpression
              CallExpression
                Identifier: 'isElementAccessExpression'
                Identifier: 'chain'
              AmpersandAmpersandToken
              CallExpression
                Identifier: ' isElementAccessExpression'
                Identifier: 'subchain'
        Block
          IfStatement
            BinaryExpression
              CallExpression
                Identifier: 'getTextOfChainNode'
                Identifier: 'chain'
              ExclamationEqualsEqualsToken
              CallExpression
                Identifier: ' getTextOfChainNode'
                Identifier: 'subchain'
            ReturnStatement
              FalseKeyword
          ExpressionStatement
            BinaryExpression
              Identifier: '
        chain'
              EqualsToken
              PropertyAccessExpression
                Identifier: ' chain'
                Identifier: 'expression'
          ExpressionStatement
            BinaryExpression
              Identifier: '
        subchain'
              EqualsToken
              PropertyAccessExpression
                Identifier: ' subchain'
                Identifier: 'expression'
      ReturnStatement
        BinaryExpression
          BinaryExpression
            CallExpression
              Identifier: ' isIdentifier'
              Identifier: 'chain'
            AmpersandAmpersandToken
            CallExpression
              Identifier: ' isIdentifier'
              Identifier: 'subchain'
          AmpersandAmpersandToken
          BinaryExpression
            CallExpression
              PropertyAccessExpression
                Identifier: ' chain'
                Identifier: 'getText'
            EqualsEqualsEqualsToken
            CallExpression
              PropertyAccessExpression
                Identifier: ' subchain'
                Identifier: 'getText'
  FunctionDeclaration
    Identifier: ' getTextOfChainNode'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Node'
    UnionType
      StringKeyword
      UndefinedKeyword
    Block
      IfStatement
        BinaryExpression
          CallExpression
            Identifier: 'isIdentifier'
            Identifier: 'node'
          BarBarToken
          CallExpression
            Identifier: ' isStringOrNumericLiteralLike'
            Identifier: 'node'
        Block
          ReturnStatement
            CallExpression
              PropertyAccessExpression
                Identifier: ' node'
                Identifier: 'getText'
      IfStatement
        CallExpression
          Identifier: 'isPropertyAccessExpression'
          Identifier: 'node'
        Block
          ReturnStatement
            CallExpression
              Identifier: ' getTextOfChainNode'
              PropertyAccessExpression
                Identifier: 'node'
                Identifier: 'name'
      IfStatement
        CallExpression
          Identifier: 'isElementAccessExpression'
          Identifier: 'node'
        Block
          ReturnStatement
            CallExpression
              Identifier: ' getTextOfChainNode'
              PropertyAccessExpression
                Identifier: 'node'
                Identifier: 'argumentExpression'
      ReturnStatement
        Identifier: ' undefined'
  FunctionDeclaration
    Identifier: ' getValidParentNodeContainingSpan'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Node'
    Parameter
      Identifier: ' span'
      TypeReference
        Identifier: ' TextSpan'
    UnionType
      TypeReference
        Identifier: ' ValidExpressionOrStatement'
      UndefinedKeyword
    Block
      WhileStatement
        PropertyAccessExpression
          Identifier: 'node'
          Identifier: 'parent'
        Block
          IfStatement
            BinaryExpression
              BinaryExpression
                CallExpression
                  Identifier: 'isValidExpressionOrStatement'
                  Identifier: 'node'
                AmpersandAmpersandToken
                BinaryExpression
                  PropertyAccessExpression
                    Identifier: ' span'
                    Identifier: 'length'
                  ExclamationEqualsEqualsToken
                  NumericLiteral
              AmpersandAmpersandToken
              BinaryExpression
                PropertyAccessExpression
                  Identifier: ' node'
                  Identifier: 'end'
                GreaterThanEqualsToken
                BinaryExpression
                  PropertyAccessExpression
                    Identifier: ' span'
                    Identifier: 'start'
                  PlusToken
                  PropertyAccessExpression
                    Identifier: ' span'
                    Identifier: 'length'
            Block
              ReturnStatement
                Identifier: ' node'
          ExpressionStatement
            BinaryExpression
              Identifier: '
        node'
              EqualsToken
              PropertyAccessExpression
                Identifier: ' node'
                Identifier: 'parent'
      ReturnStatement
        Identifier: ' undefined'
  FunctionDeclaration
    Identifier: ' getValidParentNodeOfEmptySpan'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' ValidExpressionOrStatement'
      UndefinedKeyword
    Block
      WhileStatement
        PropertyAccessExpression
          Identifier: 'node'
          Identifier: 'parent'
        Block
          IfStatement
            BinaryExpression
              CallExpression
                Identifier: 'isValidExpressionOrStatement'
                Identifier: 'node'
              AmpersandAmpersandToken
              PrefixUnaryExpression
                CallExpression
                  Identifier: 'isValidExpressionOrStatement'
                  PropertyAccessExpression
                    Identifier: 'node'
                    Identifier: 'parent'
            Block
              ReturnStatement
                Identifier: ' node'
          ExpressionStatement
            BinaryExpression
              Identifier: '
        node'
              EqualsToken
              PropertyAccessExpression
                Identifier: ' node'
                Identifier: 'parent'
      ReturnStatement
        Identifier: ' undefined'
  FunctionDeclaration
    Identifier: ' getExpression'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' ValidExpressionOrStatement'
    UnionType
      TypeReference
        Identifier: ' ValidExpression'
      UndefinedKeyword
    Block
      IfStatement
        CallExpression
          Identifier: 'isValidExpression'
          Identifier: 'node'
        Block
          ReturnStatement
            Identifier: ' node'
      IfStatement
        CallExpression
          Identifier: 'isVariableStatement'
          Identifier: 'node'
        Block
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' variable'
                CallExpression
                  Identifier: ' getSingleVariableOfVariableStatement'
                  Identifier: 'node'
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' initializer'
                PropertyAccessExpression
                  Identifier: ' variable'
                  QuestionDotToken
                  Identifier: 'initializer'
          ReturnStatement
            ConditionalExpression
              BinaryExpression
                Identifier: ' initializer'
                AmpersandAmpersandToken
                CallExpression
                  Identifier: ' isValidExpression'
                  Identifier: 'initializer'
              QuestionToken
              Identifier: ' initializer'
              ColonToken
              Identifier: ' undefined'
      ReturnStatement
        ConditionalExpression
          BinaryExpression
            PropertyAccessExpression
              Identifier: ' node'
              Identifier: 'expression'
            AmpersandAmpersandToken
            CallExpression
              Identifier: ' isValidExpression'
              PropertyAccessExpression
                Identifier: 'node'
                Identifier: 'expression'
          QuestionToken
          PropertyAccessExpression
            Identifier: ' node'
            Identifier: 'expression'
          ColonToken
          Identifier: ' undefined'
  FunctionDeclaration
    Identifier: ' getFinalExpressionInChain'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Expression'
    UnionType
      TypeReference
        Identifier: ' CallExpression'
      TypeReference
        Identifier: ' PropertyAccessExpression'
      TypeReference
        Identifier: ' ElementAccessExpression'
      UndefinedKeyword
    Block
      ExpressionStatement
        BinaryExpression
          Identifier: '
    // foo && |foo.bar === 1|; - here the right child of the && binary expression is another binary expression.
    // the rightmost member of the && chain should be the leftmost child of that expression.
    node'
          EqualsToken
          CallExpression
            Identifier: ' skipParentheses'
            Identifier: 'node'
      IfStatement
        CallExpression
          Identifier: 'isBinaryExpression'
          Identifier: 'node'
        Block
          ReturnStatement
            CallExpression
              Identifier: ' getFinalExpressionInChain'
              PropertyAccessExpression
                Identifier: 'node'
                Identifier: 'left'
        IfStatement
          BinaryExpression
            ParenthesizedExpression
              BinaryExpression
                BinaryExpression
                  CallExpression
                    Identifier: 'isPropertyAccessExpression'
                    Identifier: 'node'
                  BarBarToken
                  CallExpression
                    Identifier: ' isElementAccessExpression'
                    Identifier: 'node'
                BarBarToken
                CallExpression
                  Identifier: ' isCallExpression'
                  Identifier: 'node'
            AmpersandAmpersandToken
            PrefixUnaryExpression
              CallExpression
                Identifier: 'isOptionalChain'
                Identifier: 'node'
          Block
            ReturnStatement
              Identifier: ' node'
      ReturnStatement
        Identifier: ' undefined'
  FunctionDeclaration
    Identifier: ' convertOccurrences'
    Parameter
      Identifier: 'checker'
      TypeReference
        Identifier: ' TypeChecker'
    Parameter
      Identifier: ' toConvert'
      TypeReference
        Identifier: ' Expression'
    Parameter
      Identifier: ' occurrences'
      ArrayType
        TypeReference
          Identifier: ' Occurrence'
    TypeReference
      Identifier: ' Expression'
    Block
      IfStatement
        BinaryExpression
          BinaryExpression
            CallExpression
              Identifier: 'isPropertyAccessExpression'
              Identifier: 'toConvert'
            BarBarToken
            CallExpression
              Identifier: ' isElementAccessExpression'
              Identifier: 'toConvert'
          BarBarToken
          CallExpression
            Identifier: ' isCallExpression'
            Identifier: 'toConvert'
        Block
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' chain'
                CallExpression
                  Identifier: ' convertOccurrences'
                  Identifier: 'checker'
                  PropertyAccessExpression
                    Identifier: ' toConvert'
                    Identifier: 'expression'
                  Identifier: ' occurrences'
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' lastOccurrence'
                ConditionalExpression
                  BinaryExpression
                    PropertyAccessExpression
                      Identifier: ' occurrences'
                      Identifier: 'length'
                    GreaterThanToken
                    NumericLiteral
                  QuestionToken
                  ElementAccessExpression
                    Identifier: ' occurrences'
                    BinaryExpression
                      PropertyAccessExpression
                        Identifier: 'occurrences'
                        Identifier: 'length'
                      MinusToken
                      NumericLiteral
                  ColonToken
                  Identifier: ' undefined'
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' isOccurrence'
                BinaryExpression
                  CallExpression
                    PropertyAccessExpression
                      Identifier: ' lastOccurrence'
                      QuestionDotToken
                      Identifier: 'getText'
                  EqualsEqualsEqualsToken
                  CallExpression
                    PropertyAccessExpression
                      PropertyAccessExpression
                        Identifier: ' toConvert'
                        Identifier: 'expression'
                      Identifier: 'getText'
          IfStatement
            Identifier: 'isOccurrence'
            ExpressionStatement
              CallExpression
                PropertyAccessExpression
                  Identifier: ' occurrences'
                  Identifier: 'pop'
          IfStatement
            CallExpression
              Identifier: 'isCallExpression'
              Identifier: 'toConvert'
            Block
              ReturnStatement
                ConditionalExpression
                  Identifier: ' isOccurrence'
                  QuestionToken
                  CallExpression
                    PropertyAccessExpression
                      Identifier: '
                factory'
                      Identifier: 'createCallChain'
                    Identifier: 'chain'
                    CallExpression
                      PropertyAccessExpression
                        Identifier: ' factory'
                        Identifier: 'createToken'
                      PropertyAccessExpression
                        Identifier: 'SyntaxKind'
                        Identifier: 'QuestionDotToken'
                    PropertyAccessExpression
                      Identifier: ' toConvert'
                      Identifier: 'typeArguments'
                    PropertyAccessExpression
                      Identifier: ' toConvert'
                      Identifier: 'arguments'
                  ColonToken
                  CallExpression
                    PropertyAccessExpression
                      Identifier: '
                factory'
                      Identifier: 'createCallChain'
                    Identifier: 'chain'
                    PropertyAccessExpression
                      Identifier: ' toConvert'
                      Identifier: 'questionDotToken'
                    PropertyAccessExpression
                      Identifier: ' toConvert'
                      Identifier: 'typeArguments'
                    PropertyAccessExpression
                      Identifier: ' toConvert'
                      Identifier: 'arguments'
            IfStatement
              CallExpression
                Identifier: 'isPropertyAccessExpression'
                Identifier: 'toConvert'
              Block
                ReturnStatement
                  ConditionalExpression
                    Identifier: ' isOccurrence'
                    QuestionToken
                    CallExpression
                      PropertyAccessExpression
                        Identifier: '
                factory'
                        Identifier: 'createPropertyAccessChain'
                      Identifier: 'chain'
                      CallExpression
                        PropertyAccessExpression
                          Identifier: ' factory'
                          Identifier: 'createToken'
                        PropertyAccessExpression
                          Identifier: 'SyntaxKind'
                          Identifier: 'QuestionDotToken'
                      PropertyAccessExpression
                        Identifier: ' toConvert'
                        Identifier: 'name'
                    ColonToken
                    CallExpression
                      PropertyAccessExpression
                        Identifier: '
                factory'
                        Identifier: 'createPropertyAccessChain'
                      Identifier: 'chain'
                      PropertyAccessExpression
                        Identifier: ' toConvert'
                        Identifier: 'questionDotToken'
                      PropertyAccessExpression
                        Identifier: ' toConvert'
                        Identifier: 'name'
              IfStatement
                CallExpression
                  Identifier: 'isElementAccessExpression'
                  Identifier: 'toConvert'
                Block
                  ReturnStatement
                    ConditionalExpression
                      Identifier: ' isOccurrence'
                      QuestionToken
                      CallExpression
                        PropertyAccessExpression
                          Identifier: '
                factory'
                          Identifier: 'createElementAccessChain'
                        Identifier: 'chain'
                        CallExpression
                          PropertyAccessExpression
                            Identifier: ' factory'
                            Identifier: 'createToken'
                          PropertyAccessExpression
                            Identifier: 'SyntaxKind'
                            Identifier: 'QuestionDotToken'
                        PropertyAccessExpression
                          Identifier: ' toConvert'
                          Identifier: 'argumentExpression'
                      ColonToken
                      CallExpression
                        PropertyAccessExpression
                          Identifier: '
                factory'
                          Identifier: 'createElementAccessChain'
                        Identifier: 'chain'
                        PropertyAccessExpression
                          Identifier: ' toConvert'
                          Identifier: 'questionDotToken'
                        PropertyAccessExpression
                          Identifier: ' toConvert'
                          Identifier: 'argumentExpression'
      ReturnStatement
        Identifier: ' toConvert'
  FunctionDeclaration
    Identifier: ' doChange'
    Parameter
      Identifier: 'sourceFile'
      TypeReference
        Identifier: ' SourceFile'
    Parameter
      Identifier: ' checker'
      TypeReference
        Identifier: ' TypeChecker'
    Parameter
      Identifier: ' changes'
      TypeReference
        QualifiedName
          Identifier: ' textChanges'
          Identifier: 'ChangeTracker'
    Parameter
      Identifier: ' info'
      TypeReference
        Identifier: ' OptionalChainInfo'
    Parameter
      Identifier: ' _actionName'
      StringKeyword
    VoidKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            ObjectBindingPattern
              BindingElement
                Identifier: ' finalExpression'
              BindingElement
                Identifier: ' occurrences'
              BindingElement
                Identifier: ' expression'
            Identifier: ' info'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' firstOccurrence'
            ElementAccessExpression
              Identifier: ' occurrences'
              BinaryExpression
                PropertyAccessExpression
                  Identifier: 'occurrences'
                  Identifier: 'length'
                MinusToken
                NumericLiteral
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' convertedChain'
            CallExpression
              Identifier: ' convertOccurrences'
              Identifier: 'checker'
              Identifier: ' finalExpression'
              Identifier: ' occurrences'
      IfStatement
        BinaryExpression
          Identifier: 'convertedChain'
          AmpersandAmpersandToken
          ParenthesizedExpression
            BinaryExpression
              BinaryExpression
                CallExpression
                  Identifier: 'isPropertyAccessExpression'
                  Identifier: 'convertedChain'
                BarBarToken
                CallExpression
                  Identifier: ' isElementAccessExpression'
                  Identifier: 'convertedChain'
              BarBarToken
              CallExpression
                Identifier: ' isCallExpression'
                Identifier: 'convertedChain'
        Block
          IfStatement
            CallExpression
              Identifier: 'isBinaryExpression'
              Identifier: 'expression'
            Block
              ExpressionStatement
                CallExpression
                  PropertyAccessExpression
                    Identifier: '
            changes'
                    Identifier: 'replaceNodeRange'
                  Identifier: 'sourceFile'
                  Identifier: ' firstOccurrence'
                  Identifier: ' finalExpression'
                  Identifier: ' convertedChain'
            IfStatement
              CallExpression
                Identifier: 'isConditionalExpression'
                Identifier: 'expression'
              Block
                ExpressionStatement
                  CallExpression
                    PropertyAccessExpression
                      Identifier: '
            changes'
                      Identifier: 'replaceNode'
                    Identifier: 'sourceFile'
                    Identifier: ' expression'
                    CallExpression
                      PropertyAccessExpression
                        Identifier: ' factory'
                        Identifier: 'createBinaryExpression'
                      Identifier: 'convertedChain'
                      CallExpression
                        PropertyAccessExpression
                          Identifier: ' factory'
                          Identifier: 'createToken'
                        PropertyAccessExpression
                          Identifier: 'SyntaxKind'
                          Identifier: 'QuestionQuestionToken'
                      PropertyAccessExpression
                        Identifier: ' expression'
                        Identifier: 'whenFalse'
