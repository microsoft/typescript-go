SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportEqualsDeclaration
        Identifier: ' console'
        ExternalModuleReference
          StringLiteral
      ExportAssignment
        Identifier: ' console'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' InspectOptions'
        StringLiteral
      ModuleDeclaration
        Identifier: '
    global'
        ModuleBlock
          InterfaceDeclaration
            Identifier: ' Console'
            PropertySignature
              Identifier: '
            Console'
              TypeReference
                QualifiedName
                  Identifier: ' console'
                  Identifier: 'ConsoleConstructor'
            MethodSignature
              Identifier: '
            /**
             * `console.assert()` writes a message if `value` is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) or omitted. It only
             * writes a message and does not otherwise affect execution. The output always
             * starts with `"Assertion failed"`. If provided, `message` is formatted using
             * [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args).
             *
             * If `value` is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), nothing happens.
             *
             * ```js
             * console.assert(true, 'does nothing');
             *
             * console.assert(false, 'Whoops %s work', 'didn\'t');
             * // Assertion failed: Whoops didn't work
             *
             * console.assert();
             * // Assertion failed
             * ```
             * @since v0.1.101
             * @param value The value tested for being truthy.
             * @param message All arguments besides `value` are used as error message.
             */
            assert'
              Parameter
                Identifier: 'value'
                AnyKeyword
              Parameter
                Identifier: ' message'
                QuestionToken
                StringKeyword
              Parameter
                DotDotDotToken
                Identifier: 'optionalParams'
                ArrayType
                  AnyKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * When `stdout` is a TTY, calling `console.clear()` will attempt to clear the
             * TTY. When `stdout` is not a TTY, this method does nothing.
             *
             * The specific operation of `console.clear()` can vary across operating systems
             * and terminal types. For most Linux operating systems, `console.clear()` operates similarly to the `clear` shell command. On Windows, `console.clear()` will clear only the output in the
             * current terminal viewport for the Node.js
             * binary.
             * @since v8.3.0
             */
            clear'
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * Maintains an internal counter specific to `label` and outputs to `stdout` the
             * number of times `console.count()` has been called with the given `label`.
             *
             * ```js
             * > console.count()
             * default: 1
             * undefined
             * > console.count('default')
             * default: 2
             * undefined
             * > console.count('abc')
             * abc: 1
             * undefined
             * > console.count('xyz')
             * xyz: 1
             * undefined
             * > console.count('abc')
             * abc: 2
             * undefined
             * > console.count()
             * default: 3
             * undefined
             * >
             * ```
             * @since v8.3.0
             * @param [label='default'] The display label for the counter.
             */
            count'
              Parameter
                Identifier: 'label'
                QuestionToken
                StringKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * Resets the internal counter specific to `label`.
             *
             * ```js
             * > console.count('abc');
             * abc: 1
             * undefined
             * > console.countReset('abc');
             * undefined
             * > console.count('abc');
             * abc: 1
             * undefined
             * >
             * ```
             * @since v8.3.0
             * @param [label='default'] The display label for the counter.
             */
            countReset'
              Parameter
                Identifier: 'label'
                QuestionToken
                StringKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * The `console.debug()` function is an alias for {@link log}.
             * @since v8.0.0
             */
            debug'
              Parameter
                Identifier: 'message'
                QuestionToken
                AnyKeyword
              Parameter
                DotDotDotToken
                Identifier: 'optionalParams'
                ArrayType
                  AnyKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * Uses [`util.inspect()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilinspectobject-options) on `obj` and prints the resulting string to `stdout`.
             * This function bypasses any custom `inspect()` function defined on `obj`.
             * @since v0.1.101
             */
            dir'
              Parameter
                Identifier: 'obj'
                AnyKeyword
              Parameter
                Identifier: ' options'
                QuestionToken
                TypeReference
                  Identifier: ' InspectOptions'
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * This method calls `console.log()` passing it the arguments received.
             * This method does not produce any XML formatting.
             * @since v8.0.0
             */
            dirxml'
              Parameter
                DotDotDotToken
                Identifier: 'data'
                ArrayType
                  AnyKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * Prints to `stderr` with newline. Multiple arguments can be passed, with the
             * first used as the primary message and all additional used as substitution
             * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)
             * (the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)).
             *
             * ```js
             * const code = 5;
             * console.error('error #%d', code);
             * // Prints: error #5, to stderr
             * console.error('error', code);
             * // Prints: error 5, to stderr
             * ```
             *
             * If formatting elements (e.g. `%d`) are not found in the first string then
             * [`util.inspect()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilinspectobject-options) is called on each argument and the
             * resulting string values are concatenated. See [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)
             * for more information.
             * @since v0.1.100
             */
            error'
              Parameter
                Identifier: 'message'
                QuestionToken
                AnyKeyword
              Parameter
                DotDotDotToken
                Identifier: 'optionalParams'
                ArrayType
                  AnyKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * Increases indentation of subsequent lines by spaces for `groupIndentation` length.
             *
             * If one or more `label`s are provided, those are printed first without the
             * additional indentation.
             * @since v8.5.0
             */
            group'
              Parameter
                DotDotDotToken
                Identifier: 'label'
                ArrayType
                  AnyKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * An alias for {@link group}.
             * @since v8.5.0
             */
            groupCollapsed'
              Parameter
                DotDotDotToken
                Identifier: 'label'
                ArrayType
                  AnyKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * Decreases indentation of subsequent lines by spaces for `groupIndentation` length.
             * @since v8.5.0
             */
            groupEnd'
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * The `console.info()` function is an alias for {@link log}.
             * @since v0.1.100
             */
            info'
              Parameter
                Identifier: 'message'
                QuestionToken
                AnyKeyword
              Parameter
                DotDotDotToken
                Identifier: 'optionalParams'
                ArrayType
                  AnyKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * Prints to `stdout` with newline. Multiple arguments can be passed, with the
             * first used as the primary message and all additional used as substitution
             * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)
             * (the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)).
             *
             * ```js
             * const count = 5;
             * console.log('count: %d', count);
             * // Prints: count: 5, to stdout
             * console.log('count:', count);
             * // Prints: count: 5, to stdout
             * ```
             *
             * See [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args) for more information.
             * @since v0.1.100
             */
            log'
              Parameter
                Identifier: 'message'
                QuestionToken
                AnyKeyword
              Parameter
                DotDotDotToken
                Identifier: 'optionalParams'
                ArrayType
                  AnyKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * Try to construct a table with the columns of the properties of `tabularData` (or use `properties`) and rows of `tabularData` and log it. Falls back to just
             * logging the argument if it can't be parsed as tabular.
             *
             * ```js
             * // These can't be parsed as tabular data
             * console.table(Symbol());
             * // Symbol()
             *
             * console.table(undefined);
             * // undefined
             *
             * console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }]);
             * // ┌─────────┬─────┬─────┐
             * // │ (index) │  a  │  b  │
             * // ├─────────┼─────┼─────┤
             * // │    0    │  1  │ 'Y' │
             * // │    1    │ 'Z' │  2  │
             * // └─────────┴─────┴─────┘
             *
             * console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }], ['a']);
             * // ┌─────────┬─────┐
             * // │ (index) │  a  │
             * // ├─────────┼─────┤
             * // │    0    │  1  │
             * // │    1    │ 'Z' │
             * // └─────────┴─────┘
             * ```
             * @since v10.0.0
             * @param properties Alternate properties for constructing the table.
             */
            table'
              Parameter
                Identifier: 'tabularData'
                AnyKeyword
              Parameter
                Identifier: ' properties'
                QuestionToken
                TypeOperator
                  ArrayType
                    StringKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * Starts a timer that can be used to compute the duration of an operation. Timers
             * are identified by a unique `label`. Use the same `label` when calling {@link timeEnd} to stop the timer and output the elapsed time in
             * suitable time units to `stdout`. For example, if the elapsed
             * time is 3869ms, `console.timeEnd()` displays "3.869s".
             * @since v0.1.104
             * @param [label='default']
             */
            time'
              Parameter
                Identifier: 'label'
                QuestionToken
                StringKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * Stops a timer that was previously started by calling {@link time} and
             * prints the result to `stdout`:
             *
             * ```js
             * console.time('bunch-of-stuff');
             * // Do a bunch of stuff.
             * console.timeEnd('bunch-of-stuff');
             * // Prints: bunch-of-stuff: 225.438ms
             * ```
             * @since v0.1.104
             * @param [label='default']
             */
            timeEnd'
              Parameter
                Identifier: 'label'
                QuestionToken
                StringKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * For a timer that was previously started by calling {@link time}, prints
             * the elapsed time and other `data` arguments to `stdout`:
             *
             * ```js
             * console.time('process');
             * const value = expensiveProcess1(); // Returns 42
             * console.timeLog('process', value);
             * // Prints "process: 365.227ms 42".
             * doExpensiveProcess2(value);
             * console.timeEnd('process');
             * ```
             * @since v10.7.0
             * @param [label='default']
             */
            timeLog'
              Parameter
                Identifier: 'label'
                QuestionToken
                StringKeyword
              Parameter
                DotDotDotToken
                Identifier: 'data'
                ArrayType
                  AnyKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * Prints to `stderr` the string `'Trace: '`, followed by the [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)
             * formatted message and stack trace to the current position in the code.
             *
             * ```js
             * console.trace('Show me');
             * // Prints: (stack trace will vary based on where trace is called)
             * //  Trace: Show me
             * //    at repl:2:9
             * //    at REPLServer.defaultEval (repl.js:248:27)
             * //    at bound (domain.js:287:14)
             * //    at REPLServer.runBound [as eval] (domain.js:300:12)
             * //    at REPLServer.<anonymous> (repl.js:412:12)
             * //    at emitOne (events.js:82:20)
             * //    at REPLServer.emit (events.js:169:7)
             * //    at REPLServer.Interface._onLine (readline.js:210:10)
             * //    at REPLServer.Interface._line (readline.js:549:8)
             * //    at REPLServer.Interface._ttyWrite (readline.js:826:14)
             * ```
             * @since v0.1.104
             */
            trace'
              Parameter
                Identifier: 'message'
                QuestionToken
                AnyKeyword
              Parameter
                DotDotDotToken
                Identifier: 'optionalParams'
                ArrayType
                  AnyKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * The `console.warn()` function is an alias for {@link error}.
             * @since v0.1.100
             */
            warn'
              Parameter
                Identifier: 'message'
                QuestionToken
                AnyKeyword
              Parameter
                DotDotDotToken
                Identifier: 'optionalParams'
                ArrayType
                  AnyKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            // --- Inspector mode only ---
            /**
             * This method does not display anything unless used in the inspector. The `console.profile()`
             * method starts a JavaScript CPU profile with an optional label until {@link profileEnd}
             * is called. The profile is then added to the Profile panel of the inspector.
             *
             * ```js
             * console.profile('MyLabel');
             * // Some code
             * console.profileEnd('MyLabel');
             * // Adds the profile 'MyLabel' to the Profiles panel of the inspector.
             * ```
             * @since v8.0.0
             */
            profile'
              Parameter
                Identifier: 'label'
                QuestionToken
                StringKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * This method does not display anything unless used in the inspector. Stops the current
             * JavaScript CPU profiling session if one has been started and prints the report to the
             * Profiles panel of the inspector. See {@link profile} for an example.
             *
             * If this method is called without a label, the most recently started profile is stopped.
             * @since v8.0.0
             */
            profileEnd'
              Parameter
                Identifier: 'label'
                QuestionToken
                StringKeyword
              VoidKeyword
            MethodSignature
              Identifier: '
            /**
             * This method does not display anything unless used in the inspector. The `console.timeStamp()`
             * method adds an event with the label `'label'` to the Timeline panel of the inspector.
             * @since v8.0.0
             */
            timeStamp'
              Parameter
                Identifier: 'label'
                QuestionToken
                StringKeyword
              VoidKeyword
          ModuleDeclaration
            Identifier: ' console'
            ModuleBlock
              InterfaceDeclaration
                Identifier: ' ConsoleConstructorOptions'
                PropertySignature
                  Identifier: '
                stdout'
                  TypeReference
                    QualifiedName
                      Identifier: ' NodeJS'
                      Identifier: 'WritableStream'
                PropertySignature
                  Identifier: '
                stderr'
                  QuestionToken
                  UnionType
                    TypeReference
                      QualifiedName
                        Identifier: ' NodeJS'
                        Identifier: 'WritableStream'
                    UndefinedKeyword
                PropertySignature
                  Identifier: '
                /**
                 * Ignore errors when writing to the underlying streams.
                 * @default true
                 */
                ignoreErrors'
                  QuestionToken
                  UnionType
                    BooleanKeyword
                    UndefinedKeyword
                PropertySignature
                  Identifier: '
                /**
                 * Set color support for this `Console` instance. Setting to true enables coloring while inspecting
                 * values. Setting to `false` disables coloring while inspecting values. Setting to `'auto'` makes color
                 * support depend on the value of the `isTTY` property and the value returned by `getColorDepth()` on the
                 * respective stream. This option can not be used, if `inspectOptions.colors` is set as well.
                 * @default auto
                 */
                colorMode'
                  QuestionToken
                  UnionType
                    BooleanKeyword
                    LiteralType
                      StringLiteral
                    UndefinedKeyword
                PropertySignature
                  Identifier: '
                /**
                 * Specifies options that are passed along to
                 * [`util.inspect()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilinspectobject-options).
                 */
                inspectOptions'
                  QuestionToken
                  UnionType
                    TypeReference
                      Identifier: ' InspectOptions'
                    UndefinedKeyword
                PropertySignature
                  Identifier: '
                /**
                 * Set group indentation.
                 * @default 2
                 */
                groupIndentation'
                  QuestionToken
                  UnionType
                    NumberKeyword
                    UndefinedKeyword
              InterfaceDeclaration
                Identifier: ' ConsoleConstructor'
                PropertySignature
                  Identifier: '
                prototype'
                  TypeReference
                    Identifier: ' Console'
                ConstructSignature
                  Parameter
                    Identifier: 'stdout'
                    TypeReference
                      QualifiedName
                        Identifier: ' NodeJS'
                        Identifier: 'WritableStream'
                  Parameter
                    Identifier: ' stderr'
                    QuestionToken
                    TypeReference
                      QualifiedName
                        Identifier: ' NodeJS'
                        Identifier: 'WritableStream'
                  Parameter
                    Identifier: ' ignoreErrors'
                    QuestionToken
                    BooleanKeyword
                  TypeReference
                    Identifier: ' Console'
                ConstructSignature
                  Parameter
                    Identifier: 'options'
                    TypeReference
                      Identifier: ' ConsoleConstructorOptions'
                  TypeReference
                    Identifier: ' Console'
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' console'
                TypeReference
                  Identifier: ' Console'
      ExportAssignment
        PropertyAccessExpression
          Identifier: ' globalThis'
          Identifier: 'console'
