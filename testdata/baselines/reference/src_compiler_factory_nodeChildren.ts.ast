SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: '
    Debug'
        ImportSpecifier
          Identifier: '
    emptyArray'
        ImportSpecifier
          Identifier: '
    isNodeKind'
        ImportSpecifier
          Identifier: '
    Node'
        ImportSpecifier
          Identifier: '
    SourceFileLike'
        ImportSpecifier
          Identifier: '
    SyntaxKind'
        ImportSpecifier
          Identifier: '
    SyntaxList'
    StringLiteral
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' sourceFileToNodeChildren'
        NewExpression
          Identifier: ' WeakMap'
          TypeReference
            Identifier: 'SourceFileLike'
          TypeReference
            Identifier: ' WeakMap'
            TypeReference
              Identifier: 'Node'
            UnionType
              TypeOperator
                ArrayType
                  TypeReference
                    Identifier: ' Node'
              UndefinedKeyword
  FunctionDeclaration
    ExportKeyword
    Identifier: ' getNodeChildren'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Node'
    Parameter
      Identifier: ' sourceFile'
      TypeReference
        Identifier: ' SourceFileLike'
    UnionType
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Node'
      UndefinedKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' kind'
            PropertyAccessExpression
              Identifier: ' node'
              Identifier: 'kind'
      IfStatement
        PrefixUnaryExpression
          CallExpression
            Identifier: 'isNodeKind'
            Identifier: 'kind'
        Block
          ReturnStatement
            Identifier: ' emptyArray'
      IfStatement
        BinaryExpression
          Identifier: 'kind'
          EqualsEqualsEqualsToken
          PropertyAccessExpression
            Identifier: ' SyntaxKind'
            Identifier: 'SyntaxList'
        Block
          ReturnStatement
            PropertyAccessExpression
              ParenthesizedExpression
                AsExpression
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' SyntaxList'
              Identifier: '_children'
      ReturnStatement
        CallExpression
          PropertyAccessExpression
            CallExpression
              PropertyAccessExpression
                Identifier: ' sourceFileToNodeChildren'
                Identifier: 'get'
              Identifier: 'sourceFile'
            QuestionDotToken
            Identifier: 'get'
          Identifier: 'node'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' setNodeChildren'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Node'
    Parameter
      Identifier: ' sourceFile'
      TypeReference
        Identifier: ' SourceFileLike'
    Parameter
      Identifier: ' children'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Node'
    TypeOperator
      ArrayType
        TypeReference
          Identifier: ' Node'
    Block
      IfStatement
        BinaryExpression
          PropertyAccessExpression
            Identifier: 'node'
            Identifier: 'kind'
          EqualsEqualsEqualsToken
          PropertyAccessExpression
            Identifier: ' SyntaxKind'
            Identifier: 'SyntaxList'
        Block
          ExpressionStatement
            CallExpression
              PropertyAccessExpression
                Identifier: '
        // SyntaxList children are always eagerly created in the process of
        // creating their parent's `children` list. We shouldn't need to set them here.
        Debug'
                Identifier: 'fail'
              StringLiteral
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' map'
            CallExpression
              PropertyAccessExpression
                Identifier: ' sourceFileToNodeChildren'
                Identifier: 'get'
              Identifier: 'sourceFile'
      IfStatement
        BinaryExpression
          Identifier: 'map'
          EqualsEqualsEqualsToken
          Identifier: ' undefined'
        Block
          ExpressionStatement
            BinaryExpression
              Identifier: '
        map'
              EqualsToken
              NewExpression
                Identifier: ' WeakMap'
          ExpressionStatement
            CallExpression
              PropertyAccessExpression
                Identifier: '
        sourceFileToNodeChildren'
                Identifier: 'set'
              Identifier: 'sourceFile'
              Identifier: ' map'
      ExpressionStatement
        CallExpression
          PropertyAccessExpression
            Identifier: '
    map'
            Identifier: 'set'
          Identifier: 'node'
          Identifier: ' children'
      ReturnStatement
        Identifier: ' children'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' unsetNodeChildren'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Node'
    Parameter
      Identifier: ' origSourceFile'
      TypeReference
        Identifier: ' SourceFileLike'
    VoidKeyword
    Block
      IfStatement
        BinaryExpression
          PropertyAccessExpression
            Identifier: 'node'
            Identifier: 'kind'
          EqualsEqualsEqualsToken
          PropertyAccessExpression
            Identifier: ' SyntaxKind'
            Identifier: 'SyntaxList'
        Block
          ExpressionStatement
            CallExpression
              PropertyAccessExpression
                Identifier: '
        // Syntax lists are synthesized and we store their children directly on them.
        // They are a special case where we expect incremental parsing to toss them away entirely
        // if a change intersects with their containing parents.
        Debug'
                Identifier: 'fail'
              StringLiteral
      ExpressionStatement
        CallExpression
          PropertyAccessExpression
            CallExpression
              PropertyAccessExpression
                Identifier: '
    sourceFileToNodeChildren'
                Identifier: 'get'
              Identifier: 'origSourceFile'
            QuestionDotToken
            Identifier: 'delete'
          Identifier: 'node'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' transferSourceFileChildren'
    Parameter
      Identifier: 'sourceFile'
      TypeReference
        Identifier: ' SourceFileLike'
    Parameter
      Identifier: ' targetSourceFile'
      TypeReference
        Identifier: ' SourceFileLike'
    VoidKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' map'
            CallExpression
              PropertyAccessExpression
                Identifier: ' sourceFileToNodeChildren'
                Identifier: 'get'
              Identifier: 'sourceFile'
      IfStatement
        BinaryExpression
          Identifier: 'map'
          ExclamationEqualsEqualsToken
          Identifier: ' undefined'
        Block
          ExpressionStatement
            CallExpression
              PropertyAccessExpression
                Identifier: '
        sourceFileToNodeChildren'
                Identifier: 'delete'
              Identifier: 'sourceFile'
          ExpressionStatement
            CallExpression
              PropertyAccessExpression
                Identifier: '
        sourceFileToNodeChildren'
                Identifier: 'set'
              Identifier: 'targetSourceFile'
              Identifier: ' map'
