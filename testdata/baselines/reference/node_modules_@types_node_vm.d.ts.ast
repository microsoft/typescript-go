SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' ImportAttributes'
        StringLiteral
      InterfaceDeclaration
        Identifier: ' Context'
        HeritageClause
          ExpressionWithTypeArguments
            PropertyAccessExpression
              Identifier: ' NodeJS'
              Identifier: 'Dict'
            AnyKeyword
      InterfaceDeclaration
        Identifier: ' BaseOptions'
        PropertySignature
          Identifier: '
        /**
         * Specifies the filename used in stack traces produced by this script.
         * @default ''
         */
        filename'
          QuestionToken
          UnionType
            StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Specifies the line number offset that is displayed in stack traces produced by this script.
         * @default 0
         */
        lineOffset'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Specifies the column number offset that is displayed in stack traces produced by this script.
         * @default 0
         */
        columnOffset'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' ScriptOptions'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' BaseOptions'
        PropertySignature
          Identifier: '
        /**
         * V8's code cache data for the supplied source.
         */
        cachedData'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' Buffer'
            TypeReference
              QualifiedName
                Identifier: ' NodeJS'
                Identifier: 'ArrayBufferView'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /** @deprecated in favor of `script.createCachedData()` */
        produceCachedData'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Used to specify how the modules should be loaded during the evaluation of this script when `import()` is called. This option is
         * part of the experimental modules API. We do not recommend using it in a production environment. For detailed information, see
         * [Support of dynamic `import()` in compilation APIs](https://nodejs.org/docs/latest-v22.x/api/vm.html#support-of-dynamic-import-in-compilation-apis).
         */
        importModuleDynamically'
          QuestionToken
          UnionType
            ParenthesizedType
              FunctionType
                Parameter
                  Identifier: 'specifier'
                  StringKeyword
                Parameter
                  Identifier: ' script'
                  TypeReference
                    Identifier: ' Script'
                Parameter
                  Identifier: ' importAttributes'
                  TypeReference
                    Identifier: ' ImportAttributes'
                TypeReference
                  Identifier: ' Module'
            TypeQuery
              QualifiedName
                Identifier: ' constants'
                Identifier: 'USE_MAIN_CONTEXT_DEFAULT_LOADER'
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' RunningScriptOptions'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' BaseOptions'
        PropertySignature
          Identifier: '
        /**
         * When `true`, if an `Error` occurs while compiling the `code`, the line of code causing the error is attached to the stack trace.
         * @default true
         */
        displayErrors'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Specifies the number of milliseconds to execute code before terminating execution.
         * If execution is terminated, an `Error` will be thrown. This value must be a strictly positive integer.
         */
        timeout'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * If `true`, the execution will be terminated when `SIGINT` (Ctrl+C) is received.
         * Existing handlers for the event that have been attached via `process.on('SIGINT')` will be disabled during script execution, but will continue to work after that.
         * If execution is terminated, an `Error` will be thrown.
         * @default false
         */
        breakOnSigint'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' RunningScriptInNewContextOptions'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' RunningScriptOptions'
        PropertySignature
          Identifier: '
        /**
         * Human-readable name of the newly created context.
         */
        contextName'
          QuestionToken
          IndexedAccessType
            TypeReference
              Identifier: ' CreateContextOptions'
            LiteralType
              StringLiteral
        PropertySignature
          Identifier: '
        /**
         * Origin corresponding to the newly created context for display purposes. The origin should be formatted like a URL,
         * but with only the scheme, host, and port (if necessary), like the value of the `url.origin` property of a `URL` object.
         * Most notably, this string should omit the trailing slash, as that denotes a path.
         */
        contextOrigin'
          QuestionToken
          IndexedAccessType
            TypeReference
              Identifier: ' CreateContextOptions'
            LiteralType
              StringLiteral
        PropertySignature
          Identifier: '
        contextCodeGeneration'
          QuestionToken
          IndexedAccessType
            TypeReference
              Identifier: ' CreateContextOptions'
            LiteralType
              StringLiteral
        PropertySignature
          Identifier: '
        /**
         * If set to `afterEvaluate`, microtasks will be run immediately after the script has run.
         */
        microtaskMode'
          QuestionToken
          IndexedAccessType
            TypeReference
              Identifier: ' CreateContextOptions'
            LiteralType
              StringLiteral
      InterfaceDeclaration
        Identifier: ' RunningCodeOptions'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' RunningScriptOptions'
        PropertySignature
          Identifier: '
        cachedData'
          QuestionToken
          IndexedAccessType
            TypeReference
              Identifier: ' ScriptOptions'
            LiteralType
              StringLiteral
        PropertySignature
          Identifier: '
        importModuleDynamically'
          QuestionToken
          IndexedAccessType
            TypeReference
              Identifier: ' ScriptOptions'
            LiteralType
              StringLiteral
      InterfaceDeclaration
        Identifier: ' RunningCodeInNewContextOptions'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' RunningScriptInNewContextOptions'
        PropertySignature
          Identifier: '
        cachedData'
          QuestionToken
          IndexedAccessType
            TypeReference
              Identifier: ' ScriptOptions'
            LiteralType
              StringLiteral
        PropertySignature
          Identifier: '
        importModuleDynamically'
          QuestionToken
          IndexedAccessType
            TypeReference
              Identifier: ' ScriptOptions'
            LiteralType
              StringLiteral
      InterfaceDeclaration
        Identifier: ' CompileFunctionOptions'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' BaseOptions'
        PropertySignature
          Identifier: '
        /**
         * Provides an optional data with V8's code cache data for the supplied source.
         */
        cachedData'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' Buffer'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Specifies whether to produce new cache data.
         * @default false
         */
        produceCachedData'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The sandbox/context in which the said function should be compiled in.
         */
        parsingContext'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' Context'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * An array containing a collection of context extensions (objects wrapping the current scope) to be applied while compiling
         */
        contextExtensions'
          QuestionToken
          UnionType
            ArrayType
              TypeReference
                Identifier: ' Object'
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' CreateContextOptions'
        PropertySignature
          Identifier: '
        /**
         * Human-readable name of the newly created context.
         * @default 'VM Context i' Where i is an ascending numerical index of the created context.
         */
        name'
          QuestionToken
          UnionType
            StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Corresponds to the newly created context for display purposes.
         * The origin should be formatted like a `URL`, but with only the scheme, host, and port (if necessary),
         * like the value of the `url.origin` property of a URL object.
         * Most notably, this string should omit the trailing slash, as that denotes a path.
         * @default ''
         */
        origin'
          QuestionToken
          UnionType
            StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        codeGeneration'
          QuestionToken
          UnionType
            TypeLiteral
              PropertySignature
                Identifier: '
                /**
                 * If set to false any calls to eval or function constructors (Function, GeneratorFunction, etc)
                 * will throw an EvalError.
                 * @default true
                 */
                strings'
                QuestionToken
                UnionType
                  BooleanKeyword
                  UndefinedKeyword
              PropertySignature
                Identifier: '
                /**
                 * If set to false any attempt to compile a WebAssembly module will throw a WebAssembly.CompileError.
                 * @default true
                 */
                wasm'
                QuestionToken
                UnionType
                  BooleanKeyword
                  UndefinedKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * If set to `afterEvaluate`, microtasks will be run immediately after the script has run.
         */
        microtaskMode'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            UndefinedKeyword
      TypeAliasDeclaration
        Identifier: ' MeasureMemoryMode'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      InterfaceDeclaration
        Identifier: ' MeasureMemoryOptions'
        PropertySignature
          Identifier: '
        /**
         * @default 'summary'
         */
        mode'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' MeasureMemoryMode'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * @default 'default'
         */
        execution'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' MemoryMeasurement'
        PropertySignature
          Identifier: '
        total'
          TypeLiteral
            PropertySignature
              Identifier: '
            jsMemoryEstimate'
              NumberKeyword
            PropertySignature
              Identifier: '
            jsMemoryRange'
              TupleType
                NumberKeyword
                NumberKeyword
      ClassDeclaration
        Identifier: ' Script'
        Constructor
          Parameter
            Identifier: 'code'
            StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' ScriptOptions'
              StringKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Runs the compiled code contained by the `vm.Script` object within the given `contextifiedObject` and returns the result. Running code does not have access
         * to local scope.
         *
         * The following example compiles code that increments a global variable, sets
         * the value of another global variable, then execute the code multiple times.
         * The globals are contained in the `context` object.
         *
         * ```js
         * const vm = require('node:vm');
         *
         * const context = {
         *   animal: 'cat',
         *   count: 2,
         * };
         *
         * const script = new vm.Script('count += 1; name = "kitty";');
         *
         * vm.createContext(context);
         * for (let i = 0; i < 10; ++i) {
         *   script.runInContext(context);
         * }
         *
         * console.log(context);
         * // Prints: { animal: 'cat', count: 12, name: 'kitty' }
         * ```
         *
         * Using the `timeout` or `breakOnSigint` options will result in new event loops
         * and corresponding threads being started, which have a non-zero performance
         * overhead.
         * @since v0.3.1
         * @param contextifiedObject A `contextified` object as returned by the `vm.createContext()` method.
         * @return the result of the very last statement executed in the script.
         */
        runInContext'
          Parameter
            Identifier: 'contextifiedObject'
            TypeReference
              Identifier: ' Context'
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' RunningScriptOptions'
          AnyKeyword
        MethodDeclaration
          Identifier: '
        /**
         * First contextifies the given `contextObject`, runs the compiled code contained
         * by the `vm.Script` object within the created context, and returns the result.
         * Running code does not have access to local scope.
         *
         * The following example compiles code that sets a global variable, then executes
         * the code multiple times in different contexts. The globals are set on and
         * contained within each individual `context`.
         *
         * ```js
         * const vm = require('node:vm');
         *
         * const script = new vm.Script('globalVar = "set"');
         *
         * const contexts = [{}, {}, {}];
         * contexts.forEach((context) => {
         *   script.runInNewContext(context);
         * });
         *
         * console.log(contexts);
         * // Prints: [{ globalVar: 'set' }, { globalVar: 'set' }, { globalVar: 'set' }]
         * ```
         * @since v0.3.1
         * @param contextObject An object that will be `contextified`. If `undefined`, a new object will be created.
         * @return the result of the very last statement executed in the script.
         */
        runInNewContext'
          Parameter
            Identifier: 'contextObject'
            QuestionToken
            TypeReference
              Identifier: ' Context'
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' RunningScriptInNewContextOptions'
          AnyKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Runs the compiled code contained by the `vm.Script` within the context of the
         * current `global` object. Running code does not have access to local scope, but _does_ have access to the current `global` object.
         *
         * The following example compiles code that increments a `global` variable then
         * executes that code multiple times:
         *
         * ```js
         * const vm = require('node:vm');
         *
         * global.globalVar = 0;
         *
         * const script = new vm.Script('globalVar += 1', { filename: 'myfile.vm' });
         *
         * for (let i = 0; i < 1000; ++i) {
         *   script.runInThisContext();
         * }
         *
         * console.log(globalVar);
         *
         * // 1000
         * ```
         * @since v0.3.1
         * @return the result of the very last statement executed in the script.
         */
        runInThisContext'
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              Identifier: ' RunningScriptOptions'
          AnyKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Creates a code cache that can be used with the `Script` constructor's `cachedData` option. Returns a `Buffer`. This method may be called at any
         * time and any number of times.
         *
         * The code cache of the `Script` doesn't contain any JavaScript observable
         * states. The code cache is safe to be saved along side the script source and
         * used to construct new `Script` instances multiple times.
         *
         * Functions in the `Script` source can be marked as lazily compiled and they are
         * not compiled at construction of the `Script`. These functions are going to be
         * compiled when they are invoked the first time. The code cache serializes the
         * metadata that V8 currently knows about the `Script` that it can use to speed up
         * future compilations.
         *
         * ```js
         * const script = new vm.Script(`
         * function add(a, b) {
         *   return a + b;
         * }
         *
         * const x = add(1, 2);
         * `);
         *
         * const cacheWithoutAdd = script.createCachedData();
         * // In `cacheWithoutAdd` the function `add()` is marked for full compilation
         * // upon invocation.
         *
         * script.runInThisContext();
         *
         * const cacheWithAdd = script.createCachedData();
         * // `cacheWithAdd` contains fully compiled function `add()`.
         * ```
         * @since v10.6.0
         */
        createCachedData'
          TypeReference
            Identifier: ' Buffer'
        PropertyDeclaration
          Identifier: '
        /** @deprecated in favor of `script.createCachedData()` */
        cachedDataProduced'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * When `cachedData` is supplied to create the `vm.Script`, this value will be set
         * to either `true` or `false` depending on acceptance of the data by V8.
         * Otherwise the value is `undefined`.
         * @since v5.7.0
         */
        cachedDataRejected'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertyDeclaration
          Identifier: '
        cachedData'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' Buffer'
            UndefinedKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * When the script is compiled from a source that contains a source map magic
         * comment, this property will be set to the URL of the source map.
         *
         * ```js
         * import vm from 'node:vm';
         *
         * const script = new vm.Script(`
         * function myFunc() {}
         * //# sourceMappingURL=sourcemap.json
         * `);
         *
         * console.log(script.sourceMapURL);
         * // Prints: sourcemap.json
         * ```
         * @since v19.1.0, v18.13.0
         */
        sourceMapURL'
          QuestionToken
          UnionType
            StringKeyword
            UndefinedKeyword
      FunctionDeclaration
        Identifier: ' createContext'
        Parameter
          Identifier: 'sandbox'
          QuestionToken
          TypeReference
            Identifier: ' Context'
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' CreateContextOptions'
        TypeReference
          Identifier: ' Context'
      FunctionDeclaration
        Identifier: ' isContext'
        Parameter
          Identifier: 'sandbox'
          TypeReference
            Identifier: ' Context'
        BooleanKeyword
      FunctionDeclaration
        Identifier: ' runInContext'
        Parameter
          Identifier: 'code'
          StringKeyword
        Parameter
          Identifier: ' contextifiedObject'
          TypeReference
            Identifier: ' Context'
        Parameter
          Identifier: ' options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' RunningCodeOptions'
            StringKeyword
        AnyKeyword
      FunctionDeclaration
        Identifier: ' runInNewContext'
        Parameter
          Identifier: '
        code'
          StringKeyword
        Parameter
          Identifier: '
        contextObject'
          QuestionToken
          TypeReference
            Identifier: ' Context'
        Parameter
          Identifier: '
        options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' RunningCodeInNewContextOptions'
            StringKeyword
        AnyKeyword
      FunctionDeclaration
        Identifier: ' runInThisContext'
        Parameter
          Identifier: 'code'
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' RunningCodeOptions'
            StringKeyword
        AnyKeyword
      FunctionDeclaration
        Identifier: ' compileFunction'
        Parameter
          Identifier: '
        code'
          StringKeyword
        Parameter
          Identifier: '
        params'
          QuestionToken
          TypeOperator
            ArrayType
              StringKeyword
        Parameter
          Identifier: '
        options'
          QuestionToken
          TypeReference
            Identifier: ' CompileFunctionOptions'
        IntersectionType
          TypeReference
            Identifier: ' Function'
          TypeLiteral
            PropertySignature
              Identifier: '
        cachedData'
              QuestionToken
              UnionType
                IndexedAccessType
                  TypeReference
                    Identifier: ' Script'
                  LiteralType
                    StringLiteral
                UndefinedKeyword
            PropertySignature
              Identifier: '
        cachedDataProduced'
              QuestionToken
              UnionType
                IndexedAccessType
                  TypeReference
                    Identifier: ' Script'
                  LiteralType
                    StringLiteral
                UndefinedKeyword
            PropertySignature
              Identifier: '
        cachedDataRejected'
              QuestionToken
              UnionType
                IndexedAccessType
                  TypeReference
                    Identifier: ' Script'
                  LiteralType
                    StringLiteral
                UndefinedKeyword
      FunctionDeclaration
        Identifier: ' measureMemory'
        Parameter
          Identifier: 'options'
          QuestionToken
          TypeReference
            Identifier: ' MeasureMemoryOptions'
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'MemoryMeasurement'
      InterfaceDeclaration
        Identifier: ' ModuleEvaluateOptions'
        PropertySignature
          Identifier: '
        timeout'
          QuestionToken
          UnionType
            IndexedAccessType
              TypeReference
                Identifier: ' RunningScriptOptions'
              LiteralType
                StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        breakOnSigint'
          QuestionToken
          UnionType
            IndexedAccessType
              TypeReference
                Identifier: ' RunningScriptOptions'
              LiteralType
                StringLiteral
            UndefinedKeyword
      TypeAliasDeclaration
        Identifier: ' ModuleLinker'
        FunctionType
          Parameter
            Identifier: '
        specifier'
            StringKeyword
          Parameter
            Identifier: '
        referencingModule'
            TypeReference
              Identifier: ' Module'
          Parameter
            Identifier: '
        extra'
            TypeLiteral
              PropertySignature
                Identifier: '
            attributes'
                TypeReference
                  Identifier: ' ImportAttributes'
          UnionType
            TypeReference
              Identifier: ' Module'
            TypeReference
              Identifier: ' Promise'
              TypeReference
                Identifier: 'Module'
      TypeAliasDeclaration
        Identifier: ' ModuleStatus'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      ClassDeclaration
        Identifier: ' Module'
        PropertyDeclaration
          Identifier: '
        /**
         * The specifiers of all dependencies of this module. The returned array is frozen
         * to disallow any changes to it.
         *
         * Corresponds to the `[[RequestedModules]]` field of [Cyclic Module Record](https://tc39.es/ecma262/#sec-cyclic-module-records) s in
         * the ECMAScript specification.
         */
        dependencySpecifiers'
          TypeOperator
            ArrayType
              StringKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * If the `module.status` is `'errored'`, this property contains the exception
         * thrown by the module during evaluation. If the status is anything else,
         * accessing this property will result in a thrown exception.
         *
         * The value `undefined` cannot be used for cases where there is not a thrown
         * exception due to possible ambiguity with `throw undefined;`.
         *
         * Corresponds to the `[[EvaluationError]]` field of [Cyclic Module Record](https://tc39.es/ecma262/#sec-cyclic-module-records) s
         * in the ECMAScript specification.
         */
        error'
          AnyKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * The identifier of the current module, as set in the constructor.
         */
        identifier'
          StringKeyword
        PropertyDeclaration
          Identifier: '
        context'
          TypeReference
            Identifier: ' Context'
        PropertyDeclaration
          Identifier: '
        /**
         * The namespace object of the module. This is only available after linking
         * (`module.link()`) has completed.
         *
         * Corresponds to the [GetModuleNamespace](https://tc39.es/ecma262/#sec-getmodulenamespace) abstract operation in the ECMAScript
         * specification.
         */
        namespace'
          TypeReference
            Identifier: ' Object'
        PropertyDeclaration
          Identifier: '
        /**
         * The current status of the module. Will be one of:
         *
         * * `'unlinked'`: `module.link()` has not yet been called.
         * * `'linking'`: `module.link()` has been called, but not all Promises returned
         * by the linker function have been resolved yet.
         * * `'linked'`: The module has been linked successfully, and all of its
         * dependencies are linked, but `module.evaluate()` has not yet been called.
         * * `'evaluating'`: The module is being evaluated through a `module.evaluate()` on
         * itself or a parent module.
         * * `'evaluated'`: The module has been successfully evaluated.
         * * `'errored'`: The module has been evaluated, but an exception was thrown.
         *
         * Other than `'errored'`, this status string corresponds to the specification's [Cyclic Module Record](https://tc39.es/ecma262/#sec-cyclic-module-records)'s `[[Status]]` field. `'errored'`
         * corresponds to `'evaluated'` in the specification, but with `[[EvaluationError]]` set to a
         * value that is not `undefined`.
         */
        status'
          TypeReference
            Identifier: ' ModuleStatus'
        MethodDeclaration
          Identifier: '
        /**
         * Evaluate the module.
         *
         * This must be called after the module has been linked; otherwise it will reject.
         * It could be called also when the module has already been evaluated, in which
         * case it will either do nothing if the initial evaluation ended in success
         * (`module.status` is `'evaluated'`) or it will re-throw the exception that the
         * initial evaluation resulted in (`module.status` is `'errored'`).
         *
         * This method cannot be called while the module is being evaluated
         * (`module.status` is `'evaluating'`).
         *
         * Corresponds to the [Evaluate() concrete method](https://tc39.es/ecma262/#sec-moduleevaluation) field of [Cyclic Module Record](https://tc39.es/ecma262/#sec-cyclic-module-records) s in the
         * ECMAScript specification.
         * @return Fulfills with `undefined` upon success.
         */
        evaluate'
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              Identifier: ' ModuleEvaluateOptions'
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Link module dependencies. This method must be called before evaluation, and
         * can only be called once per module.
         *
         * The function is expected to return a `Module` object or a `Promise` that
         * eventually resolves to a `Module` object. The returned `Module` must satisfy the
         * following two invariants:
         *
         * * It must belong to the same context as the parent `Module`.
         * * Its `status` must not be `'errored'`.
         *
         * If the returned `Module`'s `status` is `'unlinked'`, this method will be
         * recursively called on the returned `Module` with the same provided `linker` function.
         *
         * `link()` returns a `Promise` that will either get resolved when all linking
         * instances resolve to a valid `Module`, or rejected if the linker function either
         * throws an exception or returns an invalid `Module`.
         *
         * The linker function roughly corresponds to the implementation-defined [HostResolveImportedModule](https://tc39.es/ecma262/#sec-hostresolveimportedmodule) abstract operation in the
         * ECMAScript
         * specification, with a few key differences:
         *
         * * The linker function is allowed to be asynchronous while [HostResolveImportedModule](https://tc39.es/ecma262/#sec-hostresolveimportedmodule) is synchronous.
         *
         * The actual [HostResolveImportedModule](https://tc39.es/ecma262/#sec-hostresolveimportedmodule) implementation used during module
         * linking is one that returns the modules linked during linking. Since at
         * that point all modules would have been fully linked already, the [HostResolveImportedModule](https://tc39.es/ecma262/#sec-hostresolveimportedmodule) implementation is fully synchronous per
         * specification.
         *
         * Corresponds to the [Link() concrete method](https://tc39.es/ecma262/#sec-moduledeclarationlinking) field of [Cyclic Module Record](https://tc39.es/ecma262/#sec-cyclic-module-records) s in
         * the ECMAScript specification.
         */
        link'
          Parameter
            Identifier: 'linker'
            TypeReference
              Identifier: ' ModuleLinker'
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
      InterfaceDeclaration
        Identifier: ' SourceTextModuleOptions'
        PropertySignature
          Identifier: '
        /**
         * String used in stack traces.
         * @default 'vm:module(i)' where i is a context-specific ascending index.
         */
        identifier'
          QuestionToken
          UnionType
            StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        cachedData'
          QuestionToken
          UnionType
            IndexedAccessType
              TypeReference
                Identifier: ' ScriptOptions'
              LiteralType
                StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        context'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' Context'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        lineOffset'
          QuestionToken
          UnionType
            IndexedAccessType
              TypeReference
                Identifier: ' BaseOptions'
              LiteralType
                StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        columnOffset'
          QuestionToken
          UnionType
            IndexedAccessType
              TypeReference
                Identifier: ' BaseOptions'
              LiteralType
                StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Called during evaluation of this module to initialize the `import.meta`.
         */
        initializeImportMeta'
          QuestionToken
          UnionType
            ParenthesizedType
              FunctionType
                Parameter
                  Identifier: 'meta'
                  TypeReference
                    Identifier: ' ImportMeta'
                Parameter
                  Identifier: ' module'
                  TypeReference
                    Identifier: ' SourceTextModule'
                VoidKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        importModuleDynamically'
          QuestionToken
          UnionType
            IndexedAccessType
              TypeReference
                Identifier: ' ScriptOptions'
              LiteralType
                StringLiteral
            UndefinedKeyword
      ClassDeclaration
        Identifier: ' SourceTextModule'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Module'
        Constructor
          Parameter
            Identifier: 'code'
            StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' SourceTextModuleOptions'
      InterfaceDeclaration
        Identifier: ' SyntheticModuleOptions'
        PropertySignature
          Identifier: '
        /**
         * String used in stack traces.
         * @default 'vm:module(i)' where i is a context-specific ascending index.
         */
        identifier'
          QuestionToken
          UnionType
            StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The contextified object as returned by the `vm.createContext()` method, to compile and evaluate this module in.
         */
        context'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' Context'
            UndefinedKeyword
      ClassDeclaration
        Identifier: ' SyntheticModule'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Module'
        Constructor
          Parameter
            Identifier: '
            exportNames'
            ArrayType
              StringKeyword
          Parameter
            Identifier: '
            evaluateCallback'
            FunctionType
              Parameter
                Identifier: 'this'
                TypeReference
                  Identifier: ' SyntheticModule'
              VoidKeyword
          Parameter
            Identifier: '
            options'
            QuestionToken
            TypeReference
              Identifier: ' SyntheticModuleOptions'
        MethodDeclaration
          Identifier: '
        /**
         * This method is used after the module is linked to set the values of exports. If
         * it is called before the module is linked, an `ERR_VM_MODULE_STATUS` error
         * will be thrown.
         *
         * ```js
         * import vm from 'node:vm';
         *
         * const m = new vm.SyntheticModule(['x'], () => {
         *   m.setExport('x', 1);
         * });
         *
         * await m.link(() => {});
         * await m.evaluate();
         *
         * assert.strictEqual(m.namespace.x, 1);
         * ```
         * @since v13.0.0, v12.16.0
         * @param name Name of the export to set.
         * @param value The value to set the export to.
         */
        setExport'
          Parameter
            Identifier: 'name'
            StringKeyword
          Parameter
            Identifier: ' value'
            AnyKeyword
          VoidKeyword
      ModuleDeclaration
        Identifier: ' constants'
        ModuleBlock
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' USE_MAIN_CONTEXT_DEFAULT_LOADER'
                NumberKeyword
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ExportDeclaration
        StringLiteral
