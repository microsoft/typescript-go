SourceFile
  TypeAliasDeclaration
    Identifier: ' LiteralUnion'
    TypeParameter
      Identifier: 'LiteralType'
    TypeParameter
      Identifier: ' BaseType'
      UnionType
        StringKeyword
        NumberKeyword
    UnionType
      TypeReference
        Identifier: ' LiteralType'
      ParenthesizedType
        IntersectionType
          TypeReference
            Identifier: 'BaseType'
          TypeReference
            Identifier: ' Record'
            NeverKeyword
            NeverKeyword
  ClassDeclaration
    ExportKeyword
    Identifier: ' CommanderError'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Error'
    PropertyDeclaration
      Identifier: '
  code'
      StringKeyword
    PropertyDeclaration
      Identifier: '
  exitCode'
      NumberKeyword
    PropertyDeclaration
      Identifier: '
  message'
      StringKeyword
    PropertyDeclaration
      Identifier: '
  nestedError'
      QuestionToken
      StringKeyword
    Constructor
      Parameter
        Identifier: 'exitCode'
        NumberKeyword
      Parameter
        Identifier: ' code'
        StringKeyword
      Parameter
        Identifier: ' message'
        StringKeyword
  ClassDeclaration
    ExportKeyword
    Identifier: ' InvalidArgumentError'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CommanderError'
    Constructor
      Parameter
        Identifier: 'message'
        StringKeyword
  ExportDeclaration
    NamedExports
      ExportSpecifier
        Identifier: ' InvalidArgumentError'
        Identifier: ' InvalidOptionArgumentError'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ErrorOptions'
    PropertySignature
      Identifier: '
  // optional parameter for error()
  /** an id string representing the error */
  code'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
  /** suggested exit code which could be used with process.exit */
  exitCode'
      QuestionToken
      NumberKeyword
  ClassDeclaration
    ExportKeyword
    Identifier: ' Argument'
    PropertyDeclaration
      Identifier: '
  description'
      StringKeyword
    PropertyDeclaration
      Identifier: '
  required'
      BooleanKeyword
    PropertyDeclaration
      Identifier: '
  variadic'
      BooleanKeyword
    PropertyDeclaration
      Identifier: '
  defaultValue'
      QuestionToken
      AnyKeyword
    PropertyDeclaration
      Identifier: '
  defaultValueDescription'
      QuestionToken
      StringKeyword
    PropertyDeclaration
      Identifier: '
  argChoices'
      QuestionToken
      ArrayType
        StringKeyword
    Constructor
      Parameter
        Identifier: 'arg'
        StringKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Return argument name.
   */
  name'
      StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Set the default value, and optionally supply the description to be displayed in the help.
   */
  default'
      Parameter
        Identifier: 'value'
        UnknownKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Set the custom handler for processing CLI command arguments into argument values.
   */
  argParser'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'fn'
        FunctionType
          Parameter
            Identifier: 'value'
            StringKeyword
          Parameter
            Identifier: ' previous'
            TypeReference
              Identifier: ' T'
          TypeReference
            Identifier: ' T'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Only allow argument value to be one of choices.
   */
  choices'
      Parameter
        Identifier: 'values'
        TypeOperator
          ArrayType
            StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Make argument required.
   */
  argRequired'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Make argument optional.
   */
  argOptional'
      ThisType
  ClassDeclaration
    ExportKeyword
    Identifier: ' Option'
    PropertyDeclaration
      Identifier: '
  flags'
      StringKeyword
    PropertyDeclaration
      Identifier: '
  description'
      StringKeyword
    PropertyDeclaration
      Identifier: '

  required'
      BooleanKeyword
    PropertyDeclaration
      Identifier: ' // A value must be supplied when the option is specified.
  optional'
      BooleanKeyword
    PropertyDeclaration
      Identifier: ' // A value is optional when the option is specified.
  variadic'
      BooleanKeyword
    PropertyDeclaration
      Identifier: '
  mandatory'
      BooleanKeyword
    PropertyDeclaration
      Identifier: ' // The option must have a value after parsing, which usually means it must be specified on command line.
  short'
      QuestionToken
      StringKeyword
    PropertyDeclaration
      Identifier: '
  long'
      QuestionToken
      StringKeyword
    PropertyDeclaration
      Identifier: '
  negate'
      BooleanKeyword
    PropertyDeclaration
      Identifier: '
  defaultValue'
      QuestionToken
      AnyKeyword
    PropertyDeclaration
      Identifier: '
  defaultValueDescription'
      QuestionToken
      StringKeyword
    PropertyDeclaration
      Identifier: '
  presetArg'
      QuestionToken
      UnknownKeyword
    PropertyDeclaration
      Identifier: '
  envVar'
      QuestionToken
      StringKeyword
    PropertyDeclaration
      Identifier: '
  parseArg'
      QuestionToken
      FunctionType
        TypeParameter
          Identifier: 'T'
        Parameter
          Identifier: 'value'
          StringKeyword
        Parameter
          Identifier: ' previous'
          TypeReference
            Identifier: ' T'
        TypeReference
          Identifier: ' T'
    PropertyDeclaration
      Identifier: '
  hidden'
      BooleanKeyword
    PropertyDeclaration
      Identifier: '
  argChoices'
      QuestionToken
      ArrayType
        StringKeyword
    Constructor
      Parameter
        Identifier: 'flags'
        StringKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Set the default value, and optionally supply the description to be displayed in the help.
   */
  default'
      Parameter
        Identifier: 'value'
        UnknownKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Preset to use when option used without option-argument, especially optional but also boolean and negated.
   * The custom processing (parseArg) is called.
   *
   * @example
   * ```ts
   * new Option('--color').default('GREYSCALE').preset('RGB');
   * new Option('--donate [amount]').preset('20').argParser(parseFloat);
   * ```
   */
  preset'
      Parameter
        Identifier: 'arg'
        UnknownKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Add option name(s) that conflict with this option.
   * An error will be displayed if conflicting options are found during parsing.
   *
   * @example
   * ```ts
   * new Option('--rgb').conflicts('cmyk');
   * new Option('--js').conflicts(['ts', 'jsx']);
   * ```
   */
  conflicts'
      Parameter
        Identifier: 'names'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Specify implied option values for when this option is set and the implied options are not.
   *
   * The custom processing (parseArg) is not called on the implied values.
   *
   * @example
   * program
   *   .addOption(new Option('--log', 'write logging information to file'))
   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));
   */
  implies'
      Parameter
        Identifier: 'optionValues'
        TypeReference
          Identifier: ' OptionValues'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Set environment variable to check for option value.
   *
   * An environment variables is only used if when processed the current option value is
   * undefined, or the source of the current value is 'default' or 'config' or 'env'.
   */
  env'
      Parameter
        Identifier: 'name'
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Set the custom handler for processing CLI option arguments into option values.
   */
  argParser'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'fn'
        FunctionType
          Parameter
            Identifier: 'value'
            StringKeyword
          Parameter
            Identifier: ' previous'
            TypeReference
              Identifier: ' T'
          TypeReference
            Identifier: ' T'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Whether the option is mandatory and must have a value after parsing.
   */
  makeOptionMandatory'
      Parameter
        Identifier: 'mandatory'
        QuestionToken
        BooleanKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Hide option in help.
   */
  hideHelp'
      Parameter
        Identifier: 'hide'
        QuestionToken
        BooleanKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Only allow option value to be one of choices.
   */
  choices'
      Parameter
        Identifier: 'values'
        TypeOperator
          ArrayType
            StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Return option name.
   */
  name'
      StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Return option name, in a camelcase format that can be used
   * as a object attribute key.
   */
  attributeName'
      StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Return whether a boolean option.
   *
   * Options are one of boolean, negated, required argument, or optional argument.
   */
  isBoolean'
      BooleanKeyword
  ClassDeclaration
    ExportKeyword
    Identifier: ' Help'
    PropertyDeclaration
      Identifier: '
  /** output helpWidth, long lines are wrapped to fit */
  helpWidth'
      QuestionToken
      NumberKeyword
    PropertyDeclaration
      Identifier: '
  sortSubcommands'
      BooleanKeyword
    PropertyDeclaration
      Identifier: '
  sortOptions'
      BooleanKeyword
    PropertyDeclaration
      Identifier: '
  showGlobalOptions'
      BooleanKeyword
    Constructor
    MethodDeclaration
      Identifier: '

  /** Get the command term to show in the list of subcommands. */
  subcommandTerm'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      StringKeyword
    MethodDeclaration
      Identifier: '
  /** Get the command summary to show in the list of subcommands. */
  subcommandDescription'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      StringKeyword
    MethodDeclaration
      Identifier: '
  /** Get the option term to show in the list of options. */
  optionTerm'
      Parameter
        Identifier: 'option'
        TypeReference
          Identifier: ' Option'
      StringKeyword
    MethodDeclaration
      Identifier: '
  /** Get the option description to show in the list of options. */
  optionDescription'
      Parameter
        Identifier: 'option'
        TypeReference
          Identifier: ' Option'
      StringKeyword
    MethodDeclaration
      Identifier: '
  /** Get the argument term to show in the list of arguments. */
  argumentTerm'
      Parameter
        Identifier: 'argument'
        TypeReference
          Identifier: ' Argument'
      StringKeyword
    MethodDeclaration
      Identifier: '
  /** Get the argument description to show in the list of arguments. */
  argumentDescription'
      Parameter
        Identifier: 'argument'
        TypeReference
          Identifier: ' Argument'
      StringKeyword
    MethodDeclaration
      Identifier: '

  /** Get the command usage to be displayed at the top of the built-in help. */
  commandUsage'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      StringKeyword
    MethodDeclaration
      Identifier: '
  /** Get the description for the command. */
  commandDescription'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      StringKeyword
    MethodDeclaration
      Identifier: '

  /** Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one. */
  visibleCommands'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      ArrayType
        TypeReference
          Identifier: ' Command'
    MethodDeclaration
      Identifier: '
  /** Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one. */
  visibleOptions'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      ArrayType
        TypeReference
          Identifier: ' Option'
    MethodDeclaration
      Identifier: '
  /** Get an array of the visible global options. (Not including help.) */
  visibleGlobalOptions'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      ArrayType
        TypeReference
          Identifier: ' Option'
    MethodDeclaration
      Identifier: '
  /** Get an array of the arguments which have descriptions. */
  visibleArguments'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      ArrayType
        TypeReference
          Identifier: ' Argument'
    MethodDeclaration
      Identifier: '

  /** Get the longest command term length. */
  longestSubcommandTermLength'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      Parameter
        Identifier: ' helper'
        TypeReference
          Identifier: ' Help'
      NumberKeyword
    MethodDeclaration
      Identifier: '
  /** Get the longest option term length. */
  longestOptionTermLength'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      Parameter
        Identifier: ' helper'
        TypeReference
          Identifier: ' Help'
      NumberKeyword
    MethodDeclaration
      Identifier: '
  /** Get the longest global option term length. */
  longestGlobalOptionTermLength'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      Parameter
        Identifier: ' helper'
        TypeReference
          Identifier: ' Help'
      NumberKeyword
    MethodDeclaration
      Identifier: '
  /** Get the longest argument term length. */
  longestArgumentTermLength'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      Parameter
        Identifier: ' helper'
        TypeReference
          Identifier: ' Help'
      NumberKeyword
    MethodDeclaration
      Identifier: '
  /** Calculate the pad width from the maximum term length. */
  padWidth'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      Parameter
        Identifier: ' helper'
        TypeReference
          Identifier: ' Help'
      NumberKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Wrap the given string to width characters per line, with lines after the first indented.
   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.
   */
  wrap'
      Parameter
        Identifier: '
    str'
        StringKeyword
      Parameter
        Identifier: '
    width'
        NumberKeyword
      Parameter
        Identifier: '
    indent'
        NumberKeyword
      Parameter
        Identifier: '
    minColumnWidth'
        QuestionToken
        NumberKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '

  /** Generate the built-in help text. */
  formatHelp'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      Parameter
        Identifier: ' helper'
        TypeReference
          Identifier: ' Help'
      StringKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HelpConfiguration'
    TypeReference
      Identifier: ' Partial'
      TypeReference
        Identifier: 'Help'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ParseOptions'
    PropertySignature
      Identifier: '
  from'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' HelpContext'
    PropertySignature
      Identifier: '
  // optional parameter for .help() and .outputHelp()
  error'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AddHelpTextContext'
    PropertySignature
      Identifier: '
  // passed to text function used with .addHelpText()
  error'
      BooleanKeyword
    PropertySignature
      Identifier: '
  command'
      TypeReference
        Identifier: ' Command'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' OutputConfiguration'
    MethodSignature
      Identifier: '
  writeOut'
      QuestionToken
      Parameter
        Identifier: 'str'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  writeErr'
      QuestionToken
      Parameter
        Identifier: 'str'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  getOutHelpWidth'
      QuestionToken
      NumberKeyword
    MethodSignature
      Identifier: '
  getErrHelpWidth'
      QuestionToken
      NumberKeyword
    MethodSignature
      Identifier: '
  outputError'
      QuestionToken
      Parameter
        Identifier: 'str'
        StringKeyword
      Parameter
        Identifier: ' write'
        FunctionType
          Parameter
            Identifier: 'str'
            StringKeyword
          VoidKeyword
      VoidKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AddHelpTextPosition'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HookEvent'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' OptionValueSource'
    UnionType
      TypeReference
        Identifier: ' LiteralUnion'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
        StringKeyword
      UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' OptionValues'
    TypeReference
      Identifier: ' Record'
      StringKeyword
      AnyKeyword
  ClassDeclaration
    ExportKeyword
    Identifier: ' Command'
    PropertyDeclaration
      Identifier: '
  args'
      ArrayType
        StringKeyword
    PropertyDeclaration
      Identifier: '
  processedArgs'
      ArrayType
        AnyKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' commands'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Command'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' options'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Option'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' registeredArguments'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Argument'
    PropertyDeclaration
      Identifier: '
  parent'
      UnionType
        TypeReference
          Identifier: ' Command'
        LiteralType
          NullKeyword
    Constructor
      Parameter
        Identifier: 'name'
        QuestionToken
        StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Set the program version to `str`.
   *
   * This method auto-registers the "-V, --version" flag
   * which will print the version number when passed.
   *
   * You can optionally supply the  flags and description to override the defaults.
   */
  version'
      Parameter
        Identifier: 'str'
        StringKeyword
      Parameter
        Identifier: ' flags'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  /**
   * Get the program version.
   */
  version'
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Define a command, implemented using an action handler.
   *
   * @remarks
   * The command description is supplied using `.description`, not as a parameter to `.command`.
   *
   * @example
   * ```ts
   * program
   *   .command('clone <source> [destination]')
   *   .description('clone a repository into a newly created directory')
   *   .action((source, destination) => {
   *     console.log('clone command called');
   *   });
   * ```
   *
   * @param nameAndArgs - command name and arguments, args are  `<required>` or `[optional]` and last may also be `variadic...`
   * @param opts - configuration options
   * @returns new command
   */
  command'
      Parameter
        Identifier: '
    nameAndArgs'
        StringKeyword
      Parameter
        Identifier: '
    opts'
        QuestionToken
        TypeReference
          Identifier: ' CommandOptions'
      TypeReference
        Identifier: ' ReturnType'
        IndexedAccessType
          ThisType
          LiteralType
            StringLiteral
    MethodDeclaration
      Identifier: '
  /**
   * Define a command, implemented in a separate executable file.
   *
   * @remarks
   * The command description is supplied as the second parameter to `.command`.
   *
   * @example
   * ```ts
   *  program
   *    .command('start <service>', 'start named service')
   *    .command('stop [service]', 'stop named service, or all if no name supplied');
   * ```
   *
   * @param nameAndArgs - command name and arguments, args are  `<required>` or `[optional]` and last may also be `variadic...`
   * @param description - description of executable command
   * @param opts - configuration options
   * @returns `this` command for chaining
   */
  command'
      Parameter
        Identifier: '
    nameAndArgs'
        StringKeyword
      Parameter
        Identifier: '
    description'
        StringKeyword
      Parameter
        Identifier: '
    opts'
        QuestionToken
        TypeReference
          Identifier: ' ExecutableCommandOptions'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Factory routine to create a new unattached command.
   *
   * See .command() for creating an attached subcommand, which uses this routine to
   * create the command. You can override createCommand to customise subcommands.
   */
  createCommand'
      Parameter
        Identifier: 'name'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Command'
    MethodDeclaration
      Identifier: '

  /**
   * Add a prepared subcommand.
   *
   * See .command() for creating an attached subcommand which inherits settings from its parent.
   *
   * @returns `this` command for chaining
   */
  addCommand'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      Parameter
        Identifier: ' opts'
        QuestionToken
        TypeReference
          Identifier: ' CommandOptions'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Factory routine to create a new unattached argument.
   *
   * See .argument() for creating an attached argument, which uses this routine to
   * create the argument. You can override createArgument to return a custom argument.
   */
  createArgument'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Argument'
    MethodDeclaration
      Identifier: '

  /**
   * Define argument syntax for command.
   *
   * The default is that the argument is required, and you can explicitly
   * indicate this with <> around the name. Put [] around the name for an optional argument.
   *
   * @example
   * ```
   * program.argument('<input-file>');
   * program.argument('[output-file]');
   * ```
   *
   * @returns `this` command for chaining
   */
  argument'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: '
    flags'
        StringKeyword
      Parameter
        Identifier: '
    description'
        StringKeyword
      Parameter
        Identifier: '
    fn'
        FunctionType
          Parameter
            Identifier: 'value'
            StringKeyword
          Parameter
            Identifier: ' previous'
            TypeReference
              Identifier: ' T'
          TypeReference
            Identifier: ' T'
      Parameter
        Identifier: '
    defaultValue'
        QuestionToken
        TypeReference
          Identifier: ' T'
      ThisType
    MethodDeclaration
      Identifier: '
  argument'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' defaultValue'
        QuestionToken
        UnknownKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Define argument syntax for command, adding a prepared argument.
   *
   * @returns `this` command for chaining
   */
  addArgument'
      Parameter
        Identifier: 'arg'
        TypeReference
          Identifier: ' Argument'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Define argument syntax for command, adding multiple at once (without descriptions).
   *
   * See also .argument().
   *
   * @example
   * ```
   * program.arguments('<cmd> [env]');
   * ```
   *
   * @returns `this` command for chaining
   */
  arguments'
      Parameter
        Identifier: 'names'
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Customise or override default help command. By default a help command is automatically added if your command has subcommands.
   *
   * @example
   * ```ts
   * program.helpCommand('help [cmd]');
   * program.helpCommand('help [cmd]', 'show help');
   * program.helpCommand(false); // suppress default help command
   * program.helpCommand(true); // add help command even if no subcommands
   * ```
   */
  helpCommand'
      Parameter
        Identifier: 'nameAndArgs'
        StringKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  helpCommand'
      Parameter
        Identifier: 'enable'
        BooleanKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Add prepared custom help command.
   */
  addHelpCommand'
      Parameter
        Identifier: 'cmd'
        TypeReference
          Identifier: ' Command'
      ThisType
    MethodDeclaration
      Identifier: '
  /** @deprecated since v12, instead use helpCommand */
  addHelpCommand'
      Parameter
        Identifier: 'nameAndArgs'
        StringKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  /** @deprecated since v12, instead use helpCommand */
  addHelpCommand'
      Parameter
        Identifier: 'enable'
        QuestionToken
        BooleanKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Add hook for life cycle event.
   */
  hook'
      Parameter
        Identifier: '
    event'
        TypeReference
          Identifier: ' HookEvent'
      Parameter
        Identifier: '
    listener'
        FunctionType
          Parameter
            Identifier: '
      thisCommand'
            TypeReference
              Identifier: ' Command'
          Parameter
            Identifier: '
      actionCommand'
            TypeReference
              Identifier: ' Command'
          UnionType
            VoidKeyword
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Register callback to use as replacement for calling process.exit.
   */
  exitOverride'
      Parameter
        Identifier: 'callback'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'err'
            TypeReference
              Identifier: ' CommanderError'
          UnionType
            NeverKeyword
            VoidKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Display error message and exit (or call exitOverride).
   */
  error'
      Parameter
        Identifier: 'message'
        StringKeyword
      Parameter
        Identifier: ' errorOptions'
        QuestionToken
        TypeReference
          Identifier: ' ErrorOptions'
      NeverKeyword
    MethodDeclaration
      Identifier: '

  /**
   * You can customise the help with a subclass of Help by overriding createHelp,
   * or by overriding Help properties using configureHelp().
   */
  createHelp'
      TypeReference
        Identifier: ' Help'
    MethodDeclaration
      Identifier: '

  /**
   * You can customise the help by overriding Help properties using configureHelp(),
   * or with a subclass of Help by overriding createHelp().
   */
  configureHelp'
      Parameter
        Identifier: 'configuration'
        TypeReference
          Identifier: ' HelpConfiguration'
      ThisType
    MethodDeclaration
      Identifier: '
  /** Get configuration */
  configureHelp'
      TypeReference
        Identifier: ' HelpConfiguration'
    MethodDeclaration
      Identifier: '

  /**
   * The default output goes to stdout and stderr. You can customise this for special
   * applications. You can also customise the display of errors by overriding outputError.
   *
   * The configuration properties are all functions:
   * ```
   * // functions to change where being written, stdout and stderr
   * writeOut(str)
   * writeErr(str)
   * // matching functions to specify width for wrapping help
   * getOutHelpWidth()
   * getErrHelpWidth()
   * // functions based on what is being written out
   * outputError(str, write) // used for displaying errors, and not used for displaying help
   * ```
   */
  configureOutput'
      Parameter
        Identifier: 'configuration'
        TypeReference
          Identifier: ' OutputConfiguration'
      ThisType
    MethodDeclaration
      Identifier: '
  /** Get configuration */
  configureOutput'
      TypeReference
        Identifier: ' OutputConfiguration'
    MethodDeclaration
      Identifier: '

  /**
   * Copy settings that are useful to have in common across root command and subcommands.
   *
   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)
   */
  copyInheritedSettings'
      Parameter
        Identifier: 'sourceCommand'
        TypeReference
          Identifier: ' Command'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Display the help or a custom message after an error occurs.
   */
  showHelpAfterError'
      Parameter
        Identifier: 'displayHelp'
        QuestionToken
        UnionType
          BooleanKeyword
          StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Display suggestion of similar commands for unknown commands, or options for unknown options.
   */
  showSuggestionAfterError'
      Parameter
        Identifier: 'displaySuggestion'
        QuestionToken
        BooleanKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Register callback `fn` for the command.
   *
   * @example
   * ```
   * program
   *   .command('serve')
   *   .description('start service')
   *   .action(function() {
   *     // do work here
   *   });
   * ```
   *
   * @returns `this` command for chaining
   */
  action'
      Parameter
        Identifier: 'fn'
        FunctionType
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          UnionType
            VoidKeyword
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Define option with `flags`, `description`, and optional argument parsing function or `defaultValue` or both.
   *
   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space. A required
   * option-argument is indicated by `<>` and an optional option-argument by `[]`.
   *
   * See the README for more details, and see also addOption() and requiredOption().
   *
   * @example
   *
   * ```js
   * program
   *     .option('-p, --pepper', 'add pepper')
   *     .option('-p, --pizza-type <TYPE>', 'type of pizza') // required option-argument
   *     .option('-c, --cheese [CHEESE]', 'add extra cheese', 'mozzarella') // optional option-argument with default
   *     .option('-t, --tip <VALUE>', 'add tip to purchase cost', parseFloat) // custom parse function
   * ```
   *
   * @returns `this` command for chaining
   */
  option'
      Parameter
        Identifier: '
    flags'
        StringKeyword
      Parameter
        Identifier: '
    description'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: '
    defaultValue'
        QuestionToken
        UnionType
          StringKeyword
          BooleanKeyword
          ArrayType
            StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  option'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: '
    flags'
        StringKeyword
      Parameter
        Identifier: '
    description'
        StringKeyword
      Parameter
        Identifier: '
    parseArg'
        FunctionType
          Parameter
            Identifier: 'value'
            StringKeyword
          Parameter
            Identifier: ' previous'
            TypeReference
              Identifier: ' T'
          TypeReference
            Identifier: ' T'
      Parameter
        Identifier: '
    defaultValue'
        QuestionToken
        TypeReference
          Identifier: ' T'
      ThisType
    MethodDeclaration
      Identifier: '
  /** @deprecated since v7, instead use choices or a custom function */
  option'
      Parameter
        Identifier: '
    flags'
        StringKeyword
      Parameter
        Identifier: '
    description'
        StringKeyword
      Parameter
        Identifier: '
    regexp'
        TypeReference
          Identifier: ' RegExp'
      Parameter
        Identifier: '
    defaultValue'
        QuestionToken
        UnionType
          StringKeyword
          BooleanKeyword
          ArrayType
            StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Define a required option, which must have a value after parsing. This usually means
   * the option must be specified on the command line. (Otherwise the same as .option().)
   *
   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.
   */
  requiredOption'
      Parameter
        Identifier: '
    flags'
        StringKeyword
      Parameter
        Identifier: '
    description'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: '
    defaultValue'
        QuestionToken
        UnionType
          StringKeyword
          BooleanKeyword
          ArrayType
            StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  requiredOption'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: '
    flags'
        StringKeyword
      Parameter
        Identifier: '
    description'
        StringKeyword
      Parameter
        Identifier: '
    parseArg'
        FunctionType
          Parameter
            Identifier: 'value'
            StringKeyword
          Parameter
            Identifier: ' previous'
            TypeReference
              Identifier: ' T'
          TypeReference
            Identifier: ' T'
      Parameter
        Identifier: '
    defaultValue'
        QuestionToken
        TypeReference
          Identifier: ' T'
      ThisType
    MethodDeclaration
      Identifier: '
  /** @deprecated since v7, instead use choices or a custom function */
  requiredOption'
      Parameter
        Identifier: '
    flags'
        StringKeyword
      Parameter
        Identifier: '
    description'
        StringKeyword
      Parameter
        Identifier: '
    regexp'
        TypeReference
          Identifier: ' RegExp'
      Parameter
        Identifier: '
    defaultValue'
        QuestionToken
        UnionType
          StringKeyword
          BooleanKeyword
          ArrayType
            StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Factory routine to create a new unattached option.
   *
   * See .option() for creating an attached option, which uses this routine to
   * create the option. You can override createOption to return a custom option.
   */

  createOption'
      Parameter
        Identifier: 'flags'
        StringKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Option'
    MethodDeclaration
      Identifier: '

  /**
   * Add a prepared Option.
   *
   * See .option() and .requiredOption() for creating and attaching an option in a single call.
   */
  addOption'
      Parameter
        Identifier: 'option'
        TypeReference
          Identifier: ' Option'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Whether to store option values as properties on command object,
   * or store separately (specify false). In both cases the option values can be accessed using .opts().
   *
   * @returns `this` command for chaining
   */
  storeOptionsAsProperties'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' OptionValues'
      IntersectionType
        ThisType
        TypeReference
          Identifier: ' T'
    MethodDeclaration
      Identifier: '
  storeOptionsAsProperties'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' OptionValues'
      Parameter
        Identifier: '
    storeAsProperties'
        LiteralType
          TrueKeyword
      IntersectionType
        ThisType
        TypeReference
          Identifier: ' T'
    MethodDeclaration
      Identifier: '
  storeOptionsAsProperties'
      Parameter
        Identifier: 'storeAsProperties'
        QuestionToken
        BooleanKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Retrieve option value.
   */
  getOptionValue'
      Parameter
        Identifier: 'key'
        StringKeyword
      AnyKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Store option value.
   */
  setOptionValue'
      Parameter
        Identifier: 'key'
        StringKeyword
      Parameter
        Identifier: ' value'
        UnknownKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Store option value and where the value came from.
   */
  setOptionValueWithSource'
      Parameter
        Identifier: '
    key'
        StringKeyword
      Parameter
        Identifier: '
    value'
        UnknownKeyword
      Parameter
        Identifier: '
    source'
        TypeReference
          Identifier: ' OptionValueSource'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Get source of option value.
   */
  getOptionValueSource'
      Parameter
        Identifier: 'key'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' OptionValueSource'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Get source of option value. See also .optsWithGlobals().
   */
  getOptionValueSourceWithGlobals'
      Parameter
        Identifier: 'key'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' OptionValueSource'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Alter parsing of short flags with optional values.
   *
   * @example
   * ```
   * // for `.option('-f,--flag [value]'):
   * .combineFlagAndOptionalValue(true)  // `-f80` is treated like `--flag=80`, this is the default behaviour
   * .combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`
   * ```
   *
   * @returns `this` command for chaining
   */
  combineFlagAndOptionalValue'
      Parameter
        Identifier: 'combine'
        QuestionToken
        BooleanKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Allow unknown options on the command line.
   *
   * @returns `this` command for chaining
   */
  allowUnknownOption'
      Parameter
        Identifier: 'allowUnknown'
        QuestionToken
        BooleanKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.
   *
   * @returns `this` command for chaining
   */
  allowExcessArguments'
      Parameter
        Identifier: 'allowExcess'
        QuestionToken
        BooleanKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Enable positional options. Positional means global options are specified before subcommands which lets
   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.
   *
   * The default behaviour is non-positional and global options may appear anywhere on the command line.
   *
   * @returns `this` command for chaining
   */
  enablePositionalOptions'
      Parameter
        Identifier: 'positional'
        QuestionToken
        BooleanKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Pass through options that come after command-arguments rather than treat them as command-options,
   * so actual command-options come before command-arguments. Turning this on for a subcommand requires
   * positional options to have been enabled on the program (parent commands).
   *
   * The default behaviour is non-positional and options may appear before or after command-arguments.
   *
   * @returns `this` command for chaining
   */
  passThroughOptions'
      Parameter
        Identifier: 'passThrough'
        QuestionToken
        BooleanKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Parse `argv`, setting options and invoking commands when defined.
   *
   * Use parseAsync instead of parse if any of your action handlers are async.
   *
   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!
   *
   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:
   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that
   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged
   * - `'user'`: just user arguments
   *
   * @example
   * ```
   * program.parse(); // parse process.argv and auto-detect electron and special node flags
   * program.parse(process.argv); // assume argv[0] is app and argv[1] is script
   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]
   * ```
   *
   * @returns `this` command for chaining
   */
  parse'
      Parameter
        Identifier: 'argv'
        QuestionToken
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' parseOptions'
        QuestionToken
        TypeReference
          Identifier: ' ParseOptions'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Parse `argv`, setting options and invoking commands when defined.
   *
   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!
   *
   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:
   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that
   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged
   * - `'user'`: just user arguments
   *
   * @example
   * ```
   * await program.parseAsync(); // parse process.argv and auto-detect electron and special node flags
   * await program.parseAsync(process.argv); // assume argv[0] is app and argv[1] is script
   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]
   * ```
   *
   * @returns Promise
   */
  parseAsync'
      Parameter
        Identifier: '
    argv'
        QuestionToken
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: '
    parseOptions'
        QuestionToken
        TypeReference
          Identifier: ' ParseOptions'
      TypeReference
        Identifier: ' Promise'
        ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Parse options from `argv` removing known options,
   * and return argv split into operands and unknown arguments.
   *
   *     argv => operands, unknown
   *     --known kkk op => [op], []
   *     op --known kkk => [op], []
   *     sub --unknown uuu op => [sub], [--unknown uuu op]
   *     sub -- --unknown uuu op => [sub --unknown uuu op], []
   */
  parseOptions'
      Parameter
        Identifier: 'argv'
        ArrayType
          StringKeyword
      TypeReference
        Identifier: ' ParseOptionsResult'
    MethodDeclaration
      Identifier: '

  /**
   * Return an object containing local option values as key-value pairs
   */
  opts'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' OptionValues'
      TypeReference
        Identifier: ' T'
    MethodDeclaration
      Identifier: '

  /**
   * Return an object containing merged local and global option values as key-value pairs.
   */
  optsWithGlobals'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' OptionValues'
      TypeReference
        Identifier: ' T'
    MethodDeclaration
      Identifier: '

  /**
   * Set the description.
   *
   * @returns `this` command for chaining
   */

  description'
      Parameter
        Identifier: 'str'
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  /** @deprecated since v8, instead use .argument to add command argument with description */
  description'
      Parameter
        Identifier: 'str'
        StringKeyword
      Parameter
        Identifier: ' argsDescription'
        TypeReference
          Identifier: ' Record'
          StringKeyword
          StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  /**
   * Get the description.
   */
  description'
      StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Set the summary. Used when listed as subcommand of parent.
   *
   * @returns `this` command for chaining
   */

  summary'
      Parameter
        Identifier: 'str'
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  /**
   * Get the summary.
   */
  summary'
      StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Set an alias for the command.
   *
   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.
   *
   * @returns `this` command for chaining
   */
  alias'
      Parameter
        Identifier: 'alias'
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  /**
   * Get alias for the command.
   */
  alias'
      StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Set aliases for the command.
   *
   * Only the first alias is shown in the auto-generated help.
   *
   * @returns `this` command for chaining
   */
  aliases'
      Parameter
        Identifier: 'aliases'
        TypeOperator
          ArrayType
            StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  /**
   * Get aliases for the command.
   */
  aliases'
      ArrayType
        StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Set the command usage.
   *
   * @returns `this` command for chaining
   */
  usage'
      Parameter
        Identifier: 'str'
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  /**
   * Get the command usage.
   */
  usage'
      StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Set the name of the command.
   *
   * @returns `this` command for chaining
   */
  name'
      Parameter
        Identifier: 'str'
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  /**
   * Get the name of the command.
   */
  name'
      StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Set the name of the command from script filename, such as process.argv[1],
   * or require.main.filename, or __filename.
   *
   * (Used internally and public although not documented in README.)
   *
   * @example
   * ```ts
   * program.nameFromFilename(require.main.filename);
   * ```
   *
   * @returns `this` command for chaining
   */
  nameFromFilename'
      Parameter
        Identifier: 'filename'
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Set the directory for searching for executable subcommands of this command.
   *
   * @example
   * ```ts
   * program.executableDir(__dirname);
   * // or
   * program.executableDir('subcommands');
   * ```
   *
   * @returns `this` command for chaining
   */
  executableDir'
      Parameter
        Identifier: 'path'
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  /**
   * Get the executable search directory.
   */
  executableDir'
      UnionType
        StringKeyword
        LiteralType
          NullKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Output help information for this command.
   *
   * Outputs built-in help, and custom text added using `.addHelpText()`.
   *
   */
  outputHelp'
      Parameter
        Identifier: 'context'
        QuestionToken
        TypeReference
          Identifier: ' HelpContext'
      VoidKeyword
    MethodDeclaration
      Identifier: '
  /** @deprecated since v7 */
  outputHelp'
      Parameter
        Identifier: 'cb'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'str'
            StringKeyword
          StringKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Return command help documentation.
   */
  helpInformation'
      Parameter
        Identifier: 'context'
        QuestionToken
        TypeReference
          Identifier: ' HelpContext'
      StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * You can pass in flags and a description to override the help
   * flags and help description for your command. Pass in false
   * to disable the built-in help option.
   */
  helpOption'
      Parameter
        Identifier: 'flags'
        QuestionToken
        UnionType
          StringKeyword
          BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Supply your own option to use for the built-in help option.
   * This is an alternative to using helpOption() to customise the flags and description etc.
   */
  addHelpOption'
      Parameter
        Identifier: 'option'
        TypeReference
          Identifier: ' Option'
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Output help information and exit.
   *
   * Outputs built-in help, and custom text added using `.addHelpText()`.
   */
  help'
      Parameter
        Identifier: 'context'
        QuestionToken
        TypeReference
          Identifier: ' HelpContext'
      NeverKeyword
    MethodDeclaration
      Identifier: '
  /** @deprecated since v7 */
  help'
      Parameter
        Identifier: 'cb'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'str'
            StringKeyword
          StringKeyword
      NeverKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Add additional text to be displayed with the built-in help.
   *
   * Position is 'before' or 'after' to affect just this command,
   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.
   */
  addHelpText'
      Parameter
        Identifier: 'position'
        TypeReference
          Identifier: ' AddHelpTextPosition'
      Parameter
        Identifier: ' text'
        StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '
  addHelpText'
      Parameter
        Identifier: '
    position'
        TypeReference
          Identifier: ' AddHelpTextPosition'
      Parameter
        Identifier: '
    text'
        FunctionType
          Parameter
            Identifier: 'context'
            TypeReference
              Identifier: ' AddHelpTextContext'
          StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Add a listener (callback) for when events occur. (Implemented using EventEmitter.)
   */
  on'
      Parameter
        Identifier: 'event'
        UnionType
          StringKeyword
          SymbolKeyword
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          VoidKeyword
      ThisType
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CommandOptions'
    PropertySignature
      Identifier: '
  hidden'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
  isDefault'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
  /** @deprecated since v7, replaced by hidden */
  noHelp'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ExecutableCommandOptions'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CommandOptions'
    PropertySignature
      Identifier: '
  executableFile'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ParseOptionsResult'
    PropertySignature
      Identifier: '
  operands'
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
  unknown'
      ArrayType
        StringKeyword
  FunctionDeclaration
    ExportKeyword
    Identifier: ' createCommand'
    Parameter
      Identifier: 'name'
      QuestionToken
      StringKeyword
    TypeReference
      Identifier: ' Command'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' createOption'
    Parameter
      Identifier: 'flags'
      StringKeyword
    Parameter
      Identifier: ' description'
      QuestionToken
      StringKeyword
    TypeReference
      Identifier: ' Option'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' createArgument'
    Parameter
      Identifier: 'name'
      StringKeyword
    Parameter
      Identifier: ' description'
      QuestionToken
      StringKeyword
    TypeReference
      Identifier: ' Argument'
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' program'
        TypeReference
          Identifier: ' Command'
