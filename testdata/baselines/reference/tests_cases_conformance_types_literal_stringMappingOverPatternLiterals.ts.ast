SourceFile
  TypeAliasDeclaration
    Identifier: ' A'
    LiteralType
      StringLiteral
  TypeAliasDeclaration
    Identifier: ' B'
    TypeReference
      Identifier: ' Uppercase'
      TypeReference
        Identifier: 'A'
  TypeAliasDeclaration
    Identifier: ' C'
    TypeReference
      Identifier: ' Lowercase'
      TypeReference
        Identifier: 'A'
  TypeAliasDeclaration
    Identifier: ' ATemplate'
    TemplateLiteralType
      TemplateHead
      TemplateLiteralTypeSpan
        StringKeyword
        TemplateTail
  TypeAliasDeclaration
    Identifier: ' BTemplate'
    TypeReference
      Identifier: ' Uppercase'
      TypeReference
        Identifier: 'ATemplate'
  TypeAliasDeclaration
    Identifier: ' CTemplate'
    TypeReference
      Identifier: ' Lowercase'
      TypeReference
        Identifier: 'ATemplate'
  FunctionDeclaration
    Identifier: ' f1'
    Parameter
      Identifier: '
    a'
      TypeReference
        Identifier: ' A'
    Parameter
      Identifier: '
    b'
      TypeReference
        Identifier: ' B'
    Parameter
      Identifier: '
    c'
      TypeReference
        Identifier: ' C'
    Parameter
      Identifier: '
    a_template'
      TypeReference
        Identifier: ' ATemplate'
    Parameter
      Identifier: '
    b_template'
      TypeReference
        Identifier: ' BTemplate'
    Parameter
      Identifier: '
    c_template'
      TypeReference
        Identifier: ' CTemplate'
    Block
      ExpressionStatement
        BinaryExpression
          Identifier: '
    // non-template versions should be assignable to templated versions (empty string matches string)
    a_template'
          EqualsToken
          Identifier: ' a'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    b_template'
          EqualsToken
          Identifier: ' b'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    c_template'
          EqualsToken
          Identifier: ' c'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    // not the other way around
    a'
          EqualsToken
          Identifier: ' a_template'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    b'
          EqualsToken
          Identifier: ' b_template'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    c'
          EqualsToken
          Identifier: ' c_template'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    // Additionally, all the template versions should be mutually incompatible (they describe differing sets)
    a_template'
          EqualsToken
          Identifier: ' b_template'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    a_template'
          EqualsToken
          Identifier: ' c_template'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    b_template'
          EqualsToken
          Identifier: ' a_template'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    b_template'
          EqualsToken
          Identifier: ' c_template'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    c_template'
          EqualsToken
          Identifier: ' a_template'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    c_template'
          EqualsToken
          Identifier: ' b_template'
  FunctionDeclaration
    Identifier: ' f2'
    Parameter
      Identifier: 'x1'
      StringKeyword
    Parameter
      Identifier: ' x2'
      TypeReference
        Identifier: ' Uppercase'
        StringKeyword
    Parameter
      Identifier: ' x3'
      TypeReference
        Identifier: ' Lowercase'
        StringKeyword
    Block
      ExpressionStatement
        BinaryExpression
          Identifier: '
    // ok
    x1'
          EqualsToken
          Identifier: ' x2'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x1'
          EqualsToken
          Identifier: ' x3'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    x2'
          EqualsToken
          StringLiteral
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x3'
          EqualsToken
          StringLiteral
      ExpressionStatement
        BinaryExpression
          Identifier: '

    // should fail (sets do not match)
    x2'
          EqualsToken
          Identifier: ' x1'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x2'
          EqualsToken
          Identifier: ' x3'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x3'
          EqualsToken
          Identifier: ' x1'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x3'
          EqualsToken
          Identifier: ' x2'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    x2'
          EqualsToken
          StringLiteral
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x3'
          EqualsToken
          StringLiteral
  FunctionDeclaration
    Identifier: ' f3'
    Parameter
      Identifier: '
    x1'
      TypeReference
        Identifier: ' Uppercase'
        StringKeyword
    Parameter
      Identifier: '
    x2'
      TypeReference
        Identifier: ' Uppercase'
        TypeReference
          Identifier: 'Uppercase'
          StringKeyword
    Parameter
      Identifier: '
    x3'
      TypeReference
        Identifier: ' Uppercase'
        TypeReference
          Identifier: 'Lowercase'
          StringKeyword
    Block
      ExpressionStatement
        BinaryExpression
          Identifier: '

    // _ideally_ these would all be equivalent
    x1'
          EqualsToken
          Identifier: ' x2'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x1'
          EqualsToken
          Identifier: ' x3'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    x2'
          EqualsToken
          Identifier: ' x1'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x2'
          EqualsToken
          Identifier: ' x3'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    // you'd think these were equivalent - the outer `Uppercase` conceptually
    // makes the inner `Lowercase` effectively a noop - but that's not so;
    // the german sharp s makes that not completely true (lowercases to ss,
    // which then uppercases to SS), so arbitrary nestings of mappings make differing sets!
    x3'
          EqualsToken
          Identifier: ' x1'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x3'
          EqualsToken
          Identifier: ' x2'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' x4'
            TypeReference
              Identifier: ' Lowercase'
              TypeReference
                Identifier: 'Uppercase'
                StringKeyword
            AsExpression
              NullKeyword
              AnyKeyword
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x1'
          EqualsToken
          Identifier: ' x4'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x2'
          EqualsToken
          Identifier: ' x4'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x3'
          EqualsToken
          Identifier: ' x4'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    x4'
          EqualsToken
          Identifier: ' x1'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x4'
          EqualsToken
          Identifier: ' x2'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x4'
          EqualsToken
          Identifier: ' x3'
  TypeAliasDeclaration
    Identifier: ' NonStringPat'
    TypeReference
      Identifier: ' Uppercase'
      TemplateLiteralType
        TemplateHead
        TemplateLiteralTypeSpan
          NumberKeyword
          TemplateMiddle
        TemplateLiteralTypeSpan
          BigIntKeyword
          TemplateMiddle
        TemplateLiteralTypeSpan
          BooleanKeyword
          TemplateTail
  TypeAliasDeclaration
    Identifier: ' EquivalentNonStringPat'
    TemplateLiteralType
      TemplateHead
      TemplateLiteralTypeSpan
        TypeReference
          Identifier: 'Uppercase'
          TemplateLiteralType
            TemplateHead
            TemplateLiteralTypeSpan
              NumberKeyword
              TemplateTail
        TemplateMiddle
      TemplateLiteralTypeSpan
        TypeReference
          Identifier: 'Uppercase'
          TemplateLiteralType
            TemplateHead
            TemplateLiteralTypeSpan
              BigIntKeyword
              TemplateTail
        TemplateMiddle
      TemplateLiteralTypeSpan
        TypeReference
          Identifier: 'Uppercase'
          TemplateLiteralType
            TemplateHead
            TemplateLiteralTypeSpan
              BooleanKeyword
              TemplateTail
        TemplateTail
  FunctionDeclaration
    Identifier: ' f4'
    Parameter
      Identifier: 'x1'
      TypeReference
        Identifier: ' NonStringPat'
    Parameter
      Identifier: ' x2'
      TypeReference
        Identifier: ' EquivalentNonStringPat'
    Block
      ExpressionStatement
        BinaryExpression
          Identifier: '
    // Should both work
    x1'
          EqualsToken
          Identifier: ' x2'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    x2'
          EqualsToken
          Identifier: ' x1'
  FunctionDeclaration
    Identifier: ' f5'
    Parameter
      Identifier: '
    cap_tem'
      TemplateLiteralType
        TemplateHead
        TemplateLiteralTypeSpan
          StringKeyword
          TemplateTail
    Parameter
      Identifier: '
    cap_str'
      TypeReference
        Identifier: ' Capitalize'
        StringKeyword
    Parameter
      Identifier: '
    cap_tem_map'
      TypeReference
        Identifier: ' Capitalize'
        TemplateLiteralType
          TemplateHead
          TemplateLiteralTypeSpan
            StringKeyword
            TemplateTail
    Parameter
      Identifier: '
    cap_tem_map2'
      TypeReference
        Identifier: ' Capitalize'
        TemplateLiteralType
          TemplateHead
          TemplateLiteralTypeSpan
            StringKeyword
            TemplateTail
    Parameter
      Identifier: '
    uncap_tem'
      TemplateLiteralType
        TemplateHead
        TemplateLiteralTypeSpan
          StringKeyword
          TemplateTail
    Parameter
      Identifier: '
    uncap_str'
      TypeReference
        Identifier: ' Uncapitalize'
        StringKeyword
    Parameter
      Identifier: '
    uncap_tem_map'
      TypeReference
        Identifier: ' Uncapitalize'
        TemplateLiteralType
          TemplateHead
          TemplateLiteralTypeSpan
            StringKeyword
            TemplateTail
    Parameter
      Identifier: '
    uncap_tem_map2'
      TypeReference
        Identifier: ' Uncapitalize'
        TemplateLiteralType
          TemplateHead
          TemplateLiteralTypeSpan
            StringKeyword
            TemplateTail
    Block
      ExpressionStatement
        BinaryExpression
          Identifier: '
    // All these are capitalized
    cap_str'
          EqualsToken
          Identifier: ' cap_tem'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    cap_str'
          EqualsToken
          Identifier: ' cap_tem_map'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    cap_str'
          EqualsToken
          Identifier: ' cap_tem_map2'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    // these are all equivalent
    cap_tem'
          EqualsToken
          Identifier: ' cap_tem_map'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    cap_tem'
          EqualsToken
          Identifier: ' cap_tem_map2'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    cap_tem_map'
          EqualsToken
          Identifier: ' cap_tem_map2'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    cap_tem_map'
          EqualsToken
          Identifier: ' cap_tem'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    cap_tem_map2'
          EqualsToken
          Identifier: ' cap_tem_map'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    cap_tem_map2'
          EqualsToken
          Identifier: ' cap_tem'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    // meanwhile, these all require a `A` prefix
    cap_tem'
          EqualsToken
          Identifier: ' cap_str'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    cap_tem_map'
          EqualsToken
          Identifier: ' cap_str'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    cap_tem_map2'
          EqualsToken
          Identifier: ' cap_str'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    // All these are uncapitalized
    uncap_str'
          EqualsToken
          Identifier: ' uncap_tem'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    uncap_str'
          EqualsToken
          Identifier: ' uncap_tem_map'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    uncap_str'
          EqualsToken
          Identifier: ' uncap_tem_map2'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    // these are all equivalent
    uncap_tem'
          EqualsToken
          Identifier: ' uncap_tem_map'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    uncap_tem'
          EqualsToken
          Identifier: ' uncap_tem_map2'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    uncap_tem_map'
          EqualsToken
          Identifier: ' uncap_tem_map2'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    uncap_tem_map'
          EqualsToken
          Identifier: ' uncap_tem'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    uncap_tem_map2'
          EqualsToken
          Identifier: ' uncap_tem_map'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    uncap_tem_map2'
          EqualsToken
          Identifier: ' uncap_tem'
      ExpressionStatement
        BinaryExpression
          Identifier: '

    // meanwhile, these all require a `a` prefix
    uncap_tem'
          EqualsToken
          Identifier: ' uncap_str'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    uncap_tem_map'
          EqualsToken
          Identifier: ' uncap_str'
      ExpressionStatement
        BinaryExpression
          Identifier: '
    uncap_tem_map2'
          EqualsToken
          Identifier: ' uncap_str'
