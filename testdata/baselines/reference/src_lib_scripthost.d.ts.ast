SourceFile
  InterfaceDeclaration
    Identifier: ' ActiveXObject'
    ConstructSignature
      Parameter
        Identifier: 's'
        StringKeyword
      AnyKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' ActiveXObject'
        TypeReference
          Identifier: ' ActiveXObject'
  InterfaceDeclaration
    Identifier: ' ITextWriter'
    MethodSignature
      Identifier: '
    Write'
      Parameter
        Identifier: 's'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    WriteLine'
      Parameter
        Identifier: 's'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    Close'
      VoidKeyword
  InterfaceDeclaration
    Identifier: ' TextStreamBase'
    PropertySignature
      Identifier: '
    /**
     * The column number of the current character position in an input stream.
     */
    Column'
      NumberKeyword
    PropertySignature
      Identifier: '

    /**
     * The current line number in an input stream.
     */
    Line'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Closes a text stream.
     * It is not necessary to close standard streams; they close automatically when the process ends. If
     * you close a standard stream, be aware that any other pointers to that standard stream become invalid.
     */
    Close'
      VoidKeyword
  InterfaceDeclaration
    Identifier: ' TextStreamWriter'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TextStreamBase'
    MethodSignature
      Identifier: '
    /**
     * Sends a string to an output stream.
     */
    Write'
      Parameter
        Identifier: 's'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Sends a specified number of blank lines (newline characters) to an output stream.
     */
    WriteBlankLines'
      Parameter
        Identifier: 'intLines'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Sends a string followed by a newline character to an output stream.
     */
    WriteLine'
      Parameter
        Identifier: 's'
        StringKeyword
      VoidKeyword
  InterfaceDeclaration
    Identifier: ' TextStreamReader'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TextStreamBase'
    MethodSignature
      Identifier: '
    /**
     * Returns a specified number of characters from an input stream, starting at the current pointer position.
     * Does not return until the ENTER key is pressed.
     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.
     */
    Read'
      Parameter
        Identifier: 'characters'
        NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns all characters from an input stream.
     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.
     */
    ReadAll'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns an entire line from an input stream.
     * Although this method extracts the newline character, it does not add it to the returned string.
     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.
     */
    ReadLine'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Skips a specified number of characters when reading from an input text stream.
     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.
     * @param characters Positive number of characters to skip forward. (Backward skipping is not supported.)
     */
    Skip'
      Parameter
        Identifier: 'characters'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Skips the next line when reading from an input text stream.
     * Can only be used on a stream in reading mode, not writing or appending mode.
     */
    SkipLine'
      VoidKeyword
    PropertySignature
      Identifier: '

    /**
     * Indicates whether the stream pointer position is at the end of a line.
     */
    AtEndOfLine'
      BooleanKeyword
    PropertySignature
      Identifier: '

    /**
     * Indicates whether the stream pointer position is at the end of a stream.
     */
    AtEndOfStream'
      BooleanKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' WScript'
        TypeLiteral
          MethodSignature
            Identifier: '
    /**
     * Outputs text to either a message box (under WScript.exe) or the command console window followed by
     * a newline (under CScript.exe).
     */
    Echo'
            Parameter
              Identifier: 's'
              AnyKeyword
            VoidKeyword
          PropertySignature
            Identifier: '

    /**
     * Exposes the write-only error output stream for the current script.
     * Can be accessed only while using CScript.exe.
     */
    StdErr'
            TypeReference
              Identifier: ' TextStreamWriter'
          PropertySignature
            Identifier: '

    /**
     * Exposes the write-only output stream for the current script.
     * Can be accessed only while using CScript.exe.
     */
    StdOut'
            TypeReference
              Identifier: ' TextStreamWriter'
          PropertySignature
            Identifier: '
    Arguments'
            TypeLiteral
              PropertySignature
                Identifier: ' length'
                NumberKeyword
              MethodSignature
                Identifier: ' Item'
                Parameter
                  Identifier: 'n'
                  NumberKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     *  The full path of the currently running script.
     */
    ScriptFullName'
            StringKeyword
          MethodSignature
            Identifier: '

    /**
     * Forces the script to stop immediately, with an optional exit code.
     */
    Quit'
            Parameter
              Identifier: 'exitCode'
              QuestionToken
              NumberKeyword
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * The Windows Script Host build version number.
     */
    BuildVersion'
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Fully qualified path of the host executable.
     */
    FullName'
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Gets/sets the script mode - interactive(true) or batch(false).
     */
    Interactive'
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * The name of the host executable (WScript.exe or CScript.exe).
     */
    Name'
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Path of the directory containing the host executable.
     */
    Path'
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * The filename of the currently running script.
     */
    ScriptName'
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Exposes the read-only input stream for the current script.
     * Can be accessed only while using CScript.exe.
     */
    StdIn'
            TypeReference
              Identifier: ' TextStreamReader'
          PropertySignature
            Identifier: '

    /**
     * Windows Script Host version
     */
    Version'
            StringKeyword
          MethodSignature
            Identifier: '

    /**
     * Connects a COM object's event sources to functions named with a given prefix, in the form prefix_event.
     */
    ConnectObject'
            Parameter
              Identifier: 'objEventSource'
              AnyKeyword
            Parameter
              Identifier: ' strPrefix'
              StringKeyword
            VoidKeyword
          MethodSignature
            Identifier: '

    /**
     * Creates a COM object.
     * @param strProgiID
     * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.
     */
    CreateObject'
            Parameter
              Identifier: 'strProgID'
              StringKeyword
            Parameter
              Identifier: ' strPrefix'
              QuestionToken
              StringKeyword
            AnyKeyword
          MethodSignature
            Identifier: '

    /**
     * Disconnects a COM object from its event sources.
     */
    DisconnectObject'
            Parameter
              Identifier: 'obj'
              AnyKeyword
            VoidKeyword
          MethodSignature
            Identifier: '

    /**
     * Retrieves an existing object with the specified ProgID from memory, or creates a new one from a file.
     * @param strPathname Fully qualified path to the file containing the object persisted to disk.
     *                       For objects in memory, pass a zero-length string.
     * @param strProgID
     * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.
     */
    GetObject'
            Parameter
              Identifier: 'strPathname'
              StringKeyword
            Parameter
              Identifier: ' strProgID'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' strPrefix'
              QuestionToken
              StringKeyword
            AnyKeyword
          MethodSignature
            Identifier: '

    /**
     * Suspends script execution for a specified length of time, then continues execution.
     * @param intTime Interval (in milliseconds) to suspend script execution.
     */
    Sleep'
            Parameter
              Identifier: 'intTime'
              NumberKeyword
            VoidKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' WSH'
        TypeQuery
          Identifier: ' WScript'
  ClassDeclaration
    DeclareKeyword
    Identifier: ' SafeArray'
    TypeParameter
      Identifier: 'T'
      AnyKeyword
    Constructor
      PrivateKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' SafeArray_typekey'
      TypeReference
        Identifier: ' SafeArray'
        TypeReference
          Identifier: 'T'
  InterfaceDeclaration
    Identifier: ' Enumerator'
    TypeParameter
      Identifier: 'T'
      AnyKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns true if the current item is the last one in the collection, or the collection is empty,
     * or the current item is undefined.
     */
    atEnd'
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the current item in the collection
     */
    item'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Resets the current item in the collection to the first item. If there are no items in the collection,
     * the current item is set to undefined.
     */
    moveFirst'
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Moves the current item to the next item in the collection. If the enumerator is at the end of
     * the collection or the collection is empty, the current item is set to undefined.
     */
    moveNext'
      VoidKeyword
  InterfaceDeclaration
    Identifier: ' EnumeratorConstructor'
    ConstructSignature
      TypeParameter
        Identifier: 'T'
        AnyKeyword
      Parameter
        Identifier: 'safearray'
        TypeReference
          Identifier: ' SafeArray'
          TypeReference
            Identifier: 'T'
      TypeReference
        Identifier: ' Enumerator'
        TypeReference
          Identifier: 'T'
    ConstructSignature
      TypeParameter
        Identifier: 'T'
        AnyKeyword
      Parameter
        Identifier: 'collection'
        TypeLiteral
          MethodSignature
            Identifier: ' Item'
            Parameter
              Identifier: 'index'
              AnyKeyword
            TypeReference
              Identifier: ' T'
      TypeReference
        Identifier: ' Enumerator'
        TypeReference
          Identifier: 'T'
    ConstructSignature
      TypeParameter
        Identifier: 'T'
        AnyKeyword
      Parameter
        Identifier: 'collection'
        AnyKeyword
      TypeReference
        Identifier: ' Enumerator'
        TypeReference
          Identifier: 'T'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Enumerator'
        TypeReference
          Identifier: ' EnumeratorConstructor'
  InterfaceDeclaration
    Identifier: ' VBArray'
    TypeParameter
      Identifier: 'T'
      AnyKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the number of dimensions (1-based).
     */
    dimensions'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Takes an index for each dimension in the array, and returns the item at the corresponding location.
     */
    getItem'
      Parameter
        Identifier: 'dimension1Index'
        NumberKeyword
      Parameter
        DotDotDotToken
        Identifier: 'dimensionNIndexes'
        ArrayType
          NumberKeyword
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Returns the smallest available index for a given dimension.
     * @param dimension 1-based dimension (defaults to 1)
     */
    lbound'
      Parameter
        Identifier: 'dimension'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the largest available index for a given dimension.
     * @param dimension 1-based dimension (defaults to 1)
     */
    ubound'
      Parameter
        Identifier: 'dimension'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a Javascript array with all the elements in the VBArray. If there are multiple dimensions,
     * each successive dimension is appended to the end of the array.
     * Example: [[1,2,3],[4,5,6]] becomes [1,2,3,4,5,6]
     */
    toArray'
      ArrayType
        TypeReference
          Identifier: ' T'
  InterfaceDeclaration
    Identifier: ' VBArrayConstructor'
    ConstructSignature
      TypeParameter
        Identifier: 'T'
        AnyKeyword
      Parameter
        Identifier: 'safeArray'
        TypeReference
          Identifier: ' SafeArray'
          TypeReference
            Identifier: 'T'
      TypeReference
        Identifier: ' VBArray'
        TypeReference
          Identifier: 'T'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' VBArray'
        TypeReference
          Identifier: ' VBArrayConstructor'
  ClassDeclaration
    DeclareKeyword
    Identifier: ' VarDate'
    Constructor
      PrivateKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' VarDate_typekey'
      TypeReference
        Identifier: ' VarDate'
  InterfaceDeclaration
    Identifier: ' DateConstructor'
    ConstructSignature
      Parameter
        Identifier: 'vd'
        TypeReference
          Identifier: ' VarDate'
      TypeReference
        Identifier: ' Date'
  InterfaceDeclaration
    Identifier: ' Date'
    PropertySignature
      Identifier: '
    getVarDate'
      FunctionType
        TypeReference
          Identifier: ' VarDate'
