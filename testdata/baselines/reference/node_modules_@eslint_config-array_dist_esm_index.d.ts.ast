SourceFile
  ExportDeclaration
    NamedExports
      ExportSpecifier
        Identifier: ' ObjectSchema'
    StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PropertyDefinition'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'PropertyDefinition'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ObjectDefinition'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'ObjectDefinition'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ConfigObject'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'ConfigObject'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' IMinimatchStatic'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'IMinimatchStatic'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' IMinimatch'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'IMinimatch'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ObjectSchemaInstance'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'ObjectSchema'
  ClassDeclaration
    ExportKeyword
    Identifier: ' ConfigArray'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Array'
        AnyKeyword
    Constructor
      Parameter
        Identifier: 'configs'
        UnionType
          TypeReference
            Identifier: ' Iterable'
            AnyKeyword
          TypeReference
            Identifier: ' Function'
          AnyKeyword
      Parameter
        ObjectBindingPattern
          BindingElement
            Identifier: ' basePath'
          BindingElement
            Identifier: ' normalized'
          BindingElement
            Identifier: ' schema'
            Identifier: ' customSchema'
          BindingElement
            Identifier: ' extraConfigTypes'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
        basePath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '
        normalized'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '
        schema'
            QuestionToken
            AnyKeyword
          PropertySignature
            Identifier: '
        extraConfigTypes'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              StringKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The path of the config file that this array was loaded from.
     * This is used to calculate filename matches.
     * @property basePath
     * @type {string}
     */
    basePath'
      StringKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The supported config types.
     * @type {Array<string>}
     */
    extraConfigTypes'
      TypeReference
        Identifier: ' Array'
        StringKeyword
    GetAccessor
      Identifier: ' files'
      ArrayType
        ParenthesizedType
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' Function'
    GetAccessor
      Identifier: ' ignores'
      ArrayType
        StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Indicates if the config array has been normalized.
     * @returns {boolean} True if the config array is normalized, false if not.
     */
    isNormalized'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Normalizes a config array by flattening embedded arrays and executing
     * config functions.
     * @param {Object} [context] The context object for config functions.
     * @returns {Promise<ConfigArray>} The current ConfigArray instance.
     */
    normalize'
      Parameter
        Identifier: 'context'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ConfigArray'
    MethodDeclaration
      Identifier: '
    /**
     * Normalizes a config array by flattening embedded arrays and executing
     * config functions.
     * @param {Object} [context] The context object for config functions.
     * @returns {ConfigArray} The current ConfigArray instance.
     */
    normalizeSync'
      Parameter
        Identifier: 'context'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' ConfigArray'
    MethodDeclaration
      Identifier: '
    /**
     * Returns the config object for a given file path and a status that can be used to determine why a file has no config.
     * @param {string} filePath The complete path of a file to get a config for.
     * @returns {{ config?: Object, status: "ignored"|"external"|"unconfigured"|"matched" }}
     * An object with an optional property `config` and property `status`.
     * `config` is the config object for the specified file as returned by {@linkcode ConfigArray.getConfig},
     * `status` a is one of the constants returned by {@linkcode ConfigArray.getConfigStatus}.
     */
    getConfigWithStatus'
      Parameter
        Identifier: 'filePath'
        StringKeyword
      TypeLiteral
        PropertySignature
          Identifier: '
        config'
          QuestionToken
          AnyKeyword
        PropertySignature
          Identifier: '
        status'
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
    MethodDeclaration
      Identifier: '
    /**
     * Returns the config object for a given file path.
     * @param {string} filePath The complete path of a file to get a config for.
     * @returns {Object|undefined} The config object for this file or `undefined`.
     */
    getConfig'
      Parameter
        Identifier: 'filePath'
        StringKeyword
      UnionType
        AnyKeyword
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Determines whether a file has a config or why it doesn't.
     * @param {string} filePath The complete path of the file to check.
     * @returns {"ignored"|"external"|"unconfigured"|"matched"} One of the following values:
     * * `"ignored"`: the file is ignored
     * * `"external"`: the file is outside the base path
     * * `"unconfigured"`: the file is not matched by any config
     * * `"matched"`: the file has a matching config
     */
    getConfigStatus'
      Parameter
        Identifier: 'filePath'
        StringKeyword
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    MethodDeclaration
      Identifier: '
    /**
     * Determines if the given filepath is ignored based on the configs.
     * @param {string} filePath The complete path of a file to check.
     * @returns {boolean} True if the path is ignored, false if not.
     * @deprecated Use `isFileIgnored` instead.
     */
    isIgnored'
      Parameter
        Identifier: 'filePath'
        StringKeyword
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Determines if the given filepath is ignored based on the configs.
     * @param {string} filePath The complete path of a file to check.
     * @returns {boolean} True if the path is ignored, false if not.
     */
    isFileIgnored'
      Parameter
        Identifier: 'filePath'
        StringKeyword
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Determines if the given directory is ignored based on the configs.
     * This checks only default `ignores` that don't have `files` in the
     * same config. A pattern such as `/foo` be considered to ignore the directory
     * while a pattern such as `/foo/**` is not considered to ignore the
     * directory because it is matching files.
     * @param {string} directoryPath The complete path of a directory to check.
     * @returns {boolean} True if the directory is ignored, false if not. Will
     * 		return true for any directory that is not inside of `basePath`.
     * @throws {Error} When the `ConfigArray` is not normalized.
     */
    isDirectoryIgnored'
      Parameter
        Identifier: 'directoryPath'
        StringKeyword
      BooleanKeyword
  ModuleDeclaration
    ExportKeyword
    Identifier: ' ConfigArraySymbol'
    ModuleBlock
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' isNormalized'
            SymbolKeyword
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' configCache'
            SymbolKeyword
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' schema'
            SymbolKeyword
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' finalizeConfig'
            SymbolKeyword
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' preprocessConfig'
            SymbolKeyword
