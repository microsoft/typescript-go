SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' Blob'
              Identifier: ' NodeBlob'
        StringLiteral
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' ClientRequestArgs'
        StringLiteral
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' ParsedUrlQuery'
            ImportSpecifier
              Identifier: ' ParsedUrlQueryInput'
        StringLiteral
      InterfaceDeclaration
        Identifier: ' UrlObject'
        PropertySignature
          Identifier: '
        auth'
          QuestionToken
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        hash'
          QuestionToken
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        host'
          QuestionToken
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        hostname'
          QuestionToken
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        href'
          QuestionToken
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        pathname'
          QuestionToken
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        protocol'
          QuestionToken
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        search'
          QuestionToken
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        slashes'
          QuestionToken
          UnionType
            BooleanKeyword
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        port'
          QuestionToken
          UnionType
            StringKeyword
            NumberKeyword
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        query'
          QuestionToken
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
            TypeReference
              Identifier: ' ParsedUrlQueryInput'
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' Url'
        PropertySignature
          Identifier: '
        auth'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        hash'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        host'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        hostname'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        href'
          StringKeyword
        PropertySignature
          Identifier: '
        path'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        pathname'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        protocol'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        search'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        slashes'
          UnionType
            BooleanKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        port'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        query'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
            TypeReference
              Identifier: ' ParsedUrlQuery'
      InterfaceDeclaration
        Identifier: ' UrlWithParsedQuery'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Url'
        PropertySignature
          Identifier: '
        query'
          TypeReference
            Identifier: ' ParsedUrlQuery'
      InterfaceDeclaration
        Identifier: ' UrlWithStringQuery'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Url'
        PropertySignature
          Identifier: '
        query'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
      InterfaceDeclaration
        Identifier: ' FileUrlToPathOptions'
        PropertySignature
          Identifier: '
        /**
         * `true` if the `path` should be return as a windows filepath, `false` for posix, and `undefined` for the system default.
         * @default undefined
         * @since v22.1.0
         */
        windows'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' PathToFileUrlOptions'
        PropertySignature
          Identifier: '
        /**
         * `true` if the `path` should be return as a windows filepath, `false` for posix, and `undefined` for the system default.
         * @default undefined
         * @since v22.1.0
         */
        windows'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
      FunctionDeclaration
        Identifier: ' parse'
        Parameter
          Identifier: 'urlString'
          StringKeyword
        TypeReference
          Identifier: ' UrlWithStringQuery'
      FunctionDeclaration
        Identifier: ' parse'
        Parameter
          Identifier: '
        urlString'
          StringKeyword
        Parameter
          Identifier: '
        parseQueryString'
          UnionType
            LiteralType
              FalseKeyword
            UndefinedKeyword
        Parameter
          Identifier: '
        slashesDenoteHost'
          QuestionToken
          BooleanKeyword
        TypeReference
          Identifier: ' UrlWithStringQuery'
      FunctionDeclaration
        Identifier: ' parse'
        Parameter
          Identifier: 'urlString'
          StringKeyword
        Parameter
          Identifier: ' parseQueryString'
          LiteralType
            TrueKeyword
        Parameter
          Identifier: ' slashesDenoteHost'
          QuestionToken
          BooleanKeyword
        TypeReference
          Identifier: ' UrlWithParsedQuery'
      FunctionDeclaration
        Identifier: ' parse'
        Parameter
          Identifier: 'urlString'
          StringKeyword
        Parameter
          Identifier: ' parseQueryString'
          BooleanKeyword
        Parameter
          Identifier: ' slashesDenoteHost'
          QuestionToken
          BooleanKeyword
        TypeReference
          Identifier: ' Url'
      FunctionDeclaration
        Identifier: ' format'
        Parameter
          Identifier: 'urlObject'
          TypeReference
            Identifier: ' URL'
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' URLFormatOptions'
        StringKeyword
      FunctionDeclaration
        Identifier: ' format'
        Parameter
          Identifier: 'urlObject'
          UnionType
            TypeReference
              Identifier: ' UrlObject'
            StringKeyword
        StringKeyword
      FunctionDeclaration
        Identifier: ' resolve'
        Parameter
          Identifier: 'from'
          StringKeyword
        Parameter
          Identifier: ' to'
          StringKeyword
        StringKeyword
      FunctionDeclaration
        Identifier: ' domainToASCII'
        Parameter
          Identifier: 'domain'
          StringKeyword
        StringKeyword
      FunctionDeclaration
        Identifier: ' domainToUnicode'
        Parameter
          Identifier: 'domain'
          StringKeyword
        StringKeyword
      FunctionDeclaration
        Identifier: ' fileURLToPath'
        Parameter
          Identifier: 'url'
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' URL'
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' FileUrlToPathOptions'
        StringKeyword
      FunctionDeclaration
        Identifier: ' pathToFileURL'
        Parameter
          Identifier: 'path'
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' PathToFileUrlOptions'
        TypeReference
          Identifier: ' URL'
      FunctionDeclaration
        Identifier: ' urlToHttpOptions'
        Parameter
          Identifier: 'url'
          TypeReference
            Identifier: ' URL'
        TypeReference
          Identifier: ' ClientRequestArgs'
      InterfaceDeclaration
        Identifier: ' URLFormatOptions'
        PropertySignature
          Identifier: '
        /**
         * `true` if the serialized URL string should include the username and password, `false` otherwise.
         * @default true
         */
        auth'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * `true` if the serialized URL string should include the fragment, `false` otherwise.
         * @default true
         */
        fragment'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * `true` if the serialized URL string should include the search query, `false` otherwise.
         * @default true
         */
        search'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * `true` if Unicode characters appearing in the host component of the URL string should be encoded directly as opposed to
         * being Punycode encoded.
         * @default false
         */
        unicode'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
      ClassDeclaration
        Identifier: ' URL'
        MethodDeclaration
          StaticKeyword
          Identifier: ' createObjectURL'
          Parameter
            Identifier: 'blob'
            TypeReference
              Identifier: ' NodeBlob'
          StringKeyword
        MethodDeclaration
          StaticKeyword
          Identifier: ' revokeObjectURL'
          Parameter
            Identifier: 'id'
            StringKeyword
          VoidKeyword
        MethodDeclaration
          StaticKeyword
          Identifier: ' canParse'
          Parameter
            Identifier: 'input'
            StringKeyword
          Parameter
            Identifier: ' base'
            QuestionToken
            StringKeyword
          BooleanKeyword
        MethodDeclaration
          StaticKeyword
          Identifier: ' parse'
          Parameter
            Identifier: 'input'
            StringKeyword
          Parameter
            Identifier: ' base'
            QuestionToken
            StringKeyword
          UnionType
            TypeReference
              Identifier: ' URL'
            LiteralType
              NullKeyword
        Constructor
          Parameter
            Identifier: 'input'
            UnionType
              StringKeyword
              TypeLiteral
                PropertySignature
                  Identifier: ' toString'
                  FunctionType
                    StringKeyword
          Parameter
            Identifier: ' base'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: ' URL'
        PropertyDeclaration
          Identifier: '
        /**
         * Gets and sets the fragment portion of the URL.
         *
         * ```js
         * const myURL = new URL('https://example.org/foo#bar');
         * console.log(myURL.hash);
         * // Prints #bar
         *
         * myURL.hash = 'baz';
         * console.log(myURL.href);
         * // Prints https://example.org/foo#baz
         * ```
         *
         * Invalid URL characters included in the value assigned to the `hash` property
         * are `percent-encoded`. The selection of which characters to
         * percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.
         */
        hash'
          StringKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * Gets and sets the host portion of the URL.
         *
         * ```js
         * const myURL = new URL('https://example.org:81/foo');
         * console.log(myURL.host);
         * // Prints example.org:81
         *
         * myURL.host = 'example.com:82';
         * console.log(myURL.href);
         * // Prints https://example.com:82/foo
         * ```
         *
         * Invalid host values assigned to the `host` property are ignored.
         */
        host'
          StringKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * Gets and sets the host name portion of the URL. The key difference between`url.host` and `url.hostname` is that `url.hostname` does _not_ include the
         * port.
         *
         * ```js
         * const myURL = new URL('https://example.org:81/foo');
         * console.log(myURL.hostname);
         * // Prints example.org
         *
         * // Setting the hostname does not change the port
         * myURL.hostname = 'example.com';
         * console.log(myURL.href);
         * // Prints https://example.com:81/foo
         *
         * // Use myURL.host to change the hostname and port
         * myURL.host = 'example.org:82';
         * console.log(myURL.href);
         * // Prints https://example.org:82/foo
         * ```
         *
         * Invalid host name values assigned to the `hostname` property are ignored.
         */
        hostname'
          StringKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * Gets and sets the serialized URL.
         *
         * ```js
         * const myURL = new URL('https://example.org/foo');
         * console.log(myURL.href);
         * // Prints https://example.org/foo
         *
         * myURL.href = 'https://example.com/bar';
         * console.log(myURL.href);
         * // Prints https://example.com/bar
         * ```
         *
         * Getting the value of the `href` property is equivalent to calling {@link toString}.
         *
         * Setting the value of this property to a new value is equivalent to creating a
         * new `URL` object using `new URL(value)`. Each of the `URL` object's properties will be modified.
         *
         * If the value assigned to the `href` property is not a valid URL, a `TypeError` will be thrown.
         */
        href'
          StringKeyword
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' origin'
          StringKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * Gets and sets the password portion of the URL.
         *
         * ```js
         * const myURL = new URL('https://abc:xyz@example.com');
         * console.log(myURL.password);
         * // Prints xyz
         *
         * myURL.password = '123';
         * console.log(myURL.href);
         * // Prints https://abc:123@example.com/
         * ```
         *
         * Invalid URL characters included in the value assigned to the `password` property
         * are `percent-encoded`. The selection of which characters to
         * percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.
         */
        password'
          StringKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * Gets and sets the path portion of the URL.
         *
         * ```js
         * const myURL = new URL('https://example.org/abc/xyz?123');
         * console.log(myURL.pathname);
         * // Prints /abc/xyz
         *
         * myURL.pathname = '/abcdef';
         * console.log(myURL.href);
         * // Prints https://example.org/abcdef?123
         * ```
         *
         * Invalid URL characters included in the value assigned to the `pathname` property are `percent-encoded`. The selection of which characters
         * to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.
         */
        pathname'
          StringKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * Gets and sets the port portion of the URL.
         *
         * The port value may be a number or a string containing a number in the range `0` to `65535` (inclusive). Setting the value to the default port of the `URL` objects given `protocol` will
         * result in the `port` value becoming
         * the empty string (`''`).
         *
         * The port value can be an empty string in which case the port depends on
         * the protocol/scheme:
         *
         * <omitted>
         *
         * Upon assigning a value to the port, the value will first be converted to a
         * string using `.toString()`.
         *
         * If that string is invalid but it begins with a number, the leading number is
         * assigned to `port`.
         * If the number lies outside the range denoted above, it is ignored.
         *
         * ```js
         * const myURL = new URL('https://example.org:8888');
         * console.log(myURL.port);
         * // Prints 8888
         *
         * // Default ports are automatically transformed to the empty string
         * // (HTTPS protocol's default port is 443)
         * myURL.port = '443';
         * console.log(myURL.port);
         * // Prints the empty string
         * console.log(myURL.href);
         * // Prints https://example.org/
         *
         * myURL.port = 1234;
         * console.log(myURL.port);
         * // Prints 1234
         * console.log(myURL.href);
         * // Prints https://example.org:1234/
         *
         * // Completely invalid port strings are ignored
         * myURL.port = 'abcd';
         * console.log(myURL.port);
         * // Prints 1234
         *
         * // Leading numbers are treated as a port number
         * myURL.port = '5678abcd';
         * console.log(myURL.port);
         * // Prints 5678
         *
         * // Non-integers are truncated
         * myURL.port = 1234.5678;
         * console.log(myURL.port);
         * // Prints 1234
         *
         * // Out-of-range numbers which are not represented in scientific notation
         * // will be ignored.
         * myURL.port = 1e10; // 10000000000, will be range-checked as described below
         * console.log(myURL.port);
         * // Prints 1234
         * ```
         *
         * Numbers which contain a decimal point,
         * such as floating-point numbers or numbers in scientific notation,
         * are not an exception to this rule.
         * Leading numbers up to the decimal point will be set as the URL's port,
         * assuming they are valid:
         *
         * ```js
         * myURL.port = 4.567e21;
         * console.log(myURL.port);
         * // Prints 4 (because it is the leading number in the string '4.567e21')
         * ```
         */
        port'
          StringKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * Gets and sets the protocol portion of the URL.
         *
         * ```js
         * const myURL = new URL('https://example.org');
         * console.log(myURL.protocol);
         * // Prints https:
         *
         * myURL.protocol = 'ftp';
         * console.log(myURL.href);
         * // Prints ftp://example.org/
         * ```
         *
         * Invalid URL protocol values assigned to the `protocol` property are ignored.
         */
        protocol'
          StringKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * Gets and sets the serialized query portion of the URL.
         *
         * ```js
         * const myURL = new URL('https://example.org/abc?123');
         * console.log(myURL.search);
         * // Prints ?123
         *
         * myURL.search = 'abc=xyz';
         * console.log(myURL.href);
         * // Prints https://example.org/abc?abc=xyz
         * ```
         *
         * Any invalid URL characters appearing in the value assigned the `search` property will be `percent-encoded`. The selection of which
         * characters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.
         */
        search'
          StringKeyword
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' searchParams'
          TypeReference
            Identifier: ' URLSearchParams'
        PropertyDeclaration
          Identifier: '
        /**
         * Gets and sets the username portion of the URL.
         *
         * ```js
         * const myURL = new URL('https://abc:xyz@example.com');
         * console.log(myURL.username);
         * // Prints abc
         *
         * myURL.username = '123';
         * console.log(myURL.href);
         * // Prints https://123:xyz@example.com/
         * ```
         *
         * Any invalid URL characters appearing in the value assigned the `username` property will be `percent-encoded`. The selection of which
         * characters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.
         */
        username'
          StringKeyword
        MethodDeclaration
          Identifier: '
        /**
         * The `toString()` method on the `URL` object returns the serialized URL. The
         * value returned is equivalent to that of {@link href} and {@link toJSON}.
         */
        toString'
          StringKeyword
        MethodDeclaration
          Identifier: '
        /**
         * The `toJSON()` method on the `URL` object returns the serialized URL. The
         * value returned is equivalent to that of {@link href} and {@link toString}.
         *
         * This method is automatically called when an `URL` object is serialized
         * with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).
         *
         * ```js
         * const myURLs = [
         *   new URL('https://www.example.com'),
         *   new URL('https://test.example.org'),
         * ];
         * console.log(JSON.stringify(myURLs));
         * // Prints ["https://www.example.com/","https://test.example.org/"]
         * ```
         */
        toJSON'
          StringKeyword
      ClassDeclaration
        Identifier: ' URLSearchParams'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Iterable'
            TupleType
              StringKeyword
              StringKeyword
        Constructor
          Parameter
            Identifier: '
            init'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' URLSearchParams'
              StringKeyword
              TypeReference
                Identifier: ' Record'
                StringKeyword
                UnionType
                  StringKeyword
                  TypeOperator
                    ArrayType
                      StringKeyword
              TypeReference
                Identifier: ' Iterable'
                TupleType
                  StringKeyword
                  StringKeyword
              TypeReference
                Identifier: ' ReadonlyArray'
                TupleType
                  StringKeyword
                  StringKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Append a new name-value pair to the query string.
         */
        append'
          Parameter
            Identifier: 'name'
            StringKeyword
          Parameter
            Identifier: ' value'
            StringKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * If `value` is provided, removes all name-value pairs
         * where name is `name` and value is `value`.
         *
         * If `value` is not provided, removes all name-value pairs whose name is `name`.
         */
        delete'
          Parameter
            Identifier: 'name'
            StringKeyword
          Parameter
            Identifier: ' value'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Returns an ES6 `Iterator` over each of the name-value pairs in the query.
         * Each item of the iterator is a JavaScript `Array`. The first item of the `Array` is the `name`, the second item of the `Array` is the `value`.
         *
         * Alias for `urlSearchParams[@@iterator]()`.
         */
        entries'
          TypeReference
            Identifier: ' IterableIterator'
            TupleType
              StringKeyword
              StringKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Iterates over each name-value pair in the query and invokes the given function.
         *
         * ```js
         * const myURL = new URL('https://example.org/?a=b&#x26;c=d');
         * myURL.searchParams.forEach((value, name, searchParams) => {
         *   console.log(name, value, myURL.searchParams === searchParams);
         * });
         * // Prints:
         * //   a b true
         * //   c d true
         * ```
         * @param fn Invoked for each name-value pair in the query
         * @param thisArg To be used as `this` value for when `fn` is called
         */
        forEach'
          TypeParameter
            Identifier: 'TThis'
            ThisType
          Parameter
            Identifier: '
            fn'
            FunctionType
              Parameter
                Identifier: 'this'
                TypeReference
                  Identifier: ' TThis'
              Parameter
                Identifier: ' value'
                StringKeyword
              Parameter
                Identifier: ' name'
                StringKeyword
              Parameter
                Identifier: ' searchParams'
                TypeReference
                  Identifier: ' URLSearchParams'
              VoidKeyword
          Parameter
            Identifier: '
            thisArg'
            QuestionToken
            TypeReference
              Identifier: ' TThis'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Returns the value of the first name-value pair whose name is `name`. If there
         * are no such pairs, `null` is returned.
         * @return or `null` if there is no name-value pair with the given `name`.
         */
        get'
          Parameter
            Identifier: 'name'
            StringKeyword
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Returns the values of all name-value pairs whose name is `name`. If there are
         * no such pairs, an empty array is returned.
         */
        getAll'
          Parameter
            Identifier: 'name'
            StringKeyword
          ArrayType
            StringKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Checks if the `URLSearchParams` object contains key-value pair(s) based on `name` and an optional `value` argument.
         *
         * If `value` is provided, returns `true` when name-value pair with
         * same `name` and `value` exists.
         *
         * If `value` is not provided, returns `true` if there is at least one name-value
         * pair whose name is `name`.
         */
        has'
          Parameter
            Identifier: 'name'
            StringKeyword
          Parameter
            Identifier: ' value'
            QuestionToken
            StringKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Returns an ES6 `Iterator` over the names of each name-value pair.
         *
         * ```js
         * const params = new URLSearchParams('foo=bar&#x26;foo=baz');
         * for (const name of params.keys()) {
         *   console.log(name);
         * }
         * // Prints:
         * //   foo
         * //   foo
         * ```
         */
        keys'
          TypeReference
            Identifier: ' IterableIterator'
            StringKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Sets the value in the `URLSearchParams` object associated with `name` to `value`. If there are any pre-existing name-value pairs whose names are `name`,
         * set the first such pair's value to `value` and remove all others. If not,
         * append the name-value pair to the query string.
         *
         * ```js
         * const params = new URLSearchParams();
         * params.append('foo', 'bar');
         * params.append('foo', 'baz');
         * params.append('abc', 'def');
         * console.log(params.toString());
         * // Prints foo=bar&#x26;foo=baz&#x26;abc=def
         *
         * params.set('foo', 'def');
         * params.set('xyz', 'opq');
         * console.log(params.toString());
         * // Prints foo=def&#x26;abc=def&#x26;xyz=opq
         * ```
         */
        set'
          Parameter
            Identifier: 'name'
            StringKeyword
          Parameter
            Identifier: ' value'
            StringKeyword
          VoidKeyword
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' size'
          NumberKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Sort all existing name-value pairs in-place by their names. Sorting is done
         * with a [stable sorting algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability), so relative order between name-value pairs
         * with the same name is preserved.
         *
         * This method can be used, in particular, to increase cache hits.
         *
         * ```js
         * const params = new URLSearchParams('query[]=abc&#x26;type=search&#x26;query[]=123');
         * params.sort();
         * console.log(params.toString());
         * // Prints query%5B%5D=abc&#x26;query%5B%5D=123&#x26;type=search
         * ```
         * @since v7.7.0, v6.13.0
         */
        sort'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Returns the search parameters serialized as a string, with characters
         * percent-encoded where necessary.
         */
        toString'
          StringKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Returns an ES6 `Iterator` over the values of each name-value pair.
         */
        values'
          TypeReference
            Identifier: ' IterableIterator'
            StringKeyword
        MethodDeclaration
          ComputedPropertyName
            PropertyAccessExpression
              Identifier: 'Symbol'
              Identifier: 'iterator'
          TypeReference
            Identifier: ' IterableIterator'
            TupleType
              StringKeyword
              StringKeyword
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' URL'
              Identifier: ' _URL'
            ImportSpecifier
              Identifier: ' URLSearchParams'
              Identifier: ' _URLSearchParams'
        StringLiteral
      ModuleDeclaration
        Identifier: '
    global'
        ModuleBlock
          InterfaceDeclaration
            Identifier: ' URLSearchParams'
            HeritageClause
              ExpressionWithTypeArguments
                Identifier: ' _URLSearchParams'
          InterfaceDeclaration
            Identifier: ' URL'
            HeritageClause
              ExpressionWithTypeArguments
                Identifier: ' _URL'
          InterfaceDeclaration
            Identifier: ' Global'
            PropertySignature
              Identifier: '
            URL'
              TypeQuery
                Identifier: ' _URL'
            PropertySignature
              Identifier: '
            URLSearchParams'
              TypeQuery
                Identifier: ' _URLSearchParams'
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' URL'
                ConditionalType
                  TypeQuery
                    Identifier: ' globalThis'
                  TypeLiteral
                    PropertySignature
                      Identifier: '
            onmessage'
                      AnyKeyword
                    PropertySignature
                      Identifier: '
            URL'
                      InferType
                        TypeParameter
                          Identifier: ' T'
                  TypeReference
                    Identifier: ' T'
                  TypeQuery
                    Identifier: ' _URL'
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' URLSearchParams'
                ConditionalType
                  TypeQuery
                    Identifier: ' globalThis'
                  TypeLiteral
                    PropertySignature
                      Identifier: '
            onmessage'
                      AnyKeyword
                    PropertySignature
                      Identifier: '
            URLSearchParams'
                      InferType
                        TypeParameter
                          Identifier: ' T'
                  TypeReference
                    Identifier: ' T'
                  TypeQuery
                    Identifier: ' _URLSearchParams'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ExportDeclaration
        StringLiteral
