SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' Readable'
        StringLiteral
      InterfaceDeclaration
        Identifier: ' HeapSpaceInfo'
        PropertySignature
          Identifier: '
        space_name'
          StringKeyword
        PropertySignature
          Identifier: '
        space_size'
          NumberKeyword
        PropertySignature
          Identifier: '
        space_used_size'
          NumberKeyword
        PropertySignature
          Identifier: '
        space_available_size'
          NumberKeyword
        PropertySignature
          Identifier: '
        physical_space_size'
          NumberKeyword
      TypeAliasDeclaration
        Identifier: ' DoesZapCodeSpaceFlag'
        UnionType
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
      InterfaceDeclaration
        Identifier: ' HeapInfo'
        PropertySignature
          Identifier: '
        total_heap_size'
          NumberKeyword
        PropertySignature
          Identifier: '
        total_heap_size_executable'
          NumberKeyword
        PropertySignature
          Identifier: '
        total_physical_size'
          NumberKeyword
        PropertySignature
          Identifier: '
        total_available_size'
          NumberKeyword
        PropertySignature
          Identifier: '
        used_heap_size'
          NumberKeyword
        PropertySignature
          Identifier: '
        heap_size_limit'
          NumberKeyword
        PropertySignature
          Identifier: '
        malloced_memory'
          NumberKeyword
        PropertySignature
          Identifier: '
        peak_malloced_memory'
          NumberKeyword
        PropertySignature
          Identifier: '
        does_zap_garbage'
          TypeReference
            Identifier: ' DoesZapCodeSpaceFlag'
        PropertySignature
          Identifier: '
        number_of_native_contexts'
          NumberKeyword
        PropertySignature
          Identifier: '
        number_of_detached_contexts'
          NumberKeyword
        PropertySignature
          Identifier: '
        total_global_handles_size'
          NumberKeyword
        PropertySignature
          Identifier: '
        used_global_handles_size'
          NumberKeyword
        PropertySignature
          Identifier: '
        external_memory'
          NumberKeyword
      InterfaceDeclaration
        Identifier: ' HeapCodeStatistics'
        PropertySignature
          Identifier: '
        code_and_metadata_size'
          NumberKeyword
        PropertySignature
          Identifier: '
        bytecode_and_metadata_size'
          NumberKeyword
        PropertySignature
          Identifier: '
        external_script_source_size'
          NumberKeyword
      InterfaceDeclaration
        Identifier: ' HeapSnapshotOptions'
        PropertySignature
          Identifier: '
        /**
         * If true, expose internals in the heap snapshot.
         * @default false
         */
        exposeInternals'
          QuestionToken
          BooleanKeyword
        PropertySignature
          Identifier: '
        /**
         * If true, expose numeric values in artificial fields.
         * @default false
         */
        exposeNumericValues'
          QuestionToken
          BooleanKeyword
      FunctionDeclaration
        Identifier: ' cachedDataVersionTag'
        NumberKeyword
      FunctionDeclaration
        Identifier: ' getHeapStatistics'
        TypeReference
          Identifier: ' HeapInfo'
      FunctionDeclaration
        Identifier: ' getHeapSpaceStatistics'
        ArrayType
          TypeReference
            Identifier: ' HeapSpaceInfo'
      FunctionDeclaration
        Identifier: ' setFlagsFromString'
        Parameter
          Identifier: 'flags'
          StringKeyword
        VoidKeyword
      FunctionDeclaration
        Identifier: ' queryObjects'
        Parameter
          Identifier: 'ctor'
          TypeReference
            Identifier: ' Function'
        UnionType
          NumberKeyword
          ArrayType
            StringKeyword
      FunctionDeclaration
        Identifier: ' queryObjects'
        Parameter
          Identifier: 'ctor'
          TypeReference
            Identifier: ' Function'
        Parameter
          Identifier: ' options'
          TypeLiteral
            PropertySignature
              Identifier: ' format'
              LiteralType
                StringLiteral
        NumberKeyword
      FunctionDeclaration
        Identifier: ' queryObjects'
        Parameter
          Identifier: 'ctor'
          TypeReference
            Identifier: ' Function'
        Parameter
          Identifier: ' options'
          TypeLiteral
            PropertySignature
              Identifier: ' format'
              LiteralType
                StringLiteral
        ArrayType
          StringKeyword
      FunctionDeclaration
        Identifier: ' getHeapSnapshot'
        Parameter
          Identifier: 'options'
          QuestionToken
          TypeReference
            Identifier: ' HeapSnapshotOptions'
        TypeReference
          Identifier: ' Readable'
      FunctionDeclaration
        Identifier: ' writeHeapSnapshot'
        Parameter
          Identifier: 'filename'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' HeapSnapshotOptions'
        StringKeyword
      FunctionDeclaration
        Identifier: ' getHeapCodeStatistics'
        TypeReference
          Identifier: ' HeapCodeStatistics'
      ClassDeclaration
        Identifier: ' Serializer'
        MethodDeclaration
          Identifier: '
        /**
         * Writes out a header, which includes the serialization format version.
         */
        writeHeader'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Serializes a JavaScript value and adds the serialized representation to the
         * internal buffer.
         *
         * This throws an error if `value` cannot be serialized.
         */
        writeValue'
          Parameter
            Identifier: 'val'
            AnyKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Returns the stored internal buffer. This serializer should not be used once
         * the buffer is released. Calling this method results in undefined behavior
         * if a previous write has failed.
         */
        releaseBuffer'
          TypeReference
            Identifier: ' Buffer'
        MethodDeclaration
          Identifier: '
        /**
         * Marks an `ArrayBuffer` as having its contents transferred out of band.
         * Pass the corresponding `ArrayBuffer` in the deserializing context to `deserializer.transferArrayBuffer()`.
         * @param id A 32-bit unsigned integer.
         * @param arrayBuffer An `ArrayBuffer` instance.
         */
        transferArrayBuffer'
          Parameter
            Identifier: 'id'
            NumberKeyword
          Parameter
            Identifier: ' arrayBuffer'
            TypeReference
              Identifier: ' ArrayBuffer'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Write a raw 32-bit unsigned integer.
         * For use inside of a custom `serializer._writeHostObject()`.
         */
        writeUint32'
          Parameter
            Identifier: 'value'
            NumberKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Write a raw 64-bit unsigned integer, split into high and low 32-bit parts.
         * For use inside of a custom `serializer._writeHostObject()`.
         */
        writeUint64'
          Parameter
            Identifier: 'hi'
            NumberKeyword
          Parameter
            Identifier: ' lo'
            NumberKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Write a JS `number` value.
         * For use inside of a custom `serializer._writeHostObject()`.
         */
        writeDouble'
          Parameter
            Identifier: 'value'
            NumberKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Write raw bytes into the serializer's internal buffer. The deserializer
         * will require a way to compute the length of the buffer.
         * For use inside of a custom `serializer._writeHostObject()`.
         */
        writeRawBytes'
          Parameter
            Identifier: 'buffer'
            TypeReference
              QualifiedName
                Identifier: ' NodeJS'
                Identifier: 'TypedArray'
          VoidKeyword
      ClassDeclaration
        Identifier: ' DefaultSerializer'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Serializer'
      ClassDeclaration
        Identifier: ' Deserializer'
        Constructor
          Parameter
            Identifier: 'data'
            TypeReference
              QualifiedName
                Identifier: ' NodeJS'
                Identifier: 'TypedArray'
        MethodDeclaration
          Identifier: '
        /**
         * Reads and validates a header (including the format version).
         * May, for example, reject an invalid or unsupported wire format. In that case,
         * an `Error` is thrown.
         */
        readHeader'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Deserializes a JavaScript value from the buffer and returns it.
         */
        readValue'
          AnyKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Marks an `ArrayBuffer` as having its contents transferred out of band.
         * Pass the corresponding `ArrayBuffer` in the serializing context to `serializer.transferArrayBuffer()` (or return the `id` from `serializer._getSharedArrayBufferId()` in the case of
         * `SharedArrayBuffer`s).
         * @param id A 32-bit unsigned integer.
         * @param arrayBuffer An `ArrayBuffer` instance.
         */
        transferArrayBuffer'
          Parameter
            Identifier: 'id'
            NumberKeyword
          Parameter
            Identifier: ' arrayBuffer'
            TypeReference
              Identifier: ' ArrayBuffer'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Reads the underlying wire format version. Likely mostly to be useful to
         * legacy code reading old wire format versions. May not be called before `.readHeader()`.
         */
        getWireFormatVersion'
          NumberKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Read a raw 32-bit unsigned integer and return it.
         * For use inside of a custom `deserializer._readHostObject()`.
         */
        readUint32'
          NumberKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Read a raw 64-bit unsigned integer and return it as an array `[hi, lo]` with two 32-bit unsigned integer entries.
         * For use inside of a custom `deserializer._readHostObject()`.
         */
        readUint64'
          TupleType
            NumberKeyword
            NumberKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Read a JS `number` value.
         * For use inside of a custom `deserializer._readHostObject()`.
         */
        readDouble'
          NumberKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Read raw bytes from the deserializer's internal buffer. The `length` parameter
         * must correspond to the length of the buffer that was passed to `serializer.writeRawBytes()`.
         * For use inside of a custom `deserializer._readHostObject()`.
         */
        readRawBytes'
          Parameter
            Identifier: 'length'
            NumberKeyword
          TypeReference
            Identifier: ' Buffer'
      ClassDeclaration
        Identifier: ' DefaultDeserializer'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Deserializer'
      FunctionDeclaration
        Identifier: ' serialize'
        Parameter
          Identifier: 'value'
          AnyKeyword
        TypeReference
          Identifier: ' Buffer'
      FunctionDeclaration
        Identifier: ' deserialize'
        Parameter
          Identifier: 'buffer'
          TypeReference
            QualifiedName
              Identifier: ' NodeJS'
              Identifier: 'TypedArray'
        AnyKeyword
      FunctionDeclaration
        Identifier: ' takeCoverage'
        VoidKeyword
      FunctionDeclaration
        Identifier: ' stopCoverage'
        VoidKeyword
      FunctionDeclaration
        Identifier: ' setHeapSnapshotNearHeapLimit'
        Parameter
          Identifier: 'limit'
          NumberKeyword
        VoidKeyword
      ClassDeclaration
        Identifier: ' GCProfiler'
        MethodDeclaration
          Identifier: '
        /**
         * Start collecting GC data.
         * @since v19.6.0, v18.15.0
         */
        start'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Stop collecting GC data and return an object. The content of object
         * is as follows.
         *
         * ```json
         * {
         *   "version": 1,
         *   "startTime": 1674059033862,
         *   "statistics": [
         *     {
         *       "gcType": "Scavenge",
         *       "beforeGC": {
         *         "heapStatistics": {
         *           "totalHeapSize": 5005312,
         *           "totalHeapSizeExecutable": 524288,
         *           "totalPhysicalSize": 5226496,
         *           "totalAvailableSize": 4341325216,
         *           "totalGlobalHandlesSize": 8192,
         *           "usedGlobalHandlesSize": 2112,
         *           "usedHeapSize": 4883840,
         *           "heapSizeLimit": 4345298944,
         *           "mallocedMemory": 254128,
         *           "externalMemory": 225138,
         *           "peakMallocedMemory": 181760
         *         },
         *         "heapSpaceStatistics": [
         *           {
         *             "spaceName": "read_only_space",
         *             "spaceSize": 0,
         *             "spaceUsedSize": 0,
         *             "spaceAvailableSize": 0,
         *             "physicalSpaceSize": 0
         *           }
         *         ]
         *       },
         *       "cost": 1574.14,
         *       "afterGC": {
         *         "heapStatistics": {
         *           "totalHeapSize": 6053888,
         *           "totalHeapSizeExecutable": 524288,
         *           "totalPhysicalSize": 5500928,
         *           "totalAvailableSize": 4341101384,
         *           "totalGlobalHandlesSize": 8192,
         *           "usedGlobalHandlesSize": 2112,
         *           "usedHeapSize": 4059096,
         *           "heapSizeLimit": 4345298944,
         *           "mallocedMemory": 254128,
         *           "externalMemory": 225138,
         *           "peakMallocedMemory": 181760
         *         },
         *         "heapSpaceStatistics": [
         *           {
         *             "spaceName": "read_only_space",
         *             "spaceSize": 0,
         *             "spaceUsedSize": 0,
         *             "spaceAvailableSize": 0,
         *             "physicalSpaceSize": 0
         *           }
         *         ]
         *       }
         *     }
         *   ],
         *   "endTime": 1674059036865
         * }
         * ```
         *
         * Here's an example.
         *
         * ```js
         * const { GCProfiler } = require('v8');
         * const profiler = new GCProfiler();
         * profiler.start();
         * setTimeout(() => {
         *   console.log(profiler.stop());
         * }, 1000);
         * ```
         * @since v19.6.0, v18.15.0
         */
        stop'
          TypeReference
            Identifier: ' GCProfilerResult'
      InterfaceDeclaration
        Identifier: ' GCProfilerResult'
        PropertySignature
          Identifier: '
        version'
          NumberKeyword
        PropertySignature
          Identifier: '
        startTime'
          NumberKeyword
        PropertySignature
          Identifier: '
        endTime'
          NumberKeyword
        PropertySignature
          Identifier: '
        statistics'
          TypeReference
            Identifier: ' Array'
            TypeLiteral
              PropertySignature
                Identifier: '
            gcType'
                StringKeyword
              PropertySignature
                Identifier: '
            cost'
                NumberKeyword
              PropertySignature
                Identifier: '
            beforeGC'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                heapStatistics'
                    TypeReference
                      Identifier: ' HeapStatistics'
                  PropertySignature
                    Identifier: '
                heapSpaceStatistics'
                    ArrayType
                      TypeReference
                        Identifier: ' HeapSpaceStatistics'
              PropertySignature
                Identifier: '
            afterGC'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                heapStatistics'
                    TypeReference
                      Identifier: ' HeapStatistics'
                  PropertySignature
                    Identifier: '
                heapSpaceStatistics'
                    ArrayType
                      TypeReference
                        Identifier: ' HeapSpaceStatistics'
      InterfaceDeclaration
        Identifier: ' HeapStatistics'
        PropertySignature
          Identifier: '
        totalHeapSize'
          NumberKeyword
        PropertySignature
          Identifier: '
        totalHeapSizeExecutable'
          NumberKeyword
        PropertySignature
          Identifier: '
        totalPhysicalSize'
          NumberKeyword
        PropertySignature
          Identifier: '
        totalAvailableSize'
          NumberKeyword
        PropertySignature
          Identifier: '
        totalGlobalHandlesSize'
          NumberKeyword
        PropertySignature
          Identifier: '
        usedGlobalHandlesSize'
          NumberKeyword
        PropertySignature
          Identifier: '
        usedHeapSize'
          NumberKeyword
        PropertySignature
          Identifier: '
        heapSizeLimit'
          NumberKeyword
        PropertySignature
          Identifier: '
        mallocedMemory'
          NumberKeyword
        PropertySignature
          Identifier: '
        externalMemory'
          NumberKeyword
        PropertySignature
          Identifier: '
        peakMallocedMemory'
          NumberKeyword
      InterfaceDeclaration
        Identifier: ' HeapSpaceStatistics'
        PropertySignature
          Identifier: '
        spaceName'
          StringKeyword
        PropertySignature
          Identifier: '
        spaceSize'
          NumberKeyword
        PropertySignature
          Identifier: '
        spaceUsedSize'
          NumberKeyword
        PropertySignature
          Identifier: '
        spaceAvailableSize'
          NumberKeyword
        PropertySignature
          Identifier: '
        physicalSpaceSize'
          NumberKeyword
      InterfaceDeclaration
        Identifier: ' Init'
        CallSignature
          Parameter
            Identifier: 'promise'
            TypeReference
              Identifier: ' Promise'
              UnknownKeyword
          Parameter
            Identifier: ' parent'
            TypeReference
              Identifier: ' Promise'
              UnknownKeyword
          VoidKeyword
      InterfaceDeclaration
        Identifier: ' Before'
        CallSignature
          Parameter
            Identifier: 'promise'
            TypeReference
              Identifier: ' Promise'
              UnknownKeyword
          VoidKeyword
      InterfaceDeclaration
        Identifier: ' After'
        CallSignature
          Parameter
            Identifier: 'promise'
            TypeReference
              Identifier: ' Promise'
              UnknownKeyword
          VoidKeyword
      InterfaceDeclaration
        Identifier: ' Settled'
        CallSignature
          Parameter
            Identifier: 'promise'
            TypeReference
              Identifier: ' Promise'
              UnknownKeyword
          VoidKeyword
      InterfaceDeclaration
        Identifier: ' HookCallbacks'
        PropertySignature
          Identifier: '
        init'
          QuestionToken
          TypeReference
            Identifier: ' Init'
        PropertySignature
          Identifier: '
        before'
          QuestionToken
          TypeReference
            Identifier: ' Before'
        PropertySignature
          Identifier: '
        after'
          QuestionToken
          TypeReference
            Identifier: ' After'
        PropertySignature
          Identifier: '
        settled'
          QuestionToken
          TypeReference
            Identifier: ' Settled'
      InterfaceDeclaration
        Identifier: ' PromiseHooks'
        PropertySignature
          Identifier: '
        /**
         * The `init` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.
         * @since v17.1.0, v16.14.0
         * @param init The {@link Init | `init` callback} to call when a promise is created.
         * @return Call to stop the hook.
         */
        onInit'
          FunctionType
            Parameter
              Identifier: 'init'
              TypeReference
                Identifier: ' Init'
            TypeReference
              Identifier: ' Function'
        PropertySignature
          Identifier: '
        /**
         * The `settled` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.
         * @since v17.1.0, v16.14.0
         * @param settled The {@link Settled | `settled` callback} to call when a promise is created.
         * @return Call to stop the hook.
         */
        onSettled'
          FunctionType
            Parameter
              Identifier: 'settled'
              TypeReference
                Identifier: ' Settled'
            TypeReference
              Identifier: ' Function'
        PropertySignature
          Identifier: '
        /**
         * The `before` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.
         * @since v17.1.0, v16.14.0
         * @param before The {@link Before | `before` callback} to call before a promise continuation executes.
         * @return Call to stop the hook.
         */
        onBefore'
          FunctionType
            Parameter
              Identifier: 'before'
              TypeReference
                Identifier: ' Before'
            TypeReference
              Identifier: ' Function'
        PropertySignature
          Identifier: '
        /**
         * The `after` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.
         * @since v17.1.0, v16.14.0
         * @param after The {@link After | `after` callback} to call after a promise continuation executes.
         * @return Call to stop the hook.
         */
        onAfter'
          FunctionType
            Parameter
              Identifier: 'after'
              TypeReference
                Identifier: ' After'
            TypeReference
              Identifier: ' Function'
        PropertySignature
          Identifier: '
        /**
         * Registers functions to be called for different lifetime events of each promise.
         * The callbacks `init()`/`before()`/`after()`/`settled()` are called for the respective events during a promise's lifetime.
         * All callbacks are optional. For example, if only promise creation needs to be tracked, then only the init callback needs to be passed.
         * The hook callbacks must be plain functions. Providing async functions will throw as it would produce an infinite microtask loop.
         * @since v17.1.0, v16.14.0
         * @param callbacks The {@link HookCallbacks | Hook Callbacks} to register
         * @return Used for disabling hooks
         */
        createHook'
          FunctionType
            Parameter
              Identifier: 'callbacks'
              TypeReference
                Identifier: ' HookCallbacks'
            TypeReference
              Identifier: ' Function'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' promiseHooks'
            TypeReference
              Identifier: ' PromiseHooks'
      TypeAliasDeclaration
        Identifier: ' StartupSnapshotCallbackFn'
        FunctionType
          Parameter
            Identifier: 'args'
            AnyKeyword
          AnyKeyword
      InterfaceDeclaration
        Identifier: ' StartupSnapshot'
        MethodSignature
          Identifier: '
        /**
         * Add a callback that will be called when the Node.js instance is about to get serialized into a snapshot and exit.
         * This can be used to release resources that should not or cannot be serialized or to convert user data into a form more suitable for serialization.
         * @since v18.6.0, v16.17.0
         */
        addSerializeCallback'
          Parameter
            Identifier: 'callback'
            TypeReference
              Identifier: ' StartupSnapshotCallbackFn'
          Parameter
            Identifier: ' data'
            QuestionToken
            AnyKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        /**
         * Add a callback that will be called when the Node.js instance is deserialized from a snapshot.
         * The `callback` and the `data` (if provided) will be serialized into the snapshot, they can be used to re-initialize the state of the application or
         * to re-acquire resources that the application needs when the application is restarted from the snapshot.
         * @since v18.6.0, v16.17.0
         */
        addDeserializeCallback'
          Parameter
            Identifier: 'callback'
            TypeReference
              Identifier: ' StartupSnapshotCallbackFn'
          Parameter
            Identifier: ' data'
            QuestionToken
            AnyKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        /**
         * This sets the entry point of the Node.js application when it is deserialized from a snapshot. This can be called only once in the snapshot building script.
         * If called, the deserialized application no longer needs an additional entry point script to start up and will simply invoke the callback along with the deserialized
         * data (if provided), otherwise an entry point script still needs to be provided to the deserialized application.
         * @since v18.6.0, v16.17.0
         */
        setDeserializeMainFunction'
          Parameter
            Identifier: 'callback'
            TypeReference
              Identifier: ' StartupSnapshotCallbackFn'
          Parameter
            Identifier: ' data'
            QuestionToken
            AnyKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        /**
         * Returns true if the Node.js instance is run to build a snapshot.
         * @since v18.6.0, v16.17.0
         */
        isBuildingSnapshot'
          BooleanKeyword
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' startupSnapshot'
            TypeReference
              Identifier: ' StartupSnapshot'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ExportDeclaration
        StringLiteral
