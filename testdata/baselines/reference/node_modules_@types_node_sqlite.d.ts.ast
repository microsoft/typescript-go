SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      InterfaceDeclaration
        Identifier: ' DatabaseSyncOptions'
        PropertySignature
          Identifier: '
        /**
         * If `true`, the database is opened by the constructor.
         * When this value is `false`, the database must be opened via the `open()` method.
         */
        open'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
      ClassDeclaration
        Identifier: ' DatabaseSync'
        Constructor
          Parameter
            Identifier: 'location'
            StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' DatabaseSyncOptions'
        MethodDeclaration
          Identifier: '
        /**
         * Closes the database connection. An exception is thrown if the database is not
         * open. This method is a wrapper around [`sqlite3_close_v2()`](https://www.sqlite.org/c3ref/close.html).
         * @since v22.5.0
         */
        close'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This method allows one or more SQL statements to be executed without returning
         * any results. This method is useful when executing SQL statements read from a
         * file. This method is a wrapper around [`sqlite3_exec()`](https://www.sqlite.org/c3ref/exec.html).
         * @since v22.5.0
         * @param sql A SQL string to execute.
         */
        exec'
          Parameter
            Identifier: 'sql'
            StringKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Opens the database specified in the `location` argument of the `DatabaseSync`constructor. This method should only be used when the database is not opened via
         * the constructor. An exception is thrown if the database is already open.
         * @since v22.5.0
         */
        open'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Compiles a SQL statement into a [prepared statement](https://www.sqlite.org/c3ref/stmt.html). This method is a wrapper
         * around [`sqlite3_prepare_v2()`](https://www.sqlite.org/c3ref/prepare.html).
         * @since v22.5.0
         * @param sql A SQL string to compile to a prepared statement.
         * @return The prepared statement.
         */
        prepare'
          Parameter
            Identifier: 'sql'
            StringKeyword
          TypeReference
            Identifier: ' StatementSync'
      TypeAliasDeclaration
        Identifier: ' SupportedValueType'
        UnionType
          LiteralType
            NullKeyword
          NumberKeyword
          BigIntKeyword
          StringKeyword
          TypeReference
            Identifier: ' Uint8Array'
      InterfaceDeclaration
        Identifier: ' StatementResultingChanges'
        PropertySignature
          Identifier: '
        /**
         * The number of rows modified, inserted, or deleted by the most recently completed `INSERT`, `UPDATE`, or `DELETE` statement.
         * This field is either a number or a `BigInt` depending on the prepared statement's configuration.
         * This property is the result of [`sqlite3_changes64()`](https://www.sqlite.org/c3ref/changes.html).
         */
        changes'
          UnionType
            NumberKeyword
            BigIntKeyword
        PropertySignature
          Identifier: '
        /**
         * The most recently inserted rowid.
         * This field is either a number or a `BigInt` depending on the prepared statement's configuration.
         * This property is the result of [`sqlite3_last_insert_rowid()`](https://www.sqlite.org/c3ref/last_insert_rowid.html).
         */
        lastInsertRowid'
          UnionType
            NumberKeyword
            BigIntKeyword
      ClassDeclaration
        Identifier: ' StatementSync'
        Constructor
          PrivateKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This method executes a prepared statement and returns all results as an array of
         * objects. If the prepared statement does not return any results, this method
         * returns an empty array. The prepared statement [parameters are bound](https://www.sqlite.org/c3ref/bind_blob.html) using
         * the values in `namedParameters` and `anonymousParameters`.
         * @since v22.5.0
         * @param namedParameters An optional object used to bind named parameters. The keys of this object are used to configure the mapping.
         * @param anonymousParameters Zero or more values to bind to anonymous parameters.
         * @return An array of objects. Each object corresponds to a row returned by executing the prepared statement. The keys and values of each object correspond to the column names and values of
         * the row.
         */
        all'
          Parameter
            DotDotDotToken
            Identifier: 'anonymousParameters'
            ArrayType
              TypeReference
                Identifier: ' SupportedValueType'
          ArrayType
            UnknownKeyword
        MethodDeclaration
          Identifier: '
        all'
          Parameter
            Identifier: '
            namedParameters'
            TypeReference
              Identifier: ' Record'
              StringKeyword
              TypeReference
                Identifier: ' SupportedValueType'
          Parameter
            DotDotDotToken
            Identifier: 'anonymousParameters'
            ArrayType
              TypeReference
                Identifier: ' SupportedValueType'
          ArrayType
            UnknownKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This method returns the source SQL of the prepared statement with parameter
         * placeholders replaced by values. This method is a wrapper around [`sqlite3_expanded_sql()`](https://www.sqlite.org/c3ref/expanded_sql.html).
         * @since v22.5.0
         * @return The source SQL expanded to include parameter values.
         */
        expandedSQL'
          StringKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This method executes a prepared statement and returns the first result as an
         * object. If the prepared statement does not return any results, this method
         * returns `undefined`. The prepared statement [parameters are bound](https://www.sqlite.org/c3ref/bind_blob.html) using the
         * values in `namedParameters` and `anonymousParameters`.
         * @since v22.5.0
         * @param namedParameters An optional object used to bind named parameters. The keys of this object are used to configure the mapping.
         * @param anonymousParameters Zero or more values to bind to anonymous parameters.
         * @return An object corresponding to the first row returned by executing the prepared statement. The keys and values of the object correspond to the column names and values of the row. If no
         * rows were returned from the database then this method returns `undefined`.
         */
        get'
          Parameter
            DotDotDotToken
            Identifier: 'anonymousParameters'
            ArrayType
              TypeReference
                Identifier: ' SupportedValueType'
          UnknownKeyword
        MethodDeclaration
          Identifier: '
        get'
          Parameter
            Identifier: 'namedParameters'
            TypeReference
              Identifier: ' Record'
              StringKeyword
              TypeReference
                Identifier: ' SupportedValueType'
          Parameter
            DotDotDotToken
            Identifier: 'anonymousParameters'
            ArrayType
              TypeReference
                Identifier: ' SupportedValueType'
          UnknownKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This method executes a prepared statement and returns an object summarizing the
         * resulting changes. The prepared statement [parameters are bound](https://www.sqlite.org/c3ref/bind_blob.html) using the
         * values in `namedParameters` and `anonymousParameters`.
         * @since v22.5.0
         * @param namedParameters An optional object used to bind named parameters. The keys of this object are used to configure the mapping.
         * @param anonymousParameters Zero or more values to bind to anonymous parameters.
         */
        run'
          Parameter
            DotDotDotToken
            Identifier: 'anonymousParameters'
            ArrayType
              TypeReference
                Identifier: ' SupportedValueType'
          TypeReference
            Identifier: ' StatementResultingChanges'
        MethodDeclaration
          Identifier: '
        run'
          Parameter
            Identifier: '
            namedParameters'
            TypeReference
              Identifier: ' Record'
              StringKeyword
              TypeReference
                Identifier: ' SupportedValueType'
          Parameter
            DotDotDotToken
            Identifier: 'anonymousParameters'
            ArrayType
              TypeReference
                Identifier: ' SupportedValueType'
          TypeReference
            Identifier: ' StatementResultingChanges'
        MethodDeclaration
          Identifier: '
        /**
         * The names of SQLite parameters begin with a prefix character. By default,`node:sqlite` requires that this prefix character is present when binding
         * parameters. However, with the exception of dollar sign character, these
         * prefix characters also require extra quoting when used in object keys.
         *
         * To improve ergonomics, this method can be used to also allow bare named
         * parameters, which do not require the prefix character in JavaScript code. There
         * are several caveats to be aware of when enabling bare named parameters:
         *
         * * The prefix character is still required in SQL.
         * * The prefix character is still allowed in JavaScript. In fact, prefixed names
         * will have slightly better binding performance.
         * * Using ambiguous named parameters, such as `$k` and `@k`, in the same prepared
         * statement will result in an exception as it cannot be determined how to bind
         * a bare name.
         * @since v22.5.0
         * @param enabled Enables or disables support for binding named parameters without the prefix character.
         */
        setAllowBareNamedParameters'
          Parameter
            Identifier: 'enabled'
            BooleanKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * When reading from the database, SQLite `INTEGER`s are mapped to JavaScript
         * numbers by default. However, SQLite `INTEGER`s can store values larger than
         * JavaScript numbers are capable of representing. In such cases, this method can
         * be used to read `INTEGER` data using JavaScript `BigInt`s. This method has no
         * impact on database write operations where numbers and `BigInt`s are both
         * supported at all times.
         * @since v22.5.0
         * @param enabled Enables or disables the use of `BigInt`s when reading `INTEGER` fields from the database.
         */
        setReadBigInts'
          Parameter
            Identifier: 'enabled'
            BooleanKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This method returns the source SQL of the prepared statement. This method is a
         * wrapper around [`sqlite3_sql()`](https://www.sqlite.org/c3ref/expanded_sql.html).
         * @since v22.5.0
         * @return The source SQL used to create this prepared statement.
         */
        sourceSQL'
          StringKeyword
