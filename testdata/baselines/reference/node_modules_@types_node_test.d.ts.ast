SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' Readable'
        StringLiteral
      FunctionDeclaration
        Identifier: ' run'
        Parameter
          Identifier: 'options'
          QuestionToken
          TypeReference
            Identifier: ' RunOptions'
        TypeReference
          Identifier: ' TestsStream'
      FunctionDeclaration
        Identifier: ' test'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' test'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' test'
        Parameter
          Identifier: 'options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' test'
        Parameter
          Identifier: 'fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      ModuleDeclaration
        Identifier: ' test'
        ModuleBlock
          ExportDeclaration
            NamedExports
              ExportSpecifier
                Identifier: '
            after'
              ExportSpecifier
                Identifier: '
            afterEach'
              ExportSpecifier
                Identifier: '
            before'
              ExportSpecifier
                Identifier: '
            beforeEach'
              ExportSpecifier
                Identifier: '
            describe'
              ExportSpecifier
                Identifier: '
            it'
              ExportSpecifier
                Identifier: '
            mock'
              ExportSpecifier
                Identifier: '
            only'
              ExportSpecifier
                Identifier: '
            run'
              ExportSpecifier
                Identifier: '
            skip'
              ExportSpecifier
                Identifier: '
            snapshot'
              ExportSpecifier
                Identifier: '
            suite'
              ExportSpecifier
                Identifier: '
            test'
              ExportSpecifier
                Identifier: '
            todo'
      FunctionDeclaration
        Identifier: ' suite'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' SuiteFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' suite'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' SuiteFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' suite'
        Parameter
          Identifier: 'options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' SuiteFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' suite'
        Parameter
          Identifier: 'fn'
          QuestionToken
          TypeReference
            Identifier: ' SuiteFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      ModuleDeclaration
        Identifier: ' suite'
        ModuleBlock
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
      FunctionDeclaration
        Identifier: ' describe'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' SuiteFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' describe'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' SuiteFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' describe'
        Parameter
          Identifier: 'options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' SuiteFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' describe'
        Parameter
          Identifier: 'fn'
          QuestionToken
          TypeReference
            Identifier: ' SuiteFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      ModuleDeclaration
        Identifier: ' describe'
        ModuleBlock
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'fn'
              QuestionToken
              TypeReference
                Identifier: ' SuiteFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
      FunctionDeclaration
        Identifier: ' it'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' it'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' it'
        Parameter
          Identifier: 'options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' it'
        Parameter
          Identifier: 'fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      ModuleDeclaration
        Identifier: ' it'
        ModuleBlock
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' skip'
            Parameter
              Identifier: 'fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' todo'
            Parameter
              Identifier: 'fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'options'
              QuestionToken
              TypeReference
                Identifier: ' TestOptions'
            Parameter
              Identifier: ' fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
          FunctionDeclaration
            Identifier: ' only'
            Parameter
              Identifier: 'fn'
              QuestionToken
              TypeReference
                Identifier: ' TestFn'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
      FunctionDeclaration
        Identifier: ' skip'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' skip'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' skip'
        Parameter
          Identifier: 'options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' skip'
        Parameter
          Identifier: 'fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' todo'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' todo'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' todo'
        Parameter
          Identifier: 'options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' todo'
        Parameter
          Identifier: 'fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' only'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' only'
        Parameter
          Identifier: 'name'
          QuestionToken
          StringKeyword
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' only'
        Parameter
          Identifier: 'options'
          QuestionToken
          TypeReference
            Identifier: ' TestOptions'
        Parameter
          Identifier: ' fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' only'
        Parameter
          Identifier: 'fn'
          QuestionToken
          TypeReference
            Identifier: ' TestFn'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      TypeAliasDeclaration
        Identifier: ' TestFn'
        FunctionType
          Parameter
            Identifier: 't'
            TypeReference
              Identifier: ' TestContext'
          Parameter
            Identifier: ' done'
            FunctionType
              Parameter
                Identifier: 'result'
                QuestionToken
                AnyKeyword
              VoidKeyword
          UnionType
            VoidKeyword
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
      TypeAliasDeclaration
        Identifier: ' SuiteFn'
        FunctionType
          Parameter
            Identifier: 's'
            TypeReference
              Identifier: ' SuiteContext'
          UnionType
            VoidKeyword
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
      InterfaceDeclaration
        Identifier: ' TestShard'
        PropertySignature
          Identifier: '
        /**
         * A positive integer between 1 and `total` that specifies the index of the shard to run.
         */
        index'
          NumberKeyword
        PropertySignature
          Identifier: '
        /**
         * A positive integer that specifies the total number of shards to split the test files to.
         */
        total'
          NumberKeyword
      InterfaceDeclaration
        Identifier: ' RunOptions'
        PropertySignature
          Identifier: '
        /**
         * If a number is provided, then that many test processes would run in parallel, where each process corresponds to one test file.
         * If `true`, it would run `os.availableParallelism() - 1` test files in parallel. If `false`, it would only run one test file at a time.
         * @default false
         */
        concurrency'
          QuestionToken
          UnionType
            NumberKeyword
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * An array containing the list of files to run. If omitted, files are run according to the
         * [test runner execution model](https://nodejs.org/docs/latest-v22.x/api/test.html#test-runner-execution-model).
         */
        files'
          QuestionToken
          UnionType
            TypeOperator
              ArrayType
                StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Configures the test runner to exit the process once all known
         * tests have finished executing even if the event loop would
         * otherwise remain active.
         * @default false
         */
        forceExit'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Sets inspector port of test child process.
         * If a nullish value is provided, each process gets its own port,
         * incremented from the primary's `process.debugPort`.
         * @default undefined
         */
        inspectPort'
          QuestionToken
          UnionType
            NumberKeyword
            ParenthesizedType
              FunctionType
                NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * If truthy, the test context will only run tests that have the `only` option set
         */
        only'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * A function that accepts the `TestsStream` instance and can be used to setup listeners before any tests are run.
         * @default undefined
         */
        setup'
          QuestionToken
          UnionType
            ParenthesizedType
              FunctionType
                Parameter
                  Identifier: 'reporter'
                  TypeReference
                    Identifier: ' TestsStream'
                UnionType
                  VoidKeyword
                  TypeReference
                    Identifier: ' Promise'
                    VoidKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Allows aborting an in-progress test execution.
         */
        signal'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' AbortSignal'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * If provided, only run tests whose name matches the provided pattern.
         * Strings are interpreted as JavaScript regular expressions.
         * @default undefined
         */
        testNamePatterns'
          QuestionToken
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' RegExp'
            TypeReference
              Identifier: ' ReadonlyArray'
              UnionType
                StringKeyword
                TypeReference
                  Identifier: ' RegExp'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * A String, RegExp or a RegExp Array, that can be used to exclude running tests whose
         * name matches the provided pattern. Test name patterns are interpreted as JavaScript
         * regular expressions. For each test that is executed, any corresponding test hooks,
         * such as `beforeEach()`, are also run.
         * @default undefined
         * @since v22.1.0
         */
        testSkipPatterns'
          QuestionToken
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' RegExp'
            TypeReference
              Identifier: ' ReadonlyArray'
              UnionType
                StringKeyword
                TypeReference
                  Identifier: ' RegExp'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The number of milliseconds after which the test execution will fail.
         * If unspecified, subtests inherit this value from their parent.
         * @default Infinity
         */
        timeout'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Whether to run in watch mode or not.
         * @default false
         */
        watch'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Running tests in a specific shard.
         * @default undefined
         */
        shard'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' TestShard'
            UndefinedKeyword
      ClassDeclaration
        Identifier: ' TestsStream'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Readable'
        HeritageClause
          ExpressionWithTypeArguments
            PropertyAccessExpression
              Identifier: ' NodeJS'
              Identifier: 'ReadableStream'
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestCoverage'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestComplete'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestDequeue'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' DiagnosticData'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestEnqueue'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestFail'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestPass'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestPlan'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStart'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStderr'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStdout'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            StringKeyword
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' data'
            TypeReference
              Identifier: ' TestCoverage'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' data'
            TypeReference
              Identifier: ' TestComplete'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' data'
            TypeReference
              Identifier: ' TestDequeue'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' data'
            TypeReference
              Identifier: ' DiagnosticData'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' data'
            TypeReference
              Identifier: ' TestEnqueue'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' data'
            TypeReference
              Identifier: ' TestFail'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' data'
            TypeReference
              Identifier: ' TestPass'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' data'
            TypeReference
              Identifier: ' TestPlan'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' data'
            TypeReference
              Identifier: ' TestStart'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' data'
            TypeReference
              Identifier: ' TestStderr'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' data'
            TypeReference
              Identifier: ' TestStdout'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            UnionType
              StringKeyword
              SymbolKeyword
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestCoverage'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestComplete'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestDequeue'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' DiagnosticData'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestEnqueue'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestFail'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestPass'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestPlan'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStart'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStderr'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStdout'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            StringKeyword
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestCoverage'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestComplete'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestDequeue'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' DiagnosticData'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestEnqueue'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestFail'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestPass'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestPlan'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStart'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStderr'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStdout'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            StringKeyword
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestCoverage'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestComplete'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestDequeue'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' DiagnosticData'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestEnqueue'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestFail'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestPass'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestPlan'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStart'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStderr'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStdout'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            StringKeyword
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestCoverage'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestComplete'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestDequeue'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' DiagnosticData'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestEnqueue'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestFail'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestPass'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestPlan'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStart'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStderr'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                Identifier: 'data'
                TypeReference
                  Identifier: ' TestStdout'
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            StringKeyword
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          ThisType
      ClassDeclaration
        Identifier: ' TestContext'
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' assert'
          TypeReference
            Identifier: ' TestContextAssert'
        MethodDeclaration
          Identifier: '
        /**
         * This function is used to create a hook running before subtest of the current test.
         * @param fn The hook function. The first argument to this function is a `TestContext` object.
         * If the hook uses callbacks, the callback function is passed as the second argument.
         * @param options Configuration options for the hook.
         * @since v20.1.0, v18.17.0
         */
        before'
          Parameter
            Identifier: 'fn'
            QuestionToken
            TypeReference
              Identifier: ' TestContextHookFn'
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' HookOptions'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This function is used to create a hook running before each subtest of the current test.
         * @param fn The hook function. The first argument to this function is a `TestContext` object.
         * If the hook uses callbacks, the callback function is passed as the second argument.
         * @param options Configuration options for the hook.
         * @since v18.8.0
         */
        beforeEach'
          Parameter
            Identifier: 'fn'
            QuestionToken
            TypeReference
              Identifier: ' TestContextHookFn'
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' HookOptions'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This function is used to create a hook that runs after the current test finishes.
         * @param fn The hook function. The first argument to this function is a `TestContext` object.
         * If the hook uses callbacks, the callback function is passed as the second argument.
         * @param options Configuration options for the hook.
         * @since v18.13.0
         */
        after'
          Parameter
            Identifier: 'fn'
            QuestionToken
            TypeReference
              Identifier: ' TestContextHookFn'
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' HookOptions'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This function is used to create a hook running after each subtest of the current test.
         * @param fn The hook function. The first argument to this function is a `TestContext` object.
         * If the hook uses callbacks, the callback function is passed as the second argument.
         * @param options Configuration options for the hook.
         * @since v18.8.0
         */
        afterEach'
          Parameter
            Identifier: 'fn'
            QuestionToken
            TypeReference
              Identifier: ' TestContextHookFn'
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' HookOptions'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This function is used to write diagnostics to the output. Any diagnostic
         * information is included at the end of the test's results. This function does
         * not return a value.
         *
         * ```js
         * test('top level test', (t) => {
         *   t.diagnostic('A diagnostic message');
         * });
         * ```
         * @since v18.0.0, v16.17.0
         * @param message Message to be reported.
         */
        diagnostic'
          Parameter
            Identifier: 'message'
            StringKeyword
          VoidKeyword
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' fullName'
          StringKeyword
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' name'
          StringKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Used to set the number of assertions and subtests that are expected to run within the test.
         * If the number of assertions and subtests that run does not match the expected count, the test will fail.
         *
         * To make sure assertions are tracked, the assert functions on `context.assert` must be used,
         * instead of importing from the `node:assert` module.
         * ```js
         * test('top level test', (t) => {
         *   t.plan(2);
         *   t.assert.ok('some relevant assertion here');
         *   t.test('subtest', () => {});
         * });
         * ```
         *
         * When working with asynchronous code, the `plan` function can be used to ensure that the correct number of assertions are run:
         * ```js
         * test('planning with streams', (t, done) => {
         *   function* generate() {
         *     yield 'a';
         *     yield 'b';
         *     yield 'c';
         *   }
         *   const expected = ['a', 'b', 'c'];
         *   t.plan(expected.length);
         *   const stream = Readable.from(generate());
         *   stream.on('data', (chunk) => {
         *     t.assert.strictEqual(chunk, expected.shift());
         *   });
         *   stream.on('end', () => {
         *     done();
         *   });
         * });
         * ```
         * @since v22.2.0
         */
        plan'
          Parameter
            Identifier: 'count'
            NumberKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * If `shouldRunOnlyTests` is truthy, the test context will only run tests that
         * have the `only` option set. Otherwise, all tests are run. If Node.js was not
         * started with the `--test-only` command-line option, this function is a
         * no-op.
         *
         * ```js
         * test('top level test', (t) => {
         *   // The test context can be set to run subtests with the 'only' option.
         *   t.runOnly(true);
         *   return Promise.all([
         *     t.test('this subtest is now skipped'),
         *     t.test('this subtest is run', { only: true }),
         *   ]);
         * });
         * ```
         * @since v18.0.0, v16.17.0
         * @param shouldRunOnlyTests Whether or not to run `only` tests.
         */
        runOnly'
          Parameter
            Identifier: 'shouldRunOnlyTests'
            BooleanKeyword
          VoidKeyword
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' signal'
          TypeReference
            Identifier: ' AbortSignal'
        MethodDeclaration
          Identifier: '
        /**
         * This function causes the test's output to indicate the test as skipped. If `message` is provided, it is included in the output. Calling `skip()` does
         * not terminate execution of the test function. This function does not return a
         * value.
         *
         * ```js
         * test('top level test', (t) => {
         *   // Make sure to return here as well if the test contains additional logic.
         *   t.skip('this is skipped');
         * });
         * ```
         * @since v18.0.0, v16.17.0
         * @param message Optional skip message.
         */
        skip'
          Parameter
            Identifier: 'message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This function adds a `TODO` directive to the test's output. If `message` is
         * provided, it is included in the output. Calling `todo()` does not terminate
         * execution of the test function. This function does not return a value.
         *
         * ```js
         * test('top level test', (t) => {
         *   // This test is marked as `TODO`
         *   t.todo('this is a todo');
         * });
         * ```
         * @since v18.0.0, v16.17.0
         * @param message Optional `TODO` message.
         */
        todo'
          Parameter
            Identifier: 'message'
            QuestionToken
            StringKeyword
          VoidKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * This function is used to create subtests under the current test. This function behaves in
         * the same fashion as the top level {@link test} function.
         * @since v18.0.0
         * @param name The name of the test, which is displayed when reporting test results.
         * Defaults to the `name` property of `fn`, or `'<anonymous>'` if `fn` does not have a name.
         * @param options Configuration options for the test.
         * @param fn The function under test. This first argument to this function is a {@link TestContext} object.
         * If the test uses callbacks, the callback function is passed as the second argument.
         * @returns A {@link Promise} resolved with `undefined` once the test completes.
         */
        test'
          TypeQuery
            Identifier: ' test'
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' mock'
          TypeReference
            Identifier: ' MockTracker'
      InterfaceDeclaration
        Identifier: ' TestContextAssert'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `deepEqual` function from the `node:assert` module, but bound to the test context.
         */
        deepEqual'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'deepEqual'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `deepStrictEqual` function from the `node:assert` module, but bound to the test context.
         */
        deepStrictEqual'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'deepStrictEqual'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `doesNotMatch` function from the `node:assert` module, but bound to the test context.
         */
        doesNotMatch'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'doesNotMatch'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `doesNotReject` function from the `node:assert` module, but bound to the test context.
         */
        doesNotReject'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'doesNotReject'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `doesNotThrow` function from the `node:assert` module, but bound to the test context.
         */
        doesNotThrow'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'doesNotThrow'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `equal` function from the `node:assert` module, but bound to the test context.
         */
        equal'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'equal'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `fail` function from the `node:assert` module, but bound to the test context.
         */
        fail'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'fail'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `ifError` function from the `node:assert` module, but bound to the test context.
         */
        ifError'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'ifError'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `match` function from the `node:assert` module, but bound to the test context.
         */
        match'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'match'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `notDeepEqual` function from the `node:assert` module, but bound to the test context.
         */
        notDeepEqual'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'notDeepEqual'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `notDeepStrictEqual` function from the `node:assert` module, but bound to the test context.
         */
        notDeepStrictEqual'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'notDeepStrictEqual'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `notEqual` function from the `node:assert` module, but bound to the test context.
         */
        notEqual'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'notEqual'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `notStrictEqual` function from the `node:assert` module, but bound to the test context.
         */
        notStrictEqual'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'notStrictEqual'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `ok` function from the `node:assert` module, but bound to the test context.
         */
        ok'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'ok'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `rejects` function from the `node:assert` module, but bound to the test context.
         */
        rejects'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'rejects'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `strictEqual` function from the `node:assert` module, but bound to the test context.
         */
        strictEqual'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'strictEqual'
        PropertySignature
          Identifier: '
        /**
         * Identical to the `throws` function from the `node:assert` module, but bound to the test context.
         */
        throws'
          ImportType
            LiteralType
              StringLiteral
            Identifier: 'throws'
        MethodSignature
          Identifier: '
        /**
         * This function implements assertions for snapshot testing.
         * ```js
         * test('snapshot test with default serialization', (t) => {
         *   t.assert.snapshot({ value1: 1, value2: 2 });
         * });
         *
         * test('snapshot test with custom serialization', (t) => {
         *   t.assert.snapshot({ value3: 3, value4: 4 }, {
         *     serializers: [(value) => JSON.stringify(value)]
         *   });
         * });
         * ```
         *
         * Only available through the [--experimental-test-snapshots](https://nodejs.org/api/cli.html#--experimental-test-snapshots) flag.
         * @since v22.3.0
         * @experimental
         */
        snapshot'
          Parameter
            Identifier: 'value'
            AnyKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' AssertSnapshotOptions'
          VoidKeyword
      InterfaceDeclaration
        Identifier: ' AssertSnapshotOptions'
        PropertySignature
          Identifier: '
        /**
         * An array of synchronous functions used to serialize `value` into a string.
         * `value` is passed as the only argument to the first serializer function.
         * The return value of each serializer is passed as input to the next serializer.
         * Once all serializers have run, the resulting value is coerced to a string.
         *
         * If no serializers are provided, the test runner's default serializers are used.
         */
        serializers'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' ReadonlyArray'
              FunctionType
                Parameter
                  Identifier: 'value'
                  AnyKeyword
                AnyKeyword
            UndefinedKeyword
      ClassDeclaration
        Identifier: ' SuiteContext'
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' name'
          StringKeyword
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' signal'
          TypeReference
            Identifier: ' AbortSignal'
      InterfaceDeclaration
        Identifier: ' TestOptions'
        PropertySignature
          Identifier: '
        /**
         * If a number is provided, then that many tests would run in parallel.
         * If truthy, it would run (number of cpu cores - 1) tests in parallel.
         * For subtests, it will be `Infinity` tests in parallel.
         * If falsy, it would only run one test at a time.
         * If unspecified, subtests inherit this value from their parent.
         * @default false
         */
        concurrency'
          QuestionToken
          UnionType
            NumberKeyword
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * If truthy, and the test context is configured to run `only` tests, then this test will be
         * run. Otherwise, the test is skipped.
         * @default false
         */
        only'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * Allows aborting an in-progress test.
         * @since v18.8.0
         */
        signal'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' AbortSignal'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * If truthy, the test is skipped. If a string is provided, that string is displayed in the
         * test results as the reason for skipping the test.
         * @default false
         */
        skip'
          QuestionToken
          UnionType
            BooleanKeyword
            StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * A number of milliseconds the test will fail after. If unspecified, subtests inherit this
         * value from their parent.
         * @default Infinity
         * @since v18.7.0
         */
        timeout'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * If truthy, the test marked as `TODO`. If a string is provided, that string is displayed in
         * the test results as the reason why the test is `TODO`.
         * @default false
         */
        todo'
          QuestionToken
          UnionType
            BooleanKeyword
            StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The number of assertions and subtests expected to be run in the test.
         * If the number of assertions run in the test does not match the number
         * specified in the plan, the test will fail.
         * @default undefined
         * @since v22.2.0
         */
        plan'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
      FunctionDeclaration
        Identifier: ' before'
        Parameter
          Identifier: 'fn'
          QuestionToken
          TypeReference
            Identifier: ' HookFn'
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' HookOptions'
        VoidKeyword
      FunctionDeclaration
        Identifier: ' after'
        Parameter
          Identifier: 'fn'
          QuestionToken
          TypeReference
            Identifier: ' HookFn'
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' HookOptions'
        VoidKeyword
      FunctionDeclaration
        Identifier: ' beforeEach'
        Parameter
          Identifier: 'fn'
          QuestionToken
          TypeReference
            Identifier: ' HookFn'
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' HookOptions'
        VoidKeyword
      FunctionDeclaration
        Identifier: ' afterEach'
        Parameter
          Identifier: 'fn'
          QuestionToken
          TypeReference
            Identifier: ' HookFn'
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' HookOptions'
        VoidKeyword
      TypeAliasDeclaration
        Identifier: ' HookFn'
        FunctionType
          Parameter
            Identifier: 'c'
            UnionType
              TypeReference
                Identifier: ' TestContext'
              TypeReference
                Identifier: ' SuiteContext'
          Parameter
            Identifier: ' done'
            FunctionType
              Parameter
                Identifier: 'result'
                QuestionToken
                AnyKeyword
              VoidKeyword
          AnyKeyword
      TypeAliasDeclaration
        Identifier: ' TestContextHookFn'
        FunctionType
          Parameter
            Identifier: 't'
            TypeReference
              Identifier: ' TestContext'
          Parameter
            Identifier: ' done'
            FunctionType
              Parameter
                Identifier: 'result'
                QuestionToken
                AnyKeyword
              VoidKeyword
          AnyKeyword
      InterfaceDeclaration
        Identifier: ' HookOptions'
        PropertySignature
          Identifier: '
        /**
         * Allows aborting an in-progress hook.
         */
        signal'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' AbortSignal'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * A number of milliseconds the hook will fail after. If unspecified, subtests inherit this
         * value from their parent.
         * @default Infinity
         */
        timeout'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' MockFunctionOptions'
        PropertySignature
          Identifier: '
        /**
         * The number of times that the mock will use the behavior of `implementation`.
         * Once the mock function has been called `times` times,
         * it will automatically restore the behavior of `original`.
         * This value must be an integer greater than zero.
         * @default Infinity
         */
        times'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' MockMethodOptions'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' MockFunctionOptions'
        PropertySignature
          Identifier: '
        /**
         * If `true`, `object[methodName]` is treated as a getter.
         * This option cannot be used with the `setter` option.
         */
        getter'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * If `true`, `object[methodName]` is treated as a setter.
         * This option cannot be used with the `getter` option.
         */
        setter'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
      TypeAliasDeclaration
        Identifier: ' Mock'
        TypeParameter
          Identifier: 'F'
          TypeReference
            Identifier: ' Function'
        IntersectionType
          TypeReference
            Identifier: ' F'
          TypeLiteral
            PropertySignature
              Identifier: '
        mock'
              TypeReference
                Identifier: ' MockFunctionContext'
                TypeReference
                  Identifier: 'F'
      TypeAliasDeclaration
        Identifier: ' NoOpFunction'
        FunctionType
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          UndefinedKeyword
      TypeAliasDeclaration
        Identifier: ' FunctionPropertyNames'
        TypeParameter
          Identifier: 'T'
        IndexedAccessType
          MappedType
            TypeParameter
              Identifier: 'K'
              TypeOperator
                TypeReference
                  Identifier: ' T'
            ConditionalType
              IndexedAccessType
                TypeReference
                  Identifier: ' T'
                TypeReference
                  Identifier: 'K'
              TypeReference
                Identifier: ' Function'
              TypeReference
                Identifier: ' K'
              NeverKeyword
          TypeOperator
            TypeReference
              Identifier: ' T'
      InterfaceDeclaration
        Identifier: ' MockModuleOptions'
        PropertySignature
          Identifier: '
        /**
         * If false, each call to `require()` or `import()` generates a new mock module.
         * If true, subsequent calls will return the same module mock, and the mock module is inserted into the CommonJS cache.
         * @default false
         */
        cache'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The value to use as the mocked module's default export.
         *
         * If this value is not provided, ESM mocks do not include a default export.
         * If the mock is a CommonJS or builtin module, this setting is used as the value of `module.exports`.
         * If this value is not provided, CJS and builtin mocks use an empty object as the value of `module.exports`.
         */
        defaultExport'
          QuestionToken
          AnyKeyword
        PropertySignature
          Identifier: '
        /**
         * An object whose keys and values are used to create the named exports of the mock module.
         *
         * If the mock is a CommonJS or builtin module, these values are copied onto `module.exports`.
         * Therefore, if a mock is created with both named exports and a non-object default export,
         * the mock will throw an exception when used as a CJS or builtin module.
         */
        namedExports'
          QuestionToken
          UnionType
            ObjectKeyword
            UndefinedKeyword
      ClassDeclaration
        Identifier: ' MockTracker'
        MethodDeclaration
          Identifier: '
        /**
         * This function is used to create a mock function.
         *
         * The following example creates a mock function that increments a counter by one
         * on each invocation. The `times` option is used to modify the mock behavior such
         * that the first two invocations add two to the counter instead of one.
         *
         * ```js
         * test('mocks a counting function', (t) => {
         *   let cnt = 0;
         *
         *   function addOne() {
         *     cnt++;
         *     return cnt;
         *   }
         *
         *   function addTwo() {
         *     cnt += 2;
         *     return cnt;
         *   }
         *
         *   const fn = t.mock.fn(addOne, addTwo, { times: 2 });
         *
         *   assert.strictEqual(fn(), 2);
         *   assert.strictEqual(fn(), 4);
         *   assert.strictEqual(fn(), 5);
         *   assert.strictEqual(fn(), 6);
         * });
         * ```
         * @since v19.1.0, v18.13.0
         * @param original An optional function to create a mock on.
         * @param implementation An optional function used as the mock implementation for `original`. This is useful for creating mocks that exhibit one behavior for a specified number of calls and
         * then restore the behavior of `original`.
         * @param options Optional configuration options for the mock function.
         * @return The mocked function. The mocked function contains a special `mock` property, which is an instance of {@link MockFunctionContext}, and can be used for inspecting and changing the
         * behavior of the mocked function.
         */
        fn'
          TypeParameter
            Identifier: 'F'
            TypeReference
              Identifier: ' Function'
            TypeReference
              Identifier: ' NoOpFunction'
          Parameter
            Identifier: 'original'
            QuestionToken
            TypeReference
              Identifier: ' F'
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' MockFunctionOptions'
          TypeReference
            Identifier: ' Mock'
            TypeReference
              Identifier: 'F'
        MethodDeclaration
          Identifier: '
        fn'
          TypeParameter
            Identifier: 'F'
            TypeReference
              Identifier: ' Function'
            TypeReference
              Identifier: ' NoOpFunction'
          TypeParameter
            Identifier: ' Implementation'
            TypeReference
              Identifier: ' Function'
            TypeReference
              Identifier: ' F'
          Parameter
            Identifier: '
            original'
            QuestionToken
            TypeReference
              Identifier: ' F'
          Parameter
            Identifier: '
            implementation'
            QuestionToken
            TypeReference
              Identifier: ' Implementation'
          Parameter
            Identifier: '
            options'
            QuestionToken
            TypeReference
              Identifier: ' MockFunctionOptions'
          TypeReference
            Identifier: ' Mock'
            UnionType
              TypeReference
                Identifier: 'F'
              TypeReference
                Identifier: ' Implementation'
        MethodDeclaration
          Identifier: '
        /**
         * This function is used to create a mock on an existing object method. The
         * following example demonstrates how a mock is created on an existing object
         * method.
         *
         * ```js
         * test('spies on an object method', (t) => {
         *   const number = {
         *     value: 5,
         *     subtract(a) {
         *       return this.value - a;
         *     },
         *   };
         *
         *   t.mock.method(number, 'subtract');
         *   assert.strictEqual(number.subtract.mock.calls.length, 0);
         *   assert.strictEqual(number.subtract(3), 2);
         *   assert.strictEqual(number.subtract.mock.calls.length, 1);
         *
         *   const call = number.subtract.mock.calls[0];
         *
         *   assert.deepStrictEqual(call.arguments, [3]);
         *   assert.strictEqual(call.result, 2);
         *   assert.strictEqual(call.error, undefined);
         *   assert.strictEqual(call.target, undefined);
         *   assert.strictEqual(call.this, number);
         * });
         * ```
         * @since v19.1.0, v18.13.0
         * @param object The object whose method is being mocked.
         * @param methodName The identifier of the method on `object` to mock. If `object[methodName]` is not a function, an error is thrown.
         * @param implementation An optional function used as the mock implementation for `object[methodName]`.
         * @param options Optional configuration options for the mock method.
         * @return The mocked method. The mocked method contains a special `mock` property, which is an instance of {@link MockFunctionContext}, and can be used for inspecting and changing the
         * behavior of the mocked method.
         */
        method'
          TypeParameter
            Identifier: '
            MockedObject'
            ObjectKeyword
          TypeParameter
            Identifier: '
            MethodName'
            TypeReference
              Identifier: ' FunctionPropertyNames'
              TypeReference
                Identifier: 'MockedObject'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' MockedObject'
          Parameter
            Identifier: '
            methodName'
            TypeReference
              Identifier: ' MethodName'
          Parameter
            Identifier: '
            options'
            QuestionToken
            TypeReference
              Identifier: ' MockFunctionOptions'
          ConditionalType
            IndexedAccessType
              TypeReference
                Identifier: ' MockedObject'
              TypeReference
                Identifier: 'MethodName'
            TypeReference
              Identifier: ' Function'
            TypeReference
              Identifier: ' Mock'
              IndexedAccessType
                TypeReference
                  Identifier: 'MockedObject'
                TypeReference
                  Identifier: 'MethodName'
            NeverKeyword
        MethodDeclaration
          Identifier: '
        method'
          TypeParameter
            Identifier: '
            MockedObject'
            ObjectKeyword
          TypeParameter
            Identifier: '
            MethodName'
            TypeReference
              Identifier: ' FunctionPropertyNames'
              TypeReference
                Identifier: 'MockedObject'
          TypeParameter
            Identifier: '
            Implementation'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' MockedObject'
          Parameter
            Identifier: '
            methodName'
            TypeReference
              Identifier: ' MethodName'
          Parameter
            Identifier: '
            implementation'
            TypeReference
              Identifier: ' Implementation'
          Parameter
            Identifier: '
            options'
            QuestionToken
            TypeReference
              Identifier: ' MockFunctionOptions'
          ConditionalType
            IndexedAccessType
              TypeReference
                Identifier: ' MockedObject'
              TypeReference
                Identifier: 'MethodName'
            TypeReference
              Identifier: ' Function'
            TypeReference
              Identifier: ' Mock'
              UnionType
                IndexedAccessType
                  TypeReference
                    Identifier: 'MockedObject'
                  TypeReference
                    Identifier: 'MethodName'
                TypeReference
                  Identifier: ' Implementation'
            NeverKeyword
        MethodDeclaration
          Identifier: '
        method'
          TypeParameter
            Identifier: 'MockedObject'
            ObjectKeyword
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' MockedObject'
          Parameter
            Identifier: '
            methodName'
            TypeOperator
              TypeReference
                Identifier: ' MockedObject'
          Parameter
            Identifier: '
            options'
            TypeReference
              Identifier: ' MockMethodOptions'
          TypeReference
            Identifier: ' Mock'
            TypeReference
              Identifier: 'Function'
        MethodDeclaration
          Identifier: '
        method'
          TypeParameter
            Identifier: 'MockedObject'
            ObjectKeyword
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' MockedObject'
          Parameter
            Identifier: '
            methodName'
            TypeOperator
              TypeReference
                Identifier: ' MockedObject'
          Parameter
            Identifier: '
            implementation'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: '
            options'
            TypeReference
              Identifier: ' MockMethodOptions'
          TypeReference
            Identifier: ' Mock'
            TypeReference
              Identifier: 'Function'
        MethodDeclaration
          Identifier: '

        /**
         * This function is syntax sugar for `MockTracker.method` with `options.getter` set to `true`.
         * @since v19.3.0, v18.13.0
         */
        getter'
          TypeParameter
            Identifier: '
            MockedObject'
            ObjectKeyword
          TypeParameter
            Identifier: '
            MethodName'
            TypeOperator
              TypeReference
                Identifier: ' MockedObject'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' MockedObject'
          Parameter
            Identifier: '
            methodName'
            TypeReference
              Identifier: ' MethodName'
          Parameter
            Identifier: '
            options'
            QuestionToken
            TypeReference
              Identifier: ' MockFunctionOptions'
          TypeReference
            Identifier: ' Mock'
            FunctionType
              IndexedAccessType
                TypeReference
                  Identifier: ' MockedObject'
                TypeReference
                  Identifier: 'MethodName'
        MethodDeclaration
          Identifier: '
        getter'
          TypeParameter
            Identifier: '
            MockedObject'
            ObjectKeyword
          TypeParameter
            Identifier: '
            MethodName'
            TypeOperator
              TypeReference
                Identifier: ' MockedObject'
          TypeParameter
            Identifier: '
            Implementation'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' MockedObject'
          Parameter
            Identifier: '
            methodName'
            TypeReference
              Identifier: ' MethodName'
          Parameter
            Identifier: '
            implementation'
            QuestionToken
            TypeReference
              Identifier: ' Implementation'
          Parameter
            Identifier: '
            options'
            QuestionToken
            TypeReference
              Identifier: ' MockFunctionOptions'
          TypeReference
            Identifier: ' Mock'
            UnionType
              ParenthesizedType
                FunctionType
                  IndexedAccessType
                    TypeReference
                      Identifier: ' MockedObject'
                    TypeReference
                      Identifier: 'MethodName'
              TypeReference
                Identifier: ' Implementation'
        MethodDeclaration
          Identifier: '
        /**
         * This function is syntax sugar for `MockTracker.method` with `options.setter` set to `true`.
         * @since v19.3.0, v18.13.0
         */
        setter'
          TypeParameter
            Identifier: '
            MockedObject'
            ObjectKeyword
          TypeParameter
            Identifier: '
            MethodName'
            TypeOperator
              TypeReference
                Identifier: ' MockedObject'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' MockedObject'
          Parameter
            Identifier: '
            methodName'
            TypeReference
              Identifier: ' MethodName'
          Parameter
            Identifier: '
            options'
            QuestionToken
            TypeReference
              Identifier: ' MockFunctionOptions'
          TypeReference
            Identifier: ' Mock'
            FunctionType
              Parameter
                Identifier: 'value'
                IndexedAccessType
                  TypeReference
                    Identifier: ' MockedObject'
                  TypeReference
                    Identifier: 'MethodName'
              VoidKeyword
        MethodDeclaration
          Identifier: '
        setter'
          TypeParameter
            Identifier: '
            MockedObject'
            ObjectKeyword
          TypeParameter
            Identifier: '
            MethodName'
            TypeOperator
              TypeReference
                Identifier: ' MockedObject'
          TypeParameter
            Identifier: '
            Implementation'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' MockedObject'
          Parameter
            Identifier: '
            methodName'
            TypeReference
              Identifier: ' MethodName'
          Parameter
            Identifier: '
            implementation'
            QuestionToken
            TypeReference
              Identifier: ' Implementation'
          Parameter
            Identifier: '
            options'
            QuestionToken
            TypeReference
              Identifier: ' MockFunctionOptions'
          TypeReference
            Identifier: ' Mock'
            UnionType
              ParenthesizedType
                FunctionType
                  Parameter
                    Identifier: 'value'
                    IndexedAccessType
                      TypeReference
                        Identifier: ' MockedObject'
                      TypeReference
                        Identifier: 'MethodName'
                  VoidKeyword
              TypeReference
                Identifier: ' Implementation'
        MethodDeclaration
          Identifier: '

        /**
         * This function is used to mock the exports of ECMAScript modules, CommonJS modules, and Node.js builtin modules.
         * Any references to the original module prior to mocking are not impacted.
         *
         * Only available through the [--experimental-test-module-mocks](https://nodejs.org/api/cli.html#--experimental-test-module-mocks) flag.
         * @since v22.3.0
         * @experimental
         * @param specifier A string identifying the module to mock.
         * @param options Optional configuration options for the mock module.
         */
        module'
          Parameter
            Identifier: 'specifier'
            StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' MockModuleOptions'
          TypeReference
            Identifier: ' MockModuleContext'
        MethodDeclaration
          Identifier: '

        /**
         * This function restores the default behavior of all mocks that were previously
         * created by this `MockTracker` and disassociates the mocks from the `MockTracker` instance. Once disassociated, the mocks can still be used, but the `MockTracker` instance can no longer be
         * used to reset their behavior or
         * otherwise interact with them.
         *
         * After each test completes, this function is called on the test context's `MockTracker`. If the global `MockTracker` is used extensively, calling this
         * function manually is recommended.
         * @since v19.1.0, v18.13.0
         */
        reset'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This function restores the default behavior of all mocks that were previously
         * created by this `MockTracker`. Unlike `mock.reset()`, `mock.restoreAll()` does
         * not disassociate the mocks from the `MockTracker` instance.
         * @since v19.1.0, v18.13.0
         */
        restoreAll'
          VoidKeyword
        PropertyDeclaration
          Identifier: '

        timers'
          TypeReference
            Identifier: ' MockTimers'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' mock'
            TypeReference
              Identifier: ' MockTracker'
      InterfaceDeclaration
        Identifier: ' MockFunctionCall'
        TypeParameter
          Identifier: '
        F'
          TypeReference
            Identifier: ' Function'
        TypeParameter
          Identifier: '
        ReturnType'
          ConditionalType
            TypeReference
              Identifier: ' F'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                AnyKeyword
              InferType
                TypeParameter
                  Identifier: ' T'
            TypeReference
              Identifier: ' T'
            ConditionalType
              TypeReference
                Identifier: ' F'
              ConstructorType
                AbstractKeyword
                Parameter
                  DotDotDotToken
                  Identifier: 'args'
                  AnyKeyword
                InferType
                  TypeParameter
                    Identifier: ' T'
              TypeReference
                Identifier: ' T'
              UnknownKeyword
        TypeParameter
          Identifier: '
        Args'
          ConditionalType
            TypeReference
              Identifier: ' F'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                InferType
                  TypeParameter
                    Identifier: ' Y'
              AnyKeyword
            TypeReference
              Identifier: ' Y'
            ConditionalType
              TypeReference
                Identifier: ' F'
              ConstructorType
                AbstractKeyword
                Parameter
                  DotDotDotToken
                  Identifier: 'args'
                  InferType
                    TypeParameter
                      Identifier: ' Y'
                AnyKeyword
              TypeReference
                Identifier: ' Y'
              ArrayType
                UnknownKeyword
        PropertySignature
          Identifier: '
        /**
         * An array of the arguments passed to the mock function.
         */
        arguments'
          TypeReference
            Identifier: ' Args'
        PropertySignature
          Identifier: '
        /**
         * If the mocked function threw then this property contains the thrown value.
         */
        error'
          UnionType
            UnknownKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The value returned by the mocked function.
         *
         * If the mocked function threw, it will be `undefined`.
         */
        result'
          UnionType
            TypeReference
              Identifier: ' ReturnType'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * An `Error` object whose stack can be used to determine the callsite of the mocked function invocation.
         */
        stack'
          TypeReference
            Identifier: ' Error'
        PropertySignature
          Identifier: '
        /**
         * If the mocked function is a constructor, this field contains the class being constructed.
         * Otherwise this will be `undefined`.
         */
        target'
          ConditionalType
            TypeReference
              Identifier: ' F'
            ConstructorType
              AbstractKeyword
              Parameter
                DotDotDotToken
                Identifier: 'args'
                AnyKeyword
              AnyKeyword
            TypeReference
              Identifier: ' F'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The mocked function's `this` value.
         */
        this'
          UnknownKeyword
      ClassDeclaration
        Identifier: ' MockFunctionContext'
        TypeParameter
          Identifier: 'F'
          TypeReference
            Identifier: ' Function'
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' calls'
          TypeReference
            Identifier: ' Array'
            TypeReference
              Identifier: 'MockFunctionCall'
              TypeReference
                Identifier: 'F'
        MethodDeclaration
          Identifier: '
        /**
         * This function returns the number of times that this mock has been invoked. This
         * function is more efficient than checking `ctx.calls.length` because `ctx.calls` is a getter that creates a copy of the internal call tracking array.
         * @since v19.1.0, v18.13.0
         * @return The number of times that this mock has been invoked.
         */
        callCount'
          NumberKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This function is used to change the behavior of an existing mock.
         *
         * The following example creates a mock function using `t.mock.fn()`, calls the
         * mock function, and then changes the mock implementation to a different function.
         *
         * ```js
         * test('changes a mock behavior', (t) => {
         *   let cnt = 0;
         *
         *   function addOne() {
         *     cnt++;
         *     return cnt;
         *   }
         *
         *   function addTwo() {
         *     cnt += 2;
         *     return cnt;
         *   }
         *
         *   const fn = t.mock.fn(addOne);
         *
         *   assert.strictEqual(fn(), 1);
         *   fn.mock.mockImplementation(addTwo);
         *   assert.strictEqual(fn(), 3);
         *   assert.strictEqual(fn(), 5);
         * });
         * ```
         * @since v19.1.0, v18.13.0
         * @param implementation The function to be used as the mock's new implementation.
         */
        mockImplementation'
          Parameter
            Identifier: 'implementation'
            TypeReference
              Identifier: ' F'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This function is used to change the behavior of an existing mock for a single
         * invocation. Once invocation `onCall` has occurred, the mock will revert to
         * whatever behavior it would have used had `mockImplementationOnce()` not been
         * called.
         *
         * The following example creates a mock function using `t.mock.fn()`, calls the
         * mock function, changes the mock implementation to a different function for the
         * next invocation, and then resumes its previous behavior.
         *
         * ```js
         * test('changes a mock behavior once', (t) => {
         *   let cnt = 0;
         *
         *   function addOne() {
         *     cnt++;
         *     return cnt;
         *   }
         *
         *   function addTwo() {
         *     cnt += 2;
         *     return cnt;
         *   }
         *
         *   const fn = t.mock.fn(addOne);
         *
         *   assert.strictEqual(fn(), 1);
         *   fn.mock.mockImplementationOnce(addTwo);
         *   assert.strictEqual(fn(), 3);
         *   assert.strictEqual(fn(), 4);
         * });
         * ```
         * @since v19.1.0, v18.13.0
         * @param implementation The function to be used as the mock's implementation for the invocation number specified by `onCall`.
         * @param onCall The invocation number that will use `implementation`. If the specified invocation has already occurred then an exception is thrown.
         */
        mockImplementationOnce'
          Parameter
            Identifier: 'implementation'
            TypeReference
              Identifier: ' F'
          Parameter
            Identifier: ' onCall'
            QuestionToken
            NumberKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Resets the call history of the mock function.
         * @since v19.3.0, v18.13.0
         */
        resetCalls'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Resets the implementation of the mock function to its original behavior. The
         * mock can still be used after calling this function.
         * @since v19.1.0, v18.13.0
         */
        restore'
          VoidKeyword
      ClassDeclaration
        Identifier: ' MockModuleContext'
        MethodDeclaration
          Identifier: '
        /**
         * Resets the implementation of the mock module.
         * @since v22.3.0
         */
        restore'
          VoidKeyword
      TypeAliasDeclaration
        Identifier: ' Timer'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      InterfaceDeclaration
        Identifier: ' MockTimersOptions'
        PropertySignature
          Identifier: '
        apis'
          ArrayType
            TypeReference
              Identifier: ' Timer'
        PropertySignature
          Identifier: '
        now'
          QuestionToken
          UnionType
            NumberKeyword
            TypeReference
              Identifier: ' Date'
            UndefinedKeyword
      ClassDeclaration
        Identifier: ' MockTimers'
        MethodDeclaration
          Identifier: '
        /**
         * Enables timer mocking for the specified timers.
         *
         * **Note:** When you enable mocking for a specific timer, its associated
         * clear function will also be implicitly mocked.
         *
         * **Note:** Mocking `Date` will affect the behavior of the mocked timers
         * as they use the same internal clock.
         *
         * Example usage without setting initial time:
         *
         * ```js
         * import { mock } from 'node:test';
         * mock.timers.enable({ apis: ['setInterval', 'Date'], now: 1234 });
         * ```
         *
         * The above example enables mocking for the `Date` constructor, `setInterval` timer and
         * implicitly mocks the `clearInterval` function. Only the `Date` constructor from `globalThis`,
         * `setInterval` and `clearInterval` functions from `node:timers`, `node:timers/promises`, and `globalThis` will be mocked.
         *
         * Example usage with initial time set
         *
         * ```js
         * import { mock } from 'node:test';
         * mock.timers.enable({ apis: ['Date'], now: 1000 });
         * ```
         *
         * Example usage with initial Date object as time set
         *
         * ```js
         * import { mock } from 'node:test';
         * mock.timers.enable({ apis: ['Date'], now: new Date() });
         * ```
         *
         * Alternatively, if you call `mock.timers.enable()` without any parameters:
         *
         * All timers (`'setInterval'`, `'clearInterval'`, `'Date'`, `'setImmediate'`, `'clearImmediate'`, `'setTimeout'`, and `'clearTimeout'`)
         * will be mocked.
         *
         * The `setInterval`, `clearInterval`, `setTimeout`, and `clearTimeout` functions from `node:timers`, `node:timers/promises`,
         * and `globalThis` will be mocked.
         * The `Date` constructor from `globalThis` will be mocked.
         *
         * If there is no initial epoch set, the initial date will be based on 0 in the Unix epoch. This is `January 1st, 1970, 00:00:00 UTC`. You can
         * set an initial date by passing a now property to the `.enable()` method. This value will be used as the initial date for the mocked Date
         * object. It can either be a positive integer, or another Date object.
         * @since v20.4.0
         */
        enable'
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              Identifier: ' MockTimersOptions'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * You can use the `.setTime()` method to manually move the mocked date to another time. This method only accepts a positive integer.
         * Note: This method will execute any mocked timers that are in the past from the new time.
         * In the below example we are setting a new time for the mocked date.
         * ```js
         * import assert from 'node:assert';
         * import { test } from 'node:test';
         * test('sets the time of a date object', (context) => {
         *   // Optionally choose what to mock
         *   context.mock.timers.enable({ apis: ['Date'], now: 100 });
         *   assert.strictEqual(Date.now(), 100);
         *   // Advance in time will also advance the date
         *   context.mock.timers.setTime(1000);
         *   context.mock.timers.tick(200);
         *   assert.strictEqual(Date.now(), 1200);
         * });
         * ```
         */
        setTime'
          Parameter
            Identifier: 'time'
            NumberKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * This function restores the default behavior of all mocks that were previously
         * created by this `MockTimers` instance and disassociates the mocks
         * from the `MockTracker` instance.
         *
         * **Note:** After each test completes, this function is called on
         * the test context's `MockTracker`.
         *
         * ```js
         * import { mock } from 'node:test';
         * mock.timers.reset();
         * ```
         * @since v20.4.0
         */
        reset'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Advances time for all mocked timers.
         *
         * **Note:** This diverges from how `setTimeout` in Node.js behaves and accepts
         * only positive numbers. In Node.js, `setTimeout` with negative numbers is
         * only supported for web compatibility reasons.
         *
         * The following example mocks a `setTimeout` function and
         * by using `.tick` advances in
         * time triggering all pending timers.
         *
         * ```js
         * import assert from 'node:assert';
         * import { test } from 'node:test';
         *
         * test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
         *   const fn = context.mock.fn();
         *
         *   context.mock.timers.enable({ apis: ['setTimeout'] });
         *
         *   setTimeout(fn, 9999);
         *
         *   assert.strictEqual(fn.mock.callCount(), 0);
         *
         *   // Advance in time
         *   context.mock.timers.tick(9999);
         *
         *   assert.strictEqual(fn.mock.callCount(), 1);
         * });
         * ```
         *
         * Alternativelly, the `.tick` function can be called many times
         *
         * ```js
         * import assert from 'node:assert';
         * import { test } from 'node:test';
         *
         * test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
         *   const fn = context.mock.fn();
         *   context.mock.timers.enable({ apis: ['setTimeout'] });
         *   const nineSecs = 9000;
         *   setTimeout(fn, nineSecs);
         *
         *   const twoSeconds = 3000;
         *   context.mock.timers.tick(twoSeconds);
         *   context.mock.timers.tick(twoSeconds);
         *   context.mock.timers.tick(twoSeconds);
         *
         *   assert.strictEqual(fn.mock.callCount(), 1);
         * });
         * ```
         *
         * Advancing time using `.tick` will also advance the time for any `Date` object
         * created after the mock was enabled (if `Date` was also set to be mocked).
         *
         * ```js
         * import assert from 'node:assert';
         * import { test } from 'node:test';
         *
         * test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
         *   const fn = context.mock.fn();
         *
         *   context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
         *   setTimeout(fn, 9999);
         *
         *   assert.strictEqual(fn.mock.callCount(), 0);
         *   assert.strictEqual(Date.now(), 0);
         *
         *   // Advance in time
         *   context.mock.timers.tick(9999);
         *   assert.strictEqual(fn.mock.callCount(), 1);
         *   assert.strictEqual(Date.now(), 9999);
         * });
         * ```
         * @since v20.4.0
         */
        tick'
          Parameter
            Identifier: 'milliseconds'
            NumberKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Triggers all pending mocked timers immediately. If the `Date` object is also
         * mocked, it will also advance the `Date` object to the furthest timer's time.
         *
         * The example below triggers all pending timers immediately,
         * causing them to execute without any delay.
         *
         * ```js
         * import assert from 'node:assert';
         * import { test } from 'node:test';
         *
         * test('runAll functions following the given order', (context) => {
         *   context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
         *   const results = [];
         *   setTimeout(() => results.push(1), 9999);
         *
         *   // Notice that if both timers have the same timeout,
         *   // the order of execution is guaranteed
         *   setTimeout(() => results.push(3), 8888);
         *   setTimeout(() => results.push(2), 8888);
         *
         *   assert.deepStrictEqual(results, []);
         *
         *   context.mock.timers.runAll();
         *   assert.deepStrictEqual(results, [3, 2, 1]);
         *   // The Date object is also advanced to the furthest timer's time
         *   assert.strictEqual(Date.now(), 9999);
         * });
         * ```
         *
         * **Note:** The `runAll()` function is specifically designed for
         * triggering timers in the context of timer mocking.
         * It does not have any effect on real-time system
         * clocks or actual timers outside of the mocking environment.
         * @since v20.4.0
         */
        runAll'
          VoidKeyword
        MethodDeclaration
          ComputedPropertyName
            PropertyAccessExpression
              Identifier: 'Symbol'
              Identifier: 'dispose'
          VoidKeyword
      ModuleDeclaration
        Identifier: ' snapshot'
        ModuleBlock
          FunctionDeclaration
            Identifier: ' setDefaultSnapshotSerializers'
            Parameter
              Identifier: 'serializers'
              TypeReference
                Identifier: ' ReadonlyArray'
                FunctionType
                  Parameter
                    Identifier: 'value'
                    AnyKeyword
                  AnyKeyword
            VoidKeyword
          FunctionDeclaration
            Identifier: ' setResolveSnapshotPath'
            Parameter
              Identifier: 'fn'
              FunctionType
                Parameter
                  Identifier: 'path'
                  UnionType
                    StringKeyword
                    UndefinedKeyword
                StringKeyword
            VoidKeyword
      ExportDeclaration
        NamedExports
          ExportSpecifier
            Identifier: '
        after'
          ExportSpecifier
            Identifier: '
        afterEach'
          ExportSpecifier
            Identifier: '
        before'
          ExportSpecifier
            Identifier: '
        beforeEach'
          ExportSpecifier
            Identifier: '
        describe'
          ExportSpecifier
            Identifier: '
        it'
          ExportSpecifier
            Identifier: '
        Mock'
          ExportSpecifier
            Identifier: '
        mock'
          ExportSpecifier
            Identifier: '
        only'
          ExportSpecifier
            Identifier: '
        run'
          ExportSpecifier
            Identifier: '
        skip'
          ExportSpecifier
            Identifier: '
        snapshot'
          ExportSpecifier
            Identifier: '
        suite'
          ExportSpecifier
            Identifier: '
        SuiteContext'
          ExportSpecifier
            Identifier: '
        test'
          ExportSpecifier
            Identifier: '
        test'
            Identifier: ' default'
          ExportSpecifier
            Identifier: '
        TestContext'
          ExportSpecifier
            Identifier: '
        todo'
  InterfaceDeclaration
    Identifier: ' TestError'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Error'
    PropertySignature
      Identifier: '
    cause'
      TypeReference
        Identifier: ' Error'
  InterfaceDeclaration
    Identifier: ' TestLocationInfo'
    PropertySignature
      Identifier: '
    /**
     * The column number where the test is defined, or
     * `undefined` if the test was run through the REPL.
     */
    column'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * The path of the test file, `undefined` if test was run through the REPL.
     */
    file'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The line number where the test is defined, or `undefined` if the test was run through the REPL.
     */
    line'
      QuestionToken
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' DiagnosticData'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TestLocationInfo'
    PropertySignature
      Identifier: '
    /**
     * The diagnostic message.
     */
    message'
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The nesting level of the test.
     */
    nesting'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' TestCoverage'
    PropertySignature
      Identifier: '
    /**
     * An object containing the coverage report.
     */
    summary'
      TypeLiteral
        PropertySignature
          Identifier: '
        /**
         * An array of coverage reports for individual files.
         */
        files'
          TypeReference
            Identifier: ' Array'
            TypeLiteral
              PropertySignature
                Identifier: '
            /**
             * The absolute path of the file.
             */
            path'
                StringKeyword
              PropertySignature
                Identifier: '
            /**
             * The total number of lines.
             */
            totalLineCount'
                NumberKeyword
              PropertySignature
                Identifier: '
            /**
             * The total number of branches.
             */
            totalBranchCount'
                NumberKeyword
              PropertySignature
                Identifier: '
            /**
             * The total number of functions.
             */
            totalFunctionCount'
                NumberKeyword
              PropertySignature
                Identifier: '
            /**
             * The number of covered lines.
             */
            coveredLineCount'
                NumberKeyword
              PropertySignature
                Identifier: '
            /**
             * The number of covered branches.
             */
            coveredBranchCount'
                NumberKeyword
              PropertySignature
                Identifier: '
            /**
             * The number of covered functions.
             */
            coveredFunctionCount'
                NumberKeyword
              PropertySignature
                Identifier: '
            /**
             * The percentage of lines covered.
             */
            coveredLinePercent'
                NumberKeyword
              PropertySignature
                Identifier: '
            /**
             * The percentage of branches covered.
             */
            coveredBranchPercent'
                NumberKeyword
              PropertySignature
                Identifier: '
            /**
             * The percentage of functions covered.
             */
            coveredFunctionPercent'
                NumberKeyword
              PropertySignature
                Identifier: '
            /**
             * An array of functions representing function coverage.
             */
            functions'
                TypeReference
                  Identifier: ' Array'
                  TypeLiteral
                    PropertySignature
                      Identifier: '
                /**
                 * The name of the function.
                 */
                name'
                      StringKeyword
                    PropertySignature
                      Identifier: '
                /**
                 * The line number where the function is defined.
                 */
                line'
                      NumberKeyword
                    PropertySignature
                      Identifier: '
                /**
                 * The number of times the function was called.
                 */
                count'
                      NumberKeyword
              PropertySignature
                Identifier: '
            /**
             * An array of branches representing branch coverage.
             */
            branches'
                TypeReference
                  Identifier: ' Array'
                  TypeLiteral
                    PropertySignature
                      Identifier: '
                /**
                 * The line number where the branch is defined.
                 */
                line'
                      NumberKeyword
                    PropertySignature
                      Identifier: '
                /**
                 * The number of times the branch was taken.
                 */
                count'
                      NumberKeyword
              PropertySignature
                Identifier: '
            /**
             * An array of lines representing line numbers and the number of times they were covered.
             */
            lines'
                TypeReference
                  Identifier: ' Array'
                  TypeLiteral
                    PropertySignature
                      Identifier: '
                /**
                 * The line number.
                 */
                line'
                      NumberKeyword
                    PropertySignature
                      Identifier: '
                /**
                 * The number of times the line was covered.
                 */
                count'
                      NumberKeyword
        PropertySignature
          Identifier: '
        /**
         * An object containing a summary of coverage for all files.
         */
        totals'
          TypeLiteral
            PropertySignature
              Identifier: '
            /**
             * The total number of lines.
             */
            totalLineCount'
              NumberKeyword
            PropertySignature
              Identifier: '
            /**
             * The total number of branches.
             */
            totalBranchCount'
              NumberKeyword
            PropertySignature
              Identifier: '
            /**
             * The total number of functions.
             */
            totalFunctionCount'
              NumberKeyword
            PropertySignature
              Identifier: '
            /**
             * The number of covered lines.
             */
            coveredLineCount'
              NumberKeyword
            PropertySignature
              Identifier: '
            /**
             * The number of covered branches.
             */
            coveredBranchCount'
              NumberKeyword
            PropertySignature
              Identifier: '
            /**
             * The number of covered functions.
             */
            coveredFunctionCount'
              NumberKeyword
            PropertySignature
              Identifier: '
            /**
             * The percentage of lines covered.
             */
            coveredLinePercent'
              NumberKeyword
            PropertySignature
              Identifier: '
            /**
             * The percentage of branches covered.
             */
            coveredBranchPercent'
              NumberKeyword
            PropertySignature
              Identifier: '
            /**
             * The percentage of functions covered.
             */
            coveredFunctionPercent'
              NumberKeyword
        PropertySignature
          Identifier: '
        /**
         * The working directory when code coverage began. This
         * is useful for displaying relative path names in case
         * the tests changed the working directory of the Node.js process.
         */
        workingDirectory'
          StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The nesting level of the test.
     */
    nesting'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' TestComplete'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TestLocationInfo'
    PropertySignature
      Identifier: '
    /**
     * Additional execution metadata.
     */
    details'
      TypeLiteral
        PropertySignature
          Identifier: '
        /**
         * Whether the test passed or not.
         */
        passed'
          BooleanKeyword
        PropertySignature
          Identifier: '
        /**
         * The duration of the test in milliseconds.
         */
        duration_ms'
          NumberKeyword
        PropertySignature
          Identifier: '
        /**
         * An error wrapping the error thrown by the test if it did not pass.
         */
        error'
          QuestionToken
          TypeReference
            Identifier: ' TestError'
        PropertySignature
          Identifier: '
        /**
         * The type of the test, used to denote whether this is a suite.
         */
        type'
          QuestionToken
          LiteralType
            StringLiteral
    PropertySignature
      Identifier: '
    /**
     * The test name.
     */
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The nesting level of the test.
     */
    nesting'
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * The ordinal number of the test.
     */
    testNumber'
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * Present if `context.todo` is called.
     */
    todo'
      QuestionToken
      UnionType
        StringKeyword
        BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * Present if `context.skip` is called.
     */
    skip'
      QuestionToken
      UnionType
        StringKeyword
        BooleanKeyword
  InterfaceDeclaration
    Identifier: ' TestDequeue'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TestLocationInfo'
    PropertySignature
      Identifier: '
    /**
     * The test name.
     */
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The nesting level of the test.
     */
    nesting'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' TestEnqueue'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TestLocationInfo'
    PropertySignature
      Identifier: '
    /**
     * The test name.
     */
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The nesting level of the test.
     */
    nesting'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' TestFail'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TestLocationInfo'
    PropertySignature
      Identifier: '
    /**
     * Additional execution metadata.
     */
    details'
      TypeLiteral
        PropertySignature
          Identifier: '
        /**
         * The duration of the test in milliseconds.
         */
        duration_ms'
          NumberKeyword
        PropertySignature
          Identifier: '
        /**
         * An error wrapping the error thrown by the test.
         */
        error'
          TypeReference
            Identifier: ' TestError'
        PropertySignature
          Identifier: '
        /**
         * The type of the test, used to denote whether this is a suite.
         * @since v20.0.0, v19.9.0, v18.17.0
         */
        type'
          QuestionToken
          LiteralType
            StringLiteral
    PropertySignature
      Identifier: '
    /**
     * The test name.
     */
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The nesting level of the test.
     */
    nesting'
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * The ordinal number of the test.
     */
    testNumber'
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * Present if `context.todo` is called.
     */
    todo'
      QuestionToken
      UnionType
        StringKeyword
        BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * Present if `context.skip` is called.
     */
    skip'
      QuestionToken
      UnionType
        StringKeyword
        BooleanKeyword
  InterfaceDeclaration
    Identifier: ' TestPass'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TestLocationInfo'
    PropertySignature
      Identifier: '
    /**
     * Additional execution metadata.
     */
    details'
      TypeLiteral
        PropertySignature
          Identifier: '
        /**
         * The duration of the test in milliseconds.
         */
        duration_ms'
          NumberKeyword
        PropertySignature
          Identifier: '
        /**
         * The type of the test, used to denote whether this is a suite.
         * @since 20.0.0, 19.9.0, 18.17.0
         */
        type'
          QuestionToken
          LiteralType
            StringLiteral
    PropertySignature
      Identifier: '
    /**
     * The test name.
     */
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The nesting level of the test.
     */
    nesting'
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * The ordinal number of the test.
     */
    testNumber'
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * Present if `context.todo` is called.
     */
    todo'
      QuestionToken
      UnionType
        StringKeyword
        BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * Present if `context.skip` is called.
     */
    skip'
      QuestionToken
      UnionType
        StringKeyword
        BooleanKeyword
  InterfaceDeclaration
    Identifier: ' TestPlan'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TestLocationInfo'
    PropertySignature
      Identifier: '
    /**
     * The nesting level of the test.
     */
    nesting'
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * The number of subtests that have ran.
     */
    count'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' TestStart'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TestLocationInfo'
    PropertySignature
      Identifier: '
    /**
     * The test name.
     */
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The nesting level of the test.
     */
    nesting'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' TestStderr'
    PropertySignature
      Identifier: '
    /**
     * The path of the test file.
     */
    file'
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The message written to `stderr`.
     */
    message'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' TestStdout'
    PropertySignature
      Identifier: '
    /**
     * The path of the test file.
     */
    file'
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The message written to `stdout`.
     */
    message'
      StringKeyword
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' Transform'
            ImportSpecifier
              Identifier: ' TransformOptions'
        StringLiteral
      TypeAliasDeclaration
        Identifier: ' TestEvent'
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              TypeReference
                Identifier: ' TestCoverage'
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              TypeReference
                Identifier: ' TestComplete'
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              TypeReference
                Identifier: ' TestDequeue'
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              TypeReference
                Identifier: ' DiagnosticData'
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              TypeReference
                Identifier: ' TestEnqueue'
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              TypeReference
                Identifier: ' TestFail'
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              TypeReference
                Identifier: ' TestPass'
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              TypeReference
                Identifier: ' TestPlan'
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              TypeReference
                Identifier: ' TestStart'
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              TypeReference
                Identifier: ' TestStderr'
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              TypeReference
                Identifier: ' TestStdout'
          TypeLiteral
            PropertySignature
              Identifier: ' type'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' data'
              UndefinedKeyword
      TypeAliasDeclaration
        Identifier: ' TestEventGenerator'
        TypeReference
          Identifier: ' AsyncGenerator'
          TypeReference
            Identifier: 'TestEvent'
          VoidKeyword
      InterfaceDeclaration
        Identifier: ' ReporterConstructorWrapper'
        TypeParameter
          Identifier: 'T'
          ConstructorType
            Parameter
              DotDotDotToken
              Identifier: 'args'
              ArrayType
                AnyKeyword
            TypeReference
              Identifier: ' Transform'
        ConstructSignature
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' ConstructorParameters'
              TypeReference
                Identifier: 'T'
          TypeReference
            Identifier: ' InstanceType'
            TypeReference
              Identifier: 'T'
        CallSignature
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' ConstructorParameters'
              TypeReference
                Identifier: 'T'
          TypeReference
            Identifier: ' InstanceType'
            TypeReference
              Identifier: 'T'
      FunctionDeclaration
        Identifier: ' dot'
        Parameter
          Identifier: 'source'
          TypeReference
            Identifier: ' TestEventGenerator'
        TypeReference
          Identifier: ' AsyncGenerator'
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
          VoidKeyword
      FunctionDeclaration
        Identifier: ' tap'
        Parameter
          Identifier: 'source'
          TypeReference
            Identifier: ' TestEventGenerator'
        TypeReference
          Identifier: ' AsyncGenerator'
          StringKeyword
          VoidKeyword
      ClassDeclaration
        Identifier: ' SpecReporter'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Transform'
        Constructor
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' spec'
            TypeReference
              Identifier: ' ReporterConstructorWrapper'
              TypeQuery
                Identifier: ' SpecReporter'
      FunctionDeclaration
        Identifier: ' junit'
        Parameter
          Identifier: 'source'
          TypeReference
            Identifier: ' TestEventGenerator'
        TypeReference
          Identifier: ' AsyncGenerator'
          StringKeyword
          VoidKeyword
      ClassDeclaration
        Identifier: ' LcovReporter'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Transform'
        Constructor
          Parameter
            Identifier: 'opts'
            QuestionToken
            TypeReference
              Identifier: ' Omit'
              TypeReference
                Identifier: 'TransformOptions'
              LiteralType
                StringLiteral
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' lcov'
            TypeReference
              Identifier: ' LcovReporter'
      ExportDeclaration
        NamedExports
          ExportSpecifier
            Identifier: ' dot'
          ExportSpecifier
            Identifier: ' junit'
          ExportSpecifier
            Identifier: ' lcov'
          ExportSpecifier
            Identifier: ' spec'
          ExportSpecifier
            Identifier: ' tap'
          ExportSpecifier
            Identifier: ' TestEvent'
