SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' LRUCache'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' posix'
        ImportSpecifier
          Identifier: ' win32'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Minipass'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Dirent'
        ImportSpecifier
          Identifier: ' Stats'
    StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FSOption'
    PropertySignature
      Identifier: '
    lstatSync'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'path'
          StringKeyword
        TypeReference
          Identifier: ' Stats'
    PropertySignature
      Identifier: '
    readdir'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'path'
          StringKeyword
        Parameter
          Identifier: ' options'
          TypeLiteral
            PropertySignature
              Identifier: '
        withFileTypes'
              LiteralType
                TrueKeyword
        Parameter
          Identifier: ' cb'
          FunctionType
            Parameter
              Identifier: 'er'
              UnionType
                TypeReference
                  QualifiedName
                    Identifier: ' NodeJS'
                    Identifier: 'ErrnoException'
                LiteralType
                  NullKeyword
            Parameter
              Identifier: ' entries'
              QuestionToken
              ArrayType
                TypeReference
                  Identifier: ' Dirent'
            AnyKeyword
        VoidKeyword
    PropertySignature
      Identifier: '
    readdirSync'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'path'
          StringKeyword
        Parameter
          Identifier: ' options'
          TypeLiteral
            PropertySignature
              Identifier: '
        withFileTypes'
              LiteralType
                TrueKeyword
        ArrayType
          TypeReference
            Identifier: ' Dirent'
    PropertySignature
      Identifier: '
    readlinkSync'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'path'
          StringKeyword
        StringKeyword
    PropertySignature
      Identifier: '
    realpathSync'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'path'
          StringKeyword
        StringKeyword
    PropertySignature
      Identifier: '
    promises'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
        lstat'
          QuestionToken
          FunctionType
            Parameter
              Identifier: 'path'
              StringKeyword
            TypeReference
              Identifier: ' Promise'
              TypeReference
                Identifier: 'Stats'
        PropertySignature
          Identifier: '
        readdir'
          QuestionToken
          FunctionType
            Parameter
              Identifier: 'path'
              StringKeyword
            Parameter
              Identifier: ' options'
              TypeLiteral
                PropertySignature
                  Identifier: '
            withFileTypes'
                  LiteralType
                    TrueKeyword
            TypeReference
              Identifier: ' Promise'
              ArrayType
                TypeReference
                  Identifier: 'Dirent'
        PropertySignature
          Identifier: '
        readlink'
          QuestionToken
          FunctionType
            Parameter
              Identifier: 'path'
              StringKeyword
            TypeReference
              Identifier: ' Promise'
              StringKeyword
        PropertySignature
          Identifier: '
        realpath'
          QuestionToken
          FunctionType
            Parameter
              Identifier: 'path'
              StringKeyword
            TypeReference
              Identifier: ' Promise'
              StringKeyword
        IndexSignature
          Parameter
            Identifier: 'k'
            StringKeyword
          AnyKeyword
    IndexSignature
      Parameter
        Identifier: 'k'
        StringKeyword
      AnyKeyword
  InterfaceDeclaration
    Identifier: ' FSValue'
    PropertySignature
      Identifier: '
    lstatSync'
      FunctionType
        Parameter
          Identifier: 'path'
          StringKeyword
        TypeReference
          Identifier: ' Stats'
    PropertySignature
      Identifier: '
    readdir'
      FunctionType
        Parameter
          Identifier: 'path'
          StringKeyword
        Parameter
          Identifier: ' options'
          TypeLiteral
            PropertySignature
              Identifier: '
        withFileTypes'
              LiteralType
                TrueKeyword
        Parameter
          Identifier: ' cb'
          FunctionType
            Parameter
              Identifier: 'er'
              UnionType
                TypeReference
                  QualifiedName
                    Identifier: ' NodeJS'
                    Identifier: 'ErrnoException'
                LiteralType
                  NullKeyword
            Parameter
              Identifier: ' entries'
              QuestionToken
              ArrayType
                TypeReference
                  Identifier: ' Dirent'
            AnyKeyword
        VoidKeyword
    PropertySignature
      Identifier: '
    readdirSync'
      FunctionType
        Parameter
          Identifier: 'path'
          StringKeyword
        Parameter
          Identifier: ' options'
          TypeLiteral
            PropertySignature
              Identifier: '
        withFileTypes'
              LiteralType
                TrueKeyword
        ArrayType
          TypeReference
            Identifier: ' Dirent'
    PropertySignature
      Identifier: '
    readlinkSync'
      FunctionType
        Parameter
          Identifier: 'path'
          StringKeyword
        StringKeyword
    PropertySignature
      Identifier: '
    realpathSync'
      FunctionType
        Parameter
          Identifier: 'path'
          StringKeyword
        StringKeyword
    PropertySignature
      Identifier: '
    promises'
      TypeLiteral
        PropertySignature
          Identifier: '
        lstat'
          FunctionType
            Parameter
              Identifier: 'path'
              StringKeyword
            TypeReference
              Identifier: ' Promise'
              TypeReference
                Identifier: 'Stats'
        PropertySignature
          Identifier: '
        readdir'
          FunctionType
            Parameter
              Identifier: 'path'
              StringKeyword
            Parameter
              Identifier: ' options'
              TypeLiteral
                PropertySignature
                  Identifier: '
            withFileTypes'
                  LiteralType
                    TrueKeyword
            TypeReference
              Identifier: ' Promise'
              ArrayType
                TypeReference
                  Identifier: 'Dirent'
        PropertySignature
          Identifier: '
        readlink'
          FunctionType
            Parameter
              Identifier: 'path'
              StringKeyword
            TypeReference
              Identifier: ' Promise'
              StringKeyword
        PropertySignature
          Identifier: '
        realpath'
          FunctionType
            Parameter
              Identifier: 'path'
              StringKeyword
            TypeReference
              Identifier: ' Promise'
              StringKeyword
        IndexSignature
          Parameter
            Identifier: 'k'
            StringKeyword
          AnyKeyword
    IndexSignature
      Parameter
        Identifier: 'k'
        StringKeyword
      AnyKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Type'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PathOpts'
    PropertySignature
      Identifier: '
    fullpath'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    relative'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    relativePosix'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    parent'
      QuestionToken
      TypeReference
        Identifier: ' PathBase'
    PropertySignature
      Identifier: '
    /**
     * See {@link FSOption}
     */
    fs'
      QuestionToken
      TypeReference
        Identifier: ' FSOption'
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ResolveCache'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LRUCache'
        StringKeyword
        StringKeyword
    Constructor
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ChildrenCache'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LRUCache'
        TypeReference
          Identifier: 'PathBase'
        TypeReference
          Identifier: ' Children'
    Constructor
      Parameter
        Identifier: 'maxSize'
        QuestionToken
        NumberKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Children'
    IntersectionType
      ArrayType
        TypeReference
          Identifier: ' PathBase'
      TypeLiteral
        PropertySignature
          Identifier: '
    provisional'
          NumberKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' setAsCwd'
        TypeOperator
          SymbolKeyword
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    AbstractKeyword
    Identifier: ' PathBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Dirent'
    PropertyDeclaration
      PrivateIdentifier
    PropertyDeclaration
      Identifier: '
    /**
     * the basename of this path
     *
     * **Important**: *always* test the path name against any test string
     * usingthe {@link isNamed} method, and not by directly comparing this
     * string. Otherwise, unicode path strings that the system sees as identical
     * will not be properly treated as the same path, leading to incorrect
     * behavior and possible security issues.
     */
    name'
      StringKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * the Path entry corresponding to the path root.
     *
     * @internal
     */
    root'
      TypeReference
        Identifier: ' PathBase'
    PropertyDeclaration
      Identifier: '
    /**
     * All roots found within the current PathScurry family
     *
     * @internal
     */
    roots'
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'k'
            StringKeyword
          TypeReference
            Identifier: ' PathBase'
    PropertyDeclaration
      Identifier: '
    /**
     * a reference to the parent path, or undefined in the case of root entries
     *
     * @internal
     */
    parent'
      QuestionToken
      TypeReference
        Identifier: ' PathBase'
    PropertyDeclaration
      Identifier: '
    /**
     * boolean indicating whether paths are compared case-insensitively
     * @internal
     */
    nocase'
      BooleanKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * boolean indicating that this path is the current working directory
     * of the PathScurry collection that contains it.
     */
    isCWD'
      BooleanKeyword
    PropertyDeclaration
      AbstractKeyword
      Identifier: ' splitSep'
      UnionType
        StringKeyword
        TypeReference
          Identifier: ' RegExp'
    PropertyDeclaration
      AbstractKeyword
      Identifier: ' sep'
      StringKeyword
    GetAccessor
      Identifier: ' dev'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' mode'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' nlink'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' uid'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' gid'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' rdev'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' blksize'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' ino'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' size'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' blocks'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' atimeMs'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' mtimeMs'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' ctimeMs'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' birthtimeMs'
      UnionType
        NumberKeyword
        UndefinedKeyword
    GetAccessor
      Identifier: ' atime'
      UnionType
        TypeReference
          Identifier: ' Date'
        UndefinedKeyword
    GetAccessor
      Identifier: ' mtime'
      UnionType
        TypeReference
          Identifier: ' Date'
        UndefinedKeyword
    GetAccessor
      Identifier: ' ctime'
      UnionType
        TypeReference
          Identifier: ' Date'
        UndefinedKeyword
    GetAccessor
      Identifier: ' birthtime'
      UnionType
        TypeReference
          Identifier: ' Date'
        UndefinedKeyword
    GetAccessor
      Identifier: ' parentPath'
      StringKeyword
    GetAccessor
      Identifier: ' path'
      StringKeyword
    Constructor
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' type'
        UnionType
          NumberKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' root'
        UnionType
          TypeReference
            Identifier: ' PathBase'
          UndefinedKeyword
      Parameter
        Identifier: ' roots'
        TypeLiteral
          IndexSignature
            Parameter
              Identifier: 'k'
              StringKeyword
            TypeReference
              Identifier: ' PathBase'
      Parameter
        Identifier: ' nocase'
        BooleanKeyword
      Parameter
        Identifier: ' children'
        TypeReference
          Identifier: ' ChildrenCache'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' PathOpts'
    MethodDeclaration
      Identifier: '
    /**
     * Returns the depth of the Path object from its root.
     *
     * For example, a path at `/foo/bar` would have a depth of 2.
     */
    depth'
      NumberKeyword
    MethodDeclaration
      AbstractKeyword
      Identifier: ' getRootString'
      Parameter
        Identifier: 'path'
        StringKeyword
      StringKeyword
    MethodDeclaration
      AbstractKeyword
      Identifier: ' getRoot'
      Parameter
        Identifier: 'rootPath'
        StringKeyword
      TypeReference
        Identifier: ' PathBase'
    MethodDeclaration
      AbstractKeyword
      Identifier: ' newChild'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' type'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' opts'
        QuestionToken
        TypeReference
          Identifier: ' PathOpts'
      TypeReference
        Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    childrenCache'
      TypeReference
        Identifier: ' ChildrenCache'
    MethodDeclaration
      Identifier: '
    /**
     * Get the Path object referenced by the string path, resolved from this Path
     */
    resolve'
      Parameter
        Identifier: 'path'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    /**
     * Returns the cached children Path objects, if still available.  If they
     * have fallen out of the cache, then returns an empty array, and resets the
     * READDIR_CALLED bit, so that future calls to readdir() will require an fs
     * lookup.
     *
     * @internal
     */
    children'
      TypeReference
        Identifier: ' Children'
    MethodDeclaration
      Identifier: '
    /**
     * Resolves a path portion and returns or creates the child Path.
     *
     * Returns `this` if pathPart is `''` or `'.'`, or `parent` if pathPart is
     * `'..'`.
     *
     * This should not be called directly.  If `pathPart` contains any path
     * separators, it will lead to unsafe undefined behavior.
     *
     * Use `Path.resolve()` instead.
     *
     * @internal
     */
    child'
      Parameter
        Identifier: 'pathPart'
        StringKeyword
      Parameter
        Identifier: ' opts'
        QuestionToken
        TypeReference
          Identifier: ' PathOpts'
      TypeReference
        Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    /**
     * The relative path from the cwd. If it does not share an ancestor with
     * the cwd, then this ends up being equivalent to the fullpath()
     */
    relative'
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * The relative path from the cwd, using / as the path separator.
     * If it does not share an ancestor with
     * the cwd, then this ends up being equivalent to the fullpathPosix()
     * On posix systems, this is identical to relative().
     */
    relativePosix'
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * The fully resolved path string for this Path entry
     */
    fullpath'
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * On platforms other than windows, this is identical to fullpath.
     *
     * On windows, this is overridden to return the forward-slash form of the
     * full UNC path.
     */
    fullpathPosix'
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Is the Path of an unknown type?
     *
     * Note that we might know *something* about it if there has been a previous
     * filesystem operation, for example that it does not exist, or is not a
     * link, or whether it has child entries.
     */
    isUnknown'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    isType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    getType'
      TypeReference
        Identifier: ' Type'
    MethodDeclaration
      Identifier: '
    /**
     * Is the Path a regular file?
     */
    isFile'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Is the Path a directory?
     */
    isDirectory'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Is the path a character device?
     */
    isCharacterDevice'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Is the path a block device?
     */
    isBlockDevice'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Is the path a FIFO pipe?
     */
    isFIFO'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Is the path a socket?
     */
    isSocket'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Is the path a symbolic link?
     */
    isSymbolicLink'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return the entry if it has been subject of a successful lstat, or
     * undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* simply
     * mean that we haven't called lstat on it.
     */
    lstatCached'
      UnionType
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return the cached link target if the entry has been the subject of a
     * successful readlink, or undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * readlink() has been called at some point.
     */
    readlinkCached'
      UnionType
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Returns the cached realpath target if the entry has been the subject
     * of a successful realpath, or undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * realpath() has been called at some point.
     */
    realpathCached'
      UnionType
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Returns the cached child Path entries array if the entry has been the
     * subject of a successful readdir(), or [] otherwise.
     *
     * Does not read the filesystem, so an empty array *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * readdir() has been called recently enough to still be valid.
     */
    readdirCached'
      ArrayType
        TypeReference
          Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    /**
     * Return true if it's worth trying to readlink.  Ie, we don't (yet) have
     * any indication that readlink will definitely fail.
     *
     * Returns false if the path is known to not be a symlink, if a previous
     * readlink failed, or if the entry does not exist.
     */
    canReadlink'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return true if readdir has previously been successfully called on this
     * path, indicating that cachedReaddir() is likely valid.
     */
    calledReaddir'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Returns true if the path is known to not exist. That is, a previous lstat
     * or readdir failed to verify its existence when that would have been
     * expected, or a parent entry was marked either enoent or enotdir.
     */
    isENOENT'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return true if the path is a match for the given path name.  This handles
     * case sensitivity and unicode normalization.
     *
     * Note: even on case-sensitive systems, it is **not** safe to test the
     * equality of the `.name` property to determine whether a given pathname
     * matches, due to unicode normalization mismatches.
     *
     * Always use this method instead of testing the `path.name` property
     * directly.
     */
    isNamed'
      Parameter
        Identifier: 'n'
        StringKeyword
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return the Path object corresponding to the target of a symbolic link.
     *
     * If the Path is not a symbolic link, or if the readlink call fails for any
     * reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     */
    readlink'
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Synchronous {@link PathBase.readlink}
     */
    readlinkSync'
      UnionType
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Call lstat() on this Path, and update all known information that can be
     * determined.
     *
     * Note that unlike `fs.lstat()`, the returned value does not contain some
     * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
     * information is required, you will need to call `fs.lstat` yourself.
     *
     * If the Path refers to a nonexistent file, or if the lstat call fails for
     * any reason, `undefined` is returned.  Otherwise the updated Path object is
     * returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    lstat'
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * synchronous {@link PathBase.lstat}
     */
    lstatSync'
      UnionType
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Standard node-style callback interface to get list of directory entries.
     *
     * If the Path cannot or does not contain any children, then an empty array
     * is returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     *
     * @param cb The callback called with (er, entries).  Note that the `er`
     * param is somewhat extraneous, as all readdir() errors are handled and
     * simply result in an empty set of entries being returned.
     * @param allowZalgo Boolean indicating that immediately known results should
     * *not* be deferred with `queueMicrotask`. Defaults to `false`. Release
     * zalgo at your peril, the dark pony lord is devious and unforgiving.
     */
    readdirCB'
      Parameter
        Identifier: 'cb'
        FunctionType
          Parameter
            Identifier: 'er'
            UnionType
              TypeReference
                QualifiedName
                  Identifier: ' NodeJS'
                  Identifier: 'ErrnoException'
              LiteralType
                NullKeyword
          Parameter
            Identifier: ' entries'
            ArrayType
              TypeReference
                Identifier: ' PathBase'
          AnyKeyword
      Parameter
        Identifier: ' allowZalgo'
        QuestionToken
        BooleanKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return an array of known child entries.
     *
     * If the Path cannot or does not contain any children, then an empty array
     * is returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    readdir'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    /**
     * synchronous {@link PathBase.readdir}
     */
    readdirSync'
      ArrayType
        TypeReference
          Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    canReaddir'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    shouldWalk'
      Parameter
        Identifier: 'dirs'
        TypeReference
          Identifier: ' Set'
          UnionType
            TypeReference
              Identifier: 'PathBase'
            UndefinedKeyword
      Parameter
        Identifier: ' walkFilter'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'e'
            TypeReference
              Identifier: ' PathBase'
          BooleanKeyword
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return the Path object corresponding to path as resolved
     * by realpath(3).
     *
     * If the realpath call fails for any reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     * On success, returns a Path object.
     */
    realpath'
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Synchronous {@link realpath}
     */
    realpathSync'
      UnionType
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      ComputedPropertyName
        Identifier: 'setAsCwd'
      Parameter
        Identifier: 'oldCwd'
        TypeReference
          Identifier: ' PathBase'
      VoidKeyword
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PathWin32'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PathBase'
    PropertyDeclaration
      Identifier: '
    /**
     * Separator for generating path strings.
     */
    sep'
      LiteralType
        StringLiteral
    PropertyDeclaration
      Identifier: '
    /**
     * Separator for parsing path strings.
     */
    splitSep'
      TypeReference
        Identifier: ' RegExp'
    Constructor
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' type'
        UnionType
          NumberKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' root'
        UnionType
          TypeReference
            Identifier: ' PathBase'
          UndefinedKeyword
      Parameter
        Identifier: ' roots'
        TypeLiteral
          IndexSignature
            Parameter
              Identifier: 'k'
              StringKeyword
            TypeReference
              Identifier: ' PathBase'
      Parameter
        Identifier: ' nocase'
        BooleanKeyword
      Parameter
        Identifier: ' children'
        TypeReference
          Identifier: ' ChildrenCache'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' PathOpts'
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    newChild'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' type'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' opts'
        QuestionToken
        TypeReference
          Identifier: ' PathOpts'
      TypeReference
        Identifier: ' PathWin32'
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    getRootString'
      Parameter
        Identifier: 'path'
        StringKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    getRoot'
      Parameter
        Identifier: 'rootPath'
        StringKeyword
      TypeReference
        Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    sameRoot'
      Parameter
        Identifier: 'rootPath'
        StringKeyword
      Parameter
        Identifier: ' compare'
        QuestionToken
        StringKeyword
      BooleanKeyword
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PathPosix'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PathBase'
    PropertyDeclaration
      Identifier: '
    /**
     * separator for parsing path strings
     */
    splitSep'
      LiteralType
        StringLiteral
    PropertyDeclaration
      Identifier: '
    /**
     * separator for generating path strings
     */
    sep'
      LiteralType
        StringLiteral
    Constructor
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' type'
        UnionType
          NumberKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' root'
        UnionType
          TypeReference
            Identifier: ' PathBase'
          UndefinedKeyword
      Parameter
        Identifier: ' roots'
        TypeLiteral
          IndexSignature
            Parameter
              Identifier: 'k'
              StringKeyword
            TypeReference
              Identifier: ' PathBase'
      Parameter
        Identifier: ' nocase'
        BooleanKeyword
      Parameter
        Identifier: ' children'
        TypeReference
          Identifier: ' ChildrenCache'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' PathOpts'
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    getRootString'
      Parameter
        Identifier: 'path'
        StringKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    getRoot'
      Parameter
        Identifier: '_rootPath'
        StringKeyword
      TypeReference
        Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    newChild'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' type'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' opts'
        QuestionToken
        TypeReference
          Identifier: ' PathOpts'
      TypeReference
        Identifier: ' PathPosix'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PathScurryOpts'
    PropertySignature
      Identifier: '
    /**
     * perform case-insensitive path matching. Default based on platform
     * subclass.
     */
    nocase'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * Number of Path entries to keep in the cache of Path child references.
     *
     * Setting this higher than 65536 will dramatically increase the data
     * consumption and construction time overhead of each PathScurry.
     *
     * Setting this value to 256 or lower will significantly reduce the data
     * consumption and construction time overhead, but may also reduce resolve()
     * and readdir() performance on large filesystems.
     *
     * Default `16384`.
     */
    childrenCacheSize'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * An object that overrides the built-in functions from the fs and
     * fs/promises modules.
     *
     * See {@link FSOption}
     */
    fs'
      QuestionToken
      TypeReference
        Identifier: ' FSOption'
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    AbstractKeyword
    Identifier: ' PathScurryBase'
    PropertyDeclaration
      PrivateIdentifier
    PropertyDeclaration
      Identifier: '
    /**
     * The root Path entry for the current working directory of this Scurry
     */
    root'
      TypeReference
        Identifier: ' PathBase'
    PropertyDeclaration
      Identifier: '
    /**
     * The string path for the root of this Scurry's current working directory
     */
    rootPath'
      StringKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * A collection of all roots encountered, referenced by rootPath
     */
    roots'
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'k'
            StringKeyword
          TypeReference
            Identifier: ' PathBase'
    PropertyDeclaration
      Identifier: '
    /**
     * The Path entry corresponding to this PathScurry's current working directory.
     */
    cwd'
      TypeReference
        Identifier: ' PathBase'
    PropertyDeclaration
      Identifier: '
    /**
     * Perform path comparisons case-insensitively.
     *
     * Defaults true on Darwin and Windows systems, false elsewhere.
     */
    nocase'
      BooleanKeyword
    PropertyDeclaration
      AbstractKeyword
      Identifier: ' sep'
      UnionType
        StringKeyword
        TypeReference
          Identifier: ' RegExp'
    Constructor
      Parameter
        Identifier: 'cwd'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' URL'
          UndefinedKeyword
      Parameter
        Identifier: ' pathImpl'
        UnionType
          TypeQuery
            Identifier: ' win32'
          TypeQuery
            Identifier: ' posix'
      Parameter
        Identifier: ' sep'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
      Parameter
        ObjectBindingPattern
          BindingElement
            Identifier: ' nocase'
          BindingElement
            Identifier: ' childrenCacheSize'
          BindingElement
            Identifier: ' fs'
        QuestionToken
        TypeReference
          Identifier: ' PathScurryOpts'
    MethodDeclaration
      Identifier: '
    /**
     * Get the depth of a provided path, string, or the cwd
     */
    depth'
      Parameter
        Identifier: 'path'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' Path'
          StringKeyword
      NumberKeyword
    MethodDeclaration
      AbstractKeyword
      Identifier: ' parseRootPath'
      Parameter
        Identifier: 'dir'
        StringKeyword
      StringKeyword
    MethodDeclaration
      AbstractKeyword
      Identifier: ' newRoot'
      Parameter
        Identifier: 'fs'
        TypeReference
          Identifier: ' FSValue'
      TypeReference
        Identifier: ' PathBase'
    MethodDeclaration
      AbstractKeyword
      Identifier: ' isAbsolute'
      Parameter
        Identifier: 'p'
        StringKeyword
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return the cache of child entries.  Exposed so subclasses can create
     * child Path objects in a platform-specific way.
     *
     * @internal
     */
    childrenCache'
      TypeReference
        Identifier: ' ChildrenCache'
    MethodDeclaration
      Identifier: '
    /**
     * Resolve one or more path strings to a resolved string
     *
     * Same interface as require('path').resolve.
     *
     * Much faster than path.resolve() when called multiple times for the same
     * path, because the resolved Path objects are cached.  Much slower
     * otherwise.
     */
    resolve'
      Parameter
        DotDotDotToken
        Identifier: 'paths'
        ArrayType
          StringKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Resolve one or more path strings to a resolved string, returning
     * the posix path.  Identical to .resolve() on posix systems, but on
     * windows will return a forward-slash separated UNC path.
     *
     * Same interface as require('path').resolve.
     *
     * Much faster than path.resolve() when called multiple times for the same
     * path, because the resolved Path objects are cached.  Much slower
     * otherwise.
     */
    resolvePosix'
      Parameter
        DotDotDotToken
        Identifier: 'paths'
        ArrayType
          StringKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * find the relative path from the cwd to the supplied path string or entry
     */
    relative'
      Parameter
        Identifier: 'entry'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * find the relative path from the cwd to the supplied path string or
     * entry, using / as the path delimiter, even on Windows.
     */
    relativePosix'
      Parameter
        Identifier: 'entry'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return the basename for the provided string or Path object
     */
    basename'
      Parameter
        Identifier: 'entry'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return the dirname for the provided string or Path object
     */
    dirname'
      Parameter
        Identifier: 'entry'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return an array of known child entries.
     *
     * First argument may be either a string, or a Path object.
     *
     * If the Path cannot or does not contain any children, then an empty array
     * is returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     *
     * Unlike `fs.readdir()`, the `withFileTypes` option defaults to `true`. Set
     * `{ withFileTypes: false }` to return strings.
     */
    readdir'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    readdir'
      Parameter
        Identifier: 'opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    readdir'
      Parameter
        Identifier: 'opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          StringKeyword
    MethodDeclaration
      Identifier: '
    readdir'
      Parameter
        Identifier: 'opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          ArrayType
            TypeReference
              Identifier: 'PathBase'
          ArrayType
            StringKeyword
    MethodDeclaration
      Identifier: '
    readdir'
      Parameter
        Identifier: 'entry'
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    readdir'
      Parameter
        Identifier: 'entry'
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      Parameter
        Identifier: ' opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    readdir'
      Parameter
        Identifier: 'entry'
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      Parameter
        Identifier: ' opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          StringKeyword
    MethodDeclaration
      Identifier: '
    readdir'
      Parameter
        Identifier: 'entry'
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      Parameter
        Identifier: ' opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          ArrayType
            TypeReference
              Identifier: 'PathBase'
          ArrayType
            StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * synchronous {@link PathScurryBase.readdir}
     */
    readdirSync'
      ArrayType
        TypeReference
          Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    readdirSync'
      Parameter
        Identifier: 'opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      ArrayType
        TypeReference
          Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    readdirSync'
      Parameter
        Identifier: 'opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      ArrayType
        StringKeyword
    MethodDeclaration
      Identifier: '
    readdirSync'
      Parameter
        Identifier: 'opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      UnionType
        ArrayType
          TypeReference
            Identifier: ' PathBase'
        ArrayType
          StringKeyword
    MethodDeclaration
      Identifier: '
    readdirSync'
      Parameter
        Identifier: 'entry'
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      ArrayType
        TypeReference
          Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    readdirSync'
      Parameter
        Identifier: 'entry'
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      Parameter
        Identifier: ' opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      ArrayType
        TypeReference
          Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    readdirSync'
      Parameter
        Identifier: 'entry'
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      Parameter
        Identifier: ' opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      ArrayType
        StringKeyword
    MethodDeclaration
      Identifier: '
    readdirSync'
      Parameter
        Identifier: 'entry'
        UnionType
          TypeReference
            Identifier: ' PathBase'
          StringKeyword
      Parameter
        Identifier: ' opts'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      UnionType
        ArrayType
          TypeReference
            Identifier: ' PathBase'
        ArrayType
          StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Call lstat() on the string or Path object, and update all known
     * information that can be determined.
     *
     * Note that unlike `fs.lstat()`, the returned value does not contain some
     * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
     * information is required, you will need to call `fs.lstat` yourself.
     *
     * If the Path refers to a nonexistent file, or if the lstat call fails for
     * any reason, `undefined` is returned.  Otherwise the updated Path object is
     * returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    lstat'
      Parameter
        Identifier: 'entry'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * synchronous {@link PathScurryBase.lstat}
     */
    lstatSync'
      Parameter
        Identifier: 'entry'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      UnionType
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return the Path object or string path corresponding to the target of a
     * symbolic link.
     *
     * If the path is not a symbolic link, or if the readlink call fails for any
     * reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     *
     * `{withFileTypes}` option defaults to `false`.
     *
     * On success, returns a Path object if `withFileTypes` option is true,
     * otherwise a string.
     */
    readlink'
      TypeReference
        Identifier: ' Promise'
        UnionType
          StringKeyword
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlink'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          StringKeyword
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlink'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlink'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          StringKeyword
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlink'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          StringKeyword
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlink'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlink'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * synchronous {@link PathScurryBase.readlink}
     */
    readlinkSync'
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlinkSync'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlinkSync'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      UnionType
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlinkSync'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' PathBase'
        StringKeyword
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlinkSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlinkSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      UnionType
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    readlinkSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      UnionType
        StringKeyword
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Return the Path object or string path corresponding to path as resolved
     * by realpath(3).
     *
     * If the realpath call fails for any reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     *
     * `{withFileTypes}` option defaults to `false`.
     *
     * On success, returns a Path object if `withFileTypes` option is true,
     * otherwise a string.
     */
    realpath'
      TypeReference
        Identifier: ' Promise'
        UnionType
          StringKeyword
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpath'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          StringKeyword
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpath'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpath'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          StringKeyword
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpath'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          StringKeyword
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpath'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpath'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
          UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpathSync'
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpathSync'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpathSync'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      UnionType
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpathSync'
      Parameter
        Identifier: 'opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' PathBase'
        StringKeyword
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpathSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              FalseKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpathSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            LiteralType
              TrueKeyword
      UnionType
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    realpathSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opt'
        TypeLiteral
          PropertySignature
            Identifier: '
        withFileTypes'
            BooleanKeyword
      UnionType
        StringKeyword
        TypeReference
          Identifier: ' PathBase'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Asynchronously walk the directory tree, returning an array of
     * all path strings or Path objects found.
     *
     * Note that this will be extremely memory-hungry on large filesystems.
     * In such cases, it may be better to use the stream or async iterator
     * walk implementation.
     */
    walk'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    walk'
      Parameter
        Identifier: 'opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    walk'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          StringKeyword
    MethodDeclaration
      Identifier: '
    walk'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptions'
      TypeReference
        Identifier: ' Promise'
        UnionType
          ArrayType
            StringKeyword
          ArrayType
            TypeReference
              Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    walk'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    walk'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    walk'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          StringKeyword
    MethodDeclaration
      Identifier: '
    walk'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptions'
      TypeReference
        Identifier: ' Promise'
        UnionType
          ArrayType
            TypeReference
              Identifier: 'PathBase'
          ArrayType
            StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Synchronously walk the directory tree, returning an array of
     * all path strings or Path objects found.
     *
     * Note that this will be extremely memory-hungry on large filesystems.
     * In such cases, it may be better to use the stream or async iterator
     * walk implementation.
     */
    walkSync'
      ArrayType
        TypeReference
          Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    walkSync'
      Parameter
        Identifier: 'opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
      ArrayType
        TypeReference
          Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    walkSync'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      ArrayType
        StringKeyword
    MethodDeclaration
      Identifier: '
    walkSync'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptions'
      UnionType
        ArrayType
          StringKeyword
        ArrayType
          TypeReference
            Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    walkSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      ArrayType
        TypeReference
          Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    walkSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
      ArrayType
        TypeReference
          Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    walkSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      ArrayType
        StringKeyword
    MethodDeclaration
      Identifier: '
    walkSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptions'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' PathBase'
        ArrayType
          StringKeyword
    MethodDeclaration
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncIterator'
      TypeReference
        Identifier: ' AsyncGenerator'
        TypeReference
          Identifier: 'PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Async generator form of {@link PathScurryBase.walk}
     *
     * Note: As of Node 19, this is very slow, compared to other methods of
     * walking, especially if most/all of the directory tree has been previously
     * walked.  Consider using {@link PathScurryBase.stream} if memory overhead
     * and backpressure are concerns, or {@link PathScurryBase.walk} if not.
     */
    iterate'
      TypeReference
        Identifier: ' AsyncGenerator'
        TypeReference
          Identifier: 'PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterate'
      Parameter
        Identifier: 'opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
      TypeReference
        Identifier: ' AsyncGenerator'
        TypeReference
          Identifier: 'PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterate'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      TypeReference
        Identifier: ' AsyncGenerator'
        StringKeyword
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterate'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptions'
      TypeReference
        Identifier: ' AsyncGenerator'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterate'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      TypeReference
        Identifier: ' AsyncGenerator'
        TypeReference
          Identifier: 'PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterate'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
      TypeReference
        Identifier: ' AsyncGenerator'
        TypeReference
          Identifier: 'PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterate'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      TypeReference
        Identifier: ' AsyncGenerator'
        StringKeyword
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterate'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptions'
      TypeReference
        Identifier: ' AsyncGenerator'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          StringKeyword
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'iterator'
      TypeReference
        Identifier: ' Generator'
        TypeReference
          Identifier: 'PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterateSync'
      TypeReference
        Identifier: ' Generator'
        TypeReference
          Identifier: 'PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterateSync'
      Parameter
        Identifier: 'opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
      TypeReference
        Identifier: ' Generator'
        TypeReference
          Identifier: 'PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterateSync'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      TypeReference
        Identifier: ' Generator'
        StringKeyword
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterateSync'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptions'
      TypeReference
        Identifier: ' Generator'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterateSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      TypeReference
        Identifier: ' Generator'
        TypeReference
          Identifier: 'PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterateSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
      TypeReference
        Identifier: ' Generator'
        TypeReference
          Identifier: 'PathBase'
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterateSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      TypeReference
        Identifier: ' Generator'
        StringKeyword
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    iterateSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptions'
      TypeReference
        Identifier: ' Generator'
        UnionType
          TypeReference
            Identifier: 'PathBase'
          StringKeyword
        VoidKeyword
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Stream form of {@link PathScurryBase.walk}
     *
     * Returns a Minipass stream that emits {@link PathBase} objects by default,
     * or strings if `{ withFileTypes: false }` is set in the options.
     */
    stream'
      TypeReference
        Identifier: ' Minipass'
        TypeReference
          Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    stream'
      Parameter
        Identifier: 'opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
      TypeReference
        Identifier: ' Minipass'
        TypeReference
          Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    stream'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      TypeReference
        Identifier: ' Minipass'
        StringKeyword
    MethodDeclaration
      Identifier: '
    stream'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptions'
      TypeReference
        Identifier: ' Minipass'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    stream'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      TypeReference
        Identifier: ' Minipass'
        TypeReference
          Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    stream'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
      TypeReference
        Identifier: ' Minipass'
        TypeReference
          Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    stream'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      TypeReference
        Identifier: ' Minipass'
        StringKeyword
    MethodDeclaration
      Identifier: '
    stream'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptions'
      UnionType
        TypeReference
          Identifier: ' Minipass'
          StringKeyword
        TypeReference
          Identifier: ' Minipass'
          TypeReference
            Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    /**
     * Synchronous form of {@link PathScurryBase.stream}
     *
     * Returns a Minipass stream that emits {@link PathBase} objects by default,
     * or strings if `{ withFileTypes: false }` is set in the options.
     *
     * Will complete the walk in a single tick if the stream is consumed fully.
     * Otherwise, will pause as needed for stream backpressure.
     */
    streamSync'
      TypeReference
        Identifier: ' Minipass'
        TypeReference
          Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    streamSync'
      Parameter
        Identifier: 'opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
      TypeReference
        Identifier: ' Minipass'
        TypeReference
          Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    streamSync'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      TypeReference
        Identifier: ' Minipass'
        StringKeyword
    MethodDeclaration
      Identifier: '
    streamSync'
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' WalkOptions'
      TypeReference
        Identifier: ' Minipass'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
    MethodDeclaration
      Identifier: '
    streamSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      TypeReference
        Identifier: ' Minipass'
        TypeReference
          Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    streamSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        UnionType
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesUnset'
          TypeReference
            Identifier: ' WalkOptionsWithFileTypesTrue'
      TypeReference
        Identifier: ' Minipass'
        TypeReference
          Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    streamSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptionsWithFileTypesFalse'
      TypeReference
        Identifier: ' Minipass'
        StringKeyword
    MethodDeclaration
      Identifier: '
    streamSync'
      Parameter
        Identifier: 'entry'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PathBase'
      Parameter
        Identifier: ' opts'
        TypeReference
          Identifier: ' WalkOptions'
      UnionType
        TypeReference
          Identifier: ' Minipass'
          StringKeyword
        TypeReference
          Identifier: ' Minipass'
          TypeReference
            Identifier: 'PathBase'
    MethodDeclaration
      Identifier: '
    chdir'
      Parameter
        Identifier: 'path'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Path'
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WalkOptions'
    PropertySignature
      Identifier: '
    /**
     * Return results as {@link PathBase} objects rather than strings.
     * When set to false, results are fully resolved paths, as returned by
     * {@link PathBase.fullpath}.
     * @default true
     */
    withFileTypes'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     *  Attempt to read directory entries from symbolic links. Otherwise, only
     *  actual directories are traversed. Regardless of this setting, a given
     *  target path will only ever be walked once, meaning that a symbolic link
     *  to a previously traversed directory will never be followed.
     *
     *  Setting this imposes a slight performance penalty, because `readlink`
     *  must be called on all symbolic links encountered, in order to avoid
     *  infinite cycles.
     * @default false
     */
    follow'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * Only return entries where the provided function returns true.
     *
     * This will not prevent directories from being traversed, even if they do
     * not pass the filter, though it will prevent directories themselves from
     * being included in the result set.  See {@link walkFilter}
     *
     * Asynchronous functions are not supported here.
     *
     * By default, if no filter is provided, all entries and traversed
     * directories are included.
     */
    filter'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'entry'
          TypeReference
            Identifier: ' PathBase'
        BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * Only traverse directories (and in the case of {@link follow} being set to
     * true, symbolic links to directories) if the provided function returns
     * true.
     *
     * This will not prevent directories from being included in the result set,
     * even if they do not pass the supplied filter function.  See {@link filter}
     * to do that.
     *
     * Asynchronous functions are not supported here.
     */
    walkFilter'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'entry'
          TypeReference
            Identifier: ' PathBase'
        BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' WalkOptionsWithFileTypesUnset'
    IntersectionType
      TypeReference
        Identifier: ' WalkOptions'
      TypeLiteral
        PropertySignature
          Identifier: '
    withFileTypes'
          QuestionToken
          UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' WalkOptionsWithFileTypesTrue'
    IntersectionType
      TypeReference
        Identifier: ' WalkOptions'
      TypeLiteral
        PropertySignature
          Identifier: '
    withFileTypes'
          LiteralType
            TrueKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' WalkOptionsWithFileTypesFalse'
    IntersectionType
      TypeReference
        Identifier: ' WalkOptions'
      TypeLiteral
        PropertySignature
          Identifier: '
    withFileTypes'
          LiteralType
            FalseKeyword
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PathScurryWin32'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PathScurryBase'
    PropertyDeclaration
      Identifier: '
    /**
     * separator for generating path strings
     */
    sep'
      LiteralType
        StringLiteral
    Constructor
      Parameter
        Identifier: 'cwd'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' URL'
          StringKeyword
      Parameter
        Identifier: ' opts'
        QuestionToken
        TypeReference
          Identifier: ' PathScurryOpts'
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    parseRootPath'
      Parameter
        Identifier: 'dir'
        StringKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    newRoot'
      Parameter
        Identifier: 'fs'
        TypeReference
          Identifier: ' FSValue'
      TypeReference
        Identifier: ' PathWin32'
    MethodDeclaration
      Identifier: '
    /**
     * Return true if the provided path string is an absolute path
     */
    isAbsolute'
      Parameter
        Identifier: 'p'
        StringKeyword
      BooleanKeyword
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PathScurryPosix'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PathScurryBase'
    PropertyDeclaration
      Identifier: '
    /**
     * separator for generating path strings
     */
    sep'
      LiteralType
        StringLiteral
    Constructor
      Parameter
        Identifier: 'cwd'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' URL'
          StringKeyword
      Parameter
        Identifier: ' opts'
        QuestionToken
        TypeReference
          Identifier: ' PathScurryOpts'
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    parseRootPath'
      Parameter
        Identifier: '_dir'
        StringKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * @internal
     */
    newRoot'
      Parameter
        Identifier: 'fs'
        TypeReference
          Identifier: ' FSValue'
      TypeReference
        Identifier: ' PathPosix'
    MethodDeclaration
      Identifier: '
    /**
     * Return true if the provided path string is an absolute path
     */
    isAbsolute'
      Parameter
        Identifier: 'p'
        StringKeyword
      BooleanKeyword
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PathScurryDarwin'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PathScurryPosix'
    Constructor
      Parameter
        Identifier: 'cwd'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' URL'
          StringKeyword
      Parameter
        Identifier: ' opts'
        QuestionToken
        TypeReference
          Identifier: ' PathScurryOpts'
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Path'
        UnionType
          TypeQuery
            Identifier: ' PathWin32'
          TypeQuery
            Identifier: ' PathPosix'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Path'
    UnionType
      TypeReference
        Identifier: ' PathBase'
      TypeReference
        Identifier: ' InstanceType'
        TypeQuery
          Identifier: ' Path'
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' PathScurry'
        UnionType
          TypeQuery
            Identifier: ' PathScurryWin32'
          TypeQuery
            Identifier: ' PathScurryDarwin'
          TypeQuery
            Identifier: ' PathScurryPosix'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PathScurry'
    UnionType
      TypeReference
        Identifier: ' PathScurryBase'
      TypeReference
        Identifier: ' InstanceType'
        TypeQuery
          Identifier: ' PathScurry'
  ExportDeclaration
    NamedExports
