SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' BuilderProgram'
        ImportSpecifier
          Identifier: ' BuildInfo'
        ImportSpecifier
          Identifier: ' CompilerHost'
        ImportSpecifier
          Identifier: ' CompilerOptions'
        ImportSpecifier
          Identifier: ' ConfigFileDiagnosticsReporter'
        ImportSpecifier
          Identifier: ' Diagnostic'
        ImportSpecifier
          Identifier: ' DiagnosticReporter'
        ImportSpecifier
          Identifier: ' DirectoryWatcherCallback'
        ImportSpecifier
          Identifier: ' EmitAndSemanticDiagnosticsBuilderProgram'
        ImportSpecifier
          Identifier: ' ExtendedConfigCacheEntry'
        ImportSpecifier
          Identifier: ' FileExtensionInfo'
        ImportSpecifier
          Identifier: ' FileReference'
        ImportSpecifier
          Identifier: ' FileWatcher'
        ImportSpecifier
          Identifier: ' FileWatcherCallback'
        ImportSpecifier
          Identifier: ' JSDocParsingMode'
        ImportSpecifier
          Identifier: ' ModuleResolutionCache'
        ImportSpecifier
          Identifier: ' ParsedCommandLine'
        ImportSpecifier
          Identifier: ' Path'
        ImportSpecifier
          Identifier: ' ProjectReference'
        ImportSpecifier
          Identifier: ' ResolutionCache'
        ImportSpecifier
          Identifier: ' ResolutionMode'
        ImportSpecifier
          Identifier: ' ResolvedModule'
        ImportSpecifier
          Identifier: ' ResolvedModuleWithFailedLookupLocations'
        ImportSpecifier
          Identifier: ' ResolvedProjectReference'
        ImportSpecifier
          Identifier: ' ResolvedTypeReferenceDirective'
        ImportSpecifier
          Identifier: ' ResolvedTypeReferenceDirectiveWithFailedLookupLocations'
        ImportSpecifier
          Identifier: ' SourceFile'
        ImportSpecifier
          Identifier: ' StringLiteralLike'
        ImportSpecifier
          Identifier: ' System'
        ImportSpecifier
          Identifier: ' WatchOptions'
    StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ReadBuildProgramHost'
    MethodSignature
      Identifier: '
    useCaseSensitiveFileNames'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getCurrentDirectory'
      StringKeyword
    MethodSignature
      Identifier: '
    readFile'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    getBuildInfo'
      QuestionToken
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' configFilePath'
        UnionType
          StringKeyword
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' BuildInfo'
        UndefinedKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' readBuilderProgram'
    Parameter
      Identifier: 'compilerOptions'
      TypeReference
        Identifier: ' CompilerOptions'
    Parameter
      Identifier: ' host'
      TypeReference
        Identifier: ' ReadBuildProgramHost'
    UnionType
      TypeReference
        Identifier: ' EmitAndSemanticDiagnosticsBuilderProgram'
      UndefinedKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createIncrementalCompilerHost'
    Parameter
      Identifier: 'options'
      TypeReference
        Identifier: ' CompilerOptions'
    Parameter
      Identifier: ' system'
      QuestionToken
      TypeReference
        Identifier: ' System'
    TypeReference
      Identifier: ' CompilerHost'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IncrementalProgramOptions'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
    PropertySignature
      Identifier: '
    rootNames'
      TypeOperator
        ArrayType
          StringKeyword
    PropertySignature
      Identifier: '
    options'
      TypeReference
        Identifier: ' CompilerOptions'
    PropertySignature
      Identifier: '
    configFileParsingDiagnostics'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    PropertySignature
      Identifier: '
    projectReferences'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ProjectReference'
    PropertySignature
      Identifier: '
    host'
      QuestionToken
      TypeReference
        Identifier: ' CompilerHost'
    PropertySignature
      Identifier: '
    createProgram'
      QuestionToken
      TypeReference
        Identifier: ' CreateProgram'
        TypeReference
          Identifier: 'T'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createIncrementalProgram'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
      TypeReference
        Identifier: ' EmitAndSemanticDiagnosticsBuilderProgram'
    Parameter
      ObjectBindingPattern
        BindingElement
          Identifier: ' rootNames'
        BindingElement
          Identifier: ' options'
        BindingElement
          Identifier: ' configFileParsingDiagnostics'
        BindingElement
          Identifier: ' projectReferences'
        BindingElement
          Identifier: ' host'
        BindingElement
          Identifier: ' createProgram'
      TypeReference
        Identifier: ' IncrementalProgramOptions'
        TypeReference
          Identifier: 'T'
    TypeReference
      Identifier: ' T'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' WatchStatusReporter'
    FunctionType
      Parameter
        Identifier: 'diagnostic'
        TypeReference
          Identifier: ' Diagnostic'
      Parameter
        Identifier: ' newLine'
        StringKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: ' errorCount'
        QuestionToken
        NumberKeyword
      VoidKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CreateProgram'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
    FunctionType
      Parameter
        Identifier: 'rootNames'
        UnionType
          TypeOperator
            ArrayType
              StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' options'
        UnionType
          TypeReference
            Identifier: ' CompilerOptions'
          UndefinedKeyword
      Parameter
        Identifier: ' host'
        QuestionToken
        TypeReference
          Identifier: ' CompilerHost'
      Parameter
        Identifier: ' oldProgram'
        QuestionToken
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' configFileParsingDiagnostics'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Diagnostic'
      Parameter
        Identifier: ' projectReferences'
        QuestionToken
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ProjectReference'
          UndefinedKeyword
      TypeReference
        Identifier: ' T'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WatchHost'
    MethodSignature
      Identifier: '
    /** If provided, called with Diagnostic message that informs about change in watch status */
    onWatchStatusChange'
      QuestionToken
      Parameter
        Identifier: 'diagnostic'
        TypeReference
          Identifier: ' Diagnostic'
      Parameter
        Identifier: ' newLine'
        StringKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: ' errorCount'
        QuestionToken
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /** Used to watch changes in source files, missing files needed to update the program or config file */
    watchFile'
      Parameter
        Identifier: 'path'
        StringKeyword
      Parameter
        Identifier: ' callback'
        TypeReference
          Identifier: ' FileWatcherCallback'
      Parameter
        Identifier: ' pollingInterval'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' WatchOptions'
      TypeReference
        Identifier: ' FileWatcher'
    MethodSignature
      Identifier: '
    /** Used to watch resolved module's failed lookup locations, config file specs, type roots where auto type reference directives are added */
    watchDirectory'
      Parameter
        Identifier: 'path'
        StringKeyword
      Parameter
        Identifier: ' callback'
        TypeReference
          Identifier: ' DirectoryWatcherCallback'
      Parameter
        Identifier: ' recursive'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' WatchOptions'
      TypeReference
        Identifier: ' FileWatcher'
    MethodSignature
      Identifier: '
    /** If provided, will be used to set delayed compilation, so that multiple changes in short span are compiled together */
    setTimeout'
      QuestionToken
      Parameter
        Identifier: 'callback'
        FunctionType
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          VoidKeyword
      Parameter
        Identifier: ' ms'
        NumberKeyword
      Parameter
        DotDotDotToken
        Identifier: 'args'
        ArrayType
          AnyKeyword
      AnyKeyword
    MethodSignature
      Identifier: '
    /** If provided, will be used to reset existing delayed compilation */
    clearTimeout'
      QuestionToken
      Parameter
        Identifier: 'timeoutId'
        AnyKeyword
      VoidKeyword
    PropertySignature
      Identifier: '
    preferNonRecursiveWatch'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ProgramHost'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
    PropertySignature
      Identifier: '
    /**
     * Used to create the program when need for program creation or recreation detected
     */
    createProgram'
      TypeReference
        Identifier: ' CreateProgram'
        TypeReference
          Identifier: 'T'
    MethodSignature
      Identifier: '
    useCaseSensitiveFileNames'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getNewLine'
      StringKeyword
    MethodSignature
      Identifier: '
    getCurrentDirectory'
      StringKeyword
    MethodSignature
      Identifier: '
    getDefaultLibFileName'
      Parameter
        Identifier: 'options'
        TypeReference
          Identifier: ' CompilerOptions'
      StringKeyword
    MethodSignature
      Identifier: '
    getDefaultLibLocation'
      QuestionToken
      StringKeyword
    MethodSignature
      Identifier: '
    createHash'
      QuestionToken
      Parameter
        Identifier: 'data'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Use to check file presence for source files and
     * if resolveModuleNames is not provided (complier is in charge of module resolution) then module files as well
     */
    fileExists'
      Parameter
        Identifier: 'path'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Use to read file text for source files and
     * if resolveModuleNames is not provided (complier is in charge of module resolution) then module files as well
     */
    readFile'
      Parameter
        Identifier: 'path'
        StringKeyword
      Parameter
        Identifier: ' encoding'
        QuestionToken
        StringKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** If provided, used for module resolution as well as to handle directory structure */
    directoryExists'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** If provided, used in resolutions as well as handling directory structure */
    getDirectories'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      ArrayType
        StringKeyword
    MethodSignature
      Identifier: '
    /** If provided, used to cache and handle directory structure modifications */
    readDirectory'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      Parameter
        Identifier: ' extensions'
        QuestionToken
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' exclude'
        QuestionToken
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' include'
        QuestionToken
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' depth'
        QuestionToken
        NumberKeyword
      ArrayType
        StringKeyword
    MethodSignature
      Identifier: '
    /** Symbol links resolution */
    realpath'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '
    /** If provided would be used to write log about compilation */
    trace'
      QuestionToken
      Parameter
        Identifier: 's'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /** If provided is used to get the environment variable */
    getEnvironmentVariable'
      QuestionToken
      Parameter
        Identifier: 'name'
        StringKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * @deprecated supply resolveModuleNameLiterals instead for resolution that can handle newer resolution modes like nodenext
     *
     * If provided, used to resolve the module names, otherwise typescript's default module resolution
     */
    resolveModuleNames'
      QuestionToken
      Parameter
        Identifier: 'moduleNames'
        ArrayType
          StringKeyword
      Parameter
        Identifier: ' containingFile'
        StringKeyword
      Parameter
        Identifier: ' reusedNames'
        UnionType
          ArrayType
            StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' redirectedReference'
        UnionType
          TypeReference
            Identifier: ' ResolvedProjectReference'
          UndefinedKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: ' containingSourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'ResolvedModule'
            UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * @deprecated supply resolveTypeReferenceDirectiveReferences instead for resolution that can handle newer resolution modes like nodenext
     *
     * If provided, used to resolve type reference directives, otherwise typescript's default resolution
     */
    resolveTypeReferenceDirectives'
      QuestionToken
      Parameter
        Identifier: 'typeReferenceDirectiveNames'
        UnionType
          ArrayType
            StringKeyword
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' FileReference'
      Parameter
        Identifier: ' containingFile'
        StringKeyword
      Parameter
        Identifier: ' redirectedReference'
        UnionType
          TypeReference
            Identifier: ' ResolvedProjectReference'
          UndefinedKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: ' containingFileMode'
        QuestionToken
        TypeReference
          Identifier: ' ResolutionMode'
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'ResolvedTypeReferenceDirective'
            UndefinedKeyword
    MethodSignature
      Identifier: '
    resolveModuleNameLiterals'
      QuestionToken
      Parameter
        Identifier: 'moduleLiterals'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' StringLiteralLike'
      Parameter
        Identifier: ' containingFile'
        StringKeyword
      Parameter
        Identifier: ' redirectedReference'
        UnionType
          TypeReference
            Identifier: ' ResolvedProjectReference'
          UndefinedKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: ' containingSourceFile'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' reusedNames'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' StringLiteralLike'
          UndefinedKeyword
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ResolvedModuleWithFailedLookupLocations'
    MethodSignature
      Identifier: '
    resolveTypeReferenceDirectiveReferences'
      QuestionToken
      TypeParameter
        Identifier: 'T'
        UnionType
          TypeReference
            Identifier: ' FileReference'
          StringKeyword
      Parameter
        Identifier: 'typeDirectiveReferences'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' T'
      Parameter
        Identifier: ' containingFile'
        StringKeyword
      Parameter
        Identifier: ' redirectedReference'
        UnionType
          TypeReference
            Identifier: ' ResolvedProjectReference'
          UndefinedKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: ' containingSourceFile'
        UnionType
          TypeReference
            Identifier: ' SourceFile'
          UndefinedKeyword
      Parameter
        Identifier: ' reusedNames'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' T'
          UndefinedKeyword
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ResolvedTypeReferenceDirectiveWithFailedLookupLocations'
    MethodSignature
      Identifier: '
    /** @internal */
    resolveLibrary'
      QuestionToken
      Parameter
        Identifier: 'libraryName'
        StringKeyword
      Parameter
        Identifier: ' resolveFrom'
        StringKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: ' libFileName'
        StringKeyword
      TypeReference
        Identifier: ' ResolvedModuleWithFailedLookupLocations'
    MethodSignature
      Identifier: '
    /**
     * If provided along with custom resolveLibrary, used to determine if we should redo library resolutions
     * @internal
     */
    hasInvalidatedLibResolutions'
      QuestionToken
      Parameter
        Identifier: 'libFileName'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** If provided along with custom resolveModuleNames or resolveTypeReferenceDirectives, used to determine if unchanged file path needs to re-resolve modules/type reference directives */
    hasInvalidatedResolutions'
      QuestionToken
      Parameter
        Identifier: 'filePath'
        TypeReference
          Identifier: ' Path'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the module resolution cache used by a provided `resolveModuleNames` implementation so that any non-name module resolution operations (eg, package.json lookup) can reuse it
     */
    getModuleResolutionCache'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' ModuleResolutionCache'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    jsDocParsingMode'
      QuestionToken
      TypeReference
        Identifier: ' JSDocParsingMode'
    MethodSignature
      Identifier: '
    /** @internal */
    createDirectory'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    writeFile'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      Parameter
        Identifier: ' data'
        StringKeyword
      Parameter
        Identifier: ' writeByteOrderMark'
        QuestionToken
        BooleanKeyword
      VoidKeyword
    PropertySignature
      Identifier: '
    /** @internal */
    storeSignatureInfo'
      QuestionToken
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    now'
      QuestionToken
      TypeReference
        Identifier: ' Date'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WatchCompilerHost'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ProgramHost'
        TypeReference
          Identifier: 'T'
      ExpressionWithTypeArguments
        Identifier: ' WatchHost'
    MethodSignature
      Identifier: '
    /** Instead of using output d.ts file from project reference, use its source file */
    useSourceOfProjectReferenceRedirect'
      QuestionToken
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** If provided, use this method to get parsed command lines for referenced projects */
    getParsedCommandLine'
      QuestionToken
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' ParsedCommandLine'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** If provided, callback to invoke after every new program creation */
    afterProgramCreate'
      QuestionToken
      Parameter
        Identifier: 'program'
        TypeReference
          Identifier: ' T'
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WatchCompilerHostOfFilesAndCompilerOptions'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' WatchCompilerHost'
        TypeReference
          Identifier: 'T'
    PropertySignature
      Identifier: '
    /** root files to use to generate program */
    rootFiles'
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    /** Compiler options */
    options'
      TypeReference
        Identifier: ' CompilerOptions'
    PropertySignature
      Identifier: '
    watchOptions'
      QuestionToken
      TypeReference
        Identifier: ' WatchOptions'
    PropertySignature
      Identifier: '
    /** Project References */
    projectReferences'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ProjectReference'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WatchCompilerHostOfConfigFile'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' WatchCompilerHost'
        TypeReference
          Identifier: 'T'
      ExpressionWithTypeArguments
        Identifier: ' ConfigFileDiagnosticsReporter'
    PropertySignature
      Identifier: '
    /** Name of the config file to compile */
    configFileName'
      StringKeyword
    PropertySignature
      Identifier: '
    /** Options to extend */
    optionsToExtend'
      QuestionToken
      TypeReference
        Identifier: ' CompilerOptions'
    PropertySignature
      Identifier: '
    watchOptionsToExtend'
      QuestionToken
      TypeReference
        Identifier: ' WatchOptions'
    PropertySignature
      Identifier: '
    extraFileExtensions'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' FileExtensionInfo'
    MethodSignature
      Identifier: '
    /**
     * Used to generate source file names from the config file and its include, exclude, files rules
     * and also to cache the directory stucture
     */
    readDirectory'
      Parameter
        Identifier: 'path'
        StringKeyword
      Parameter
        Identifier: ' extensions'
        QuestionToken
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' exclude'
        QuestionToken
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' include'
        QuestionToken
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' depth'
        QuestionToken
        NumberKeyword
      ArrayType
        StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WatchCompilerHostOfConfigFile'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' WatchCompilerHost'
        TypeReference
          Identifier: 'T'
    PropertySignature
      Identifier: '
    configFileParsingResult'
      QuestionToken
      TypeReference
        Identifier: ' ParsedCommandLine'
    PropertySignature
      Identifier: '
    extendedConfigCache'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' ExtendedConfigCacheEntry'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Watch'
    TypeParameter
      Identifier: 'T'
    MethodSignature
      Identifier: '
    /** Synchronize with host and get updated program */
    getProgram'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Gets the existing program without synchronizing with changes on host
     *
     * @internal
     */
    getCurrentProgram'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /** Closes the watch */
    close'
      VoidKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    getResolutionCache'
      TypeReference
        Identifier: ' ResolutionCache'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WatchOfConfigFile'
    TypeParameter
      Identifier: 'T'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Watch'
        TypeReference
          Identifier: 'T'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WatchOfFilesAndCompilerOptions'
    TypeParameter
      Identifier: 'T'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Watch'
        TypeReference
          Identifier: 'T'
    MethodSignature
      Identifier: '
    /** Updates the root files in the program, only if this is not config file compilation */
    updateRootFileNames'
      Parameter
        Identifier: 'fileNames'
        ArrayType
          StringKeyword
      VoidKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createWatchCompilerHost'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
    Parameter
      Identifier: 'configFileName'
      StringKeyword
    Parameter
      Identifier: ' optionsToExtend'
      UnionType
        TypeReference
          Identifier: ' CompilerOptions'
        UndefinedKeyword
    Parameter
      Identifier: ' system'
      TypeReference
        Identifier: ' System'
    Parameter
      Identifier: ' createProgram'
      QuestionToken
      TypeReference
        Identifier: ' CreateProgram'
        TypeReference
          Identifier: 'T'
    Parameter
      Identifier: ' reportDiagnostic'
      QuestionToken
      TypeReference
        Identifier: ' DiagnosticReporter'
    Parameter
      Identifier: ' reportWatchStatus'
      QuestionToken
      TypeReference
        Identifier: ' WatchStatusReporter'
    Parameter
      Identifier: ' watchOptionsToExtend'
      QuestionToken
      TypeReference
        Identifier: ' WatchOptions'
    Parameter
      Identifier: ' extraFileExtensions'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' FileExtensionInfo'
    TypeReference
      Identifier: ' WatchCompilerHostOfConfigFile'
      TypeReference
        Identifier: 'T'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createWatchCompilerHost'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
    Parameter
      Identifier: 'rootFiles'
      ArrayType
        StringKeyword
    Parameter
      Identifier: ' options'
      TypeReference
        Identifier: ' CompilerOptions'
    Parameter
      Identifier: ' system'
      TypeReference
        Identifier: ' System'
    Parameter
      Identifier: ' createProgram'
      QuestionToken
      TypeReference
        Identifier: ' CreateProgram'
        TypeReference
          Identifier: 'T'
    Parameter
      Identifier: ' reportDiagnostic'
      QuestionToken
      TypeReference
        Identifier: ' DiagnosticReporter'
    Parameter
      Identifier: ' reportWatchStatus'
      QuestionToken
      TypeReference
        Identifier: ' WatchStatusReporter'
    Parameter
      Identifier: ' projectReferences'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ProjectReference'
    Parameter
      Identifier: ' watchOptions'
      QuestionToken
      TypeReference
        Identifier: ' WatchOptions'
    TypeReference
      Identifier: ' WatchCompilerHostOfFilesAndCompilerOptions'
      TypeReference
        Identifier: 'T'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createWatchProgram'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
    Parameter
      Identifier: 'host'
      TypeReference
        Identifier: ' WatchCompilerHostOfFilesAndCompilerOptions'
        TypeReference
          Identifier: 'T'
    TypeReference
      Identifier: ' WatchOfFilesAndCompilerOptions'
      TypeReference
        Identifier: 'T'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createWatchProgram'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' BuilderProgram'
    Parameter
      Identifier: 'host'
      TypeReference
        Identifier: ' WatchCompilerHostOfConfigFile'
        TypeReference
          Identifier: 'T'
    TypeReference
      Identifier: ' WatchOfConfigFile'
      TypeReference
        Identifier: 'T'
