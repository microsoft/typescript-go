SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportEqualsDeclaration
        Identifier: ' path'
        ExternalModuleReference
          StringLiteral
      ExportAssignment
        Identifier: ' path'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportEqualsDeclaration
        Identifier: ' path'
        ExternalModuleReference
          StringLiteral
      ExportAssignment
        Identifier: ' path'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ModuleDeclaration
        Identifier: ' path'
        ModuleBlock
          InterfaceDeclaration
            Identifier: ' ParsedPath'
            PropertySignature
              Identifier: '
            /**
             * The root of the path such as '/' or 'c:\'
             */
            root'
              StringKeyword
            PropertySignature
              Identifier: '
            /**
             * The full directory path such as '/home/user/dir' or 'c:\path\dir'
             */
            dir'
              StringKeyword
            PropertySignature
              Identifier: '
            /**
             * The file name including extension (if any) such as 'index.html'
             */
            base'
              StringKeyword
            PropertySignature
              Identifier: '
            /**
             * The file extension (if any) such as '.html'
             */
            ext'
              StringKeyword
            PropertySignature
              Identifier: '
            /**
             * The file name without extension (if any) such as 'index'
             */
            name'
              StringKeyword
          InterfaceDeclaration
            Identifier: ' FormatInputPathObject'
            PropertySignature
              Identifier: '
            /**
             * The root of the path such as '/' or 'c:\'
             */
            root'
              QuestionToken
              UnionType
                StringKeyword
                UndefinedKeyword
            PropertySignature
              Identifier: '
            /**
             * The full directory path such as '/home/user/dir' or 'c:\path\dir'
             */
            dir'
              QuestionToken
              UnionType
                StringKeyword
                UndefinedKeyword
            PropertySignature
              Identifier: '
            /**
             * The file name including extension (if any) such as 'index.html'
             */
            base'
              QuestionToken
              UnionType
                StringKeyword
                UndefinedKeyword
            PropertySignature
              Identifier: '
            /**
             * The file extension (if any) such as '.html'
             */
            ext'
              QuestionToken
              UnionType
                StringKeyword
                UndefinedKeyword
            PropertySignature
              Identifier: '
            /**
             * The file name without extension (if any) such as 'index'
             */
            name'
              QuestionToken
              UnionType
                StringKeyword
                UndefinedKeyword
          InterfaceDeclaration
            Identifier: ' PlatformPath'
            MethodSignature
              Identifier: '
            /**
             * Normalize a string path, reducing '..' and '.' parts.
             * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.
             *
             * @param path string path to normalize.
             * @throws {TypeError} if `path` is not a string.
             */
            normalize'
              Parameter
                Identifier: 'path'
                StringKeyword
              StringKeyword
            MethodSignature
              Identifier: '
            /**
             * Join all arguments together and normalize the resulting path.
             *
             * @param paths paths to join.
             * @throws {TypeError} if any of the path segments is not a string.
             */
            join'
              Parameter
                DotDotDotToken
                Identifier: 'paths'
                ArrayType
                  StringKeyword
              StringKeyword
            MethodSignature
              Identifier: '
            /**
             * The right-most parameter is considered {to}. Other parameters are considered an array of {from}.
             *
             * Starting from leftmost {from} parameter, resolves {to} to an absolute path.
             *
             * If {to} isn't already absolute, {from} arguments are prepended in right to left order,
             * until an absolute path is found. If after using all {from} paths still no absolute path is found,
             * the current working directory is used as well. The resulting path is normalized,
             * and trailing slashes are removed unless the path gets resolved to the root directory.
             *
             * @param paths A sequence of paths or path segments.
             * @throws {TypeError} if any of the arguments is not a string.
             */
            resolve'
              Parameter
                DotDotDotToken
                Identifier: 'paths'
                ArrayType
                  StringKeyword
              StringKeyword
            MethodSignature
              Identifier: '
            /**
             * The `path.matchesGlob()` method determines if `path` matches the `pattern`.
             * @param path The path to glob-match against.
             * @param pattern The glob to check the path against.
             * @returns Whether or not the `path` matched the `pattern`.
             * @throws {TypeError} if `path` or `pattern` are not strings.
             * @since v22.5.0
             */
            matchesGlob'
              Parameter
                Identifier: 'path'
                StringKeyword
              Parameter
                Identifier: ' pattern'
                StringKeyword
              BooleanKeyword
            MethodSignature
              Identifier: '
            /**
             * Determines whether {path} is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory.
             *
             * If the given {path} is a zero-length string, `false` will be returned.
             *
             * @param path path to test.
             * @throws {TypeError} if `path` is not a string.
             */
            isAbsolute'
              Parameter
                Identifier: 'path'
                StringKeyword
              BooleanKeyword
            MethodSignature
              Identifier: '
            /**
             * Solve the relative path from {from} to {to} based on the current working directory.
             * At times we have two absolute paths, and we need to derive the relative path from one to the other. This is actually the reverse transform of path.resolve.
             *
             * @throws {TypeError} if either `from` or `to` is not a string.
             */
            relative'
              Parameter
                Identifier: 'from'
                StringKeyword
              Parameter
                Identifier: ' to'
                StringKeyword
              StringKeyword
            MethodSignature
              Identifier: '
            /**
             * Return the directory name of a path. Similar to the Unix dirname command.
             *
             * @param path the path to evaluate.
             * @throws {TypeError} if `path` is not a string.
             */
            dirname'
              Parameter
                Identifier: 'path'
                StringKeyword
              StringKeyword
            MethodSignature
              Identifier: '
            /**
             * Return the last portion of a path. Similar to the Unix basename command.
             * Often used to extract the file name from a fully qualified path.
             *
             * @param path the path to evaluate.
             * @param suffix optionally, an extension to remove from the result.
             * @throws {TypeError} if `path` is not a string or if `ext` is given and is not a string.
             */
            basename'
              Parameter
                Identifier: 'path'
                StringKeyword
              Parameter
                Identifier: ' suffix'
                QuestionToken
                StringKeyword
              StringKeyword
            MethodSignature
              Identifier: '
            /**
             * Return the extension of the path, from the last '.' to end of string in the last portion of the path.
             * If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string.
             *
             * @param path the path to evaluate.
             * @throws {TypeError} if `path` is not a string.
             */
            extname'
              Parameter
                Identifier: 'path'
                StringKeyword
              StringKeyword
            PropertySignature
              ReadonlyKeyword
              Identifier: ' sep'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
            PropertySignature
              ReadonlyKeyword
              Identifier: ' delimiter'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
            MethodSignature
              Identifier: '
            /**
             * Returns an object from a path string - the opposite of format().
             *
             * @param path path to evaluate.
             * @throws {TypeError} if `path` is not a string.
             */
            parse'
              Parameter
                Identifier: 'path'
                StringKeyword
              TypeReference
                Identifier: ' ParsedPath'
            MethodSignature
              Identifier: '
            /**
             * Returns a path string from an object - the opposite of parse().
             *
             * @param pathObject path to evaluate.
             */
            format'
              Parameter
                Identifier: 'pathObject'
                TypeReference
                  Identifier: ' FormatInputPathObject'
              StringKeyword
            MethodSignature
              Identifier: '
            /**
             * On Windows systems only, returns an equivalent namespace-prefixed path for the given path.
             * If path is not a string, path will be returned without modifications.
             * This method is meaningful only on Windows system.
             * On POSIX systems, the method is non-operational and always returns path without modifications.
             */
            toNamespacedPath'
              Parameter
                Identifier: 'path'
                StringKeyword
              StringKeyword
            PropertySignature
              ReadonlyKeyword
              Identifier: ' posix'
              TypeReference
                Identifier: ' PlatformPath'
            PropertySignature
              ReadonlyKeyword
              Identifier: ' win32'
              TypeReference
                Identifier: ' PlatformPath'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' path'
            TypeReference
              QualifiedName
                Identifier: ' path'
                Identifier: 'PlatformPath'
      ExportAssignment
        Identifier: ' path'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportEqualsDeclaration
        Identifier: ' path'
        ExternalModuleReference
          StringLiteral
      ExportAssignment
        Identifier: ' path'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportEqualsDeclaration
        Identifier: ' path'
        ExternalModuleReference
          StringLiteral
      ExportAssignment
        Identifier: ' path'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportEqualsDeclaration
        Identifier: ' path'
        ExternalModuleReference
          StringLiteral
      ExportAssignment
        Identifier: ' path'
