SourceFile
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' NaN'
        NumberKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Infinity'
        NumberKeyword
  FunctionDeclaration
    DeclareKeyword
    Identifier: ' eval'
    Parameter
      Identifier: 'x'
      StringKeyword
    AnyKeyword
  FunctionDeclaration
    DeclareKeyword
    Identifier: ' parseInt'
    Parameter
      Identifier: 'string'
      StringKeyword
    Parameter
      Identifier: ' radix'
      QuestionToken
      NumberKeyword
    NumberKeyword
  FunctionDeclaration
    DeclareKeyword
    Identifier: ' parseFloat'
    Parameter
      Identifier: 'string'
      StringKeyword
    NumberKeyword
  FunctionDeclaration
    DeclareKeyword
    Identifier: ' isNaN'
    Parameter
      Identifier: 'number'
      NumberKeyword
    BooleanKeyword
  FunctionDeclaration
    DeclareKeyword
    Identifier: ' isFinite'
    Parameter
      Identifier: 'number'
      NumberKeyword
    BooleanKeyword
  FunctionDeclaration
    DeclareKeyword
    Identifier: ' decodeURI'
    Parameter
      Identifier: 'encodedURI'
      StringKeyword
    StringKeyword
  FunctionDeclaration
    DeclareKeyword
    Identifier: ' decodeURIComponent'
    Parameter
      Identifier: 'encodedURIComponent'
      StringKeyword
    StringKeyword
  FunctionDeclaration
    DeclareKeyword
    Identifier: ' encodeURI'
    Parameter
      Identifier: 'uri'
      StringKeyword
    StringKeyword
  FunctionDeclaration
    DeclareKeyword
    Identifier: ' encodeURIComponent'
    Parameter
      Identifier: 'uriComponent'
      UnionType
        StringKeyword
        NumberKeyword
        BooleanKeyword
    StringKeyword
  FunctionDeclaration
    DeclareKeyword
    Identifier: ' escape'
    Parameter
      Identifier: 'string'
      StringKeyword
    StringKeyword
  FunctionDeclaration
    DeclareKeyword
    Identifier: ' unescape'
    Parameter
      Identifier: 'string'
      StringKeyword
    StringKeyword
  InterfaceDeclaration
    Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    /** Returns a string representation of an object. */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      SymbolKeyword
  TypeAliasDeclaration
    DeclareKeyword
    Identifier: ' PropertyKey'
    UnionType
      StringKeyword
      NumberKeyword
      SymbolKeyword
  InterfaceDeclaration
    Identifier: ' PropertyDescriptor'
    PropertySignature
      Identifier: '
    configurable'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    enumerable'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    value'
      QuestionToken
      AnyKeyword
    PropertySignature
      Identifier: '
    writable'
      QuestionToken
      BooleanKeyword
    MethodSignature
      Identifier: '
    get'
      QuestionToken
      AnyKeyword
    MethodSignature
      Identifier: '
    set'
      QuestionToken
      Parameter
        Identifier: 'v'
        AnyKeyword
      VoidKeyword
  InterfaceDeclaration
    Identifier: ' PropertyDescriptorMap'
    IndexSignature
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' PropertyKey'
      TypeReference
        Identifier: ' PropertyDescriptor'
  InterfaceDeclaration
    Identifier: ' Object'
    PropertySignature
      Identifier: '
    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */
    constructor'
      TypeReference
        Identifier: ' Function'
    MethodSignature
      Identifier: '

    /** Returns a string representation of an object. */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns a date converted to a string using the current locale. */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      TypeReference
        Identifier: ' Object'
    MethodSignature
      Identifier: '

    /**
     * Determines whether an object has a property with the specified name.
     * @param v A property name.
     */
    hasOwnProperty'
      Parameter
        Identifier: 'v'
        TypeReference
          Identifier: ' PropertyKey'
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Determines whether an object exists in another object's prototype chain.
     * @param v Another object whose prototype chain is to be checked.
     */
    isPrototypeOf'
      Parameter
        Identifier: 'v'
        TypeReference
          Identifier: ' Object'
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Determines whether a specified property is enumerable.
     * @param v A property name.
     */
    propertyIsEnumerable'
      Parameter
        Identifier: 'v'
        TypeReference
          Identifier: ' PropertyKey'
      BooleanKeyword
  InterfaceDeclaration
    Identifier: ' ObjectConstructor'
    ConstructSignature
      Parameter
        Identifier: 'value'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Object'
    CallSignature
      AnyKeyword
    CallSignature
      Parameter
        Identifier: 'value'
        AnyKeyword
      AnyKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Object'
    MethodSignature
      Identifier: '

    /**
     * Returns the prototype of an object.
     * @param o The object that references the prototype.
     */
    getPrototypeOf'
      Parameter
        Identifier: 'o'
        AnyKeyword
      AnyKeyword
    MethodSignature
      Identifier: '

    /**
     * Gets the own property descriptor of the specified object.
     * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.
     * @param o Object that contains the property.
     * @param p Name of the property.
     */
    getOwnPropertyDescriptor'
      Parameter
        Identifier: 'o'
        AnyKeyword
      Parameter
        Identifier: ' p'
        TypeReference
          Identifier: ' PropertyKey'
      UnionType
        TypeReference
          Identifier: ' PropertyDescriptor'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly
     * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.
     * @param o Object that contains the own properties.
     */
    getOwnPropertyNames'
      Parameter
        Identifier: 'o'
        AnyKeyword
      ArrayType
        StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Creates an object that has the specified prototype or that has null prototype.
     * @param o Object to use as a prototype. May be null.
     */
    create'
      Parameter
        Identifier: 'o'
        UnionType
          ObjectKeyword
          LiteralType
            NullKeyword
      AnyKeyword
    MethodSignature
      Identifier: '

    /**
     * Creates an object that has the specified prototype, and that optionally contains specified properties.
     * @param o Object to use as a prototype. May be null
     * @param properties JavaScript object that contains one or more property descriptors.
     */
    create'
      Parameter
        Identifier: 'o'
        UnionType
          ObjectKeyword
          LiteralType
            NullKeyword
      Parameter
        Identifier: ' properties'
        IntersectionType
          TypeReference
            Identifier: ' PropertyDescriptorMap'
          TypeReference
            Identifier: ' ThisType'
            AnyKeyword
      AnyKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds a property to an object, or modifies attributes of an existing property.
     * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.
     * @param p The property name.
     * @param attributes Descriptor for the property. It can be for a data property or an accessor property.
     */
    defineProperty'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'o'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' p'
        TypeReference
          Identifier: ' PropertyKey'
      Parameter
        Identifier: ' attributes'
        IntersectionType
          TypeReference
            Identifier: ' PropertyDescriptor'
          TypeReference
            Identifier: ' ThisType'
            AnyKeyword
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Adds one or more properties to an object, and/or modifies attributes of existing properties.
     * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.
     * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.
     */
    defineProperties'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'o'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' properties'
        IntersectionType
          TypeReference
            Identifier: ' PropertyDescriptorMap'
          TypeReference
            Identifier: ' ThisType'
            AnyKeyword
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.
     * @param o Object on which to lock the attributes.
     */
    seal'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'o'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
     * @param f Object on which to lock the attributes.
     */
    freeze'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' Function'
      Parameter
        Identifier: 'f'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
     * @param o Object on which to lock the attributes.
     */
    freeze'
      TypeParameter
        Identifier: 'T'
        TypeLiteral
          IndexSignature
            Parameter
              Identifier: 'idx'
              StringKeyword
            UnionType
              TypeReference
                Identifier: ' U'
              LiteralType
                NullKeyword
              UndefinedKeyword
              ObjectKeyword
      TypeParameter
        Identifier: ' U'
        UnionType
          StringKeyword
          BigIntKeyword
          NumberKeyword
          BooleanKeyword
          SymbolKeyword
      Parameter
        Identifier: 'o'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' Readonly'
        TypeReference
          Identifier: 'T'
    MethodSignature
      Identifier: '

    /**
     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
     * @param o Object on which to lock the attributes.
     */
    freeze'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'o'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' Readonly'
        TypeReference
          Identifier: 'T'
    MethodSignature
      Identifier: '

    /**
     * Prevents the addition of new properties to an object.
     * @param o Object to make non-extensible.
     */
    preventExtensions'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'o'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.
     * @param o Object to test.
     */
    isSealed'
      Parameter
        Identifier: 'o'
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.
     * @param o Object to test.
     */
    isFrozen'
      Parameter
        Identifier: 'o'
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a value that indicates whether new properties can be added to an object.
     * @param o Object to test.
     */
    isExtensible'
      Parameter
        Identifier: 'o'
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the names of the enumerable string properties and methods of an object.
     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
    keys'
      Parameter
        Identifier: 'o'
        ObjectKeyword
      ArrayType
        StringKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Object'
        TypeReference
          Identifier: ' ObjectConstructor'
  InterfaceDeclaration
    Identifier: ' Function'
    MethodSignature
      Identifier: '
    /**
     * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.
     * @param thisArg The object to be used as the this object.
     * @param argArray A set of arguments to be passed to the function.
     */
    apply'
      Parameter
        Identifier: 'this'
        TypeReference
          Identifier: ' Function'
      Parameter
        Identifier: ' thisArg'
        AnyKeyword
      Parameter
        Identifier: ' argArray'
        QuestionToken
        AnyKeyword
      AnyKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls a method of an object, substituting another object for the current object.
     * @param thisArg The object to be used as the current object.
     * @param argArray A list of arguments to be passed to the method.
     */
    call'
      Parameter
        Identifier: 'this'
        TypeReference
          Identifier: ' Function'
      Parameter
        Identifier: ' thisArg'
        AnyKeyword
      Parameter
        DotDotDotToken
        Identifier: 'argArray'
        ArrayType
          AnyKeyword
      AnyKeyword
    MethodSignature
      Identifier: '

    /**
     * For a given function, creates a bound function that has the same body as the original function.
     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.
     * @param thisArg An object to which the this keyword can refer inside the new function.
     * @param argArray A list of arguments to be passed to the new function.
     */
    bind'
      Parameter
        Identifier: 'this'
        TypeReference
          Identifier: ' Function'
      Parameter
        Identifier: ' thisArg'
        AnyKeyword
      Parameter
        DotDotDotToken
        Identifier: 'argArray'
        ArrayType
          AnyKeyword
      AnyKeyword
    MethodSignature
      Identifier: '

    /** Returns a string representation of a function. */
    toString'
      StringKeyword
    PropertySignature
      Identifier: '

    prototype'
      AnyKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    PropertySignature
      Identifier: '

    // Non-standard extensions
    arguments'
      AnyKeyword
    PropertySignature
      Identifier: '
    caller'
      TypeReference
        Identifier: ' Function'
  InterfaceDeclaration
    Identifier: ' FunctionConstructor'
    ConstructSignature
      Parameter
        DotDotDotToken
        Identifier: 'args'
        ArrayType
          StringKeyword
      TypeReference
        Identifier: ' Function'
    CallSignature
      Parameter
        DotDotDotToken
        Identifier: 'args'
        ArrayType
          StringKeyword
      TypeReference
        Identifier: ' Function'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Function'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Function'
        TypeReference
          Identifier: ' FunctionConstructor'
  TypeAliasDeclaration
    Identifier: ' ThisParameterType'
    TypeParameter
      Identifier: 'T'
    ConditionalType
      TypeReference
        Identifier: ' T'
      FunctionType
        Parameter
          Identifier: 'this'
          InferType
            TypeParameter
              Identifier: ' U'
        Parameter
          DotDotDotToken
          Identifier: 'args'
          NeverKeyword
        AnyKeyword
      TypeReference
        Identifier: ' U'
      UnknownKeyword
  TypeAliasDeclaration
    Identifier: ' OmitThisParameter'
    TypeParameter
      Identifier: 'T'
    ConditionalType
      UnknownKeyword
      TypeReference
        Identifier: ' ThisParameterType'
        TypeReference
          Identifier: 'T'
      TypeReference
        Identifier: ' T'
      ConditionalType
        TypeReference
          Identifier: ' T'
        FunctionType
          Parameter
            DotDotDotToken
            Identifier: 'args'
            InferType
              TypeParameter
                Identifier: ' A'
          InferType
            TypeParameter
              Identifier: ' R'
        FunctionType
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' A'
          TypeReference
            Identifier: ' R'
        TypeReference
          Identifier: ' T'
  InterfaceDeclaration
    Identifier: ' CallableFunction'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Function'
    MethodSignature
      Identifier: '
    /**
     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.
     * @param thisArg The object to be used as the this object.
     */
    apply'
      TypeParameter
        Identifier: 'T'
      TypeParameter
        Identifier: ' R'
      Parameter
        Identifier: 'this'
        FunctionType
          Parameter
            Identifier: 'this'
            TypeReference
              Identifier: ' T'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '

    /**
     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.
     * @param thisArg The object to be used as the this object.
     * @param args An array of argument values to be passed to the function.
     */
    apply'
      TypeParameter
        Identifier: 'T'
      TypeParameter
        Identifier: ' A'
        ArrayType
          AnyKeyword
      TypeParameter
        Identifier: ' R'
      Parameter
        Identifier: 'this'
        FunctionType
          Parameter
            Identifier: 'this'
            TypeReference
              Identifier: ' T'
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' A'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' args'
        TypeReference
          Identifier: ' A'
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '

    /**
     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.
     * @param thisArg The object to be used as the this object.
     * @param args Argument values to be passed to the function.
     */
    call'
      TypeParameter
        Identifier: 'T'
      TypeParameter
        Identifier: ' A'
        ArrayType
          AnyKeyword
      TypeParameter
        Identifier: ' R'
      Parameter
        Identifier: 'this'
        FunctionType
          Parameter
            Identifier: 'this'
            TypeReference
              Identifier: ' T'
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' A'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' T'
      Parameter
        DotDotDotToken
        Identifier: 'args'
        TypeReference
          Identifier: ' A'
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '

    /**
     * For a given function, creates a bound function that has the same body as the original function.
     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.
     * @param thisArg The object to be used as the this object.
     */
    bind'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'this'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' ThisParameterType'
          TypeReference
            Identifier: 'T'
      TypeReference
        Identifier: ' OmitThisParameter'
        TypeReference
          Identifier: 'T'
    MethodSignature
      Identifier: '

    /**
     * For a given function, creates a bound function that has the same body as the original function.
     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.
     * @param thisArg The object to be used as the this object.
     * @param args Arguments to bind to the parameters of the function.
     */
    bind'
      TypeParameter
        Identifier: 'T'
      TypeParameter
        Identifier: ' A'
        ArrayType
          AnyKeyword
      TypeParameter
        Identifier: ' B'
        ArrayType
          AnyKeyword
      TypeParameter
        Identifier: ' R'
      Parameter
        Identifier: 'this'
        FunctionType
          Parameter
            Identifier: 'this'
            TypeReference
              Identifier: ' T'
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TupleType
              RestType
                TypeReference
                  Identifier: 'A'
              RestType
                TypeReference
                  Identifier: 'B'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' T'
      Parameter
        DotDotDotToken
        Identifier: 'args'
        TypeReference
          Identifier: ' A'
      FunctionType
        Parameter
          DotDotDotToken
          Identifier: 'args'
          TypeReference
            Identifier: ' B'
        TypeReference
          Identifier: ' R'
  InterfaceDeclaration
    Identifier: ' NewableFunction'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Function'
    MethodSignature
      Identifier: '
    /**
     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.
     * @param thisArg The object to be used as the this object.
     */
    apply'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'this'
        ConstructorType
          TypeReference
            Identifier: ' T'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' T'
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.
     * @param thisArg The object to be used as the this object.
     * @param args An array of argument values to be passed to the function.
     */
    apply'
      TypeParameter
        Identifier: 'T'
      TypeParameter
        Identifier: ' A'
        ArrayType
          AnyKeyword
      Parameter
        Identifier: 'this'
        ConstructorType
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' A'
          TypeReference
            Identifier: ' T'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' args'
        TypeReference
          Identifier: ' A'
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.
     * @param thisArg The object to be used as the this object.
     * @param args Argument values to be passed to the function.
     */
    call'
      TypeParameter
        Identifier: 'T'
      TypeParameter
        Identifier: ' A'
        ArrayType
          AnyKeyword
      Parameter
        Identifier: 'this'
        ConstructorType
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' A'
          TypeReference
            Identifier: ' T'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' T'
      Parameter
        DotDotDotToken
        Identifier: 'args'
        TypeReference
          Identifier: ' A'
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * For a given function, creates a bound function that has the same body as the original function.
     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.
     * @param thisArg The object to be used as the this object.
     */
    bind'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'this'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' thisArg'
        AnyKeyword
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * For a given function, creates a bound function that has the same body as the original function.
     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.
     * @param thisArg The object to be used as the this object.
     * @param args Arguments to bind to the parameters of the function.
     */
    bind'
      TypeParameter
        Identifier: 'A'
        ArrayType
          AnyKeyword
      TypeParameter
        Identifier: ' B'
        ArrayType
          AnyKeyword
      TypeParameter
        Identifier: ' R'
      Parameter
        Identifier: 'this'
        ConstructorType
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TupleType
              RestType
                TypeReference
                  Identifier: 'A'
              RestType
                TypeReference
                  Identifier: 'B'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' thisArg'
        AnyKeyword
      Parameter
        DotDotDotToken
        Identifier: 'args'
        TypeReference
          Identifier: ' A'
      ConstructorType
        Parameter
          DotDotDotToken
          Identifier: 'args'
          TypeReference
            Identifier: ' B'
        TypeReference
          Identifier: ' R'
  InterfaceDeclaration
    Identifier: ' IArguments'
    IndexSignature
      Parameter
        Identifier: 'index'
        NumberKeyword
      AnyKeyword
    PropertySignature
      Identifier: '
    length'
      NumberKeyword
    PropertySignature
      Identifier: '
    callee'
      TypeReference
        Identifier: ' Function'
  InterfaceDeclaration
    Identifier: ' String'
    MethodSignature
      Identifier: '
    /** Returns a string representation of a string. */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the character at the specified index.
     * @param pos The zero-based index of the desired character.
     */
    charAt'
      Parameter
        Identifier: 'pos'
        NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the Unicode value of the character at the specified location.
     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.
     */
    charCodeAt'
      Parameter
        Identifier: 'index'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string that contains the concatenation of two or more strings.
     * @param strings The strings to append to the end of the string.
     */
    concat'
      Parameter
        DotDotDotToken
        Identifier: 'strings'
        ArrayType
          StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the position of the first occurrence of a substring.
     * @param searchString The substring to search for in the string
     * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.
     */
    indexOf'
      Parameter
        Identifier: 'searchString'
        StringKeyword
      Parameter
        Identifier: ' position'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the last occurrence of a substring in the string.
     * @param searchString The substring to search for.
     * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchString'
        StringKeyword
      Parameter
        Identifier: ' position'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Determines whether two strings are equivalent in the current locale.
     * @param that String to compare to target string
     */
    localeCompare'
      Parameter
        Identifier: 'that'
        StringKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Matches a string with a regular expression, and returns an array containing the results of that search.
     * @param regexp A variable name or string literal containing the regular expression pattern and flags.
     */
    match'
      Parameter
        Identifier: 'regexp'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
      UnionType
        TypeReference
          Identifier: ' RegExpMatchArray'
        LiteralType
          NullKeyword
    MethodSignature
      Identifier: '

    /**
     * Replaces text in a string, using a regular expression or search string.
     * @param searchValue A string or regular expression to search for.
     * @param replaceValue A string containing the text to replace. When the {@linkcode searchValue} is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of {@linkcode searchValue} is replaced.
     */
    replace'
      Parameter
        Identifier: 'searchValue'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
      Parameter
        Identifier: ' replaceValue'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Replaces text in a string, using a regular expression or search string.
     * @param searchValue A string to search for.
     * @param replacer A function that returns the replacement text.
     */
    replace'
      Parameter
        Identifier: 'searchValue'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
      Parameter
        Identifier: ' replacer'
        FunctionType
          Parameter
            Identifier: 'substring'
            StringKeyword
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Finds the first substring match in a regular expression search.
     * @param regexp The regular expression pattern and applicable flags.
     */
    search'
      Parameter
        Identifier: 'regexp'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a section of a string.
     * @param start The index to the beginning of the specified portion of stringObj.
     * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.
     * If this value is not specified, the substring continues to the end of stringObj.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Split a string into substrings using the specified separator and return them as an array.
     * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.
     * @param limit A value used to limit the number of elements returned in the array.
     */
    split'
      Parameter
        Identifier: 'separator'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
      Parameter
        Identifier: ' limit'
        QuestionToken
        NumberKeyword
      ArrayType
        StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the substring at the specified location within a String object.
     * @param start The zero-based index number indicating the beginning of the substring.
     * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.
     * If end is omitted, the characters from start through the end of the original string are returned.
     */
    substring'
      Parameter
        Identifier: 'start'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /** Converts all the alphabetic characters in a string to lowercase. */
    toLowerCase'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */
    toLocaleLowerCase'
      Parameter
        Identifier: 'locales'
        QuestionToken
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /** Converts all the alphabetic characters in a string to uppercase. */
    toUpperCase'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */
    toLocaleUpperCase'
      Parameter
        Identifier: 'locales'
        QuestionToken
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /** Removes the leading and trailing white space and line terminator characters from a string. */
    trim'
      StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    MethodSignature
      Identifier: '

    // IE extensions
    /**
     * Gets a substring beginning at the specified location and having the specified length.
     * @deprecated A legacy feature for browser compatibility
     * @param from The starting position of the desired substring. The index of the first character in the string is zero.
     * @param length The number of characters to include in the returned substring.
     */
    substr'
      Parameter
        Identifier: 'from'
        NumberKeyword
      Parameter
        Identifier: ' length'
        QuestionToken
        NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      StringKeyword
    IndexSignature
      ReadonlyKeyword
      Parameter
        Identifier: 'index'
        NumberKeyword
      StringKeyword
  InterfaceDeclaration
    Identifier: ' StringConstructor'
    ConstructSignature
      Parameter
        Identifier: 'value'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' String'
    CallSignature
      Parameter
        Identifier: 'value'
        QuestionToken
        AnyKeyword
      StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' String'
    MethodSignature
      Identifier: '
    fromCharCode'
      Parameter
        DotDotDotToken
        Identifier: 'codes'
        ArrayType
          NumberKeyword
      StringKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' String'
        TypeReference
          Identifier: ' StringConstructor'
  InterfaceDeclaration
    Identifier: ' Boolean'
    MethodSignature
      Identifier: '
    /** Returns the primitive value of the specified object. */
    valueOf'
      BooleanKeyword
  InterfaceDeclaration
    Identifier: ' BooleanConstructor'
    ConstructSignature
      Parameter
        Identifier: 'value'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Boolean'
    CallSignature
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'value'
        QuestionToken
        TypeReference
          Identifier: ' T'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Boolean'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Boolean'
        TypeReference
          Identifier: ' BooleanConstructor'
  InterfaceDeclaration
    Identifier: ' Number'
    MethodSignature
      Identifier: '
    /**
     * Returns a string representation of an object.
     * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.
     */
    toString'
      Parameter
        Identifier: 'radix'
        QuestionToken
        NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string representing a number in fixed-point notation.
     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
     */
    toFixed'
      Parameter
        Identifier: 'fractionDigits'
        QuestionToken
        NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string containing a number represented in exponential notation.
     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
     */
    toExponential'
      Parameter
        Identifier: 'fractionDigits'
        QuestionToken
        NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.
     * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.
     */
    toPrecision'
      Parameter
        Identifier: 'precision'
        QuestionToken
        NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' NumberConstructor'
    ConstructSignature
      Parameter
        Identifier: 'value'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Number'
    CallSignature
      Parameter
        Identifier: 'value'
        QuestionToken
        AnyKeyword
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Number'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' MAX_VALUE'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' MIN_VALUE'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' NaN'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' NEGATIVE_INFINITY'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' POSITIVE_INFINITY'
      NumberKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Number'
        TypeReference
          Identifier: ' NumberConstructor'
  InterfaceDeclaration
    Identifier: ' TemplateStringsArray'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ReadonlyArray'
        StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' raw'
      TypeOperator
        ArrayType
          StringKeyword
  InterfaceDeclaration
    Identifier: ' ImportMeta'
  InterfaceDeclaration
    Identifier: ' ImportCallOptions'
    PropertySignature
      Identifier: '
    /** @deprecated*/ assert'
      QuestionToken
      TypeReference
        Identifier: ' ImportAssertions'
    PropertySignature
      Identifier: '
    with'
      QuestionToken
      TypeReference
        Identifier: ' ImportAttributes'
  InterfaceDeclaration
    Identifier: ' ImportAssertions'
    IndexSignature
      Parameter
        Identifier: 'key'
        StringKeyword
      StringKeyword
  InterfaceDeclaration
    Identifier: ' ImportAttributes'
    IndexSignature
      Parameter
        Identifier: 'key'
        StringKeyword
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Math'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' E'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' LN10'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' LN2'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' LOG2E'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' LOG10E'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' PI'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' SQRT1_2'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' SQRT2'
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the absolute value of a number (the value without regard to whether it is positive or negative).
     * For example, the absolute value of -5 is the same as the absolute value of 5.
     * @param x A numeric expression for which the absolute value is needed.
     */
    abs'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the arc cosine (or inverse cosine) of a number.
     * @param x A numeric expression.
     */
    acos'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the arcsine of a number.
     * @param x A numeric expression.
     */
    asin'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the arctangent of a number.
     * @param x A numeric expression for which the arctangent is needed.
     */
    atan'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the angle (in radians) from the X axis to a point.
     * @param y A numeric expression representing the cartesian y-coordinate.
     * @param x A numeric expression representing the cartesian x-coordinate.
     */
    atan2'
      Parameter
        Identifier: 'y'
        NumberKeyword
      Parameter
        Identifier: ' x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the smallest integer greater than or equal to its numeric argument.
     * @param x A numeric expression.
     */
    ceil'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the cosine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
    cos'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns e (the base of natural logarithms) raised to a power.
     * @param x A numeric expression representing the power of e.
     */
    exp'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the greatest integer less than or equal to its numeric argument.
     * @param x A numeric expression.
     */
    floor'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the natural logarithm (base e) of a number.
     * @param x A numeric expression.
     */
    log'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the larger of a set of supplied numeric expressions.
     * @param values Numeric expressions to be evaluated.
     */
    max'
      Parameter
        DotDotDotToken
        Identifier: 'values'
        ArrayType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the smaller of a set of supplied numeric expressions.
     * @param values Numeric expressions to be evaluated.
     */
    min'
      Parameter
        DotDotDotToken
        Identifier: 'values'
        ArrayType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the value of a base expression taken to a specified power.
     * @param x The base value of the expression.
     * @param y The exponent value of the expression.
     */
    pow'
      Parameter
        Identifier: 'x'
        NumberKeyword
      Parameter
        Identifier: ' y'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Returns a pseudorandom number between 0 and 1. */
    random'
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns a supplied numeric expression rounded to the nearest integer.
     * @param x The value to be rounded to the nearest integer.
     */
    round'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the sine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
    sin'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the square root of a number.
     * @param x A numeric expression.
     */
    sqrt'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the tangent of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
    tan'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Math'
        TypeReference
          Identifier: ' Math'
  InterfaceDeclaration
    Identifier: ' Date'
    MethodSignature
      Identifier: '
    /** Returns a string representation of a date. The format of the string depends on the locale. */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '
    /** Returns a date as a string value. */
    toDateString'
      StringKeyword
    MethodSignature
      Identifier: '
    /** Returns a time as a string value. */
    toTimeString'
      StringKeyword
    MethodSignature
      Identifier: '
    /** Returns a value as a string value appropriate to the host environment's current locale. */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '
    /** Returns a date as a string value appropriate to the host environment's current locale. */
    toLocaleDateString'
      StringKeyword
    MethodSignature
      Identifier: '
    /** Returns a time as a string value appropriate to the host environment's current locale. */
    toLocaleTimeString'
      StringKeyword
    MethodSignature
      Identifier: '
    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */
    valueOf'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */
    getTime'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the year, using local time. */
    getFullYear'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the year using Universal Coordinated Time (UTC). */
    getUTCFullYear'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the month, using local time. */
    getMonth'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */
    getUTCMonth'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the day-of-the-month, using local time. */
    getDate'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */
    getUTCDate'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the day of the week, using local time. */
    getDay'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the day of the week using Universal Coordinated Time (UTC). */
    getUTCDay'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the hours in a date, using local time. */
    getHours'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */
    getUTCHours'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the minutes of a Date object, using local time. */
    getMinutes'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */
    getUTCMinutes'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the seconds of a Date object, using local time. */
    getSeconds'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */
    getUTCSeconds'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the milliseconds of a Date, using local time. */
    getMilliseconds'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */
    getUTCMilliseconds'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Gets the difference in minutes between Universal Coordinated Time (UTC) and the time on the local computer. */
    getTimezoneOffset'
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the date and time value in the Date object.
     * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.
     */
    setTime'
      Parameter
        Identifier: 'time'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the milliseconds value in the Date object using local time.
     * @param ms A numeric value equal to the millisecond value.
     */
    setMilliseconds'
      Parameter
        Identifier: 'ms'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).
     * @param ms A numeric value equal to the millisecond value.
     */
    setUTCMilliseconds'
      Parameter
        Identifier: 'ms'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Sets the seconds value in the Date object using local time.
     * @param sec A numeric value equal to the seconds value.
     * @param ms A numeric value equal to the milliseconds value.
     */
    setSeconds'
      Parameter
        Identifier: 'sec'
        NumberKeyword
      Parameter
        Identifier: ' ms'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).
     * @param sec A numeric value equal to the seconds value.
     * @param ms A numeric value equal to the milliseconds value.
     */
    setUTCSeconds'
      Parameter
        Identifier: 'sec'
        NumberKeyword
      Parameter
        Identifier: ' ms'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the minutes value in the Date object using local time.
     * @param min A numeric value equal to the minutes value.
     * @param sec A numeric value equal to the seconds value.
     * @param ms A numeric value equal to the milliseconds value.
     */
    setMinutes'
      Parameter
        Identifier: 'min'
        NumberKeyword
      Parameter
        Identifier: ' sec'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' ms'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).
     * @param min A numeric value equal to the minutes value.
     * @param sec A numeric value equal to the seconds value.
     * @param ms A numeric value equal to the milliseconds value.
     */
    setUTCMinutes'
      Parameter
        Identifier: 'min'
        NumberKeyword
      Parameter
        Identifier: ' sec'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' ms'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the hour value in the Date object using local time.
     * @param hours A numeric value equal to the hours value.
     * @param min A numeric value equal to the minutes value.
     * @param sec A numeric value equal to the seconds value.
     * @param ms A numeric value equal to the milliseconds value.
     */
    setHours'
      Parameter
        Identifier: 'hours'
        NumberKeyword
      Parameter
        Identifier: ' min'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' sec'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' ms'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the hours value in the Date object using Universal Coordinated Time (UTC).
     * @param hours A numeric value equal to the hours value.
     * @param min A numeric value equal to the minutes value.
     * @param sec A numeric value equal to the seconds value.
     * @param ms A numeric value equal to the milliseconds value.
     */
    setUTCHours'
      Parameter
        Identifier: 'hours'
        NumberKeyword
      Parameter
        Identifier: ' min'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' sec'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' ms'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the numeric day-of-the-month value of the Date object using local time.
     * @param date A numeric value equal to the day of the month.
     */
    setDate'
      Parameter
        Identifier: 'date'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).
     * @param date A numeric value equal to the day of the month.
     */
    setUTCDate'
      Parameter
        Identifier: 'date'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the month value in the Date object using local time.
     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
     * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
     */
    setMonth'
      Parameter
        Identifier: 'month'
        NumberKeyword
      Parameter
        Identifier: ' date'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the month value in the Date object using Universal Coordinated Time (UTC).
     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
     * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.
     */
    setUTCMonth'
      Parameter
        Identifier: 'month'
        NumberKeyword
      Parameter
        Identifier: ' date'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the year of the Date object using local time.
     * @param year A numeric value for the year.
     * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.
     * @param date A numeric value equal for the day of the month.
     */
    setFullYear'
      Parameter
        Identifier: 'year'
        NumberKeyword
      Parameter
        Identifier: ' month'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' date'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Sets the year value in the Date object using Universal Coordinated Time (UTC).
     * @param year A numeric value equal to the year.
     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.
     * @param date A numeric value equal to the day of the month.
     */
    setUTCFullYear'
      Parameter
        Identifier: 'year'
        NumberKeyword
      Parameter
        Identifier: ' month'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' date'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */
    toUTCString'
      StringKeyword
    MethodSignature
      Identifier: '
    /** Returns a date as a string value in ISO format. */
    toISOString'
      StringKeyword
    MethodSignature
      Identifier: '
    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */
    toJSON'
      Parameter
        Identifier: 'key'
        QuestionToken
        AnyKeyword
      StringKeyword
  InterfaceDeclaration
    Identifier: ' DateConstructor'
    ConstructSignature
      TypeReference
        Identifier: ' Date'
    ConstructSignature
      Parameter
        Identifier: 'value'
        UnionType
          NumberKeyword
          StringKeyword
      TypeReference
        Identifier: ' Date'
    ConstructSignature
      Parameter
        Identifier: 'year'
        NumberKeyword
      Parameter
        Identifier: ' monthIndex'
        NumberKeyword
      Parameter
        Identifier: ' date'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' hours'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' minutes'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' seconds'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' ms'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Date'
    CallSignature
      StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Date'
    MethodSignature
      Identifier: '
    /**
     * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.
     * @param s A date string
     */
    parse'
      Parameter
        Identifier: 's'
        StringKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.
     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.
     * @param monthIndex The month as a number between 0 and 11 (January to December).
     * @param date The date as a number between 1 and 31.
     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.
     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.
     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.
     * @param ms A number from 0 to 999 that specifies the milliseconds.
     */
    UTC'
      Parameter
        Identifier: 'year'
        NumberKeyword
      Parameter
        Identifier: ' monthIndex'
        NumberKeyword
      Parameter
        Identifier: ' date'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' hours'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' minutes'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' seconds'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' ms'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /** Returns the number of milliseconds elapsed since midnight, January 1, 1970 Universal Coordinated Time (UTC). */
    now'
      NumberKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Date'
        TypeReference
          Identifier: ' DateConstructor'
  InterfaceDeclaration
    Identifier: ' RegExpMatchArray'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Array'
        StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The index of the search at which the result was found.
     */
    index'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * A copy of the search string.
     */
    input'
      QuestionToken
      StringKeyword
    PropertySignature
      NumericLiteral
      StringKeyword
  InterfaceDeclaration
    Identifier: ' RegExpExecArray'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Array'
        StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The index of the search at which the result was found.
     */
    index'
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * A copy of the search string.
     */
    input'
      StringKeyword
    PropertySignature
      NumericLiteral
      StringKeyword
  InterfaceDeclaration
    Identifier: ' RegExp'
    MethodSignature
      Identifier: '
    /**
     * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.
     * @param string The String object or string literal on which to perform the search.
     */
    exec'
      Parameter
        Identifier: 'string'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' RegExpExecArray'
        LiteralType
          NullKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.
     * @param string String on which to perform the search.
     */
    test'
      Parameter
        Identifier: 'string'
        StringKeyword
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' source'
      StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' global'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' ignoreCase'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' multiline'
      BooleanKeyword
    PropertySignature
      Identifier: '

    lastIndex'
      NumberKeyword
    MethodSignature
      Identifier: '

    // Non-standard extensions
    /** @deprecated A legacy feature for browser compatibility */
    compile'
      Parameter
        Identifier: 'pattern'
        StringKeyword
      Parameter
        Identifier: ' flags'
        QuestionToken
        StringKeyword
      ThisType
  InterfaceDeclaration
    Identifier: ' RegExpConstructor'
    ConstructSignature
      Parameter
        Identifier: 'pattern'
        UnionType
          TypeReference
            Identifier: ' RegExp'
          StringKeyword
      TypeReference
        Identifier: ' RegExp'
    ConstructSignature
      Parameter
        Identifier: 'pattern'
        StringKeyword
      Parameter
        Identifier: ' flags'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' RegExp'
    CallSignature
      Parameter
        Identifier: 'pattern'
        UnionType
          TypeReference
            Identifier: ' RegExp'
          StringKeyword
      TypeReference
        Identifier: ' RegExp'
    CallSignature
      Parameter
        Identifier: 'pattern'
        StringKeyword
      Parameter
        Identifier: ' flags'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' RegExp'
    PropertySignature
      ReadonlyKeyword
      StringLiteral
      TypeReference
        Identifier: ' RegExp'
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
    PropertySignature
      StringLiteral
      StringKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' RegExp'
        TypeReference
          Identifier: ' RegExpConstructor'
  InterfaceDeclaration
    Identifier: ' Error'
    PropertySignature
      Identifier: '
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    message'
      StringKeyword
    PropertySignature
      Identifier: '
    stack'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    Identifier: ' ErrorConstructor'
    ConstructSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Error'
    CallSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Error'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Error'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Error'
        TypeReference
          Identifier: ' ErrorConstructor'
  InterfaceDeclaration
    Identifier: ' EvalError'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Error'
  InterfaceDeclaration
    Identifier: ' EvalErrorConstructor'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ErrorConstructor'
    ConstructSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' EvalError'
    CallSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' EvalError'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' EvalError'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' EvalError'
        TypeReference
          Identifier: ' EvalErrorConstructor'
  InterfaceDeclaration
    Identifier: ' RangeError'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Error'
  InterfaceDeclaration
    Identifier: ' RangeErrorConstructor'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ErrorConstructor'
    ConstructSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' RangeError'
    CallSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' RangeError'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' RangeError'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' RangeError'
        TypeReference
          Identifier: ' RangeErrorConstructor'
  InterfaceDeclaration
    Identifier: ' ReferenceError'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Error'
  InterfaceDeclaration
    Identifier: ' ReferenceErrorConstructor'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ErrorConstructor'
    ConstructSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' ReferenceError'
    CallSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' ReferenceError'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' ReferenceError'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' ReferenceError'
        TypeReference
          Identifier: ' ReferenceErrorConstructor'
  InterfaceDeclaration
    Identifier: ' SyntaxError'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Error'
  InterfaceDeclaration
    Identifier: ' SyntaxErrorConstructor'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ErrorConstructor'
    ConstructSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' SyntaxError'
    CallSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' SyntaxError'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' SyntaxError'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' SyntaxError'
        TypeReference
          Identifier: ' SyntaxErrorConstructor'
  InterfaceDeclaration
    Identifier: ' TypeError'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Error'
  InterfaceDeclaration
    Identifier: ' TypeErrorConstructor'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ErrorConstructor'
    ConstructSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' TypeError'
    CallSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' TypeError'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' TypeError'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' TypeError'
        TypeReference
          Identifier: ' TypeErrorConstructor'
  InterfaceDeclaration
    Identifier: ' URIError'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Error'
  InterfaceDeclaration
    Identifier: ' URIErrorConstructor'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ErrorConstructor'
    ConstructSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' URIError'
    CallSignature
      Parameter
        Identifier: 'message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' URIError'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' URIError'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' URIError'
        TypeReference
          Identifier: ' URIErrorConstructor'
  InterfaceDeclaration
    Identifier: ' JSON'
    MethodSignature
      Identifier: '
    /**
     * Converts a JavaScript Object Notation (JSON) string into an object.
     * @param text A valid JSON string.
     * @param reviver A function that transforms the results. This function is called for each member of the object.
     * If a member contains nested objects, the nested objects are transformed before the parent object is.
     */
    parse'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' reviver'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'this'
            AnyKeyword
          Parameter
            Identifier: ' key'
            StringKeyword
          Parameter
            Identifier: ' value'
            AnyKeyword
          AnyKeyword
      AnyKeyword
    MethodSignature
      Identifier: '
    /**
     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
     * @param value A JavaScript value, usually an object or array, to be converted.
     * @param replacer A function that transforms the results.
     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
     */
    stringify'
      Parameter
        Identifier: 'value'
        AnyKeyword
      Parameter
        Identifier: ' replacer'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'this'
            AnyKeyword
          Parameter
            Identifier: ' key'
            StringKeyword
          Parameter
            Identifier: ' value'
            AnyKeyword
          AnyKeyword
      Parameter
        Identifier: ' space'
        QuestionToken
        UnionType
          StringKeyword
          NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
     * @param value A JavaScript value, usually an object or array, to be converted.
     * @param replacer An array of strings and numbers that acts as an approved list for selecting the object properties that will be stringified.
     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
     */
    stringify'
      Parameter
        Identifier: 'value'
        AnyKeyword
      Parameter
        Identifier: ' replacer'
        QuestionToken
        UnionType
          ArrayType
            ParenthesizedType
              UnionType
                NumberKeyword
                StringKeyword
          LiteralType
            NullKeyword
      Parameter
        Identifier: ' space'
        QuestionToken
        UnionType
          StringKeyword
          NumberKeyword
      StringKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' JSON'
        TypeReference
          Identifier: ' JSON'
  InterfaceDeclaration
    Identifier: ' ReadonlyArray'
    TypeParameter
      Identifier: 'T'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns a string representation of an array.
     */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.
     */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Combines two or more arrays.
     * @param items Additional items to add to the end of array1.
     */
    concat'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          TypeReference
            Identifier: ' ConcatArray'
            TypeReference
              Identifier: 'T'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Combines two or more arrays.
     * @param items Additional items to add to the end of array1.
     */
    concat'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          ParenthesizedType
            UnionType
              TypeReference
                Identifier: 'T'
              TypeReference
                Identifier: ' ConcatArray'
                TypeReference
                  Identifier: 'T'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Adds all the elements of an array separated by the specified separator string.
     * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.
     */
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns a section of an array.
     * @param start The beginning of the specified portion of the array.
     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Returns the index of the first occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
     */
    indexOf'
      Parameter
        Identifier: 'searchElement'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the index of the last occurrence of a specified value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchElement'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      TypeParameter
        Identifier: 'S'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypePredicate
        ThisType
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' S'
    MethodSignature
      Identifier: '
    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    some'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Calls a defined callback function on each element of an array, and returns an array that contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
    map'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      ArrayType
        TypeReference
          Identifier: ' U'
    MethodSignature
      Identifier: '
    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      TypeParameter
        Identifier: 'S'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      ArrayType
        TypeReference
          Identifier: ' S'
    MethodSignature
      Identifier: '
    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          TypeReference
            Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          TypeReference
            Identifier: ' T'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
    reduce'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '
    /**
     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          TypeReference
            Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          TypeReference
            Identifier: ' T'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
    reduceRight'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    IndexSignature
      ReadonlyKeyword
      Parameter
        Identifier: 'n'
        NumberKeyword
      TypeReference
        Identifier: ' T'
  InterfaceDeclaration
    Identifier: ' ConcatArray'
    TypeParameter
      Identifier: 'T'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    IndexSignature
      ReadonlyKeyword
      Parameter
        Identifier: 'n'
        NumberKeyword
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
  InterfaceDeclaration
    Identifier: ' Array'
    TypeParameter
      Identifier: 'T'
    PropertySignature
      Identifier: '
    /**
     * Gets or sets the length of the array. This is a number one higher than the highest index in the array.
     */
    length'
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns a string representation of an array.
     */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.
     */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Removes the last element from an array and returns it.
     * If the array is empty, undefined is returned and the array is not modified.
     */
    pop'
      UnionType
        TypeReference
          Identifier: ' T'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * Appends new elements to the end of an array, and returns the new length of the array.
     * @param items New elements to add to the array.
     */
    push'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          TypeReference
            Identifier: ' T'
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Combines two or more arrays.
     * This method returns a new array without modifying any existing arrays.
     * @param items Additional arrays and/or items to add to the end of the array.
     */
    concat'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          TypeReference
            Identifier: ' ConcatArray'
            TypeReference
              Identifier: 'T'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Combines two or more arrays.
     * This method returns a new array without modifying any existing arrays.
     * @param items Additional arrays and/or items to add to the end of the array.
     */
    concat'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          ParenthesizedType
            UnionType
              TypeReference
                Identifier: 'T'
              TypeReference
                Identifier: ' ConcatArray'
                TypeReference
                  Identifier: 'T'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Adds all the elements of an array into a string, separated by the specified separator string.
     * @param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.
     */
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Reverses the elements in an array in place.
     * This method mutates the array and returns a reference to the same array.
     */
    reverse'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Removes the first element from an array and returns it.
     * If the array is empty, undefined is returned and the array is not modified.
     */
    shift'
      UnionType
        TypeReference
          Identifier: ' T'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns a copy of a section of an array.
     * For both start and end, a negative index can be used to indicate an offset from the end of the array.
     * For example, -2 refers to the second to last element of the array.
     * @param start The beginning index of the specified portion of the array.
     * If start is undefined, then the slice begins at index 0.
     * @param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.
     * If end is undefined, then the slice extends to the end of the array.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Sorts an array in place.
     * This method mutates the array and returns a reference to the same array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.
     * ```ts
     * [11,2,22,1].sort((a, b) => a - b)
     * ```
     */
    sort'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' b'
            TypeReference
              Identifier: ' T'
          NumberKeyword
      ThisType
    MethodSignature
      Identifier: '
    /**
     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
     * @param start The zero-based location in the array from which to start removing elements.
     * @param deleteCount The number of elements to remove.
     * @returns An array containing the elements that were deleted.
     */
    splice'
      Parameter
        Identifier: 'start'
        NumberKeyword
      Parameter
        Identifier: ' deleteCount'
        QuestionToken
        NumberKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
     * @param start The zero-based location in the array from which to start removing elements.
     * @param deleteCount The number of elements to remove.
     * @param items Elements to insert into the array in place of the deleted elements.
     * @returns An array containing the elements that were deleted.
     */
    splice'
      Parameter
        Identifier: 'start'
        NumberKeyword
      Parameter
        Identifier: ' deleteCount'
        NumberKeyword
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          TypeReference
            Identifier: ' T'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Inserts new elements at the start of an array, and returns the new length of the array.
     * @param items Elements to insert at the start of the array.
     */
    unshift'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          TypeReference
            Identifier: ' T'
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
     */
    indexOf'
      Parameter
        Identifier: 'searchElement'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchElement'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      TypeParameter
        Identifier: 'S'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypePredicate
        ThisType
        ArrayType
          TypeReference
            Identifier: ' S'
    MethodSignature
      Identifier: '
    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    some'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Calls a defined callback function on each element of an array, and returns an array that contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
    map'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      ArrayType
        TypeReference
          Identifier: ' U'
    MethodSignature
      Identifier: '
    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      TypeParameter
        Identifier: 'S'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      ArrayType
        TypeReference
          Identifier: ' S'
    MethodSignature
      Identifier: '
    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          TypeReference
            Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          TypeReference
            Identifier: ' T'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
    reduce'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '
    /**
     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          TypeReference
            Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          TypeReference
            Identifier: ' T'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
    reduceRight'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    IndexSignature
      Parameter
        Identifier: 'n'
        NumberKeyword
      TypeReference
        Identifier: ' T'
  InterfaceDeclaration
    Identifier: ' ArrayConstructor'
    ConstructSignature
      Parameter
        Identifier: 'arrayLength'
        QuestionToken
        NumberKeyword
      ArrayType
        AnyKeyword
    ConstructSignature
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLength'
        NumberKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
    ConstructSignature
      TypeParameter
        Identifier: 'T'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          TypeReference
            Identifier: ' T'
      ArrayType
        TypeReference
          Identifier: ' T'
    CallSignature
      Parameter
        Identifier: 'arrayLength'
        QuestionToken
        NumberKeyword
      ArrayType
        AnyKeyword
    CallSignature
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLength'
        NumberKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
    CallSignature
      TypeParameter
        Identifier: 'T'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          TypeReference
            Identifier: ' T'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '
    isArray'
      Parameter
        Identifier: 'arg'
        AnyKeyword
      TypePredicate
        Identifier: ' arg'
        ArrayType
          AnyKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      ArrayType
        AnyKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Array'
        TypeReference
          Identifier: ' ArrayConstructor'
  InterfaceDeclaration
    Identifier: ' TypedPropertyDescriptor'
    TypeParameter
      Identifier: 'T'
    PropertySignature
      Identifier: '
    enumerable'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    configurable'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    writable'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    value'
      QuestionToken
      TypeReference
        Identifier: ' T'
    PropertySignature
      Identifier: '
    get'
      QuestionToken
      FunctionType
        TypeReference
          Identifier: ' T'
    PropertySignature
      Identifier: '
    set'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'value'
          TypeReference
            Identifier: ' T'
        VoidKeyword
  TypeAliasDeclaration
    DeclareKeyword
    Identifier: ' PromiseConstructorLike'
    ConstructorType
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'executor'
        FunctionType
          Parameter
            Identifier: 'resolve'
            FunctionType
              Parameter
                Identifier: 'value'
                UnionType
                  TypeReference
                    Identifier: ' T'
                  TypeReference
                    Identifier: ' PromiseLike'
                    TypeReference
                      Identifier: 'T'
              VoidKeyword
          Parameter
            Identifier: ' reject'
            FunctionType
              Parameter
                Identifier: 'reason'
                QuestionToken
                AnyKeyword
              VoidKeyword
          VoidKeyword
      TypeReference
        Identifier: ' PromiseLike'
        TypeReference
          Identifier: 'T'
  InterfaceDeclaration
    Identifier: ' PromiseLike'
    TypeParameter
      Identifier: 'T'
    MethodSignature
      Identifier: '
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then'
      TypeParameter
        Identifier: 'TResult1'
        TypeReference
          Identifier: ' T'
      TypeParameter
        Identifier: ' TResult2'
        NeverKeyword
      Parameter
        Identifier: 'onfulfilled'
        QuestionToken
        UnionType
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'value'
                TypeReference
                  Identifier: ' T'
              UnionType
                TypeReference
                  Identifier: ' TResult1'
                TypeReference
                  Identifier: ' PromiseLike'
                  TypeReference
                    Identifier: 'TResult1'
          UndefinedKeyword
          LiteralType
            NullKeyword
      Parameter
        Identifier: ' onrejected'
        QuestionToken
        UnionType
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'reason'
                AnyKeyword
              UnionType
                TypeReference
                  Identifier: ' TResult2'
                TypeReference
                  Identifier: ' PromiseLike'
                  TypeReference
                    Identifier: 'TResult2'
          UndefinedKeyword
          LiteralType
            NullKeyword
      TypeReference
        Identifier: ' PromiseLike'
        UnionType
          TypeReference
            Identifier: 'TResult1'
          TypeReference
            Identifier: ' TResult2'
  InterfaceDeclaration
    Identifier: ' Promise'
    TypeParameter
      Identifier: 'T'
    MethodSignature
      Identifier: '
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then'
      TypeParameter
        Identifier: 'TResult1'
        TypeReference
          Identifier: ' T'
      TypeParameter
        Identifier: ' TResult2'
        NeverKeyword
      Parameter
        Identifier: 'onfulfilled'
        QuestionToken
        UnionType
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'value'
                TypeReference
                  Identifier: ' T'
              UnionType
                TypeReference
                  Identifier: ' TResult1'
                TypeReference
                  Identifier: ' PromiseLike'
                  TypeReference
                    Identifier: 'TResult1'
          UndefinedKeyword
          LiteralType
            NullKeyword
      Parameter
        Identifier: ' onrejected'
        QuestionToken
        UnionType
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'reason'
                AnyKeyword
              UnionType
                TypeReference
                  Identifier: ' TResult2'
                TypeReference
                  Identifier: ' PromiseLike'
                  TypeReference
                    Identifier: 'TResult2'
          UndefinedKeyword
          LiteralType
            NullKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'TResult1'
          TypeReference
            Identifier: ' TResult2'
    MethodSignature
      Identifier: '

    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch'
      TypeParameter
        Identifier: 'TResult'
        NeverKeyword
      Parameter
        Identifier: 'onrejected'
        QuestionToken
        UnionType
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'reason'
                AnyKeyword
              UnionType
                TypeReference
                  Identifier: ' TResult'
                TypeReference
                  Identifier: ' PromiseLike'
                  TypeReference
                    Identifier: 'TResult'
          UndefinedKeyword
          LiteralType
            NullKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'T'
          TypeReference
            Identifier: ' TResult'
  TypeAliasDeclaration
    Identifier: ' Awaited'
    TypeParameter
      Identifier: 'T'
    ConditionalType
      TypeReference
        Identifier: ' T'
      UnionType
        LiteralType
          NullKeyword
        UndefinedKeyword
      TypeReference
        Identifier: ' T'
      ConditionalType
        TypeReference
          Identifier: ' // special case for `null | undefined` when not in `--strictNullChecks` mode
    T'
        IntersectionType
          ObjectKeyword
          TypeLiteral
            MethodSignature
              Identifier: ' then'
              Parameter
                Identifier: 'onfulfilled'
                InferType
                  TypeParameter
                    Identifier: ' F'
              Parameter
                DotDotDotToken
                Identifier: 'args'
                InferType
                  TypeParameter
                    Identifier: ' _'
              AnyKeyword
        ConditionalType
          TypeReference
            Identifier: ' // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped
        F'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'value'
                InferType
                  TypeParameter
                    Identifier: ' V'
              Parameter
                DotDotDotToken
                Identifier: 'args'
                InferType
                  TypeParameter
                    Identifier: ' _'
              AnyKeyword
          TypeReference
            Identifier: ' // if the argument to `then` is callable, extracts the first argument
            Awaited'
            TypeReference
              Identifier: 'V'
          NeverKeyword
        TypeReference
          Identifier: ' // the argument to `then` was not callable
    T'
  InterfaceDeclaration
    Identifier: ' ArrayLike'
    TypeParameter
      Identifier: 'T'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    IndexSignature
      ReadonlyKeyword
      Parameter
        Identifier: 'n'
        NumberKeyword
      TypeReference
        Identifier: ' T'
  TypeAliasDeclaration
    Identifier: ' Partial'
    TypeParameter
      Identifier: 'T'
    MappedType
      TypeParameter
        Identifier: 'P'
        TypeOperator
          TypeReference
            Identifier: ' T'
      QuestionToken
      IndexedAccessType
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: 'P'
  TypeAliasDeclaration
    Identifier: ' Required'
    TypeParameter
      Identifier: 'T'
    MappedType
      TypeParameter
        Identifier: 'P'
        TypeOperator
          TypeReference
            Identifier: ' T'
      MinusToken
      IndexedAccessType
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: 'P'
  TypeAliasDeclaration
    Identifier: ' Readonly'
    TypeParameter
      Identifier: 'T'
    MappedType
      ReadonlyKeyword
      TypeParameter
        Identifier: 'P'
        TypeOperator
          TypeReference
            Identifier: ' T'
      IndexedAccessType
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: 'P'
  TypeAliasDeclaration
    Identifier: ' Pick'
    TypeParameter
      Identifier: 'T'
    TypeParameter
      Identifier: ' K'
      TypeOperator
        TypeReference
          Identifier: ' T'
    MappedType
      TypeParameter
        Identifier: 'P'
        TypeReference
          Identifier: ' K'
      IndexedAccessType
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: 'P'
  TypeAliasDeclaration
    Identifier: ' Record'
    TypeParameter
      Identifier: 'K'
      TypeOperator
        AnyKeyword
    TypeParameter
      Identifier: ' T'
    MappedType
      TypeParameter
        Identifier: 'P'
        TypeReference
          Identifier: ' K'
      TypeReference
        Identifier: ' T'
  TypeAliasDeclaration
    Identifier: ' Exclude'
    TypeParameter
      Identifier: 'T'
    TypeParameter
      Identifier: ' U'
    ConditionalType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' U'
      NeverKeyword
      TypeReference
        Identifier: ' T'
  TypeAliasDeclaration
    Identifier: ' Extract'
    TypeParameter
      Identifier: 'T'
    TypeParameter
      Identifier: ' U'
    ConditionalType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' U'
      TypeReference
        Identifier: ' T'
      NeverKeyword
  TypeAliasDeclaration
    Identifier: ' Omit'
    TypeParameter
      Identifier: 'T'
    TypeParameter
      Identifier: ' K'
      TypeOperator
        AnyKeyword
    TypeReference
      Identifier: ' Pick'
      TypeReference
        Identifier: 'T'
      TypeReference
        Identifier: ' Exclude'
        TypeOperator
          TypeReference
            Identifier: ' T'
        TypeReference
          Identifier: ' K'
  TypeAliasDeclaration
    Identifier: ' NonNullable'
    TypeParameter
      Identifier: 'T'
    IntersectionType
      TypeReference
        Identifier: ' T'
      TypeLiteral
  TypeAliasDeclaration
    Identifier: ' Parameters'
    TypeParameter
      Identifier: 'T'
      FunctionType
        Parameter
          DotDotDotToken
          Identifier: 'args'
          AnyKeyword
        AnyKeyword
    ConditionalType
      TypeReference
        Identifier: ' T'
      FunctionType
        Parameter
          DotDotDotToken
          Identifier: 'args'
          InferType
            TypeParameter
              Identifier: ' P'
        AnyKeyword
      TypeReference
        Identifier: ' P'
      NeverKeyword
  TypeAliasDeclaration
    Identifier: ' ConstructorParameters'
    TypeParameter
      Identifier: 'T'
      ConstructorType
        AbstractKeyword
        Parameter
          DotDotDotToken
          Identifier: 'args'
          AnyKeyword
        AnyKeyword
    ConditionalType
      TypeReference
        Identifier: ' T'
      ConstructorType
        AbstractKeyword
        Parameter
          DotDotDotToken
          Identifier: 'args'
          InferType
            TypeParameter
              Identifier: ' P'
        AnyKeyword
      TypeReference
        Identifier: ' P'
      NeverKeyword
  TypeAliasDeclaration
    Identifier: ' ReturnType'
    TypeParameter
      Identifier: 'T'
      FunctionType
        Parameter
          DotDotDotToken
          Identifier: 'args'
          AnyKeyword
        AnyKeyword
    ConditionalType
      TypeReference
        Identifier: ' T'
      FunctionType
        Parameter
          DotDotDotToken
          Identifier: 'args'
          AnyKeyword
        InferType
          TypeParameter
            Identifier: ' R'
      TypeReference
        Identifier: ' R'
      AnyKeyword
  TypeAliasDeclaration
    Identifier: ' InstanceType'
    TypeParameter
      Identifier: 'T'
      ConstructorType
        AbstractKeyword
        Parameter
          DotDotDotToken
          Identifier: 'args'
          AnyKeyword
        AnyKeyword
    ConditionalType
      TypeReference
        Identifier: ' T'
      ConstructorType
        AbstractKeyword
        Parameter
          DotDotDotToken
          Identifier: 'args'
          AnyKeyword
        InferType
          TypeParameter
            Identifier: ' R'
      TypeReference
        Identifier: ' R'
      AnyKeyword
  TypeAliasDeclaration
    Identifier: ' Uppercase'
    TypeParameter
      Identifier: 'S'
      StringKeyword
    IntrinsicKeyword
  TypeAliasDeclaration
    Identifier: ' Lowercase'
    TypeParameter
      Identifier: 'S'
      StringKeyword
    IntrinsicKeyword
  TypeAliasDeclaration
    Identifier: ' Capitalize'
    TypeParameter
      Identifier: 'S'
      StringKeyword
    IntrinsicKeyword
  TypeAliasDeclaration
    Identifier: ' Uncapitalize'
    TypeParameter
      Identifier: 'S'
      StringKeyword
    IntrinsicKeyword
  TypeAliasDeclaration
    Identifier: ' NoInfer'
    TypeParameter
      Identifier: 'T'
    IntrinsicKeyword
  InterfaceDeclaration
    Identifier: ' ThisType'
    TypeParameter
      Identifier: 'T'
  InterfaceDeclaration
    Identifier: ' WeakKeyTypes'
    PropertySignature
      Identifier: '
    object'
      ObjectKeyword
  TypeAliasDeclaration
    Identifier: ' WeakKey'
    IndexedAccessType
      TypeReference
        Identifier: ' WeakKeyTypes'
      TypeOperator
        TypeReference
          Identifier: ' WeakKeyTypes'
  InterfaceDeclaration
    Identifier: ' ArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a section of an ArrayBuffer.
     */
    slice'
      Parameter
        Identifier: 'begin'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' ArrayBuffer'
  InterfaceDeclaration
    Identifier: ' ArrayBufferTypes'
    PropertySignature
      Identifier: '
    ArrayBuffer'
      TypeReference
        Identifier: ' ArrayBuffer'
  TypeAliasDeclaration
    Identifier: ' ArrayBufferLike'
    IndexedAccessType
      TypeReference
        Identifier: ' ArrayBufferTypes'
      TypeOperator
        TypeReference
          Identifier: ' ArrayBufferTypes'
  InterfaceDeclaration
    Identifier: ' ArrayBufferConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' ArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'byteLength'
        NumberKeyword
      TypeReference
        Identifier: ' ArrayBuffer'
    MethodSignature
      Identifier: '
    isView'
      Parameter
        Identifier: 'arg'
        AnyKeyword
      TypePredicate
        Identifier: ' arg'
        TypeReference
          Identifier: ' ArrayBufferView'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' ArrayBuffer'
        TypeReference
          Identifier: ' ArrayBufferConstructor'
  InterfaceDeclaration
    Identifier: ' ArrayBufferView'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
      TypeReference
        Identifier: ' ArrayBufferLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' buffer'
      TypeReference
        Identifier: ' TArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteOffset'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' DataView'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
      TypeReference
        Identifier: ' ArrayBufferLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' buffer'
      TypeReference
        Identifier: ' TArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteOffset'
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Gets the Float32 value at the specified byte offset from the start of the view. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the buffer at which the value should be retrieved.
     * @param littleEndian If false or undefined, a big-endian value should be read.
     */
    getFloat32'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Gets the Float64 value at the specified byte offset from the start of the view. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the buffer at which the value should be retrieved.
     * @param littleEndian If false or undefined, a big-endian value should be read.
     */
    getFloat64'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Gets the Int8 value at the specified byte offset from the start of the view. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the buffer at which the value should be retrieved.
     */
    getInt8'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Gets the Int16 value at the specified byte offset from the start of the view. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the buffer at which the value should be retrieved.
     * @param littleEndian If false or undefined, a big-endian value should be read.
     */
    getInt16'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Gets the Int32 value at the specified byte offset from the start of the view. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the buffer at which the value should be retrieved.
     * @param littleEndian If false or undefined, a big-endian value should be read.
     */
    getInt32'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Gets the Uint8 value at the specified byte offset from the start of the view. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the buffer at which the value should be retrieved.
     */
    getUint8'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Gets the Uint16 value at the specified byte offset from the start of the view. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the buffer at which the value should be retrieved.
     * @param littleEndian If false or undefined, a big-endian value should be read.
     */
    getUint16'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Gets the Uint32 value at the specified byte offset from the start of the view. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the buffer at which the value should be retrieved.
     * @param littleEndian If false or undefined, a big-endian value should be read.
     */
    getUint32'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Stores an Float32 value at the specified byte offset from the start of the view.
     * @param byteOffset The place in the buffer at which the value should be set.
     * @param value The value to set.
     * @param littleEndian If false or undefined, a big-endian value should be written.
     */
    setFloat32'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Stores an Float64 value at the specified byte offset from the start of the view.
     * @param byteOffset The place in the buffer at which the value should be set.
     * @param value The value to set.
     * @param littleEndian If false or undefined, a big-endian value should be written.
     */
    setFloat64'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Stores an Int8 value at the specified byte offset from the start of the view.
     * @param byteOffset The place in the buffer at which the value should be set.
     * @param value The value to set.
     */
    setInt8'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Stores an Int16 value at the specified byte offset from the start of the view.
     * @param byteOffset The place in the buffer at which the value should be set.
     * @param value The value to set.
     * @param littleEndian If false or undefined, a big-endian value should be written.
     */
    setInt16'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Stores an Int32 value at the specified byte offset from the start of the view.
     * @param byteOffset The place in the buffer at which the value should be set.
     * @param value The value to set.
     * @param littleEndian If false or undefined, a big-endian value should be written.
     */
    setInt32'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Stores an Uint8 value at the specified byte offset from the start of the view.
     * @param byteOffset The place in the buffer at which the value should be set.
     * @param value The value to set.
     */
    setUint8'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Stores an Uint16 value at the specified byte offset from the start of the view.
     * @param byteOffset The place in the buffer at which the value should be set.
     * @param value The value to set.
     * @param littleEndian If false or undefined, a big-endian value should be written.
     */
    setUint16'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Stores an Uint32 value at the specified byte offset from the start of the view.
     * @param byteOffset The place in the buffer at which the value should be set.
     * @param value The value to set.
     * @param littleEndian If false or undefined, a big-endian value should be written.
     */
    setUint32'
      Parameter
        Identifier: 'byteOffset'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      Parameter
        Identifier: ' littleEndian'
        QuestionToken
        BooleanKeyword
      VoidKeyword
  InterfaceDeclaration
    Identifier: ' DataViewConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' DataView'
        TypeReference
          Identifier: 'ArrayBufferLike'
    ConstructSignature
      TypeParameter
        Identifier: 'TArrayBuffer'
        IntersectionType
          TypeReference
            Identifier: ' ArrayBufferLike'
          TypeLiteral
            PropertySignature
              Identifier: ' BYTES_PER_ELEMENT'
              QuestionToken
              NeverKeyword
      Parameter
        Identifier: 'buffer'
        TypeReference
          Identifier: ' TArrayBuffer'
      Parameter
        Identifier: ' byteOffset'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' byteLength'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' DataView'
        TypeReference
          Identifier: 'TArrayBuffer'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' DataView'
        TypeReference
          Identifier: ' DataViewConstructor'
  InterfaceDeclaration
    Identifier: ' Int8Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
      TypeReference
        Identifier: ' ArrayBufferLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' buffer'
      TypeReference
        Identifier: ' TArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteOffset'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
     * length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
     * is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
     */
    copyWithin'
      Parameter
        Identifier: 'target'
        NumberKeyword
      Parameter
        Identifier: ' start'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
     * length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
     * length+end.
     */
    fill'
      Parameter
        Identifier: 'value'
        NumberKeyword
      Parameter
        Identifier: ' start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls
     * the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          AnyKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    find'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     */
    indexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds all the elements of an array separated by the specified separator string.
     * @param separator A string used to separate one element of an array from the next in the
     * resulting String. If omitted, the array elements are separated with a comma.
     */
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     * search starts at index 0.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls a defined callback function on each element of an array, and returns an array that
     * contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    map'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an
     * argument instead of an array value.
     */
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduceRight'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Reverses the elements in an Array.
     */
    reverse'
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Sets a value or an array of values.
     * @param array A typed or untyped array of values to set.
     * @param offset The index in the current array at which the values are to be written.
     */
    set'
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      Parameter
        Identifier: ' offset'
        QuestionToken
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a section of an array.
     * @param start The beginning of the specified portion of the array.
     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    some'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Sorts an array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if first argument is less than second argument, zero if they're equal and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * [11,2,22,1].sort((a, b) => a - b)
     * ```
     */
    sort'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements
     * at begin, inclusive, up to end, exclusive.
     * @param begin The index of the beginning of the array.
     * @param end The index of the end of the array.
     */
    subarray'
      Parameter
        Identifier: 'begin'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Converts a number to a string by using the current locale.
     */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string representation of an array.
     */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      ThisType
    IndexSignature
      Parameter
        Identifier: 'index'
        NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' Int8ArrayConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBufferLike'
    ConstructSignature
      Parameter
        Identifier: 'length'
        NumberKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      TypeParameter
        Identifier: 'TArrayBuffer'
        TypeReference
          Identifier: ' ArrayBufferLike'
        TypeReference
          Identifier: ' ArrayBuffer'
      Parameter
        Identifier: 'buffer'
        TypeReference
          Identifier: ' TArrayBuffer'
      Parameter
        Identifier: ' byteOffset'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' length'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        UnionType
          TypeReference
            Identifier: ' ArrayLike'
            NumberKeyword
          TypeReference
            Identifier: ' ArrayBuffer'
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a new array from a set of elements.
     * @param items A set of elements to include in the new array object.
     */
    of'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          NumberKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     */
    from'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
    from'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          TypeReference
            Identifier: 'T'
      Parameter
        Identifier: ' mapfn'
        FunctionType
          Parameter
            Identifier: 'v'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' k'
            NumberKeyword
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Int8Array'
        TypeReference
          Identifier: ' Int8ArrayConstructor'
  InterfaceDeclaration
    Identifier: ' Uint8Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
      TypeReference
        Identifier: ' ArrayBufferLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' buffer'
      TypeReference
        Identifier: ' TArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteOffset'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
     * length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
     * is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
     */
    copyWithin'
      Parameter
        Identifier: 'target'
        NumberKeyword
      Parameter
        Identifier: ' start'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
     * length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
     * length+end.
     */
    fill'
      Parameter
        Identifier: 'value'
        NumberKeyword
      Parameter
        Identifier: ' start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls
     * the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          AnyKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    find'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     */
    indexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds all the elements of an array separated by the specified separator string.
     * @param separator A string used to separate one element of an array from the next in the
     * resulting String. If omitted, the array elements are separated with a comma.
     */
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     * search starts at index 0.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls a defined callback function on each element of an array, and returns an array that
     * contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    map'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an
     * argument instead of an array value.
     */
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduceRight'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Reverses the elements in an Array.
     */
    reverse'
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Sets a value or an array of values.
     * @param array A typed or untyped array of values to set.
     * @param offset The index in the current array at which the values are to be written.
     */
    set'
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      Parameter
        Identifier: ' offset'
        QuestionToken
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a section of an array.
     * @param start The beginning of the specified portion of the array.
     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    some'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Sorts an array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if first argument is less than second argument, zero if they're equal and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * [11,2,22,1].sort((a, b) => a - b)
     * ```
     */
    sort'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements
     * at begin, inclusive, up to end, exclusive.
     * @param begin The index of the beginning of the array.
     * @param end The index of the end of the array.
     */
    subarray'
      Parameter
        Identifier: 'begin'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Converts a number to a string by using the current locale.
     */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string representation of an array.
     */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      ThisType
    IndexSignature
      Parameter
        Identifier: 'index'
        NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' Uint8ArrayConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBufferLike'
    ConstructSignature
      Parameter
        Identifier: 'length'
        NumberKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      TypeParameter
        Identifier: 'TArrayBuffer'
        TypeReference
          Identifier: ' ArrayBufferLike'
        TypeReference
          Identifier: ' ArrayBuffer'
      Parameter
        Identifier: 'buffer'
        TypeReference
          Identifier: ' TArrayBuffer'
      Parameter
        Identifier: ' byteOffset'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' length'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        UnionType
          TypeReference
            Identifier: ' ArrayLike'
            NumberKeyword
          TypeReference
            Identifier: ' ArrayBuffer'
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a new array from a set of elements.
     * @param items A set of elements to include in the new array object.
     */
    of'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          NumberKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     */
    from'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
    from'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          TypeReference
            Identifier: 'T'
      Parameter
        Identifier: ' mapfn'
        FunctionType
          Parameter
            Identifier: 'v'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' k'
            NumberKeyword
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: ' Uint8ArrayConstructor'
  InterfaceDeclaration
    Identifier: ' Uint8ClampedArray'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
      TypeReference
        Identifier: ' ArrayBufferLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' buffer'
      TypeReference
        Identifier: ' TArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteOffset'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
     * length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
     * is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
     */
    copyWithin'
      Parameter
        Identifier: 'target'
        NumberKeyword
      Parameter
        Identifier: ' start'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
     * length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
     * length+end.
     */
    fill'
      Parameter
        Identifier: 'value'
        NumberKeyword
      Parameter
        Identifier: ' start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls
     * the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          AnyKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    find'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     */
    indexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds all the elements of an array separated by the specified separator string.
     * @param separator A string used to separate one element of an array from the next in the
     * resulting String. If omitted, the array elements are separated with a comma.
     */
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     * search starts at index 0.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls a defined callback function on each element of an array, and returns an array that
     * contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    map'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an
     * argument instead of an array value.
     */
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduceRight'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Reverses the elements in an Array.
     */
    reverse'
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Sets a value or an array of values.
     * @param array A typed or untyped array of values to set.
     * @param offset The index in the current array at which the values are to be written.
     */
    set'
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      Parameter
        Identifier: ' offset'
        QuestionToken
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a section of an array.
     * @param start The beginning of the specified portion of the array.
     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    some'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Sorts an array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if first argument is less than second argument, zero if they're equal and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * [11,2,22,1].sort((a, b) => a - b)
     * ```
     */
    sort'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements
     * at begin, inclusive, up to end, exclusive.
     * @param begin The index of the beginning of the array.
     * @param end The index of the end of the array.
     */
    subarray'
      Parameter
        Identifier: 'begin'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'TArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Converts a number to a string by using the current locale.
     */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string representation of an array.
     */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      ThisType
    IndexSignature
      Parameter
        Identifier: 'index'
        NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' Uint8ClampedArrayConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBufferLike'
    ConstructSignature
      Parameter
        Identifier: 'length'
        NumberKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      TypeParameter
        Identifier: 'TArrayBuffer'
        TypeReference
          Identifier: ' ArrayBufferLike'
        TypeReference
          Identifier: ' ArrayBuffer'
      Parameter
        Identifier: 'buffer'
        TypeReference
          Identifier: ' TArrayBuffer'
      Parameter
        Identifier: ' byteOffset'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' length'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'TArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        UnionType
          TypeReference
            Identifier: ' ArrayLike'
            NumberKeyword
          TypeReference
            Identifier: ' ArrayBuffer'
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a new array from a set of elements.
     * @param items A set of elements to include in the new array object.
     */
    of'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          NumberKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     */
    from'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
    from'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          TypeReference
            Identifier: 'T'
      Parameter
        Identifier: ' mapfn'
        FunctionType
          Parameter
            Identifier: 'v'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' k'
            NumberKeyword
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: ' Uint8ClampedArrayConstructor'
  InterfaceDeclaration
    Identifier: ' Int16Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
      TypeReference
        Identifier: ' ArrayBufferLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' buffer'
      TypeReference
        Identifier: ' TArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteOffset'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
     * length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
     * is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
     */
    copyWithin'
      Parameter
        Identifier: 'target'
        NumberKeyword
      Parameter
        Identifier: ' start'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
     * length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
     * length+end.
     */
    fill'
      Parameter
        Identifier: 'value'
        NumberKeyword
      Parameter
        Identifier: ' start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls
     * the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          AnyKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    find'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the index of the first occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     */
    indexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds all the elements of an array separated by the specified separator string.
     * @param separator A string used to separate one element of an array from the next in the
     * resulting String. If omitted, the array elements are separated with a comma.
     */
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     * search starts at index 0.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls a defined callback function on each element of an array, and returns an array that
     * contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    map'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an
     * argument instead of an array value.
     */
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduceRight'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Reverses the elements in an Array.
     */
    reverse'
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Sets a value or an array of values.
     * @param array A typed or untyped array of values to set.
     * @param offset The index in the current array at which the values are to be written.
     */
    set'
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      Parameter
        Identifier: ' offset'
        QuestionToken
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a section of an array.
     * @param start The beginning of the specified portion of the array.
     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    some'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Sorts an array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if first argument is less than second argument, zero if they're equal and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * [11,2,22,1].sort((a, b) => a - b)
     * ```
     */
    sort'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements
     * at begin, inclusive, up to end, exclusive.
     * @param begin The index of the beginning of the array.
     * @param end The index of the end of the array.
     */
    subarray'
      Parameter
        Identifier: 'begin'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Converts a number to a string by using the current locale.
     */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string representation of an array.
     */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      ThisType
    IndexSignature
      Parameter
        Identifier: 'index'
        NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' Int16ArrayConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBufferLike'
    ConstructSignature
      Parameter
        Identifier: 'length'
        NumberKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      TypeParameter
        Identifier: 'TArrayBuffer'
        TypeReference
          Identifier: ' ArrayBufferLike'
        TypeReference
          Identifier: ' ArrayBuffer'
      Parameter
        Identifier: 'buffer'
        TypeReference
          Identifier: ' TArrayBuffer'
      Parameter
        Identifier: ' byteOffset'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' length'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        UnionType
          TypeReference
            Identifier: ' ArrayLike'
            NumberKeyword
          TypeReference
            Identifier: ' ArrayBuffer'
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a new array from a set of elements.
     * @param items A set of elements to include in the new array object.
     */
    of'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          NumberKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     */
    from'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
    from'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          TypeReference
            Identifier: 'T'
      Parameter
        Identifier: ' mapfn'
        FunctionType
          Parameter
            Identifier: 'v'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' k'
            NumberKeyword
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Int16Array'
        TypeReference
          Identifier: ' Int16ArrayConstructor'
  InterfaceDeclaration
    Identifier: ' Uint16Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
      TypeReference
        Identifier: ' ArrayBufferLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' buffer'
      TypeReference
        Identifier: ' TArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteOffset'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
     * length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
     * is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
     */
    copyWithin'
      Parameter
        Identifier: 'target'
        NumberKeyword
      Parameter
        Identifier: ' start'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
     * length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
     * length+end.
     */
    fill'
      Parameter
        Identifier: 'value'
        NumberKeyword
      Parameter
        Identifier: ' start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls
     * the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          AnyKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    find'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     */
    indexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds all the elements of an array separated by the specified separator string.
     * @param separator A string used to separate one element of an array from the next in the
     * resulting String. If omitted, the array elements are separated with a comma.
     */
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     * search starts at index 0.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls a defined callback function on each element of an array, and returns an array that
     * contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    map'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an
     * argument instead of an array value.
     */
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduceRight'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Reverses the elements in an Array.
     */
    reverse'
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Sets a value or an array of values.
     * @param array A typed or untyped array of values to set.
     * @param offset The index in the current array at which the values are to be written.
     */
    set'
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      Parameter
        Identifier: ' offset'
        QuestionToken
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a section of an array.
     * @param start The beginning of the specified portion of the array.
     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    some'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Sorts an array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if first argument is less than second argument, zero if they're equal and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * [11,2,22,1].sort((a, b) => a - b)
     * ```
     */
    sort'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements
     * at begin, inclusive, up to end, exclusive.
     * @param begin The index of the beginning of the array.
     * @param end The index of the end of the array.
     */
    subarray'
      Parameter
        Identifier: 'begin'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Converts a number to a string by using the current locale.
     */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string representation of an array.
     */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      ThisType
    IndexSignature
      Parameter
        Identifier: 'index'
        NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' Uint16ArrayConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBufferLike'
    ConstructSignature
      Parameter
        Identifier: 'length'
        NumberKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      TypeParameter
        Identifier: 'TArrayBuffer'
        TypeReference
          Identifier: ' ArrayBufferLike'
        TypeReference
          Identifier: ' ArrayBuffer'
      Parameter
        Identifier: 'buffer'
        TypeReference
          Identifier: ' TArrayBuffer'
      Parameter
        Identifier: ' byteOffset'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' length'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        UnionType
          TypeReference
            Identifier: ' ArrayLike'
            NumberKeyword
          TypeReference
            Identifier: ' ArrayBuffer'
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a new array from a set of elements.
     * @param items A set of elements to include in the new array object.
     */
    of'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          NumberKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     */
    from'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
    from'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          TypeReference
            Identifier: 'T'
      Parameter
        Identifier: ' mapfn'
        FunctionType
          Parameter
            Identifier: 'v'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' k'
            NumberKeyword
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: ' Uint16ArrayConstructor'
  InterfaceDeclaration
    Identifier: ' Int32Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
      TypeReference
        Identifier: ' ArrayBufferLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' buffer'
      TypeReference
        Identifier: ' TArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteOffset'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
     * length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
     * is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
     */
    copyWithin'
      Parameter
        Identifier: 'target'
        NumberKeyword
      Parameter
        Identifier: ' start'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
     * length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
     * length+end.
     */
    fill'
      Parameter
        Identifier: 'value'
        NumberKeyword
      Parameter
        Identifier: ' start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls
     * the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          AnyKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    find'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     */
    indexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds all the elements of an array separated by the specified separator string.
     * @param separator A string used to separate one element of an array from the next in the
     * resulting String. If omitted, the array elements are separated with a comma.
     */
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     * search starts at index 0.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls a defined callback function on each element of an array, and returns an array that
     * contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    map'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an
     * argument instead of an array value.
     */
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduceRight'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Reverses the elements in an Array.
     */
    reverse'
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Sets a value or an array of values.
     * @param array A typed or untyped array of values to set.
     * @param offset The index in the current array at which the values are to be written.
     */
    set'
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      Parameter
        Identifier: ' offset'
        QuestionToken
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a section of an array.
     * @param start The beginning of the specified portion of the array.
     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    some'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Sorts an array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if first argument is less than second argument, zero if they're equal and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * [11,2,22,1].sort((a, b) => a - b)
     * ```
     */
    sort'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements
     * at begin, inclusive, up to end, exclusive.
     * @param begin The index of the beginning of the array.
     * @param end The index of the end of the array.
     */
    subarray'
      Parameter
        Identifier: 'begin'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Converts a number to a string by using the current locale.
     */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string representation of an array.
     */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      ThisType
    IndexSignature
      Parameter
        Identifier: 'index'
        NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' Int32ArrayConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBufferLike'
    ConstructSignature
      Parameter
        Identifier: 'length'
        NumberKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      TypeParameter
        Identifier: 'TArrayBuffer'
        TypeReference
          Identifier: ' ArrayBufferLike'
        TypeReference
          Identifier: ' ArrayBuffer'
      Parameter
        Identifier: 'buffer'
        TypeReference
          Identifier: ' TArrayBuffer'
      Parameter
        Identifier: ' byteOffset'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' length'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        UnionType
          TypeReference
            Identifier: ' ArrayLike'
            NumberKeyword
          TypeReference
            Identifier: ' ArrayBuffer'
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a new array from a set of elements.
     * @param items A set of elements to include in the new array object.
     */
    of'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          NumberKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     */
    from'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
    from'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          TypeReference
            Identifier: 'T'
      Parameter
        Identifier: ' mapfn'
        FunctionType
          Parameter
            Identifier: 'v'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' k'
            NumberKeyword
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Int32Array'
        TypeReference
          Identifier: ' Int32ArrayConstructor'
  InterfaceDeclaration
    Identifier: ' Uint32Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
      TypeReference
        Identifier: ' ArrayBufferLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' buffer'
      TypeReference
        Identifier: ' TArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteOffset'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
     * length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
     * is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
     */
    copyWithin'
      Parameter
        Identifier: 'target'
        NumberKeyword
      Parameter
        Identifier: ' start'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
     * length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
     * length+end.
     */
    fill'
      Parameter
        Identifier: 'value'
        NumberKeyword
      Parameter
        Identifier: ' start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls
     * the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          AnyKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    find'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the index of the first occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     */
    indexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds all the elements of an array separated by the specified separator string.
     * @param separator A string used to separate one element of an array from the next in the
     * resulting String. If omitted, the array elements are separated with a comma.
     */
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     * search starts at index 0.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls a defined callback function on each element of an array, and returns an array that
     * contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    map'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an
     * argument instead of an array value.
     */
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduceRight'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Reverses the elements in an Array.
     */
    reverse'
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Sets a value or an array of values.
     * @param array A typed or untyped array of values to set.
     * @param offset The index in the current array at which the values are to be written.
     */
    set'
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      Parameter
        Identifier: ' offset'
        QuestionToken
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a section of an array.
     * @param start The beginning of the specified portion of the array.
     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    some'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Sorts an array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if first argument is less than second argument, zero if they're equal and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * [11,2,22,1].sort((a, b) => a - b)
     * ```
     */
    sort'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements
     * at begin, inclusive, up to end, exclusive.
     * @param begin The index of the beginning of the array.
     * @param end The index of the end of the array.
     */
    subarray'
      Parameter
        Identifier: 'begin'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Converts a number to a string by using the current locale.
     */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string representation of an array.
     */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      ThisType
    IndexSignature
      Parameter
        Identifier: 'index'
        NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' Uint32ArrayConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBufferLike'
    ConstructSignature
      Parameter
        Identifier: 'length'
        NumberKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      TypeParameter
        Identifier: 'TArrayBuffer'
        TypeReference
          Identifier: ' ArrayBufferLike'
        TypeReference
          Identifier: ' ArrayBuffer'
      Parameter
        Identifier: 'buffer'
        TypeReference
          Identifier: ' TArrayBuffer'
      Parameter
        Identifier: ' byteOffset'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' length'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        UnionType
          TypeReference
            Identifier: ' ArrayLike'
            NumberKeyword
          TypeReference
            Identifier: ' ArrayBuffer'
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a new array from a set of elements.
     * @param items A set of elements to include in the new array object.
     */
    of'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          NumberKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     */
    from'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
    from'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          TypeReference
            Identifier: 'T'
      Parameter
        Identifier: ' mapfn'
        FunctionType
          Parameter
            Identifier: 'v'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' k'
            NumberKeyword
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: ' Uint32ArrayConstructor'
  InterfaceDeclaration
    Identifier: ' Float32Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
      TypeReference
        Identifier: ' ArrayBufferLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' buffer'
      TypeReference
        Identifier: ' TArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteOffset'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
     * length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
     * is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
     */
    copyWithin'
      Parameter
        Identifier: 'target'
        NumberKeyword
      Parameter
        Identifier: ' start'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
     * length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
     * length+end.
     */
    fill'
      Parameter
        Identifier: 'value'
        NumberKeyword
      Parameter
        Identifier: ' start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls
     * the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          AnyKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    find'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     */
    indexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds all the elements of an array separated by the specified separator string.
     * @param separator A string used to separate one element of an array from the next in the
     * resulting String. If omitted, the array elements are separated with a comma.
     */
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     * search starts at index 0.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls a defined callback function on each element of an array, and returns an array that
     * contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    map'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an
     * argument instead of an array value.
     */
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduceRight'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Reverses the elements in an Array.
     */
    reverse'
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Sets a value or an array of values.
     * @param array A typed or untyped array of values to set.
     * @param offset The index in the current array at which the values are to be written.
     */
    set'
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      Parameter
        Identifier: ' offset'
        QuestionToken
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a section of an array.
     * @param start The beginning of the specified portion of the array.
     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    some'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Sorts an array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if first argument is less than second argument, zero if they're equal and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * [11,2,22,1].sort((a, b) => a - b)
     * ```
     */
    sort'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements
     * at begin, inclusive, up to end, exclusive.
     * @param begin The index of the beginning of the array.
     * @param end The index of the end of the array.
     */
    subarray'
      Parameter
        Identifier: 'begin'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Converts a number to a string by using the current locale.
     */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string representation of an array.
     */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      ThisType
    IndexSignature
      Parameter
        Identifier: 'index'
        NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' Float32ArrayConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBufferLike'
    ConstructSignature
      Parameter
        Identifier: 'length'
        NumberKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      TypeParameter
        Identifier: 'TArrayBuffer'
        TypeReference
          Identifier: ' ArrayBufferLike'
        TypeReference
          Identifier: ' ArrayBuffer'
      Parameter
        Identifier: 'buffer'
        TypeReference
          Identifier: ' TArrayBuffer'
      Parameter
        Identifier: ' byteOffset'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' length'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        UnionType
          TypeReference
            Identifier: ' ArrayLike'
            NumberKeyword
          TypeReference
            Identifier: ' ArrayBuffer'
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a new array from a set of elements.
     * @param items A set of elements to include in the new array object.
     */
    of'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          NumberKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     */
    from'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
    from'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          TypeReference
            Identifier: 'T'
      Parameter
        Identifier: ' mapfn'
        FunctionType
          Parameter
            Identifier: 'v'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' k'
            NumberKeyword
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Float32Array'
        TypeReference
          Identifier: ' Float32ArrayConstructor'
  InterfaceDeclaration
    Identifier: ' Float64Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
      TypeReference
        Identifier: ' ArrayBufferLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' buffer'
      TypeReference
        Identifier: ' TArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteLength'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' byteOffset'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
     * length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
     * is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
     */
    copyWithin'
      Parameter
        Identifier: 'target'
        NumberKeyword
      Parameter
        Identifier: ' start'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    every'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
     * length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
     * length+end.
     */
    fill'
      Parameter
        Identifier: 'value'
        NumberKeyword
      Parameter
        Identifier: ' start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls
     * the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    filter'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          AnyKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    find'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ThisType
          BooleanKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     */
    indexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds all the elements of an array separated by the specified separator string.
     * @param separator A string used to separate one element of an array from the next in the
     * resulting String. If omitted, the array elements are separated with a comma.
     */
    join'
      Parameter
        Identifier: 'separator'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last occurrence of a value in an array.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     * search starts at index 0.
     */
    lastIndexOf'
      Parameter
        Identifier: 'searchElement'
        NumberKeyword
      Parameter
        Identifier: ' fromIndex'
        QuestionToken
        NumberKeyword
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' length'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls a defined callback function on each element of an array, and returns an array that
     * contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    map'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduce'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array. The return value of
     * the callback function is the accumulated result, and is provided as an argument in the next
     * call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
     * callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduce'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an
     * argument instead of an array value.
     */
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    reduceRight'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            NumberKeyword
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          NumberKeyword
      Parameter
        Identifier: ' initialValue'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result, and is provided as an
     * argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
     * the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start
     * the accumulation. The first call to the callbackfn function provides this value as an argument
     * instead of an array value.
     */
    reduceRight'
      TypeParameter
        Identifier: 'U'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'previousValue'
            TypeReference
              Identifier: ' U'
          Parameter
            Identifier: ' currentValue'
            NumberKeyword
          Parameter
            Identifier: ' currentIndex'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' initialValue'
        TypeReference
          Identifier: ' U'
      TypeReference
        Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Reverses the elements in an Array.
     */
    reverse'
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Sets a value or an array of values.
     * @param array A typed or untyped array of values to set.
     * @param offset The index in the current array at which the values are to be written.
     */
    set'
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      Parameter
        Identifier: ' offset'
        QuestionToken
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a section of an array.
     * @param start The beginning of the specified portion of the array.
     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
     */
    slice'
      Parameter
        Identifier: 'start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    some'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Sorts an array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if first argument is less than second argument, zero if they're equal and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * [11,2,22,1].sort((a, b) => a - b)
     * ```
     */
    sort'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements
     * at begin, inclusive, up to end, exclusive.
     * @param begin The index of the beginning of the array.
     * @param end The index of the end of the array.
     */
    subarray'
      Parameter
        Identifier: 'begin'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Converts a number to a string by using the current locale.
     */
    toLocaleString'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a string representation of an array.
     */
    toString'
      StringKeyword
    MethodSignature
      Identifier: '

    /** Returns the primitive value of the specified object. */
    valueOf'
      ThisType
    IndexSignature
      Parameter
        Identifier: 'index'
        NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' Float64ArrayConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBufferLike'
    ConstructSignature
      Parameter
        Identifier: 'length'
        NumberKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    ConstructSignature
      TypeParameter
        Identifier: 'TArrayBuffer'
        TypeReference
          Identifier: ' ArrayBufferLike'
        TypeReference
          Identifier: ' ArrayBuffer'
      Parameter
        Identifier: 'buffer'
        TypeReference
          Identifier: ' TArrayBuffer'
      Parameter
        Identifier: ' byteOffset'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' length'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'TArrayBuffer'
    ConstructSignature
      Parameter
        Identifier: 'array'
        UnionType
          TypeReference
            Identifier: ' ArrayLike'
            NumberKeyword
          TypeReference
            Identifier: ' ArrayBuffer'
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' BYTES_PER_ELEMENT'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a new array from a set of elements.
     * @param items A set of elements to include in the new array object.
     */
    of'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          NumberKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     */
    from'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          NumberKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an array-like or iterable object.
     * @param arrayLike An array-like or iterable object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
    from'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          TypeReference
            Identifier: 'T'
      Parameter
        Identifier: ' mapfn'
        FunctionType
          Parameter
            Identifier: 'v'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' k'
            NumberKeyword
          NumberKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Float64Array'
        TypeReference
          Identifier: ' Float64ArrayConstructor'
  ModuleDeclaration
    DeclareKeyword
    Identifier: ' Intl'
    ModuleBlock
      InterfaceDeclaration
        Identifier: ' CollatorOptions'
        PropertySignature
          Identifier: '
        usage'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        localeMatcher'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        numeric'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        caseFirst'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        sensitivity'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        collation'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        ignorePunctuation'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' ResolvedCollatorOptions'
        PropertySignature
          Identifier: '
        locale'
          StringKeyword
        PropertySignature
          Identifier: '
        usage'
          StringKeyword
        PropertySignature
          Identifier: '
        sensitivity'
          StringKeyword
        PropertySignature
          Identifier: '
        ignorePunctuation'
          BooleanKeyword
        PropertySignature
          Identifier: '
        collation'
          StringKeyword
        PropertySignature
          Identifier: '
        caseFirst'
          StringKeyword
        PropertySignature
          Identifier: '
        numeric'
          BooleanKeyword
      InterfaceDeclaration
        Identifier: ' Collator'
        MethodSignature
          Identifier: '
        compare'
          Parameter
            Identifier: 'x'
            StringKeyword
          Parameter
            Identifier: ' y'
            StringKeyword
          NumberKeyword
        MethodSignature
          Identifier: '
        resolvedOptions'
          TypeReference
            Identifier: ' ResolvedCollatorOptions'
      InterfaceDeclaration
        Identifier: ' CollatorConstructor'
        ConstructSignature
          Parameter
            Identifier: 'locales'
            QuestionToken
            UnionType
              StringKeyword
              ArrayType
                StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' CollatorOptions'
          TypeReference
            Identifier: ' Collator'
        CallSignature
          Parameter
            Identifier: 'locales'
            QuestionToken
            UnionType
              StringKeyword
              ArrayType
                StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' CollatorOptions'
          TypeReference
            Identifier: ' Collator'
        MethodSignature
          Identifier: '
        supportedLocalesOf'
          Parameter
            Identifier: 'locales'
            UnionType
              StringKeyword
              ArrayType
                StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' CollatorOptions'
          ArrayType
            StringKeyword
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' Collator'
            TypeReference
              Identifier: ' CollatorConstructor'
      InterfaceDeclaration
        Identifier: ' NumberFormatOptionsStyleRegistry'
        PropertySignature
          Identifier: '
        decimal'
          NeverKeyword
        PropertySignature
          Identifier: '
        percent'
          NeverKeyword
        PropertySignature
          Identifier: '
        currency'
          NeverKeyword
      TypeAliasDeclaration
        Identifier: ' NumberFormatOptionsStyle'
        TypeOperator
          TypeReference
            Identifier: ' NumberFormatOptionsStyleRegistry'
      InterfaceDeclaration
        Identifier: ' NumberFormatOptionsCurrencyDisplayRegistry'
        PropertySignature
          Identifier: '
        code'
          NeverKeyword
        PropertySignature
          Identifier: '
        symbol'
          NeverKeyword
        PropertySignature
          Identifier: '
        name'
          NeverKeyword
      TypeAliasDeclaration
        Identifier: ' NumberFormatOptionsCurrencyDisplay'
        TypeOperator
          TypeReference
            Identifier: ' NumberFormatOptionsCurrencyDisplayRegistry'
      InterfaceDeclaration
        Identifier: ' NumberFormatOptionsUseGroupingRegistry'
      TypeAliasDeclaration
        Identifier: ' NumberFormatOptionsUseGrouping'
        ConditionalType
          TypeLiteral
          TypeReference
            Identifier: ' NumberFormatOptionsUseGroupingRegistry'
          BooleanKeyword
          UnionType
            TypeOperator
              TypeReference
                Identifier: ' NumberFormatOptionsUseGroupingRegistry'
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            BooleanKeyword
      TypeAliasDeclaration
        Identifier: ' ResolvedNumberFormatOptionsUseGrouping'
        ConditionalType
          TypeLiteral
          TypeReference
            Identifier: ' NumberFormatOptionsUseGroupingRegistry'
          BooleanKeyword
          UnionType
            TypeOperator
              TypeReference
                Identifier: ' NumberFormatOptionsUseGroupingRegistry'
            LiteralType
              FalseKeyword
      InterfaceDeclaration
        Identifier: ' NumberFormatOptions'
        PropertySignature
          Identifier: '
        localeMatcher'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        style'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' NumberFormatOptionsStyle'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        currency'
          QuestionToken
          UnionType
            StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        currencyDisplay'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' NumberFormatOptionsCurrencyDisplay'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        useGrouping'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' NumberFormatOptionsUseGrouping'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        minimumIntegerDigits'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        minimumFractionDigits'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        maximumFractionDigits'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        minimumSignificantDigits'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        maximumSignificantDigits'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' ResolvedNumberFormatOptions'
        PropertySignature
          Identifier: '
        locale'
          StringKeyword
        PropertySignature
          Identifier: '
        numberingSystem'
          StringKeyword
        PropertySignature
          Identifier: '
        style'
          TypeReference
            Identifier: ' NumberFormatOptionsStyle'
        PropertySignature
          Identifier: '
        currency'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
        currencyDisplay'
          QuestionToken
          TypeReference
            Identifier: ' NumberFormatOptionsCurrencyDisplay'
        PropertySignature
          Identifier: '
        minimumIntegerDigits'
          NumberKeyword
        PropertySignature
          Identifier: '
        minimumFractionDigits'
          QuestionToken
          NumberKeyword
        PropertySignature
          Identifier: '
        maximumFractionDigits'
          QuestionToken
          NumberKeyword
        PropertySignature
          Identifier: '
        minimumSignificantDigits'
          QuestionToken
          NumberKeyword
        PropertySignature
          Identifier: '
        maximumSignificantDigits'
          QuestionToken
          NumberKeyword
        PropertySignature
          Identifier: '
        useGrouping'
          TypeReference
            Identifier: ' ResolvedNumberFormatOptionsUseGrouping'
      InterfaceDeclaration
        Identifier: ' NumberFormat'
        MethodSignature
          Identifier: '
        format'
          Parameter
            Identifier: 'value'
            NumberKeyword
          StringKeyword
        MethodSignature
          Identifier: '
        resolvedOptions'
          TypeReference
            Identifier: ' ResolvedNumberFormatOptions'
      InterfaceDeclaration
        Identifier: ' NumberFormatConstructor'
        ConstructSignature
          Parameter
            Identifier: 'locales'
            QuestionToken
            UnionType
              StringKeyword
              ArrayType
                StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' NumberFormatOptions'
          TypeReference
            Identifier: ' NumberFormat'
        CallSignature
          Parameter
            Identifier: 'locales'
            QuestionToken
            UnionType
              StringKeyword
              ArrayType
                StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' NumberFormatOptions'
          TypeReference
            Identifier: ' NumberFormat'
        MethodSignature
          Identifier: '
        supportedLocalesOf'
          Parameter
            Identifier: 'locales'
            UnionType
              StringKeyword
              ArrayType
                StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' NumberFormatOptions'
          ArrayType
            StringKeyword
        PropertySignature
          ReadonlyKeyword
          Identifier: ' prototype'
          TypeReference
            Identifier: ' NumberFormat'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' NumberFormat'
            TypeReference
              Identifier: ' NumberFormatConstructor'
      InterfaceDeclaration
        Identifier: ' DateTimeFormatOptions'
        PropertySignature
          Identifier: '
        localeMatcher'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        weekday'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        era'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        year'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        month'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        day'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        hour'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        minute'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        second'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        timeZoneName'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        formatMatcher'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            UndefinedKeyword
        PropertySignature
          Identifier: '
        hour12'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        timeZone'
          QuestionToken
          UnionType
            StringKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' ResolvedDateTimeFormatOptions'
        PropertySignature
          Identifier: '
        locale'
          StringKeyword
        PropertySignature
          Identifier: '
        calendar'
          StringKeyword
        PropertySignature
          Identifier: '
        numberingSystem'
          StringKeyword
        PropertySignature
          Identifier: '
        timeZone'
          StringKeyword
        PropertySignature
          Identifier: '
        hour12'
          QuestionToken
          BooleanKeyword
        PropertySignature
          Identifier: '
        weekday'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
        era'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
        year'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
        month'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
        day'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
        hour'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
        minute'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
        second'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
        timeZoneName'
          QuestionToken
          StringKeyword
      InterfaceDeclaration
        Identifier: ' DateTimeFormat'
        MethodSignature
          Identifier: '
        format'
          Parameter
            Identifier: 'date'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' Date'
              NumberKeyword
          StringKeyword
        MethodSignature
          Identifier: '
        resolvedOptions'
          TypeReference
            Identifier: ' ResolvedDateTimeFormatOptions'
      InterfaceDeclaration
        Identifier: ' DateTimeFormatConstructor'
        ConstructSignature
          Parameter
            Identifier: 'locales'
            QuestionToken
            UnionType
              StringKeyword
              ArrayType
                StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' DateTimeFormatOptions'
          TypeReference
            Identifier: ' DateTimeFormat'
        CallSignature
          Parameter
            Identifier: 'locales'
            QuestionToken
            UnionType
              StringKeyword
              ArrayType
                StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' DateTimeFormatOptions'
          TypeReference
            Identifier: ' DateTimeFormat'
        MethodSignature
          Identifier: '
        supportedLocalesOf'
          Parameter
            Identifier: 'locales'
            UnionType
              StringKeyword
              ArrayType
                StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' DateTimeFormatOptions'
          ArrayType
            StringKeyword
        PropertySignature
          ReadonlyKeyword
          Identifier: ' prototype'
          TypeReference
            Identifier: ' DateTimeFormat'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' DateTimeFormat'
            TypeReference
              Identifier: ' DateTimeFormatConstructor'
  InterfaceDeclaration
    Identifier: ' String'
    MethodSignature
      Identifier: '
    /**
     * Determines whether two strings are equivalent in the current or specified locale.
     * @param that String to compare to target string
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.
     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.
     */
    localeCompare'
      Parameter
        Identifier: 'that'
        StringKeyword
      Parameter
        Identifier: ' locales'
        QuestionToken
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'CollatorOptions'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' Number'
    MethodSignature
      Identifier: '
    /**
     * Converts a number to a string by using the current or specified locale.
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
     * @param options An object that contains one or more properties that specify comparison options.
     */
    toLocaleString'
      Parameter
        Identifier: 'locales'
        QuestionToken
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'NumberFormatOptions'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Date'
    MethodSignature
      Identifier: '
    /**
     * Converts a date and time to a string by using the current or specified locale.
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
     * @param options An object that contains one or more properties that specify comparison options.
     */
    toLocaleString'
      Parameter
        Identifier: 'locales'
        QuestionToken
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'DateTimeFormatOptions'
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Converts a date to a string by using the current or specified locale.
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
     * @param options An object that contains one or more properties that specify comparison options.
     */
    toLocaleDateString'
      Parameter
        Identifier: 'locales'
        QuestionToken
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'DateTimeFormatOptions'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Converts a time to a string by using the current or specified locale.
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
     * @param options An object that contains one or more properties that specify comparison options.
     */
    toLocaleTimeString'
      Parameter
        Identifier: 'locales'
        QuestionToken
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'DateTimeFormatOptions'
      StringKeyword
