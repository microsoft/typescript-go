SourceFile
  InterfaceDeclaration
    Identifier: ' WeakRef'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' WeakKey'
    PropertySignature
      ReadonlyKeyword
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'toStringTag'
      LiteralType
        StringLiteral
    MethodSignature
      Identifier: '

    /**
     * Returns the WeakRef instance's target value, or undefined if the target value has been
     * reclaimed.
     * In es2023 the value can be either a symbol or an object, in previous versions only object is permissible.
     */
    deref'
      UnionType
        TypeReference
          Identifier: ' T'
        UndefinedKeyword
  InterfaceDeclaration
    Identifier: ' WeakRefConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' WeakRef'
        AnyKeyword
    ConstructSignature
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' WeakKey'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' WeakRef'
        TypeReference
          Identifier: 'T'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' WeakRef'
        TypeReference
          Identifier: ' WeakRefConstructor'
  InterfaceDeclaration
    Identifier: ' FinalizationRegistry'
    TypeParameter
      Identifier: 'T'
    PropertySignature
      ReadonlyKeyword
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'toStringTag'
      LiteralType
        StringLiteral
    MethodSignature
      Identifier: '

    /**
     * Registers a value with the registry.
     * In es2023 the value can be either a symbol or an object, in previous versions only object is permissible.
     * @param target The target value to register.
     * @param heldValue The value to pass to the finalizer for this value. This cannot be the
     * target value.
     * @param unregisterToken The token to pass to the unregister method to unregister the target
     * value. If not provided, the target cannot be unregistered.
     */
    register'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' WeakKey'
      Parameter
        Identifier: ' heldValue'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' unregisterToken'
        QuestionToken
        TypeReference
          Identifier: ' WeakKey'
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Unregisters a value from the registry.
     * In es2023 the value can be either a symbol or an object, in previous versions only object is permissible.
     * @param unregisterToken The token that was used as the unregisterToken argument when calling
     * register to register the target value.
     */
    unregister'
      Parameter
        Identifier: 'unregisterToken'
        TypeReference
          Identifier: ' WeakKey'
      BooleanKeyword
  InterfaceDeclaration
    Identifier: ' FinalizationRegistryConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' FinalizationRegistry'
        AnyKeyword
    ConstructSignature
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'cleanupCallback'
        FunctionType
          Parameter
            Identifier: 'heldValue'
            TypeReference
              Identifier: ' T'
          VoidKeyword
      TypeReference
        Identifier: ' FinalizationRegistry'
        TypeReference
          Identifier: 'T'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' FinalizationRegistry'
        TypeReference
          Identifier: ' FinalizationRegistryConstructor'
