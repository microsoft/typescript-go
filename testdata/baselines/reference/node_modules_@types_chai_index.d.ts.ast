SourceFile
  ModuleDeclaration
    DeclareKeyword
    Identifier: ' Chai'
    ModuleBlock
      TypeAliasDeclaration
        Identifier: ' Message'
        UnionType
          StringKeyword
          ParenthesizedType
            FunctionType
              StringKeyword
      TypeAliasDeclaration
        Identifier: ' ObjectProperty'
        UnionType
          StringKeyword
          SymbolKeyword
          NumberKeyword
      InterfaceDeclaration
        Identifier: ' PathInfo'
        PropertySignature
          Identifier: '
        parent'
          ObjectKeyword
        PropertySignature
          Identifier: '
        name'
          StringKeyword
        PropertySignature
          Identifier: '
        value'
          QuestionToken
          AnyKeyword
        PropertySignature
          Identifier: '
        exists'
          BooleanKeyword
      InterfaceDeclaration
        Identifier: ' Constructor'
        TypeParameter
          Identifier: 'T'
        ConstructSignature
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          TypeReference
            Identifier: ' T'
      InterfaceDeclaration
        Identifier: ' ErrorConstructor'
        ConstructSignature
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          TypeReference
            Identifier: ' Error'
      InterfaceDeclaration
        Identifier: ' ChaiUtils'
        MethodSignature
          Identifier: '
        addChainableMethod'
          Parameter
            Identifier: '
            // object to define the method on, e.g. chai.Assertion.prototype
            ctx'
            ObjectKeyword
          Parameter
            Identifier: '
            // method name
            name'
            StringKeyword
          Parameter
            Identifier: '
            // method itself; any arguments
            method'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          Parameter
            Identifier: '
            // called when property is accessed
            chainingBehavior'
            QuestionToken
            FunctionType
              VoidKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        overwriteChainableMethod'
          Parameter
            Identifier: '
            ctx'
            ObjectKeyword
          Parameter
            Identifier: '
            name'
            StringKeyword
          Parameter
            Identifier: '
            method'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          Parameter
            Identifier: '
            chainingBehavior'
            QuestionToken
            FunctionType
              VoidKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        addLengthGuard'
          Parameter
            Identifier: '
            fn'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: '
            assertionName'
            StringKeyword
          Parameter
            Identifier: '
            isChainable'
            BooleanKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        addMethod'
          Parameter
            Identifier: 'ctx'
            ObjectKeyword
          Parameter
            Identifier: ' name'
            StringKeyword
          Parameter
            Identifier: ' method'
            TypeReference
              Identifier: ' Function'
          VoidKeyword
        MethodSignature
          Identifier: '
        addProperty'
          Parameter
            Identifier: 'ctx'
            ObjectKeyword
          Parameter
            Identifier: ' name'
            StringKeyword
          Parameter
            Identifier: ' getter'
            FunctionType
              AnyKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        overwriteMethod'
          Parameter
            Identifier: 'ctx'
            ObjectKeyword
          Parameter
            Identifier: ' name'
            StringKeyword
          Parameter
            Identifier: ' method'
            TypeReference
              Identifier: ' Function'
          VoidKeyword
        MethodSignature
          Identifier: '
        overwriteProperty'
          Parameter
            Identifier: 'ctx'
            ObjectKeyword
          Parameter
            Identifier: ' name'
            StringKeyword
          Parameter
            Identifier: ' getter'
            FunctionType
              Parameter
                Identifier: 'this'
                TypeReference
                  Identifier: ' AssertionStatic'
              Parameter
                Identifier: ' _super'
                AnyKeyword
              AnyKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        compareByInspect'
          Parameter
            Identifier: 'a'
            ObjectKeyword
          Parameter
            Identifier: ' b'
            ObjectKeyword
          UnionType
            LiteralType
              PrefixUnaryExpression
                NumericLiteral
            LiteralType
              NumericLiteral
        MethodSignature
          Identifier: '
        expectTypes'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          Parameter
            Identifier: ' types'
            ArrayType
              StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        flag'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          Parameter
            Identifier: ' key'
            StringKeyword
          Parameter
            Identifier: ' value'
            QuestionToken
            AnyKeyword
          AnyKeyword
        MethodSignature
          Identifier: '
        getActual'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          Parameter
            Identifier: ' args'
            TypeReference
              Identifier: ' AssertionArgs'
          AnyKeyword
        MethodSignature
          Identifier: '
        getProperties'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          ArrayType
            StringKeyword
        MethodSignature
          Identifier: '
        getEnumerableProperties'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          ArrayType
            StringKeyword
        MethodSignature
          Identifier: '
        getOwnEnumerablePropertySymbols'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          ArrayType
            SymbolKeyword
        MethodSignature
          Identifier: '
        getOwnEnumerableProperties'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          TypeReference
            Identifier: ' Array'
            UnionType
              StringKeyword
              SymbolKeyword
        MethodSignature
          Identifier: '
        getMessage'
          Parameter
            Identifier: 'errorLike'
            UnionType
              TypeReference
                Identifier: ' Error'
              StringKeyword
          StringKeyword
        MethodSignature
          Identifier: '
        getMessage'
          Parameter
            Identifier: 'obj'
            AnyKeyword
          Parameter
            Identifier: ' args'
            TypeReference
              Identifier: ' AssertionArgs'
          StringKeyword
        MethodSignature
          Identifier: '
        inspect'
          Parameter
            Identifier: 'obj'
            AnyKeyword
          Parameter
            Identifier: ' showHidden'
            QuestionToken
            BooleanKeyword
          Parameter
            Identifier: ' depth'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: ' colors'
            QuestionToken
            BooleanKeyword
          StringKeyword
        MethodSignature
          Identifier: '
        isProxyEnabled'
          BooleanKeyword
        MethodSignature
          Identifier: '
        objDisplay'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        proxify'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          Parameter
            Identifier: ' nonChainableMethodName'
            StringKeyword
          ObjectKeyword
        MethodSignature
          Identifier: '
        test'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          Parameter
            Identifier: ' args'
            TypeReference
              Identifier: ' AssertionArgs'
          BooleanKeyword
        MethodSignature
          Identifier: '
        transferFlags'
          Parameter
            Identifier: 'assertion'
            TypeReference
              Identifier: ' Assertion'
          Parameter
            Identifier: ' obj'
            ObjectKeyword
          Parameter
            Identifier: ' includeAll'
            QuestionToken
            BooleanKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        compatibleInstance'
          Parameter
            Identifier: 'thrown'
            TypeReference
              Identifier: ' Error'
          Parameter
            Identifier: ' errorLike'
            UnionType
              TypeReference
                Identifier: ' Error'
              TypeReference
                Identifier: ' ErrorConstructor'
          BooleanKeyword
        MethodSignature
          Identifier: '
        compatibleConstructor'
          Parameter
            Identifier: 'thrown'
            TypeReference
              Identifier: ' Error'
          Parameter
            Identifier: ' errorLike'
            UnionType
              TypeReference
                Identifier: ' Error'
              TypeReference
                Identifier: ' ErrorConstructor'
          BooleanKeyword
        MethodSignature
          Identifier: '
        compatibleMessage'
          Parameter
            Identifier: 'thrown'
            TypeReference
              Identifier: ' Error'
          Parameter
            Identifier: ' errMatcher'
            UnionType
              StringKeyword
              TypeReference
                Identifier: ' RegExp'
          BooleanKeyword
        MethodSignature
          Identifier: '
        getConstructorName'
          Parameter
            Identifier: 'constructorFn'
            TypeReference
              Identifier: ' Function'
          StringKeyword
        MethodSignature
          Identifier: '
        getFuncName'
          Parameter
            Identifier: 'constructorFn'
            TypeReference
              Identifier: ' Function'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        MethodSignature
          Identifier: '

        // Reexports from pathval:
        hasProperty'
          Parameter
            Identifier: 'obj'
            UnionType
              ObjectKeyword
              UndefinedKeyword
              LiteralType
                NullKeyword
          Parameter
            Identifier: ' name'
            TypeReference
              Identifier: ' ObjectProperty'
          BooleanKeyword
        MethodSignature
          Identifier: '
        getPathInfo'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          Parameter
            Identifier: ' path'
            StringKeyword
          TypeReference
            Identifier: ' PathInfo'
        MethodSignature
          Identifier: '
        getPathValue'
          Parameter
            Identifier: 'obj'
            ObjectKeyword
          Parameter
            Identifier: ' path'
            StringKeyword
          UnionType
            ObjectKeyword
            UndefinedKeyword
      TypeAliasDeclaration
        Identifier: ' ChaiPlugin'
        FunctionType
          Parameter
            Identifier: 'chai'
            TypeReference
              Identifier: ' ChaiStatic'
          Parameter
            Identifier: ' utils'
            TypeReference
              Identifier: ' ChaiUtils'
          VoidKeyword
      InterfaceDeclaration
        Identifier: ' ChaiStatic'
        PropertySignature
          Identifier: '
        expect'
          TypeReference
            Identifier: ' ExpectStatic'
        MethodSignature
          Identifier: '
        should'
          TypeReference
            Identifier: ' Should'
        MethodSignature
          Identifier: '
        /**
         * Provides a way to extend the internals of Chai
         */
        use'
          Parameter
            Identifier: 'fn'
            TypeReference
              Identifier: ' ChaiPlugin'
          TypeReference
            Identifier: ' ChaiStatic'
        PropertySignature
          Identifier: '
        util'
          TypeReference
            Identifier: ' ChaiUtils'
        PropertySignature
          Identifier: '
        assert'
          TypeReference
            Identifier: ' AssertStatic'
        PropertySignature
          Identifier: '
        config'
          TypeReference
            Identifier: ' Config'
        PropertySignature
          Identifier: '
        Assertion'
          TypeReference
            Identifier: ' AssertionStatic'
        PropertySignature
          Identifier: '
        AssertionError'
          TypeQuery
            Identifier: ' AssertionError'
        PropertySignature
          Identifier: '
        version'
          StringKeyword
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' ExpectStatic'
        CallSignature
          Parameter
            Identifier: 'val'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
        MethodSignature
          Identifier: '
        fail'
          Parameter
            Identifier: 'message'
            QuestionToken
            StringKeyword
          NeverKeyword
        MethodSignature
          Identifier: '
        fail'
          Parameter
            Identifier: 'actual'
            AnyKeyword
          Parameter
            Identifier: ' expected'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          Parameter
            Identifier: ' operator'
            QuestionToken
            TypeReference
              Identifier: ' Operator'
          NeverKeyword
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' AssertStatic'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Assert'
      TypeAliasDeclaration
        Identifier: ' AssertionArgs'
        TupleType
          AnyKeyword
          TypeReference
            Identifier: ' // expression to be tested
        Message'
          TypeReference
            Identifier: ' // message or function that returns message to display if expression fails
        Message'
          OptionalType
            AnyKeyword
          OptionalType
            AnyKeyword
          OptionalType
            BooleanKeyword
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' AssertionPrototype'
        MethodSignature
          Identifier: '
        assert'
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' AssertionArgs'
          VoidKeyword
        PropertySignature
          Identifier: '
        _obj'
          AnyKeyword
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' AssertionStatic'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' AssertionPrototype'
        PropertySignature
          Identifier: '
        prototype'
          TypeReference
            Identifier: ' AssertionPrototype'
        ConstructSignature
          Parameter
            Identifier: 'target'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          Parameter
            Identifier: ' ssfi'
            QuestionToken
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' lockSsfi'
            QuestionToken
            BooleanKeyword
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '

        // Deprecated properties:
        includeStack'
          BooleanKeyword
        PropertySignature
          Identifier: '
        showDiff'
          BooleanKeyword
        MethodSignature
          Identifier: '

        // Partials of functions on ChaiUtils:
        addProperty'
          Parameter
            Identifier: 'name'
            StringKeyword
          Parameter
            Identifier: ' getter'
            FunctionType
              Parameter
                Identifier: 'this'
                TypeReference
                  Identifier: ' AssertionStatic'
              AnyKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        addMethod'
          Parameter
            Identifier: 'name'
            StringKeyword
          Parameter
            Identifier: ' method'
            FunctionType
              Parameter
                Identifier: 'this'
                TypeReference
                  Identifier: ' AssertionStatic'
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              AnyKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        addChainableMethod'
          Parameter
            Identifier: '
            name'
            StringKeyword
          Parameter
            Identifier: '
            method'
            FunctionType
              Parameter
                Identifier: 'this'
                TypeReference
                  Identifier: ' AssertionStatic'
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          Parameter
            Identifier: '
            chainingBehavior'
            QuestionToken
            FunctionType
              VoidKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        overwriteProperty'
          Parameter
            Identifier: 'name'
            StringKeyword
          Parameter
            Identifier: ' getter'
            FunctionType
              Parameter
                Identifier: 'this'
                TypeReference
                  Identifier: ' AssertionStatic'
              Parameter
                Identifier: ' _super'
                AnyKeyword
              AnyKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        overwriteMethod'
          Parameter
            Identifier: 'name'
            StringKeyword
          Parameter
            Identifier: ' method'
            FunctionType
              Parameter
                Identifier: 'this'
                TypeReference
                  Identifier: ' AssertionStatic'
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              AnyKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        overwriteChainableMethod'
          Parameter
            Identifier: '
            name'
            StringKeyword
          Parameter
            Identifier: '
            method'
            FunctionType
              Parameter
                Identifier: 'this'
                TypeReference
                  Identifier: ' AssertionStatic'
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          Parameter
            Identifier: '
            chainingBehavior'
            QuestionToken
            FunctionType
              VoidKeyword
          VoidKeyword
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' Operator'
        StringKeyword
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' OperatorComparable'
        UnionType
          BooleanKeyword
          LiteralType
            NullKeyword
          NumberKeyword
          StringKeyword
          UndefinedKeyword
          TypeReference
            Identifier: ' Date'
      InterfaceDeclaration
        Identifier: ' ShouldAssertion'
        MethodSignature
          Identifier: '
        equal'
          Parameter
            Identifier: 'value1'
            AnyKeyword
          Parameter
            Identifier: ' value2'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        PropertySignature
          Identifier: '
        Throw'
          TypeReference
            Identifier: ' ShouldThrow'
        PropertySignature
          Identifier: '
        throw'
          TypeReference
            Identifier: ' ShouldThrow'
        MethodSignature
          Identifier: '
        exist'
          Parameter
            Identifier: 'value'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
      InterfaceDeclaration
        Identifier: ' Should'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' ShouldAssertion'
        PropertySignature
          Identifier: '
        not'
          TypeReference
            Identifier: ' ShouldAssertion'
        MethodSignature
          Identifier: '
        fail'
          Parameter
            Identifier: 'message'
            QuestionToken
            StringKeyword
          NeverKeyword
        MethodSignature
          Identifier: '
        fail'
          Parameter
            Identifier: 'actual'
            AnyKeyword
          Parameter
            Identifier: ' expected'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          Parameter
            Identifier: ' operator'
            QuestionToken
            TypeReference
              Identifier: ' Operator'
          NeverKeyword
      InterfaceDeclaration
        Identifier: ' ShouldThrow'
        CallSignature
          Parameter
            Identifier: 'actual'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' expected'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: ' RegExp'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        CallSignature
          Parameter
            Identifier: 'actual'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' constructor'
            UnionType
              TypeReference
                Identifier: ' Error'
              TypeReference
                Identifier: ' Function'
          Parameter
            Identifier: ' expected'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: ' RegExp'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
      InterfaceDeclaration
        Identifier: ' Assertion'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' LanguageChains'
          ExpressionWithTypeArguments
            Identifier: ' NumericComparison'
          ExpressionWithTypeArguments
            Identifier: ' TypeComparison'
        PropertySignature
          Identifier: '
        not'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        deep'
          TypeReference
            Identifier: ' Deep'
        PropertySignature
          Identifier: '
        ordered'
          TypeReference
            Identifier: ' Ordered'
        PropertySignature
          Identifier: '
        nested'
          TypeReference
            Identifier: ' Nested'
        PropertySignature
          Identifier: '
        own'
          TypeReference
            Identifier: ' Own'
        PropertySignature
          Identifier: '
        any'
          TypeReference
            Identifier: ' KeyFilter'
        PropertySignature
          Identifier: '
        all'
          TypeReference
            Identifier: ' KeyFilter'
        PropertySignature
          Identifier: '
        a'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        an'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        include'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        includes'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        contain'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        contains'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        ok'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        true'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        false'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        null'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        undefined'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        NaN'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        exist'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        empty'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        arguments'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        Arguments'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        finite'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        equal'
          TypeReference
            Identifier: ' Equal'
        PropertySignature
          Identifier: '
        equals'
          TypeReference
            Identifier: ' Equal'
        PropertySignature
          Identifier: '
        eq'
          TypeReference
            Identifier: ' Equal'
        PropertySignature
          Identifier: '
        eql'
          TypeReference
            Identifier: ' Equal'
        PropertySignature
          Identifier: '
        eqls'
          TypeReference
            Identifier: ' Equal'
        PropertySignature
          Identifier: '
        property'
          TypeReference
            Identifier: ' Property'
        PropertySignature
          Identifier: '
        ownProperty'
          TypeReference
            Identifier: ' Property'
        PropertySignature
          Identifier: '
        haveOwnProperty'
          TypeReference
            Identifier: ' Property'
        PropertySignature
          Identifier: '
        ownPropertyDescriptor'
          TypeReference
            Identifier: ' OwnPropertyDescriptor'
        PropertySignature
          Identifier: '
        haveOwnPropertyDescriptor'
          TypeReference
            Identifier: ' OwnPropertyDescriptor'
        PropertySignature
          Identifier: '
        length'
          TypeReference
            Identifier: ' Length'
        PropertySignature
          Identifier: '
        lengthOf'
          TypeReference
            Identifier: ' Length'
        PropertySignature
          Identifier: '
        match'
          TypeReference
            Identifier: ' Match'
        PropertySignature
          Identifier: '
        matches'
          TypeReference
            Identifier: ' Match'
        MethodSignature
          Identifier: '
        string'
          Parameter
            Identifier: 'string'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        keys'
          TypeReference
            Identifier: ' Keys'
        MethodSignature
          Identifier: '
        key'
          Parameter
            Identifier: 'string'
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        throw'
          TypeReference
            Identifier: ' Throw'
        PropertySignature
          Identifier: '
        throws'
          TypeReference
            Identifier: ' Throw'
        PropertySignature
          Identifier: '
        Throw'
          TypeReference
            Identifier: ' Throw'
        PropertySignature
          Identifier: '
        respondTo'
          TypeReference
            Identifier: ' RespondTo'
        PropertySignature
          Identifier: '
        respondsTo'
          TypeReference
            Identifier: ' RespondTo'
        PropertySignature
          Identifier: '
        itself'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        satisfy'
          TypeReference
            Identifier: ' Satisfy'
        PropertySignature
          Identifier: '
        satisfies'
          TypeReference
            Identifier: ' Satisfy'
        PropertySignature
          Identifier: '
        closeTo'
          TypeReference
            Identifier: ' CloseTo'
        PropertySignature
          Identifier: '
        approximately'
          TypeReference
            Identifier: ' CloseTo'
        PropertySignature
          Identifier: '
        members'
          TypeReference
            Identifier: ' Members'
        PropertySignature
          Identifier: '
        increase'
          TypeReference
            Identifier: ' PropertyChange'
        PropertySignature
          Identifier: '
        increases'
          TypeReference
            Identifier: ' PropertyChange'
        PropertySignature
          Identifier: '
        decrease'
          TypeReference
            Identifier: ' PropertyChange'
        PropertySignature
          Identifier: '
        decreases'
          TypeReference
            Identifier: ' PropertyChange'
        PropertySignature
          Identifier: '
        change'
          TypeReference
            Identifier: ' PropertyChange'
        PropertySignature
          Identifier: '
        changes'
          TypeReference
            Identifier: ' PropertyChange'
        PropertySignature
          Identifier: '
        extensible'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        sealed'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        frozen'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        oneOf'
          TypeReference
            Identifier: ' OneOf'
      InterfaceDeclaration
        Identifier: ' LanguageChains'
        PropertySignature
          Identifier: '
        to'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        be'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        been'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        is'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        that'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        which'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        and'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        has'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        have'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        with'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        at'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        of'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        same'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        but'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        does'
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' NumericComparison'
        PropertySignature
          Identifier: '
        above'
          TypeReference
            Identifier: ' NumberComparer'
        PropertySignature
          Identifier: '
        gt'
          TypeReference
            Identifier: ' NumberComparer'
        PropertySignature
          Identifier: '
        greaterThan'
          TypeReference
            Identifier: ' NumberComparer'
        PropertySignature
          Identifier: '
        least'
          TypeReference
            Identifier: ' NumberComparer'
        PropertySignature
          Identifier: '
        gte'
          TypeReference
            Identifier: ' NumberComparer'
        PropertySignature
          Identifier: '
        greaterThanOrEqual'
          TypeReference
            Identifier: ' NumberComparer'
        PropertySignature
          Identifier: '
        below'
          TypeReference
            Identifier: ' NumberComparer'
        PropertySignature
          Identifier: '
        lt'
          TypeReference
            Identifier: ' NumberComparer'
        PropertySignature
          Identifier: '
        lessThan'
          TypeReference
            Identifier: ' NumberComparer'
        PropertySignature
          Identifier: '
        most'
          TypeReference
            Identifier: ' NumberComparer'
        PropertySignature
          Identifier: '
        lte'
          TypeReference
            Identifier: ' NumberComparer'
        PropertySignature
          Identifier: '
        lessThanOrEqual'
          TypeReference
            Identifier: ' NumberComparer'
        MethodSignature
          Identifier: '
        within'
          Parameter
            Identifier: 'start'
            NumberKeyword
          Parameter
            Identifier: ' finish'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
        MethodSignature
          Identifier: '
        within'
          Parameter
            Identifier: 'start'
            TypeReference
              Identifier: ' Date'
          Parameter
            Identifier: ' finish'
            TypeReference
              Identifier: ' Date'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' NumberComparer'
        CallSignature
          Parameter
            Identifier: 'value'
            UnionType
              NumberKeyword
              TypeReference
                Identifier: ' Date'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' TypeComparison'
        CallSignature
          Parameter
            Identifier: 'type'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        instanceof'
          TypeReference
            Identifier: ' InstanceOf'
        PropertySignature
          Identifier: '
        instanceOf'
          TypeReference
            Identifier: ' InstanceOf'
      InterfaceDeclaration
        Identifier: ' InstanceOf'
        CallSignature
          Parameter
            Identifier: 'constructor'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' CloseTo'
        CallSignature
          Parameter
            Identifier: 'expected'
            NumberKeyword
          Parameter
            Identifier: ' delta'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' Nested'
        PropertySignature
          Identifier: '
        include'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        includes'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        contain'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        contains'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        property'
          TypeReference
            Identifier: ' Property'
        PropertySignature
          Identifier: '
        members'
          TypeReference
            Identifier: ' Members'
      InterfaceDeclaration
        Identifier: ' Own'
        PropertySignature
          Identifier: '
        include'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        includes'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        contain'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        contains'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        property'
          TypeReference
            Identifier: ' Property'
      InterfaceDeclaration
        Identifier: ' Deep'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' KeyFilter'
        PropertySignature
          Identifier: '
        be'
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        equal'
          TypeReference
            Identifier: ' Equal'
        PropertySignature
          Identifier: '
        equals'
          TypeReference
            Identifier: ' Equal'
        PropertySignature
          Identifier: '
        eq'
          TypeReference
            Identifier: ' Equal'
        PropertySignature
          Identifier: '
        include'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        includes'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        contain'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        contains'
          TypeReference
            Identifier: ' Include'
        PropertySignature
          Identifier: '
        property'
          TypeReference
            Identifier: ' Property'
        PropertySignature
          Identifier: '
        ordered'
          TypeReference
            Identifier: ' Ordered'
        PropertySignature
          Identifier: '
        nested'
          TypeReference
            Identifier: ' Nested'
        PropertySignature
          Identifier: '
        oneOf'
          TypeReference
            Identifier: ' OneOf'
        PropertySignature
          Identifier: '
        own'
          TypeReference
            Identifier: ' Own'
      InterfaceDeclaration
        Identifier: ' Ordered'
        PropertySignature
          Identifier: '
        members'
          TypeReference
            Identifier: ' Members'
      InterfaceDeclaration
        Identifier: ' KeyFilter'
        PropertySignature
          Identifier: '
        keys'
          TypeReference
            Identifier: ' Keys'
        PropertySignature
          Identifier: '
        members'
          TypeReference
            Identifier: ' Members'
      InterfaceDeclaration
        Identifier: ' Equal'
        CallSignature
          Parameter
            Identifier: 'value'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' Property'
        CallSignature
          Parameter
            Identifier: 'name'
            UnionType
              StringKeyword
              SymbolKeyword
          Parameter
            Identifier: ' value'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
        CallSignature
          Parameter
            Identifier: 'name'
            UnionType
              StringKeyword
              SymbolKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' OwnPropertyDescriptor'
        CallSignature
          Parameter
            Identifier: 'name'
            UnionType
              StringKeyword
              SymbolKeyword
          Parameter
            Identifier: ' descriptor'
            TypeReference
              Identifier: ' PropertyDescriptor'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
        CallSignature
          Parameter
            Identifier: 'name'
            UnionType
              StringKeyword
              SymbolKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' Length'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' LanguageChains'
          ExpressionWithTypeArguments
            Identifier: ' NumericComparison'
        CallSignature
          Parameter
            Identifier: 'length'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' Include'
        CallSignature
          Parameter
            Identifier: 'value'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
        PropertySignature
          Identifier: '
        keys'
          TypeReference
            Identifier: ' Keys'
        PropertySignature
          Identifier: '
        deep'
          TypeReference
            Identifier: ' Deep'
        PropertySignature
          Identifier: '
        ordered'
          TypeReference
            Identifier: ' Ordered'
        PropertySignature
          Identifier: '
        members'
          TypeReference
            Identifier: ' Members'
        PropertySignature
          Identifier: '
        any'
          TypeReference
            Identifier: ' KeyFilter'
        PropertySignature
          Identifier: '
        all'
          TypeReference
            Identifier: ' KeyFilter'
        PropertySignature
          Identifier: '
        oneOf'
          TypeReference
            Identifier: ' OneOf'
      InterfaceDeclaration
        Identifier: ' OneOf'
        CallSignature
          Parameter
            Identifier: 'list'
            TypeOperator
              ArrayType
                UnknownKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' Match'
        CallSignature
          Parameter
            Identifier: 'regexp'
            TypeReference
              Identifier: ' RegExp'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' Keys'
        CallSignature
          Parameter
            DotDotDotToken
            Identifier: 'keys'
            ArrayType
              StringKeyword
          TypeReference
            Identifier: ' Assertion'
        CallSignature
          Parameter
            Identifier: 'keys'
            UnionType
              TypeOperator
                ArrayType
                  AnyKeyword
              TypeReference
                Identifier: ' Object'
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' Throw'
        CallSignature
          Parameter
            Identifier: 'expected'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: ' RegExp'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
        CallSignature
          Parameter
            Identifier: 'constructor'
            UnionType
              TypeReference
                Identifier: ' Error'
              TypeReference
                Identifier: ' Function'
          Parameter
            Identifier: ' expected'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: ' RegExp'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' RespondTo'
        CallSignature
          Parameter
            Identifier: 'method'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' Satisfy'
        CallSignature
          Parameter
            Identifier: 'matcher'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' Members'
        CallSignature
          Parameter
            Identifier: 'set'
            TypeOperator
              ArrayType
                AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        Identifier: ' PropertyChange'
        CallSignature
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' Object'
          Parameter
            Identifier: ' property'
            QuestionToken
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' DeltaAssertion'
      InterfaceDeclaration
        Identifier: ' DeltaAssertion'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Assertion'
        MethodSignature
          Identifier: '
        by'
          Parameter
            Identifier: 'delta'
            NumberKeyword
          Parameter
            Identifier: ' msg'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Assertion'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' Assert'
        CallSignature
          Parameter
            Identifier: 'expression'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' expression'
        MethodSignature
          Identifier: '

        /**
         * Throws a failure.
         *
         * @param message    Message to display on error.
         * @remarks Node.js assert module-compatible.
         */
        fail'
          Parameter
            Identifier: 'message'
            QuestionToken
            StringKeyword
          NeverKeyword
        MethodSignature
          Identifier: '

        /**
         * Throws a failure.
         *
         * T   Type of the objects.
         * @param actual   Actual value.
         * @param expected   Potential expected value.
         * @param message    Message to display on error.
         * @param operator   Comparison operator, if not strict equality.
         * @remarks Node.js assert module-compatible.
         */
        fail'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'actual'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' expected'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          Parameter
            Identifier: ' operator'
            QuestionToken
            TypeReference
              Identifier: ' Operator'
          NeverKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is truthy.
         *
         * @param object   Object to test.
         * @param message    Message to display on error.
         */
        isOk'
          Parameter
            Identifier: 'value'
            UnknownKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is truthy.
         *
         * @param object   Object to test.
         * @param message    Message to display on error.
         */
        ok'
          Parameter
            Identifier: 'value'
            UnknownKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is falsy.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param message    Message to display on error.
         */
        isNotOk'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is falsy.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param message    Message to display on error.
         */
        notOk'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts non-strict equality (==) of actual and expected.
         *
         * T   Type of the objects.
         * @param actual   Actual value.
         * @param expected   Potential expected value.
         * @param message   Message to display on error.
         */
        equal'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'actual'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' expected'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts non-strict inequality (!=) of actual and expected.
         *
         * T   Type of the objects.
         * @param actual   Actual value.
         * @param expected   Potential expected value.
         * @param message   Message to display on error.
         */
        notEqual'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'actual'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' expected'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts strict equality (===) of actual and expected.
         *
         * T   Type of the objects.
         * @param actual   Actual value.
         * @param expected   Potential expected value.
         * @param message   Message to display on error.
         */
        strictEqual'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'actual'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' expected'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts strict inequality (!==) of actual and expected.
         *
         * T   Type of the objects.
         * @param actual   Actual value.
         * @param expected   Potential expected value.
         * @param message   Message to display on error.
         */
        notStrictEqual'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'actual'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' expected'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that actual is deeply equal to expected.
         *
         * T   Type of the objects.
         * @param actual   Actual value.
         * @param expected   Potential expected value.
         * @param message   Message to display on error.
         */
        deepEqual'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'actual'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' expected'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that actual is not deeply equal to expected.
         *
         * T   Type of the objects.
         * @param actual   Actual value.
         * @param expected   Potential expected value.
         * @param message   Message to display on error.
         */
        notDeepEqual'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'actual'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' expected'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Alias to deepEqual
         *
         * T   Type of the objects.
         * @param actual   Actual value.
         * @param expected   Potential expected value.
         * @param message   Message to display on error.
         */
        deepStrictEqual'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'actual'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' expected'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts valueToCheck is strictly greater than (>) valueToBeAbove.
         *
         * @param valueToCheck   Actual value.
         * @param valueToBeAbove   Minimum Potential expected value.
         * @param message   Message to display on error.
         */
        isAbove'
          Parameter
            Identifier: 'valueToCheck'
            NumberKeyword
          Parameter
            Identifier: ' valueToBeAbove'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts valueToCheck is greater than or equal to (>=) valueToBeAtLeast.
         *
         * @param valueToCheck   Actual value.
         * @param valueToBeAtLeast   Minimum Potential expected value.
         * @param message   Message to display on error.
         */
        isAtLeast'
          Parameter
            Identifier: 'valueToCheck'
            NumberKeyword
          Parameter
            Identifier: ' valueToBeAtLeast'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts valueToCheck is strictly less than (<) valueToBeBelow.
         *
         * @param valueToCheck   Actual value.
         * @param valueToBeBelow   Minimum Potential expected value.
         * @param message   Message to display on error.
         */
        isBelow'
          Parameter
            Identifier: 'valueToCheck'
            NumberKeyword
          Parameter
            Identifier: ' valueToBeBelow'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts valueToCheck is less than or equal to (<=) valueToBeAtMost.
         *
         * @param valueToCheck   Actual value.
         * @param valueToBeAtMost   Minimum Potential expected value.
         * @param message   Message to display on error.
         */
        isAtMost'
          Parameter
            Identifier: 'valueToCheck'
            NumberKeyword
          Parameter
            Identifier: ' valueToBeAtMost'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is true.
         *
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isTrue'
          Parameter
            Identifier: 'value'
            UnknownKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            LiteralType
              TrueKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is false.
         *
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isFalse'
          Parameter
            Identifier: 'value'
            UnknownKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            LiteralType
              FalseKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not true.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNotTrue'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            TypeReference
              Identifier: ' Exclude'
              TypeReference
                Identifier: 'T'
              LiteralType
                TrueKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not false.
         *
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNotFalse'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            TypeReference
              Identifier: ' Exclude'
              TypeReference
                Identifier: 'T'
              LiteralType
                FalseKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is null.
         *
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNull'
          Parameter
            Identifier: 'value'
            UnknownKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            LiteralType
              NullKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not null.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNotNull'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            TypeReference
              Identifier: ' Exclude'
              TypeReference
                Identifier: 'T'
              LiteralType
                NullKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is NaN.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNaN'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not NaN.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNotNaN'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that the target is neither null nor undefined.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message    Message to display on error.
         */
        exists'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            TypeReference
              Identifier: ' NonNullable'
              TypeReference
                Identifier: 'T'
        MethodSignature
          Identifier: '

        /**
         * Asserts that the target is either null or undefined.
         *
         * @param value   Actual value.
         * @param message    Message to display on error.
         */
        notExists'
          Parameter
            Identifier: 'value'
            UnknownKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            UnionType
              LiteralType
                NullKeyword
              UndefinedKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is undefined.
         *
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isUndefined'
          Parameter
            Identifier: 'value'
            UnknownKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            UndefinedKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not undefined.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isDefined'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            TypeReference
              Identifier: ' Exclude'
              TypeReference
                Identifier: 'T'
              UndefinedKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is a function.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isFunction'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not a function.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNotFunction'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is an object of type 'Object'
         * (as revealed by Object.prototype.toString).
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         * @remarks The assertion does not match subclassed objects.
         */
        isObject'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not an object of type 'Object'
         * (as revealed by Object.prototype.toString).
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNotObject'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is an array.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isArray'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not an array.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNotArray'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is a string.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isString'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not a string.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNotString'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is a number.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNumber'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not a number.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNotNumber'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is a finite number.
         * Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.
         *
         * T   Type of value
         * @param value    Actual value
         * @param message   Message to display on error.
         */
        isFinite'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is a boolean.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isBoolean'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not a boolean.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param message   Message to display on error.
         */
        isNotBoolean'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value's type is name, as determined by Object.prototype.toString.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param name   Potential expected type name of value.
         * @param message   Message to display on error.
         */
        typeOf'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' name'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value's type is not name, as determined by Object.prototype.toString.
         *
         * T   Type of value.
         * @param value   Actual value.
         * @param name   Potential expected type name of value.
         * @param message   Message to display on error.
         */
        notTypeOf'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' name'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is an instance of constructor.
         *
         * T   Expected type of value.
         * @param value   Actual value.
         * @param constructor   Potential expected contructor of value.
         * @param message   Message to display on error.
         */
        instanceOf'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            value'
            UnknownKeyword
          Parameter
            Identifier: '
            constructor'
            TypeReference
              Identifier: ' Constructor'
              TypeReference
                Identifier: 'T'
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            TypeReference
              Identifier: ' T'
        MethodSignature
          Identifier: '

        /**
         * Asserts that value is not an instance of constructor.
         *
         * T   Type of value.
         * U   Type that value shouldn't be an instance of.
         * @param value   Actual value.
         * @param constructor   Potential expected contructor of value.
         * @param message   Message to display on error.
         */
        notInstanceOf'
          TypeParameter
            Identifier: 'T'
          TypeParameter
            Identifier: ' U'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' type'
            TypeReference
              Identifier: ' Constructor'
              TypeReference
                Identifier: 'U'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          TypePredicate
            AssertsKeyword
            Identifier: ' value'
            TypeReference
              Identifier: ' Exclude'
              TypeReference
                Identifier: 'T'
              TypeReference
                Identifier: ' U'
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack includes needle.
         *
         * @param haystack   Container string.
         * @param needle   Potential substring of haystack.
         * @param message   Message to display on error.
         */
        include'
          Parameter
            Identifier: 'haystack'
            StringKeyword
          Parameter
            Identifier: ' needle'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack includes needle.
         *
         * T   Type of values in haystack.
         * @param haystack   Container array, set or map.
         * @param needle   Potential value contained in haystack.
         * @param message   Message to display on error.
         */
        include'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            haystack'
            UnionType
              TypeOperator
                ArrayType
                  TypeReference
                    Identifier: ' T'
              TypeReference
                Identifier: ' ReadonlySet'
                TypeReference
                  Identifier: 'T'
              TypeReference
                Identifier: ' ReadonlyMap'
                AnyKeyword
                TypeReference
                  Identifier: ' T'
          Parameter
            Identifier: '
            needle'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack includes needle.
         *
         * T   Type of values in haystack.
         * @param haystack   WeakSet container.
         * @param needle   Potential value contained in haystack.
         * @param message   Message to display on error.
         */
        include'
          TypeParameter
            Identifier: 'T'
            ObjectKeyword
          Parameter
            Identifier: 'haystack'
            TypeReference
              Identifier: ' WeakSet'
              TypeReference
                Identifier: 'T'
          Parameter
            Identifier: ' needle'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack includes needle.
         *
         * T   Type of haystack.
         * @param haystack   Object.
         * @param needle   Potential subset of the haystack's properties.
         * @param message   Message to display on error.
         */
        include'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'haystack'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' needle'
            TypeReference
              Identifier: ' Partial'
              TypeReference
                Identifier: 'T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack does not include needle.
         *
         * @param haystack   Container string.
         * @param needle   Potential substring of haystack.
         * @param message   Message to display on error.
         */
        notInclude'
          Parameter
            Identifier: 'haystack'
            StringKeyword
          Parameter
            Identifier: ' needle'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack does not include needle.
         *
         * T   Type of values in haystack.
         * @param haystack   Container array, set or map.
         * @param needle   Potential value contained in haystack.
         * @param message   Message to display on error.
         */
        notInclude'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            haystack'
            UnionType
              TypeOperator
                ArrayType
                  TypeReference
                    Identifier: ' T'
              TypeReference
                Identifier: ' ReadonlySet'
                TypeReference
                  Identifier: 'T'
              TypeReference
                Identifier: ' ReadonlyMap'
                AnyKeyword
                TypeReference
                  Identifier: ' T'
          Parameter
            Identifier: '
            needle'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack does not include needle.
         *
         * T   Type of values in haystack.
         * @param haystack   WeakSet container.
         * @param needle   Potential value contained in haystack.
         * @param message   Message to display on error.
         */
        notInclude'
          TypeParameter
            Identifier: 'T'
            ObjectKeyword
          Parameter
            Identifier: 'haystack'
            TypeReference
              Identifier: ' WeakSet'
              TypeReference
                Identifier: 'T'
          Parameter
            Identifier: ' needle'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack does not include needle.
         *
         * T   Type of haystack.
         * @param haystack   Object.
         * @param needle   Potential subset of the haystack's properties.
         * @param message   Message to display on error.
         */
        notInclude'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'haystack'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' needle'
            TypeReference
              Identifier: ' Partial'
              TypeReference
                Identifier: 'T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack includes needle. Deep equality is used.
         *
         * @param haystack   Container string.
         * @param needle   Potential substring of haystack.
         * @param message   Message to display on error.
         *
         * @deprecated Does not have any effect on string. Use {@link Assert#include} instead.
         */
        deepInclude'
          Parameter
            Identifier: 'haystack'
            StringKeyword
          Parameter
            Identifier: ' needle'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack includes needle. Deep equality is used.
         *
         * T   Type of values in haystack.
         * @param haystack   Container array, set or map.
         * @param needle   Potential value contained in haystack.
         * @param message   Message to display on error.
         */
        deepInclude'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            haystack'
            UnionType
              TypeOperator
                ArrayType
                  TypeReference
                    Identifier: ' T'
              TypeReference
                Identifier: ' ReadonlySet'
                TypeReference
                  Identifier: 'T'
              TypeReference
                Identifier: ' ReadonlyMap'
                AnyKeyword
                TypeReference
                  Identifier: ' T'
          Parameter
            Identifier: '
            needle'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack includes needle. Deep equality is used.
         *
         * T   Type of haystack.
         * @param haystack   Object.
         * @param needle   Potential subset of the haystack's properties.
         * @param message   Message to display on error.
         */
        deepInclude'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'haystack'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' needle'
            ConditionalType
              TypeReference
                Identifier: ' T'
              TypeReference
                Identifier: ' WeakSet'
                AnyKeyword
              NeverKeyword
              TypeReference
                Identifier: ' Partial'
                TypeReference
                  Identifier: 'T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack does not include needle. Deep equality is used.
         *
         * @param haystack   Container string.
         * @param needle   Potential substring of haystack.
         * @param message   Message to display on error.
         *
         * @deprecated Does not have any effect on string. Use {@link Assert#notInclude} instead.
         */
        notDeepInclude'
          Parameter
            Identifier: 'haystack'
            StringKeyword
          Parameter
            Identifier: ' needle'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack does not include needle. Deep equality is used.
         *
         * T   Type of values in haystack.
         * @param haystack   Container array, set or map.
         * @param needle   Potential value contained in haystack.
         * @param message   Message to display on error.
         */
        notDeepInclude'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            haystack'
            UnionType
              TypeOperator
                ArrayType
                  TypeReference
                    Identifier: ' T'
              TypeReference
                Identifier: ' ReadonlySet'
                TypeReference
                  Identifier: 'T'
              TypeReference
                Identifier: ' ReadonlyMap'
                AnyKeyword
                TypeReference
                  Identifier: ' T'
          Parameter
            Identifier: '
            needle'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that haystack does not include needle. Deep equality is used.
         *
         * T   Type of haystack.
         * @param haystack   Object.
         * @param needle   Potential subset of the haystack's properties.
         * @param message   Message to display on error.
         */
        notDeepInclude'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'haystack'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' needle'
            ConditionalType
              TypeReference
                Identifier: ' T'
              TypeReference
                Identifier: ' WeakSet'
                AnyKeyword
              NeverKeyword
              TypeReference
                Identifier: ' Partial'
                TypeReference
                  Identifier: 'T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object.
         *
         * Enables the use of dot- and bracket-notation for referencing nested properties.
         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.
         * Can be used to assert the inclusion of a subset of properties in an object.
         * Enables the use of dot- and bracket-notation for referencing nested properties.
         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.
         *
         * @param haystack
         * @param needle
         * @param message   Message to display on error.
         */
        nestedInclude'
          Parameter
            Identifier: 'haystack'
            AnyKeyword
          Parameter
            Identifier: ' needle'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that ‘haystack’ does not include ‘needle’. Can be used to assert the absence of a subset of properties in an object.
         *
         * Enables the use of dot- and bracket-notation for referencing nested properties.
         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.
         * Can be used to assert the inclusion of a subset of properties in an object.
         * Enables the use of dot- and bracket-notation for referencing nested properties.
         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.
         *
         * @param haystack
         * @param needle
         * @param message   Message to display on error.
         */
        notNestedInclude'
          Parameter
            Identifier: 'haystack'
            AnyKeyword
          Parameter
            Identifier: ' needle'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while checking for deep equality
         *
         * Enables the use of dot- and bracket-notation for referencing nested properties.
         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.
         * Can be used to assert the inclusion of a subset of properties in an object.
         * Enables the use of dot- and bracket-notation for referencing nested properties.
         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.
         *
         * @param haystack
         * @param needle
         * @param message   Message to display on error.
         */
        deepNestedInclude'
          Parameter
            Identifier: 'haystack'
            AnyKeyword
          Parameter
            Identifier: ' needle'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that ‘haystack’ does not include ‘needle’. Can be used to assert the absence of a subset of properties in an object while checking for deep equality.
         *
         * Enables the use of dot- and bracket-notation for referencing nested properties.
         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.
         * Can be used to assert the inclusion of a subset of properties in an object.
         * Enables the use of dot- and bracket-notation for referencing nested properties.
         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.
         *
         * @param haystack
         * @param needle
         * @param message   Message to display on error.
         */
        notDeepNestedInclude'
          Parameter
            Identifier: 'haystack'
            AnyKeyword
          Parameter
            Identifier: ' needle'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties.
         *
         * @param haystack
         * @param needle
         * @param message   Message to display on error.
         */
        ownInclude'
          Parameter
            Identifier: 'haystack'
            AnyKeyword
          Parameter
            Identifier: ' needle'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties.
         *
         * @param haystack
         * @param needle
         * @param message   Message to display on error.
         */
        notOwnInclude'
          Parameter
            Identifier: 'haystack'
            AnyKeyword
          Parameter
            Identifier: ' needle'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties and checking for deep
         *
         * @param haystack
         * @param needle
         * @param message   Message to display on error.
         */
        deepOwnInclude'
          Parameter
            Identifier: 'haystack'
            AnyKeyword
          Parameter
            Identifier: ' needle'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties and checking for deep equality.
         *
         * @param haystack
         * @param needle
         * @param message   Message to display on error.
         */
        notDeepOwnInclude'
          Parameter
            Identifier: 'haystack'
            AnyKeyword
          Parameter
            Identifier: ' needle'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value matches the regular expression regexp.
         *
         * @param value   Actual value.
         * @param regexp   Potential match of value.
         * @param message   Message to display on error.
         */
        match'
          Parameter
            Identifier: 'value'
            StringKeyword
          Parameter
            Identifier: ' regexp'
            TypeReference
              Identifier: ' RegExp'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that value does not match the regular expression regexp.
         *
         * @param value   Actual value.
         * @param regexp   Potential match of value.
         * @param message   Message to display on error.
         */
        notMatch'
          Parameter
            Identifier: 'expected'
            AnyKeyword
          Parameter
            Identifier: ' regexp'
            TypeReference
              Identifier: ' RegExp'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object has a property named by property.
         *
         * T   Type of object.
         * @param object   Container object.
         * @param property   Potential contained property of object.
         * @param message   Message to display on error.
         */
        property'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' /* keyof T */ message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object does not have a property named by property.
         *
         * T   Type of object.
         * @param object   Container object.
         * @param property   Potential contained property of object.
         * @param message   Message to display on error.
         */
        notProperty'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' /* keyof T */ message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object has a property named by property, which can be a string
         * using dot- and bracket-notation for deep reference.
         *
         * T   Type of object.
         * @param object   Container object.
         * @param property   Potential contained property of object.
         * @param message   Message to display on error.
         */
        deepProperty'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object does not have a property named by property, which can be a
         * string using dot- and bracket-notation for deep reference.
         *
         * T   Type of object.
         * @param object   Container object.
         * @param property   Potential contained property of object.
         * @param message   Message to display on error.
         */
        notDeepProperty'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object has a property named by property with value given by value.
         *
         * T   Type of object.
         * V   Type of value.
         * @param object   Container object.
         * @param property   Potential contained property of object.
         * @param value   Potential expected property value.
         * @param message   Message to display on error.
         */
        propertyVal'
          TypeParameter
            Identifier: 'T'
          TypeParameter
            Identifier: ' V'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' /* keyof T */ value'
            TypeReference
              Identifier: ' V'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object has a property named by property with value given by value.
         *
         * T   Type of object.
         * V   Type of value.
         * @param object   Container object.
         * @param property   Potential contained property of object.
         * @param value   Potential expected property value.
         * @param message   Message to display on error.
         */
        notPropertyVal'
          TypeParameter
            Identifier: 'T'
          TypeParameter
            Identifier: ' V'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' /* keyof T */ value'
            TypeReference
              Identifier: ' V'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object has a property named by property, which can be a string
         * using dot- and bracket-notation for deep reference.
         *
         * T   Type of object.
         * V   Type of value.
         * @param object   Container object.
         * @param property   Potential contained property of object.
         * @param value   Potential expected property value.
         * @param message   Message to display on error.
         */
        deepPropertyVal'
          TypeParameter
            Identifier: 'T'
          TypeParameter
            Identifier: ' V'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' value'
            TypeReference
              Identifier: ' V'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object does not have a property named by property, which can be a
         * string using dot- and bracket-notation for deep reference.
         *
         * T   Type of object.
         * V   Type of value.
         * @param object   Container object.
         * @param property   Potential contained property of object.
         * @param value   Potential expected property value.
         * @param message   Message to display on error.
         */
        notDeepPropertyVal'
          TypeParameter
            Identifier: 'T'
          TypeParameter
            Identifier: ' V'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' value'
            TypeReference
              Identifier: ' V'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object has a length property with the expected value.
         *
         * T   Type of object.
         * @param object   Container object.
         * @param length   Potential expected length of object.
         * @param message   Message to display on error.
         */
        lengthOf'
          TypeParameter
            Identifier: 'T'
            UnionType
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' length'
                  QuestionToken
                  UnionType
                    NumberKeyword
                    UndefinedKeyword
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' size'
                  QuestionToken
                  UnionType
                    NumberKeyword
                    UndefinedKeyword
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            length'
            NumberKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that fn will throw an error.
         *
         * @param fn   Function that may throw.
         * @param errMsgMatcher   Expected error message matcher.
         * @param ignored   Ignored parameter.
         * @param message   Message to display on error.
         */
        throw'
          Parameter
            Identifier: 'fn'
            FunctionType
              VoidKeyword
          Parameter
            Identifier: ' errMsgMatcher'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' RegExp'
              StringKeyword
          Parameter
            Identifier: ' ignored'
            QuestionToken
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that fn will throw an error.
         *
         * @param fn   Function that may throw.
         * @param errorLike   Expected error constructor or error instance.
         * @param errMsgMatcher   Expected error message matcher.
         * @param message   Message to display on error.
         */
        throw'
          Parameter
            Identifier: '
            fn'
            FunctionType
              VoidKeyword
          Parameter
            Identifier: '
            errorLike'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' ErrorConstructor'
              TypeReference
                Identifier: ' Error'
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            errMsgMatcher'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' RegExp'
              StringKeyword
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that fn will throw an error.
         *
         * @param fn   Function that may throw.
         * @param errMsgMatcher   Expected error message matcher.
         * @param ignored   Ignored parameter.
         * @param message   Message to display on error.
         */
        throws'
          Parameter
            Identifier: 'fn'
            FunctionType
              VoidKeyword
          Parameter
            Identifier: ' errMsgMatcher'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' RegExp'
              StringKeyword
          Parameter
            Identifier: ' ignored'
            QuestionToken
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that fn will throw an error.
         *
         * @param fn   Function that may throw.
         * @param errorLike   Expected error constructor or error instance.
         * @param errMsgMatcher   Expected error message matcher.
         * @param message   Message to display on error.
         */
        throws'
          Parameter
            Identifier: '
            fn'
            FunctionType
              VoidKeyword
          Parameter
            Identifier: '
            errorLike'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' ErrorConstructor'
              TypeReference
                Identifier: ' Error'
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            errMsgMatcher'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' RegExp'
              StringKeyword
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that fn will throw an error.
         *
         * @param fn   Function that may throw.
         * @param errMsgMatcher   Expected error message matcher.
         * @param ignored   Ignored parameter.
         * @param message   Message to display on error.
         */
        Throw'
          Parameter
            Identifier: 'fn'
            FunctionType
              VoidKeyword
          Parameter
            Identifier: ' errMsgMatcher'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' RegExp'
              StringKeyword
          Parameter
            Identifier: ' ignored'
            QuestionToken
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that fn will throw an error.
         *
         * @param fn   Function that may throw.
         * @param errorLike   Expected error constructor or error instance.
         * @param errMsgMatcher   Expected error message matcher.
         * @param message   Message to display on error.
         */
        Throw'
          Parameter
            Identifier: '
            fn'
            FunctionType
              VoidKeyword
          Parameter
            Identifier: '
            errorLike'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' ErrorConstructor'
              TypeReference
                Identifier: ' Error'
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            errMsgMatcher'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' RegExp'
              StringKeyword
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that fn will not throw an error.
         *
         * @param fn   Function that may throw.
         * @param errMsgMatcher   Expected error message matcher.
         * @param ignored   Ignored parameter.
         * @param message   Message to display on error.
         */
        doesNotThrow'
          Parameter
            Identifier: 'fn'
            FunctionType
              VoidKeyword
          Parameter
            Identifier: ' errMsgMatcher'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' RegExp'
              StringKeyword
          Parameter
            Identifier: ' ignored'
            QuestionToken
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that fn will not throw an error.
         *
         * @param fn   Function that may throw.
         * @param errorLike   Expected error constructor or error instance.
         * @param errMsgMatcher   Expected error message matcher.
         * @param message   Message to display on error.
         */
        doesNotThrow'
          Parameter
            Identifier: '
            fn'
            FunctionType
              VoidKeyword
          Parameter
            Identifier: '
            errorLike'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' ErrorConstructor'
              TypeReference
                Identifier: ' Error'
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            errMsgMatcher'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' RegExp'
              StringKeyword
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Compares two values using operator.
         *
         * @param val1   Left value during comparison.
         * @param operator   Comparison operator.
         * @param val2   Right value during comparison.
         * @param message   Message to display on error.
         */
        operator'
          Parameter
            Identifier: 'val1'
            TypeReference
              Identifier: ' OperatorComparable'
          Parameter
            Identifier: ' operator'
            TypeReference
              Identifier: ' Operator'
          Parameter
            Identifier: ' val2'
            TypeReference
              Identifier: ' OperatorComparable'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that the target is equal to expected, to within a +/- delta range.
         *
         * @param actual   Actual value
         * @param expected   Potential expected value.
         * @param delta   Maximum differenced between values.
         * @param message   Message to display on error.
         */
        closeTo'
          Parameter
            Identifier: 'actual'
            NumberKeyword
          Parameter
            Identifier: ' expected'
            NumberKeyword
          Parameter
            Identifier: ' delta'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that the target is equal to expected, to within a +/- delta range.
         *
         * @param actual   Actual value
         * @param expected   Potential expected value.
         * @param delta   Maximum differenced between values.
         * @param message   Message to display on error.
         */
        approximately'
          Parameter
            Identifier: 'act'
            NumberKeyword
          Parameter
            Identifier: ' exp'
            NumberKeyword
          Parameter
            Identifier: ' delta'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that set1 and set2 have the same members. Order is not take into account.
         *
         * T   Type of set values.
         * @param set1   Actual set of values.
         * @param set2   Potential expected set of values.
         * @param message   Message to display on error.
         */
        sameMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'set1'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' set2'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that set1 and set2 have the same members using deep equality checking.
         * Order is not take into account.
         *
         * T   Type of set values.
         * @param set1   Actual set of values.
         * @param set2   Potential expected set of values.
         * @param message   Message to display on error.
         */
        sameDeepMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'set1'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' set2'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `set1` and `set2` don't have the same members in any order.
         * Uses a deep equality check.
         *
         *  T   Type of set values.
         * @param set1
         * @param set2
         * @param message
         */
        notSameDeepMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'set1'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' set2'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that set1 and set2 have the same members in the same order.
         * Uses a strict equality check (===).
         *
         * T   Type of set values.
         * @param set1   Actual set of values.
         * @param set2   Potential expected set of values.
         * @param message   Message to display on error.
         */
        sameOrderedMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'set1'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' set2'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that set1 and set2 don’t have the same members in the same order.
         * Uses a strict equality check (===).
         *
         * T   Type of set values.
         * @param set1   Actual set of values.
         * @param set2   Potential expected set of values.
         * @param message   Message to display on error.
         */
        notSameOrderedMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'set1'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' set2'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that set1 and set2 have the same members in the same order.
         * Uses a deep equality check.
         *
         * T   Type of set values.
         * @param set1   Actual set of values.
         * @param set2   Potential expected set of values.
         * @param message   Message to display on error.
         */
        sameDeepOrderedMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'set1'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' set2'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that set1 and set2 don’t have the same members in the same order.
         * Uses a deep equality check.
         *
         * T   Type of set values.
         * @param set1   Actual set of values.
         * @param set2   Potential expected set of values.
         * @param message   Message to display on error.
         */
        notSameDeepOrderedMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'set1'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' set2'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that subset is included in superset in the same order beginning with the first element in superset.
         * Uses a strict equality check (===).
         *
         * T   Type of set values.
         * @param superset   Actual set of values.
         * @param subset   Potential contained set of values.
         * @param message   Message to display on error.
         */
        includeOrderedMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'superset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' subset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that subset isn’t included in superset in the same order beginning with the first element in superset.
         * Uses a strict equality check (===).
         *
         * T   Type of set values.
         * @param superset   Actual set of values.
         * @param subset   Potential contained set of values.
         * @param message   Message to display on error.
         */
        notIncludeOrderedMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'superset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' subset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that subset is included in superset in the same order beginning with the first element in superset.
         * Uses a deep equality check.
         *
         * T   Type of set values.
         * @param superset   Actual set of values.
         * @param subset   Potential contained set of values.
         * @param message   Message to display on error.
         */
        includeDeepOrderedMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'superset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' subset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that subset isn’t included in superset in the same order beginning with the first element in superset.
         * Uses a deep equality check.
         *
         * T   Type of set values.
         * @param superset   Actual set of values.
         * @param subset   Potential contained set of values.
         * @param message   Message to display on error.
         */
        notIncludeDeepOrderedMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'superset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' subset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that subset is included in superset. Order is not take into account.
         *
         * T   Type of set values.
         * @param superset   Actual set of values.
         * @param subset   Potential contained set of values.
         * @param message   Message to display on error.
         */
        includeMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'superset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' subset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that subset isn’t included in superset in any order.
         * Uses a strict equality check (===). Duplicates are ignored.
         *
         * T   Type of set values.
         * @param superset   Actual set of values.
         * @param subset   Potential not contained set of values.
         * @param message   Message to display on error.
         */
        notIncludeMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'superset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' subset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that subset is included in superset using deep equality checking.
         * Order is not take into account.
         *
         * T   Type of set values.
         * @param superset   Actual set of values.
         * @param subset   Potential contained set of values.
         * @param message   Message to display on error.
         */
        includeDeepMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'superset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' subset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `subset` isn't included in `superset` in any order. Uses a
         * deep equality check. Duplicates are ignored.
         *
         * assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');
         *
         * T   Type of set values.
         * @param superset   Actual set of values.
         * @param subset   Potential contained set of values.
         * @param message   Message to display on error.
         */
        notIncludeDeepMembers'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'superset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' subset'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that non-object, non-array value inList appears in the flat array list.
         *
         * T   Type of list values.
         * @param inList   Value expected to be in the list.
         * @param list   List of values.
         * @param message   Message to display on error.
         */
        oneOf'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'inList'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' list'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function changes the value of a property.
         *
         * T   Type of object.
         * @param modifier   Function to run.
         * @param object   Container object.
         * @param property   Property of object expected to be modified.
         * @param message   Message to display on error.
         */
        changes'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' /* keyof T */ message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function changes the value of a property by an amount (delta).
         *
         * @param modifier function
         * @param object or getter function
         * @param property name _optional_
         * @param change amount (delta)
         * @param message _optional_
         */
        changesBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            property'
            StringKeyword
          Parameter
            Identifier: '
            /* keyof T */ change'
            NumberKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        changesBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' change'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function does not change the value of a property.
         *
         * T   Type of object.
         * @param modifier   Function to run.
         * @param object   Container object.
         * @param property   Property of object expected not to be modified.
         * @param message   Message to display on error.
         */
        doesNotChange'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' /* keyof T */ message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function increases an object property.
         *
         * T   Type of object.
         * @param modifier   Function to run.
         * @param object   Container object.
         * @param property   Property of object expected to be increased.
         * @param message   Message to display on error.
         */
        increases'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' /* keyof T */ message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).
         *
         * T   Type of object or function.
         * @param modifier function
         * @param object or getter function
         * @param property name _optional_
         * @param change amount (delta)
         * @param message _optional_
         */
        increasesBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            property'
            StringKeyword
          Parameter
            Identifier: '
            /* keyof T */ change'
            NumberKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        increasesBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' change'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function does not increase an object property.
         *
         * T   Type of object.
         * @param modifier   Function to run.
         * @param object   Container object.
         * @param property   Property of object expected not to be increased.
         * @param message   Message to display on error.
         */
        doesNotIncrease'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' /* keyof T */ message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).
         *
         * T   Type of object or function.
         * @param modifier function
         * @param object or getter function
         * @param property name _optional_
         * @param change amount (delta)
         * @param message _optional_
         */

        increasesButNotBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            property'
            StringKeyword
          Parameter
            Identifier: '
            /* keyof T */ change'
            NumberKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        increasesButNotBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' change'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function decreases an object property.
         *
         * T   Type of object.
         * @param modifier   Function to run.
         * @param object   Container object.
         * @param property   Property of object expected to be decreased.
         * @param message   Message to display on error.
         */
        decreases'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' /* keyof T */ message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)
         *
         * T   Type of object or function.
         * @param modifier function
         * @param object or getter function
         * @param property name _optional_
         * @param change amount (delta)
         * @param message _optional_
         */

        decreasesBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            property'
            StringKeyword
          Parameter
            Identifier: '
            /* keyof T */ change'
            NumberKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        decreasesBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' change'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function does not decrease an object property.
         *
         * T   Type of object.
         * @param modifier   Function to run.
         * @param object   Container object.
         * @param property   Property of object expected not to be decreased.
         * @param message   Message to display on error.
         */
        doesNotDecrease'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' /* keyof T */ message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
         *
         * T   Type of object or function.
         * @param modifier function
         * @param object or getter function
         * @param property name _optional_
         * @param change amount (delta)
         * @param message _optional_
         */

        doesNotDecreaseBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            property'
            StringKeyword
          Parameter
            Identifier: '
            /* keyof T */ change'
            NumberKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        doesNotDecreaseBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' change'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
         *
         * T   Type of object or function.
         * @param modifier function
         * @param object or getter function
         * @param property name _optional_
         * @param change amount (delta)
         * @param message _optional_
         */

        decreasesButNotBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            property'
            StringKeyword
          Parameter
            Identifier: '
            /* keyof T */ change'
            NumberKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '
        decreasesButNotBy'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'modifier'
            TypeReference
              Identifier: ' Function'
          Parameter
            Identifier: ' object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' change'
            NumberKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts if value is not a false value, and throws if it is a true value.
         *
         * T   Type of object.
         * @param object   Actual value.
         * @param message   Message to display on error.
         * @remarks This is added to allow for chai to be a drop-in replacement for
         *          Node’s assert class.
         */
        ifError'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is extensible (can have new properties added to it).
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        isExtensible'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is extensible (can have new properties added to it).
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        extensible'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is not extensible.
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        isNotExtensible'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is not extensible.
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        notExtensible'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is sealed (can have new properties added to it
         * and its existing properties cannot be removed).
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        isSealed'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is sealed (can have new properties added to it
         * and its existing properties cannot be removed).
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        sealed'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is not sealed.
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        isNotSealed'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is not sealed.
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        notSealed'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is frozen (cannot have new properties added to it
         * and its existing properties cannot be removed).
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        isFrozen'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is frozen (cannot have new properties added to it
         * and its existing properties cannot be removed).
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        frozen'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is not frozen (cannot have new properties added to it
         * and its existing properties cannot be removed).
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        isNotFrozen'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object is not frozen (cannot have new properties added to it
         * and its existing properties cannot be removed).
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        notFrozen'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that the target does not contain any values. For arrays and
         * strings, it checks the length property. For Map and Set instances, it
         * checks the size property. For non-function objects, it gets the count
         * of own enumerable string keys.
         *
         * T   Type of object
         * @param object   Actual value.
         * @param message   Message to display on error.
         */
        isEmpty'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that the target contains values. For arrays and strings, it checks
         * the length property. For Map and Set instances, it checks the size property.
         * For non-function objects, it gets the count of own enumerable string keys.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param message    Message to display on error.
         */
        isNotEmpty'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `object` has at least one of the `keys` provided.
         * You can also provide a single object instead of a `keys` array and its keys
         * will be used as the expected set of keys.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param keys   Keys to check
         * @param message    Message to display on error.
         */
        hasAnyKeys'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' keys'
            UnionType
              TypeReference
                Identifier: ' Array'
                UnionType
                  TypeReference
                    Identifier: 'Object'
                  StringKeyword
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `object` has all and only all of the `keys` provided.
         * You can also provide a single object instead of a `keys` array and its keys
         * will be used as the expected set of keys.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param keys   Keys to check
         * @param message    Message to display on error.
         */
        hasAllKeys'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' keys'
            UnionType
              TypeReference
                Identifier: ' Array'
                UnionType
                  TypeReference
                    Identifier: 'Object'
                  StringKeyword
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `object` has all of the `keys` provided but may have more keys not listed.
         * You can also provide a single object instead of a `keys` array and its keys
         * will be used as the expected set of keys.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param keys   Keys to check
         * @param message    Message to display on error.
         */
        containsAllKeys'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' keys'
            UnionType
              TypeReference
                Identifier: ' Array'
                UnionType
                  TypeReference
                    Identifier: 'Object'
                  StringKeyword
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `object` has none of the `keys` provided.
         * You can also provide a single object instead of a `keys` array and its keys
         * will be used as the expected set of keys.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param keys   Keys to check
         * @param message    Message to display on error.
         */
        doesNotHaveAnyKeys'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' keys'
            UnionType
              TypeReference
                Identifier: ' Array'
                UnionType
                  TypeReference
                    Identifier: 'Object'
                  StringKeyword
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `object` does not have at least one of the `keys` provided.
         * You can also provide a single object instead of a `keys` array and its keys
         * will be used as the expected set of keys.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param keys   Keys to check
         * @param message    Message to display on error.
         */
        doesNotHaveAllKeys'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' keys'
            UnionType
              TypeReference
                Identifier: ' Array'
                UnionType
                  TypeReference
                    Identifier: 'Object'
                  StringKeyword
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `object` has at least one of the `keys` provided.
         * Since Sets and Maps can have objects as keys you can use this assertion to perform
         * a deep comparison.
         * You can also provide a single object instead of a `keys` array and its keys
         * will be used as the expected set of keys.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param keys   Keys to check
         * @param message    Message to display on error.
         */
        hasAnyDeepKeys'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' keys'
            UnionType
              TypeReference
                Identifier: ' Array'
                UnionType
                  TypeReference
                    Identifier: 'Object'
                  StringKeyword
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `object` has all and only all of the `keys` provided.
         * Since Sets and Maps can have objects as keys you can use this assertion to perform
         * a deep comparison.
         * You can also provide a single object instead of a `keys` array and its keys
         * will be used as the expected set of keys.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param keys   Keys to check
         * @param message    Message to display on error.
         */
        hasAllDeepKeys'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' keys'
            UnionType
              TypeReference
                Identifier: ' Array'
                UnionType
                  TypeReference
                    Identifier: 'Object'
                  StringKeyword
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `object` contains all of the `keys` provided.
         * Since Sets and Maps can have objects as keys you can use this assertion to perform
         * a deep comparison.
         * You can also provide a single object instead of a `keys` array and its keys
         * will be used as the expected set of keys.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param keys   Keys to check
         * @param message    Message to display on error.
         */
        containsAllDeepKeys'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            keys'
            UnionType
              TypeReference
                Identifier: ' Array'
                UnionType
                  TypeReference
                    Identifier: 'Object'
                  StringKeyword
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  AnyKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `object` contains all of the `keys` provided.
         * Since Sets and Maps can have objects as keys you can use this assertion to perform
         * a deep comparison.
         * You can also provide a single object instead of a `keys` array and its keys
         * will be used as the expected set of keys.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param keys   Keys to check
         * @param message    Message to display on error.
         */
        doesNotHaveAnyDeepKeys'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            keys'
            UnionType
              TypeReference
                Identifier: ' Array'
                UnionType
                  TypeReference
                    Identifier: 'Object'
                  StringKeyword
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  AnyKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that `object` contains all of the `keys` provided.
         * Since Sets and Maps can have objects as keys you can use this assertion to perform
         * a deep comparison.
         * You can also provide a single object instead of a `keys` array and its keys
         * will be used as the expected set of keys.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param keys   Keys to check
         * @param message    Message to display on error.
         */
        doesNotHaveAllDeepKeys'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: '
            object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            keys'
            UnionType
              TypeReference
                Identifier: ' Array'
                UnionType
                  TypeReference
                    Identifier: 'Object'
                  StringKeyword
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  AnyKeyword
          Parameter
            Identifier: '
            message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object has a direct or inherited property named by property,
         * which can be a string using dot- and bracket-notation for nested reference.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param property    Property to test.
         * @param message    Message to display on error.
         */
        nestedProperty'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object does not have a property named by property,
         * which can be a string using dot- and bracket-notation for nested reference.
         * The property cannot exist on the object nor anywhere in its prototype chain.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param property    Property to test.
         * @param message    Message to display on error.
         */
        notNestedProperty'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object has a property named by property with value given by value.
         * property can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param property    Property to test.
         * @param value    Value to test.
         * @param message    Message to display on error.
         */
        nestedPropertyVal'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' value'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object does not have a property named by property with value given by value.
         * property can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param property    Property to test.
         * @param value    Value to test.
         * @param message    Message to display on error.
         */
        notNestedPropertyVal'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' value'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object has a property named by property with a value given by value.
         * property can use dot- and bracket-notation for nested reference. Uses a deep equality check.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param property    Property to test.
         * @param value    Value to test.
         * @param message    Message to display on error.
         */
        deepNestedPropertyVal'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' value'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

        /**
         * Asserts that object does not have a property named by property with value given by value.
         * property can use dot- and bracket-notation for nested reference. Uses a deep equality check.
         *
         * T   Type of object.
         * @param object   Object to test.
         * @param property    Property to test.
         * @param value    Value to test.
         * @param message    Message to display on error.
         */
        notDeepNestedPropertyVal'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'object'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' property'
            StringKeyword
          Parameter
            Identifier: ' value'
            AnyKeyword
          Parameter
            Identifier: ' message'
            QuestionToken
            StringKeyword
          VoidKeyword
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' Config'
        PropertySignature
          Identifier: '
        /**
         * Default: false
         */
        includeStack'
          BooleanKeyword
        PropertySignature
          Identifier: '

        /**
         * Default: true
         */
        showDiff'
          BooleanKeyword
        PropertySignature
          Identifier: '

        /**
         * Default: 40
         */
        truncateThreshold'
          NumberKeyword
        PropertySignature
          Identifier: '

        /**
         * Default: true
         */
        useProxy'
          BooleanKeyword
        PropertySignature
          Identifier: '

        /**
         * Default: ['then', 'catch', 'inspect', 'toJSON']
         */
        proxyExcludedKeys'
          ArrayType
            StringKeyword
      ClassDeclaration
        ExportKeyword
        Identifier: ' AssertionError'
        Constructor
          Parameter
            Identifier: 'message'
            StringKeyword
          Parameter
            Identifier: ' _props'
            QuestionToken
            AnyKeyword
          Parameter
            Identifier: ' ssf'
            QuestionToken
            TypeReference
              Identifier: ' Function'
        PropertyDeclaration
          Identifier: '
        name'
          StringKeyword
        PropertyDeclaration
          Identifier: '
        message'
          StringKeyword
        PropertyDeclaration
          Identifier: '
        showDiff'
          BooleanKeyword
        PropertyDeclaration
          Identifier: '
        stack'
          StringKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' chai'
        TypeReference
          QualifiedName
            Identifier: ' Chai'
            Identifier: 'ChaiStatic'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ExportAssignment
        Identifier: ' chai'
  InterfaceDeclaration
    Identifier: ' Object'
    PropertySignature
      Identifier: '
    should'
      TypeReference
        QualifiedName
          Identifier: ' Chai'
          Identifier: 'Assertion'
