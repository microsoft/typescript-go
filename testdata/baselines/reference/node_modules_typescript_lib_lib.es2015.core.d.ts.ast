SourceFile
  InterfaceDeclaration
    Identifier: ' Array'
    TypeParameter
      Identifier: 'T'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    find'
      TypeParameter
        Identifier: 'S'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ArrayType
              TypeReference
                Identifier: ' T'
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    find'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ArrayType
              TypeReference
                Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' T'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            ArrayType
              TypeReference
                Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
     * length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
     * length+end.
     */
    fill'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    /**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
     * length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
     * is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
     */
    copyWithin'
      Parameter
        Identifier: 'target'
        NumberKeyword
      Parameter
        Identifier: ' start'
        NumberKeyword
      Parameter
        Identifier: ' end'
        QuestionToken
        NumberKeyword
      ThisType
    MethodSignature
      Identifier: '

    toLocaleString'
      Parameter
        Identifier: 'locales'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        IntersectionType
          TypeReference
            QualifiedName
              Identifier: ' Intl'
              Identifier: 'NumberFormatOptions'
          TypeReference
            QualifiedName
              Identifier: ' Intl'
              Identifier: 'DateTimeFormatOptions'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' ArrayConstructor'
    MethodSignature
      Identifier: '
    /**
     * Creates an array from an array-like object.
     * @param arrayLike An array-like object to convert to an array.
     */
    from'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          TypeReference
            Identifier: 'T'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Creates an array from an iterable object.
     * @param arrayLike An array-like object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
    from'
      TypeParameter
        Identifier: 'T'
      TypeParameter
        Identifier: ' U'
      Parameter
        Identifier: 'arrayLike'
        TypeReference
          Identifier: ' ArrayLike'
          TypeReference
            Identifier: 'T'
      Parameter
        Identifier: ' mapfn'
        FunctionType
          Parameter
            Identifier: 'v'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' k'
            NumberKeyword
          TypeReference
            Identifier: ' U'
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      ArrayType
        TypeReference
          Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Returns a new array from a set of elements.
     * @param items A set of elements to include in the new array object.
     */
    of'
      TypeParameter
        Identifier: 'T'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          TypeReference
            Identifier: ' T'
      ArrayType
        TypeReference
          Identifier: ' T'
  InterfaceDeclaration
    Identifier: ' DateConstructor'
    ConstructSignature
      Parameter
        Identifier: 'value'
        UnionType
          NumberKeyword
          StringKeyword
          TypeReference
            Identifier: ' Date'
      TypeReference
        Identifier: ' Date'
  InterfaceDeclaration
    Identifier: ' Function'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Math'
    MethodSignature
      Identifier: '
    /**
     * Returns the number of leading zero bits in the 32-bit binary representation of a number.
     * @param x A numeric expression.
     */
    clz32'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the result of 32-bit multiplication of two numbers.
     * @param x First number
     * @param y Second number
     */
    imul'
      Parameter
        Identifier: 'x'
        NumberKeyword
      Parameter
        Identifier: ' y'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the sign of the x, indicating whether x is positive, negative or zero.
     * @param x The numeric expression to test
     */
    sign'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the base 10 logarithm of a number.
     * @param x A numeric expression.
     */
    log10'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the base 2 logarithm of a number.
     * @param x A numeric expression.
     */
    log2'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the natural logarithm of 1 + x.
     * @param x A numeric expression.
     */
    log1p'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the result of (e^x - 1), which is an implementation-dependent approximation to
     * subtracting 1 from the exponential function of x (e raised to the power of x, where e
     * is the base of the natural logarithms).
     * @param x A numeric expression.
     */
    expm1'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the hyperbolic cosine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
    cosh'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the hyperbolic sine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
    sinh'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the hyperbolic tangent of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
    tanh'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the inverse hyperbolic cosine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
    acosh'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the inverse hyperbolic sine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
    asinh'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the inverse hyperbolic tangent of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
    atanh'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the square root of the sum of squares of its arguments.
     * @param values Values to compute the square root for.
     *     If no arguments are passed, the result is +0.
     *     If there is only one argument, the result is the absolute value.
     *     If any argument is +Infinity or -Infinity, the result is +Infinity.
     *     If any argument is NaN, the result is NaN.
     *     If all arguments are either +0 or −0, the result is +0.
     */
    hypot'
      Parameter
        DotDotDotToken
        Identifier: 'values'
        ArrayType
          NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the integral part of the a numeric expression, x, removing any fractional digits.
     * If x is already an integer, the result is x.
     * @param x A numeric expression.
     */
    trunc'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the nearest single precision float representation of a number.
     * @param x A numeric expression.
     */
    fround'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns an implementation-dependent approximation to the cube root of number.
     * @param x A numeric expression.
     */
    cbrt'
      Parameter
        Identifier: 'x'
        NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' NumberConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' EPSILON'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns true if passed value is finite.
     * Unlike the global isFinite, Number.isFinite doesn't forcibly convert the parameter to a
     * number. Only finite values of the type number, result in true.
     * @param number A numeric value.
     */
    isFinite'
      Parameter
        Identifier: 'number'
        UnknownKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns true if the value passed is an integer, false otherwise.
     * @param number A numeric value.
     */
    isInteger'
      Parameter
        Identifier: 'number'
        UnknownKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a
     * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter
     * to a number. Only values of the type number, that are also NaN, result in true.
     * @param number A numeric value.
     */
    isNaN'
      Parameter
        Identifier: 'number'
        UnknownKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns true if the value passed is a safe integer.
     * @param number A numeric value.
     */
    isSafeInteger'
      Parameter
        Identifier: 'number'
        UnknownKeyword
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' MAX_SAFE_INTEGER'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' MIN_SAFE_INTEGER'
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Converts a string to a floating-point number.
     * @param string A string that contains a floating-point number.
     */
    parseFloat'
      Parameter
        Identifier: 'string'
        StringKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Converts A string to an integer.
     * @param string A string to convert into a number.
     * @param radix A value between 2 and 36 that specifies the base of the number in `string`.
     * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.
     * All other strings are considered decimal.
     */
    parseInt'
      Parameter
        Identifier: 'string'
        StringKeyword
      Parameter
        Identifier: ' radix'
        QuestionToken
        NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' ObjectConstructor'
    MethodSignature
      Identifier: '
    /**
     * Copy the values of all of the enumerable own properties from one or more source objects to a
     * target object. Returns the target object.
     * @param target The target object to copy to.
     * @param source The source object from which to copy properties.
     */
    assign'
      TypeParameter
        Identifier: 'T'
        TypeLiteral
      TypeParameter
        Identifier: ' U'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' source'
        TypeReference
          Identifier: ' U'
      IntersectionType
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: ' U'
    MethodSignature
      Identifier: '

    /**
     * Copy the values of all of the enumerable own properties from one or more source objects to a
     * target object. Returns the target object.
     * @param target The target object to copy to.
     * @param source1 The first source object from which to copy properties.
     * @param source2 The second source object from which to copy properties.
     */
    assign'
      TypeParameter
        Identifier: 'T'
        TypeLiteral
      TypeParameter
        Identifier: ' U'
      TypeParameter
        Identifier: ' V'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' source1'
        TypeReference
          Identifier: ' U'
      Parameter
        Identifier: ' source2'
        TypeReference
          Identifier: ' V'
      IntersectionType
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: ' U'
        TypeReference
          Identifier: ' V'
    MethodSignature
      Identifier: '

    /**
     * Copy the values of all of the enumerable own properties from one or more source objects to a
     * target object. Returns the target object.
     * @param target The target object to copy to.
     * @param source1 The first source object from which to copy properties.
     * @param source2 The second source object from which to copy properties.
     * @param source3 The third source object from which to copy properties.
     */
    assign'
      TypeParameter
        Identifier: 'T'
        TypeLiteral
      TypeParameter
        Identifier: ' U'
      TypeParameter
        Identifier: ' V'
      TypeParameter
        Identifier: ' W'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' source1'
        TypeReference
          Identifier: ' U'
      Parameter
        Identifier: ' source2'
        TypeReference
          Identifier: ' V'
      Parameter
        Identifier: ' source3'
        TypeReference
          Identifier: ' W'
      IntersectionType
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: ' U'
        TypeReference
          Identifier: ' V'
        TypeReference
          Identifier: ' W'
    MethodSignature
      Identifier: '

    /**
     * Copy the values of all of the enumerable own properties from one or more source objects to a
     * target object. Returns the target object.
     * @param target The target object to copy to.
     * @param sources One or more source objects from which to copy properties
     */
    assign'
      Parameter
        Identifier: 'target'
        ObjectKeyword
      Parameter
        DotDotDotToken
        Identifier: 'sources'
        ArrayType
          AnyKeyword
      AnyKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns an array of all symbol properties found directly on object o.
     * @param o Object to retrieve the symbols from.
     */
    getOwnPropertySymbols'
      Parameter
        Identifier: 'o'
        AnyKeyword
      ArrayType
        SymbolKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the names of the enumerable string properties and methods of an object.
     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
    keys'
      Parameter
        Identifier: 'o'
        TypeLiteral
      ArrayType
        StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns true if the values are the same value, false otherwise.
     * @param value1 The first value.
     * @param value2 The second value.
     */
    is'
      Parameter
        Identifier: 'value1'
        AnyKeyword
      Parameter
        Identifier: ' value2'
        AnyKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Sets the prototype of a specified object o to object proto or null. Returns the object o.
     * @param o The object to change its prototype.
     * @param proto The value of the new prototype or null.
     */
    setPrototypeOf'
      Parameter
        Identifier: 'o'
        AnyKeyword
      Parameter
        Identifier: ' proto'
        UnionType
          ObjectKeyword
          LiteralType
            NullKeyword
      AnyKeyword
  InterfaceDeclaration
    Identifier: ' ReadonlyArray'
    TypeParameter
      Identifier: 'T'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    find'
      TypeParameter
        Identifier: 'S'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    find'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' T'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' obj'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    toLocaleString'
      Parameter
        Identifier: 'locales'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        IntersectionType
          TypeReference
            QualifiedName
              Identifier: ' Intl'
              Identifier: 'NumberFormatOptions'
          TypeReference
            QualifiedName
              Identifier: ' Intl'
              Identifier: 'DateTimeFormatOptions'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' RegExp'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' flags'
      StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' sticky'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' unicode'
      BooleanKeyword
  InterfaceDeclaration
    Identifier: ' RegExpConstructor'
    ConstructSignature
      Parameter
        Identifier: 'pattern'
        UnionType
          TypeReference
            Identifier: ' RegExp'
          StringKeyword
      Parameter
        Identifier: ' flags'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' RegExp'
    CallSignature
      Parameter
        Identifier: 'pattern'
        UnionType
          TypeReference
            Identifier: ' RegExp'
          StringKeyword
      Parameter
        Identifier: ' flags'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' RegExp'
  InterfaceDeclaration
    Identifier: ' String'
    MethodSignature
      Identifier: '
    /**
     * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point
     * value of the UTF-16 encoded code point starting at the string element at position pos in
     * the String resulting from converting this object to a String.
     * If there is no element at that position, the result is undefined.
     * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.
     */
    codePointAt'
      Parameter
        Identifier: 'pos'
        NumberKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns true if searchString appears as a substring of the result of converting this
     * object to a String, at one or more positions that are
     * greater than or equal to position; otherwise, returns false.
     * @param searchString search string
     * @param position If position is undefined, 0 is assumed, so as to search all of the String.
     */
    includes'
      Parameter
        Identifier: 'searchString'
        StringKeyword
      Parameter
        Identifier: ' position'
        QuestionToken
        NumberKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns true if the sequence of elements of searchString converted to a String is the
     * same as the corresponding elements of this object (converted to a String) starting at
     * endPosition – length(this). Otherwise returns false.
     */
    endsWith'
      Parameter
        Identifier: 'searchString'
        StringKeyword
      Parameter
        Identifier: ' endPosition'
        QuestionToken
        NumberKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the String value result of normalizing the string into the normalization form
     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.
     * @param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default
     * is "NFC"
     */
    normalize'
      Parameter
        Identifier: 'form'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the String value result of normalizing the string into the normalization form
     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.
     * @param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default
     * is "NFC"
     */
    normalize'
      Parameter
        Identifier: 'form'
        QuestionToken
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a String value that is made from count copies appended together. If count is 0,
     * the empty string is returned.
     * @param count number of copies to append
     */
    repeat'
      Parameter
        Identifier: 'count'
        NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns true if the sequence of elements of searchString converted to a String is the
     * same as the corresponding elements of this object (converted to a String) starting at
     * position. Otherwise returns false.
     */
    startsWith'
      Parameter
        Identifier: 'searchString'
        StringKeyword
      Parameter
        Identifier: ' position'
        QuestionToken
        NumberKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns an `<a>` HTML anchor element and sets the name attribute to the text value
     * @deprecated A legacy feature for browser compatibility
     * @param name
     */
    anchor'
      Parameter
        Identifier: 'name'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a `<big>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
    big'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a `<blink>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
    blink'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a `<b>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
    bold'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a `<tt>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
    fixed'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a `<font>` HTML element and sets the color attribute value
     * @deprecated A legacy feature for browser compatibility
     */
    fontcolor'
      Parameter
        Identifier: 'color'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a `<font>` HTML element and sets the size attribute value
     * @deprecated A legacy feature for browser compatibility
     */
    fontsize'
      Parameter
        Identifier: 'size'
        NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a `<font>` HTML element and sets the size attribute value
     * @deprecated A legacy feature for browser compatibility
     */
    fontsize'
      Parameter
        Identifier: 'size'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns an `<i>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
    italics'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns an `<a>` HTML element and sets the href attribute value
     * @deprecated A legacy feature for browser compatibility
     */
    link'
      Parameter
        Identifier: 'url'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a `<small>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
    small'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a `<strike>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
    strike'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a `<sub>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
    sub'
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a `<sup>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
    sup'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' StringConstructor'
    MethodSignature
      Identifier: '
    /**
     * Return the String value whose elements are, in order, the elements in the List elements.
     * If length is 0, the empty string is returned.
     */
    fromCodePoint'
      Parameter
        DotDotDotToken
        Identifier: 'codePoints'
        ArrayType
          NumberKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    /**
     * String.raw is usually used as a tag function of a Tagged Template String. When called as
     * such, the first argument will be a well formed template call site object and the rest
     * parameter will contain the substitution values. It can also be called directly, for example,
     * to interleave strings and values from your own tag function, and in this case the only thing
     * it needs from the first argument is the raw property.
     * @param template A well-formed template string call site representation.
     * @param substitutions A set of substitution values.
     */
    raw'
      Parameter
        Identifier: 'template'
        TypeLiteral
          PropertySignature
            Identifier: ' raw'
            UnionType
              TypeOperator
                ArrayType
                  StringKeyword
              TypeReference
                Identifier: ' ArrayLike'
                StringKeyword
      Parameter
        DotDotDotToken
        Identifier: 'substitutions'
        ArrayType
          AnyKeyword
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Int8Array'
    MethodSignature
      Identifier: '
    toLocaleString'
      Parameter
        Identifier: 'locales'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'NumberFormatOptions'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Uint8Array'
    MethodSignature
      Identifier: '
    toLocaleString'
      Parameter
        Identifier: 'locales'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'NumberFormatOptions'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Uint8ClampedArray'
    MethodSignature
      Identifier: '
    toLocaleString'
      Parameter
        Identifier: 'locales'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'NumberFormatOptions'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Int16Array'
    MethodSignature
      Identifier: '
    toLocaleString'
      Parameter
        Identifier: 'locales'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'NumberFormatOptions'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Uint16Array'
    MethodSignature
      Identifier: '
    toLocaleString'
      Parameter
        Identifier: 'locales'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'NumberFormatOptions'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Int32Array'
    MethodSignature
      Identifier: '
    toLocaleString'
      Parameter
        Identifier: 'locales'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'NumberFormatOptions'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Uint32Array'
    MethodSignature
      Identifier: '
    toLocaleString'
      Parameter
        Identifier: 'locales'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'NumberFormatOptions'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Float32Array'
    MethodSignature
      Identifier: '
    toLocaleString'
      Parameter
        Identifier: 'locales'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'NumberFormatOptions'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' Float64Array'
    MethodSignature
      Identifier: '
    toLocaleString'
      Parameter
        Identifier: 'locales'
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Intl'
            Identifier: 'NumberFormatOptions'
      StringKeyword
