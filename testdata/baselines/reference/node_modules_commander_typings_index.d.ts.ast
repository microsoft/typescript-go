SourceFile
  ModuleDeclaration
    DeclareKeyword
    Identifier: ' commander'
    ModuleBlock
      InterfaceDeclaration
        Identifier: ' CommanderError'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Error'
        PropertySignature
          Identifier: '
    code'
          StringKeyword
        PropertySignature
          Identifier: '
    exitCode'
          NumberKeyword
        PropertySignature
          Identifier: '
    message'
          StringKeyword
        PropertySignature
          Identifier: '
    nestedError'
          QuestionToken
          StringKeyword
      TypeAliasDeclaration
        Identifier: ' CommanderErrorConstructor'
        TypeLiteral
          ConstructSignature
            Parameter
              Identifier: 'exitCode'
              NumberKeyword
            Parameter
              Identifier: ' code'
              StringKeyword
            Parameter
              Identifier: ' message'
              StringKeyword
            TypeReference
              Identifier: ' CommanderError'
      InterfaceDeclaration
        Identifier: ' Option'
        PropertySignature
          Identifier: '
    flags'
          StringKeyword
        PropertySignature
          Identifier: '
    required'
          BooleanKeyword
        PropertySignature
          Identifier: ' // A value must be supplied when the option is specified.
    optional'
          BooleanKeyword
        PropertySignature
          Identifier: ' // A value is optional when the option is specified.
    mandatory'
          BooleanKeyword
        PropertySignature
          Identifier: ' // The option must have a value after parsing, which usually means it must be specified on command line.
    bool'
          BooleanKeyword
        PropertySignature
          Identifier: '
    short'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
    long'
          StringKeyword
        PropertySignature
          Identifier: '
    description'
          StringKeyword
      TypeAliasDeclaration
        Identifier: ' OptionConstructor'
        TypeLiteral
          ConstructSignature
            Parameter
              Identifier: 'flags'
              StringKeyword
            Parameter
              Identifier: ' description'
              QuestionToken
              StringKeyword
            TypeReference
              Identifier: ' Option'
      InterfaceDeclaration
        Identifier: ' Command'
        HeritageClause
          ExpressionWithTypeArguments
            PropertyAccessExpression
              Identifier: ' NodeJS'
              Identifier: 'EventEmitter'
        IndexSignature
          Parameter
            Identifier: 'key'
            StringKeyword
          AnyKeyword
        PropertySignature
          Identifier: ' // options as properties

    args'
          ArrayType
            StringKeyword
        MethodSignature
          Identifier: '

    /**
     * Set the program version to `str`. 
     *
     * This method auto-registers the "-V, --version" flag
     * which will print the version number when passed.
     * 
     * You can optionally supply the  flags and description to override the defaults.
     */
    version'
          Parameter
            Identifier: 'str'
            StringKeyword
          Parameter
            Identifier: ' flags'
            QuestionToken
            StringKeyword
          Parameter
            Identifier: ' description'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /**
     * Define a command, implemented using an action handler.
     * 
     * @remarks
     * The command description is supplied using `.description`, not as a parameter to `.command`.
     * 
     * @example
     * ```ts
     *  program
     *    .command('clone <source> [destination]')
     *    .description('clone a repository into a newly created directory')
     *    .action((source, destination) => {
     *      console.log('clone command called');
     *    });
     * ```
     * 
     * @param nameAndArgs - command name and arguments, args are  `<required>` or `[optional]` and last may also be `variadic...`
     * @param opts - configuration options
     * @returns new command
     */
    command'
          Parameter
            Identifier: 'nameAndArgs'
            StringKeyword
          Parameter
            Identifier: ' opts'
            QuestionToken
            TypeReference
              Identifier: ' CommandOptions'
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '
    /**
     * Define a command, implemented in a separate executable file.
     * 
     * @remarks
     * The command description is supplied as the second parameter to `.command`.
     * 
     * @example
     * ```ts
     *  program
     *    .command('start <service>', 'start named service')
     *    .command('stop [service]', 'stop named serice, or all if no name supplied');
     * ```
     * 
     * @param nameAndArgs - command name and arguments, args are  `<required>` or `[optional]` and last may also be `variadic...`
     * @param description - description of executable command
     * @param opts - configuration options
     * @returns top level command for chaining more command definitions
     */
    command'
          Parameter
            Identifier: 'nameAndArgs'
            StringKeyword
          Parameter
            Identifier: ' description'
            StringKeyword
          Parameter
            Identifier: ' opts'
            QuestionToken
            TypeReference
              QualifiedName
                Identifier: ' commander'
                Identifier: 'CommandOptions'
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /**
     * Define argument syntax for the top-level command.
     *
     * @returns Command for chaining
     */
    arguments'
          Parameter
            Identifier: 'desc'
            StringKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /**
    * Parse expected `args`.
     *
     * For example `["[type]"]` becomes `[{ required: false, name: 'type' }]`.
     *
     * @returns Command for chaining
     */
     parseExpectedArgs'
          Parameter
            Identifier: 'args'
            ArrayType
              StringKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /**
     * Register callback to use as replacement for calling process.exit.
     */
    exitOverride'
          Parameter
            Identifier: 'callback'
            QuestionToken
            FunctionType
              Parameter
                Identifier: 'err'
                TypeReference
                  Identifier: ' CommanderError'
              UnionType
                NeverKeyword
                VoidKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /**
     * Register callback `fn` for the command.
     *
     * @example
     *      program
     *        .command('help')
     *        .description('display verbose help')
     *        .action(function() {
     *           // output help here
     *        });
     *
     * @returns Command for chaining
     */
    action'
          Parameter
            Identifier: 'fn'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              UnionType
                VoidKeyword
                TypeReference
                  Identifier: ' Promise'
                  VoidKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /**
     * Define option with `flags`, `description` and optional
     * coercion `fn`.
     *
     * The `flags` string should contain both the short and long flags,
     * separated by comma, a pipe or space. The following are all valid
     * all will output this way when `--help` is used.
     *
     *    "-p, --pepper"
     *    "-p|--pepper"
     *    "-p --pepper"
     *
     * @example
     *     // simple boolean defaulting to false
     *     program.option('-p, --pepper', 'add pepper');
     *
     *     --pepper
     *     program.pepper
     *     // => Boolean
     *
     *     // simple boolean defaulting to true
     *     program.option('-C, --no-cheese', 'remove cheese');
     *
     *     program.cheese
     *     // => true
     *
     *     --no-cheese
     *     program.cheese
     *     // => false
     *
     *     // required argument
     *     program.option('-C, --chdir <path>', 'change the working directory');
     *
     *     --chdir /tmp
     *     program.chdir
     *     // => "/tmp"
     *
     *     // optional argument
     *     program.option('-c, --cheese [type]', 'add cheese [marble]');
     *
     * @returns Command for chaining
     */
    option'
          Parameter
            Identifier: 'flags'
            StringKeyword
          Parameter
            Identifier: ' description'
            QuestionToken
            StringKeyword
          Parameter
            Identifier: ' fn'
            QuestionToken
            UnionType
              ParenthesizedType
                FunctionType
                  Parameter
                    Identifier: 'arg1'
                    AnyKeyword
                  Parameter
                    Identifier: ' arg2'
                    AnyKeyword
                  VoidKeyword
              TypeReference
                Identifier: ' RegExp'
          Parameter
            Identifier: ' defaultValue'
            QuestionToken
            AnyKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '
    option'
          Parameter
            Identifier: 'flags'
            StringKeyword
          Parameter
            Identifier: ' description'
            QuestionToken
            StringKeyword
          Parameter
            Identifier: ' defaultValue'
            QuestionToken
            AnyKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /**
     * Define a required option, which must have a value after parsing. This usually means
     * the option must be specified on the command line. (Otherwise the same as .option().)
     *
     * The `flags` string should contain both the short and long flags, separated by comma, a pipe or space.
     */
    requiredOption'
          Parameter
            Identifier: 'flags'
            StringKeyword
          Parameter
            Identifier: ' description'
            QuestionToken
            StringKeyword
          Parameter
            Identifier: ' fn'
            QuestionToken
            UnionType
              ParenthesizedType
                FunctionType
                  Parameter
                    Identifier: 'arg1'
                    AnyKeyword
                  Parameter
                    Identifier: ' arg2'
                    AnyKeyword
                  VoidKeyword
              TypeReference
                Identifier: ' RegExp'
          Parameter
            Identifier: ' defaultValue'
            QuestionToken
            AnyKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '
    requiredOption'
          Parameter
            Identifier: 'flags'
            StringKeyword
          Parameter
            Identifier: ' description'
            QuestionToken
            StringKeyword
          Parameter
            Identifier: ' defaultValue'
            QuestionToken
            AnyKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '


    /**
     * Whether to store option values as properties on command object,
     * or store separately (specify false). In both cases the option values can be accessed using .opts().
     *
     * @return Command for chaining
     */
    storeOptionsAsProperties'
          Parameter
            Identifier: 'value'
            QuestionToken
            BooleanKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /**
     * Whether to pass command to action handler,
     * or just the options (specify false).
     * 
     * @return Command for chaining
     */
    passCommandToAction'
          Parameter
            Identifier: 'value'
            QuestionToken
            BooleanKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /**
     * Allow unknown options on the command line.
     *
     * @param [arg] if `true` or omitted, no error will be thrown for unknown options.
     * @returns Command for chaining
     */
    allowUnknownOption'
          Parameter
            Identifier: 'arg'
            QuestionToken
            BooleanKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /**
     * Parse `argv`, setting options and invoking commands when defined.
     *
     * @returns Command for chaining
     */
    parse'
          Parameter
            Identifier: 'argv'
            ArrayType
              StringKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /**
     * Parse `argv`, setting options and invoking commands when defined.
     * 
     * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.
     *
     * @returns Promise
     */
    parseAsync'
          Parameter
            Identifier: 'argv'
            ArrayType
              StringKeyword
          TypeReference
            Identifier: ' Promise'
            AnyKeyword
        MethodSignature
          Identifier: '

    /**
     * Parse options from `argv` returning `argv` void of these options.
     */
    parseOptions'
          Parameter
            Identifier: 'argv'
            ArrayType
              StringKeyword
          TypeReference
            QualifiedName
              Identifier: ' commander'
              Identifier: 'ParseOptionsResult'
        MethodSignature
          Identifier: '

    /**
     * Return an object containing options as key-value pairs
     */
    opts'
          TypeLiteral
            IndexSignature
              Parameter
                Identifier: 'key'
                StringKeyword
              AnyKeyword
        MethodSignature
          Identifier: '

    /**
     * Set the description.
     * 
     * @returns Command for chaining
     */
    description'
          Parameter
            Identifier: 'str'
            StringKeyword
          Parameter
            Identifier: ' argsDescription'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'argName'
                  StringKeyword
                StringKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '
    /**
     * Get the description.
     */
    description'
          StringKeyword
        MethodSignature
          Identifier: '

    /**
     * Set an alias for the command.
     * 
     * @returns Command for chaining
     */
    alias'
          Parameter
            Identifier: 'alias'
            StringKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '
    /**
     * Get alias for the command.
     */
    alias'
          StringKeyword
        MethodSignature
          Identifier: '

    /**
     * Set the command usage.
     * 
     * @returns Command for chaining
     */
    usage'
          Parameter
            Identifier: 'str'
            StringKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '
    /**
     * Get the command usage.
     */
    usage'
          StringKeyword
        MethodSignature
          Identifier: '

    /**
     * Set the name of the command.
     * 
     * @returns Command for chaining
     */
    name'
          Parameter
            Identifier: 'str'
            StringKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '
    /**
     * Get the name of the command.
     */
    name'
          StringKeyword
        MethodSignature
          Identifier: '

    /**
     * Output help information for this command.
     *
     * When listener(s) are available for the helpLongFlag
     * those callbacks are invoked.
     */
    outputHelp'
          Parameter
            Identifier: 'cb'
            QuestionToken
            FunctionType
              Parameter
                Identifier: 'str'
                StringKeyword
              StringKeyword
          VoidKeyword
        MethodSignature
          Identifier: '

    /**
     * You can pass in flags and a description to override the help
     * flags and help description for your command.
     */
    helpOption'
          Parameter
            Identifier: 'flags'
            QuestionToken
            StringKeyword
          Parameter
            Identifier: ' description'
            QuestionToken
            StringKeyword
          TypeReference
            Identifier: ' Command'
        MethodSignature
          Identifier: '

    /** 
     * Output help information and exit.
     */
    help'
          Parameter
            Identifier: 'cb'
            QuestionToken
            FunctionType
              Parameter
                Identifier: 'str'
                StringKeyword
              StringKeyword
          NeverKeyword
      TypeAliasDeclaration
        Identifier: ' CommandConstructor'
        TypeLiteral
          ConstructSignature
            Parameter
              Identifier: 'name'
              QuestionToken
              StringKeyword
            TypeReference
              Identifier: ' Command'
      InterfaceDeclaration
        Identifier: ' CommandOptions'
        PropertySignature
          Identifier: '
        noHelp'
          QuestionToken
          BooleanKeyword
        PropertySignature
          Identifier: '
        isDefault'
          QuestionToken
          BooleanKeyword
        PropertySignature
          Identifier: '
        executableFile'
          QuestionToken
          StringKeyword
      InterfaceDeclaration
        Identifier: ' ParseOptionsResult'
        PropertySignature
          Identifier: '
        args'
          ArrayType
            StringKeyword
        PropertySignature
          Identifier: '
        unknown'
          ArrayType
            StringKeyword
      InterfaceDeclaration
        Identifier: ' CommanderStatic'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Command'
        PropertySignature
          Identifier: '
        Command'
          TypeReference
            Identifier: ' CommandConstructor'
        PropertySignature
          Identifier: '
        Option'
          TypeReference
            Identifier: ' OptionConstructor'
        PropertySignature
          Identifier: '
        CommanderError'
          TypeReference
            Identifier: 'CommanderErrorConstructor'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' commander'
        TypeReference
          QualifiedName
            Identifier: ' commander'
            Identifier: 'CommanderStatic'
  ExportAssignment
    Identifier: ' commander'
