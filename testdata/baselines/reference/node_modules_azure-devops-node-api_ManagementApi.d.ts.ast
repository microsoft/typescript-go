SourceFile
  ImportEqualsDeclaration
    Identifier: ' basem'
    ExternalModuleReference
      StringLiteral
  ImportEqualsDeclaration
    Identifier: ' VsoBaseInterfaces'
    ExternalModuleReference
      StringLiteral
  ImportEqualsDeclaration
    Identifier: ' ManagementInterfaces'
    ExternalModuleReference
      StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IManagementApi'
    HeritageClause
      ExpressionWithTypeArguments
        PropertyAccessExpression
          Identifier: ' basem'
          Identifier: 'ClientApiBase'
    MethodSignature
      Identifier: '
    deleteBillingInfo'
      Parameter
        Identifier: 'organizationId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    deleteMeterUsageHistory'
      Parameter
        Identifier: 'organizationId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getBillingInfo'
      Parameter
        Identifier: 'organizationId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'BillingInfo'
    MethodSignature
      Identifier: '
    saveBillingInfo'
      Parameter
        Identifier: 'billingInfo'
        TypeReference
          QualifiedName
            Identifier: ' ManagementInterfaces'
            Identifier: 'BillingInfo'
      Parameter
        Identifier: ' organizationId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    createBillingSnapshot'
      Parameter
        Identifier: 'meterUsage'
        TypeReference
          QualifiedName
            Identifier: ' ManagementInterfaces'
            Identifier: 'MeterUsage'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getBillableCommitterDetails'
      Parameter
        Identifier: 'billingDate'
        QuestionToken
        TypeReference
          Identifier: ' Date'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'ManagementInterfaces'
              Identifier: 'BillableCommitterDetails'
    MethodSignature
      Identifier: '
    getLastMeterUsage'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'MeterUsage'
    MethodSignature
      Identifier: '
    getMeterUsage'
      Parameter
        Identifier: 'billingDate'
        QuestionToken
        TypeReference
          Identifier: ' Date'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'MeterUsage'
    MethodSignature
      Identifier: '
    getOrgEnablementStatus'
      Parameter
        Identifier: 'includeAllProperties'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'AdvSecEnablementSettings'
    MethodSignature
      Identifier: '
    updateOrgEnablementStatus'
      Parameter
        Identifier: 'savedAdvSecEnablementStatus'
        TypeReference
          QualifiedName
            Identifier: ' ManagementInterfaces'
            Identifier: 'AdvSecEnablementSettingsUpdate'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getEstimatedOrgBillablePushers'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          StringKeyword
    MethodSignature
      Identifier: '
    getProjectEnablementStatus'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' includeAllProperties'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'AdvSecEnablementSettings'
    MethodSignature
      Identifier: '
    updateProjectEnablementStatus'
      Parameter
        Identifier: 'savedAdvSecEnablementStatus'
        TypeReference
          QualifiedName
            Identifier: ' ManagementInterfaces'
            Identifier: 'AdvSecEnablementSettingsUpdate'
      Parameter
        Identifier: ' project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getEstimatedProjectBillablePushers'
      Parameter
        Identifier: 'project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          StringKeyword
    MethodSignature
      Identifier: '
    getRepoEnablementStatus'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repository'
        StringKeyword
      Parameter
        Identifier: ' includeAllProperties'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'AdvSecEnablementStatus'
    MethodSignature
      Identifier: '
    updateRepoAdvSecEnablementStatus'
      Parameter
        Identifier: 'savedAdvSecEnablementStatus'
        TypeReference
          QualifiedName
            Identifier: ' ManagementInterfaces'
            Identifier: 'AdvSecEnablementStatusUpdate'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repository'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getEstimatedRepoBillableCommitters'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repository'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          StringKeyword
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ManagementApi'
    HeritageClause
      ExpressionWithTypeArguments
        PropertyAccessExpression
          Identifier: ' basem'
          Identifier: 'ClientApiBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' IManagementApi'
    Constructor
      Parameter
        Identifier: 'baseUrl'
        StringKeyword
      Parameter
        Identifier: ' handlers'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' VsoBaseInterfaces'
              Identifier: 'IRequestHandler'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' VsoBaseInterfaces'
            Identifier: 'IRequestOptions'
    MethodDeclaration
      Identifier: '
    /**
     * Delete the billing info for an organization.
     *
     * @param {string} organizationId
     */
    deleteBillingInfo'
      Parameter
        Identifier: 'organizationId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Delete the meter usage history from Primary SU for an organization.
     *
     * @param {string} organizationId
     */
    deleteMeterUsageHistory'
      Parameter
        Identifier: 'organizationId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Get the billing info for an organization.
     *
     * @param {string} organizationId - Organization ID to get billing info for.
     */
    getBillingInfo'
      Parameter
        Identifier: 'organizationId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'BillingInfo'
    MethodDeclaration
      Identifier: '
    /**
     * Save the billing info for an organization.
     *
     * @param {ManagementInterfaces.BillingInfo} billingInfo
     * @param {string} organizationId
     */
    saveBillingInfo'
      Parameter
        Identifier: 'billingInfo'
        TypeReference
          QualifiedName
            Identifier: ' ManagementInterfaces'
            Identifier: 'BillingInfo'
      Parameter
        Identifier: ' organizationId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * During multi-org billing computation in primary scale unit(EUS21), this API is used to create billing snapshot for a specific org. Primary scale unit will call this API for each org in different scsle units to create billing snapshot. Data will be stored in the org specific partition DB -> billing snapshot table. This is needed as customers will fetch billing data from their org specific partition DB.
     *
     * @param {ManagementInterfaces.MeterUsage} meterUsage
     */
    createBillingSnapshot'
      Parameter
        Identifier: 'meterUsage'
        TypeReference
          QualifiedName
            Identifier: ' ManagementInterfaces'
            Identifier: 'MeterUsage'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Get all billable committers details, including those not matched with a VSID.
     *
     * @param {Date} billingDate - The date to query, or if not provided, today
     */
    getBillableCommitterDetails'
      Parameter
        Identifier: 'billingDate'
        QuestionToken
        TypeReference
          Identifier: ' Date'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'ManagementInterfaces'
              Identifier: 'BillableCommitterDetails'
    MethodDeclaration
      Identifier: '
    /**
     */
    getLastMeterUsage'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'MeterUsage'
    MethodDeclaration
      Identifier: '
    /**
     * Get commiters used when calculating billing information.
     *
     * @param {Date} billingDate - The date to query, or if not provided, today
     */
    getMeterUsage'
      Parameter
        Identifier: 'billingDate'
        QuestionToken
        TypeReference
          Identifier: ' Date'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'MeterUsage'
    MethodDeclaration
      Identifier: '
    /**
     * Get the current status of Advanced Security for the organization
     *
     * @param {boolean} includeAllProperties - When true, also determine if pushes are blocked if they contain secrets
     */
    getOrgEnablementStatus'
      Parameter
        Identifier: 'includeAllProperties'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'AdvSecEnablementSettings'
    MethodDeclaration
      Identifier: '
    /**
     * Update the status of Advanced Security for the organization
     *
     * @param {ManagementInterfaces.AdvSecEnablementSettingsUpdate} savedAdvSecEnablementStatus - The new status
     */
    updateOrgEnablementStatus'
      Parameter
        Identifier: 'savedAdvSecEnablementStatus'
        TypeReference
          QualifiedName
            Identifier: ' ManagementInterfaces'
            Identifier: 'AdvSecEnablementSettingsUpdate'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Estimate the committers that would be added to the customer's usage if Advanced Security was enabled for this organization.
     *
     */
    getEstimatedOrgBillablePushers'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Get the current status of Advanced Security for a project
     *
     * @param {string} project - Project ID or project name
     * @param {boolean} includeAllProperties - When true, also determine if pushes are blocked if they contain secrets
     */
    getProjectEnablementStatus'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' includeAllProperties'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'AdvSecEnablementSettings'
    MethodDeclaration
      Identifier: '
    /**
     * Update the status of Advanced Security for the project
     *
     * @param {ManagementInterfaces.AdvSecEnablementSettingsUpdate} savedAdvSecEnablementStatus - The new status
     * @param {string} project - Project ID or project name
     */
    updateProjectEnablementStatus'
      Parameter
        Identifier: 'savedAdvSecEnablementStatus'
        TypeReference
          QualifiedName
            Identifier: ' ManagementInterfaces'
            Identifier: 'AdvSecEnablementSettingsUpdate'
      Parameter
        Identifier: ' project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Estimate the number of committers that would be added to the customer's usage if Advanced Security was enabled for this project.
     *
     * @param {string} project - Project ID or project name
     */
    getEstimatedProjectBillablePushers'
      Parameter
        Identifier: 'project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Determine if Advanced Security is enabled for a repository
     *
     * @param {string} project - Project ID or project name
     * @param {string} repository - The name or ID of the repository
     * @param {boolean} includeAllProperties - When true, will also determine if pushes are blocked when secrets are detected
     */
    getRepoEnablementStatus'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repository'
        StringKeyword
      Parameter
        Identifier: ' includeAllProperties'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'ManagementInterfaces'
            Identifier: 'AdvSecEnablementStatus'
    MethodDeclaration
      Identifier: '
    /**
     * Update the enablement of Advanced Security for a repository
     *
     * @param {ManagementInterfaces.AdvSecEnablementStatusUpdate} savedAdvSecEnablementStatus - new status
     * @param {string} project - Project ID or project name
     * @param {string} repository - Name or ID of the repository
     */
    updateRepoAdvSecEnablementStatus'
      Parameter
        Identifier: 'savedAdvSecEnablementStatus'
        TypeReference
          QualifiedName
            Identifier: ' ManagementInterfaces'
            Identifier: 'AdvSecEnablementStatusUpdate'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repository'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Estimate the committers that would be added to the customer's usage if Advanced Security was enabled for this repository.
     *
     * @param {string} project - Project ID or project name
     * @param {string} repository - The name or ID of the repository
     */
    getEstimatedRepoBillableCommitters'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repository'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          StringKeyword
