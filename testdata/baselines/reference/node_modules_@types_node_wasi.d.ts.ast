SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      InterfaceDeclaration
        Identifier: ' WASIOptions'
        PropertySignature
          Identifier: '
        /**
         * An array of strings that the WebAssembly application will
         * see as command line arguments. The first argument is the virtual path to the
         * WASI command itself.
         * @default []
         */
        args'
          QuestionToken
          UnionType
            ArrayType
              StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * An object similar to `process.env` that the WebAssembly
         * application will see as its environment.
         * @default {}
         */
        env'
          QuestionToken
          UnionType
            ObjectKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * This object represents the WebAssembly application's
         * sandbox directory structure. The string keys of `preopens` are treated as
         * directories within the sandbox. The corresponding values in `preopens` are
         * the real paths to those directories on the host machine.
         */
        preopens'
          QuestionToken
          UnionType
            TypeReference
              QualifiedName
                Identifier: ' NodeJS'
                Identifier: 'Dict'
              StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * By default, when WASI applications call `__wasi_proc_exit()`
         * `wasi.start()` will return with the exit code specified rather than terminatng the process.
         * Setting this option to `false` will cause the Node.js process to exit with
         * the specified exit code instead.
         * @default true
         */
        returnOnExit'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The file descriptor used as standard input in the WebAssembly application.
         * @default 0
         */
        stdin'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The file descriptor used as standard output in the WebAssembly application.
         * @default 1
         */
        stdout'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The file descriptor used as standard error in the WebAssembly application.
         * @default 2
         */
        stderr'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The version of WASI requested.
         * Currently the only supported versions are `'unstable'` and `'preview1'`. This option is mandatory.
         * @since v19.8.0
         */
        version'
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
      ClassDeclaration
        Identifier: ' WASI'
        Constructor
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              Identifier: ' WASIOptions'
        MethodDeclaration
          Identifier: '
        /**
         * Return an import object that can be passed to `WebAssembly.instantiate()` if no other WASM imports are needed beyond those provided by WASI.
         *
         * If version `unstable` was passed into the constructor it will return:
         *
         * ```js
         * { wasi_unstable: wasi.wasiImport }
         * ```
         *
         * If version `preview1` was passed into the constructor or no version was specified it will return:
         *
         * ```js
         * { wasi_snapshot_preview1: wasi.wasiImport }
         * ```
         * @since v19.8.0
         */
        getImportObject'
          ObjectKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Attempt to begin execution of `instance` as a WASI command by invoking its `_start()` export. If `instance` does not contain a `_start()` export, or if `instance` contains an `_initialize()`
         * export, then an exception is thrown.
         *
         * `start()` requires that `instance` exports a [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) named `memory`. If
         * `instance` does not have a `memory` export an exception is thrown.
         *
         * If `start()` is called more than once, an exception is thrown.
         * @since v13.3.0, v12.16.0
         */
        start'
          Parameter
            Identifier: 'instance'
            ObjectKeyword
          NumberKeyword
        MethodDeclaration
          Identifier: ' // TODO: avoid DOM dependency until WASM moved to own lib.
        /**
         * Attempt to initialize `instance` as a WASI reactor by invoking its `_initialize()` export, if it is present. If `instance` contains a `_start()` export, then an exception is thrown.
         *
         * `initialize()` requires that `instance` exports a [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) named `memory`.
         * If `instance` does not have a `memory` export an exception is thrown.
         *
         * If `initialize()` is called more than once, an exception is thrown.
         * @since v14.6.0, v12.19.0
         */
        initialize'
          Parameter
            Identifier: 'instance'
            ObjectKeyword
          VoidKeyword
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' wasiImport'
          TypeReference
            QualifiedName
              Identifier: ' NodeJS'
              Identifier: 'Dict'
            AnyKeyword
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ExportDeclaration
        StringLiteral
