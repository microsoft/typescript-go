SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' Abortable'
        StringLiteral
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' Stream'
        StringLiteral
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' ReadableStream'
        StringLiteral
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: '
        BigIntStats'
            ImportSpecifier
              Identifier: '
        BigIntStatsFs'
            ImportSpecifier
              Identifier: '
        BufferEncodingOption'
            ImportSpecifier
              Identifier: '
        constants'
              Identifier: ' fsConstants'
            ImportSpecifier
              Identifier: '
        CopyOptions'
            ImportSpecifier
              Identifier: '
        Dir'
            ImportSpecifier
              Identifier: '
        Dirent'
            ImportSpecifier
              Identifier: '
        GlobOptions'
            ImportSpecifier
              Identifier: '
        GlobOptionsWithFileTypes'
            ImportSpecifier
              Identifier: '
        GlobOptionsWithoutFileTypes'
            ImportSpecifier
              Identifier: '
        MakeDirectoryOptions'
            ImportSpecifier
              Identifier: '
        Mode'
            ImportSpecifier
              Identifier: '
        ObjectEncodingOptions'
            ImportSpecifier
              Identifier: '
        OpenDirOptions'
            ImportSpecifier
              Identifier: '
        OpenMode'
            ImportSpecifier
              Identifier: '
        PathLike'
            ImportSpecifier
              Identifier: '
        ReadStream'
            ImportSpecifier
              Identifier: '
        ReadVResult'
            ImportSpecifier
              Identifier: '
        RmDirOptions'
            ImportSpecifier
              Identifier: '
        RmOptions'
            ImportSpecifier
              Identifier: '
        StatFsOptions'
            ImportSpecifier
              Identifier: '
        StatOptions'
            ImportSpecifier
              Identifier: '
        Stats'
            ImportSpecifier
              Identifier: '
        StatsFs'
            ImportSpecifier
              Identifier: '
        TimeLike'
            ImportSpecifier
              Identifier: '
        WatchEventType'
            ImportSpecifier
              Identifier: '
        WatchOptions'
            ImportSpecifier
              Identifier: '
        WriteStream'
            ImportSpecifier
              Identifier: '
        WriteVResult'
        StringLiteral
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' Interface'
              Identifier: ' ReadlineInterface'
        StringLiteral
      InterfaceDeclaration
        Identifier: ' FileChangeInfo'
        TypeParameter
          Identifier: 'T'
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' Buffer'
        PropertySignature
          Identifier: '
        eventType'
          TypeReference
            Identifier: ' WatchEventType'
        PropertySignature
          Identifier: '
        filename'
          UnionType
            TypeReference
              Identifier: ' T'
            LiteralType
              NullKeyword
      InterfaceDeclaration
        Identifier: ' FlagAndOpenMode'
        PropertySignature
          Identifier: '
        mode'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' Mode'
            UndefinedKeyword
        PropertySignature
          Identifier: '
        flag'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' OpenMode'
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' FileReadResult'
        TypeParameter
          Identifier: 'T'
          TypeReference
            QualifiedName
              Identifier: ' NodeJS'
              Identifier: 'ArrayBufferView'
        PropertySignature
          Identifier: '
        bytesRead'
          NumberKeyword
        PropertySignature
          Identifier: '
        buffer'
          TypeReference
            Identifier: ' T'
      InterfaceDeclaration
        Identifier: ' FileReadOptions'
        TypeParameter
          Identifier: 'T'
          TypeReference
            QualifiedName
              Identifier: ' NodeJS'
              Identifier: 'ArrayBufferView'
          TypeReference
            Identifier: ' Buffer'
        PropertySignature
          Identifier: '
        /**
         * @default `Buffer.alloc(0xffff)`
         */
        buffer'
          QuestionToken
          TypeReference
            Identifier: ' T'
        PropertySignature
          Identifier: '
        /**
         * @default 0
         */
        offset'
          QuestionToken
          UnionType
            NumberKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        /**
         * @default `buffer.byteLength`
         */
        length'
          QuestionToken
          UnionType
            NumberKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        position'
          QuestionToken
          UnionType
            NumberKeyword
            LiteralType
              NullKeyword
      InterfaceDeclaration
        Identifier: ' CreateReadStreamOptions'
        PropertySignature
          Identifier: '
        encoding'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        autoClose'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        emitClose'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        start'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        end'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        highWaterMark'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' CreateWriteStreamOptions'
        PropertySignature
          Identifier: '
        encoding'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        autoClose'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        emitClose'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        start'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        highWaterMark'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        flush'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' ReadableWebStreamOptions'
        PropertySignature
          Identifier: '
        /**
         * Whether to open a normal or a `'bytes'` stream.
         * @since v20.0.0
         */
        type'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' FileHandle'
        PropertySignature
          ReadonlyKeyword
          Identifier: ' fd'
          NumberKeyword
        MethodSignature
          Identifier: '
        /**
         * Alias of `filehandle.writeFile()`.
         *
         * When operating on file handles, the mode cannot be changed from what it was set
         * to with `fsPromises.open()`. Therefore, this is equivalent to `filehandle.writeFile()`.
         * @since v10.0.0
         * @return Fulfills with `undefined` upon success.
         */
        appendFile'
          Parameter
            Identifier: '
            data'
            UnionType
              StringKeyword
              TypeReference
                Identifier: ' Uint8Array'
          Parameter
            Identifier: '
            options'
            QuestionToken
            UnionType
              ParenthesizedType
                IntersectionType
                  TypeReference
                    Identifier: 'ObjectEncodingOptions'
                  TypeReference
                    Identifier: ' FlagAndOpenMode'
                  TypeLiteral
                    PropertySignature
                      Identifier: ' flush'
                      QuestionToken
                      UnionType
                        BooleanKeyword
                        UndefinedKeyword
              TypeReference
                Identifier: ' BufferEncoding'
              LiteralType
                NullKeyword
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
        MethodSignature
          Identifier: '
        /**
         * Changes the ownership of the file. A wrapper for [`chown(2)`](http://man7.org/linux/man-pages/man2/chown.2.html).
         * @since v10.0.0
         * @param uid The file's new owner's user id.
         * @param gid The file's new group's group id.
         * @return Fulfills with `undefined` upon success.
         */
        chown'
          Parameter
            Identifier: 'uid'
            NumberKeyword
          Parameter
            Identifier: ' gid'
            NumberKeyword
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
        MethodSignature
          Identifier: '
        /**
         * Modifies the permissions on the file. See [`chmod(2)`](http://man7.org/linux/man-pages/man2/chmod.2.html).
         * @since v10.0.0
         * @param mode the file mode bit mask.
         * @return Fulfills with `undefined` upon success.
         */
        chmod'
          Parameter
            Identifier: 'mode'
            TypeReference
              Identifier: ' Mode'
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
        MethodSignature
          Identifier: '
        /**
         * Unlike the 16 KiB default `highWaterMark` for a `stream.Readable`, the stream
         * returned by this method has a default `highWaterMark` of 64 KiB.
         *
         * `options` can include `start` and `end` values to read a range of bytes from
         * the file instead of the entire file. Both `start` and `end` are inclusive and
         * start counting at 0, allowed values are in the
         * \[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\] range. If `start` is
         * omitted or `undefined`, `filehandle.createReadStream()` reads sequentially from
         * the current file position. The `encoding` can be any one of those accepted by `Buffer`.
         *
         * If the `FileHandle` points to a character device that only supports blocking
         * reads (such as keyboard or sound card), read operations do not finish until data
         * is available. This can prevent the process from exiting and the stream from
         * closing naturally.
         *
         * By default, the stream will emit a `'close'` event after it has been
         * destroyed.  Set the `emitClose` option to `false` to change this behavior.
         *
         * ```js
         * import { open } from 'node:fs/promises';
         *
         * const fd = await open('/dev/input/event0');
         * // Create a stream from some character device.
         * const stream = fd.createReadStream();
         * setTimeout(() => {
         *   stream.close(); // This may not close the stream.
         *   // Artificially marking end-of-stream, as if the underlying resource had
         *   // indicated end-of-file by itself, allows the stream to close.
         *   // This does not cancel pending read operations, and if there is such an
         *   // operation, the process may still not be able to exit successfully
         *   // until it finishes.
         *   stream.push(null);
         *   stream.read(0);
         * }, 100);
         * ```
         *
         * If `autoClose` is false, then the file descriptor won't be closed, even if
         * there's an error. It is the application's responsibility to close it and make
         * sure there's no file descriptor leak. If `autoClose` is set to true (default
         * behavior), on `'error'` or `'end'` the file descriptor will be closed
         * automatically.
         *
         * An example to read the last 10 bytes of a file which is 100 bytes long:
         *
         * ```js
         * import { open } from 'node:fs/promises';
         *
         * const fd = await open('sample.txt');
         * fd.createReadStream({ start: 90, end: 99 });
         * ```
         * @since v16.11.0
         */
        createReadStream'
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              Identifier: ' CreateReadStreamOptions'
          TypeReference
            Identifier: ' ReadStream'
        MethodSignature
          Identifier: '
        /**
         * `options` may also include a `start` option to allow writing data at some
         * position past the beginning of the file, allowed values are in the
         * \[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\] range. Modifying a file rather than
         * replacing it may require the `flags` `open` option to be set to `r+` rather than
         * the default `r`. The `encoding` can be any one of those accepted by `Buffer`.
         *
         * If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically. If `autoClose` is false,
         * then the file descriptor won't be closed, even if there's an error.
         * It is the application's responsibility to close it and make sure there's no
         * file descriptor leak.
         *
         * By default, the stream will emit a `'close'` event after it has been
         * destroyed.  Set the `emitClose` option to `false` to change this behavior.
         * @since v16.11.0
         */
        createWriteStream'
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              Identifier: ' CreateWriteStreamOptions'
          TypeReference
            Identifier: ' WriteStream'
        MethodSignature
          Identifier: '
        /**
         * Forces all currently queued I/O operations associated with the file to the
         * operating system's synchronized I/O completion state. Refer to the POSIX [`fdatasync(2)`](http://man7.org/linux/man-pages/man2/fdatasync.2.html) documentation for details.
         *
         * Unlike `filehandle.sync` this method does not flush modified metadata.
         * @since v10.0.0
         * @return Fulfills with `undefined` upon success.
         */
        datasync'
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
        MethodSignature
          Identifier: '
        /**
         * Request that all data for the open file descriptor is flushed to the storage
         * device. The specific implementation is operating system and device specific.
         * Refer to the POSIX [`fsync(2)`](http://man7.org/linux/man-pages/man2/fsync.2.html) documentation for more detail.
         * @since v10.0.0
         * @return Fulfills with `undefined` upon success.
         */
        sync'
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
        MethodSignature
          Identifier: '
        /**
         * Reads data from the file and stores that in the given buffer.
         *
         * If the file is not modified concurrently, the end-of-file is reached when the
         * number of bytes read is zero.
         * @since v10.0.0
         * @param buffer A buffer that will be filled with the file data read.
         * @param offset The location in the buffer at which to start filling.
         * @param length The number of bytes to read.
         * @param position The location where to begin reading data from the file. If `null`, data will be read from the current file position, and the position will be updated. If `position` is an
         * integer, the current file position will remain unchanged.
         * @return Fulfills upon success with an object with two properties:
         */
        read'
          TypeParameter
            Identifier: 'T'
            TypeReference
              QualifiedName
                Identifier: ' NodeJS'
                Identifier: 'ArrayBufferView'
          Parameter
            Identifier: '
            buffer'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: '
            offset'
            QuestionToken
            UnionType
              NumberKeyword
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            length'
            QuestionToken
            UnionType
              NumberKeyword
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            position'
            QuestionToken
            UnionType
              NumberKeyword
              LiteralType
                NullKeyword
          TypeReference
            Identifier: ' Promise'
            TypeReference
              Identifier: 'FileReadResult'
              TypeReference
                Identifier: 'T'
        MethodSignature
          Identifier: '
        read'
          TypeParameter
            Identifier: 'T'
            TypeReference
              QualifiedName
                Identifier: ' NodeJS'
                Identifier: 'ArrayBufferView'
            TypeReference
              Identifier: ' Buffer'
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              Identifier: ' FileReadOptions'
              TypeReference
                Identifier: 'T'
          TypeReference
            Identifier: ' Promise'
            TypeReference
              Identifier: 'FileReadResult'
              TypeReference
                Identifier: 'T'
        MethodSignature
          Identifier: '
        /**
         * Returns a `ReadableStream` that may be used to read the files data.
         *
         * An error will be thrown if this method is called more than once or is called
         * after the `FileHandle` is closed or closing.
         *
         * ```js
         * import {
         *   open,
         * } from 'node:fs/promises';
         *
         * const file = await open('./some/file/to/read');
         *
         * for await (const chunk of file.readableWebStream())
         *   console.log(chunk);
         *
         * await file.close();
         * ```
         *
         * While the `ReadableStream` will read the file to completion, it will not
         * close the `FileHandle` automatically. User code must still call the`fileHandle.close()` method.
         * @since v17.0.0
         * @experimental
         */
        readableWebStream'
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              Identifier: ' ReadableWebStreamOptions'
          TypeReference
            Identifier: ' ReadableStream'
        MethodSignature
          Identifier: '
        /**
         * Asynchronously reads the entire contents of a file.
         *
         * If `options` is a string, then it specifies the `encoding`.
         *
         * The `FileHandle` has to support reading.
         *
         * If one or more `filehandle.read()` calls are made on a file handle and then a `filehandle.readFile()` call is made, the data will be read from the current
         * position till the end of the file. It doesn't always read from the beginning
         * of the file.
         * @since v10.0.0
         * @return Fulfills upon a successful read with the contents of the file. If no encoding is specified (using `options.encoding`), the data is returned as a {Buffer} object. Otherwise, the
         * data will be a string.
         */
        readFile'
          Parameter
            Identifier: '
            options'
            QuestionToken
            UnionType
              TypeLiteral
                PropertySignature
                  Identifier: '
                encoding'
                  QuestionToken
                  UnionType
                    LiteralType
                      NullKeyword
                    UndefinedKeyword
                PropertySignature
                  Identifier: '
                flag'
                  QuestionToken
                  UnionType
                    TypeReference
                      Identifier: ' OpenMode'
                    UndefinedKeyword
              LiteralType
                NullKeyword
          TypeReference
            Identifier: ' Promise'
            TypeReference
              Identifier: 'Buffer'
        MethodSignature
          Identifier: '
        /**
         * Asynchronously reads the entire contents of a file. The underlying file will _not_ be closed automatically.
         * The `FileHandle` must have been opened for reading.
         * @param options An object that may contain an optional flag.
         * If a flag is not provided, it defaults to `'r'`.
         */
        readFile'
          Parameter
            Identifier: '
            options'
            UnionType
              TypeLiteral
                PropertySignature
                  Identifier: '
                    encoding'
                  TypeReference
                    Identifier: ' BufferEncoding'
                PropertySignature
                  Identifier: '
                    flag'
                  QuestionToken
                  UnionType
                    TypeReference
                      Identifier: ' OpenMode'
                    UndefinedKeyword
              TypeReference
                Identifier: ' BufferEncoding'
          TypeReference
            Identifier: ' Promise'
            StringKeyword
        MethodSignature
          Identifier: '
        /**
         * Asynchronously reads the entire contents of a file. The underlying file will _not_ be closed automatically.
         * The `FileHandle` must have been opened for reading.
         * @param options An object that may contain an optional flag.
         * If a flag is not provided, it defaults to `'r'`.
         */
        readFile'
          Parameter
            Identifier: '
            options'
            QuestionToken
            UnionType
              ParenthesizedType
                IntersectionType
                  TypeReference
                    Identifier: 'ObjectEncodingOptions'
                  TypeLiteral
                    PropertySignature
                      Identifier: '
                    flag'
                      QuestionToken
                      UnionType
                        TypeReference
                          Identifier: ' OpenMode'
                        UndefinedKeyword
              TypeReference
                Identifier: ' BufferEncoding'
              LiteralType
                NullKeyword
          TypeReference
            Identifier: ' Promise'
            UnionType
              StringKeyword
              TypeReference
                Identifier: ' Buffer'
        MethodSignature
          Identifier: '
        /**
         * Convenience method to create a `readline` interface and stream over the file.
         * See `filehandle.createReadStream()` for the options.
         *
         * ```js
         * import { open } from 'node:fs/promises';
         *
         * const file = await open('./some/file/to/read');
         *
         * for await (const line of file.readLines()) {
         *   console.log(line);
         * }
         * ```
         * @since v18.11.0
         */
        readLines'
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              Identifier: ' CreateReadStreamOptions'
          TypeReference
            Identifier: ' ReadlineInterface'
        MethodSignature
          Identifier: '
        /**
         * @since v10.0.0
         * @return Fulfills with an {fs.Stats} for the file.
         */
        stat'
          Parameter
            Identifier: '
            opts'
            QuestionToken
            IntersectionType
              TypeReference
                Identifier: ' StatOptions'
              TypeLiteral
                PropertySignature
                  Identifier: '
                bigint'
                  QuestionToken
                  UnionType
                    LiteralType
                      FalseKeyword
                    UndefinedKeyword
          TypeReference
            Identifier: ' Promise'
            TypeReference
              Identifier: 'Stats'
        MethodSignature
          Identifier: '
        stat'
          Parameter
            Identifier: '
            opts'
            IntersectionType
              TypeReference
                Identifier: ' StatOptions'
              TypeLiteral
                PropertySignature
                  Identifier: '
                bigint'
                  LiteralType
                    TrueKeyword
          TypeReference
            Identifier: ' Promise'
            TypeReference
              Identifier: 'BigIntStats'
        MethodSignature
          Identifier: '
        stat'
          Parameter
            Identifier: 'opts'
            QuestionToken
            TypeReference
              Identifier: ' StatOptions'
          TypeReference
            Identifier: ' Promise'
            UnionType
              TypeReference
                Identifier: 'Stats'
              TypeReference
                Identifier: ' BigIntStats'
        MethodSignature
          Identifier: '
        /**
         * Truncates the file.
         *
         * If the file was larger than `len` bytes, only the first `len` bytes will be
         * retained in the file.
         *
         * The following example retains only the first four bytes of the file:
         *
         * ```js
         * import { open } from 'node:fs/promises';
         *
         * let filehandle = null;
         * try {
         *   filehandle = await open('temp.txt', 'r+');
         *   await filehandle.truncate(4);
         * } finally {
         *   await filehandle?.close();
         * }
         * ```
         *
         * If the file previously was shorter than `len` bytes, it is extended, and the
         * extended part is filled with null bytes (`'\0'`):
         *
         * If `len` is negative then `0` will be used.
         * @since v10.0.0
         * @param [len=0]
         * @return Fulfills with `undefined` upon success.
         */
        truncate'
          Parameter
            Identifier: 'len'
            QuestionToken
            NumberKeyword
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
        MethodSignature
          Identifier: '
        /**
         * Change the file system timestamps of the object referenced by the `FileHandle` then fulfills the promise with no arguments upon success.
         * @since v10.0.0
         */
        utimes'
          Parameter
            Identifier: 'atime'
            TypeReference
              Identifier: ' TimeLike'
          Parameter
            Identifier: ' mtime'
            TypeReference
              Identifier: ' TimeLike'
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
        MethodSignature
          Identifier: '
        /**
         * Asynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an
         * [AsyncIterable](https://tc39.github.io/ecma262/#sec-asynciterable-interface), or an
         * [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol) object.
         * The promise is fulfilled with no arguments upon success.
         *
         * If `options` is a string, then it specifies the `encoding`.
         *
         * The `FileHandle` has to support writing.
         *
         * It is unsafe to use `filehandle.writeFile()` multiple times on the same file
         * without waiting for the promise to be fulfilled (or rejected).
         *
         * If one or more `filehandle.write()` calls are made on a file handle and then a`filehandle.writeFile()` call is made, the data will be written from the
         * current position till the end of the file. It doesn't always write from the
         * beginning of the file.
         * @since v10.0.0
         */
        writeFile'
          Parameter
            Identifier: '
            data'
            UnionType
              StringKeyword
              TypeReference
                Identifier: ' Uint8Array'
          Parameter
            Identifier: '
            options'
            QuestionToken
            UnionType
              ParenthesizedType
                IntersectionType
                  TypeReference
                    Identifier: 'ObjectEncodingOptions'
                  TypeReference
                    Identifier: ' FlagAndOpenMode'
                  TypeReference
                    Identifier: ' Abortable'
                  TypeLiteral
                    PropertySignature
                      Identifier: ' flush'
                      QuestionToken
                      UnionType
                        BooleanKeyword
                        UndefinedKeyword
              TypeReference
                Identifier: ' BufferEncoding'
              LiteralType
                NullKeyword
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
        MethodSignature
          Identifier: '
        /**
         * Write `buffer` to the file.
         *
         * The promise is fulfilled with an object containing two properties:
         *
         * It is unsafe to use `filehandle.write()` multiple times on the same file
         * without waiting for the promise to be fulfilled (or rejected). For this
         * scenario, use `filehandle.createWriteStream()`.
         *
         * On Linux, positional writes do not work when the file is opened in append mode.
         * The kernel ignores the position argument and always appends the data to
         * the end of the file.
         * @since v10.0.0
         * @param offset The start position from within `buffer` where the data to write begins.
         * @param [length=buffer.byteLength - offset] The number of bytes from `buffer` to write.
         * @param [position='null'] The offset from the beginning of the file where the data from `buffer` should be written. If `position` is not a `number`, the data will be written at the current
         * position. See the POSIX pwrite(2) documentation for more detail.
         */
        write'
          TypeParameter
            Identifier: 'TBuffer'
            TypeReference
              Identifier: ' Uint8Array'
          Parameter
            Identifier: '
            buffer'
            TypeReference
              Identifier: ' TBuffer'
          Parameter
            Identifier: '
            offset'
            QuestionToken
            UnionType
              NumberKeyword
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            length'
            QuestionToken
            UnionType
              NumberKeyword
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            position'
            QuestionToken
            UnionType
              NumberKeyword
              LiteralType
                NullKeyword
          TypeReference
            Identifier: ' Promise'
            TypeLiteral
              PropertySignature
                Identifier: '
            bytesWritten'
                NumberKeyword
              PropertySignature
                Identifier: '
            buffer'
                TypeReference
                  Identifier: ' TBuffer'
        MethodSignature
          Identifier: '
        write'
          Parameter
            Identifier: '
            data'
            StringKeyword
          Parameter
            Identifier: '
            position'
            QuestionToken
            UnionType
              NumberKeyword
              LiteralType
                NullKeyword
          Parameter
            Identifier: '
            encoding'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' BufferEncoding'
              LiteralType
                NullKeyword
          TypeReference
            Identifier: ' Promise'
            TypeLiteral
              PropertySignature
                Identifier: '
            bytesWritten'
                NumberKeyword
              PropertySignature
                Identifier: '
            buffer'
                StringKeyword
        MethodSignature
          Identifier: '
        /**
         * Write an array of [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) s to the file.
         *
         * The promise is fulfilled with an object containing a two properties:
         *
         * It is unsafe to call `writev()` multiple times on the same file without waiting
         * for the promise to be fulfilled (or rejected).
         *
         * On Linux, positional writes don't work when the file is opened in append mode.
         * The kernel ignores the position argument and always appends the data to
         * the end of the file.
         * @since v12.9.0
         * @param [position='null'] The offset from the beginning of the file where the data from `buffers` should be written. If `position` is not a `number`, the data will be written at the current
         * position.
         */
        writev'
          Parameter
            Identifier: 'buffers'
            TypeOperator
              ArrayType
                TypeReference
                  QualifiedName
                    Identifier: ' NodeJS'
                    Identifier: 'ArrayBufferView'
          Parameter
            Identifier: ' position'
            QuestionToken
            NumberKeyword
          TypeReference
            Identifier: ' Promise'
            TypeReference
              Identifier: 'WriteVResult'
        MethodSignature
          Identifier: '
        /**
         * Read from a file and write to an array of [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) s
         * @since v13.13.0, v12.17.0
         * @param [position='null'] The offset from the beginning of the file where the data should be read from. If `position` is not a `number`, the data will be read from the current position.
         * @return Fulfills upon success an object containing two properties:
         */
        readv'
          Parameter
            Identifier: 'buffers'
            TypeOperator
              ArrayType
                TypeReference
                  QualifiedName
                    Identifier: ' NodeJS'
                    Identifier: 'ArrayBufferView'
          Parameter
            Identifier: ' position'
            QuestionToken
            NumberKeyword
          TypeReference
            Identifier: ' Promise'
            TypeReference
              Identifier: 'ReadVResult'
        MethodSignature
          Identifier: '
        /**
         * Closes the file handle after waiting for any pending operation on the handle to
         * complete.
         *
         * ```js
         * import { open } from 'node:fs/promises';
         *
         * let filehandle;
         * try {
         *   filehandle = await open('thefile.txt', 'r');
         * } finally {
         *   await filehandle?.close();
         * }
         * ```
         * @since v10.0.0
         * @return Fulfills with `undefined` upon success.
         */
        close'
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
        MethodSignature
          ComputedPropertyName
            PropertyAccessExpression
              Identifier: 'Symbol'
              Identifier: 'asyncDispose'
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' constants'
            TypeQuery
              Identifier: ' fsConstants'
      FunctionDeclaration
        Identifier: ' access'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' mode'
          QuestionToken
          NumberKeyword
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' copyFile'
        Parameter
          Identifier: 'src'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' dest'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' mode'
          QuestionToken
          NumberKeyword
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' open'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' flags'
          QuestionToken
          UnionType
            StringKeyword
            NumberKeyword
        Parameter
          Identifier: ' mode'
          QuestionToken
          TypeReference
            Identifier: ' Mode'
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'FileHandle'
      FunctionDeclaration
        Identifier: ' rename'
        Parameter
          Identifier: 'oldPath'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' newPath'
          TypeReference
            Identifier: ' PathLike'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' truncate'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' len'
          QuestionToken
          NumberKeyword
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' rmdir'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' RmDirOptions'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' rm'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' RmOptions'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' mkdir'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        options'
          IntersectionType
            TypeReference
              Identifier: ' MakeDirectoryOptions'
            TypeLiteral
              PropertySignature
                Identifier: '
            recursive'
                LiteralType
                  TrueKeyword
        TypeReference
          Identifier: ' Promise'
          UnionType
            StringKeyword
            UndefinedKeyword
      FunctionDeclaration
        Identifier: ' mkdir'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' Mode'
            ParenthesizedType
              IntersectionType
                TypeReference
                  Identifier: 'MakeDirectoryOptions'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                recursive'
                    QuestionToken
                    UnionType
                      LiteralType
                        FalseKeyword
                      UndefinedKeyword
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' mkdir'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' Mode'
            TypeReference
              Identifier: ' MakeDirectoryOptions'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          UnionType
            StringKeyword
            UndefinedKeyword
      FunctionDeclaration
        Identifier: ' readdir'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        options'
          QuestionToken
          UnionType
            ParenthesizedType
              IntersectionType
                TypeReference
                  Identifier: 'ObjectEncodingOptions'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                withFileTypes'
                    QuestionToken
                    UnionType
                      LiteralType
                        FalseKeyword
                      UndefinedKeyword
                  PropertySignature
                    Identifier: '
                recursive'
                    QuestionToken
                    UnionType
                      BooleanKeyword
                      UndefinedKeyword
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          ArrayType
            StringKeyword
      FunctionDeclaration
        Identifier: ' readdir'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        options'
          UnionType
            TypeLiteral
              PropertySignature
                Identifier: '
                encoding'
                LiteralType
                  StringLiteral
              PropertySignature
                Identifier: '
                withFileTypes'
                QuestionToken
                UnionType
                  LiteralType
                    FalseKeyword
                  UndefinedKeyword
              PropertySignature
                Identifier: '
                recursive'
                QuestionToken
                UnionType
                  BooleanKeyword
                  UndefinedKeyword
            LiteralType
              StringLiteral
        TypeReference
          Identifier: ' Promise'
          ArrayType
            TypeReference
              Identifier: 'Buffer'
      FunctionDeclaration
        Identifier: ' readdir'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        options'
          QuestionToken
          UnionType
            ParenthesizedType
              IntersectionType
                TypeReference
                  Identifier: 'ObjectEncodingOptions'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                withFileTypes'
                    QuestionToken
                    UnionType
                      LiteralType
                        FalseKeyword
                      UndefinedKeyword
                  PropertySignature
                    Identifier: '
                recursive'
                    QuestionToken
                    UnionType
                      BooleanKeyword
                      UndefinedKeyword
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          UnionType
            ArrayType
              StringKeyword
            ArrayType
              TypeReference
                Identifier: ' Buffer'
      FunctionDeclaration
        Identifier: ' readdir'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        options'
          IntersectionType
            TypeReference
              Identifier: ' ObjectEncodingOptions'
            TypeLiteral
              PropertySignature
                Identifier: '
            withFileTypes'
                LiteralType
                  TrueKeyword
              PropertySignature
                Identifier: '
            recursive'
                QuestionToken
                UnionType
                  BooleanKeyword
                  UndefinedKeyword
        TypeReference
          Identifier: ' Promise'
          ArrayType
            TypeReference
              Identifier: 'Dirent'
      FunctionDeclaration
        Identifier: ' readlink'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' ObjectEncodingOptions'
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          StringKeyword
      FunctionDeclaration
        Identifier: ' readlink'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' options'
          TypeReference
            Identifier: ' BufferEncodingOption'
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'Buffer'
      FunctionDeclaration
        Identifier: ' readlink'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' ObjectEncodingOptions'
            StringKeyword
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' Buffer'
      FunctionDeclaration
        Identifier: ' symlink'
        Parameter
          Identifier: 'target'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' type'
          QuestionToken
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' lstat'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        opts'
          QuestionToken
          IntersectionType
            TypeReference
              Identifier: ' StatOptions'
            TypeLiteral
              PropertySignature
                Identifier: '
            bigint'
                QuestionToken
                UnionType
                  LiteralType
                    FalseKeyword
                  UndefinedKeyword
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'Stats'
      FunctionDeclaration
        Identifier: ' lstat'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        opts'
          IntersectionType
            TypeReference
              Identifier: ' StatOptions'
            TypeLiteral
              PropertySignature
                Identifier: '
            bigint'
                LiteralType
                  TrueKeyword
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'BigIntStats'
      FunctionDeclaration
        Identifier: ' lstat'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' opts'
          QuestionToken
          TypeReference
            Identifier: ' StatOptions'
        TypeReference
          Identifier: ' Promise'
          UnionType
            TypeReference
              Identifier: 'Stats'
            TypeReference
              Identifier: ' BigIntStats'
      FunctionDeclaration
        Identifier: ' stat'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        opts'
          QuestionToken
          IntersectionType
            TypeReference
              Identifier: ' StatOptions'
            TypeLiteral
              PropertySignature
                Identifier: '
            bigint'
                QuestionToken
                UnionType
                  LiteralType
                    FalseKeyword
                  UndefinedKeyword
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'Stats'
      FunctionDeclaration
        Identifier: ' stat'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        opts'
          IntersectionType
            TypeReference
              Identifier: ' StatOptions'
            TypeLiteral
              PropertySignature
                Identifier: '
            bigint'
                LiteralType
                  TrueKeyword
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'BigIntStats'
      FunctionDeclaration
        Identifier: ' stat'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' opts'
          QuestionToken
          TypeReference
            Identifier: ' StatOptions'
        TypeReference
          Identifier: ' Promise'
          UnionType
            TypeReference
              Identifier: 'Stats'
            TypeReference
              Identifier: ' BigIntStats'
      FunctionDeclaration
        Identifier: ' statfs'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        opts'
          QuestionToken
          IntersectionType
            TypeReference
              Identifier: ' StatFsOptions'
            TypeLiteral
              PropertySignature
                Identifier: '
            bigint'
                QuestionToken
                UnionType
                  LiteralType
                    FalseKeyword
                  UndefinedKeyword
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'StatsFs'
      FunctionDeclaration
        Identifier: ' statfs'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        opts'
          IntersectionType
            TypeReference
              Identifier: ' StatFsOptions'
            TypeLiteral
              PropertySignature
                Identifier: '
            bigint'
                LiteralType
                  TrueKeyword
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'BigIntStatsFs'
      FunctionDeclaration
        Identifier: ' statfs'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' opts'
          QuestionToken
          TypeReference
            Identifier: ' StatFsOptions'
        TypeReference
          Identifier: ' Promise'
          UnionType
            TypeReference
              Identifier: 'StatsFs'
            TypeReference
              Identifier: ' BigIntStatsFs'
      FunctionDeclaration
        Identifier: ' link'
        Parameter
          Identifier: 'existingPath'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' newPath'
          TypeReference
            Identifier: ' PathLike'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' unlink'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' chmod'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' mode'
          TypeReference
            Identifier: ' Mode'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' lchmod'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' mode'
          TypeReference
            Identifier: ' Mode'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' lchown'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' uid'
          NumberKeyword
        Parameter
          Identifier: ' gid'
          NumberKeyword
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' lutimes'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' atime'
          TypeReference
            Identifier: ' TimeLike'
        Parameter
          Identifier: ' mtime'
          TypeReference
            Identifier: ' TimeLike'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' chown'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' uid'
          NumberKeyword
        Parameter
          Identifier: ' gid'
          NumberKeyword
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' utimes'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' atime'
          TypeReference
            Identifier: ' TimeLike'
        Parameter
          Identifier: ' mtime'
          TypeReference
            Identifier: ' TimeLike'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' realpath'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' ObjectEncodingOptions'
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          StringKeyword
      FunctionDeclaration
        Identifier: ' realpath'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' options'
          TypeReference
            Identifier: ' BufferEncodingOption'
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'Buffer'
      FunctionDeclaration
        Identifier: ' realpath'
        Parameter
          Identifier: '
        path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' ObjectEncodingOptions'
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' Buffer'
      FunctionDeclaration
        Identifier: ' mkdtemp'
        Parameter
          Identifier: 'prefix'
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' ObjectEncodingOptions'
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          StringKeyword
      FunctionDeclaration
        Identifier: ' mkdtemp'
        Parameter
          Identifier: 'prefix'
          StringKeyword
        Parameter
          Identifier: ' options'
          TypeReference
            Identifier: ' BufferEncodingOption'
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'Buffer'
      FunctionDeclaration
        Identifier: ' mkdtemp'
        Parameter
          Identifier: 'prefix'
          StringKeyword
        Parameter
          Identifier: ' options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' ObjectEncodingOptions'
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' Buffer'
      FunctionDeclaration
        Identifier: ' writeFile'
        Parameter
          Identifier: '
        file'
          UnionType
            TypeReference
              Identifier: ' PathLike'
            TypeReference
              Identifier: ' FileHandle'
        Parameter
          Identifier: '
        data'
          UnionType
            StringKeyword
            TypeReference
              QualifiedName
                Identifier: ' NodeJS'
                Identifier: 'ArrayBufferView'
            TypeReference
              Identifier: ' Iterable'
              UnionType
                StringKeyword
                TypeReference
                  QualifiedName
                    Identifier: ' NodeJS'
                    Identifier: 'ArrayBufferView'
            TypeReference
              Identifier: ' AsyncIterable'
              UnionType
                StringKeyword
                TypeReference
                  QualifiedName
                    Identifier: ' NodeJS'
                    Identifier: 'ArrayBufferView'
            TypeReference
              Identifier: ' Stream'
        Parameter
          Identifier: '
        options'
          QuestionToken
          UnionType
            ParenthesizedType
              IntersectionType
                TypeReference
                  Identifier: 'ObjectEncodingOptions'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                mode'
                    QuestionToken
                    UnionType
                      TypeReference
                        Identifier: ' Mode'
                      UndefinedKeyword
                  PropertySignature
                    Identifier: '
                flag'
                    QuestionToken
                    UnionType
                      TypeReference
                        Identifier: ' OpenMode'
                      UndefinedKeyword
                  PropertySignature
                    Identifier: '
                /**
                 * If all data is successfully written to the file, and `flush`
                 * is `true`, `filehandle.sync()` is used to flush the data.
                 * @default false
                 */
                flush'
                    QuestionToken
                    UnionType
                      BooleanKeyword
                      UndefinedKeyword
                TypeReference
                  Identifier: ' Abortable'
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' appendFile'
        Parameter
          Identifier: '
        path'
          UnionType
            TypeReference
              Identifier: ' PathLike'
            TypeReference
              Identifier: ' FileHandle'
        Parameter
          Identifier: '
        data'
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' Uint8Array'
        Parameter
          Identifier: '
        options'
          QuestionToken
          UnionType
            ParenthesizedType
              IntersectionType
                TypeReference
                  Identifier: 'ObjectEncodingOptions'
                TypeReference
                  Identifier: ' FlagAndOpenMode'
                TypeLiteral
                  PropertySignature
                    Identifier: ' flush'
                    QuestionToken
                    UnionType
                      BooleanKeyword
                      UndefinedKeyword
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' readFile'
        Parameter
          Identifier: '
        path'
          UnionType
            TypeReference
              Identifier: ' PathLike'
            TypeReference
              Identifier: ' FileHandle'
        Parameter
          Identifier: '
        options'
          QuestionToken
          UnionType
            ParenthesizedType
              IntersectionType
                TypeLiteral
                  PropertySignature
                    Identifier: '
                encoding'
                    QuestionToken
                    UnionType
                      LiteralType
                        NullKeyword
                      UndefinedKeyword
                  PropertySignature
                    Identifier: '
                flag'
                    QuestionToken
                    UnionType
                      TypeReference
                        Identifier: ' OpenMode'
                      UndefinedKeyword
                TypeReference
                  Identifier: ' Abortable'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'Buffer'
      FunctionDeclaration
        Identifier: ' readFile'
        Parameter
          Identifier: '
        path'
          UnionType
            TypeReference
              Identifier: ' PathLike'
            TypeReference
              Identifier: ' FileHandle'
        Parameter
          Identifier: '
        options'
          UnionType
            ParenthesizedType
              IntersectionType
                TypeLiteral
                  PropertySignature
                    Identifier: '
                encoding'
                    TypeReference
                      Identifier: ' BufferEncoding'
                  PropertySignature
                    Identifier: '
                flag'
                    QuestionToken
                    UnionType
                      TypeReference
                        Identifier: ' OpenMode'
                      UndefinedKeyword
                TypeReference
                  Identifier: ' Abortable'
            TypeReference
              Identifier: ' BufferEncoding'
        TypeReference
          Identifier: ' Promise'
          StringKeyword
      FunctionDeclaration
        Identifier: ' readFile'
        Parameter
          Identifier: '
        path'
          UnionType
            TypeReference
              Identifier: ' PathLike'
            TypeReference
              Identifier: ' FileHandle'
        Parameter
          Identifier: '
        options'
          QuestionToken
          UnionType
            ParenthesizedType
              IntersectionType
                TypeReference
                  Identifier: ' ObjectEncodingOptions'
                TypeReference
                  Identifier: ' Abortable'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                    flag'
                    QuestionToken
                    UnionType
                      TypeReference
                        Identifier: ' OpenMode'
                      UndefinedKeyword
            TypeReference
              Identifier: ' BufferEncoding'
            LiteralType
              NullKeyword
        TypeReference
          Identifier: ' Promise'
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' Buffer'
      FunctionDeclaration
        Identifier: ' opendir'
        Parameter
          Identifier: 'path'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' options'
          QuestionToken
          TypeReference
            Identifier: ' OpenDirOptions'
        TypeReference
          Identifier: ' Promise'
          TypeReference
            Identifier: 'Dir'
      FunctionDeclaration
        Identifier: ' watch'
        Parameter
          Identifier: '
        filename'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        options'
          UnionType
            ParenthesizedType
              IntersectionType
                TypeReference
                  Identifier: 'WatchOptions'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                encoding'
                    LiteralType
                      StringLiteral
            LiteralType
              StringLiteral
        TypeReference
          Identifier: ' AsyncIterable'
          TypeReference
            Identifier: 'FileChangeInfo'
            TypeReference
              Identifier: 'Buffer'
      FunctionDeclaration
        Identifier: ' watch'
        Parameter
          Identifier: 'filename'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: ' options'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' WatchOptions'
            TypeReference
              Identifier: ' BufferEncoding'
        TypeReference
          Identifier: ' AsyncIterable'
          TypeReference
            Identifier: 'FileChangeInfo'
            StringKeyword
      FunctionDeclaration
        Identifier: ' watch'
        Parameter
          Identifier: '
        filename'
          TypeReference
            Identifier: ' PathLike'
        Parameter
          Identifier: '
        options'
          UnionType
            TypeReference
              Identifier: ' WatchOptions'
            StringKeyword
        UnionType
          TypeReference
            Identifier: ' AsyncIterable'
            TypeReference
              Identifier: 'FileChangeInfo'
              StringKeyword
          TypeReference
            Identifier: ' AsyncIterable'
            TypeReference
              Identifier: 'FileChangeInfo'
              TypeReference
                Identifier: 'Buffer'
      FunctionDeclaration
        Identifier: ' cp'
        Parameter
          Identifier: 'source'
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' URL'
        Parameter
          Identifier: ' destination'
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' URL'
        Parameter
          Identifier: ' opts'
          QuestionToken
          TypeReference
            Identifier: ' CopyOptions'
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
      FunctionDeclaration
        Identifier: ' glob'
        Parameter
          Identifier: 'pattern'
          UnionType
            StringKeyword
            ArrayType
              StringKeyword
        TypeReference
          Identifier: ' AsyncIterableIterator'
          StringKeyword
      FunctionDeclaration
        Identifier: ' glob'
        Parameter
          Identifier: '
        pattern'
          UnionType
            StringKeyword
            ArrayType
              StringKeyword
        Parameter
          Identifier: '
        opt'
          TypeReference
            Identifier: ' GlobOptionsWithFileTypes'
        TypeReference
          Identifier: ' AsyncIterableIterator'
          TypeReference
            Identifier: 'Dirent'
      FunctionDeclaration
        Identifier: ' glob'
        Parameter
          Identifier: '
        pattern'
          UnionType
            StringKeyword
            ArrayType
              StringKeyword
        Parameter
          Identifier: '
        opt'
          TypeReference
            Identifier: ' GlobOptionsWithoutFileTypes'
        TypeReference
          Identifier: ' AsyncIterableIterator'
          StringKeyword
      FunctionDeclaration
        Identifier: ' glob'
        Parameter
          Identifier: '
        pattern'
          UnionType
            StringKeyword
            ArrayType
              StringKeyword
        Parameter
          Identifier: '
        opt'
          TypeReference
            Identifier: ' GlobOptions'
        UnionType
          TypeReference
            Identifier: ' AsyncIterableIterator'
            TypeReference
              Identifier: 'Dirent'
          TypeReference
            Identifier: ' AsyncIterableIterator'
            StringKeyword
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ExportDeclaration
        StringLiteral
