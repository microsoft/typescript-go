SourceFile
  ExpressionStatement
    CallExpression
      PropertyAccessExpression
        Identifier: '/// <reference path="fourslash.ts" />

// If a file has both `require` and `import` declarations,
// prefer whichever can be used for an "add to existing" action.

// @allowJs: true
// @checkJs: true

// @Filename: blah.js
////export default class Blah {}
////export const Named1 = 0;
////export const Named2 = 1;

// @Filename: index.js
////var path = require('path')
////  , { promisify } = require('util')
////  , { Named1 } = require('./blah')
////
////import fs from 'fs'
////
////new Blah

goTo'
        Identifier: 'file'
      StringLiteral
  ExpressionStatement
    CallExpression
      PropertyAccessExpression
        Identifier: '
verify'
        Identifier: 'codeFix'
      ObjectLiteralExpression
        PropertyAssignment
          Identifier: '
  index'
          NumericLiteral
        PropertyAssignment
          Identifier: '
  errorCode'
          PropertyAccessExpression
            PropertyAccessExpression
              PropertyAccessExpression
                Identifier: ' ts'
                Identifier: 'Diagnostics'
              Identifier: 'Cannot_find_name_0'
            Identifier: 'code'
        PropertyAssignment
          Identifier: '
  description'
          NoSubstitutionTemplateLiteral
        PropertyAssignment
          Identifier: '
  newFileContent'
          NoSubstitutionTemplateLiteral
