SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' RawSourceMap'
    StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' UrlAndMap'
    PropertySignature
      Identifier: '
    url'
      QuestionToken
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    map'
      UnionType
        StringKeyword
        TypeReference
          Identifier: ' RawSourceMap'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Environment'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Options'
    PropertySignature
      Identifier: '
    /**
     * This module installs two things: a change to the `stack` property on `Error`
     * objects and a handler for uncaught exceptions that mimics node's default exception
     * handler (the handler can be seen in the demos below). You may want to disable the
     * handler if you have your own uncaught exception handler. This can be done by passing
     * an argument to the installer.
     *
     * @example
     * import { install } from 'source-map-support';
     *
     * install({
     *   handleUncaughtExceptions: false
     * });
     */
    handleUncaughtExceptions'
      QuestionToken
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * To support files with inline source maps, the `hookRequire` options can be specified,
     * which will monitor all source files for inline source maps.
     *
     * This monkey patches the `require` module loading chain, so is not enabled by default
     * and is not recommended for any sort of production usage.
     *
     * @example
     * import { install } from 'source-map-support';
     *
     * install({
     *   hookRequire: true
     * });
     * ```
     */
    hookRequire'
      QuestionToken
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * If `true`, the caches are reset before a stack trace formatting operation.
     */
    emptyCacheBetweenOperations'
      QuestionToken
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The module will by default assume a browser environment if `XMLHttpRequest` and `window`
     * are defined. If either of these do not exist it will instead assume a node environment.
     * In some rare cases, e.g. when running a browser emulation and where both variables are
     * also set, you can explicitly specify the environment to be either `'browser'` or `'node'`.
     *
     * @example
     * import { install } from 'source-map-support';
     *
     * install({
     *   environment: 'node'
     * });
     */
    environment'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Environment'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Disable all other means of retrieving file contents and use only the provided
     * `retrieveFile` handler.
     */
    overrideRetrieveFile'
      QuestionToken
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Disable all other means of retrieving source maps and use only the provided
     * `retrieveSourceMap` handler.
     */
    overrideRetrieveSourceMap'
      QuestionToken
      UnionType
        BooleanKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * Allow sources to be found by methods other than reading the files
     * directly from disk.
     */
    retrieveFile'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      UnionType
        StringKeyword
        LiteralType
          NullKeyword
    MethodSignature
      Identifier: '
    /**
     * This module loads source maps from the filesystem by default. You can provide alternate
     * loading behavior through a callback as shown below. For example, [Meteor](https://github.com/meteor)
     * keeps all source maps cached in memory to avoid disk access.
     *
     * @example
     * import { install } from 'source-map-support';
     *
     * install({
     *   retrieveSourceMap(source) {
     *     if (source === 'compiled.js') {
     *       return {
     *         url: 'original.js',
     *         map: fs.readFileSync('compiled.js.map', 'utf8')
     *       };
     *     }
     *     return null;
     *   }
     * });
     */
    retrieveSourceMap'
      QuestionToken
      Parameter
        Identifier: 'source'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' UrlAndMap'
        LiteralType
          NullKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Position'
    PropertySignature
      Identifier: '
    source'
      StringKeyword
    PropertySignature
      Identifier: '
    line'
      NumberKeyword
    PropertySignature
      Identifier: '
    column'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' State'
    PropertySignature
      Identifier: '
    nextPosition'
      UnionType
        TypeReference
          Identifier: ' Position'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    curPosition'
      UnionType
        TypeReference
          Identifier: ' Position'
        LiteralType
          NullKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CallSite'
    MethodSignature
      Identifier: '
    /**
     * Value of "this"
     */
    getThis'
      AnyKeyword
    MethodSignature
      Identifier: '

    /**
     * Type of "this" as a string.
     * This is the name of the function stored in the constructor field of
     * "this", if available.  Otherwise the object's [[Class]] internal
     * property.
     */
    getTypeName'
      UnionType
        StringKeyword
        LiteralType
          NullKeyword
    MethodSignature
      Identifier: '

    /**
     * Current function
     */
    getFunction'
      UnionType
        ParenthesizedType
          FunctionType
            Parameter
              DotDotDotToken
              Identifier: 'args'
              ArrayType
                UnknownKeyword
            AnyKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Name of the current function, typically its name property.
     * If a name property is not available an attempt will be made to try
     * to infer a name from the function's context.
     */
    getFunctionName'
      UnionType
        StringKeyword
        LiteralType
          NullKeyword
    MethodSignature
      Identifier: '

    /**
     * Name of the property [of "this" or one of its prototypes] that holds
     * the current function
     */
    getMethodName'
      UnionType
        StringKeyword
        LiteralType
          NullKeyword
    MethodSignature
      Identifier: '

    /**
     * Name of the script [if this function was defined in a script]
     */
    getFileName'
      UnionType
        StringKeyword
        LiteralType
          NullKeyword
    MethodSignature
      Identifier: '

    /**
     * Current line number [if this function was defined in a script]
     */
    getLineNumber'
      UnionType
        NumberKeyword
        LiteralType
          NullKeyword
    MethodSignature
      Identifier: '

    /**
     * Current column number [if this function was defined in a script]
     */
    getColumnNumber'
      UnionType
        NumberKeyword
        LiteralType
          NullKeyword
    MethodSignature
      Identifier: '

    /**
     * A call site object representing the location where eval was called
     * [if this function was created using a call to eval]
     */
    getEvalOrigin'
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Is this a toplevel invocation, that is, is "this" the global object?
     */
    isToplevel'
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Does this call take place in code defined by a call to eval?
     */
    isEval'
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Is this call in native V8 code?
     */
    isNative'
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Is this a constructor call?
     */
    isConstructor'
      BooleanKeyword
    MethodSignature
      Identifier: '

    getScriptNameOrSourceURL'
      QuestionToken
      StringKeyword
  FunctionDeclaration
    ExportKeyword
    Identifier: ' wrapCallSite'
    Parameter
      Identifier: 'frame'
      TypeReference
        Identifier: ' CallSite'
    Parameter
      Identifier: ' state'
      QuestionToken
      TypeReference
        Identifier: ' State'
    TypeReference
      Identifier: ' CallSite'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' getErrorSource'
    Parameter
      Identifier: 'error'
      TypeReference
        Identifier: ' Error'
    UnionType
      StringKeyword
      LiteralType
        NullKeyword
  FunctionDeclaration
    ExportKeyword
    Identifier: ' mapSourcePosition'
    Parameter
      Identifier: 'position'
      TypeReference
        Identifier: ' Position'
    TypeReference
      Identifier: ' Position'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' retrieveSourceMap'
    Parameter
      Identifier: 'source'
      StringKeyword
    UnionType
      TypeReference
        Identifier: ' UrlAndMap'
      LiteralType
        NullKeyword
  FunctionDeclaration
    ExportKeyword
    Identifier: ' resetRetrieveHandlers'
    VoidKeyword
  FunctionDeclaration
    ExportKeyword
    Identifier: ' install'
    Parameter
      Identifier: 'options'
      QuestionToken
      TypeReference
        Identifier: ' Options'
    VoidKeyword
