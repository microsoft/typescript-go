SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamespaceImport
            Identifier: ' net'
        StringLiteral
      FunctionDeclaration
        Identifier: ' isatty'
        Parameter
          Identifier: 'fd'
          NumberKeyword
        BooleanKeyword
      ClassDeclaration
        Identifier: ' ReadStream'
        HeritageClause
          ExpressionWithTypeArguments
            PropertyAccessExpression
              Identifier: ' net'
              Identifier: 'Socket'
        Constructor
          Parameter
            Identifier: 'fd'
            NumberKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              QualifiedName
                Identifier: ' net'
                Identifier: 'SocketConstructorOpts'
        PropertyDeclaration
          Identifier: '
        /**
         * A `boolean` that is `true` if the TTY is currently configured to operate as a
         * raw device.
         *
         * This flag is always `false` when a process starts, even if the terminal is
         * operating in raw mode. Its value will change with subsequent calls to `setRawMode`.
         * @since v0.7.7
         */
        isRaw'
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Allows configuration of `tty.ReadStream` so that it operates as a raw device.
         *
         * When in raw mode, input is always available character-by-character, not
         * including modifiers. Additionally, all special processing of characters by the
         * terminal is disabled, including echoing input
         * characters. Ctrl+C will no longer cause a `SIGINT` when
         * in this mode.
         * @since v0.7.7
         * @param mode If `true`, configures the `tty.ReadStream` to operate as a raw device. If `false`, configures the `tty.ReadStream` to operate in its default mode. The `readStream.isRaw`
         * property will be set to the resulting mode.
         * @return The read stream instance.
         */
        setRawMode'
          Parameter
            Identifier: 'mode'
            BooleanKeyword
          ThisType
        PropertyDeclaration
          Identifier: '
        /**
         * A `boolean` that is always `true` for `tty.ReadStream` instances.
         * @since v0.5.8
         */
        isTTY'
          BooleanKeyword
      TypeAliasDeclaration
        Identifier: ' Direction'
        UnionType
          LiteralType
            PrefixUnaryExpression
              NumericLiteral
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
      ClassDeclaration
        Identifier: ' WriteStream'
        HeritageClause
          ExpressionWithTypeArguments
            PropertyAccessExpression
              Identifier: ' net'
              Identifier: 'Socket'
        Constructor
          Parameter
            Identifier: 'fd'
            NumberKeyword
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            StringKeyword
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        addListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            UnionType
              StringKeyword
              SymbolKeyword
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        emit'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            StringKeyword
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        on'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            StringKeyword
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        once'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            StringKeyword
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            StringKeyword
          Parameter
            Identifier: ' listener'
            FunctionType
              Parameter
                DotDotDotToken
                Identifier: 'args'
                ArrayType
                  AnyKeyword
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        prependOnceListener'
          Parameter
            Identifier: 'event'
            LiteralType
              StringLiteral
          Parameter
            Identifier: ' listener'
            FunctionType
              VoidKeyword
          ThisType
        MethodDeclaration
          Identifier: '
        /**
         * `writeStream.clearLine()` clears the current line of this `WriteStream` in a
         * direction identified by `dir`.
         * @since v0.7.7
         * @param callback Invoked once the operation completes.
         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.
         */
        clearLine'
          Parameter
            Identifier: 'dir'
            TypeReference
              Identifier: ' Direction'
          Parameter
            Identifier: ' callback'
            QuestionToken
            FunctionType
              VoidKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        /**
         * `writeStream.clearScreenDown()` clears this `WriteStream` from the current
         * cursor down.
         * @since v0.7.7
         * @param callback Invoked once the operation completes.
         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.
         */
        clearScreenDown'
          Parameter
            Identifier: 'callback'
            QuestionToken
            FunctionType
              VoidKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        /**
         * `writeStream.cursorTo()` moves this `WriteStream`'s cursor to the specified
         * position.
         * @since v0.7.7
         * @param callback Invoked once the operation completes.
         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.
         */
        cursorTo'
          Parameter
            Identifier: 'x'
            NumberKeyword
          Parameter
            Identifier: ' y'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: ' callback'
            QuestionToken
            FunctionType
              VoidKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        cursorTo'
          Parameter
            Identifier: 'x'
            NumberKeyword
          Parameter
            Identifier: ' callback'
            FunctionType
              VoidKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        /**
         * `writeStream.moveCursor()` moves this `WriteStream`'s cursor _relative_ to its
         * current position.
         * @since v0.7.7
         * @param callback Invoked once the operation completes.
         * @return `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.
         */
        moveCursor'
          Parameter
            Identifier: 'dx'
            NumberKeyword
          Parameter
            Identifier: ' dy'
            NumberKeyword
          Parameter
            Identifier: ' callback'
            QuestionToken
            FunctionType
              VoidKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Returns:
         *
         * * `1` for 2,
         * * `4` for 16,
         * * `8` for 256,
         * * `24` for 16,777,216 colors supported.
         *
         * Use this to determine what colors the terminal supports. Due to the nature of
         * colors in terminals it is possible to either have false positives or false
         * negatives. It depends on process information and the environment variables that
         * may lie about what terminal is used.
         * It is possible to pass in an `env` object to simulate the usage of a specific
         * terminal. This can be useful to check how specific environment settings behave.
         *
         * To enforce a specific color support, use one of the below environment settings.
         *
         * * 2 colors: `FORCE_COLOR = 0` (Disables colors)
         * * 16 colors: `FORCE_COLOR = 1`
         * * 256 colors: `FORCE_COLOR = 2`
         * * 16,777,216 colors: `FORCE_COLOR = 3`
         *
         * Disabling color support is also possible by using the `NO_COLOR` and `NODE_DISABLE_COLORS` environment variables.
         * @since v9.9.0
         * @param [env=process.env] An object containing the environment variables to check. This enables simulating the usage of a specific terminal.
         */
        getColorDepth'
          Parameter
            Identifier: 'env'
            QuestionToken
            ObjectKeyword
          NumberKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Returns `true` if the `writeStream` supports at least as many colors as provided
         * in `count`. Minimum support is 2 (black and white).
         *
         * This has the same false positives and negatives as described in `writeStream.getColorDepth()`.
         *
         * ```js
         * process.stdout.hasColors();
         * // Returns true or false depending on if `stdout` supports at least 16 colors.
         * process.stdout.hasColors(256);
         * // Returns true or false depending on if `stdout` supports at least 256 colors.
         * process.stdout.hasColors({ TMUX: '1' });
         * // Returns true.
         * process.stdout.hasColors(2 ** 24, { TMUX: '1' });
         * // Returns false (the environment setting pretends to support 2 ** 8 colors).
         * ```
         * @since v11.13.0, v10.16.0
         * @param [count=16] The number of colors that are requested (minimum 2).
         * @param [env=process.env] An object containing the environment variables to check. This enables simulating the usage of a specific terminal.
         */
        hasColors'
          Parameter
            Identifier: 'count'
            QuestionToken
            NumberKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        hasColors'
          Parameter
            Identifier: 'env'
            QuestionToken
            ObjectKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        hasColors'
          Parameter
            Identifier: 'count'
            NumberKeyword
          Parameter
            Identifier: ' env'
            QuestionToken
            ObjectKeyword
          BooleanKeyword
        MethodDeclaration
          Identifier: '
        /**
         * `writeStream.getWindowSize()` returns the size of the TTY
         * corresponding to this `WriteStream`. The array is of the type `[numColumns, numRows]` where `numColumns` and `numRows` represent the number
         * of columns and rows in the corresponding TTY.
         * @since v0.7.7
         */
        getWindowSize'
          TupleType
            NumberKeyword
            NumberKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * A `number` specifying the number of columns the TTY currently has. This property
         * is updated whenever the `'resize'` event is emitted.
         * @since v0.7.7
         */
        columns'
          NumberKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * A `number` specifying the number of rows the TTY currently has. This property
         * is updated whenever the `'resize'` event is emitted.
         * @since v0.7.7
         */
        rows'
          NumberKeyword
        PropertyDeclaration
          Identifier: '
        /**
         * A `boolean` that is always `true`.
         * @since v0.5.8
         */
        isTTY'
          BooleanKeyword
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ExportDeclaration
        StringLiteral
