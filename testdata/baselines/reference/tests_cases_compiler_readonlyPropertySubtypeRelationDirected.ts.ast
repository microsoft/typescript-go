SourceFile
  ExportDeclaration
    NamedExports
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' two'
        TypeLiteral
          PropertySignature
            Identifier: ' a'
            StringKeyword
        ObjectLiteralExpression
          PropertyAssignment
            Identifier: ' a'
            StringLiteral
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' one'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' a'
            StringKeyword
        ObjectLiteralExpression
          PropertyAssignment
            Identifier: ' a'
            StringLiteral
  FunctionDeclaration
    Identifier: ' doSomething'
    Parameter
      Identifier: 'condition'
      BooleanKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' three'
            ConditionalExpression
              ParenthesizedExpression
                Identifier: 'condition'
              QuestionToken
              Identifier: ' one'
              ColonToken
              Identifier: ' two'
      ExpressionStatement
        BinaryExpression
          PropertyAccessExpression
            Identifier: '

    three'
            Identifier: 'a'
          EqualsToken
          StringLiteral
      ExpressionStatement
        BinaryExpression
          PropertyAccessExpression
            Identifier: '

    // the inferred (displayed?) type of `a` also depends on the order of the condition above. When `one` comes first, the displayed type is `any`
    // when `two` comes first, the displayed type is `string`, but the diagnostic will always correctly find that it's string
    three'
            Identifier: 'a'
          EqualsToken
          StringLiteral
      ReturnStatement
        Identifier: ' three'
  ExportDeclaration
    NamedExports
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' two'
        TypeLiteral
          PropertySignature
            Identifier: ' a'
            StringKeyword
        ObjectLiteralExpression
          PropertyAssignment
            Identifier: ' a'
            StringLiteral
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' one'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' a'
            StringKeyword
        ObjectLiteralExpression
          PropertyAssignment
            Identifier: ' a'
            StringLiteral
  FunctionDeclaration
    Identifier: ' doSomething'
    Parameter
      Identifier: 'condition'
      BooleanKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' three'
            ConditionalExpression
              ParenthesizedExpression
                Identifier: 'condition'
              QuestionToken
              Identifier: ' two'
              ColonToken
              Identifier: ' one'
      ExpressionStatement
        BinaryExpression
          PropertyAccessExpression
            Identifier: '

    three'
            Identifier: 'a'
          EqualsToken
          StringLiteral
      ExpressionStatement
        BinaryExpression
          PropertyAccessExpression
            Identifier: '

    // the inferred (displayed?) type of `a` also depends on the order of the condition above. When `one` comes first, the displayed type is `any`
    // when `two` comes first, the displayed type is `string`, but the diagnostic will always correctly find that it's string
    three'
            Identifier: 'a'
          EqualsToken
          StringLiteral
      ReturnStatement
        Identifier: ' three'
  ExportDeclaration
    NamedExports
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' one'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' a'
            StringKeyword
        ObjectLiteralExpression
          PropertyAssignment
            Identifier: ' a'
            StringLiteral
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' two'
        TypeLiteral
          PropertySignature
            Identifier: ' a'
            StringKeyword
        ObjectLiteralExpression
          PropertyAssignment
            Identifier: ' a'
            StringLiteral
  FunctionDeclaration
    Identifier: ' doSomething'
    Parameter
      Identifier: 'condition'
      BooleanKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' three'
            ConditionalExpression
              ParenthesizedExpression
                Identifier: 'condition'
              QuestionToken
              Identifier: ' one'
              ColonToken
              Identifier: ' two'
      ExpressionStatement
        BinaryExpression
          PropertyAccessExpression
            Identifier: '

    three'
            Identifier: 'a'
          EqualsToken
          StringLiteral
      ExpressionStatement
        BinaryExpression
          PropertyAccessExpression
            Identifier: '

    // the inferred (displayed?) type of `a` also depends on the order of the condition above. When `one` comes first, the displayed type is `any`
    // when `two` comes first, the displayed type is `string`, but the diagnostic will always correctly find that it's string
    three'
            Identifier: 'a'
          EqualsToken
          StringLiteral
      ReturnStatement
        Identifier: ' three'
  ExportDeclaration
    NamedExports
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' one'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' a'
            StringKeyword
        ObjectLiteralExpression
          PropertyAssignment
            Identifier: ' a'
            StringLiteral
  VariableStatement
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' two'
        TypeLiteral
          PropertySignature
            Identifier: ' a'
            StringKeyword
        ObjectLiteralExpression
          PropertyAssignment
            Identifier: ' a'
            StringLiteral
  FunctionDeclaration
    Identifier: ' doSomething'
    Parameter
      Identifier: 'condition'
      BooleanKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' three'
            ConditionalExpression
              ParenthesizedExpression
                Identifier: 'condition'
              QuestionToken
              Identifier: ' two'
              ColonToken
              Identifier: ' one'
      ExpressionStatement
        BinaryExpression
          PropertyAccessExpression
            Identifier: '

    three'
            Identifier: 'a'
          EqualsToken
          StringLiteral
      ExpressionStatement
        BinaryExpression
          PropertyAccessExpression
            Identifier: '

    // the inferred (displayed?) type of `a` also depends on the order of the condition above. When `one` comes first, the displayed type is `any`
    // when `two` comes first, the displayed type is `string`, but the diagnostic will always correctly find that it's string
    three'
            Identifier: 'a'
          EqualsToken
          StringLiteral
      ReturnStatement
        Identifier: ' three'
