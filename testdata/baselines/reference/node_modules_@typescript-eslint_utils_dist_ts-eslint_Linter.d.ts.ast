SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' ClassicConfig'
        ImportSpecifier
          Identifier: ' FlatConfig'
        ImportSpecifier
          Identifier: ' SharedConfig'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Parser'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Processor'
          Identifier: ' ProcessorType'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' AnyRuleCreateFunction'
        ImportSpecifier
          Identifier: ' AnyRuleModule'
        ImportSpecifier
          Identifier: ' RuleCreateFunction'
        ImportSpecifier
          Identifier: ' RuleFix'
        ImportSpecifier
          Identifier: ' RuleModule'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' SourceCode'
    StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' MinimalRuleModule'
    TypeParameter
      Identifier: 'MessageIds'
      StringKeyword
      StringKeyword
    TypeParameter
      Identifier: ' Options'
      TypeOperator
        ArrayType
          UnknownKeyword
      TupleType
    IntersectionType
      TypeReference
        Identifier: ' Partial'
        TypeReference
          Identifier: 'Omit'
          TypeReference
            Identifier: 'RuleModule'
            TypeReference
              Identifier: 'MessageIds'
            TypeReference
              Identifier: ' Options'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' Pick'
        TypeReference
          Identifier: 'RuleModule'
          TypeReference
            Identifier: 'MessageIds'
          TypeReference
            Identifier: ' Options'
        LiteralType
          StringLiteral
  ClassDeclaration
    DeclareKeyword
    Identifier: ' LinterBase'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' version'
      StringKeyword
    Constructor
      Parameter
        Identifier: 'config'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' Linter'
            Identifier: 'LinterOptions'
    MethodDeclaration
      Identifier: '
    /**
     * Define a new parser module
     * @param parserId Name of the parser
     * @param parserModule The parser object
     */
    defineParser'
      Parameter
        Identifier: 'parserId'
        StringKeyword
      Parameter
        Identifier: ' parserModule'
        TypeReference
          QualifiedName
            Identifier: ' Parser'
            Identifier: 'LooseParserModule'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Defines a new linting rule.
     * @param ruleId A unique rule identifier
     * @param ruleModule Function from context to object mapping AST node types to event handlers
     */
    defineRule'
      TypeParameter
        Identifier: 'MessageIds'
        StringKeyword
      TypeParameter
        Identifier: ' Options'
        TypeOperator
          ArrayType
            UnknownKeyword
      Parameter
        Identifier: 'ruleId'
        StringKeyword
      Parameter
        Identifier: ' ruleModule'
        UnionType
          TypeReference
            Identifier: ' MinimalRuleModule'
            TypeReference
              Identifier: 'MessageIds'
            TypeReference
              Identifier: ' Options'
          TypeReference
            Identifier: ' RuleCreateFunction'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Defines many new linting rules.
     * @param rulesToDefine map from unique rule identifier to rule
     */
    defineRules'
      TypeParameter
        Identifier: 'MessageIds'
        StringKeyword
      TypeParameter
        Identifier: ' Options'
        TypeOperator
          ArrayType
            UnknownKeyword
      Parameter
        Identifier: 'rulesToDefine'
        TypeReference
          Identifier: ' Record'
          StringKeyword
          UnionType
            TypeReference
              Identifier: ' MinimalRuleModule'
              TypeReference
                Identifier: 'MessageIds'
              TypeReference
                Identifier: ' Options'
            TypeReference
              Identifier: ' RuleCreateFunction'
              TypeReference
                Identifier: 'MessageIds'
              TypeReference
                Identifier: ' Options'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets an object with all loaded rules.
     * @returns All loaded rules
     */
    getRules'
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' MinimalRuleModule'
          StringKeyword
          ArrayType
            UnknownKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets the `SourceCode` object representing the parsed source.
     * @returns The `SourceCode` object.
     */
    getSourceCode'
      TypeReference
        Identifier: ' SourceCode'
    MethodDeclaration
      Identifier: '
    /**
     * Verifies the text against the rules specified by the second argument.
     * @param textOrSourceCode The text to parse or a SourceCode object.
     * @param config An ESLintConfig instance to configure everything.
     * @param filenameOrOptions The optional filename of the file being checked.
     *        If this is not set, the filename will default to '<input>' in the rule context.
     *        If this is an object, then it has "filename", "allowInlineConfig", and some properties.
     * @returns The results as an array of messages or an empty array if no messages.
     */
    verify'
      Parameter
        Identifier: 'textOrSourceCode'
        UnionType
          TypeReference
            Identifier: ' SourceCode'
          StringKeyword
      Parameter
        Identifier: ' config'
        TypeReference
          QualifiedName
            Identifier: ' Linter'
            Identifier: 'ConfigType'
      Parameter
        Identifier: ' filenameOrOptions'
        QuestionToken
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' Linter'
              Identifier: 'VerifyOptions'
          StringKeyword
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' Linter'
            Identifier: 'LintMessage'
    PropertyDeclaration
      StaticKeyword
      ReadonlyKeyword
      Identifier: ' version'
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Performs multiple autofix passes over the text until as many fixes as possible have been applied.
     * @param code The source text to apply fixes to.
     * @param config The ESLint config object to use.
     * @param options The ESLint options object to use.
     * @returns The result of the fix operation as returned from the SourceCodeFixer.
     */
    verifyAndFix'
      Parameter
        Identifier: 'code'
        StringKeyword
      Parameter
        Identifier: ' config'
        TypeReference
          QualifiedName
            Identifier: ' Linter'
            Identifier: 'ConfigType'
      Parameter
        Identifier: ' options'
        TypeReference
          QualifiedName
            Identifier: ' Linter'
            Identifier: 'FixOptions'
      TypeReference
        QualifiedName
          Identifier: ' Linter'
          Identifier: 'FixReport'
  ModuleDeclaration
    DeclareKeyword
    Identifier: ' Linter'
    ModuleBlock
      InterfaceDeclaration
        Identifier: ' LinterOptions'
        PropertySignature
          Identifier: '
        /**
         * Which config format to use.
         * @default 'flat'
         */
        configType'
          QuestionToken
          TypeReference
            Identifier: ' ConfigTypeSpecifier'
        PropertySignature
          Identifier: '
        /**
         * path to a directory that should be considered as the current working directory.
         */
        cwd'
          QuestionToken
          StringKeyword
      TypeAliasDeclaration
        Identifier: ' ConfigTypeSpecifier'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      TypeAliasDeclaration
        Identifier: ' EnvironmentConfig'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'EnvironmentConfig'
      TypeAliasDeclaration
        Identifier: ' GlobalsConfig'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'GlobalsConfig'
      TypeAliasDeclaration
        Identifier: ' GlobalVariableOption'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'GlobalVariableOption'
      TypeAliasDeclaration
        Identifier: ' GlobalVariableOptionBase'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'GlobalVariableOptionBase'
      TypeAliasDeclaration
        Identifier: ' ParserOptions'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'ParserOptions'
      TypeAliasDeclaration
        Identifier: ' PluginMeta'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'PluginMeta'
      TypeAliasDeclaration
        Identifier: ' RuleEntry'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'RuleEntry'
      TypeAliasDeclaration
        Identifier: ' RuleLevel'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'RuleLevel'
      TypeAliasDeclaration
        Identifier: ' RuleLevelAndOptions'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'RuleLevelAndOptions'
      TypeAliasDeclaration
        Identifier: ' RulesRecord'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'RulesRecord'
      TypeAliasDeclaration
        Identifier: ' Severity'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'Severity'
      TypeAliasDeclaration
        Identifier: ' SeverityString'
        TypeReference
          QualifiedName
            Identifier: ' SharedConfig'
            Identifier: 'SeverityString'
      TypeAliasDeclaration
        Identifier: ' Config'
        TypeReference
          QualifiedName
            Identifier: ' ClassicConfig'
            Identifier: 'Config'
      TypeAliasDeclaration
        Identifier: ' ConfigType'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' ClassicConfig'
              Identifier: 'Config'
          TypeReference
            QualifiedName
              Identifier: ' FlatConfig'
              Identifier: 'Config'
          TypeReference
            QualifiedName
              Identifier: ' FlatConfig'
              Identifier: 'ConfigArray'
      TypeAliasDeclaration
        Identifier: ' ConfigOverride'
        TypeReference
          QualifiedName
            Identifier: ' ClassicConfig'
            Identifier: 'ConfigOverride'
      InterfaceDeclaration
        Identifier: ' VerifyOptions'
        PropertySignature
          Identifier: '
        /**
         * Allow/disallow inline comments' ability to change config once it is set. Defaults to true if not supplied.
         * Useful if you want to validate JS without comments overriding rules.
         */
        allowInlineConfig'
          QuestionToken
          BooleanKeyword
        PropertySignature
          Identifier: '
        /**
         * if `true` then the linter doesn't make `fix` properties into the lint result.
         */
        disableFixes'
          QuestionToken
          BooleanKeyword
        PropertySignature
          Identifier: '
        /**
         * the filename of the source code.
         */
        filename'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
        /**
         * the predicate function that selects adopt code blocks.
         */
        filterCodeBlock'
          QuestionToken
          FunctionType
            Parameter
              Identifier: 'filename'
              StringKeyword
            Parameter
              Identifier: ' text'
              StringKeyword
            BooleanKeyword
        PropertySignature
          Identifier: '
        /**
         * postprocessor for report messages.
         * If provided, this should accept an array of the message lists
         * for each code block returned from the preprocessor, apply a mapping to
         * the messages as appropriate, and return a one-dimensional array of
         * messages.
         */
        postprocess'
          QuestionToken
          TypeReference
            QualifiedName
              Identifier: ' ProcessorType'
              Identifier: 'PostProcess'
        PropertySignature
          Identifier: '
        /**
         * preprocessor for source text.
         * If provided, this should accept a string of source text, and return an array of code blocks to lint.
         */
        preprocess'
          QuestionToken
          TypeReference
            QualifiedName
              Identifier: ' ProcessorType'
              Identifier: 'PreProcess'
        PropertySignature
          Identifier: '
        /**
         * Adds reported errors for unused `eslint-disable` directives.
         */
        reportUnusedDisableDirectives'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' SeverityString'
            BooleanKeyword
      InterfaceDeclaration
        Identifier: ' FixOptions'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' VerifyOptions'
        PropertySignature
          Identifier: '
        /**
         * Determines whether fixes should be applied.
         */
        fix'
          QuestionToken
          BooleanKeyword
      InterfaceDeclaration
        Identifier: ' LintSuggestion'
        PropertySignature
          Identifier: '
        desc'
          StringKeyword
        PropertySignature
          Identifier: '
        fix'
          TypeReference
            Identifier: ' RuleFix'
        PropertySignature
          Identifier: '
        messageId'
          QuestionToken
          StringKeyword
      InterfaceDeclaration
        Identifier: ' LintMessage'
        PropertySignature
          Identifier: '
        /**
         * The 1-based column number.
         */
        column'
          NumberKeyword
        PropertySignature
          Identifier: '
        /**
         * The 1-based column number of the end location.
         */
        endColumn'
          QuestionToken
          NumberKeyword
        PropertySignature
          Identifier: '
        /**
         * The 1-based line number of the end location.
         */
        endLine'
          QuestionToken
          NumberKeyword
        PropertySignature
          Identifier: '
        /**
         * If `true` then this is a fatal error.
         */
        fatal'
          QuestionToken
          LiteralType
            TrueKeyword
        PropertySignature
          Identifier: '
        /**
         * Information for autofix.
         */
        fix'
          QuestionToken
          TypeReference
            Identifier: ' RuleFix'
        PropertySignature
          Identifier: '
        /**
         * The 1-based line number.
         */
        line'
          NumberKeyword
        PropertySignature
          Identifier: '
        /**
         * The error message.
         */
        message'
          StringKeyword
        PropertySignature
          Identifier: '
        messageId'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '
        nodeType'
          StringKeyword
        PropertySignature
          Identifier: '
        /**
         * The ID of the rule which makes this message.
         */
        ruleId'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        /**
         * The severity of this message.
         */
        severity'
          TypeReference
            Identifier: ' Severity'
        PropertySignature
          Identifier: '
        source'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        /**
         * Information for suggestions
         */
        suggestions'
          QuestionToken
          ArrayType
            TypeReference
              Identifier: ' LintSuggestion'
      InterfaceDeclaration
        Identifier: ' FixReport'
        PropertySignature
          Identifier: '
        /**
         * True, if the code was fixed
         */
        fixed'
          BooleanKeyword
        PropertySignature
          Identifier: '
        /**
         * Collection of all messages for the given code
         */
        messages'
          ArrayType
            TypeReference
              Identifier: ' LintMessage'
        PropertySignature
          Identifier: '
        /**
         * Fixed code text (might be the same as input if no fixes were applied).
         */
        output'
          StringKeyword
      TypeAliasDeclaration
        Identifier: ' ParserModule'
        TypeReference
          QualifiedName
            Identifier: ' Parser'
            Identifier: 'LooseParserModule'
      TypeAliasDeclaration
        Identifier: ' ESLintParseResult'
        TypeReference
          QualifiedName
            Identifier: ' Parser'
            Identifier: 'ParseResult'
      TypeAliasDeclaration
        Identifier: ' Processor'
        TypeReference
          QualifiedName
            Identifier: ' ProcessorType'
            Identifier: 'ProcessorModule'
      InterfaceDeclaration
        Identifier: ' Environment'
        PropertySignature
          Identifier: '
        /**
         * The definition of global variables.
         */
        globals'
          QuestionToken
          TypeReference
            Identifier: ' GlobalsConfig'
        PropertySignature
          Identifier: '
        /**
         * The parser options that will be enabled under this environment.
         */
        parserOptions'
          QuestionToken
          TypeReference
            Identifier: ' ParserOptions'
      TypeAliasDeclaration
        Identifier: ' LegacyPluginRules'
        TypeReference
          Identifier: ' Record'
          StringKeyword
          UnionType
            TypeReference
              Identifier: ' AnyRuleCreateFunction'
            TypeReference
              Identifier: ' AnyRuleModule'
      TypeAliasDeclaration
        Identifier: ' PluginRules'
        TypeReference
          Identifier: ' Record'
          StringKeyword
          TypeReference
            Identifier: ' AnyRuleModule'
      InterfaceDeclaration
        Identifier: ' Plugin'
        PropertySignature
          Identifier: '
        /**
         * The definition of plugin configs.
         */
        configs'
          QuestionToken
          TypeReference
            Identifier: ' Record'
            StringKeyword
            TypeReference
              QualifiedName
                Identifier: ' ClassicConfig'
                Identifier: 'Config'
        PropertySignature
          Identifier: '
        /**
         * The definition of plugin environments.
         */
        environments'
          QuestionToken
          TypeReference
            Identifier: ' Record'
            StringKeyword
            TypeReference
              Identifier: ' Environment'
        PropertySignature
          Identifier: '
        /**
         * Metadata about your plugin for easier debugging and more effective caching of plugins.
         */
        meta'
          QuestionToken
          TypeReference
            Identifier: ' PluginMeta'
        PropertySignature
          Identifier: '
        /**
         * The definition of plugin processors.
         */
        processors'
          QuestionToken
          TypeReference
            Identifier: ' Record'
            StringKeyword
            TypeReference
              QualifiedName
                Identifier: ' ProcessorType'
                Identifier: 'ProcessorModule'
        PropertySignature
          Identifier: '
        /**
         * The definition of plugin rules.
         */
        rules'
          QuestionToken
          TypeReference
            Identifier: ' LegacyPluginRules'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Linter_base'
        TypeQuery
          Identifier: ' LinterBase'
  ClassDeclaration
    DeclareKeyword
    Identifier: ' Linter'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Linter_base'
  ExportDeclaration
    NamedExports
      ExportSpecifier
        Identifier: ' Linter'
