--- old.renameDestructuringDeclarationInForOf.baseline.jsonc
+++ new.renameDestructuringDeclarationInForOf.baseline.jsonc
@@= skipped -5, +5 lines =@@
 // }
 // var elems: I[];
 // 
-// for (let { [|property1RENAME|]: property1/*END SUFFIX*/ } of elems) {
+// for (let { [|property1RENAME|] } of elems) {
 //     property1++;
 // }
 // for (let { [|property1RENAME|]: p2 } of elems) {
@@= skipped -10, +10 lines =@@

 // === findRenameLocations ===
 // === /renameDestructuringDeclarationInForOf.ts ===
-// interface I {
-//     [|property1RENAME|]: number;
-//     property2: string;
-// }
-// var elems: I[];
-// 
-// for (let { [|property1RENAME|]: property1/*END SUFFIX*/ } of elems) {
+// --- (line: 6) skipped ---
+// for (let { property1 } of elems) {
 //     property1++;
 // }
-// for (let { /*RENAME*/[|property1RENAME|]: p2 } of elems) {
+// for (/*RENAME*/let { property1: p2 } of elems) {
 // }


@@= skipped -20, +15 lines =@@
 // }
 // var elems: I[];
 // 
-// for (let { /*START PREFIX*/property1: /*RENAME*/[|property1RENAME|] } of elems) {
-//     [|property1RENAME|]++;
+// for (/*RENAME*/let { property1 } of elems) {
+//     property1++;
 // }
 // for (let { property1: p2 } of elems) {
 // }
@@= skipped -14, +14 lines =@@
 // }
 // var elems: I[];
 // 
-// for (let { /*START PREFIX*/property1: [|property1RENAME|] } of elems) {
+// for (let { [|property1RENAME|] } of elems) {
 //     /*RENAME*/[|property1RENAME|]++;
 // }
 // for (let { property1: p2 } of elems) {