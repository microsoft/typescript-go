--- old.renameDeclarationKeywords.baseline.jsonc
+++ new.renameDeclarationKeywords.baseline.jsonc
@@= skipped -1, +1 lines =@@
 // === /renameDeclarationKeywords.ts ===
 // class Base {}
 // interface Implemented1 {}
-// /*RENAME*/class [|C1RENAME|] extends Base implements Implemented1 {
+// class /*RENAME*/[|C1RENAME|] extends Base implements Implemented1 {
 //     get e() { return 1; }
 //     set e(v) {}
 // }
-// interface I1 extends Base { }
-// type T = { }
-// enum E { }
-// --- (line: 10) skipped ---
+// // --- (line: 7) skipped ---



@@= skipped -15, +12 lines =@@
 // === /renameDeclarationKeywords.ts ===
 // class [|BaseRENAME|] {}
 // interface Implemented1 {}
-// class C1 /*RENAME*/extends [|BaseRENAME|] implements Implemented1 {
+// class C1 extends /*RENAME*/[|BaseRENAME|] implements Implemented1 {
 //     get e() { return 1; }
 //     set e(v) {}
 // }
@@= skipped -8, +8 lines =@@
 // type T = { }
 // enum E { }
 // namespace N { }
-// --- (line: 11) skipped ---
+// // --- (line: 11) skipped ---



@@= skipped -8, +8 lines =@@
 // === /renameDeclarationKeywords.ts ===
 // class Base {}
 // interface [|Implemented1RENAME|] {}
-// class C1 extends Base /*RENAME*/implements [|Implemented1RENAME|] {
-//     get e() { return 1; }
-//     set e(v) {}
-// }
-// --- (line: 7) skipped ---
-
-
-
-// === findRenameLocations ===
-// === /renameDeclarationKeywords.ts ===
-// class Base {}
-// interface Implemented1 {}
-// class C1 extends Base implements Implemented1 {
-//     /*RENAME*/get [|eRENAME|]() { return 1; }
-//     set [|eRENAME|](v) {}
-// }
-// interface I1 extends Base { }
-// type T = { }
-// --- (line: 9) skipped ---
-
-
-
-// === findRenameLocations ===
-// === /renameDeclarationKeywords.ts ===
-// class Base {}
-// interface Implemented1 {}
-// class C1 extends Base implements Implemented1 {
-//     get [|eRENAME|]() { return 1; }
-//     /*RENAME*/set [|eRENAME|](v) {}
-// }
-// interface I1 extends Base { }
-// type T = { }
-// --- (line: 9) skipped ---
+// class C1 extends Base implements /*RENAME*/[|Implemented1RENAME|] {
+//     get e() { return 1; }
+//     set e(v) {}
+// }
+// // --- (line: 7) skipped ---
+
+
+
+// === findRenameLocations ===
+// === /renameDeclarationKeywords.ts ===
+// class Base {}
+// interface Implemented1 {}
+// class C1 extends Base implements Implemented1 {
+//     /*RENAME*/get e() { return 1; }
+//     set e(v) {}
+// }
+// interface I1 extends Base { }
+// // --- (line: 8) skipped ---
+
+
+
+// === findRenameLocations ===
+// === /renameDeclarationKeywords.ts ===
+// class Base {}
+// interface Implemented1 {}
+// class C1 extends Base implements Implemented1 {
+//     get e() { return 1; }
+//     /*RENAME*/set e(v) {}
+// }
+// interface I1 extends Base { }
+// type T = { }
+// // --- (line: 9) skipped ---



@@= skipped -42, +41 lines =@@
 //     get e() { return 1; }
 //     set e(v) {}
 // }
-// /*RENAME*/interface [|I1RENAME|] extends Base { }
+// interface /*RENAME*/[|I1RENAME|] extends Base { }
 // type T = { }
 // enum E { }
 // namespace N { }
-// --- (line: 11) skipped ---
+// // --- (line: 11) skipped ---



@@= skipped -16, +16 lines =@@
 //     get e() { return 1; }
 //     set e(v) {}
 // }
-// interface I1 /*RENAME*/extends [|BaseRENAME|] { }
+// interface I1 extends /*RENAME*/[|BaseRENAME|] { }
 // type T = { }
 // enum E { }
 // namespace N { }
-// --- (line: 11) skipped ---
+// // --- (line: 11) skipped ---



@@= skipped -14, +14 lines =@@
 //     set e(v) {}
 // }
 // interface I1 extends Base { }
-// /*RENAME*/type [|TRENAME|] = { }
+// type /*RENAME*/[|TRENAME|] = { }
 // enum E { }
 // namespace N { }
 // module M { }
-// --- (line: 12) skipped ---
+// // --- (line: 12) skipped ---



@@= skipped -14, +14 lines =@@
 // }
 // interface I1 extends Base { }
 // type T = { }
-// /*RENAME*/enum [|ERENAME|] { }
+// enum /*RENAME*/[|ERENAME|] { }
 // namespace N { }
 // module M { }
 // function fn() {}
-// --- (line: 13) skipped ---
+// // --- (line: 13) skipped ---



@@= skipped -14, +14 lines =@@
 // interface I1 extends Base { }
 // type T = { }
 // enum E { }
-// /*RENAME*/namespace [|NRENAME|] { }
+// namespace /*RENAME*/[|NRENAME|] { }
 // module M { }
 // function fn() {}
 // var x;
@@= skipped -15, +15 lines =@@
 // type T = { }
 // enum E { }
 // namespace N { }
-// /*RENAME*/module [|MRENAME|] { }
+// module /*RENAME*/[|MRENAME|] { }
 // function fn() {}
 // var x;
 // let y;
@@= skipped -14, +14 lines =@@
 // enum E { }
 // namespace N { }
 // module M { }
-// /*RENAME*/function [|fnRENAME|]() {}
+// function /*RENAME*/[|fnRENAME|]() {}
 // var x;
 // let y;
 // const z = 1;
@@= skipped -13, +13 lines =@@
 // namespace N { }
 // module M { }
 // function fn() {}
-// /*RENAME*/var [|xRENAME|];
+// var /*RENAME*/[|xRENAME|];
 // let y;
 // const z = 1;

@@= skipped -12, +12 lines =@@
 // module M { }
 // function fn() {}
 // var x;
-// /*RENAME*/let [|yRENAME|];
+// let /*RENAME*/[|yRENAME|];
 // const z = 1;


@@= skipped -11, +11 lines =@@
 // function fn() {}
 // var x;
 // let y;
-// /*RENAME*/const [|zRENAME|] = 1;
+// const /*RENAME*/[|zRENAME|] = 1;