// === findRenameLocations ===
// === /renameDestructuringClassProperty.ts ===
// class A {
//     /*RENAME*/[|fooRENAME|]: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { [|fooRENAME|] } = a;
//     }
//     syntax2(a: A): void {
//         let { [|fooRENAME|]: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { [|fooRENAME|] } = a;
//         foo = "newString";
//     }
// }



// === findRenameLocations ===
// === /renameDestructuringClassProperty.ts ===
// --- (line: 5) skipped ---
//         let { foo } = a;
//     }
//     syntax2(a: A): void {
//         /*RENAME*/let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { foo } = a;
// // --- (line: 13) skipped ---



// === findRenameLocations ===
// === /renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         /*RENAME*/let { foo } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
// // --- (line: 10) skipped ---



// === findRenameLocations ===
// === /renameDestructuringClassProperty.ts ===
// --- (line: 8) skipped ---
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         /*RENAME*/let { foo } = a;
//         foo = "newString";
//     }
// }



// === findRenameLocations ===
// === /renameDestructuringClassProperty.ts ===
// --- (line: 8) skipped ---
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { [|fooRENAME|] } = a;
//         /*RENAME*/[|fooRENAME|] = "newString";
//     }
// }