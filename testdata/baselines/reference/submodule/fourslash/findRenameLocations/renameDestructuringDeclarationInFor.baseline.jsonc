// === findRenameLocations ===
// === /renameDestructuringDeclarationInFor.ts ===
// interface I {
//     /*RENAME*/[|property1RENAME|]: number;
//     property2: string;
// }
// var elems: I[];
// 
// var p2: number, property1: number;
// for (let { [|property1RENAME|]: p2 } = elems[0]; p2 < 100; p2++) {
// }
// for (let { [|property1RENAME|] } = elems[0]; p2 < 100; p2++) {
//     property1 = p2;
// }



// === findRenameLocations ===
// === /renameDestructuringDeclarationInFor.ts ===
// --- (line: 4) skipped ---
// var elems: I[];
// 
// var p2: number, property1: number;
// for (/*RENAME*/let { property1: p2 } = elems[0]; p2 < 100; p2++) {
// }
// for (let { property1 } = elems[0]; p2 < 100; p2++) {
//     property1 = p2;
// }



// === findRenameLocations ===
// === /renameDestructuringDeclarationInFor.ts ===
// --- (line: 6) skipped ---
// var p2: number, property1: number;
// for (let { property1: p2 } = elems[0]; p2 < 100; p2++) {
// }
// for (/*RENAME*/let { property1 } = elems[0]; p2 < 100; p2++) {
//     property1 = p2;
// }



// === findRenameLocations ===
// === /renameDestructuringDeclarationInFor.ts ===
// --- (line: 6) skipped ---
// var p2: number, property1: number;
// for (let { property1: p2 } = elems[0]; p2 < 100; p2++) {
// }
// for (let { [|property1RENAME|] } = elems[0]; p2 < 100; p2++) {
//     /*RENAME*/[|property1RENAME|] = p2;
// }