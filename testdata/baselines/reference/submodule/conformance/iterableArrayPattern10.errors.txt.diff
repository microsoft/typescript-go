--- old.iterableArrayPattern10.errors.txt
+++ new.iterableArrayPattern10.errors.txt
@@= skipped -0, +0 lines =@@
+error TS2318: Cannot find global type 'Array'.
+error TS2318: Cannot find global type 'Function'.
+error TS2318: Cannot find global type 'IArguments'.
+error TS2318: Cannot find global type 'RegExp'.
+error TS2318: Cannot find global type 'String'.
+error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+iterableArrayPattern10.ts(11,6): error TS2304: Cannot find name 'Symbol'.
+iterableArrayPattern10.ts(16,14): error TS2488: Type '[any, any]' must have a '[Symbol.iterator]()' method that returns an iterator.
 iterableArrayPattern10.ts(17,5): error TS2345: Argument of type 'FooIterator' is not assignable to parameter of type '[any, any]'.
 
 
-==== iterableArrayPattern10.ts (1 errors) ====
+!!! error TS2318: Cannot find global type 'Array'.
+!!! error TS2318: Cannot find global type 'Function'.
+!!! error TS2318: Cannot find global type 'IArguments'.
+!!! error TS2318: Cannot find global type 'RegExp'.
+!!! error TS2318: Cannot find global type 'String'.
+!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+==== iterableArrayPattern10.ts (3 errors) ====
     class Bar { x }
     class Foo extends Bar { y }
     class FooIterator {
@@= skipped -12, +30 lines =@@
         }
     
         [Symbol.iterator]() {
+         ~~~~~~
+!!! error TS2304: Cannot find name 'Symbol'.
             return this;
         }
     }
     
     function fun([a, b]) { }
+                 ~~~~~~
+!!! error TS2488: Type '[any, any]' must have a '[Symbol.iterator]()' method that returns an iterator.
     fun(new FooIterator);
         ~~~~~~~~~~~~~~~
 !!! error TS2345: Argument of type 'FooIterator' is not assignable to parameter of type '[any, any]'.
