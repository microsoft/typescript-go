--- old.assertionTypePredicates1.types
+++ new.assertionTypePredicates1.types
@@= skipped -24, +24 lines =@@
 
 declare function assertDefined<T>(value: T): asserts value is NonNullable<T>;
 >assertDefined : <T>(value: T) => asserts value is NonNullable<T>
+>T : T
 >value : T
 
 function f01(x: unknown) {
@@= skipped -15, +16 lines =@@
 >assert(typeof x === "string") : void
 >assert : (value: unknown) => asserts value
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"string" : "string"
 
@@= skipped -36, +36 lines =@@
 >assert : (value: unknown) => asserts value
 >typeof x === "boolean" || typeof x === "number" : boolean
 >typeof x === "boolean" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"boolean" : "boolean"
 >typeof x === "number" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"number" : "number"
 
         x.toLocaleString;
->x.toLocaleString : ((locales?: string | string[], options?: Intl.NumberFormatOptions) => string) | (() => string)
+>x.toLocaleString : () => string | (locales?: string | string[] | undefined, options?: NumberFormatOptions | undefined) => string
 >x : number | boolean
->toLocaleString : ((locales?: string | string[], options?: Intl.NumberFormatOptions) => string) | (() => string)
+>toLocaleString : () => string | (locales?: string | string[] | undefined, options?: NumberFormatOptions | undefined) => string
     }
     if (!!true) {
 >!!true : true
@@= skipped -75, +75 lines =@@
 >x : unknown
 >undefined : undefined
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : {} | null
 >"string" : "string"
 
@@= skipped -121, +121 lines =@@
 >Debug : typeof Debug
 
     export declare function assert(value: unknown, message?: string): asserts value;
->assert : (value: unknown, message?: string) => asserts value
+>assert : (value: unknown, message?: string | undefined) => asserts value
 >value : unknown
 >message : string | undefined
 
     export declare function assertDefined<T>(value: T): asserts value is NonNullable<T>;
 >assertDefined : <T>(value: T) => asserts value is NonNullable<T>
+>T : T
 >value : T
 }
 
@@= skipped -20, +21 lines =@@
 
         Debug.assert(x);
 >Debug.assert(x) : void
->Debug.assert : (value: unknown, message?: string) => asserts value
+>Debug.assert : (value: unknown, message?: string | undefined) => asserts value
 >Debug : typeof Debug
->assert : (value: unknown, message?: string) => asserts value
+>assert : (value: unknown, message?: string | undefined) => asserts value
 >x : string | undefined
 
         x.length;
@@= skipped -17, +17 lines =@@
 
         Debug.assert(x !== undefined);
 >Debug.assert(x !== undefined) : void
->Debug.assert : (value: unknown, message?: string) => asserts value
+>Debug.assert : (value: unknown, message?: string | undefined) => asserts value
 >Debug : typeof Debug
->assert : (value: unknown, message?: string) => asserts value
+>assert : (value: unknown, message?: string | undefined) => asserts value
 >x !== undefined : boolean
 >x : string | undefined
 >undefined : undefined
@@= skipped -36, +36 lines =@@
 
         Debug.assert(false);
 >Debug.assert(false) : void
->Debug.assert : (value: unknown, message?: string) => asserts value
+>Debug.assert : (value: unknown, message?: string | undefined) => asserts value
 >Debug : typeof Debug
->assert : (value: unknown, message?: string) => asserts value
+>assert : (value: unknown, message?: string | undefined) => asserts value
 >false : false
 
         x;  // Unreachable
@@= skipped -77, +77 lines =@@
 >this : this
 >assert : (value: unknown) => asserts value
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"string" : "string"
 
@@= skipped -70, +70 lines =@@
 >super : Test
 >assert : (value: unknown) => asserts value
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"string" : "string"
 
@@= skipped -102, +102 lines =@@
 >assert(typeof x === "string") : void
 >assert : (value: unknown) => asserts value
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"string" : "string"
 
     const a = [assert];
->a : ((value: unknown) => asserts value)[]
->[assert] : ((value: unknown) => asserts value)[]
+>a : (value: unknown) => asserts value[]
+>[assert] : (value: unknown) => asserts value[]
 >assert : (value: unknown) => asserts value
 
     a[0](typeof x === "string");  // Error
 >a[0](typeof x === "string") : void
 >a[0] : (value: unknown) => asserts value
->a : ((value: unknown) => asserts value)[]
+>a : (value: unknown) => asserts value[]
 >0 : 0
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"string" : "string"
 
@@= skipped -30, +30 lines =@@
 >t1 : Test
 >assert : (value: unknown) => asserts value
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"string" : "string"
 
@@= skipped -15, +15 lines =@@
 >t2 : Test
 >assert : (value: unknown) => asserts value
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"string" : "string"
 }
@@= skipped -8, +8 lines =@@
 // Repro from #35940
 
 interface Thing {
+>Thing : Thing
+
     good: boolean;
 >good : boolean
 
@@= skipped -8, +10 lines =@@
 }
 
 interface GoodThing {
+>GoodThing : GoodThing
+
     good: true;
 >good : true
 >true : true
@@= skipped -103, +105 lines =@@
 }
 
 interface TestPropertySignature {
+>TestPropertySignature : TestPropertySignature
+
   assert: (value: unknown) => asserts value;
 >assert : (value: unknown) => asserts value
 >value : unknown
@@= skipped -25, +27 lines =@@
 >x : TestPropertySignature
 }
 function testFunctionThisParameter1(
->testFunctionThisParameter1 : (this: TestPropertySignature, x: unknown) => void
+>testFunctionThisParameter1 : (x: unknown) => void
 
   this: TestPropertySignature,
 >this : TestPropertySignature
@@= skipped -21, +21 lines =@@
 }
 
 interface TestMethodSignature {
+>TestMethodSignature : TestMethodSignature
+
   assert(value: unknown): asserts value;
 >assert : (value: unknown) => asserts value
 >value : unknown
@@= skipped -25, +27 lines =@@
 >x : TestMethodSignature
 }
 function testFunctionThisParameter2(
->testFunctionThisParameter2 : (this: TestMethodSignature, x: unknown) => void
+>testFunctionThisParameter2 : (x: unknown) => void
 
   this: TestMethodSignature,
 >this : TestMethodSignature
