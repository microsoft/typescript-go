--- old.everyTypeWithAnnotationAndInitializer.types
+++ new.everyTypeWithAnnotationAndInitializer.types
@@= skipped -1, +1 lines =@@
 
 === everyTypeWithAnnotationAndInitializer.ts ===
 interface I {
+>I : I
+
     id: number;
 >id : number
 }
@@= skipped -13, +15 lines =@@
 
 class D<T>{
 >D : D<T>
+>T : T
 
     source: T;
 >source : T
@@= skipped -95, +96 lines =@@
 var aFunction: typeof F = F;
 >aFunction : (x: string) => number
 >F : (x: string) => number
->F : (x: string) => number
 
 var anOtherFunction: (x: string) => number = F;
 >anOtherFunction : (x: string) => number
@@= skipped -9, +8 lines =@@
 
 var aLambda: typeof F = (x) => 2;
 >aLambda : (x: string) => number
->F : (x: string) => number
 >(x) => 2 : (x: string) => number
 >x : string
 >2 : 2
@@= skipped -8, +7 lines =@@
 var aModule: typeof M = M;
 >aModule : typeof M
 >M : typeof M
->M : typeof M
 
 var aClassInModule: M.A = new M.A();
->aClassInModule : M.A
+>aClassInModule : A
 >M : any
->new M.A() : M.A
->M.A : typeof M.A
+>new M.A() : A
+>M.A : typeof A
 >M : typeof M
->A : typeof M.A
+>A : typeof A
 
 var aFunctionInModule: typeof M.F2 = (x) => 'this is a string';
 >aFunctionInModule : (x: number) => string
->M.F2 : (x: number) => string
 >M : typeof M
->F2 : (x: number) => string
 >(x) => 'this is a string' : (x: number) => string
 >x : number
 >'this is a string' : "this is a string"
