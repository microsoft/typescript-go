--- old.specializedSignatureIsSubtypeOfNonSpecializedSignature.types
+++ new.specializedSignatureIsSubtypeOfNonSpecializedSignature.types
@@= skipped -33, +33 lines =@@
 
 class C2<T> {
 >C2 : C2<T>
+>T : T
 
     foo(x: 'a');
 >foo : { (x: "a"): any; (x: string): any; (x: T): any; }
@@= skipped -20, +21 lines =@@
 
 class C3<T extends String> {
 >C3 : C3<T>
+>T : T
 
     foo(x: 'a');
 >foo : { (x: "a"): any; (x: string): any; (x: T): any; }
@@= skipped -19, +20 lines =@@
 }
 
 interface I {
+>I : I
+
     (x: 'a');
 >x : "a"
 
@@= skipped -23, +25 lines =@@
 }
 
 interface I2<T> {
+>I2 : I2<T>
+>T : T
+
     (x: 'a');
 >x : "a"
 
@@= skipped -23, +26 lines =@@
 }
 
 interface I3<T extends String> {
+>I3 : I3<T>
+>T : T
+
     (x: 'a');
 >x : "a"
 
@@= skipped -23, +26 lines =@@
 }
 
 var a: {
->a : { (x: string): any; (x: "a"): any; (x: number): any; foo(x: string): any; foo(x: "a"): any; foo(x: number): any; }
+>a : { (x: string): any; (x: "a"): any; (x: number): any; foo: { (x: string): any; (x: "a"): any; (x: number): any; }; }
 
     (x: string);
 >x : string
@@= skipped -25, +25 lines =@@
 }
 
 var a2: {
->a2 : { (x: "a"): any; (x: string): any; <T>(x: T): any; foo(x: string): any; foo(x: "a"): any; foo<T>(x: T): any; }
+>a2 : { (x: "a"): any; (x: string): any; <T>(x: T): any; foo: { (x: string): any; (x: "a"): any; <T>(x: T): any; }; }
 
     (x: 'a');
 >x : "a"
@@= skipped -9, +9 lines =@@
 >x : string
 
     <T>(x: T);
+>T : T
 >x : T
 
     foo(x: string);
@@= skipped -12, +13 lines =@@
 
     foo<T>(x: T);
 >foo : { (x: string): any; (x: "a"): any; <T>(x: T): any; }
+>T : T
 >x : T
 }
 
 var a3: {
->a3 : { (x: "a"): any; <T>(x: T): any; (x: string): any; foo(x: string): any; foo(x: "a"): any; foo<T extends String>(x: T): any; }
+>a3 : { (x: "a"): any; <T>(x: T): any; (x: string): any; foo: { (x: string): any; (x: "a"): any; <T extends String>(x: T): any; }; }
 
     (x: 'a');
 >x : "a"
 
     <T>(x: T);
+>T : T
 >x : T
 
     (x: string);
@@= skipped -25, +27 lines =@@
 
     foo<T extends String>(x: T);
 >foo : { (x: string): any; (x: "a"): any; <T extends String>(x: T): any; }
+>T : T
 >x : T
 }
 
