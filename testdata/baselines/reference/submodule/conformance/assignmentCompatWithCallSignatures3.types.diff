--- old.assignmentCompatWithCallSignatures3.types
+++ new.assignmentCompatWithCallSignatures3.types
@@= skipped -83, +83 lines =@@
 >bar : string
 
 var a12: (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
->a12 : (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
+>a12 : (x: Base[], y: Derived2[]) => Derived[]
 >x : Base[]
 >y : Derived2[]
 
 var a13: (x: Array<Base>, y: Array<Derived>) => Array<Derived>;
->a13 : (x: Array<Base>, y: Array<Derived>) => Array<Derived>
+>a13 : (x: Base[], y: Derived[]) => Derived[]
 >x : Base[]
 >y : Derived[]
 
@@= skipped -28, +28 lines =@@
 >a16 : { <T extends Derived>(x: T): number[]; <U extends Base>(x: U): number[]; }
 
     <T extends Derived>(x: T): number[];
+>T : T
 >x : T
 
     <U extends Base>(x: U): number[];
+>U : U
 >x : U
 }
 var a17: {
@@= skipped -44, +46 lines =@@
 
 var b: <T>(x: T) => T[]; 
 >b : <T>(x: T) => T[]
+>T : T
 >x : T
 
 a = b; // ok
@@= skipped -14, +15 lines =@@
 
 var b2: <T>(x: T) => string[]; 
 >b2 : <T>(x: T) => string[]
+>T : T
 >x : T
 
 a2 = b2; // ok 
@@= skipped -14, +15 lines =@@
 
 var b3: <T>(x: T) => T; 
 >b3 : <T>(x: T) => T
+>T : T
 >x : T
 
 a3 = b3; // ok
@@= skipped -14, +15 lines =@@
 
 var b4: <T, U>(x: T, y: U) => T; 
 >b4 : <T, U>(x: T, y: U) => T
+>T : T
+>U : U
 >x : T
 >y : U
 
@@= skipped -15, +17 lines =@@
 
 var b5: <T, U>(x: (arg: T) => U) => T; 
 >b5 : <T, U>(x: (arg: T) => U) => T
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 
@@= skipped -15, +17 lines =@@
 
 var b6: <T extends Base, U extends Derived>(x: (arg: T) => U) => T; 
 >b6 : <T extends Base, U extends Derived>(x: (arg: T) => U) => T
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 
@@= skipped -15, +17 lines =@@
 
 var b7: <T extends Base, U extends Derived>(x: (arg: T) => U) => (r: T) => U; 
 >b7 : <T extends Base, U extends Derived>(x: (arg: T) => U) => (r: T) => U
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 >r : T
@@= skipped -16, +18 lines =@@
 
 var b8: <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U;
 >b8 : <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 >y : (arg2: T) => U
@@= skipped -18, +20 lines =@@
 
 var b9: <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: string; bing: number }) => U) => (r: T) => U; 
 >b9 : <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: string; bing: number; }) => U) => (r: T) => U
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 >y : (arg2: { foo: string; bing: number; }) => U
@@= skipped -20, +22 lines =@@
 
 var b10: <T extends Derived>(...x: T[]) => T; 
 >b10 : <T extends Derived>(...x: T[]) => T
+>T : T
 >x : T[]
 
 a10 = b10; // ok
@@= skipped -14, +15 lines =@@
 
 var b11: <T extends Base>(x: T, y: T) => T; 
 >b11 : <T extends Base>(x: T, y: T) => T
+>T : T
 >x : T
 >y : T
 
@@= skipped -14, +15 lines =@@
 >a11 : (x: { foo: string; }, y: { foo: string; bar: string; }) => Base
 
 var b12: <T extends Array<Base>>(x: Array<Base>, y: T) => Array<Derived>; 
->b12 : <T extends Array<Base>>(x: Array<Base>, y: T) => Array<Derived>
+>b12 : <T extends Base[]>(x: Base[], y: T) => Derived[]
+>T : T
 >x : Base[]
 >y : T
 
 a12 = b12; // ok
->a12 = b12 : <T extends Array<Base>>(x: Array<Base>, y: T) => Array<Derived>
->a12 : (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
->b12 : <T extends Array<Base>>(x: Array<Base>, y: T) => Array<Derived>
+>a12 = b12 : <T extends Base[]>(x: Base[], y: T) => Derived[]
+>a12 : (x: Base[], y: Derived2[]) => Derived[]
+>b12 : <T extends Base[]>(x: Base[], y: T) => Derived[]
 
 b12 = a12; // ok
->b12 = a12 : (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
->b12 : <T extends Array<Base>>(x: Array<Base>, y: T) => Array<Derived>
->a12 : (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
+>b12 = a12 : (x: Base[], y: Derived2[]) => Derived[]
+>b12 : <T extends Base[]>(x: Base[], y: T) => Derived[]
+>a12 : (x: Base[], y: Derived2[]) => Derived[]
 
 var b13: <T extends Array<Derived>>(x: Array<Base>, y: T) => T; 
->b13 : <T extends Array<Derived>>(x: Array<Base>, y: T) => T
+>b13 : <T extends Derived[]>(x: Base[], y: T) => T
+>T : T
 >x : Base[]
 >y : T
 
 a13 = b13; // ok
->a13 = b13 : <T extends Array<Derived>>(x: Array<Base>, y: T) => T
->a13 : (x: Array<Base>, y: Array<Derived>) => Array<Derived>
->b13 : <T extends Array<Derived>>(x: Array<Base>, y: T) => T
+>a13 = b13 : <T extends Derived[]>(x: Base[], y: T) => T
+>a13 : (x: Base[], y: Derived[]) => Derived[]
+>b13 : <T extends Derived[]>(x: Base[], y: T) => T
 
 b13 = a13; // ok
->b13 = a13 : (x: Array<Base>, y: Array<Derived>) => Array<Derived>
->b13 : <T extends Array<Derived>>(x: Array<Base>, y: T) => T
->a13 : (x: Array<Base>, y: Array<Derived>) => Array<Derived>
+>b13 = a13 : (x: Base[], y: Derived[]) => Derived[]
+>b13 : <T extends Derived[]>(x: Base[], y: T) => T
+>a13 : (x: Base[], y: Derived[]) => Derived[]
 
 var b14: <T>(x: { a: T; b: T }) => T; 
 >b14 : <T>(x: { a: T; b: T; }) => T
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
@@= skipped -47, +50 lines =@@
 
 var b15: <T>(x: T) => T[]; 
 >b15 : <T>(x: T) => T[]
+>T : T
 >x : T
 
 a15 = b15; // ok
@@= skipped -14, +15 lines =@@
 
 var b16: <T extends Base>(x: T) => number[];
 >b16 : <T extends Base>(x: T) => number[]
+>T : T
 >x : T
 
 a16 = b16; // ok
@@= skipped -14, +15 lines =@@
 
 var b17: <T>(x: (a: T) => T) => T[]; // ok
 >b17 : <T>(x: (a: T) => T) => T[]
+>T : T
 >x : (a: T) => T
 >a : T
 
@@= skipped -15, +16 lines =@@
 
 var b18: <T>(x: (a: T) => T) => T[]; 
 >b18 : <T>(x: (a: T) => T) => T[]
+>T : T
 >x : (a: T) => T
 >a : T
 
