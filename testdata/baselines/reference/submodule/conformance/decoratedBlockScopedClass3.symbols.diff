--- old.decoratedBlockScopedClass3.symbols
+++ new.decoratedBlockScopedClass3.symbols
@@= skipped -15, +15 lines =@@
 >Foo : Symbol(Foo, Decl(a.ts, 2, 1))
 
     public static func(): Foo {
->func : Symbol(Foo.func, Decl(a.ts, 5, 11))
+>func : Symbol(func, Decl(a.ts, 5, 11))
 >Foo : Symbol(Foo, Decl(a.ts, 2, 1))
 
         return new Foo();
@@= skipped -8, +8 lines =@@
     }
 }
 Foo.func();
->Foo.func : Symbol(Foo.func, Decl(a.ts, 5, 11))
+>Foo.func : Symbol(func, Decl(a.ts, 5, 11))
 >Foo : Symbol(Foo, Decl(a.ts, 2, 1))
->func : Symbol(Foo.func, Decl(a.ts, 5, 11))
+>func : Symbol(func, Decl(a.ts, 5, 11))
 
 try {
     @decorator()
@@= skipped -12, +12 lines =@@
 >Foo : Symbol(Foo, Decl(a.ts, 12, 5))
 
         public static func(): Foo {
->func : Symbol(Foo.func, Decl(a.ts, 14, 15))
+>func : Symbol(func, Decl(a.ts, 14, 15))
 >Foo : Symbol(Foo, Decl(a.ts, 12, 5))
 
             return new Foo();
@@= skipped -8, +8 lines =@@
         }
     }
     Foo.func();
->Foo.func : Symbol(Foo.func, Decl(a.ts, 14, 15))
+>Foo.func : Symbol(func, Decl(a.ts, 14, 15))
 >Foo : Symbol(Foo, Decl(a.ts, 12, 5))
->func : Symbol(Foo.func, Decl(a.ts, 14, 15))
+>func : Symbol(func, Decl(a.ts, 14, 15))
 }
 catch (e) {}
 >e : Symbol(e, Decl(a.ts, 21, 7))
