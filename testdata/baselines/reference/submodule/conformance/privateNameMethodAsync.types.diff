--- old.privateNameMethodAsync.types
+++ new.privateNameMethodAsync.types
@@= skipped -29, +29 lines =@@
 >b : number
 >(this.#baz().next().value || 0) : number
 >this.#baz().next().value || 0 : number
->this.#baz().next().value : number | void
+>this.#baz().next().value : void | number
 >this.#baz().next() : IteratorResult<number, void>
 >this.#baz().next : (...[value]: [] | [unknown]) => IteratorResult<number, void>
 >this.#baz() : Generator<number, void, unknown>
 >this.#baz : () => Generator<number, void, unknown>
 >this : this
 >next : (...[value]: [] | [unknown]) => IteratorResult<number, void>
->value : number | void
+>value : void | number
 >0 : 0
 >((await this.#qux().next()).value || 0) : number
 >(await this.#qux().next()).value || 0 : number
->(await this.#qux().next()).value : number | void
+>(await this.#qux().next()).value : void | number
 >(await this.#qux().next()) : IteratorResult<number, void>
 >await this.#qux().next() : IteratorResult<number, void>
 >this.#qux().next() : Promise<IteratorResult<number, void>>
@@= skipped -20, +20 lines =@@
 >this.#qux : () => AsyncGenerator<number, void, unknown>
 >this : this
 >next : (...[value]: [] | [unknown]) => Promise<IteratorResult<number, void>>
->value : number | void
+>value : void | number
 >0 : 0
     }
     *#baz() { yield 42; }