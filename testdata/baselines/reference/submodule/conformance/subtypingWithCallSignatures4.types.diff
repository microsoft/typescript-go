--- old.subtypingWithCallSignatures4.types
+++ new.subtypingWithCallSignatures4.types
@@= skipped -24, +24 lines =@@
 declare function foo1(a: <T>(x: T) => T[]);
 >foo1 : { (a: <T>(x: T) => T[]): any; (a: any): any; }
 >a : <T>(x: T) => T[]
+>T : T
 >x : T
 
 declare function foo1(a: any): any;
@@= skipped -9, +10 lines =@@
 declare function foo2(a2: <T>(x: T) => string[]);
 >foo2 : { (a2: <T>(x: T) => string[]): any; (a: any): any; }
 >a2 : <T>(x: T) => string[]
+>T : T
 >x : T
 
 declare function foo2(a: any): any;
@@= skipped -9, +10 lines =@@
 declare function foo3(a3: <T>(x: T) => void);
 >foo3 : { (a3: <T>(x: T) => void): any; (a: any): any; }
 >a3 : <T>(x: T) => void
+>T : T
 >x : T
 
 declare function foo3(a: any): any;
@@= skipped -9, +10 lines =@@
 declare function foo4(a4: <T, U>(x: T, y: U) => string);
 >foo4 : { (a4: <T, U>(x: T, y: U) => string): any; (a: any): any; }
 >a4 : <T, U>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 
@@= skipped -10, +12 lines =@@
 declare function foo5(a5: <T, U>(x: (arg: T) => U) => T);
 >foo5 : { (a5: <T, U>(x: (arg: T) => U) => T): any; (a: any): any; }
 >a5 : <T, U>(x: (arg: T) => U) => T
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 
@@= skipped -10, +12 lines =@@
 declare function foo6(a6: <T extends Base>(x: (arg: T) => Derived) => T);
 >foo6 : { (a6: <T extends Base>(x: (arg: T) => Derived) => T): any; (a: any): any; }
 >a6 : <T extends Base>(x: (arg: T) => Derived) => T
+>T : T
 >x : (arg: T) => Derived
 >arg : T
 
@@= skipped -10, +11 lines =@@
 declare function foo11(a11: <T>(x: { foo: T }, y: { foo: T; bar: T }) => Base);
 >foo11 : { (a11: <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base): any; (a: any): any; }
 >a11 : <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
+>T : T
 >x : { foo: T; }
 >foo : T
 >y : { foo: T; bar: T; }
@@= skipped -13, +14 lines =@@
 declare function foo15(a15: <T>(x: { a: T; b: T }) => T[]);
 >foo15 : { (a15: <T>(x: { a: T; b: T; }) => T[]): any; (a: any): any; }
 >a15 : <T>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
@@= skipped -11, +12 lines =@@
 declare function foo16(a16: <T extends Base>(x: { a: T; b: T }) => T[]);
 >foo16 : { (a16: <T extends Base>(x: { a: T; b: T; }) => T[]): any; (a: any): any; }
 >a16 : <T extends Base>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
@@= skipped -13, +14 lines =@@
 >a17 : { <T extends Derived>(x: (a: T) => T): T[]; <T extends Base>(x: (a: T) => T): T[]; }
 
     <T extends Derived>(x: (a: T) => T): T[];
+>T : T
 >x : (a: T) => T
 >a : T
 
     <T extends Base>(x: (a: T) => T): T[];        
+>T : T
 >x : (a: T) => T
 >a : T
 
@@= skipped -20, +22 lines =@@
 >x : { <T extends Derived>(a: T): T; <T extends Base>(a: T): T; }
 
         <T extends Derived>(a: T): T;
+>T : T
 >a : T
 
         <T extends Base>(a: T): T;
+>T : T
 >a : T
 
     }): any[];
@@= skipped -10, +12 lines =@@
 >x : { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }
 
         <T extends Derived2>(a: T): T;
+>T : T
 >a : T
 
         <T extends Base>(a: T): T;
+>T : T
 >a : T
 
     }): any[];
@@= skipped -14, +16 lines =@@
 var r1arg = <T>(x: T) => <T[]>null;
 >r1arg : <T>(x: T) => T[]
 ><T>(x: T) => <T[]>null : <T>(x: T) => T[]
+>T : T
 >x : T
 ><T[]>null : T[]
 
 var r1arg2 = <T>(x: T) => <T[]>null;
 >r1arg2 : <T>(x: T) => T[]
 ><T>(x: T) => <T[]>null : <T>(x: T) => T[]
+>T : T
 >x : T
 ><T[]>null : T[]
 
@@= skipped -16, +18 lines =@@
 >r1arg : <T>(x: T) => T[]
 
 var r1a = [r1arg, r1arg2];
->r1a : (<T>(x: T) => T[])[]
->[r1arg, r1arg2] : (<T>(x: T) => T[])[]
+>r1a : <T>(x: T) => T[][]
+>[r1arg, r1arg2] : <T>(x: T) => T[][]
 >r1arg : <T>(x: T) => T[]
 >r1arg2 : <T>(x: T) => T[]
 
 var r1b = [r1arg2, r1arg];
->r1b : (<T>(x: T) => T[])[]
->[r1arg2, r1arg] : (<T>(x: T) => T[])[]
+>r1b : <T>(x: T) => T[][]
+>[r1arg2, r1arg] : <T>(x: T) => T[][]
 >r1arg2 : <T>(x: T) => T[]
 >r1arg : <T>(x: T) => T[]
 
 var r2arg = <T>(x: T) => [''];
 >r2arg : <T>(x: T) => string[]
 ><T>(x: T) => [''] : <T>(x: T) => string[]
+>T : T
 >x : T
 >[''] : string[]
 >'' : ""
@@= skipped -21, +22 lines =@@
 var r2arg2 = <T>(x: T) => [''];
 >r2arg2 : <T>(x: T) => string[]
 ><T>(x: T) => [''] : <T>(x: T) => string[]
+>T : T
 >x : T
 >[''] : string[]
 >'' : ""
@@= skipped -11, +12 lines =@@
 >r2arg : <T>(x: T) => string[]
 
 var r2a = [r2arg, r2arg2];
->r2a : (<T>(x: T) => string[])[]
->[r2arg, r2arg2] : (<T>(x: T) => string[])[]
+>r2a : <T>(x: T) => string[][]
+>[r2arg, r2arg2] : <T>(x: T) => string[][]
 >r2arg : <T>(x: T) => string[]
 >r2arg2 : <T>(x: T) => string[]
 
 var r2b = [r2arg2, r2arg];
->r2b : (<T>(x: T) => string[])[]
->[r2arg2, r2arg] : (<T>(x: T) => string[])[]
+>r2b : <T>(x: T) => string[][]
+>[r2arg2, r2arg] : <T>(x: T) => string[][]
 >r2arg2 : <T>(x: T) => string[]
 >r2arg : <T>(x: T) => string[]
 
 var r3arg = <T>(x: T) => <T>null;
 >r3arg : <T>(x: T) => T
 ><T>(x: T) => <T>null : <T>(x: T) => T
+>T : T
 >x : T
 ><T>null : T
 
 var r3arg2 = <T>(x: T) => { };
 >r3arg2 : <T>(x: T) => void
 ><T>(x: T) => { } : <T>(x: T) => void
+>T : T
 >x : T
 
 var r3 = foo3(r3arg);
@@= skipped -29, +31 lines =@@
 >r3arg : <T>(x: T) => T
 
 var r3a = [r3arg, r3arg2];
->r3a : (<T>(x: T) => void)[]
->[r3arg, r3arg2] : (<T>(x: T) => void)[]
+>r3a : <T>(x: T) => void[]
+>[r3arg, r3arg2] : <T>(x: T) => void[]
 >r3arg : <T>(x: T) => T
 >r3arg2 : <T>(x: T) => void
 
 var r3b = [r3arg2, r3arg];
->r3b : (<T>(x: T) => void)[]
->[r3arg2, r3arg] : (<T>(x: T) => void)[]
+>r3b : <T>(x: T) => void[]
+>[r3arg2, r3arg] : <T>(x: T) => void[]
 >r3arg2 : <T>(x: T) => void
 >r3arg : <T>(x: T) => T
 
 var r4arg = <T, U>(x: T, y: U) => '';
 >r4arg : <T, U>(x: T, y: U) => string
 ><T, U>(x: T, y: U) => '' : <T, U>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 >'' : ""
@@= skipped -21, +23 lines =@@
 var r4arg2 = <T, U>(x: T, y: U) => '';
 >r4arg2 : <T, U>(x: T, y: U) => string
 ><T, U>(x: T, y: U) => '' : <T, U>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 >'' : ""
@@= skipped -11, +13 lines =@@
 >r4arg : <T, U>(x: T, y: U) => string
 
 var r4a = [r4arg, r4arg2];
->r4a : (<T, U>(x: T, y: U) => string)[]
->[r4arg, r4arg2] : (<T, U>(x: T, y: U) => string)[]
+>r4a : <T, U>(x: T, y: U) => string[]
+>[r4arg, r4arg2] : <T, U>(x: T, y: U) => string[]
 >r4arg : <T, U>(x: T, y: U) => string
 >r4arg2 : <T, U>(x: T, y: U) => string
 
 var r4b = [r4arg2, r4arg];
->r4b : (<T, U>(x: T, y: U) => string)[]
->[r4arg2, r4arg] : (<T, U>(x: T, y: U) => string)[]
+>r4b : <T, U>(x: T, y: U) => string[]
+>[r4arg2, r4arg] : <T, U>(x: T, y: U) => string[]
 >r4arg2 : <T, U>(x: T, y: U) => string
 >r4arg : <T, U>(x: T, y: U) => string
 
 var r5arg = <T, U>(x: (arg: T) => U) => <T>null;
 >r5arg : <T, U>(x: (arg: T) => U) => T
 ><T, U>(x: (arg: T) => U) => <T>null : <T, U>(x: (arg: T) => U) => T
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 ><T>null : T
@@= skipped -21, +23 lines =@@
 var r5arg2 = <T, U>(x: (arg: T) => U) => <T>null;
 >r5arg2 : <T, U>(x: (arg: T) => U) => T
 ><T, U>(x: (arg: T) => U) => <T>null : <T, U>(x: (arg: T) => U) => T
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 ><T>null : T
@@= skipped -11, +13 lines =@@
 >r5arg : <T, U>(x: (arg: T) => U) => T
 
 var r5a = [r5arg, r5arg2];
->r5a : (<T, U>(x: (arg: T) => U) => T)[]
->[r5arg, r5arg2] : (<T, U>(x: (arg: T) => U) => T)[]
+>r5a : <T, U>(x: (arg: T) => U) => T[]
+>[r5arg, r5arg2] : <T, U>(x: (arg: T) => U) => T[]
 >r5arg : <T, U>(x: (arg: T) => U) => T
 >r5arg2 : <T, U>(x: (arg: T) => U) => T
 
 var r5b = [r5arg2, r5arg];
->r5b : (<T, U>(x: (arg: T) => U) => T)[]
->[r5arg2, r5arg] : (<T, U>(x: (arg: T) => U) => T)[]
+>r5b : <T, U>(x: (arg: T) => U) => T[]
+>[r5arg2, r5arg] : <T, U>(x: (arg: T) => U) => T[]
 >r5arg2 : <T, U>(x: (arg: T) => U) => T
 >r5arg : <T, U>(x: (arg: T) => U) => T
 
 var r6arg = <T extends Base, U extends Derived>(x: (arg: T) => U) => <T>null;
 >r6arg : <T extends Base, U extends Derived>(x: (arg: T) => U) => T
 ><T extends Base, U extends Derived>(x: (arg: T) => U) => <T>null : <T extends Base, U extends Derived>(x: (arg: T) => U) => T
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 ><T>null : T
@@= skipped -21, +23 lines =@@
 var r6arg2 = <T extends Base>(x: (arg: T) => Derived) => <T>null;
 >r6arg2 : <T extends Base>(x: (arg: T) => Derived) => T
 ><T extends Base>(x: (arg: T) => Derived) => <T>null : <T extends Base>(x: (arg: T) => Derived) => T
+>T : T
 >x : (arg: T) => Derived
 >arg : T
 ><T>null : T
@@= skipped -11, +12 lines =@@
 >r6arg : <T extends Base, U extends Derived>(x: (arg: T) => U) => T
 
 var r6a = [r6arg, r6arg2];
->r6a : (<T extends Base, U extends Derived>(x: (arg: T) => U) => T)[]
->[r6arg, r6arg2] : (<T extends Base, U extends Derived>(x: (arg: T) => U) => T)[]
+>r6a : <T extends Base, U extends Derived>(x: (arg: T) => U) => T[]
+>[r6arg, r6arg2] : <T extends Base, U extends Derived>(x: (arg: T) => U) => T[]
 >r6arg : <T extends Base, U extends Derived>(x: (arg: T) => U) => T
 >r6arg2 : <T extends Base>(x: (arg: T) => Derived) => T
 
 var r6b = [r6arg2, r6arg];
->r6b : (<T extends Base, U extends Derived>(x: (arg: T) => U) => T)[]
->[r6arg2, r6arg] : (<T extends Base, U extends Derived>(x: (arg: T) => U) => T)[]
+>r6b : <T extends Base, U extends Derived>(x: (arg: T) => U) => T[]
+>[r6arg2, r6arg] : <T extends Base, U extends Derived>(x: (arg: T) => U) => T[]
 >r6arg2 : <T extends Base>(x: (arg: T) => Derived) => T
 >r6arg : <T extends Base, U extends Derived>(x: (arg: T) => U) => T
 
 var r11arg = <T, U>(x: { foo: T }, y: { foo: U; bar: U }) => <Base>null;
 >r11arg : <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
 ><T, U>(x: { foo: T }, y: { foo: U; bar: U }) => <Base>null : <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
+>T : T
+>U : U
 >x : { foo: T; }
 >foo : T
 >y : { foo: U; bar: U; }
@@= skipped -24, +26 lines =@@
 var r11arg2 = <T>(x: { foo: T }, y: { foo: T; bar: T }) => <Base>null;
 >r11arg2 : <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
 ><T>(x: { foo: T }, y: { foo: T; bar: T }) => <Base>null : <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
+>T : T
 >x : { foo: T; }
 >foo : T
 >y : { foo: T; bar: T; }
@@= skipped -14, +15 lines =@@
 >r11arg : <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
 
 var r11a = [r11arg, r11arg2];
->r11a : (<T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base)[]
->[r11arg, r11arg2] : (<T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base)[]
+>r11a : <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base[]
+>[r11arg, r11arg2] : <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base[]
 >r11arg : <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
 >r11arg2 : <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
 
 var r11b = [r11arg2, r11arg];
->r11b : (<T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base)[]
->[r11arg2, r11arg] : (<T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base)[]
+>r11b : <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base[]
+>[r11arg2, r11arg] : <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base[]
 >r11arg2 : <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
 >r11arg : <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
 
 var r15arg = <U, V>(x: { a: U; b: V; }) => <U[]>null;
 >r15arg : <U, V>(x: { a: U; b: V; }) => U[]
 ><U, V>(x: { a: U; b: V; }) => <U[]>null : <U, V>(x: { a: U; b: V; }) => U[]
+>U : U
+>V : V
 >x : { a: U; b: V; }
 >a : U
 >b : V
@@= skipped -22, +24 lines =@@
 var r15arg2 = <T>(x: { a: T; b: T }) => <T[]>null;
 >r15arg2 : <T>(x: { a: T; b: T; }) => T[]
 ><T>(x: { a: T; b: T }) => <T[]>null : <T>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
@@= skipped -12, +13 lines =@@
 >r15arg : <U, V>(x: { a: U; b: V; }) => U[]
 
 var r15a = [r15arg, r15arg2];
->r15a : (<T>(x: { a: T; b: T; }) => T[])[]
->[r15arg, r15arg2] : (<T>(x: { a: T; b: T; }) => T[])[]
+>r15a : <T>(x: { a: T; b: T; }) => T[][]
+>[r15arg, r15arg2] : <T>(x: { a: T; b: T; }) => T[][]
 >r15arg : <U, V>(x: { a: U; b: V; }) => U[]
 >r15arg2 : <T>(x: { a: T; b: T; }) => T[]
 
 var r15b = [r15arg2, r15arg];
->r15b : (<T>(x: { a: T; b: T; }) => T[])[]
->[r15arg2, r15arg] : (<T>(x: { a: T; b: T; }) => T[])[]
+>r15b : <T>(x: { a: T; b: T; }) => T[][]
+>[r15arg2, r15arg] : <T>(x: { a: T; b: T; }) => T[][]
 >r15arg2 : <T>(x: { a: T; b: T; }) => T[]
 >r15arg : <U, V>(x: { a: U; b: V; }) => U[]
 
 var r16arg = <T extends Base>(x: { a: T; b: T }) => <T[]>null;
 >r16arg : <T extends Base>(x: { a: T; b: T; }) => T[]
 ><T extends Base>(x: { a: T; b: T }) => <T[]>null : <T extends Base>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
@@= skipped -22, +23 lines =@@
 var r16arg2 = <T extends Base>(x: { a: T; b: T }) => <T[]>null;
 >r16arg2 : <T extends Base>(x: { a: T; b: T; }) => T[]
 ><T extends Base>(x: { a: T; b: T }) => <T[]>null : <T extends Base>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
@@= skipped -12, +13 lines =@@
 >r16arg : <T extends Base>(x: { a: T; b: T; }) => T[]
 
 var r16a = [r16arg, r16arg2];
->r16a : (<T extends Base>(x: { a: T; b: T; }) => T[])[]
->[r16arg, r16arg2] : (<T extends Base>(x: { a: T; b: T; }) => T[])[]
+>r16a : <T extends Base>(x: { a: T; b: T; }) => T[][]
+>[r16arg, r16arg2] : <T extends Base>(x: { a: T; b: T; }) => T[][]
 >r16arg : <T extends Base>(x: { a: T; b: T; }) => T[]
 >r16arg2 : <T extends Base>(x: { a: T; b: T; }) => T[]
 
 var r16b = [r16arg2, r16arg];
->r16b : (<T extends Base>(x: { a: T; b: T; }) => T[])[]
->[r16arg2, r16arg] : (<T extends Base>(x: { a: T; b: T; }) => T[])[]
+>r16b : <T extends Base>(x: { a: T; b: T; }) => T[][]
+>[r16arg2, r16arg] : <T extends Base>(x: { a: T; b: T; }) => T[][]
 >r16arg2 : <T extends Base>(x: { a: T; b: T; }) => T[]
 >r16arg : <T extends Base>(x: { a: T; b: T; }) => T[]
 
 var r17arg = <T>(x: (a: T) => T) => <T[]>null;
 >r17arg : <T>(x: (a: T) => T) => T[]
 ><T>(x: (a: T) => T) => <T[]>null : <T>(x: (a: T) => T) => T[]
+>T : T
 >x : (a: T) => T
 >a : T
 ><T[]>null : T[]
@@= skipped -28, +29 lines =@@
 >r18arg : (x: <T>(a: T) => T) => any[]
 >(x: <T>(a: T) => T) => <any[]>null : (x: <T>(a: T) => T) => any[]
 >x : <T>(a: T) => T
+>T : T
 >a : T
 ><any[]>null : any[]
 
