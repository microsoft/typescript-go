--- old.subtypingWithObjectMembers2.types
+++ new.subtypingWithObjectMembers2.types
@@= skipped -1, +1 lines =@@
 
 === subtypingWithObjectMembers2.ts ===
 interface Base {
+>Base : Base
+
     foo: string;
 >foo : string
 }
 
 interface Derived extends Base {
+>Derived : Derived
+
     bar: string;
 >bar : string
 }
@@= skipped -12, +16 lines =@@
 // N and M have the same name, same accessibility, same optionality, and N is a subtype of M
 // foo properties are valid, bar properties cause errors in the derived class declarations
 module NotOptional {
+>NotOptional : any
+
     interface A {
+>A : A
+
         foo: Base;
 >foo : Base
 
@@= skipped -9, +13 lines =@@
     }
 
     interface B extends A {
+>B : B
+
         foo: Derived; // ok
 >foo : Derived
 
@@= skipped -8, +10 lines =@@
     }
 
     interface A2 {
+>A2 : A2
+
         1: Base;
 >1 : Base
 
@@= skipped -8, +10 lines =@@
     }
 
     interface B2 extends A2 {
+>B2 : B2
+
         1: Derived; // ok
 >1 : Derived
 
@@= skipped -8, +10 lines =@@
     }
 
     interface A3 {
+>A3 : A3
+
         '1': Base;
 >'1' : Base
 
@@= skipped -8, +10 lines =@@
     }
 
     interface B3 extends A3 {
+>B3 : B3
+
         '1': Derived; // ok
 >'1' : Derived
 
@@= skipped -10, +12 lines =@@
 
 // same cases as above but with optional
 module Optional {
+>Optional : any
+
     interface A {
+>A : A
+
         foo?: Base;
 >foo : Base
 
@@= skipped -9, +13 lines =@@
     }
 
     interface B extends A {
+>B : B
+
         foo?: Derived; // ok
 >foo : Derived
 
@@= skipped -8, +10 lines =@@
     }
 
     interface A2 {
+>A2 : A2
+
         1?: Base;
 >1 : Base
 
@@= skipped -8, +10 lines =@@
     }
 
     interface B2 extends A2 {
+>B2 : B2
+
         1?: Derived; // ok
 >1 : Derived
 
@@= skipped -8, +10 lines =@@
     }
 
     interface A3 {
+>A3 : A3
+
         '1'?: Base;
 >'1' : Base
 
@@= skipped -8, +10 lines =@@
     }
 
     interface B3 extends A3 {
+>B3 : B3
+
         '1'?: Derived; // ok
 >'1' : Derived
 
