--- old.tsxSpreadAttributesResolution5.types
+++ new.tsxSpreadAttributesResolution5.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
->      : ^^^^^^^^^^^^
+>React : any
 
 interface PoisonedProp {
+>PoisonedProp : PoisonedProp
+
     x: string;
 >x : string
->  : ^^^^^^
 
     y: 2;
 >y : 2
->  : ^
 }
 
 class Poisoned extends React.Component<PoisonedProp, {}> {
 >Poisoned : Poisoned
->         : ^^^^^^^^
->React.Component : React.Component<PoisonedProp, {}>
->                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
->React : typeof React
->      : ^^^^^^^^^^^^
->Component : typeof React.Component
->          : ^^^^^^^^^^^^^^^^^^^^^^
+>React.Component : any
+>React : any
+>Component : any
 
     render() {
->render : () => JSX.Element
->       : ^^^^^^^^^^^^^^^^^
+>render : () => any
 
         return <div>Hello</div>;
-><div>Hello</div> : JSX.Element
->                 : ^^^^^^^^^^^
+><div>Hello</div> : any
 >div : any
->    : ^^^
 >div : any
->    : ^^^
     }
 }
 
 let obj = {
 >obj : { x: string; y: number; }
->    : ^^^^^^^^^^^^^^^^^^^^^^^^^
 >{    x: "hello world",    y: 2} : { x: string; y: number; }
->                                : ^^^^^^^^^^^^^^^^^^^^^^^^^
 
     x: "hello world",
 >x : string
->  : ^^^^^^
 >"hello world" : "hello world"
->              : ^^^^^^^^^^^^^
 
     y: 2
 >y : number
->  : ^^^^^^
 >2 : 2
->  : ^
 
 };
 
 // Error as "obj" has type { x: string; y: number }
 let p = <Poisoned {...obj} />;
->p : JSX.Element
->  : ^^^^^^^^^^^
-><Poisoned {...obj} /> : JSX.Element
->                      : ^^^^^^^^^^^
+>p : any
+><Poisoned {...obj} /> : any
 >Poisoned : typeof Poisoned
->         : ^^^^^^^^^^^^^^^
 >obj : { x: string; y: number; }
->    : ^^^^^^^^^^^^^^^^^^^^^^^^^
 
 class EmptyProp extends React.Component<{}, {}> {
 >EmptyProp : EmptyProp
->          : ^^^^^^^^^
->React.Component : React.Component<{}, {}>
->                : ^^^^^^^^^^^^^^^^^^^^^^^
->React : typeof React
->      : ^^^^^^^^^^^^
->Component : typeof React.Component
->          : ^^^^^^^^^^^^^^^^^^^^^^
+>React.Component : any
+>React : any
+>Component : any
 
     render() {
->render : () => JSX.Element
->       : ^^^^^^^^^^^^^^^^^
+>render : () => any
 
         return <div>Default hi</div>;
-><div>Default hi</div> : JSX.Element
->                      : ^^^^^^^^^^^
+><div>Default hi</div> : any
 >div : any
->    : ^^^
 >div : any
->    : ^^^
     }
     greeting: string;
 >greeting : string
->         : ^^^^^^
 }
 
 let o = {
 >o : { prop1: boolean; }
->  : ^^^^^^^^^^^^^^^^^^^
 >{    prop1: false} : { prop1: boolean; }
->                   : ^^^^^^^^^^^^^^^^^^^
 
     prop1: false
 >prop1 : boolean
->      : ^^^^^^^
 >false : false
->      : ^^^^^
 }
 // Ok
 let e = <EmptyProp {...o} />;
->e : JSX.Element
->  : ^^^^^^^^^^^
-><EmptyProp {...o} /> : JSX.Element
->                     : ^^^^^^^^^^^
+>e : any
+><EmptyProp {...o} /> : any
 >EmptyProp : typeof EmptyProp
->          : ^^^^^^^^^^^^^^^^
 >o : { prop1: boolean; }
->  : ^^^^^^^^^^^^^^^^^^^
 
