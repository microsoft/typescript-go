--- old.logicalNotOperatorWithStringType.symbols
+++ new.logicalNotOperatorWithStringType.symbols
@@= skipped -14, +14 lines =@@
 >A : Symbol(A, Decl(logicalNotOperatorWithStringType.ts, 4, 40))
 
     public a: string;
->a : Symbol(A.a, Decl(logicalNotOperatorWithStringType.ts, 6, 9))
+>a : Symbol(a, Decl(logicalNotOperatorWithStringType.ts, 6, 9))
 
     static foo() { return ""; }
->foo : Symbol(A.foo, Decl(logicalNotOperatorWithStringType.ts, 7, 21))
+>foo : Symbol(foo, Decl(logicalNotOperatorWithStringType.ts, 7, 21))
 }
 module M {
 >M : Symbol(M, Decl(logicalNotOperatorWithStringType.ts, 9, 1))
@@= skipped -44, +44 lines =@@
 // string type expressions
 var ResultIsBoolean6 = !objA.a;
 >ResultIsBoolean6 : Symbol(ResultIsBoolean6, Decl(logicalNotOperatorWithStringType.ts, 26, 3))
->objA.a : Symbol(A.a, Decl(logicalNotOperatorWithStringType.ts, 6, 9))
+>objA.a : Symbol(a, Decl(logicalNotOperatorWithStringType.ts, 6, 9))
 >objA : Symbol(objA, Decl(logicalNotOperatorWithStringType.ts, 14, 3))
->a : Symbol(A.a, Decl(logicalNotOperatorWithStringType.ts, 6, 9))
+>a : Symbol(a, Decl(logicalNotOperatorWithStringType.ts, 6, 9))
 
 var ResultIsBoolean7 = !M.n;
 >ResultIsBoolean7 : Symbol(ResultIsBoolean7, Decl(logicalNotOperatorWithStringType.ts, 27, 3))
->M.n : Symbol(M.n, Decl(logicalNotOperatorWithStringType.ts, 11, 14))
+>M.n : Symbol(n, Decl(logicalNotOperatorWithStringType.ts, 11, 14))
 >M : Symbol(M, Decl(logicalNotOperatorWithStringType.ts, 9, 1))
->n : Symbol(M.n, Decl(logicalNotOperatorWithStringType.ts, 11, 14))
+>n : Symbol(n, Decl(logicalNotOperatorWithStringType.ts, 11, 14))
 
 var ResultIsBoolean8 = !STRING1[0];
 >ResultIsBoolean8 : Symbol(ResultIsBoolean8, Decl(logicalNotOperatorWithStringType.ts, 28, 3))
@@= skipped -20, +20 lines =@@
 
 var ResultIsBoolean10 = !A.foo();
 >ResultIsBoolean10 : Symbol(ResultIsBoolean10, Decl(logicalNotOperatorWithStringType.ts, 30, 3))
->A.foo : Symbol(A.foo, Decl(logicalNotOperatorWithStringType.ts, 7, 21))
+>A.foo : Symbol(foo, Decl(logicalNotOperatorWithStringType.ts, 7, 21))
 >A : Symbol(A, Decl(logicalNotOperatorWithStringType.ts, 4, 40))
->foo : Symbol(A.foo, Decl(logicalNotOperatorWithStringType.ts, 7, 21))
+>foo : Symbol(foo, Decl(logicalNotOperatorWithStringType.ts, 7, 21))
 
 var ResultIsBoolean11 = !(STRING + STRING);
 >ResultIsBoolean11 : Symbol(ResultIsBoolean11, Decl(logicalNotOperatorWithStringType.ts, 31, 3))
@@= skipped -11, +11 lines =@@
 
 var ResultIsBoolean12 = !STRING.charAt(0);
 >ResultIsBoolean12 : Symbol(ResultIsBoolean12, Decl(logicalNotOperatorWithStringType.ts, 32, 3))
->STRING.charAt : Symbol(String.charAt, Decl(lib.es5.d.ts, --, --))
+>STRING.charAt : Symbol(charAt, Decl(lib.es5.d.ts, --, --))
 >STRING : Symbol(STRING, Decl(logicalNotOperatorWithStringType.ts, 1, 3))
->charAt : Symbol(String.charAt, Decl(lib.es5.d.ts, --, --))
+>charAt : Symbol(charAt, Decl(lib.es5.d.ts, --, --))
 
 // multiple ! operator
 var ResultIsBoolean13 = !!STRING;
@@= skipped -26, +26 lines =@@
 >foo : Symbol(foo, Decl(logicalNotOperatorWithStringType.ts, 2, 36))
 
 !objA.a,M.n;
->objA.a : Symbol(A.a, Decl(logicalNotOperatorWithStringType.ts, 6, 9))
+>objA.a : Symbol(a, Decl(logicalNotOperatorWithStringType.ts, 6, 9))
 >objA : Symbol(objA, Decl(logicalNotOperatorWithStringType.ts, 14, 3))
->a : Symbol(A.a, Decl(logicalNotOperatorWithStringType.ts, 6, 9))
->M.n : Symbol(M.n, Decl(logicalNotOperatorWithStringType.ts, 11, 14))
+>a : Symbol(a, Decl(logicalNotOperatorWithStringType.ts, 6, 9))
+>M.n : Symbol(n, Decl(logicalNotOperatorWithStringType.ts, 11, 14))
 >M : Symbol(M, Decl(logicalNotOperatorWithStringType.ts, 9, 1))
->n : Symbol(M.n, Decl(logicalNotOperatorWithStringType.ts, 11, 14))
+>n : Symbol(n, Decl(logicalNotOperatorWithStringType.ts, 11, 14))
 
