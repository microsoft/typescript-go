--- old.instantiationExpressions.errors.txt
+++ new.instantiationExpressions.errors.txt
@@= skipped -0, +0 lines =@@
 instantiationExpressions.ts(6,16): error TS1099: Type argument list cannot be empty.
 instantiationExpressions.ts(9,17): error TS2635: Type '{ <T>(x: T): T; <T>(x: T, n: number): T; <T, U>(t: [T, U]): [T, U]; }' has no signatures for which the type argument list is applicable.
-instantiationExpressions.ts(12,21): error TS1099: Type argument list cannot be empty.
 instantiationExpressions.ts(15,22): error TS2635: Type '{ <T>(x: T): T; <T>(x: T, n: number): T; <T, U>(t: [T, U]): [T, U]; }' has no signatures for which the type argument list is applicable.
 instantiationExpressions.ts(18,21): error TS1099: Type argument list cannot be empty.
 instantiationExpressions.ts(20,22): error TS2635: Type 'ArrayConstructor' has no signatures for which the type argument list is applicable.
-instantiationExpressions.ts(23,24): error TS1099: Type argument list cannot be empty.
 instantiationExpressions.ts(25,25): error TS2635: Type 'ArrayConstructor' has no signatures for which the type argument list is applicable.
 instantiationExpressions.ts(50,16): error TS2635: Type '{ x: string; y: string; }' has no signatures for which the type argument list is applicable.
 instantiationExpressions.ts(82,16): error TS2635: Type '{ x: string; } & { y: string; }' has no signatures for which the type argument list is applicable.
 instantiationExpressions.ts(106,16): error TS2635: Type '(a: string, b: number) => string[]' has no signatures for which the type argument list is applicable.
 instantiationExpressions.ts(114,16): error TS2635: Type '{ x: string; } | { y: string; }' has no signatures for which the type argument list is applicable.
 instantiationExpressions.ts(126,16): error TS2635: Type '(a: string, b: number) => string[]' has no signatures for which the type argument list is applicable.
-instantiationExpressions.ts(130,16): error TS2635: Type 'new (a: string, b: number) => string[]' has no signatures for which the type argument list is applicable.
+instantiationExpressions.ts(130,16): error TS2635: Type 'new(a: string, b: number) => string[]' has no signatures for which the type argument list is applicable.
 instantiationExpressions.ts(163,40): error TS2344: Type 'U' does not satisfy the constraint 'number'.
   Type 'string' is not assignable to type 'number'.
 instantiationExpressions.ts(164,40): error TS2344: Type 'U' does not satisfy the constraint 'string'.
   Type 'number' is not assignable to type 'string'.
 
 
-==== instantiationExpressions.ts (16 errors) ====
+==== instantiationExpressions.ts (14 errors) ====
     declare function fx<T>(x: T): T;
     declare function fx<T>(x: T, n: number): T;
     declare function fx<T, U>(t: [T, U]): [T, U];
@@= skipped -34, +32 lines =@@
     }
     
     type T10 = typeof fx<>;  // Error
-                        ~~
-!!! error TS1099: Type argument list cannot be empty.
     type T11 = typeof fx<string>;  // { (x: string): string; (x: string, n: number): string; }
     type T12 = typeof fx<string, number>;  // (t: [string, number]) => [string, number]
     type T13 = typeof fx<string, number, boolean>;  // Error
@@= skipped -19, +17 lines =@@
     }
     
     type T20 = typeof Array<>;  // Error
-                           ~~
-!!! error TS1099: Type argument list cannot be empty.
     type T21 = typeof Array<string>;  // new (...) => string[]
     type T22 = typeof Array<string, number>;  // Error
                             ~~~~~~~~~~~~~~
@@= skipped -122, +120 lines =@@
     function f37(f: (<T>(a: T) => T) | (new (a: string, b: number) => string[])) {
         let fs = f<string>;  // Error, 'new (a: string, b: number) => string[]' has no applicable signatures
                    ~~~~~~
-!!! error TS2635: Type 'new (a: string, b: number) => string[]' has no signatures for which the type argument list is applicable.
+!!! error TS2635: Type 'new(a: string, b: number) => string[]' has no signatures for which the type argument list is applicable.
     }
     
     function f38<T extends (<A>(x: A) => A) | (<B>(x: B) => B[]), U>(f: T | U | (<C>(x: C) => C[][])) {
