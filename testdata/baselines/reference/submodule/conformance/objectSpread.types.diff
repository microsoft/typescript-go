--- old.objectSpread.types
+++ new.objectSpread.types
@@= skipped -395, +395 lines =@@

 // optional
 function container(
->container : (definiteBoolean: { sn: boolean; }, definiteString: { sn: string; }, optionalString: { sn?: string; }, optionalNumber: { sn?: number; }) => void
+>container : (definiteBoolean: { sn: boolean; }, definiteString: { sn: string; }, optionalString: { sn?: string | undefined; }, optionalNumber: { sn?: number | undefined; }) => void

     definiteBoolean: { sn: boolean },
 >definiteBoolean : { sn: boolean; }
@@= skipped -11, +11 lines =@@
 >sn : string

     optionalString: { sn?: string },
->optionalString : { sn?: string; }
+>optionalString : { sn?: string | undefined; }
 >sn : string | undefined

     optionalNumber: { sn?: number }) {
->optionalNumber : { sn?: number; }
+>optionalNumber : { sn?: number | undefined; }
 >sn : number | undefined

     let optionalUnionStops: { sn: string | number | boolean } = { ...definiteBoolean, ...definiteString, ...optionalNumber };
@@= skipped -13, +13 lines =@@
 >{ ...definiteBoolean, ...definiteString, ...optionalNumber } : { sn: string | number; }
 >definiteBoolean : { sn: boolean; }
 >definiteString : { sn: string; }
->optionalNumber : { sn?: number; }
+>optionalNumber : { sn?: number | undefined; }

     let optionalUnionDuplicates: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber };
 >optionalUnionDuplicates : { sn: string | number; }
@@= skipped -8, +8 lines =@@
 >{ ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber } : { sn: string | number; }
 >definiteBoolean : { sn: boolean; }
 >definiteString : { sn: string; }
->optionalString : { sn?: string; }
->optionalNumber : { sn?: number; }
+>optionalString : { sn?: string | undefined; }
+>optionalNumber : { sn?: number | undefined; }

     let allOptional: { sn?: string | number } = { ...optionalString, ...optionalNumber };
->allOptional : { sn?: string | number; }
+>allOptional : { sn?: string | number | undefined; }
 >sn : string | number | undefined
 >{ ...optionalString, ...optionalNumber } : { sn?: string | number | undefined; }
->optionalString : { sn?: string; }
->optionalNumber : { sn?: number; }
+>optionalString : { sn?: string | undefined; }
+>optionalNumber : { sn?: number | undefined; }

     // computed property
     let computedFirst: { a: number, b: string, "before everything": number } =
@@= skipped -244, +244 lines =@@
 >v : T | U

     let x12 = { ...v, ...obj };
->x12 : (T & { x: number; }) | (U & { x: number; })
->{ ...v, ...obj } : (T & { x: number; }) | (U & { x: number; })
+>x12 : T & { x: number; } | U & { x: number; }
+>{ ...v, ...obj } : T & { x: number; } | U & { x: number; }
 >v : T | U
 >obj : { x: number; }

@@= skipped -11, +11 lines =@@
 >w : T | { s: string; }

     let x14 = { ...w, ...obj };
->x14 : { s: string; x: number; } | (T & { x: number; })
->{ ...w, ...obj } : { s: string; x: number; } | (T & { x: number; })
+>x14 : { s: string; x: number; } | T & { x: number; }
+>{ ...w, ...obj } : { s: string; x: number; } | T & { x: number; }
 >w : T | { s: string; }
 >obj : { x: number; }

     let x15 = { ...t, ...v };
->x15 : T | (T & U)
->{ ...t, ...v } : T | (T & U)
+>x15 : T | T & U
+>{ ...t, ...v } : T | T & U
 >t : T
 >v : T | U

     let x16 = { ...t, ...w };
->x16 : T | (T & { s: string; })
->{ ...t, ...w } : T | (T & { s: string; })
+>x16 : T | T & { s: string; }
+>{ ...t, ...w } : T | T & { s: string; }
 >t : T
 >w : T | { s: string; }

     let x17 = { ...t, ...w, ...obj };
->x17 : (T & { x: number; }) | (T & { s: string; x: number; })
->{ ...t, ...w, ...obj } : (T & { x: number; }) | (T & { s: string; x: number; })
+>x17 : T & { x: number; } | T & { s: string; x: number; }
+>{ ...t, ...w, ...obj } : T & { x: number; } | T & { s: string; x: number; }
 >t : T
 >w : T | { s: string; }
 >obj : { x: number; }

     let x18 = { ...t, ...v, ...w };
->x18 : T | (T & U) | (T & { s: string; }) | (T & U & { s: string; })
->{ ...t, ...v, ...w } : T | (T & U) | (T & { s: string; }) | (T & U & { s: string; })
+>x18 : T | T & U | T & { s: string; } | T & U & { s: string; }
+>{ ...t, ...v, ...w } : T | T & U | T & { s: string; } | T & U & { s: string; }
 >t : T
 >v : T | U
 >w : T | { s: string; }