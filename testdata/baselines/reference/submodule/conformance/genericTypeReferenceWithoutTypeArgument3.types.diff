--- old.genericTypeReferenceWithoutTypeArgument3.types
+++ new.genericTypeReferenceWithoutTypeArgument3.types
@@= skipped -5, +5 lines =@@
 
 declare class C<T> {
 >C : C<T>
+>T : T
 
     foo: T;
 >foo : T
@@= skipped -9, +10 lines =@@
 >c : any
 
 declare var a: { x: C };
->a : { x: C; }
+>a : { x: any; }
 >x : any
 
 declare var b: { (x: C): C };
->b : (x: C) => C
+>b : (x: any) => any
 >x : any
 
 declare var d: { [x: C]: C };
@@= skipped -12, +12 lines =@@
 >x : any
 
 declare function f(x: C): C;
->f : (x: C) => C
+>f : (x: any) => any
 >x : any
 
 declare class D extends C {}
@@= skipped -12, +12 lines =@@
 
     export class E<T> { foo: T }
 >E : E<T>
+>T : T
 >foo : T
 }
 
@@= skipped -11, +12 lines =@@
 
 declare class D3<T extends M.E> { }
 >D3 : D3<T>
+>T : T
 >M : any
 
 declare function h<T extends C>(x: T);
->h : <T extends C>(x: T) => any
+>h : <T extends any>(x: T) => any
+>T : T
 >x : T
 
 declare function i<T extends M.E>(x: T);
->i : <T extends M.E>(x: T) => any
+>i : <T extends any>(x: T) => any
+>T : T
 >M : any
 >x : T
 
