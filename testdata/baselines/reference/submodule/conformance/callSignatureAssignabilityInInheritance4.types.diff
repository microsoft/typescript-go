--- old.callSignatureAssignabilityInInheritance4.types
+++ new.callSignatureAssignabilityInInheritance4.types
@@= skipped -22, +22 lines =@@
 >bing : string
 
 interface A { // T
+>A : A
+
     // M's
     a: <T>(x: T) => T[];
 >a : <T>(x: T) => T[]
+>T : T
 >x : T
 
     a2: <T>(x: T) => string[];
 >a2 : <T>(x: T) => string[]
+>T : T
 >x : T
 
     a3: <T>(x: T) => void;
 >a3 : <T>(x: T) => void
+>T : T
 >x : T
 
     a4: <T,U>(x: T, y: U) => string;
 >a4 : <T, U>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 
     a5: <T,U>(x: (arg: T) => U) => T;
 >a5 : <T, U>(x: (arg: T) => U) => T
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 
     a6: <T extends Base>(x: (arg: T) => Derived) => T;
 >a6 : <T extends Base>(x: (arg: T) => Derived) => T
+>T : T
 >x : (arg: T) => Derived
 >arg : T
 
     a11: <T>(x: { foo: T }, y: { foo: T; bar: T }) => Base;
 >a11 : <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
+>T : T
 >x : { foo: T; }
 >foo : T
 >y : { foo: T; bar: T; }
@@= skipped -38, +49 lines =@@
 
     a15: <T>(x: { a: T; b: T }) => T[];
 >a15 : <T>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
 
     a16: <T extends Base>(x: { a: T; b: T }) => T[];
 >a16 : <T extends Base>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
@@= skipped -14, +16 lines =@@
 >a17 : { <T extends Derived>(x: (a: T) => T): T[]; <T extends Base>(x: (a: T) => T): T[]; }
 
         <T extends Derived>(x: (a: T) => T): T[];
+>T : T
 >x : (a: T) => T
 >a : T
 
         <T extends Base>(x: (a: T) => T): T[];        
+>T : T
 >x : (a: T) => T
 >a : T
 
@@= skipped -15, +17 lines =@@
 >x : { <T extends Derived>(a: T): T; <T extends Base>(a: T): T; }
 
             <T extends Derived>(a: T): T;
+>T : T
 >a : T
 
             <T extends Base>(a: T): T;
+>T : T
 >a : T
 
         }): any[];
@@= skipped -10, +12 lines =@@
 >x : { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }
 
             <T extends Derived2>(a: T): T;
+>T : T
 >a : T
 
             <T extends Base>(a: T): T;
+>T : T
 >a : T
 
         }): any[];
@@= skipped -11, +13 lines =@@
 
 // S's
 interface I extends A {
+>I : I
+
     // N's
     a: <T>(x: T) => T[]; // ok, instantiation of N is a subtype of M, T is number
 >a : <T>(x: T) => T[]
+>T : T
 >x : T
 
     a2: <T>(x: T) => string[]; // ok
 >a2 : <T>(x: T) => string[]
+>T : T
 >x : T
 
     a3: <T>(x: T) => T; // ok since Base returns void
 >a3 : <T>(x: T) => T
+>T : T
 >x : T
 
     a4: <T, U>(x: T, y: U) => string; // ok, instantiation of N is a subtype of M, T is string, U is number
 >a4 : <T, U>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 
     a5: <T, U>(x: (arg: T) => U) => T; // ok, U is in a parameter position so inferences can be made
 >a5 : <T, U>(x: (arg: T) => U) => T
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 
     a6: <T extends Base, U extends Derived>(x: (arg: T) => U) => T; // ok, same as a5 but with object type hierarchy
 >a6 : <T extends Base, U extends Derived>(x: (arg: T) => U) => T
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 
     a11: <T, U>(x: { foo: T }, y: { foo: U; bar: U }) => Base; // ok
 >a11 : <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
+>T : T
+>U : U
 >x : { foo: T; }
 >foo : T
 >y : { foo: U; bar: U; }
@@= skipped -38, +51 lines =@@
 
     a15: <U, V>(x: { a: U; b: V; }) => U[]; // ok, T = U, T = V
 >a15 : <U, V>(x: { a: U; b: V; }) => U[]
+>U : U
+>V : V
 >x : { a: U; b: V; }
 >a : U
 >b : V
 
     a16: <T>(x: { a: T; b: T }) => T[]; // ok, more general parameter type
 >a16 : <T>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
 
     a17: <T>(x: (a: T) => T) => T[]; // ok
 >a17 : <T>(x: (a: T) => T) => T[]
+>T : T
 >x : (a: T) => T
 >a : T
 
     a18: (x: <T>(a: T) => T) => any[]; // ok
 >a18 : (x: <T>(a: T) => T) => any[]
 >x : <T>(a: T) => T
+>T : T
 >a : T
 }
