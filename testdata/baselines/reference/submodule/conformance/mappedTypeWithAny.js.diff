--- old.mappedTypeWithAny.js
+++ new.mappedTypeWithAny.js
@@= skipped -65, +65 lines =@@


 //// [mappedTypeWithAny.js]
-"use strict";
-for (var id in z) {
-    var data = z[id];
-    var x = data.notAValue; // Error
+for (let id in z) {
+    let data = z[id];
+    let x = data.notAValue; // Error
 }
 function bar(arrayish, objectish, indirectArrayish) {
-    var arr;
+    let arr;
     arr = arrayish;
     arr = objectish;
     arr = indirectArrayish;
 }
-var abc = stringifyArray(void 0);
-var def = stringifyPair(void 0);
+let abc = stringifyArray(void 0);
+let def = stringifyPair(void 0);


 //// [mappedTypeWithAny.d.ts]
@@= skipped -33, +32 lines =@@
     [P in keyof any]: Item;
 };
 declare let x4: ItemMap<any>;
+// Repro from #19152
 type Data = {
     value: string;
 };
@@= skipped -7, +8 lines =@@
     [P in keyof T]: Data;
 };
 declare let z: StrictDataMap<any>;
+// Issue #46169.
+// We want mapped types whose constraint is `keyof T` to
+// map over `any` differently, depending on whether `T`
+// is constrained to array and tuple types.
 type Arrayish<T extends unknown[]> = {
     [K in keyof T]: T[K];
 };
 type Objectish<T extends unknown> = {
     [K in keyof T]: T[K];
 };
+// When a mapped type whose constraint is `keyof T` is instantiated,
+// `T` may be instantiated with a `U` which is constrained to
+// array and tuple types. *Ideally*, when `U` is later instantiated with `any`,
+// the result should also be some sort of array; however, at the moment we don't seem
+// to have an easy way to preserve that information. More than just that, it would be
+// inconsistent for two instantiations of `Objectish<any>` to produce different outputs
+// depending on the usage-site. As a result, `IndirectArrayish` does not act like `Arrayish`.
 type IndirectArrayish<U extends unknown[]> = Objectish<U>;
 declare function bar(arrayish: Arrayish<any>, objectish: Objectish<any>, indirectArrayish: IndirectArrayish<any>): void;
 declare function stringifyArray<T extends readonly any[]>(arr: T): {
@@= skipped -16, +27 lines =@@
     -readonly [K in keyof T]: string;
 };
 declare let def: [any, any];
+// Repro from #46582
 type Evolvable<E extends Evolver> = {
     [P in keyof E]: never;
 };