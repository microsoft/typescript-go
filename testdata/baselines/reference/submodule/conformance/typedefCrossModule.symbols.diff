--- old.typedefCrossModule.symbols
+++ new.typedefCrossModule.symbols
@@= skipped -7, +7 lines =@@
 === mod1.js ===
 /// <reference path="./commonjs.d.ts"/>
 /** @typedef {{ type: "a", x: 1 }} A */
+>type : Symbol(type, Decl(mod1.js, 1, 15))
+>x : Symbol(x, Decl(mod1.js, 1, 26))
+
 /** @typedef {{ type: "b", y: 1 }} B */
+>type : Symbol(type, Decl(mod1.js, 2, 15))
+>y : Symbol(y, Decl(mod1.js, 2, 26))
+
 /** @typedef {A | B} Both */
+>A : Symbol(A)
+>B : Symbol(B)
+
 module.exports = C
->module.exports : Symbol(module.exports, Decl(mod1.js, 0, 0))
->module : Symbol(export=, Decl(mod1.js, 0, 0))
->exports : Symbol(export=, Decl(mod1.js, 0, 0))
+>module.exports : Symbol(exports, Decl(commonjs.d.ts, 0, 21))
+>module : Symbol(module, Decl(commonjs.d.ts, 0, 11))
+>exports : Symbol(exports, Decl(commonjs.d.ts, 0, 21))
 >C : Symbol(C, Decl(mod1.js, 4, 18))
 
 function C() {
 >C : Symbol(C, Decl(mod1.js, 4, 18))
 
     this.p = 1
->this.p : Symbol(C.p, Decl(mod1.js, 5, 14))
->this : Symbol(C, Decl(mod1.js, 4, 18))
->p : Symbol(C.p, Decl(mod1.js, 5, 14))
 }
 
 === mod2.js ===
 /// <reference path="./commonjs.d.ts"/>
 /** @typedef {{ type: "a", x: 1 }} A */
+>type : Symbol(type, Decl(mod2.js, 1, 15))
+>x : Symbol(x, Decl(mod2.js, 1, 26))
+
 /** @typedef {{ type: "b", y: 1 }} B */
+>type : Symbol(type, Decl(mod2.js, 2, 15))
+>y : Symbol(y, Decl(mod2.js, 2, 26))
+
 /** @typedef {A | B} Both */
+>A : Symbol(A)
+>B : Symbol(B)
 
 export function C() {
 >C : Symbol(C, Decl(mod2.js, 0, 0))
 
     this.p = 1
->this.p : Symbol(C.p, Decl(mod2.js, 5, 21))
->this : Symbol(C, Decl(mod2.js, 0, 0))
->p : Symbol(C.p, Decl(mod2.js, 5, 21))
 }
 
 === mod3.js ===
 /// <reference path="./commonjs.d.ts"/>
 /** @typedef {{ type: "a", x: 1 }} A */
+>type : Symbol(type, Decl(mod3.js, 1, 15))
+>x : Symbol(x, Decl(mod3.js, 1, 26))
+
 /** @typedef {{ type: "b", y: 1 }} B */
+>type : Symbol(type, Decl(mod3.js, 2, 15))
+>y : Symbol(y, Decl(mod3.js, 2, 26))
+
 /** @typedef {A | B} Both */
+>A : Symbol(A)
+>B : Symbol(B)
 
 exports.C = function() {
->exports.C : Symbol(C, Decl(mod3.js, 0, 0))
->exports : Symbol(C, Decl(mod3.js, 0, 0))
->C : Symbol(C, Decl(mod3.js, 0, 0))
-
     this.p = 1
->this.p : Symbol(C.p, Decl(mod3.js, 5, 24))
->this : Symbol(C, Decl(mod3.js, 5, 11))
->p : Symbol(C.p, Decl(mod3.js, 5, 24))
 }
 
 === use.js ===
