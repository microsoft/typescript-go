--- old.intersectionReductionStrict.types
+++ new.intersectionReductionStrict.types
@@= skipped -20, +20 lines =@@
 
 type T5 = symbol & typeof sym1;  // typeof sym1
 >T5 : unique symbol
->sym1 : unique symbol
 
 type T6 = typeof sym1 & symbol & typeof sym2;  // never
 >T6 : never
->sym1 : unique symbol
->sym2 : unique symbol
 
 type T7 = string & 'a' & number & 10 & symbol & typeof sym1;  // never
 >T7 : never
->sym1 : unique symbol
 
 type T10 = string & ('a' | 'b');  // 'a' | 'b'
 >T10 : T10
@@= skipped -83, +79 lines =@@
 >foo : number
 
 declare let ab: A & B;
->ab : never
+>ab : A & B
 
 ab.kind;  // Error
 >ab.kind : any
->ab : never
+>ab : A & B
 >kind : any
 
 declare let x: A | (B & C);  // A
->x : A
+>x : A | B & C
 
 let a: A = x;
 >a : A
->x : A
+>x : A | B & C
 
 type AB = A & B;  // never
->AB : never
+>AB : AB
 
 type BC = B & C;  // never
->BC : never
+>BC : BC
 
 type U1 = Partial<A & B>;  // never
 >U1 : never
@@= skipped -30, +30 lines =@@
 >U3 : never
 
 type U4 = A & B | B & C;  // never
->U4 : never
+>U4 : U4
 
 type U5 = A | B & C;  // A
->U5 : A
+>U5 : U5
 
 type K1 = keyof (A & B);  // string | number | symbol
 >K1 : string | number | symbol
@@= skipped -13, +13 lines =@@
 
 type Merge1<T, U> = { [P in keyof (T & U)]: P extends keyof T ? T[P] : U[P & keyof U] }
 >Merge1 : Merge1<T, U>
+>T : T
+>U : U
+>P : P
 
 type Merge2<T, U> = { [P in keyof T | keyof U]: P extends keyof T ? T[P] : U[P & keyof U] }
 >Merge2 : Merge2<T, U>
+>T : T
+>U : U
+>P : P
 
 type M1 = { a: 1, b: 2 } & { a: 2, c: 3 };  // never
->M1 : never
+>M1 : M1
 >a : 1
 >b : 2
 >a : 2
@@= skipped -103, +109 lines =@@
 // Repro from #36736
 
 const f1 = (t: "a" | ("b" & "c")): "a" => t;
->f1 : (t: "a" | ("b" & "c")) => "a"
->(t: "a" | ("b" & "c")): "a" => t : (t: "a" | ("b" & "c")) => "a"
+>f1 : (t: "a") => "a"
+>(t: "a" | ("b" & "c")): "a" => t : (t: "a") => "a"
 >t : "a"
 >t : "a"
 
 type Container<Type extends string> = {
 >Container : Container<Type>
+>Type : Type
 
     type: Type;
 >type : Type
 }
 
 const f2 = (t: Container<"a"> | (Container<"b"> & Container<"c">)): Container<"a"> => t;
->f2 : (t: Container<"a"> | (Container<"b"> & Container<"c">)) => Container<"a">
->(t: Container<"a"> | (Container<"b"> & Container<"c">)): Container<"a"> => t : (t: Container<"a"> | (Container<"b"> & Container<"c">)) => Container<"a">
->t : Container<"a">
->t : Container<"a">
+>f2 : (t: Container<"a"> | Container<"b"> & Container<"c">) => Container<"a">
+>(t: Container<"a"> | (Container<"b"> & Container<"c">)): Container<"a"> => t : (t: Container<"a"> | Container<"b"> & Container<"c">) => Container<"a">
+>t : Container<"a"> | Container<"b"> & Container<"c">
+>t : Container<"a"> | Container<"b"> & Container<"c">
 
 const f3 = (t: Container<"a"> | (Container<"b"> & { dataB: boolean } & Container<"a">)): Container<"a"> => t;
->f3 : (t: Container<"a"> | (Container<"b"> & { dataB: boolean; } & Container<"a">)) => Container<"a">
->(t: Container<"a"> | (Container<"b"> & { dataB: boolean } & Container<"a">)): Container<"a"> => t : (t: Container<"a"> | (Container<"b"> & { dataB: boolean; } & Container<"a">)) => Container<"a">
->t : Container<"a">
+>f3 : (t: Container<"a"> | Container<"b"> & { dataB: boolean; } & Container<"a">) => Container<"a">
+>(t: Container<"a"> | (Container<"b"> & { dataB: boolean } & Container<"a">)): Container<"a"> => t : (t: Container<"a"> | Container<"b"> & { dataB: boolean; } & Container<"a">) => Container<"a">
+>t : Container<"a"> | Container<"b"> & { dataB: boolean; } & Container<"a">
 >dataB : boolean
->t : Container<"a">
+>t : Container<"a"> | Container<"b"> & { dataB: boolean; } & Container<"a">
 
 const f4 = (t: number | (Container<"b"> & { dataB: boolean } & Container<"a">)): number => t;
->f4 : (t: number | (Container<"b"> & { dataB: boolean; } & Container<"a">)) => number
->(t: number | (Container<"b"> & { dataB: boolean } & Container<"a">)): number => t : (t: number | (Container<"b"> & { dataB: boolean; } & Container<"a">)) => number
->t : number
+>f4 : (t: number | Container<"b"> & { dataB: boolean; } & Container<"a">) => number
+>(t: number | (Container<"b"> & { dataB: boolean } & Container<"a">)): number => t : (t: number | Container<"b"> & { dataB: boolean; } & Container<"a">) => number
+>t : number | Container<"b"> & { dataB: boolean; } & Container<"a">
 >dataB : boolean
->t : number
+>t : number | Container<"b"> & { dataB: boolean; } & Container<"a">
 
