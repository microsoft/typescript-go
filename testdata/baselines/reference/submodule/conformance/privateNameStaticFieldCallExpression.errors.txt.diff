--- old.privateNameStaticFieldCallExpression.errors.txt
+++ new.privateNameStaticFieldCallExpression.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+error TS2318: Cannot find global type 'Array'.
+error TS2318: Cannot find global type 'Function'.
+error TS2318: Cannot find global type 'IArguments'.
+error TS2318: Cannot find global type 'RegExp'.
+error TS2318: Cannot find global type 'String'.
+error TS2318: Cannot find global type 'TemplateStringsArray'.
+error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+privateNameStaticFieldCallExpression.ts(13,29): error TS2488: Type '{}' must have a '[Symbol.iterator]()' method that returns an iterator.
+
+
+!!! error TS2318: Cannot find global type 'Array'.
+!!! error TS2318: Cannot find global type 'Function'.
+!!! error TS2318: Cannot find global type 'IArguments'.
+!!! error TS2318: Cannot find global type 'RegExp'.
+!!! error TS2318: Cannot find global type 'String'.
+!!! error TS2318: Cannot find global type 'TemplateStringsArray'.
+!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+==== privateNameStaticFieldCallExpression.ts (1 errors) ====
+    class A {
+        static #fieldFunc = function () { this.x = 10; };
+        static #fieldFunc2 = function (a, ...b) {};
+        x = 1;
+        test() {
+            A.#fieldFunc();
+            A.#fieldFunc?.();
+            const func = A.#fieldFunc;
+            func();
+            new A.#fieldFunc();
+    
+            const arr = [ 1, 2 ];
+            A.#fieldFunc2(0, ...arr, 3);
+                                ~~~
+!!! error TS2488: Type '{}' must have a '[Symbol.iterator]()' method that returns an iterator.
+            const b = new A.#fieldFunc2(0, ...arr, 3);
+            const str = A.#fieldFunc2`head${1}middle${2}tail`;
+            this.getClass().#fieldFunc2`test${1}and${2}`;
+        }
+        getClass() { return A; }
+    }
+    
