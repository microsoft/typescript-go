--- old.controlFlowAliasingCatchVariables(useunknownincatchvariables=false).types
+++ new.controlFlowAliasingCatchVariables(useunknownincatchvariables=false).types
@@= skipped -6, +6 lines =@@
 
     const isString = typeof e === 'string';
 >isString : boolean
->         : ^^^^^^^
 >typeof e === 'string' : boolean
->                      : ^^^^^^^
->typeof e : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof e : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >e : any
 >'string' : "string"
->         : ^^^^^^^^
 
     if (isString) {
 >isString : boolean
->         : ^^^^^^^
 
         e.toUpperCase(); // e string
 >e.toUpperCase() : string
->                : ^^^^^^
 >e.toUpperCase : () => string
->              : ^^^^^^      
 >e : string
->  : ^^^^^^
 >toUpperCase : () => string
->            : ^^^^^^      
     }
 
     if (typeof e === 'string') {
 >typeof e === 'string' : boolean
->                      : ^^^^^^^
->typeof e : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof e : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >e : any
 >'string' : "string"
->         : ^^^^^^^^
 
         e.toUpperCase(); // e string
 >e.toUpperCase() : string
->                : ^^^^^^
 >e.toUpperCase : () => string
->              : ^^^^^^      
 >e : string
->  : ^^^^^^
 >toUpperCase : () => string
->            : ^^^^^^      
     }
 }
 
@@= skipped -51, +35 lines =@@
 
     const isString = typeof e === 'string';
 >isString : boolean
->         : ^^^^^^^
 >typeof e === 'string' : boolean
->                      : ^^^^^^^
->typeof e : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof e : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >e : any
 >'string' : "string"
->         : ^^^^^^^^
 
     e = 1;
 >e = 1 : 1
->      : ^
 >e : any
 >1 : 1
->  : ^
 
     if (isString) {
 >isString : boolean
->         : ^^^^^^^
 
         e.toUpperCase(); // e any/unknown
 >e.toUpperCase() : any
 >e.toUpperCase : any
 >e : any
->  : ^^^
 >toUpperCase : any
->            : ^^^
     }
 
     if (typeof e === 'string') {
 >typeof e === 'string' : boolean
->                      : ^^^^^^^
->typeof e : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof e : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >e : any
 >'string' : "string"
->         : ^^^^^^^^
 
         e.toUpperCase(); // e string
 >e.toUpperCase() : string
->                : ^^^^^^
 >e.toUpperCase : () => string
->              : ^^^^^^      
 >e : string
->  : ^^^^^^
 >toUpperCase : () => string
->            : ^^^^^^      
     }
 }
 
