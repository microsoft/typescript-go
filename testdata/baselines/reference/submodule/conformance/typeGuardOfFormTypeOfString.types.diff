--- old.typeGuardOfFormTypeOfString.types
+++ new.typeGuardOfFormTypeOfString.types
@@= skipped -43, +43 lines =@@
 //  - when false, removes the primitive type from the type of x.
 if (typeof strOrNum === "string") {
 >typeof strOrNum === "string" : boolean
->typeof strOrNum : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNum : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNum : string | number
 >"string" : "string"
 
@@= skipped -17, +17 lines =@@
 }
 if (typeof strOrBool === "string") {
 >typeof strOrBool === "string" : boolean
->typeof strOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrBool : string | boolean
 >"string" : "string"
 
@@= skipped -17, +17 lines =@@
 }
 if (typeof strOrNumOrBool === "string") {
 >typeof strOrNumOrBool === "string" : boolean
->typeof strOrNumOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBool : string | number | boolean
 >"string" : "string"
 
@@= skipped -17, +17 lines =@@
 }
 if (typeof strOrC === "string") {
 >typeof strOrC === "string" : boolean
->typeof strOrC : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrC : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrC : string | C
 >"string" : "string"
 
@@= skipped -18, +18 lines =@@
 
 if (typeof numOrBool === "string") {
 >typeof numOrBool === "string" : boolean
->typeof numOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof numOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >numOrBool : number | boolean
 >"string" : "string"
 
@@= skipped -19, +19 lines =@@
 //  - when false, narrows the type of x by typeof x === s when true.
 if (typeof strOrNum !== "string") {
 >typeof strOrNum !== "string" : boolean
->typeof strOrNum : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNum : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNum : string | number
 >"string" : "string"
 
@@= skipped -17, +17 lines =@@
 }
 if (typeof strOrBool !== "string") {
 >typeof strOrBool !== "string" : boolean
->typeof strOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrBool : string | boolean
 >"string" : "string"
 
@@= skipped -17, +17 lines =@@
 }
 if (typeof strOrNumOrBool !== "string") {
 >typeof strOrNumOrBool !== "string" : boolean
->typeof strOrNumOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBool : string | number | boolean
 >"string" : "string"
 
@@= skipped -17, +17 lines =@@
 }
 if (typeof strOrC !== "string") {
 >typeof strOrC !== "string" : boolean
->typeof strOrC : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrC : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrC : string | C
 >"string" : "string"
 
@@= skipped -18, +18 lines =@@
 
 if (typeof numOrBool !== "string") {
 >typeof numOrBool !== "string" : boolean
->typeof numOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof numOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >numOrBool : number | boolean
 >"string" : "string"
 
