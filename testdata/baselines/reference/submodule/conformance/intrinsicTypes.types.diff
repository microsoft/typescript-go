--- old.intrinsicTypes.types
+++ new.intrinsicTypes.types
@@= skipped -4, +4 lines =@@
 >TU1 : "HELLO"
 
 type TU2 = Uppercase<'foo' | 'bar'>;  // "FOO" | "BAR"
->TU2 : "FOO" | "BAR"
+>TU2 : "BAR" | "FOO"
 
 type TU3 = Uppercase<string>;  // Uppercase<string>
 >TU3 : Uppercase<string>
@@= skipped -18, +18 lines =@@
 >TL1 : "hello"
 
 type TL2 = Lowercase<'FOO' | 'BAR'>;  // "foo" | "bar"
->TL2 : "foo" | "bar"
+>TL2 : "bar" | "foo"
 
 type TL3 = Lowercase<string>;  // Lowercase<string>
 >TL3 : Lowercase<string>
@@= skipped -18, +18 lines =@@
 >TC1 : "Hello"
 
 type TC2 = Capitalize<'foo' | 'bar'>;  // "Foo" | "Bar"
->TC2 : "Foo" | "Bar"
+>TC2 : "Bar" | "Foo"
 
 type TC3 = Capitalize<string>;  // Capitalize<string>
 >TC3 : Capitalize<string>
@@= skipped -18, +18 lines =@@
 >TN1 : "hello"
 
 type TN2 = Uncapitalize<'Foo' | 'Bar'>;  // "foo" | "bar"
->TN2 : "foo" | "bar"
+>TN2 : "bar" | "foo"
 
 type TN3 = Uncapitalize<string>;  // Uncapitalize<string>
 >TN3 : Uncapitalize<string>
@@= skipped -16, +16 lines =@@
 
 type TX1<S extends string> = Uppercase<`aB${S}`>;
 >TX1 : `AB${Uppercase<S>}`
+>S : S
 
 type TX2 = TX1<'xYz'>;  // "ABXYZ"
 >TX2 : "ABXYZ"
 
 type TX3<S extends string> = Lowercase<`aB${S}`>;
 >TX3 : `ab${Lowercase<S>}`
+>S : S
 
 type TX4 = TX3<'xYz'>;  // "abxyz"
 >TX4 : "abxyz"
@@= skipped -15, +17 lines =@@
 
 type MyUppercase<S extends string> = intrinsic;  // Error
 >MyUppercase : intrinsic
+>S : S
 
 function foo1<T extends string, U extends T>(s: string, x: Uppercase<T>, y: Uppercase<U>) {
 >foo1 : <T extends string, U extends T>(s: string, x: Uppercase<T>, y: Uppercase<U>) => void
+>T : T
+>U : U
 >s : string
 >x : Uppercase<T>
 >y : Uppercase<U>
@@= skipped -39, +42 lines =@@
 }
 
 function foo2<T extends 'foo' | 'bar'>(x: Uppercase<T>) {
->foo2 : <T extends "foo" | "bar">(x: Uppercase<T>) => void
+>foo2 : <T extends "bar" | "foo">(x: Uppercase<T>) => void
+>T : T
 >x : Uppercase<T>
 
     let s: 'FOO' | 'BAR' = x;
->s : "FOO" | "BAR"
->x : "FOO" | "BAR"
+>s : "BAR" | "FOO"
+>x : "BAR" | "FOO"
 }
 
 declare function foo3<T extends string>(x: Uppercase<T>): T;
 >foo3 : <T extends string>(x: Uppercase<T>) => T
+>T : T
 >x : Uppercase<T>
 
 function foo4<U extends string>(x: Uppercase<U>) {
 >foo4 : <U extends string>(x: Uppercase<U>) => U
+>U : U
 >x : Uppercase<U>
 
     return foo3(x);
