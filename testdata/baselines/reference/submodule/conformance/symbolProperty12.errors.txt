error TS2318: Cannot find global type 'Array'.
error TS2318: Cannot find global type 'Function'.
error TS2318: Cannot find global type 'IArguments'.
error TS2318: Cannot find global type 'RegExp'.
error TS2318: Cannot find global type 'String'.
error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
error TS2552: Cannot find name 'Number'. Did you mean 'number'?
error TS2552: Cannot find name 'Object'. Did you mean 'object'?
symbolProperty12.ts(2,13): error TS1166: A computed property name in a class property declaration must have a simple literal type or a 'unique symbol' type.
symbolProperty12.ts(2,14): error TS2304: Cannot find name 'Symbol'.
symbolProperty12.ts(5,5): error TS1169: A computed property name in an interface must refer to an expression whose type is a literal type or a 'unique symbol' type.
symbolProperty12.ts(5,6): error TS2304: Cannot find name 'Symbol'.


!!! error TS2318: Cannot find global type 'Array'.
!!! error TS2318: Cannot find global type 'Function'.
!!! error TS2318: Cannot find global type 'IArguments'.
!!! error TS2318: Cannot find global type 'RegExp'.
!!! error TS2318: Cannot find global type 'String'.
!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
==== symbolProperty12.ts (4 errors) ====
    class C {
        private [Symbol.iterator]: { x };
                ~~~~~~~~~~~~~~~~~
!!! error TS1166: A computed property name in a class property declaration must have a simple literal type or a 'unique symbol' type.
                 ~~~~~~
!!! error TS2304: Cannot find name 'Symbol'.
    }
    interface I {
        [Symbol.iterator]: { x };
        ~~~~~~~~~~~~~~~~~
!!! error TS1169: A computed property name in an interface must refer to an expression whose type is a literal type or a 'unique symbol' type.
         ~~~~~~
!!! error TS2304: Cannot find name 'Symbol'.
    }
    
    var i: I;
    i = new C;
    var c: C = i;