--- old.tsxAttributeResolution5.types
+++ new.tsxAttributeResolution5.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 declare module JSX {
+>JSX : any
+
 	interface Element { }
+>Element : Element
+
 	interface IntrinsicElements {
+>IntrinsicElements : IntrinsicElements
+
 		test1: Attribs1;
 >test1 : Attribs1
 
@@= skipped -10, +16 lines =@@
 	}
 }
 interface Attribs1 {
+>Attribs1 : Attribs1
+
 	x: string;
 >x : string
 }
 
 interface Attribs2 {
+>Attribs2 : Attribs2
+
 	toString(): string;
 >toString : () => string
 }
 
 function make1<T extends {x: string}> (obj: T) {
->make1 : <T extends { x: string; }>(obj: T) => JSX.Element
+>make1 : <T extends { x: string; }>(obj: T) => any
+>T : T
 >x : string
 >obj : T
 
 	return <test1 {...obj} />; // OK
-><test1 {...obj} /> : JSX.Element
+><test1 {...obj} /> : any
 >test1 : any
 >obj : T
 }
 
 function make2<T extends {x: number}> (obj: T) {
->make2 : <T extends { x: number; }>(obj: T) => JSX.Element
+>make2 : <T extends { x: number; }>(obj: T) => any
+>T : T
 >x : number
 >obj : T
 
 	return <test1 {...obj} />; // Error (x is number, not string)
-><test1 {...obj} /> : JSX.Element
+><test1 {...obj} /> : any
 >test1 : any
 >obj : T
 }
 
 function make3<T extends {y: string}> (obj: T) {
->make3 : <T extends { y: string; }>(obj: T) => JSX.Element
+>make3 : <T extends { y: string; }>(obj: T) => any
+>T : T
 >y : string
 >obj : T
 
 	return <test1 {...obj} />; // Error, missing x
-><test1 {...obj} /> : JSX.Element
+><test1 {...obj} /> : any
 >test1 : any
 >obj : T
 }
 
 
 <test1 {...{}} />; // Error, missing x
-><test1 {...{}} /> : JSX.Element
+><test1 {...{}} /> : any
 >test1 : any
 >{} : {}
 
 <test2 {...{}} />; // Error, missing toString
-><test2 {...{}} /> : JSX.Element
+><test2 {...{}} /> : any
 >test2 : any
 >{} : {}
 
