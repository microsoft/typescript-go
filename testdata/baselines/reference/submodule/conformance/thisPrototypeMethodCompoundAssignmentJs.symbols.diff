--- old.thisPrototypeMethodCompoundAssignmentJs.symbols
+++ new.thisPrototypeMethodCompoundAssignmentJs.symbols
@@ -2,18 +2,18 @@
 
 === index.js ===
 Element.prototype.remove ??= function () {
->Element.prototype.remove : Symbol(ChildNode.remove, Decl(lib.dom.d.ts, --, --))
+>Element.prototype.remove : Symbol(remove, Decl(lib.dom.d.ts, --, --))
 >Element.prototype : Symbol(prototype, Decl(lib.dom.d.ts, --, --))
 >Element : Symbol(Element, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
 >prototype : Symbol(prototype, Decl(lib.dom.d.ts, --, --))
->remove : Symbol(ChildNode.remove, Decl(lib.dom.d.ts, --, --))
+>remove : Symbol(remove, Decl(lib.dom.d.ts, --, --))
 
   this.parentNode?.removeChild(this);
->this.parentNode?.removeChild : Symbol(Node.removeChild, Decl(lib.dom.d.ts, --, --))
->this.parentNode : Symbol(Node.parentNode, Decl(lib.dom.d.ts, --, --))
+>this.parentNode?.removeChild : Symbol(removeChild, Decl(lib.dom.d.ts, --, --))
+>this.parentNode : Symbol(parentNode, Decl(lib.dom.d.ts, --, --))
 >this : Symbol(Element, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
->parentNode : Symbol(Node.parentNode, Decl(lib.dom.d.ts, --, --))
->removeChild : Symbol(Node.removeChild, Decl(lib.dom.d.ts, --, --))
+>parentNode : Symbol(parentNode, Decl(lib.dom.d.ts, --, --))
+>removeChild : Symbol(removeChild, Decl(lib.dom.d.ts, --, --))
 >this : Symbol(Element, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
 
 };
@@ -22,19 +22,19 @@
  * @this Node
  */
 Element.prototype.remove ??= function () {
->Element.prototype.remove : Symbol(ChildNode.remove, Decl(lib.dom.d.ts, --, --))
+>Element.prototype.remove : Symbol(remove, Decl(lib.dom.d.ts, --, --))
 >Element.prototype : Symbol(prototype, Decl(lib.dom.d.ts, --, --))
 >Element : Symbol(Element, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
 >prototype : Symbol(prototype, Decl(lib.dom.d.ts, --, --))
->remove : Symbol(ChildNode.remove, Decl(lib.dom.d.ts, --, --))
+>remove : Symbol(remove, Decl(lib.dom.d.ts, --, --))
 
   this.parentNode?.removeChild(this);
->this.parentNode?.removeChild : Symbol(Node.removeChild, Decl(lib.dom.d.ts, --, --))
->this.parentNode : Symbol(Node.parentNode, Decl(lib.dom.d.ts, --, --))
->this : Symbol(this)
->parentNode : Symbol(Node.parentNode, Decl(lib.dom.d.ts, --, --))
->removeChild : Symbol(Node.removeChild, Decl(lib.dom.d.ts, --, --))
->this : Symbol(this)
+>this.parentNode?.removeChild : Symbol(removeChild, Decl(lib.dom.d.ts, --, --))
+>this.parentNode : Symbol(parentNode, Decl(lib.dom.d.ts, --, --))
+>this : Symbol(Element, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
+>parentNode : Symbol(parentNode, Decl(lib.dom.d.ts, --, --))
+>removeChild : Symbol(removeChild, Decl(lib.dom.d.ts, --, --))
+>this : Symbol(Element, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
 
 };
 
