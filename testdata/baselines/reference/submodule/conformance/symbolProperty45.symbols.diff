--- old.symbolProperty45.symbols
+++ new.symbolProperty45.symbols
@@= skipped -4, +4 lines =@@
 >C : Symbol(C, Decl(symbolProperty45.ts, 0, 0))
 
     get [Symbol.hasInstance]() {
->[Symbol.hasInstance] : Symbol(C[Symbol.hasInstance], Decl(symbolProperty45.ts, 0, 9))
->Symbol.hasInstance : Symbol(SymbolConstructor.hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->hasInstance : Symbol(SymbolConstructor.hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>[Symbol.hasInstance] : Symbol([Symbol.hasInstance], Decl(symbolProperty45.ts, 0, 9))
 
         return "";
     }
     get [Symbol.toPrimitive]() {
->[Symbol.toPrimitive] : Symbol(C[Symbol.toPrimitive], Decl(symbolProperty45.ts, 3, 5))
->Symbol.toPrimitive : Symbol(SymbolConstructor.toPrimitive, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->toPrimitive : Symbol(SymbolConstructor.toPrimitive, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>[Symbol.toPrimitive] : Symbol([Symbol.toPrimitive], Decl(symbolProperty45.ts, 3, 5))
 
         return "";
     }
