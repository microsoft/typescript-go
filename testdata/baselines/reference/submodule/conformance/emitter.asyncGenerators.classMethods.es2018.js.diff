--- old.emitter.asyncGenerators.classMethods.es2018.js
+++ new.emitter.asyncGenerators.classMethods.es2018.js
@@= skipped -59, +59 lines =@@
 }
 
 
-//// [C1.js]
-class C1 {
+//// [C9.js]
+class B9 {
+    g() { }
+}
+class C9 extends B9 {
     async *f() {
+        super.g();
     }
 }
-//// [C2.js]
-class C2 {
+//// [C8.js]
+class C8 {
+    g() {
+    }
     async *f() {
-        const x = yield;
+        this.g();
     }
 }
-//// [C3.js]
-class C3 {
+//// [C7.js]
+class C7 {
     async *f() {
-        const x = yield 1;
+        return 1;
     }
 }
-//// [C4.js]
-class C4 {
+//// [C6.js]
+class C6 {
     async *f() {
-        const x = yield* [1];
+        const x = await 1;
     }
 }
 //// [C5.js]
@@= skipped -29, +35 lines =@@
         const x = yield* (async function* () { yield 1; })();
     }
 }
-//// [C6.js]
-class C6 {
+//// [C4.js]
+class C4 {
     async *f() {
-        const x = await 1;
+        const x = yield* [1];
     }
 }
-//// [C7.js]
-class C7 {
+//// [C3.js]
+class C3 {
     async *f() {
-        return 1;
+        const x = yield 1;
     }
 }
-//// [C8.js]
-class C8 {
-    g() {
-    }
+//// [C2.js]
+class C2 {
     async *f() {
-        this.g();
+        const x = yield;
     }
 }
-//// [C9.js]
-class B9 {
-    g() { }
-}
-class C9 extends B9 {
+//// [C1.js]
+class C1 {
     async *f() {
-        super.g();
     }
 }
