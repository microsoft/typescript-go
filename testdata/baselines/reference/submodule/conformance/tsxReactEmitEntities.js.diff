--- old.tsxReactEmitEntities.js
+++ new.tsxReactEmitEntities.js
@@= skipped -24, +24 lines =@@
 <div>&#x1F408;&#x1F415;&#128007;&#128017;</div>;

 //// [file.js]
-React.createElement("div", null, "Dot goes here: \u00B7 &notAnEntity; ");
-React.createElement("div", null, "Be careful of \"-ed strings!");
-React.createElement("div", null, "{{braces}}");
+React.createElement("div", null, "Dot goes here: &middot; &notAnEntity; ");
+React.createElement("div", null, "Be careful of &quot;-ed strings!");
+React.createElement("div", null, "{{braces&#x7d;&#x7D;");
 // Escapes do nothing
 React.createElement("div", null, "\\n");
 // Also works in string literal attributes
-React.createElement("div", { attr: "{\u2026}\\" });
+React.createElement("div", { attr: "{&hellip;&#x7D;\\" });
 // Does not happen for a string literal that happens to be inside an attribute (and escapes then work)
 React.createElement("div", { attr: "&#0123;&hellip;&#x7D;\"" });
 // Preserves single quotes
-React.createElement("div", { attr: '"' });
+React.createElement("div", { attr: "\"" });
 // https://github.com/microsoft/TypeScript/issues/35732
-React.createElement("div", null, "\uD83D\uDC08\uD83D\uDC15\uD83D\uDC07\uD83D\uDC11");
+React.createElement("div", null, "&#x1F408;&#x1F415;\uD83D\uDC07\uD83D\uDC11");