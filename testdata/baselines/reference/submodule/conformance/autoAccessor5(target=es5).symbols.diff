--- old.autoAccessor5(target=es5).symbols
+++ new.autoAccessor5(target=es5).symbols
@@= skipped -4, +4 lines =@@
 >C1 : Symbol(C1, Decl(autoAccessor5.ts, 0, 0))
 
     accessor ["w"]: any;
->["w"] : Symbol(C1["w"], Decl(autoAccessor5.ts, 0, 10))
->"w" : Symbol(C1["w"], Decl(autoAccessor5.ts, 0, 10))
+>["w"] : Symbol(w, Decl(autoAccessor5.ts, 0, 10))
+>"w" : Symbol(w, Decl(autoAccessor5.ts, 0, 10))
 
     accessor ["x"] = 1;
->["x"] : Symbol(C1["x"], Decl(autoAccessor5.ts, 1, 24))
->"x" : Symbol(C1["x"], Decl(autoAccessor5.ts, 1, 24))
+>["x"] : Symbol(x, Decl(autoAccessor5.ts, 1, 24))
+>"x" : Symbol(x, Decl(autoAccessor5.ts, 1, 24))
 
     static accessor ["y"]: any;
->["y"] : Symbol(C1["y"], Decl(autoAccessor5.ts, 2, 23))
->"y" : Symbol(C1["y"], Decl(autoAccessor5.ts, 2, 23))
+>["y"] : Symbol(y, Decl(autoAccessor5.ts, 2, 23))
+>"y" : Symbol(y, Decl(autoAccessor5.ts, 2, 23))
 
     static accessor ["z"] = 2;
->["z"] : Symbol(C1["z"], Decl(autoAccessor5.ts, 3, 31))
->"z" : Symbol(C1["z"], Decl(autoAccessor5.ts, 3, 31))
+>["z"] : Symbol(z, Decl(autoAccessor5.ts, 3, 31))
+>"z" : Symbol(z, Decl(autoAccessor5.ts, 3, 31))
 }
 
 declare var f: any;
@@= skipped -23, +23 lines =@@
 >C2 : Symbol(C2, Decl(autoAccessor5.ts, 7, 19))
 
     accessor [f()] = 1;
->[f()] : Symbol(C2[f()], Decl(autoAccessor5.ts, 8, 10))
+>[f()] : Symbol([f()], Decl(autoAccessor5.ts, 8, 10))
 >f : Symbol(f, Decl(autoAccessor5.ts, 7, 11))
 }
