--- old.jsdocCatchClauseWithTypeAnnotation.symbols
+++ new.jsdocCatchClauseWithTypeAnnotation.symbols
@@= skipped -2, +2 lines =@@
 === foo.js ===
 /**
  * @typedef {any} Any
+>Any : Symbol(Any, Decl(foo.js, 1, 3))
+
  */
 
 /**
  * @typedef {unknown} Unknown
+>Unknown : Symbol(Unknown, Decl(foo.js, 5, 3))
+
  */
 
 function fn() {
@@= skipped -17, +21 lines =@@
 
     try { } catch (/** @type {Any} */ err) { }                       // should be OK
 >err : Symbol(err, Decl(foo.js, 11, 19))
+>Any : Symbol(Any, Decl(foo.js, 1, 3))
 
     try { } catch (/** @type {unknown} */ err) { }                   // should be OK
 >err : Symbol(err, Decl(foo.js, 12, 19))
 
     try { } catch (/** @type {Unknown} */ err) { }                   // should be OK
 >err : Symbol(err, Decl(foo.js, 13, 19))
+>Unknown : Symbol(Unknown, Decl(foo.js, 5, 3))
 
     try { } catch (err) { err.foo; }                                 // should be OK
 >err : Symbol(err, Decl(foo.js, 14, 19))
@@= skipped -17, +19 lines =@@
 
     try { } catch (/** @type {Any} */ err) { err.foo; }              // should be OK
 >err : Symbol(err, Decl(foo.js, 16, 19))
+>Any : Symbol(Any, Decl(foo.js, 1, 3))
 >err : Symbol(err, Decl(foo.js, 16, 19))
 
     try { } catch (/** @type {unknown} */ err) { console.log(err); } // should be OK
 >err : Symbol(err, Decl(foo.js, 17, 19))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >err : Symbol(err, Decl(foo.js, 17, 19))
 
     try { } catch (/** @type {Unknown} */ err) { console.log(err); } // should be OK
 >err : Symbol(err, Decl(foo.js, 18, 19))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>Unknown : Symbol(Unknown, Decl(foo.js, 5, 3))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >err : Symbol(err, Decl(foo.js, 18, 19))
 
     try { } catch (/** @type {unknown} */ err) { err.foo; }          // error in the body
@@= skipped -22, +24 lines =@@
 
     try { } catch (/** @type {Unknown} */ err) { err.foo; }          // error in the body
 >err : Symbol(err, Decl(foo.js, 20, 19))
+>Unknown : Symbol(Unknown, Decl(foo.js, 5, 3))
 >err : Symbol(err, Decl(foo.js, 20, 19))
 
     try { } catch (/** @type {Error} */ err) { }                     // error in the type
 >err : Symbol(err, Decl(foo.js, 21, 19))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2022.error.d.ts, --, --))
 
     try { } catch (/** @type {object} */ err) { }                    // error in the type
 >err : Symbol(err, Decl(foo.js, 22, 19))
 
     try { console.log(); }
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 
     // @ts-ignore
     catch (/** @type {number} */ err) { // e should not be a `number`
 >err : Symbol(err, Decl(foo.js, 26, 11))
 
         console.log(err.toLowerCase());
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >err : Symbol(err, Decl(foo.js, 26, 11))
     }
 
@@= skipped -51, +53 lines =@@
 
     try { } catch (/** @type {Any} */ { x }) { x.foo;}               // should be OK
 >x : Symbol(x, Decl(foo.js, 44, 39))
+>Any : Symbol(Any, Decl(foo.js, 1, 3))
 >x : Symbol(x, Decl(foo.js, 44, 39))
 
     try { } catch (/** @type {unknown} */ { x }) { console.log(x); } // error in the destructure
 >x : Symbol(x, Decl(foo.js, 45, 43))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >x : Symbol(x, Decl(foo.js, 45, 43))
 
     try { } catch (/** @type {Unknown} */ { x }) { console.log(x); } // error in the destructure
 >x : Symbol(x, Decl(foo.js, 46, 43))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>Unknown : Symbol(Unknown, Decl(foo.js, 5, 3))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >x : Symbol(x, Decl(foo.js, 46, 43))
 
     try { } catch (/** @type {Error} */ { x }) { }                   // error in the type
 >x : Symbol(x, Decl(foo.js, 47, 41))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2022.error.d.ts, --, --))
 
     try { } catch (/** @type {object} */ { x }) { }                  // error in the type
 >x : Symbol(x, Decl(foo.js, 48, 42))
