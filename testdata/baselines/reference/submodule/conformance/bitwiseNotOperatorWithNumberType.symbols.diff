--- old.bitwiseNotOperatorWithNumberType.symbols
+++ new.bitwiseNotOperatorWithNumberType.symbols
@@= skipped -14, +14 lines =@@
 >A : Symbol(A, Decl(bitwiseNotOperatorWithNumberType.ts, 4, 36))
 
     public a: number;
->a : Symbol(A.a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
+>a : Symbol(a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
 
     static foo() { return 1; }
->foo : Symbol(A.foo, Decl(bitwiseNotOperatorWithNumberType.ts, 7, 21))
+>foo : Symbol(foo, Decl(bitwiseNotOperatorWithNumberType.ts, 7, 21))
 }
 module M {
 >M : Symbol(M, Decl(bitwiseNotOperatorWithNumberType.ts, 9, 1))
@@= skipped -44, +44 lines =@@
 // number type expressions
 var ResultIsNumber6 = ~objA.a;
 >ResultIsNumber6 : Symbol(ResultIsNumber6, Decl(bitwiseNotOperatorWithNumberType.ts, 26, 3))
->objA.a : Symbol(A.a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
+>objA.a : Symbol(a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
 >objA : Symbol(objA, Decl(bitwiseNotOperatorWithNumberType.ts, 14, 3))
->a : Symbol(A.a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
+>a : Symbol(a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
 
 var ResultIsNumber7 = ~M.n;
 >ResultIsNumber7 : Symbol(ResultIsNumber7, Decl(bitwiseNotOperatorWithNumberType.ts, 27, 3))
->M.n : Symbol(M.n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
+>M.n : Symbol(n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
 >M : Symbol(M, Decl(bitwiseNotOperatorWithNumberType.ts, 9, 1))
->n : Symbol(M.n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
+>n : Symbol(n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
 
 var ResultIsNumber8 = ~NUMBER1[0];
 >ResultIsNumber8 : Symbol(ResultIsNumber8, Decl(bitwiseNotOperatorWithNumberType.ts, 28, 3))
@@= skipped -20, +20 lines =@@
 
 var ResultIsNumber10 = ~A.foo();
 >ResultIsNumber10 : Symbol(ResultIsNumber10, Decl(bitwiseNotOperatorWithNumberType.ts, 30, 3))
->A.foo : Symbol(A.foo, Decl(bitwiseNotOperatorWithNumberType.ts, 7, 21))
+>A.foo : Symbol(foo, Decl(bitwiseNotOperatorWithNumberType.ts, 7, 21))
 >A : Symbol(A, Decl(bitwiseNotOperatorWithNumberType.ts, 4, 36))
->foo : Symbol(A.foo, Decl(bitwiseNotOperatorWithNumberType.ts, 7, 21))
+>foo : Symbol(foo, Decl(bitwiseNotOperatorWithNumberType.ts, 7, 21))
 
 var ResultIsNumber11 = ~(NUMBER + NUMBER);
 >ResultIsNumber11 : Symbol(ResultIsNumber11, Decl(bitwiseNotOperatorWithNumberType.ts, 31, 3))
@@= skipped -30, +30 lines =@@
 >foo : Symbol(foo, Decl(bitwiseNotOperatorWithNumberType.ts, 2, 31))
 
 ~objA.a;
->objA.a : Symbol(A.a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
+>objA.a : Symbol(a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
 >objA : Symbol(objA, Decl(bitwiseNotOperatorWithNumberType.ts, 14, 3))
->a : Symbol(A.a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
+>a : Symbol(a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
 
 ~M.n;
->M.n : Symbol(M.n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
+>M.n : Symbol(n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
 >M : Symbol(M, Decl(bitwiseNotOperatorWithNumberType.ts, 9, 1))
->n : Symbol(M.n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
+>n : Symbol(n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
 
 ~objA.a, M.n;
->objA.a : Symbol(A.a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
+>objA.a : Symbol(a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
 >objA : Symbol(objA, Decl(bitwiseNotOperatorWithNumberType.ts, 14, 3))
->a : Symbol(A.a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
->M.n : Symbol(M.n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
+>a : Symbol(a, Decl(bitwiseNotOperatorWithNumberType.ts, 6, 9))
+>M.n : Symbol(n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
 >M : Symbol(M, Decl(bitwiseNotOperatorWithNumberType.ts, 9, 1))
->n : Symbol(M.n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
+>n : Symbol(n, Decl(bitwiseNotOperatorWithNumberType.ts, 11, 14))
 
