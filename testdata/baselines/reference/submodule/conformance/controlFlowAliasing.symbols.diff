--- old.controlFlowAliasing.symbols
+++ new.controlFlowAliasing.symbols
@@ -169,7 +169,7 @@
     const isString = typeof obj[0] === 'string';
 >isString : Symbol(isString, Decl(controlFlowAliasing.ts, 63, 9))
 >obj : Symbol(obj, Decl(controlFlowAliasing.ts, 62, 13))
->0 : Symbol(0)
+>0 : Symbol("0")
 
     if (isString) {
 >isString : Symbol(isString, Decl(controlFlowAliasing.ts, 63, 9))
@@ -177,7 +177,7 @@
         let s: string = obj[0];
 >s : Symbol(s, Decl(controlFlowAliasing.ts, 65, 11))
 >obj : Symbol(obj, Decl(controlFlowAliasing.ts, 62, 13))
->0 : Symbol(0)
+>0 : Symbol("0")
     }
 }
 
@@ -188,7 +188,7 @@
     const isString = typeof obj[0] === 'string';
 >isString : Symbol(isString, Decl(controlFlowAliasing.ts, 70, 9))
 >obj : Symbol(obj, Decl(controlFlowAliasing.ts, 69, 13))
->0 : Symbol(0)
+>0 : Symbol("0")
 
     obj = [42];
 >obj : Symbol(obj, Decl(controlFlowAliasing.ts, 69, 13))
@@ -199,7 +199,7 @@
         let s: string = obj[0];  // Not narrowed because of is assigned in function body
 >s : Symbol(s, Decl(controlFlowAliasing.ts, 73, 11))
 >obj : Symbol(obj, Decl(controlFlowAliasing.ts, 69, 13))
->0 : Symbol(0)
+>0 : Symbol("0")
     }
 }
 
@@ -614,13 +614,13 @@
 >C10 : Symbol(C10, Decl(controlFlowAliasing.ts, 209, 1))
 
     constructor(readonly x: string | number) {
->x : Symbol(C10.x, Decl(controlFlowAliasing.ts, 213, 16))
+>x : Symbol(x, Decl(controlFlowAliasing.ts, 213, 16))
 
         const thisX_isString = typeof this.x === 'string';
 >thisX_isString : Symbol(thisX_isString, Decl(controlFlowAliasing.ts, 214, 13))
->this.x : Symbol(C10.x, Decl(controlFlowAliasing.ts, 213, 16))
+>this.x : Symbol(x, Decl(controlFlowAliasing.ts, 213, 16))
 >this : Symbol(C10, Decl(controlFlowAliasing.ts, 209, 1))
->x : Symbol(C10.x, Decl(controlFlowAliasing.ts, 213, 16))
+>x : Symbol(x, Decl(controlFlowAliasing.ts, 213, 16))
 
         const xIsString = typeof x === 'string';
 >xIsString : Symbol(xIsString, Decl(controlFlowAliasing.ts, 215, 13))
@@ -635,9 +635,9 @@
 
             s = this.x;
 >s : Symbol(s, Decl(controlFlowAliasing.ts, 217, 15))
->this.x : Symbol(C10.x, Decl(controlFlowAliasing.ts, 213, 16))
+>this.x : Symbol(x, Decl(controlFlowAliasing.ts, 213, 16))
 >this : Symbol(C10, Decl(controlFlowAliasing.ts, 209, 1))
->x : Symbol(C10.x, Decl(controlFlowAliasing.ts, 213, 16))
+>x : Symbol(x, Decl(controlFlowAliasing.ts, 213, 16))
 
             s = x;
 >s : Symbol(s, Decl(controlFlowAliasing.ts, 217, 15))
@@ -650,13 +650,13 @@
 >C11 : Symbol(C11, Decl(controlFlowAliasing.ts, 222, 1))
 
     constructor(readonly x: string | number) {
->x : Symbol(C11.x, Decl(controlFlowAliasing.ts, 225, 16))
+>x : Symbol(x, Decl(controlFlowAliasing.ts, 225, 16))
 
         const thisX_isString = typeof this.x === 'string';
 >thisX_isString : Symbol(thisX_isString, Decl(controlFlowAliasing.ts, 226, 13))
->this.x : Symbol(C11.x, Decl(controlFlowAliasing.ts, 225, 16))
+>this.x : Symbol(x, Decl(controlFlowAliasing.ts, 225, 16))
 >this : Symbol(C11, Decl(controlFlowAliasing.ts, 222, 1))
->x : Symbol(C11.x, Decl(controlFlowAliasing.ts, 225, 16))
+>x : Symbol(x, Decl(controlFlowAliasing.ts, 225, 16))
 
         const xIsString = typeof x === 'string';
 >xIsString : Symbol(xIsString, Decl(controlFlowAliasing.ts, 227, 13))
@@ -672,9 +672,9 @@
 
             s = this.x;
 >s : Symbol(s, Decl(controlFlowAliasing.ts, 230, 15))
->this.x : Symbol(C11.x, Decl(controlFlowAliasing.ts, 225, 16))
+>this.x : Symbol(x, Decl(controlFlowAliasing.ts, 225, 16))
 >this : Symbol(C11, Decl(controlFlowAliasing.ts, 222, 1))
->x : Symbol(C11.x, Decl(controlFlowAliasing.ts, 225, 16))
+>x : Symbol(x, Decl(controlFlowAliasing.ts, 225, 16))
 
             s = x;
 >s : Symbol(s, Decl(controlFlowAliasing.ts, 230, 15))
@@ -682,9 +682,9 @@
         }
         else {
             this.x = 10;
->this.x : Symbol(C11.x, Decl(controlFlowAliasing.ts, 225, 16))
+>this.x : Symbol(x, Decl(controlFlowAliasing.ts, 225, 16))
 >this : Symbol(C11, Decl(controlFlowAliasing.ts, 222, 1))
->x : Symbol(C11.x, Decl(controlFlowAliasing.ts, 225, 16))
+>x : Symbol(x, Decl(controlFlowAliasing.ts, 225, 16))
 
             x = 10;
 >x : Symbol(x, Decl(controlFlowAliasing.ts, 225, 16))
@@ -802,7 +802,7 @@
 >Utils : Symbol(Utils, Decl(controlFlowAliasing.ts, 281, 19))
 
   static isDefined<T>(value: T): value is NonNullable<T> {
->isDefined : Symbol(Utils.isDefined, Decl(controlFlowAliasing.ts, 284, 13))
+>isDefined : Symbol(isDefined, Decl(controlFlowAliasing.ts, 284, 13))
 >T : Symbol(T, Decl(controlFlowAliasing.ts, 285, 19))
 >value : Symbol(value, Decl(controlFlowAliasing.ts, 285, 22))
 >T : Symbol(T, Decl(controlFlowAliasing.ts, 285, 19))
@@ -819,28 +819,28 @@
 >A53267 : Symbol(A53267, Decl(controlFlowAliasing.ts, 288, 1))
 
   public readonly testNumber: number | undefined;
->testNumber : Symbol(A53267.testNumber, Decl(controlFlowAliasing.ts, 290, 14))
+>testNumber : Symbol(testNumber, Decl(controlFlowAliasing.ts, 290, 14))
 
   foo() {
->foo : Symbol(A53267.foo, Decl(controlFlowAliasing.ts, 291, 49))
+>foo : Symbol(foo, Decl(controlFlowAliasing.ts, 291, 49))
 
     const isNumber = Utils.isDefined(this.testNumber);
 >isNumber : Symbol(isNumber, Decl(controlFlowAliasing.ts, 294, 9))
->Utils.isDefined : Symbol(Utils.isDefined, Decl(controlFlowAliasing.ts, 284, 13))
+>Utils.isDefined : Symbol(isDefined, Decl(controlFlowAliasing.ts, 284, 13))
 >Utils : Symbol(Utils, Decl(controlFlowAliasing.ts, 281, 19))
->isDefined : Symbol(Utils.isDefined, Decl(controlFlowAliasing.ts, 284, 13))
->this.testNumber : Symbol(A53267.testNumber, Decl(controlFlowAliasing.ts, 290, 14))
+>isDefined : Symbol(isDefined, Decl(controlFlowAliasing.ts, 284, 13))
+>this.testNumber : Symbol(testNumber, Decl(controlFlowAliasing.ts, 290, 14))
 >this : Symbol(A53267, Decl(controlFlowAliasing.ts, 288, 1))
->testNumber : Symbol(A53267.testNumber, Decl(controlFlowAliasing.ts, 290, 14))
+>testNumber : Symbol(testNumber, Decl(controlFlowAliasing.ts, 290, 14))
 
     if (isNumber) {
 >isNumber : Symbol(isNumber, Decl(controlFlowAliasing.ts, 294, 9))
 
       const x: number = this.testNumber;
 >x : Symbol(x, Decl(controlFlowAliasing.ts, 297, 11))
->this.testNumber : Symbol(A53267.testNumber, Decl(controlFlowAliasing.ts, 290, 14))
+>this.testNumber : Symbol(testNumber, Decl(controlFlowAliasing.ts, 290, 14))
 >this : Symbol(A53267, Decl(controlFlowAliasing.ts, 288, 1))
->testNumber : Symbol(A53267.testNumber, Decl(controlFlowAliasing.ts, 290, 14))
+>testNumber : Symbol(testNumber, Decl(controlFlowAliasing.ts, 290, 14))
     }
   }
 }
