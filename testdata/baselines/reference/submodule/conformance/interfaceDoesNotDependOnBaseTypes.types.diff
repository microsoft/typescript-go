--- old.interfaceDoesNotDependOnBaseTypes.types
+++ new.interfaceDoesNotDependOnBaseTypes.types
@@= skipped -2, +2 lines =@@
 === interfaceDoesNotDependOnBaseTypes.ts ===
 var x: StringTree;
 >x : StringTree
->  : ^^^^^^^^^^
 
 if (typeof x !== "string") {
 >typeof x !== "string" : boolean
->                      : ^^^^^^^
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : StringTree
->  : ^^^^^^^^^^
 >"string" : "string"
->         : ^^^^^^^^
 
     x.push("");
 >x.push("") : number
->           : ^^^^^^
 >x.push : (...items: StringTree[]) => number
->       : ^^^^     ^^^^^^^^^^^^^^^^^^^      
 >x : StringTreeArray
->  : ^^^^^^^^^^^^^^^
 >push : (...items: StringTree[]) => number
->     : ^^^^     ^^^^^^^^^^^^^^^^^^^      
 >"" : ""
->   : ^^
 
     x.push([""]);
 >x.push([""]) : number
->             : ^^^^^^
 >x.push : (...items: StringTree[]) => number
->       : ^^^^     ^^^^^^^^^^^^^^^^^^^      
 >x : StringTreeArray
->  : ^^^^^^^^^^^^^^^
 >push : (...items: StringTree[]) => number
->     : ^^^^     ^^^^^^^^^^^^^^^^^^^      
 >[""] : string[]
->     : ^^^^^^^^
 >"" : ""
->   : ^^
 }
 
 type StringTree = string | StringTreeArray;
 >StringTree : StringTree
->           : ^^^^^^^^^^
 
 interface StringTreeArray extends Array<StringTree> { }
+>StringTreeArray : StringTreeArray
+
