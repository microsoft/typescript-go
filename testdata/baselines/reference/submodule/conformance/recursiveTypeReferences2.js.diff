--- old.recursiveTypeReferences2.js
+++ new.recursiveTypeReferences2.js
@@= skipped -28, +28 lines =@@


 //// [bug39372.js]
+"use strict";
 /** @typedef {ReadonlyArray<Json>} JsonArray */
 /** @typedef {{ readonly [key: string]: Json }} JsonRecord */
 /** @typedef {boolean | number | string | null | JsonRecord | JsonArray | readonly []} Json */
+Object.defineProperty(exports, "__esModule", { value: true });
 /**
  * @template T
  * @typedef {{
@@= skipped -29, +31 lines =@@
 /** @typedef {ReadonlyArray<Json>} JsonArray */
 /** @typedef {{ readonly [key: string]: Json }} JsonRecord */
 /** @typedef {boolean | number | string | null | JsonRecord | JsonArray | readonly []} Json */
-/**
- * @template T
- * @typedef {{
-  $A: {
-    [K in keyof T]?: XMLObject<T[K]>[]
-  },
-  $O: {
-    [K in keyof T]?: {
-      $$?: Record<string, string>
-    } & (T[K] extends string ? {$:string} : XMLObject<T[K]>)
-  },
-  $$?: Record<string, string>,
-  } & {
-  [K in keyof T]?: (
-    T[K] extends string ? string
-      : XMLObject<T[K]>
-  )
-}} XMLObject<T> */
-/** @type {XMLObject<{foo:string}>} */
-declare const p: XMLObject<{
-    foo: string;
-}>;
-type JsonArray = ReadonlyArray<Json>;
-type JsonRecord = {
+export type JsonArray = ReadonlyArray<Json>;
+export type JsonRecord = {
     readonly [key: string]: Json;
 };
-type Json = boolean | number | string | null | JsonRecord | JsonArray | readonly [];
-/**
- * <T>
- */
-type XMLObject<T> = {
-    $A: { [K in keyof T]?: XMLObject<T[K]>[]; };
-    $O: { [K in keyof T]?: {
-        $$?: Record<string, string>;
-    } & (T[K] extends string ? {
-        $: string;
-    } : XMLObject<T[K]>); };
+export type Json = boolean | number | string | null | JsonRecord | JsonArray | readonly [];
+export type XMLObject<T> = {
+    $A: {
+        [K in keyof T]?: XMLObject<T[K]>[];
+    };
+    $O: {
+        [K in keyof T]?: {
+            $$?: Record<string, string>;
+        } & (T[K] extends string ? {
+            $: string;
+        } : XMLObject<T[K]>);
+    };
     $$?: Record<string, string>;
-} & { [K in keyof T]?: (T[K] extends string ? string : XMLObject<T[K]>); };
+} & {
+    [K in keyof T]?: (T[K] extends string ? string : XMLObject<T[K]>);
+};