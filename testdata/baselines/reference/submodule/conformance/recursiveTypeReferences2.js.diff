--- old.recursiveTypeReferences2.js
+++ new.recursiveTypeReferences2.js
@@= skipped -57, +57 lines =@@
 /** @typedef {ReadonlyArray<Json>} JsonArray */
 /** @typedef {{ readonly [key: string]: Json }} JsonRecord */
 /** @typedef {boolean | number | string | null | JsonRecord | JsonArray | readonly []} Json */
+type JsonArray = ReadonlyArray<Json>;
+type JsonRecord = {
+    readonly [key: string]: Json;
+};
+type Json = boolean | number | string | null | JsonRecord | JsonArray | readonly [];
+type XMLObject<T> = {
+    $A: {
+        [K in keyof T]?: XMLObject<T[K]>[];
+    };
+    $O: {
+        [K in keyof T]?: {
+            $$?: Record<string, string>;
+        } & (T[K] extends string ? {
+            $: string;
+        } : XMLObject<T[K]>);
+    };
+    $$?: Record<string, string>;
+} & {
+    [K in keyof T]?: (T[K] extends string ? string : XMLObject<T[K]>);
+};
 /**
  * @template T
  * @typedef {{
@@= skipped -22, +42 lines =@@
 declare const p: XMLObject<{
     foo: string;
 }>;
-type JsonArray = ReadonlyArray<Json>;
-type JsonRecord = {
-    readonly [key: string]: Json;
-};
-type Json = boolean | number | string | null | JsonRecord | JsonArray | readonly [];
-/**
- * <T>
- */
-type XMLObject<T> = {
-    $A: { [K in keyof T]?: XMLObject<T[K]>[]; };
-    $O: { [K in keyof T]?: {
-        $$?: Record<string, string>;
-    } & (T[K] extends string ? {
-        $: string;
-    } : XMLObject<T[K]>); };
-    $$?: Record<string, string>;
-} & { [K in keyof T]?: (T[K] extends string ? string : XMLObject<T[K]>); };