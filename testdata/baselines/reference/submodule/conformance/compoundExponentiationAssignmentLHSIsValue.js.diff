--- old.compoundExponentiationAssignmentLHSIsValue.js
+++ new.compoundExponentiationAssignmentLHSIsValue.js
@@= skipped -92, +92 lines =@@
 // this
 class C {
     constructor() {
-        this = Math.pow(this, value);
+        this **= value;
     }
     foo() {
-        this = Math.pow(this, value);
+        this **= value;
     }
     static sfoo() {
-        this = Math.pow(this, value);
+        this **= value;
     }
 }
 function foo() {
-    this = Math.pow(this, value);
+    this **= value;
 }
-this = Math.pow(this, value);
+this **= value;
 // identifiers: module, class, enum, function
 var M;
 (function (M) {
 })(M || (M = {}));
-M = Math.pow(M, value);
-C = Math.pow(C, value);
+M **= value;
+C **= value;
 var E;
 (function (E) {
 })(E || (E = {}));
-E = Math.pow(E, value);
-foo = Math.pow(foo, value);
+E **= value;
+foo **= value;
 // literals
-null = Math.pow(null, value);
-true = Math.pow(true, value);
-false = Math.pow(false, value);
-0 = Math.pow(0, value);
-'' = Math.pow('', value);
-/d+/ = Math.pow(/d+/, value);
+null **= value;
+true **= value;
+false **= value;
+0 **= value;
+'' **= value;
+/d+/ **= value;
 // object literals
 {
     a: 0;
 }
 value;
 // array literals
-['', ''] = Math.pow(['', ''], value);
+['', ''] **= value;
 // super
 class Derived extends C {
     constructor() {
-        var _a;
         super();
-        (_a = super). = Math.pow(_a., value);
+        super. **= value;
     }
     foo() {
-        var _a;
-        (_a = super). = Math.pow(_a., value);
+        super. **= value;
     }
     static sfoo() {
-        var _a;
-        (_a = super). = Math.pow(_a., value);
+        super. **= value;
     }
 }
 // function expression
@@= skipped -60, +57 lines =@@
 () => { };
 value;
 // function calls
-foo() = Math.pow(foo(), value);
+foo() **= value;
 // parentheses, the containted expression is value
-(this) = Math.pow((this), value);
-(M) = Math.pow((M), value);
-(C) = Math.pow((C), value);
-(E) = Math.pow((E), value);
-(foo) = Math.pow((foo), value);
-(null) = Math.pow((null), value);
-(true) = Math.pow((true), value);
-(0) = Math.pow((0), value);
-('') = Math.pow((''), value);
-(/d+/) = Math.pow((/d+/), value);
-({}) = Math.pow(({}), value);
-([]) = Math.pow(([]), value);
-(function baz1() { }) = Math.pow((function baz1() { }), value);
-(foo()) = Math.pow((foo()), value);
+(this) **= value;
+(M) **= value;
+(C) **= value;
+(E) **= value;
+(foo) **= value;
+(null) **= value;
+(true) **= value;
+(0) **= value;
+('') **= value;
+(/d+/) **= value;
+({}) **= value;
+([]) **= value;
+(function baz1() { }) **= value;
+(foo()) **= value;