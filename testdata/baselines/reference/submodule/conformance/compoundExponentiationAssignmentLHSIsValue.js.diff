--- old.compoundExponentiationAssignmentLHSIsValue.js
+++ new.compoundExponentiationAssignmentLHSIsValue.js
@@= skipped -87, +87 lines =@@
 (foo()) **= value;

 //// [compoundExponentiationAssignmentLHSIsValue.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var _a;
 // expected error for all the LHS of compound assignments (arithmetic and addition)
 var value;
 // this
-var C = /** @class */ (function () {
-    function C() {
-        this = Math.pow(this, value);
-    }
-    C.prototype.foo = function () {
-        this = Math.pow(this, value);
-    };
-    C.sfoo = function () {
-        this = Math.pow(this, value);
-    };
-    return C;
-}());
+class C {
+    constructor() {
+        this = Math.pow(this, value);
+    }
+    foo() {
+        this = Math.pow(this, value);
+    }
+    static sfoo() {
+        this = Math.pow(this, value);
+    }
+}
 function foo() {
     this = Math.pow(this, value);
 }
@@= skipped -59, +42 lines =@@
 }
 value;
 // array literals
-_a = Math.pow(['', ''], value), '' = _a[0], '' = _a[1];
+['', ''] = Math.pow(['', ''], value);
 // super
-var Derived = /** @class */ (function (_super) {
-    __extends(Derived, _super);
-    function Derived() {
-        var _a;
-        var _this = _super.call(this) || this;
-        (_a = _super.prototype). = Math.pow(_a., value);
-        return _this;
-    }
-    Derived.prototype.foo = function () {
-        var _a;
-        (_a = _super.prototype). = Math.pow(_a., value);
-    };
-    Derived.sfoo = function () {
-        var _a;
-        (_a = _super). = Math.pow(_a., value);
-    };
-    return Derived;
-}(C));
+class Derived extends C {
+    constructor() {
+        var _a;
+        super();
+        (_a = super). = Math.pow(_a., value);
+    }
+    foo() {
+        var _a;
+        (_a = super). = Math.pow(_a., value);
+    }
+    static sfoo() {
+        var _a;
+        (_a = super). = Math.pow(_a., value);
+    }
+}
 // function expression
 function bar1() { }
 value;
-(function () { });
+() => { };
 value;
 // function calls
 foo() = Math.pow(foo(), value);