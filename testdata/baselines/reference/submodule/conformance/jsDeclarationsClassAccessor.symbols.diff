--- old.jsDeclarationsClassAccessor.symbols
+++ new.jsDeclarationsClassAccessor.symbols
@@ -3,16 +3,16 @@
 === supplement.d.ts ===
 export { };
 declare module "./argument.js" {
->"./argument.js" : Symbol("argument", Decl(argument.js, 0, 0), Decl(supplement.d.ts, 0, 11))
+>"./argument.js" : Symbol(""argument.js"", Decl(argument.js, 0, 0), Decl(supplement.d.ts, 0, 11))
 
     interface Argument {
 >Argument : Symbol(Argument, Decl(argument.js, 0, 33), Decl(supplement.d.ts, 1, 32))
 
         idlType: any;
->idlType : Symbol(Argument.idlType, Decl(supplement.d.ts, 2, 24))
+>idlType : Symbol(idlType, Decl(supplement.d.ts, 2, 24))
 
         default: null;
->default : Symbol(Argument.default, Decl(supplement.d.ts, 3, 21))
+>default : Symbol(default, Decl(supplement.d.ts, 3, 21))
     }
 }
 === base.js ===
@@ -22,7 +22,7 @@
     constructor() { }
 
     toJSON() {
->toJSON : Symbol(Base.toJSON, Decl(base.js, 1, 21))
+>toJSON : Symbol(toJSON, Decl(base.js, 1, 21))
 
         const json = { type: undefined, name: undefined, inheritance: undefined };
 >json : Symbol(json, Decl(base.js, 4, 13))
@@ -49,14 +49,14 @@
      * @param {*} tokeniser
      */
     static parse(tokeniser) {
->parse : Symbol(Argument.parse, Decl(argument.js, 1, 36))
+>parse : Symbol(parse, Decl(argument.js, 1, 36))
 >tokeniser : Symbol(tokeniser, Decl(argument.js, 5, 17))
 
         return;
     }
 
     get type() {
->type : Symbol(Argument.type, Decl(argument.js, 7, 5))
+>type : Symbol(type, Decl(argument.js, 7, 5))
 
         return "argument";
     }
@@ -65,6 +65,6 @@
      * @param {*} defs
      */
     *validate(defs) { }
->validate : Symbol(Argument.validate, Decl(argument.js, 11, 5))
+>validate : Symbol(validate, Decl(argument.js, 11, 5))
 >defs : Symbol(defs, Decl(argument.js, 16, 14))
 }
