--- old.indexSignatures1.js
+++ new.indexSignatures1.js
@@= skipped -324, +324 lines =@@


 //// [indexSignatures1.js]
-"use strict";
 // Symbol index signature checking
 const sym = Symbol();
 function gg3(x, y, z) {
@@= skipped -164, +163 lines =@@


 //// [indexSignatures1.d.ts]
+// Symbol index signature checking
 declare const sym: unique symbol;
 declare function gg3(x: {
     [key: string]: string;
@@= skipped -8, +9 lines =@@
 }, z: {
     [sym]: number;
 }): void;
+// Overlapping index signatures
 declare function gg1(x: {
     [key: `a${string}`]: string;
     [key: `${string}a`]: string;
@@= skipped -14, +15 lines =@@
     [key: `a${string}a`]: string;
 }
 declare function gg2(x: IX, y: IY): void;
+// Intersection of multiple applicable index signatures
 declare let combo: {
     [x: `foo-${string}`]: 'a' | 'b';
 } & {
     [x: `${string}-bar`]: 'b' | 'c';
 };
-declare const x1: "a" | "b";
-declare const x2: "b" | "c";
-declare const x3: "b";
+declare const x1: "a" | "b"; // 'a' | 'b'
+declare const x2: "b" | "c"; // 'b' | 'c'
+declare const x3: "b"; // 'b' (('a' | 'b') & ('b' | 'c'))
 declare var str: string;
 declare const x4: "a" | "b";
 declare const x5: "b" | "c";
@@= skipped -17, +18 lines =@@
 };
 declare const x7: string;
 declare const x8: string;
-declare const x9: any;
+declare const x9: any; // Error
+// Property access on template pattern index signature
 declare let dom: {
     [x: `data${string}`]: string;
 };
 declare const y1: string;
 declare const y2: string;
+// Contextual typing by index signature with template literal pattern
 type Funcs = {
     [key: `s${string}`]: (x: string) => void;
     [key: `n${string}`]: (x: number) => void;
 };
 declare const funcs: Funcs;
+// Duplicate index signature checking
 type Duplicates = {
-    [key: string | number]: any;
-    [key: number | symbol]: any;
-    [key: symbol | `foo${string}`]: any;
-    [key: `foo${string}`]: any;
+    [key: string | number]: any; // Error
+    [key: number | symbol]: any; // Error
+    [key: symbol | `foo${string}`]: any; // Error
+    [key: `foo${string}`]: any; // Error
 };
+// Conflicting index signature checking
 type Conflicting = {
     [key: `a${string}`]: 'a';
     [key: `${string}a`]: 'b';
-    [key: `a${string}a`]: 'c';
+    [key: `a${string}a`]: 'c'; // Error
 };
+// Invalid index signatures
 type Invalid<T extends string> = {
-    [key: 'a' | 'b' | 'c']: string;
-    [key: T | number]: string;
-    [key: Error]: string;
-    [key: T & string]: string;
+    [key: 'a' | 'b' | 'c']: string; // Error
+    [key: T | number]: string; // Error
+    [key: Error]: string; // Error
+    [key: T & string]: string; // Error
 };
+// Intersections in index signatures
 type Tag1 = {
     __tag1__: void;
 };
@@= skipped -69, +75 lines =@@
 declare let o4: {
     [key: TaggedString1 & TaggedString2]: string;
 };
+// Index signatures inferred from computed property names
 declare const obj10: {
     [x: string]: 0 | 1;
     x: 0;
@@= skipped -20, +21 lines =@@
     1: 2;
     [sym]: 4;
 };
+// Repros from #1863
 declare const system: unique symbol;
 declare const SomeSytePlugin: unique symbol;
 interface Plugs {
@@= skipped -11, +12 lines =@@
 };
 declare var theAnswer: symbol;
 declare var obj: Record<symbol, number>;
+// Repro from #26470
 declare const directive: unique symbol;
 declare function foo<TArg, TRet, TDir>(options: {
     [x in string]: (arg: TArg) => TRet;
@@= skipped -9, +10 lines =@@
 declare let case1: void;
 declare let case2: void;
 declare let case3: void;
+// Repros from #42192
 type Pseudo = `&:${string}`;
 declare const AmIPseudo1: Pseudo;
-declare const AmIPseudo: Pseudo;
+declare const AmIPseudo: Pseudo; // Error
 type PseudoDeclaration = {
     [key in Pseudo]: string;
 };
-declare const test: PseudoDeclaration;
+declare const test: PseudoDeclaration; // Error
 type FieldPattern = `/${string}`;
 declare const path1: FieldPattern;
-declare const path2: FieldPattern;
+declare const path2: FieldPattern; // Error
 type PathsObject = {
     [P in FieldPattern]: object;
 };
-declare const pathObject: PathsObject;
+declare const pathObject: PathsObject; // Error
 type IdType = `${number}-${number}-${number}-${number}`;
 declare const id: IdType;
 type A = Record<IdType, string>;
 declare const a: A;
 declare let aid: string;
+// Repro from #44793
 interface AA {
     a?: string;
     b?: number;
@@= skipped -30, +32 lines =@@
 };
 declare const obj2: {
     [key: string]: string;
-};
+}; // Permitted for backwards compatibility
 declare const obj3: {
     [key: number]: string;
-};
+}; // Error
+// Repro from #45772
 type Id = string & {
     __tag: 'id ';
 };
@@= skipped -11, +12 lines =@@
     [key: Id]: number;
 };
 type Rec2 = Record<Id, number>;
-type K1 = keyof Rec1;
-type K2 = keyof Rec2;
+type K1 = keyof Rec1; // Id
+type K2 = keyof Rec2; // Id