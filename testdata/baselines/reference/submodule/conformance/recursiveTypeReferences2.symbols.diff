--- old.recursiveTypeReferences2.symbols
+++ new.recursiveTypeReferences2.symbols
@@= skipped -1, +1 lines =@@
 
 === bug39372.js ===
 /** @typedef {ReadonlyArray<Json>} JsonArray */
+>ReadonlyArray : Symbol(ReadonlyArray, Decl(lib.es5.d.ts, --, --))
+>Json : Symbol(Json, Decl(bug39372.js, 2, 4))
+
 /** @typedef {{ readonly [key: string]: Json }} JsonRecord */
+>key : Symbol(key, Decl(bug39372.js, 1, 26))
+>Json : Symbol(Json, Decl(bug39372.js, 2, 4))
+
 /** @typedef {boolean | number | string | null | JsonRecord | JsonArray | readonly []} Json */
+>JsonRecord : Symbol(JsonRecord, Decl(bug39372.js, 1, 4))
+>JsonArray : Symbol(JsonArray, Decl(bug39372.js, 0, 4))
 
 /**
  * @template T
  * @typedef {{
   $A: {
+>$A : Symbol($A, Decl(bug39372.js, 6, 14))
+
     [K in keyof T]?: XMLObject<T[K]>[]
+>K : Symbol(K, Decl(bug39372.js, 8, 5))
+>T : Symbol(T)
+>XMLObject : Symbol(XMLObject, Decl(bug39372.js, 6, 3))
+>T : Symbol(T)
+>K : Symbol(K, Decl(bug39372.js, 8, 5))
+
   },
   $O: {
+>$O : Symbol($O, Decl(bug39372.js, 9, 4))
+
     [K in keyof T]?: {
+>K : Symbol(K, Decl(bug39372.js, 11, 5))
+>T : Symbol(T)
+
       $$?: Record<string, string>
+>$$ : Symbol($$, Decl(bug39372.js, 11, 22))
+>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
+
     } & (T[K] extends string ? {$:string} : XMLObject<T[K]>)
+>T : Symbol(T)
+>K : Symbol(K, Decl(bug39372.js, 11, 5))
+>$ : Symbol($, Decl(bug39372.js, 13, 32))
+>XMLObject : Symbol(XMLObject, Decl(bug39372.js, 6, 3))
+>T : Symbol(T)
+>K : Symbol(K, Decl(bug39372.js, 11, 5))
+
   },
   $$?: Record<string, string>,
+>$$ : Symbol($$, Decl(bug39372.js, 14, 4))
+>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
+
   } & {
   [K in keyof T]?: (
+>K : Symbol(K, Decl(bug39372.js, 17, 3))
+>T : Symbol(T)
+
     T[K] extends string ? string
+>T : Symbol(T)
+>K : Symbol(K, Decl(bug39372.js, 17, 3))
+
       : XMLObject<T[K]>
+>XMLObject : Symbol(XMLObject, Decl(bug39372.js, 6, 3))
+>T : Symbol(T)
+>K : Symbol(K, Decl(bug39372.js, 17, 3))
+
   )
 }} XMLObject<T> */
 
