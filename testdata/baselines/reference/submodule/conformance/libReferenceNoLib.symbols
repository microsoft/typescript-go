//// [tests/cases/conformance/declarationEmit/libReferenceNoLib.ts] ////

=== fakelib.ts ===
interface Object { }
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(fakelib.ts, 0, 0))

interface Array<T> { }
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 5 more)
>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2016.array.include.d.ts, --, --) ... and 4 more)

interface String { }
>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --) ... and 8 more)

interface Boolean { }
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(fakelib.ts, 2, 20))

interface Number { }
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2020.number.d.ts, --, --), Decl(fakelib.ts, 3, 21))

interface Function { }
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.decorators.d.ts, --, --) ... and 1 more)

interface RegExp { }
>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.regexp.d.ts, --, --) ... and 4 more)

interface IArguments { }
>IArguments : Symbol(IArguments, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(fakelib.ts, 6, 20))


=== file1.ts ===
/// <reference lib="dom" />
export declare interface HTMLElement { field: string; }
>HTMLElement : Symbol(HTMLElement, Decl(file1.ts, 0, 0))
>field : Symbol(field, Decl(file1.ts, 1, 38))

export const elem: HTMLElement = { field: 'a' };
>elem : Symbol(elem, Decl(file1.ts, 2, 12))
>HTMLElement : Symbol(HTMLElement, Decl(file1.ts, 0, 0))
>field : Symbol(field, Decl(file1.ts, 2, 34))

