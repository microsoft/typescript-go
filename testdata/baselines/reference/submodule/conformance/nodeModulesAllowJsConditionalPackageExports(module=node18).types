//// [tests/cases/conformance/node/allowJs/nodeModulesAllowJsConditionalPackageExports.ts] ////

=== index.js ===
// esm format file
import * as cjs from "package/cjs";
>cjs : typeof cjs

import * as mjs from "package/mjs";
>mjs : typeof mjs

import * as type from "package";
>type : typeof type

cjs;
>cjs : typeof cjs

mjs;
>mjs : typeof mjs

type;
>type : typeof type

import * as cjsi from "inner/a";
>cjsi : any

import * as mjsi from "inner/b";
>mjsi : any

import * as typei from "inner";
>typei : typeof typei

import * as ts from "inner/types";
>ts : any

cjsi.mjsSource;
>cjsi.mjsSource : any
>cjsi : any
>mjsSource : any

mjsi.mjsSource;
>mjsi.mjsSource : any
>mjsi : any
>mjsSource : any

typei.mjsSource;
>typei.mjsSource : any
>typei : typeof typei
>mjsSource : any

ts.mjsSource;
>ts.mjsSource : any
>ts : any
>mjsSource : any

=== index.mjs ===
// esm format file
import * as cjs from "package/cjs";
>cjs : typeof cjs

import * as mjs from "package/mjs";
>mjs : typeof mjs

import * as type from "package";
>type : typeof type

cjs;
>cjs : typeof cjs

mjs;
>mjs : typeof mjs

type;
>type : typeof type

import * as cjsi from "inner/a";
>cjsi : any

import * as mjsi from "inner/b";
>mjsi : any

import * as typei from "inner";
>typei : typeof typei

import * as ts from "inner/types";
>ts : any

cjsi.mjsSource;
>cjsi.mjsSource : any
>cjsi : any
>mjsSource : any

mjsi.mjsSource;
>mjsi.mjsSource : any
>mjsi : any
>mjsSource : any

typei.mjsSource;
>typei.mjsSource : any
>typei : typeof typei
>mjsSource : any

ts.mjsSource;
>ts.mjsSource : any
>ts : any
>mjsSource : any

=== index.cjs ===
// cjs format file
import * as cjs from "package/cjs";
>cjs : typeof cjs

import * as mjs from "package/mjs";
>mjs : typeof mjs

import * as type from "package";
>type : typeof type

cjs;
>cjs : typeof cjs

mjs;
>mjs : typeof mjs

type;
>type : typeof type

import * as cjsi from "inner/a";
>cjsi : any

import * as mjsi from "inner/b";
>mjsi : any

import * as typei from "inner";
>typei : typeof typei

import * as ts from "inner/types";
>ts : any

cjsi.cjsSource;
>cjsi.cjsSource : any
>cjsi : any
>cjsSource : any

mjsi.cjsSource;
>mjsi.cjsSource : any
>mjsi : any
>cjsSource : any

typei.implicitCjsSource;
>typei.implicitCjsSource : true
>typei : typeof typei
>implicitCjsSource : true

ts.cjsSource;
>ts.cjsSource : any
>ts : any
>cjsSource : any

=== node_modules/inner/index.d.ts ===
// cjs format file
import * as cjs from "inner/a";
>cjs : any

import * as mjs from "inner/b";
>mjs : any

import * as type from "inner";
>type : typeof type

import * as ts from "inner/types";
>ts : any

export { cjs };
>cjs : any

export { mjs };
>mjs : any

export { type };
>type : typeof type

export { ts };
>ts : any

export const implicitCjsSource = true;
>implicitCjsSource : true
>true : true

=== node_modules/inner/index.d.mts ===
// esm format file
import * as cjs from "inner/a";
>cjs : any

import * as mjs from "inner/b";
>mjs : any

import * as type from "inner";
>type : typeof type

import * as ts from "inner/types";
>ts : any

export { cjs };
>cjs : any

export { mjs };
>mjs : any

export { type };
>type : typeof type

export { ts };
>ts : any

export const mjsSource = true;
>mjsSource : true
>true : true

=== node_modules/inner/index.d.cts ===
// cjs format file
import * as cjs from "inner/a";
>cjs : any

import * as mjs from "inner/b";
>mjs : any

import * as type from "inner";
>type : typeof type

import * as ts from "inner/types";
>ts : any

export { cjs };
>cjs : any

export { mjs };
>mjs : any

export { type };
>type : typeof type

export { ts };
>ts : any

export const cjsSource = true;
>cjsSource : true
>true : true

