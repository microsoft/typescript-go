--- old.destructuringParameterDeclaration2.types
+++ new.destructuringParameterDeclaration2.types
@@= skipped -116, +116 lines =@@
 >10 : 10

 function c2({z = 10}) { }
->c2 : ({ z }: { z?: number; }) => void
+>c2 : ({ z = 10 }: { z?: number; }) => void
 >z : number
 >10 : 10

 function c3({b}: { b: number|string } = { b: "hello" }) { }
->c3 : ({ b }?: { b: number | string; }) => void
+>c3 : ({ b }?: { b: string | number; }) => void
 >b : string | number
 >b : string | number
 >{ b: "hello" } : { b: string; }
@@= skipped -24, +24 lines =@@
 >c : any

 function c6([a, b, [[c = 1]]]) { }
->c6 : ([a, b, [[c]]]: [any, any, [[number?]]]) => void
+>c6 : ([a, b, [[c = 1]]]: [any, any, [[number?]]]) => void
 >a : any
 >b : any
 >c : number
@@= skipped -27, +27 lines =@@

 c2({ z: false });  // Error, implied type is {z?: number}
 >c2({ z: false }) : void
->c2 : ({ z }: { z?: number; }) => void
+>c2 : ({ z = 10 }: { z?: number; }) => void
 >{ z: false } : { z: boolean; }
 >z : boolean
 >false : false

 c3({ b: true });   // Error, implied type is { b: number|string }. 
 >c3({ b: true }) : void
->c3 : ({ b }?: { b: number | string; }) => void
+>c3 : ({ b }?: { b: string | number; }) => void
 >{ b: true } : { b: boolean; }
 >b : boolean
 >true : true
@@= skipped -23, +23 lines =@@

 c6([1, 2, [["string"]]]);  // Error, implied type is [any, any, [[number]]]  // Use initializer
 >c6([1, 2, [["string"]]]) : void
->c6 : ([a, b, [[c]]]: [any, any, [[number?]]]) => void
+>c6 : ([a, b, [[c = 1]]]: [any, any, [[number?]]]) => void
 >[1, 2, [["string"]]] : [number, number, [[string]]]
 >1 : 1
 >2 : 2