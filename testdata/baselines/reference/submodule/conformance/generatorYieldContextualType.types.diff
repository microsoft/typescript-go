--- old.generatorYieldContextualType.types
+++ new.generatorYieldContextualType.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/conformance/generators/generatorYieldContextualType.ts] ////
 
-=== Performance Stats ===
-Type Count: 1,000
-Instantiation count: 2,500
-
 === generatorYieldContextualType.ts ===
 declare function f1<T, R, S>(gen: () => Generator<R, T, S>): void;
 >f1 : <T, R, S>(gen: () => Generator<R, T, S>) => void
+>T : T
+>R : R
+>S : S
 >gen : () => Generator<R, T, S>
 
 f1<0, 0, 1>(function* () {
@@= skipped -24, +23 lines =@@
 });
 
 declare function f2<T, R, S>(gen: () => Generator<R, T, S> | AsyncGenerator<R, T, S>): void;
->f2 : <T, R, S>(gen: () => Generator<R, T, S> | AsyncGenerator<R, T, S>) => void
->gen : () => Generator<R, T, S> | AsyncGenerator<R, T, S>
+>f2 : <T, R, S>(gen: () => AsyncGenerator<R, T, S> | Generator<R, T, S>) => void
+>T : T
+>R : R
+>S : S
+>gen : () => AsyncGenerator<R, T, S> | Generator<R, T, S>
 
 f2<0, 0, 1>(async function* () {
 >f2<0, 0, 1>(async function* () {	const a = yield 0;	return 0;}) : void
->f2 : <T, R, S>(gen: () => Generator<R, T, S> | AsyncGenerator<R, T, S>) => void
+>f2 : <T, R, S>(gen: () => AsyncGenerator<R, T, S> | Generator<R, T, S>) => void
 >async function* () {	const a = yield 0;	return 0;} : () => AsyncGenerator<0, 0, 1>
 
 	const a = yield 0;
@@= skipped -39, +42 lines =@@
 >Directive : typeof Directive
 
   export function is<T>(value: Directive | T): value is Directive {
->is : <T>(value: Directive | T) => value is Directive
+>is : <T>(value: T | Directive) => value is Directive
+>T : T
 >value : T | Directive
 
     return typeof value === "number" && Directive[value] != null;
 >typeof value === "number" && Directive[value] != null : boolean
 >typeof value === "number" : boolean
->typeof value : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof value : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >value : T | Directive
 >"number" : "number"
 >Directive[value] != null : boolean
->Directive[value] : (typeof Directive)[Directive | (T & number)]
+>Directive[value] : typeof Directive[Directive | T & number]
 >Directive : typeof Directive
->value : Directive | (T & number)
+>value : Directive | T & number
   }
 }
 
 interface QuickPickItem {
+>QuickPickItem : QuickPickItem
+
   label: string;
 >label : string
 
@@= skipped -34, +37 lines =@@
 }
 
 interface QuickInputStep {
+>QuickInputStep : QuickInputStep
+
   placeholder?: string;
 >placeholder : string | undefined
 
@@= skipped -11, +13 lines =@@
 }
 
 interface QuickPickStep<T extends QuickPickItem = QuickPickItem> {
+>QuickPickStep : QuickPickStep<T>
+>T : T
+
   placeholder?: string;
 >placeholder : string | undefined
 
@@= skipped -23, +26 lines =@@
 
 type StepItemType<T> = T extends QuickPickStep<infer U>
 >StepItemType : StepItemType<T>
+>T : T
+>U : U
 
   ? U[]
   : T extends QuickInputStep
@@= skipped -16, +18 lines =@@
 }
 type StepResult<T> = typeof StepResult.Break | T;
 >StepResult : StepResult<T>
->StepResult.Break : unique symbol
+>T : T
 >StepResult : typeof StepResult
->Break : unique symbol
 
 type StepResultGenerator<T> =
 >StepResultGenerator : StepResultGenerator<T>
+>T : T
 
   | Generator<QuickPickStep | QuickInputStep, StepResult<T>, any | undefined>
   | AsyncGenerator<
@@= skipped -15, +15 lines =@@
     >;
 type StepSelection<T> = T extends QuickPickStep<infer U>
 >StepSelection : StepSelection<T>
+>T : T
+>U : U
 
   ? U[] | Directive
   : T extends QuickInputStep
@@= skipped -7, +9 lines =@@
   : never;
 type PartialStepState<T = unknown> = Partial<T> & {
 >PartialStepState : PartialStepState<T>
+>T : T
 
   counter: number;
 >counter : number
@@= skipped -13, +14 lines =@@
 };
 type StepState<T = Record<string, unknown>> = T & {
 >StepState : StepState<T>
+>T : T
 
   counter: number;
 >counter : number
@@= skipped -13, +14 lines =@@
 };
 
 function canPickStepContinue<T extends QuickPickStep>(
->canPickStepContinue : <T extends QuickPickStep>(_step: T, _state: PartialStepState, _selection: StepItemType<T> | Directive) => _selection is StepItemType<T>
+>canPickStepContinue : <T extends QuickPickStep<QuickPickItem>>(_step: T, _state: PartialStepState<unknown>, _selection: Directive | StepItemType<T>) => _selection is StepItemType<T>
+>T : T
 
   _step: T,
 >_step : T
@@= skipped -18, +19 lines =@@
 
 function createPickStep<T extends QuickPickItem>(
 >createPickStep : <T extends QuickPickItem>(step: QuickPickStep<T>) => QuickPickStep<T>
+>T : T
 
   step: QuickPickStep<T>
 >step : QuickPickStep<T>
@@= skipped -10, +11 lines =@@
 }
 
 function* showStep<
->showStep : <State extends PartialStepState & { repo: any; }, Context extends { repos: any[]; title: string; status: any; }>(state: State, _context: Context) => StepResultGenerator<QuickPickItem>
+>showStep : <State extends Partial<unknown> & { counter: number; confirm?: boolean | undefined; startingStep?: number | undefined; } & { repo: any; }, Context extends { repos: any[]; title: string; status: any; }>(state: State, _context: Context) => StepResultGenerator<QuickPickItem>
 
   State extends PartialStepState & { repo: any },
+>State : State
 >repo : any
 
   Context extends { repos: any[]; title: string; status: any }
+>Context : Context
 >repos : any[]
 >title : string
 >status : any
@@= skipped -30, +32 lines =@@
 
   });
   const selection: StepSelection<typeof step> = yield step;
->selection : Directive | QuickPickItem[]
->step : QuickPickStep<QuickPickItem>
+>selection : QuickPickItem[] | Directive
 >yield step : any
 >step : QuickPickStep<QuickPickItem>
 
   return canPickStepContinue(step, state, selection)
->canPickStepContinue(step, state, selection)    ? selection[0]    : StepResult.Break : QuickPickItem | unique symbol
+>canPickStepContinue(step, state, selection)    ? selection[0]    : StepResult.Break : unique symbol | QuickPickItem
 >canPickStepContinue(step, state, selection) : boolean
->canPickStepContinue : <T extends QuickPickStep>(_step: T, _state: PartialStepState, _selection: StepItemType<T> | Directive) => _selection is StepItemType<T>
+>canPickStepContinue : <T extends QuickPickStep<QuickPickItem>>(_step: T, _state: PartialStepState<unknown>, _selection: Directive | StepItemType<T>) => _selection is StepItemType<T>
 >step : QuickPickStep<QuickPickItem>
 >state : State
->selection : Directive | QuickPickItem[]
+>selection : QuickPickItem[] | Directive
 
     ? selection[0]
 >selection[0] : QuickPickItem
