error TS2318: Cannot find global type 'Array'.
error TS2318: Cannot find global type 'Function'.
error TS2318: Cannot find global type 'IArguments'.
error TS2318: Cannot find global type 'RegExp'.
error TS2318: Cannot find global type 'String'.
error TS2318: Cannot find global type 'TemplateStringsArray'.
error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
error TS2552: Cannot find name 'Number'. Did you mean 'number'?
error TS2552: Cannot find name 'Object'. Did you mean 'object'?
privateNameMethodCallExpression.ts(12,29): error TS2488: Type '{}' must have a '[Symbol.iterator]()' method that returns an iterator.


!!! error TS2318: Cannot find global type 'Array'.
!!! error TS2318: Cannot find global type 'Function'.
!!! error TS2318: Cannot find global type 'IArguments'.
!!! error TS2318: Cannot find global type 'RegExp'.
!!! error TS2318: Cannot find global type 'String'.
!!! error TS2318: Cannot find global type 'TemplateStringsArray'.
!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
==== privateNameMethodCallExpression.ts (1 errors) ====
    class AA {
        #method() { this.x = 10; };
        #method2(a, ...b) {};
        x = 1;
        test() {
            this.#method();
            const func = this.#method;
            func();
            new this.#method();
    
            const arr = [ 1, 2 ];
            this.#method2(0, ...arr, 3);
                                ~~~
!!! error TS2488: Type '{}' must have a '[Symbol.iterator]()' method that returns an iterator.
    
            const b = new this.#method2(0, ...arr, 3); //Error 
            const str = this.#method2`head${1}middle${2}tail`;
            this.getInstance().#method2`test${1}and${2}`;
    
            this.getInstance().#method2(0, ...arr, 3); 
            const b2 = new (this.getInstance().#method2)(0, ...arr, 3); //Error 
            const str2 = this.getInstance().#method2`head${1}middle${2}tail`;
        }
        getInstance() { return new AA(); }
    }
    