--- old.thisTypeInAccessorsNegative.symbols
+++ new.thisTypeInAccessorsNegative.symbols
@@= skipped -4, +4 lines =@@
 >Foo : Symbol(Foo, Decl(thisTypeInAccessorsNegative.ts, 0, 0))
 
     n: number;
->n : Symbol(Foo.n, Decl(thisTypeInAccessorsNegative.ts, 0, 15))
+>n : Symbol(n, Decl(thisTypeInAccessorsNegative.ts, 0, 15))
 
     x: number;
->x : Symbol(Foo.x, Decl(thisTypeInAccessorsNegative.ts, 1, 14))
+>x : Symbol(x, Decl(thisTypeInAccessorsNegative.ts, 1, 14))
 }
 interface Bar {
 >Bar : Symbol(Bar, Decl(thisTypeInAccessorsNegative.ts, 3, 1))
 
     wrong: "place" | "time" | "method" | "technique";
->wrong : Symbol(Bar.wrong, Decl(thisTypeInAccessorsNegative.ts, 4, 15))
+>wrong : Symbol(wrong, Decl(thisTypeInAccessorsNegative.ts, 4, 15))
 }
 const mismatch = {
 >mismatch : Symbol(mismatch, Decl(thisTypeInAccessorsNegative.ts, 7, 5))
@@= skipped -21, +21 lines =@@
 >x : Symbol(x, Decl(thisTypeInAccessorsNegative.ts, 8, 10), Decl(thisTypeInAccessorsNegative.ts, 9, 40))
 >this : Symbol(this, Decl(thisTypeInAccessorsNegative.ts, 9, 10))
 >Foo : Symbol(Foo, Decl(thisTypeInAccessorsNegative.ts, 0, 0))
->this.n : Symbol(Foo.n, Decl(thisTypeInAccessorsNegative.ts, 0, 15))
+>this.n : Symbol(n, Decl(thisTypeInAccessorsNegative.ts, 0, 15))
 >this : Symbol(this, Decl(thisTypeInAccessorsNegative.ts, 9, 10))
->n : Symbol(Foo.n, Decl(thisTypeInAccessorsNegative.ts, 0, 15))
+>n : Symbol(n, Decl(thisTypeInAccessorsNegative.ts, 0, 15))
 
     set x(this: Bar, n) { this.wrong = "method"; }
 >x : Symbol(x, Decl(thisTypeInAccessorsNegative.ts, 8, 10), Decl(thisTypeInAccessorsNegative.ts, 9, 40))
 >this : Symbol(this, Decl(thisTypeInAccessorsNegative.ts, 10, 10))
 >Bar : Symbol(Bar, Decl(thisTypeInAccessorsNegative.ts, 3, 1))
 >n : Symbol(n, Decl(thisTypeInAccessorsNegative.ts, 10, 20))
->this.wrong : Symbol(Bar.wrong, Decl(thisTypeInAccessorsNegative.ts, 4, 15))
+>this.wrong : Symbol(wrong, Decl(thisTypeInAccessorsNegative.ts, 4, 15))
 >this : Symbol(this, Decl(thisTypeInAccessorsNegative.ts, 10, 10))
->wrong : Symbol(Bar.wrong, Decl(thisTypeInAccessorsNegative.ts, 4, 15))
+>wrong : Symbol(wrong, Decl(thisTypeInAccessorsNegative.ts, 4, 15))
 }
 const contextual: Foo = {
 >contextual : Symbol(contextual, Decl(thisTypeInAccessorsNegative.ts, 12, 5))
@@= skipped -22, +22 lines =@@
 
     get x() { return this.n; }
 >x : Symbol(x, Decl(thisTypeInAccessorsNegative.ts, 13, 10))
->this.n : Symbol(Foo.n, Decl(thisTypeInAccessorsNegative.ts, 0, 15))
+>this.n : Symbol(n, Decl(thisTypeInAccessorsNegative.ts, 0, 15))
 >this : Symbol(Foo, Decl(thisTypeInAccessorsNegative.ts, 0, 0))
->n : Symbol(Foo.n, Decl(thisTypeInAccessorsNegative.ts, 0, 15))
+>n : Symbol(n, Decl(thisTypeInAccessorsNegative.ts, 0, 15))
 }
 
