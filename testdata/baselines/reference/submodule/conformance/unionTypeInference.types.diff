--- old.unionTypeInference.types
+++ new.unionTypeInference.types
@@= skipped -11, +11 lines =@@
 
 declare function f1<T>(x: T, y: string | T): T;
 >f1 : <T>(x: T, y: string | T) => T
+>T : T
 >x : T
 >y : string | T
 
@@= skipped -54, +55 lines =@@
 
 declare function f2<T>(value: [string, T]): T;
 >f2 : <T>(value: [string, T]) => T
+>T : T
 >value : [string, T]
 
 var b1 = f2(["string", true]);  // boolean
@@= skipped -12, +13 lines =@@
 
 declare function f3<T>(x: string | false | T): T;
 >f3 : <T>(x: string | false | T) => T
+>T : T
 >x : string | false | T
 >false : false
 
@@= skipped -35, +36 lines =@@
 
 declare function f4<T>(x: string & T): T;
 >f4 : <T>(x: string & T) => T
+>T : T
 >x : string & T
 
 const d1 = f4("abc");
@@= skipped -21, +22 lines =@@
 >42 : 42
 
 export interface Foo<T> {
+>Foo : Foo<T>
+>T : T
+
     then<U>(f: (x: T) => U | Foo<U>, g: U): Foo<U>;
 >then : <U>(f: (x: T) => U | Foo<U>, g: U) => Foo<U>
+>U : U
 >f : (x: T) => U | Foo<U>
 >x : T
 >g : U
 }
 export interface Bar<T> {
+>Bar : Bar<T>
+>T : T
+
     then<S>(f: (x: T) => S | Bar<S>, g: S): Bar<S>;
 >then : <S>(f: (x: T) => S | Bar<S>, g: S) => Bar<S>
+>S : S
 >f : (x: T) => S | Bar<S>
 >x : T
 >g : S
@@= skipped -29, +37 lines =@@
 
 declare function foo<T>(x: T | Promise<T>): void;
 >foo : <T>(x: T | Promise<T>) => void
+>T : T
 >x : T | Promise<T>
 
 declare let x: false | Promise<true>;
@@= skipped -14, +15 lines =@@
 
 declare function bar<T>(x: T, y: string | T): T;
 >bar : <T>(x: T, y: string | T) => T
+>T : T
 >x : T
 >y : string | T
 
@@= skipped -19, +20 lines =@@
 
 type DeepPromised<T> =
 >DeepPromised : DeepPromised<T>
+>T : T
 
     { [containsPromises]?: true } &
 >[containsPromises] : true | undefined
@@= skipped -7, +8 lines =@@
 >true : true
 
     { [TKey in keyof T]: T[TKey] | DeepPromised<T[TKey]> | Promise<DeepPromised<T[TKey]>> };
+>TKey : TKey
 
 async function fun<T>(deepPromised: DeepPromised<T>) {
 >fun : <T>(deepPromised: DeepPromised<T>) => Promise<void>
+>T : T
 >deepPromised : DeepPromised<T>
 
     const deepPromisedWithIndexer: DeepPromised<{ [name: string]: {} | null | undefined }> = deepPromised;
@@= skipped -11, +13 lines =@@
 >deepPromised : DeepPromised<T>
 
     for (const value of Object.values(deepPromisedWithIndexer)) {
->value : {} | ({ [containsPromises]?: true; } & {}) | Promise<{ [containsPromises]?: true; } & {}> | null | undefined
->Object.values(deepPromisedWithIndexer) : ({} | ({ [containsPromises]?: true; } & {}) | Promise<{ [containsPromises]?: true; } & {}> | null | undefined)[]
->Object.values : { <T_1>(o: { [s: string]: T_1; } | ArrayLike<T_1>): T_1[]; (o: {}): any[]; }
+>value : Promise<{ [containsPromises]?: true | undefined; } & {}> | {} | { [containsPromises]?: true | undefined; } & {} | null | undefined
+>Object.values(deepPromisedWithIndexer) : (Promise<{ [containsPromises]?: true | undefined; } & {}> | {} | { [containsPromises]?: true | undefined; } & {} | null | undefined)[]
+>Object.values : { <T>(o: ArrayLike<T> | { [s: string]: T; }): T[]; (o: {}): any[]; }
 >Object : ObjectConstructor
->values : { <T_1>(o: { [s: string]: T_1; } | ArrayLike<T_1>): T_1[]; (o: {}): any[]; }
+>values : { <T>(o: ArrayLike<T> | { [s: string]: T; }): T[]; (o: {}): any[]; }
 >deepPromisedWithIndexer : DeepPromised<{ [name: string]: {} | null | undefined; }>
 
         const awaitedValue = await value;
->awaitedValue : {} | ({ [containsPromises]?: true; } & {}) | null | undefined
->await value : {} | ({ [containsPromises]?: true; } & {}) | null | undefined
->value : {} | ({ [containsPromises]?: true; } & {}) | Promise<{ [containsPromises]?: true; } & {}> | null | undefined
+>awaitedValue : {} | { [containsPromises]?: true | undefined; } & {} | null | undefined
+>await value : {} | { [containsPromises]?: true | undefined; } & {} | null | undefined
+>value : Promise<{ [containsPromises]?: true | undefined; } & {}> | {} | { [containsPromises]?: true | undefined; } & {} | null | undefined
 
         if (awaitedValue)
->awaitedValue : {} | ({ [containsPromises]?: true; } & {}) | null | undefined
+>awaitedValue : {} | { [containsPromises]?: true | undefined; } & {} | null | undefined
 
             await fun(awaitedValue);
 >await fun(awaitedValue) : void
 >fun(awaitedValue) : Promise<void>
 >fun : <T>(deepPromised: DeepPromised<T>) => Promise<void>
->awaitedValue : {} | ({ [containsPromises]?: true; } & {})
+>awaitedValue : {} | { [containsPromises]?: true | undefined; } & {}
     }
 }
 
@@= skipped -27, +27 lines =@@
 
 type Deep<T> = { [K in keyof T]: T[K] | Deep<T[K]> };
 >Deep : Deep<T>
+>T : T
+>K : K
 
 declare function baz<T>(dp: Deep<T>): T;
 >baz : <T>(dp: Deep<T>) => T
+>T : T
 >dp : Deep<T>
 
 declare let xx: { a: string | undefined };
