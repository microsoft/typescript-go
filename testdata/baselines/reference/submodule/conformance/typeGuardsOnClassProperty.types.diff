--- old.typeGuardsOnClassProperty.types
+++ new.typeGuardsOnClassProperty.types
@@= skipped -23, +23 lines =@@
         return typeof data === "string" ? data : data.join(" ");
 >typeof data === "string" ? data : data.join(" ") : string
 >typeof data === "string" : boolean
->typeof data : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof data : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >data : string | string[]
 >"string" : "string"
 >data : string
@@= skipped -17, +17 lines =@@
         return typeof this.data === "string" ? this.data : this.data.join(" ");
 >typeof this.data === "string" ? this.data : this.data.join(" ") : string
 >typeof this.data === "string" : boolean
->typeof this.data : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof this.data : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >this.data : string | string[]
 >this : this
 >data : string | string[]
@@= skipped -19, +19 lines =@@
 }
 
 var o: {
->o : { prop1: number | string; prop2: boolean | string; }
+>o : { prop1: string | number; prop2: string | boolean; }
 
     prop1: number|string;
 >prop1 : string | number
@@= skipped -23, +23 lines =@@
 if (typeof o.prop1 === "string" && o.prop1.toLowerCase()) {}
 >typeof o.prop1 === "string" && o.prop1.toLowerCase() : string
 >typeof o.prop1 === "string" : boolean
->typeof o.prop1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof o.prop1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >o.prop1 : string | number
->o : { prop1: number | string; prop2: boolean | string; }
+>o : { prop1: string | number; prop2: string | boolean; }
 >prop1 : string | number
 >"string" : "string"
 >o.prop1.toLowerCase() : string
 >o.prop1.toLowerCase : () => string
 >o.prop1 : string
->o : { prop1: number | string; prop2: boolean | string; }
+>o : { prop1: string | number; prop2: string | boolean; }
 >prop1 : string
 >toLowerCase : () => string
 
 var prop1 = o.prop1;
 >prop1 : string | number
 >o.prop1 : string | number
->o : { prop1: number | string; prop2: boolean | string; }
+>o : { prop1: string | number; prop2: string | boolean; }
 >prop1 : string | number
 
 if (typeof prop1 === "string" && prop1.toLocaleLowerCase()) { }
 >typeof prop1 === "string" && prop1.toLocaleLowerCase() : string
 >typeof prop1 === "string" : boolean
->typeof prop1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof prop1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >prop1 : string | number
 >"string" : "string"
 >prop1.toLocaleLowerCase() : string
