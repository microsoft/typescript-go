--- old.override8.symbols
+++ new.override8.symbols
@@= skipped -4, +4 lines =@@
 >B : Symbol(B, Decl(override8.ts, 0, 0))
 
     a: string
->a : Symbol(B.a, Decl(override8.ts, 0, 9))
+>a : Symbol(a, Decl(override8.ts, 0, 9))
 }
 
 class D extends B {
@@= skipped -8, +8 lines =@@
 >B : Symbol(B, Decl(override8.ts, 0, 0))
 
     constructor(public a: string, public b: string) {
->a : Symbol(D.a, Decl(override8.ts, 5, 16))
->b : Symbol(D.b, Decl(override8.ts, 5, 33))
+>a : Symbol(a, Decl(override8.ts, 5, 16))
+>b : Symbol(b, Decl(override8.ts, 5, 33))
 
         super();
 >super : Symbol(B, Decl(override8.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >BB : Symbol(BB, Decl(override8.ts, 8, 1))
 
     constructor(public a: string) {
->a : Symbol(BB.a, Decl(override8.ts, 11, 16))
+>a : Symbol(a, Decl(override8.ts, 11, 16))
 
     }
 }
@@= skipped -10, +10 lines =@@
 >BB : Symbol(BB, Decl(override8.ts, 8, 1))
 
     constructor(public a: string) {
->a : Symbol(DD.a, Decl(override8.ts, 17, 16))
+>a : Symbol(a, Decl(override8.ts, 17, 16))
 
         super(a)
 >super : Symbol(BB, Decl(override8.ts, 8, 1))
@@= skipped -13, +13 lines =@@
 >BB : Symbol(BB, Decl(override8.ts, 8, 1))
 
     public a: string;
->a : Symbol(DDD.a, Decl(override8.ts, 22, 22))
+>a : Symbol(a, Decl(override8.ts, 22, 22))
 
     constructor(a: string) {
 >a : Symbol(a, Decl(override8.ts, 25, 16))
@@= skipped -10, +10 lines =@@
 >a : Symbol(a, Decl(override8.ts, 25, 16))
 
         this.a = a
->this.a : Symbol(DDD.a, Decl(override8.ts, 22, 22))
+>this.a : Symbol(a, Decl(override8.ts, 22, 22))
 >this : Symbol(DDD, Decl(override8.ts, 20, 1))
->a : Symbol(DDD.a, Decl(override8.ts, 22, 22))
+>a : Symbol(a, Decl(override8.ts, 22, 22))
 >a : Symbol(a, Decl(override8.ts, 25, 16))
     }
 }
