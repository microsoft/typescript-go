--- old.stringLiteralTypeIsSubtypeOfString.symbols
+++ new.stringLiteralTypeIsSubtypeOfString.symbols
@@= skipped -121, +121 lines =@@
 >String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     toString(): string { return null; }
->toString : Symbol(C.toString, Decl(stringLiteralTypeIsSubtypeOfString.ts, 41, 27))
+>toString : Symbol(toString, Decl(stringLiteralTypeIsSubtypeOfString.ts, 41, 27))
 
     charAt(pos: number): string { return null; }
->charAt : Symbol(C.charAt, Decl(stringLiteralTypeIsSubtypeOfString.ts, 42, 39))
+>charAt : Symbol(charAt, Decl(stringLiteralTypeIsSubtypeOfString.ts, 42, 39))
 >pos : Symbol(pos, Decl(stringLiteralTypeIsSubtypeOfString.ts, 43, 11))
 
     charCodeAt(index: number): number { return null; }
->charCodeAt : Symbol(C.charCodeAt, Decl(stringLiteralTypeIsSubtypeOfString.ts, 43, 48))
+>charCodeAt : Symbol(charCodeAt, Decl(stringLiteralTypeIsSubtypeOfString.ts, 43, 48))
 >index : Symbol(index, Decl(stringLiteralTypeIsSubtypeOfString.ts, 44, 15))
 
     concat(...strings: string[]): string { return null; }
->concat : Symbol(C.concat, Decl(stringLiteralTypeIsSubtypeOfString.ts, 44, 54))
+>concat : Symbol(concat, Decl(stringLiteralTypeIsSubtypeOfString.ts, 44, 54))
 >strings : Symbol(strings, Decl(stringLiteralTypeIsSubtypeOfString.ts, 45, 11))
 
     indexOf(searchString: string, position?: number): number { return null; }
->indexOf : Symbol(C.indexOf, Decl(stringLiteralTypeIsSubtypeOfString.ts, 45, 57))
+>indexOf : Symbol(indexOf, Decl(stringLiteralTypeIsSubtypeOfString.ts, 45, 57))
 >searchString : Symbol(searchString, Decl(stringLiteralTypeIsSubtypeOfString.ts, 46, 12))
 >position : Symbol(position, Decl(stringLiteralTypeIsSubtypeOfString.ts, 46, 33))
 
     lastIndexOf(searchString: string, position?: number): number { return null; }
->lastIndexOf : Symbol(C.lastIndexOf, Decl(stringLiteralTypeIsSubtypeOfString.ts, 46, 77))
+>lastIndexOf : Symbol(lastIndexOf, Decl(stringLiteralTypeIsSubtypeOfString.ts, 46, 77))
 >searchString : Symbol(searchString, Decl(stringLiteralTypeIsSubtypeOfString.ts, 47, 16))
 >position : Symbol(position, Decl(stringLiteralTypeIsSubtypeOfString.ts, 47, 37))
 
     localeCompare(that: string): number { return null; }
->localeCompare : Symbol(C.localeCompare, Decl(stringLiteralTypeIsSubtypeOfString.ts, 47, 81))
+>localeCompare : Symbol(localeCompare, Decl(stringLiteralTypeIsSubtypeOfString.ts, 47, 81))
 >that : Symbol(that, Decl(stringLiteralTypeIsSubtypeOfString.ts, 48, 18))
 
     match(regexp: any): RegExpMatchArray { return null; }
->match : Symbol(C.match, Decl(stringLiteralTypeIsSubtypeOfString.ts, 48, 56))
+>match : Symbol(match, Decl(stringLiteralTypeIsSubtypeOfString.ts, 48, 56))
 >regexp : Symbol(regexp, Decl(stringLiteralTypeIsSubtypeOfString.ts, 49, 10))
 >RegExpMatchArray : Symbol(RegExpMatchArray, Decl(lib.es5.d.ts, --, --))
 
     replace(searchValue: any, replaceValue: any): string { return null; }
->replace : Symbol(C.replace, Decl(stringLiteralTypeIsSubtypeOfString.ts, 49, 57))
+>replace : Symbol(replace, Decl(stringLiteralTypeIsSubtypeOfString.ts, 49, 57))
 >searchValue : Symbol(searchValue, Decl(stringLiteralTypeIsSubtypeOfString.ts, 50, 12))
 >replaceValue : Symbol(replaceValue, Decl(stringLiteralTypeIsSubtypeOfString.ts, 50, 29))
 
     search(regexp: any): number { return null; }
->search : Symbol(C.search, Decl(stringLiteralTypeIsSubtypeOfString.ts, 50, 73))
+>search : Symbol(search, Decl(stringLiteralTypeIsSubtypeOfString.ts, 50, 73))
 >regexp : Symbol(regexp, Decl(stringLiteralTypeIsSubtypeOfString.ts, 51, 11))
 
     slice(start?: number, end?: number): string { return null; }
->slice : Symbol(C.slice, Decl(stringLiteralTypeIsSubtypeOfString.ts, 51, 48))
+>slice : Symbol(slice, Decl(stringLiteralTypeIsSubtypeOfString.ts, 51, 48))
 >start : Symbol(start, Decl(stringLiteralTypeIsSubtypeOfString.ts, 52, 10))
 >end : Symbol(end, Decl(stringLiteralTypeIsSubtypeOfString.ts, 52, 25))
 
     split(separator: any, limit?: number): string[] { return null; }
->split : Symbol(C.split, Decl(stringLiteralTypeIsSubtypeOfString.ts, 52, 64))
+>split : Symbol(split, Decl(stringLiteralTypeIsSubtypeOfString.ts, 52, 64))
 >separator : Symbol(separator, Decl(stringLiteralTypeIsSubtypeOfString.ts, 53, 10))
 >limit : Symbol(limit, Decl(stringLiteralTypeIsSubtypeOfString.ts, 53, 25))
 
     substring(start: number, end?: number): string { return null; }
->substring : Symbol(C.substring, Decl(stringLiteralTypeIsSubtypeOfString.ts, 53, 68))
+>substring : Symbol(substring, Decl(stringLiteralTypeIsSubtypeOfString.ts, 53, 68))
 >start : Symbol(start, Decl(stringLiteralTypeIsSubtypeOfString.ts, 54, 14))
 >end : Symbol(end, Decl(stringLiteralTypeIsSubtypeOfString.ts, 54, 28))
 
     toLowerCase(): string { return null; }
->toLowerCase : Symbol(C.toLowerCase, Decl(stringLiteralTypeIsSubtypeOfString.ts, 54, 67))
+>toLowerCase : Symbol(toLowerCase, Decl(stringLiteralTypeIsSubtypeOfString.ts, 54, 67))
 
     toLocaleLowerCase(): string { return null; }
->toLocaleLowerCase : Symbol(C.toLocaleLowerCase, Decl(stringLiteralTypeIsSubtypeOfString.ts, 55, 42))
+>toLocaleLowerCase : Symbol(toLocaleLowerCase, Decl(stringLiteralTypeIsSubtypeOfString.ts, 55, 42))
 
     toUpperCase(): string { return null; }
->toUpperCase : Symbol(C.toUpperCase, Decl(stringLiteralTypeIsSubtypeOfString.ts, 56, 48))
+>toUpperCase : Symbol(toUpperCase, Decl(stringLiteralTypeIsSubtypeOfString.ts, 56, 48))
 
     toLocaleUpperCase(): string { return null; }
->toLocaleUpperCase : Symbol(C.toLocaleUpperCase, Decl(stringLiteralTypeIsSubtypeOfString.ts, 57, 42))
+>toLocaleUpperCase : Symbol(toLocaleUpperCase, Decl(stringLiteralTypeIsSubtypeOfString.ts, 57, 42))
 
     trim(): string { return null; }
->trim : Symbol(C.trim, Decl(stringLiteralTypeIsSubtypeOfString.ts, 58, 48))
+>trim : Symbol(trim, Decl(stringLiteralTypeIsSubtypeOfString.ts, 58, 48))
 
     length: number;
->length : Symbol(C.length, Decl(stringLiteralTypeIsSubtypeOfString.ts, 59, 35))
+>length : Symbol(length, Decl(stringLiteralTypeIsSubtypeOfString.ts, 59, 35))
 
     substr(from: number, length?: number): string { return null; }
->substr : Symbol(C.substr, Decl(stringLiteralTypeIsSubtypeOfString.ts, 60, 19))
+>substr : Symbol(substr, Decl(stringLiteralTypeIsSubtypeOfString.ts, 60, 19))
 >from : Symbol(from, Decl(stringLiteralTypeIsSubtypeOfString.ts, 61, 11))
 >length : Symbol(length, Decl(stringLiteralTypeIsSubtypeOfString.ts, 61, 24))
 
     valueOf(): string { return null; }
->valueOf : Symbol(C.valueOf, Decl(stringLiteralTypeIsSubtypeOfString.ts, 61, 66))
+>valueOf : Symbol(valueOf, Decl(stringLiteralTypeIsSubtypeOfString.ts, 61, 66))
 
     [index: number]: string;
 >index : Symbol(index, Decl(stringLiteralTypeIsSubtypeOfString.ts, 63, 5))
@@= skipped -106, +106 lines =@@
 >String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     foo: string;
->foo : Symbol(I.foo, Decl(stringLiteralTypeIsSubtypeOfString.ts, 71, 28))
+>foo : Symbol(foo, Decl(stringLiteralTypeIsSubtypeOfString.ts, 71, 28))
 }
 
 // BUG 831846
@@= skipped -54, +54 lines =@@
 
 enum E { A }
 >E : Symbol(E, Decl(stringLiteralTypeIsSubtypeOfString.ts, 86, 42))
->A : Symbol(E.A, Decl(stringLiteralTypeIsSubtypeOfString.ts, 88, 8))
+>A : Symbol(A, Decl(stringLiteralTypeIsSubtypeOfString.ts, 88, 8))
 
 function f14(x: 'a');
 >f14 : Symbol(f14, Decl(stringLiteralTypeIsSubtypeOfString.ts, 88, 12), Decl(stringLiteralTypeIsSubtypeOfString.ts, 89, 21), Decl(stringLiteralTypeIsSubtypeOfString.ts, 90, 19))
