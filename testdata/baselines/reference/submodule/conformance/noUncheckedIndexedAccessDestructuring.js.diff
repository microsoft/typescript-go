--- old.noUncheckedIndexedAccessDestructuring.js
+++ new.noUncheckedIndexedAccessDestructuring.js
@@= skipped -75, +75 lines =@@


 //// [noUncheckedIndexedAccessDestructuring.js]
-"use strict";
-var __rest = (this && this.__rest) || function (s, e) {
-    var t = {};
-    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
-        t[p] = s[p];
-    if (s != null && typeof Object.getOwnPropertySymbols === "function")
-        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
-            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
-                t[p[i]] = s[p[i]];
-        }
-    return t;
-};
 // Declaration forms for array destructuring
 // Destructuring from a simple array -> include undefined
 const [s1] = strArray;
@@= skipped -24, +12 lines =@@
 s3.push(undefined); // Should error, 'undefined' not part of s2's element type
 const { t1 } = strMap;
 t1.toString(); // Should error, t1 possibly undefined
-const t2 = __rest(strMap, []);
+const { ...t2 } = strMap;
 t2.z.toString(); // Should error
 {
     const { x, y, z } = numMapPoint;
@@= skipped -9, +9 lines =@@
     z.toFixed(); // Should error
 }
 {
-    const { x } = numMapPoint, q = __rest(numMapPoint, ["x"]);
+    const { x, ...q } = numMapPoint;
     x.toFixed(); // Should OK
     q.y.toFixed(); // Should OK
     q.z.toFixed(); // Should error
 }
 {
-    const { x } = numMapPoint, q = __rest(numMapPoint, ["x"]);
+    const { x, ...q } = numMapPoint;
     x.
         toFixed(); // Should OK
     q.