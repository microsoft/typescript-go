--- old.noUncheckedIndexedAccessDestructuring.js
+++ new.noUncheckedIndexedAccessDestructuring.js
@@= skipped -75, +75 lines =@@


 //// [noUncheckedIndexedAccessDestructuring.js]
-"use strict";
 var __rest = (this && this.__rest) || function (s, e) {
     var t = {};
     for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
@@= skipped -14, +13 lines =@@
 };
 // Declaration forms for array destructuring
 // Destructuring from a simple array -> include undefined
-var s1 = strArray[0];
+const [s1] = strArray;
 s1.toString(); // Should error, s1 possibly undefined
 // Destructuring a rest element -> do not include undefined
-var s2 = strArray.slice(0);
+const [...s2] = strArray;
 s2.push(undefined); // Should error, 'undefined' not part of s2's element type
 // Destructuring a rest element -> do not include undefined
-var s3 = strArray.slice(2);
+const [, , ...s3] = strArray;
 s3.push(undefined); // Should error, 'undefined' not part of s2's element type
-var t1 = strMap.t1;
+const { t1 } = strMap;
 t1.toString(); // Should error, t1 possibly undefined
-var t2 = __rest(strMap, []);
+const t2 = __rest(strMap, []);
 t2.z.toString(); // Should error
 {
-    var x = numMapPoint.x, y = numMapPoint.y, z = numMapPoint.z;
+    const { x, y, z } = numMapPoint;
     x.toFixed(); // Should OK
     y.toFixed(); // Should OK
     z.toFixed(); // Should error
 }
 {
-    var x = numMapPoint.x, q = __rest(numMapPoint, ["x"]);
+    const { x } = numMapPoint, q = __rest(numMapPoint, ["x"]);
     x.toFixed(); // Should OK
     q.y.toFixed(); // Should OK
     q.z.toFixed(); // Should error
 }
 {
-    var x = numMapPoint.x, q = __rest(numMapPoint, ["x"]);
+    const { x } = numMapPoint, q = __rest(numMapPoint, ["x"]);
     x.
         toFixed(); // Should OK
     q.
@@= skipped -34, +34 lines =@@
         z.toFixed(); // Should error
 }
 // Assignment forms
-target_string = strArray[0]; // Should error
-target_string_undef = strArray[0]; // Should OK
-target_string_arr = strArray.slice(3); // Should OK
+[target_string] = strArray; // Should error
+[target_string_undef] = strArray; // Should OK
+[, , , ...target_string_arr] = strArray; // Should OK
 {
-    var x = void 0, y = void 0, z = void 0;
-    (x = numMapPoint.x, y = numMapPoint.y, z = numMapPoint.z); // Should OK
-    var q = void 0;
-    (q = numMapPoint.q); // Should error
+    let x, y, z;
+    ({ x, y, z } = numMapPoint); // Should OK
+    let q;
+    ({ q } = numMapPoint); // Should error
 }