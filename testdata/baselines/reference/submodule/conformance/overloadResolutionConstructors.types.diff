--- old.overloadResolutionConstructors.types
+++ new.overloadResolutionConstructors.types
@@= skipped -32, +32 lines =@@
 }
 
 interface fn1 {
+>fn1 : fn1
+
     new (s: string): string;
 >s : string
 
@@= skipped -27, +29 lines =@@
 
 // Generic and non - generic overload where generic overload is the only candidate when called with type arguments
 interface fn2 {
+>fn2 : fn2
+
     new (s: string, n: number): number;
 >s : string
 >n : number
 
     new <T>(n: number, t: T): T;
+>T : T
 >n : number
 >t : T
 }
@@= skipped -45, +48 lines =@@
 
 // Generic overloads with differing arity called without type arguments
 interface fn3 {
+>fn3 : fn3
+
     new<T>(n: T): string;
+>T : T
 >n : T
 
     new<T, U>(s: string, t: T, u: U): U;
+>T : T
+>U : U
 >s : string
 >t : T
 >u : U
 
     new<T, U, V>(v: V, u: U, t: T): number;
+>T : T
+>U : U
+>V : V
 >v : V
 >u : U
 >t : T
@@= skipped -71, +79 lines =@@
 
 // Generic overloads with constraints called with type arguments that satisfy the constraints
 interface fn4 {
+>fn4 : fn4
+
     new<T extends string, U extends number>(n: T, m: U);
+>T : T
+>U : U
 >n : T
 >m : U
 
     new<T extends number, U extends string>(n: T, m: U);
+>T : T
+>U : U
 >n : T
 >m : U
 }
@@= skipped -77, +83 lines =@@
 
 // Non - generic overloads where contextual typing of function arguments has errors
 interface fn5 {
+>fn5 : fn5
+
     new(f: (n: string) => void): string;
 >f : (n: string) => void
 >n : string
