--- old.stringLiteralTypesOverloads03.symbols
+++ new.stringLiteralTypesOverloads03.symbols
@@ -5,10 +5,10 @@
 >Base : Symbol(Base, Decl(stringLiteralTypesOverloads03.ts, 0, 0))
 
     x: string;
->x : Symbol(Base.x, Decl(stringLiteralTypesOverloads03.ts, 0, 16))
+>x : Symbol(x, Decl(stringLiteralTypesOverloads03.ts, 0, 16))
 
     y: number;
->y : Symbol(Base.y, Decl(stringLiteralTypesOverloads03.ts, 1, 14))
+>y : Symbol(y, Decl(stringLiteralTypesOverloads03.ts, 1, 14))
 }
 
 interface HelloOrWorld extends Base {
@@ -16,7 +16,7 @@
 >Base : Symbol(Base, Decl(stringLiteralTypesOverloads03.ts, 0, 0))
 
     p1: boolean;
->p1 : Symbol(HelloOrWorld.p1, Decl(stringLiteralTypesOverloads03.ts, 5, 37))
+>p1 : Symbol(p1, Decl(stringLiteralTypesOverloads03.ts, 5, 37))
 }
 
 interface JustHello extends Base {
@@ -24,7 +24,7 @@
 >Base : Symbol(Base, Decl(stringLiteralTypesOverloads03.ts, 0, 0))
 
     p2: boolean;
->p2 : Symbol(JustHello.p2, Decl(stringLiteralTypesOverloads03.ts, 9, 34))
+>p2 : Symbol(p2, Decl(stringLiteralTypesOverloads03.ts, 9, 34))
 }
 
 interface JustWorld extends Base {
@@ -32,7 +32,7 @@
 >Base : Symbol(Base, Decl(stringLiteralTypesOverloads03.ts, 0, 0))
 
     p3: boolean;
->p3 : Symbol(JustWorld.p3, Decl(stringLiteralTypesOverloads03.ts, 13, 34))
+>p3 : Symbol(p3, Decl(stringLiteralTypesOverloads03.ts, 13, 34))
 }
 
 let hello: "hello";
