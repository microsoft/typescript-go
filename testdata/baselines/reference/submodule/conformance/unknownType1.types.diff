--- old.unknownType1.types
+++ new.unknownType1.types
@@= skipped -50, +50 lines =@@
 
 type T20<T> = T & {};  // T & {}
 >T20 : T20<T>
+>T : T
 
 type T21<T> = T | {};  // T | {}
 >T21 : T21<T>
+>T : T
 
 type T22<T> = T & unknown;  // T
 >T22 : T
+>T : T
 
 type T23<T> = T | unknown;  // unknown
 >T23 : unknown
+>T : T
 
 // unknown in conditional types
 
 type T30<T> = unknown extends T ? true : false;  // Deferred
 >T30 : T30<T>
+>T : T
 >true : true
 >false : false
 
 type T31<T> = T extends unknown ? true : false;  // Deferred (so it distributes)
 >T31 : T31<T>
+>T : T
 >true : true
 >false : false
 
 type T32<T> = never extends T ? true : false;  // true
 >T32 : T32<T>
+>T : T
 >true : true
 >false : false
 
 type T33<T> = T extends never ? true : false;  // Deferred
 >T33 : T33<T>
+>T : T
 >true : true
 >false : false
 
 type T35<T> = T extends unknown ? { x: T } : false;
 >T35 : T35<T>
+>T : T
 >x : T
 >false : false
 
@@= skipped -146, +155 lines =@@
     if (typeof x === "string" || typeof x === "number") {
 >typeof x === "string" || typeof x === "number" : boolean
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"string" : "string"
 >typeof x === "number" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"number" : "number"
 
@@= skipped -33, +33 lines =@@
 
 type T50<T> = { [P in keyof T]: number };
 >T50 : T50<T>
+>T : T
+>P : P
 
 type T51 = T50<any>;  // { [x: string]: number }
 >T51 : T50<any>
@@= skipped -11, +13 lines =@@
 
 function f21<T>(pAny: any, pNever: never, pT: T) {
 >f21 : <T>(pAny: any, pNever: never, pT: T) => void
+>T : T
 >pAny : any
 >pNever : never
 >pT : T
@@= skipped -91, +92 lines =@@
 
 function f23<T extends unknown>(x: T) {
 >f23 : <T extends unknown>(x: T) => void
+>T : T
 >x : T
 
     let y: object = x;  // Error
@@= skipped -129, +130 lines =@@
 
 function f30<T, U extends unknown>(t: T, u: U) {
 >f30 : <T, U extends unknown>(t: T, u: U) => void
+>T : T
+>U : U
 >t : T
 >u : U
 
@@= skipped -21, +23 lines =@@
 
 type IsDefinitelyDefined<T extends unknown> = [T] extends [{}] ? true : false;
 >IsDefinitelyDefined : IsDefinitelyDefined<T>
+>T : T
 >true : true
 >false : false
 
@@= skipped -8, +9 lines =@@
 
 function oops<T extends unknown>(arg: T): {} {
 >oops : <T extends unknown>(arg: T) => {}
+>T : T
 >arg : T
 
     return arg;  // Error
