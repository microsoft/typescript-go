--- old.callNonGenericFunctionWithTypeArguments.symbols
+++ new.callNonGenericFunctionWithTypeArguments.symbols
@@= skipped -31, +31 lines =@@
 >C : Symbol(C, Decl(callNonGenericFunctionWithTypeArguments.ts, 10, 23))
 
     f(x: number) {
->f : Symbol(C.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 12, 9))
+>f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 12, 9))
 >x : Symbol(x, Decl(callNonGenericFunctionWithTypeArguments.ts, 13, 6))
 
         return null;
@@= skipped -8, +8 lines =@@
 }
 var r4 = (new C()).f<string>(1);
 >r4 : Symbol(r4, Decl(callNonGenericFunctionWithTypeArguments.ts, 17, 3))
->(new C()).f : Symbol(C.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 12, 9))
+>(new C()).f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 12, 9))
 >C : Symbol(C, Decl(callNonGenericFunctionWithTypeArguments.ts, 10, 23))
->f : Symbol(C.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 12, 9))
+>f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 12, 9))
 
 interface I {
 >I : Symbol(I, Decl(callNonGenericFunctionWithTypeArguments.ts, 17, 32))
 
     f(x: number): any;
->f : Symbol(I.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 19, 13))
+>f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 19, 13))
 >x : Symbol(x, Decl(callNonGenericFunctionWithTypeArguments.ts, 20, 6))
 }
 var i: I;
@@= skipped -17, +17 lines =@@
 
 var r5 = i.f<string>(1);
 >r5 : Symbol(r5, Decl(callNonGenericFunctionWithTypeArguments.ts, 23, 3))
->i.f : Symbol(I.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 19, 13))
+>i.f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 19, 13))
 >i : Symbol(i, Decl(callNonGenericFunctionWithTypeArguments.ts, 22, 3))
->f : Symbol(I.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 19, 13))
+>f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 19, 13))
 
 class C2 {
 >C2 : Symbol(C2, Decl(callNonGenericFunctionWithTypeArguments.ts, 23, 24))
 
     f(x: number) {
->f : Symbol(C2.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 25, 10))
+>f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 25, 10))
 >x : Symbol(x, Decl(callNonGenericFunctionWithTypeArguments.ts, 26, 6))
 
         return null;
@@= skipped -16, +16 lines =@@
 }
 var r6 = (new C2()).f<string>(1);
 >r6 : Symbol(r6, Decl(callNonGenericFunctionWithTypeArguments.ts, 30, 3))
->(new C2()).f : Symbol(C2.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 25, 10))
+>(new C2()).f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 25, 10))
 >C2 : Symbol(C2, Decl(callNonGenericFunctionWithTypeArguments.ts, 23, 24))
->f : Symbol(C2.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 25, 10))
+>f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 25, 10))
 
 interface I2 {
 >I2 : Symbol(I2, Decl(callNonGenericFunctionWithTypeArguments.ts, 30, 33))
 
     f(x: number);
->f : Symbol(I2.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 32, 14))
+>f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 32, 14))
 >x : Symbol(x, Decl(callNonGenericFunctionWithTypeArguments.ts, 33, 6))
 }
 var i2: I2;
@@= skipped -17, +17 lines =@@
 
 var r7 = i2.f<string>(1);
 >r7 : Symbol(r7, Decl(callNonGenericFunctionWithTypeArguments.ts, 36, 3))
->i2.f : Symbol(I2.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 32, 14))
+>i2.f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 32, 14))
 >i2 : Symbol(i2, Decl(callNonGenericFunctionWithTypeArguments.ts, 35, 3))
->f : Symbol(I2.f, Decl(callNonGenericFunctionWithTypeArguments.ts, 32, 14))
+>f : Symbol(f, Decl(callNonGenericFunctionWithTypeArguments.ts, 32, 14))
 
 var a;
 >a : Symbol(a, Decl(callNonGenericFunctionWithTypeArguments.ts, 38, 3))
