--- old.subtypingWithConstructSignatures4.types
+++ new.subtypingWithConstructSignatures4.types
@@= skipped -24, +24 lines =@@
 declare function foo1(a: new <T>(x: T) => T[]);
 >foo1 : { (a: new <T>(x: T) => T[]): any; (a: any): any; }
 >a : new <T>(x: T) => T[]
+>T : T
 >x : T
 
 declare function foo1(a: any): any;
@@= skipped -9, +10 lines =@@
 declare function foo2(a2: new <T>(x: T) => string[]);
 >foo2 : { (a2: new <T>(x: T) => string[]): any; (a: any): any; }
 >a2 : new <T>(x: T) => string[]
+>T : T
 >x : T
 
 declare function foo2(a: any): any;
@@= skipped -9, +10 lines =@@
 declare function foo3(a3: new <T>(x: T) => void);
 >foo3 : { (a3: new <T>(x: T) => void): any; (a: any): any; }
 >a3 : new <T>(x: T) => void
+>T : T
 >x : T
 
 declare function foo3(a: any): any;
@@= skipped -9, +10 lines =@@
 declare function foo4(a4: new <T, U>(x: T, y: U) => string);
 >foo4 : { (a4: new <T, U>(x: T, y: U) => string): any; (a: any): any; }
 >a4 : new <T, U>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 
@@= skipped -10, +12 lines =@@
 declare function foo5(a5: new <T, U>(x: new (arg: T) => U) => T);
 >foo5 : { (a5: new <T, U>(x: new (arg: T) => U) => T): any; (a: any): any; }
 >a5 : new <T, U>(x: new (arg: T) => U) => T
+>T : T
+>U : U
 >x : new (arg: T) => U
 >arg : T
 
@@= skipped -10, +12 lines =@@
 declare function foo6(a6: new <T extends Base>(x: new (arg: T) => Derived) => T);
 >foo6 : { (a6: new <T extends Base>(x: new (arg: T) => Derived) => T): any; (a: any): any; }
 >a6 : new <T extends Base>(x: new (arg: T) => Derived) => T
+>T : T
 >x : new (arg: T) => Derived
 >arg : T
 
@@= skipped -10, +11 lines =@@
 declare function foo11(a11: new <T>(x: { foo: T }, y: { foo: T; bar: T }) => Base);
 >foo11 : { (a11: new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base): any; (a: any): any; }
 >a11 : new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
+>T : T
 >x : { foo: T; }
 >foo : T
 >y : { foo: T; bar: T; }
@@= skipped -13, +14 lines =@@
 declare function foo15(a15: new <T>(x: { a: T; b: T }) => T[]);
 >foo15 : { (a15: new <T>(x: { a: T; b: T; }) => T[]): any; (a: any): any; }
 >a15 : new <T>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
@@= skipped -11, +12 lines =@@
 declare function foo16(a16: new <T extends Base>(x: { a: T; b: T }) => T[]);
 >foo16 : { (a16: new <T extends Base>(x: { a: T; b: T; }) => T[]): any; (a: any): any; }
 >a16 : new <T extends Base>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
@@= skipped -13, +14 lines =@@
 >a17 : { new <T extends Derived>(x: new (a: T) => T): T[]; new <T extends Base>(x: new (a: T) => T): T[]; }
 
     new <T extends Derived>(x: new (a: T) => T): T[];
+>T : T
 >x : new (a: T) => T
 >a : T
 
     new <T extends Base>(x: new (a: T) => T): T[];        
+>T : T
 >x : new (a: T) => T
 >a : T
 
@@= skipped -20, +22 lines =@@
 >x : { new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }
 
         new <T extends Derived>(a: T): T;
+>T : T
 >a : T
 
         new <T extends Base>(a: T): T;
+>T : T
 >a : T
 
     }): any[];
@@= skipped -10, +12 lines =@@
 >x : { new <T extends Derived2>(a: T): T; new <T extends Base>(a: T): T; }
 
         new <T extends Derived2>(a: T): T;
+>T : T
 >a : T
 
         new <T extends Base>(a: T): T;
+>T : T
 >a : T
 
     }): any[];
@@= skipped -13, +15 lines =@@
 
 var r1arg: new <T>(x: T) => T[];
 >r1arg : new <T>(x: T) => T[]
+>T : T
 >x : T
 
 var r1arg2: new <T>(x: T) => T[];
 >r1arg2 : new <T>(x: T) => T[]
+>T : T
 >x : T
 
 var r1 = foo1(r1arg);
@@= skipped -13, +15 lines =@@
 >r1arg : new <T>(x: T) => T[]
 
 var r1a = [r1arg, r1arg2];
->r1a : (new <T>(x: T) => T[])[]
->[r1arg, r1arg2] : (new <T>(x: T) => T[])[]
+>r1a : new <T>(x: T) => T[][]
+>[r1arg, r1arg2] : new <T>(x: T) => T[][]
 >r1arg : new <T>(x: T) => T[]
 >r1arg2 : new <T>(x: T) => T[]
 
 var r1b = [r1arg2, r1arg];
->r1b : (new <T>(x: T) => T[])[]
->[r1arg2, r1arg] : (new <T>(x: T) => T[])[]
+>r1b : new <T>(x: T) => T[][]
+>[r1arg2, r1arg] : new <T>(x: T) => T[][]
 >r1arg2 : new <T>(x: T) => T[]
 >r1arg : new <T>(x: T) => T[]
 
 var r2arg: new <T>(x: T) => string[];
 >r2arg : new <T>(x: T) => string[]
+>T : T
 >x : T
 
 var r2arg2: new <T>(x: T) => string[];
 >r2arg2 : new <T>(x: T) => string[]
+>T : T
 >x : T
 
 var r2 = foo2(r2arg);
@@= skipped -26, +28 lines =@@
 >r2arg : new <T>(x: T) => string[]
 
 var r2a = [r2arg, r2arg2];
->r2a : (new <T>(x: T) => string[])[]
->[r2arg, r2arg2] : (new <T>(x: T) => string[])[]
+>r2a : new <T>(x: T) => string[][]
+>[r2arg, r2arg2] : new <T>(x: T) => string[][]
 >r2arg : new <T>(x: T) => string[]
 >r2arg2 : new <T>(x: T) => string[]
 
 var r2b = [r2arg2, r2arg];
->r2b : (new <T>(x: T) => string[])[]
->[r2arg2, r2arg] : (new <T>(x: T) => string[])[]
+>r2b : new <T>(x: T) => string[][]
+>[r2arg2, r2arg] : new <T>(x: T) => string[][]
 >r2arg2 : new <T>(x: T) => string[]
 >r2arg : new <T>(x: T) => string[]
 
 var r3arg: new <T>(x: T) => T;
 >r3arg : new <T>(x: T) => T
+>T : T
 >x : T
 
 var r3arg2: new <T>(x: T) => void;
 >r3arg2 : new <T>(x: T) => void
+>T : T
 >x : T
 
 var r3 = foo3(r3arg);
@@= skipped -26, +28 lines =@@
 >r3arg : new <T>(x: T) => T
 
 var r3a = [r3arg, r3arg2];
->r3a : (new <T>(x: T) => void)[]
->[r3arg, r3arg2] : (new <T>(x: T) => void)[]
+>r3a : new <T>(x: T) => void[]
+>[r3arg, r3arg2] : new <T>(x: T) => void[]
 >r3arg : new <T>(x: T) => T
 >r3arg2 : new <T>(x: T) => void
 
 var r3b = [r3arg2, r3arg];
->r3b : (new <T>(x: T) => void)[]
->[r3arg2, r3arg] : (new <T>(x: T) => void)[]
+>r3b : new <T>(x: T) => void[]
+>[r3arg2, r3arg] : new <T>(x: T) => void[]
 >r3arg2 : new <T>(x: T) => void
 >r3arg : new <T>(x: T) => T
 
 var r4arg: new <T, U>(x: T, y: U) => string;
 >r4arg : new <T, U>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 
 var r4arg2: new <T, U>(x: T, y: U) => string;
 >r4arg2 : new <T, U>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 
@@= skipped -28, +32 lines =@@
 >r4arg : new <T, U>(x: T, y: U) => string
 
 var r4a = [r4arg, r4arg2];
->r4a : (new <T, U>(x: T, y: U) => string)[]
->[r4arg, r4arg2] : (new <T, U>(x: T, y: U) => string)[]
+>r4a : new <T, U>(x: T, y: U) => string[]
+>[r4arg, r4arg2] : new <T, U>(x: T, y: U) => string[]
 >r4arg : new <T, U>(x: T, y: U) => string
 >r4arg2 : new <T, U>(x: T, y: U) => string
 
 var r4b = [r4arg2, r4arg];
->r4b : (new <T, U>(x: T, y: U) => string)[]
->[r4arg2, r4arg] : (new <T, U>(x: T, y: U) => string)[]
+>r4b : new <T, U>(x: T, y: U) => string[]
+>[r4arg2, r4arg] : new <T, U>(x: T, y: U) => string[]
 >r4arg2 : new <T, U>(x: T, y: U) => string
 >r4arg : new <T, U>(x: T, y: U) => string
 
 var r5arg: new <T, U>(x: new (arg: T) => U) => T;
 >r5arg : new <T, U>(x: new (arg: T) => U) => T
+>T : T
+>U : U
 >x : new (arg: T) => U
 >arg : T
 
 var r5arg2: new <T, U>(x: new (arg: T) => U) => T;
 >r5arg2 : new <T, U>(x: new (arg: T) => U) => T
+>T : T
+>U : U
 >x : new (arg: T) => U
 >arg : T
 
@@= skipped -28, +32 lines =@@
 >r5arg : new <T, U>(x: new (arg: T) => U) => T
 
 var r5a = [r5arg, r5arg2];
->r5a : (new <T, U>(x: new (arg: T) => U) => T)[]
->[r5arg, r5arg2] : (new <T, U>(x: new (arg: T) => U) => T)[]
+>r5a : new <T, U>(x: new (arg: T) => U) => T[]
+>[r5arg, r5arg2] : new <T, U>(x: new (arg: T) => U) => T[]
 >r5arg : new <T, U>(x: new (arg: T) => U) => T
 >r5arg2 : new <T, U>(x: new (arg: T) => U) => T
 
 var r5b = [r5arg2, r5arg];
->r5b : (new <T, U>(x: new (arg: T) => U) => T)[]
->[r5arg2, r5arg] : (new <T, U>(x: new (arg: T) => U) => T)[]
+>r5b : new <T, U>(x: new (arg: T) => U) => T[]
+>[r5arg2, r5arg] : new <T, U>(x: new (arg: T) => U) => T[]
 >r5arg2 : new <T, U>(x: new (arg: T) => U) => T
 >r5arg : new <T, U>(x: new (arg: T) => U) => T
 
 var r6arg: new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T;
 >r6arg : new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T
+>T : T
+>U : U
 >x : new (arg: T) => U
 >arg : T
 
 var r6arg2: new <T extends Base>(x: new (arg: T) => Derived) => T;
 >r6arg2 : new <T extends Base>(x: new (arg: T) => Derived) => T
+>T : T
 >x : new (arg: T) => Derived
 >arg : T
 
@@= skipped -28, +31 lines =@@
 >r6arg : new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T
 
 var r6a = [r6arg, r6arg2];
->r6a : (new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T)[]
->[r6arg, r6arg2] : (new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T)[]
+>r6a : new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T[]
+>[r6arg, r6arg2] : new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T[]
 >r6arg : new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T
 >r6arg2 : new <T extends Base>(x: new (arg: T) => Derived) => T
 
 var r6b = [r6arg2, r6arg];
->r6b : (new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T)[]
->[r6arg2, r6arg] : (new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T)[]
+>r6b : new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T[]
+>[r6arg2, r6arg] : new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T[]
 >r6arg2 : new <T extends Base>(x: new (arg: T) => Derived) => T
 >r6arg : new <T extends Base, U extends Derived>(x: new (arg: T) => U) => T
 
 var r11arg: new <T, U>(x: { foo: T }, y: { foo: U; bar: U }) => Base;
 >r11arg : new <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
+>T : T
+>U : U
 >x : { foo: T; }
 >foo : T
 >y : { foo: U; bar: U; }
@@= skipped -21, +23 lines =@@
 
 var r11arg2: new <T>(x: { foo: T }, y: { foo: T; bar: T }) => Base;
 >r11arg2 : new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
+>T : T
 >x : { foo: T; }
 >foo : T
 >y : { foo: T; bar: T; }
@@= skipped -13, +14 lines =@@
 >r11arg : new <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
 
 var r11a = [r11arg, r11arg2];
->r11a : (new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base)[]
->[r11arg, r11arg2] : (new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base)[]
+>r11a : new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base[]
+>[r11arg, r11arg2] : new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base[]
 >r11arg : new <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
 >r11arg2 : new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
 
 var r11b = [r11arg2, r11arg];
->r11b : (new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base)[]
->[r11arg2, r11arg] : (new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base)[]
+>r11b : new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base[]
+>[r11arg2, r11arg] : new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base[]
 >r11arg2 : new <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
 >r11arg : new <T, U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
 
 var r15arg: new <U, V>(x: { a: U; b: V; }) => U[];
 >r15arg : new <U, V>(x: { a: U; b: V; }) => U[]
+>U : U
+>V : V
 >x : { a: U; b: V; }
 >a : U
 >b : V
 
 var r15arg2: new <T>(x: { a: T; b: T }) => T[];
 >r15arg2 : new <T>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
@@= skipped -30, +33 lines =@@
 >r15arg : new <U, V>(x: { a: U; b: V; }) => U[]
 
 var r15a = [r15arg, r15arg2];
->r15a : (new <T>(x: { a: T; b: T; }) => T[])[]
->[r15arg, r15arg2] : (new <T>(x: { a: T; b: T; }) => T[])[]
+>r15a : new <T>(x: { a: T; b: T; }) => T[][]
+>[r15arg, r15arg2] : new <T>(x: { a: T; b: T; }) => T[][]
 >r15arg : new <U, V>(x: { a: U; b: V; }) => U[]
 >r15arg2 : new <T>(x: { a: T; b: T; }) => T[]
 
 var r15b = [r15arg2, r15arg];
->r15b : (new <T>(x: { a: T; b: T; }) => T[])[]
->[r15arg2, r15arg] : (new <T>(x: { a: T; b: T; }) => T[])[]
+>r15b : new <T>(x: { a: T; b: T; }) => T[][]
+>[r15arg2, r15arg] : new <T>(x: { a: T; b: T; }) => T[][]
 >r15arg2 : new <T>(x: { a: T; b: T; }) => T[]
 >r15arg : new <U, V>(x: { a: U; b: V; }) => U[]
 
 var r16arg: new <T extends Base>(x: { a: T; b: T }) => T[];
 >r16arg : new <T extends Base>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
 
 var r16arg2: new <T extends Base>(x: { a: T; b: T }) => T[];
 >r16arg2 : new <T extends Base>(x: { a: T; b: T; }) => T[]
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
@@= skipped -30, +32 lines =@@
 >r16arg : new <T extends Base>(x: { a: T; b: T; }) => T[]
 
 var r16a = [r16arg, r16arg2];
->r16a : (new <T extends Base>(x: { a: T; b: T; }) => T[])[]
->[r16arg, r16arg2] : (new <T extends Base>(x: { a: T; b: T; }) => T[])[]
+>r16a : new <T extends Base>(x: { a: T; b: T; }) => T[][]
+>[r16arg, r16arg2] : new <T extends Base>(x: { a: T; b: T; }) => T[][]
 >r16arg : new <T extends Base>(x: { a: T; b: T; }) => T[]
 >r16arg2 : new <T extends Base>(x: { a: T; b: T; }) => T[]
 
 var r16b = [r16arg2, r16arg];
->r16b : (new <T extends Base>(x: { a: T; b: T; }) => T[])[]
->[r16arg2, r16arg] : (new <T extends Base>(x: { a: T; b: T; }) => T[])[]
+>r16b : new <T extends Base>(x: { a: T; b: T; }) => T[][]
+>[r16arg2, r16arg] : new <T extends Base>(x: { a: T; b: T; }) => T[][]
 >r16arg2 : new <T extends Base>(x: { a: T; b: T; }) => T[]
 >r16arg : new <T extends Base>(x: { a: T; b: T; }) => T[]
 
 var r17arg: new <T>(x: new (a: T) => T) => T[];
 >r17arg : new <T>(x: new (a: T) => T) => T[]
+>T : T
 >x : new (a: T) => T
 >a : T
 
@@= skipped -25, +26 lines =@@
 var r18arg: new (x: new <T>(a: T) => T) => any[];
 >r18arg : new (x: new <T>(a: T) => T) => any[]
 >x : new <T>(a: T) => T
+>T : T
 >a : T
 
 var r18 = foo18(r18arg);
