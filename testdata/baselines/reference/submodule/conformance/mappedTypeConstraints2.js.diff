--- old.mappedTypeConstraints2.js
+++ new.mappedTypeConstraints2.js
@@= skipped -86, +86 lines =@@


 //// [mappedTypeConstraints2.js]
-"use strict";
 function f1(obj, key) {
     const x = obj[key];
 }
@@= skipped -63, +62 lines =@@
     [P in K as P extends `_${string}` ? P : never]: P;
 };
 declare function f5<K extends string>(obj: Mapped5<K>, key: keyof Mapped5<K>): void;
+// repro from #53066#issuecomment-1913384757
 type Mapped6<K extends string> = {
     [P in K as `_${P}`]: P;
 };
 declare function f6<K extends string>(obj: Mapped6<K>, key: keyof Mapped6<K>): void;
+// Repro from #47794
 type Foo<T extends string> = {
     [RemappedT in T as `get${RemappedT}`]: RemappedT;
 };
-declare const get: <T extends string>(t: T, foo: Foo<T>) => T;
+declare const get: <T extends string>(t: T, foo: Foo<T>) => T; // Type 'Foo<T>[`get${T}`]' is not assignable to type 'T'
+// Repro from #48626
 interface Bounds {
     min: number;
     max: number;
@@= skipped -16, +19 lines =@@
     [K in keyof T as T[K] extends number | undefined ? K : never]: Bounds;
 };
 declare function validate<T extends object>(obj: T, bounds: NumericBoundsOf<T>): boolean;
+// repro from #50030
 type ObjectWithUnderscoredKeys<K extends string> = {
     [k in K as `_${k}`]: true;
 };