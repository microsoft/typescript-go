--- old.objectRestParameter.errors.txt
+++ new.objectRestParameter.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+error TS2318: Cannot find global type 'Array'.
+error TS2318: Cannot find global type 'Function'.
+error TS2318: Cannot find global type 'IArguments'.
+error TS2318: Cannot find global type 'RegExp'.
+error TS2318: Cannot find global type 'String'.
+error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+
+
+!!! error TS2318: Cannot find global type 'Array'.
+!!! error TS2318: Cannot find global type 'Function'.
+!!! error TS2318: Cannot find global type 'IArguments'.
+!!! error TS2318: Cannot find global type 'RegExp'.
+!!! error TS2318: Cannot find global type 'String'.
+!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+==== objectRestParameter.ts (0 errors) ====
+    function cloneAgain({ a, ...clone }: { a: number, b: string }): void {
+    }
+    
+    declare function suddenly(f: (a: { x: { z, ka }, y: string }) => void);
+    suddenly(({ x: a, ...rest }) => rest.y);
+    suddenly(({ x: { z = 12, ...nested }, ...rest } = { x: { z: 1, ka: 1 }, y: 'noo' }) => rest.y + nested.ka);
+    
+    class C {
+        m({ a, ...clone }: { a: number, b: string}): void {
+            // actually, never mind, don't clone
+        }
+        set p({ a, ...clone }: { a: number, b: string}) {
+            // actually, never mind, don't clone
+        }
+    }
+    function foobar({ bar={}, ...opts }: any = {}) {
+    }
+    foobar();
+    foobar({ baz: 'hello' });
+    foobar({ bar: { greeting: 'hello' } });
+    
