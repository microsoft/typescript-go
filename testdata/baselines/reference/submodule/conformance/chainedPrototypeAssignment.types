//// [tests/cases/conformance/salsa/chainedPrototypeAssignment.ts] ////

=== use.js ===
/// <reference path='./types.d.ts'/>
var mod = require('./mod');
>mod : typeof import("mod")
>require('./mod') : typeof import("mod")
>require : (name: string) => any
>'./mod' : "./mod"

var a = new mod.A()
>a : any
>new mod.A() : any
>mod.A : any
>mod : typeof import("mod")
>A : any

var b = new mod.B()
>b : any
>new mod.B() : any
>mod.B : any
>mod : typeof import("mod")
>B : any

a.m('nope')
>a.m('nope') : any
>a.m : any
>a : any
>m : any
>'nope' : "nope"

b.m('not really')
>b.m('not really') : any
>b.m : any
>b : any
>m : any
>'not really' : "not really"

=== types.d.ts ===
declare function require(name: string): any;
>require : (name: string) => any
>name : string

declare var exports: any;
>exports : any

=== mod.js ===
/// <reference path='./types.d.ts'/>
var A = function A() {
>A : () => void
>function A() {    this.a = 1} : () => void
>A : () => void

    this.a = 1
>this.a = 1 : 1
>this.a : any
>this : any
>a : any
>1 : 1
}
var B = function B() {
>B : () => void
>function B() {    this.b = 2} : () => void
>B : () => void

    this.b = 2
>this.b = 2 : 2
>this.b : any
>this : any
>b : any
>2 : 2
}
exports.A = A
>A : any
>A : any
>exports.A = A : any
>exports.A : any
>exports : any
>A : any
>A : any

exports.B = B
>B : any
>B : any
>exports.B = B : any
>exports.B : any
>exports : any
>B : any
>B : any

A.prototype = B.prototype = {
>A.prototype = B.prototype = {    /** @param {number} n */    m(n) {        return n + 1    }} : { m: (n: any) => any; }
>A.prototype : any
>A : any
>prototype : any
>B.prototype = {    /** @param {number} n */    m(n) {        return n + 1    }} : { m: (n: any) => any; }
>B.prototype : any
>B : any
>prototype : any
>{    /** @param {number} n */    m(n) {        return n + 1    }} : { m: (n: any) => any; }

    /** @param {number} n */
    m(n) {
>m : (n: any) => any
>n : any

        return n + 1
>n + 1 : any
>n : any
>1 : 1
    }
}

