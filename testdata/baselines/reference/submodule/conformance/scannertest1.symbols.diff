--- old.scannertest1.symbols
+++ new.scannertest1.symbols
@@= skipped -6, +6 lines =@@
 >CharacterInfo : Symbol(CharacterInfo, Decl(scannertest1.ts, 0, 0))
 
     public static isDecimalDigit(c: number): boolean {
->isDecimalDigit : Symbol(CharacterInfo.isDecimalDigit, Decl(scannertest1.ts, 2, 21))
+>isDecimalDigit : Symbol(isDecimalDigit, Decl(scannertest1.ts, 2, 21))
 >c : Symbol(c, Decl(scannertest1.ts, 3, 33))
 
         return c >= CharacterCodes._0 && c <= CharacterCodes._9;
@@= skipped -9, +9 lines =@@
     }
 
     public static isHexDigit(c: number): boolean {
->isHexDigit : Symbol(CharacterInfo.isHexDigit, Decl(scannertest1.ts, 5, 5))
+>isHexDigit : Symbol(isHexDigit, Decl(scannertest1.ts, 5, 5))
 >c : Symbol(c, Decl(scannertest1.ts, 7, 29))
 
         return isDecimalDigit(c) ||
@@= skipped -16, +16 lines =@@
     }
 
     public static hexValue(c: number): number {
->hexValue : Symbol(CharacterInfo.hexValue, Decl(scannertest1.ts, 11, 5))
+>hexValue : Symbol(hexValue, Decl(scannertest1.ts, 11, 5))
 >c : Symbol(c, Decl(scannertest1.ts, 13, 27))
 
         Debug.assert(isHexDigit(c));
