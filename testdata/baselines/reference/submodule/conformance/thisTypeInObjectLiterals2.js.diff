--- old.thisTypeInObjectLiterals2.js
+++ new.thisTypeInObjectLiterals2.js
@@= skipped -244, +244 lines =@@


 //// [thisTypeInObjectLiterals2.js]
-"use strict";
 // In methods of an object literal with no contextual type, 'this' has the type
 // of the object literal.
-var obj1 = {
+let obj1 = {
     a: 1,
-    f: function () {
+    f() {
         return this.a;
     },
     b: "hello",
     c: {
-        g: function () {
+        g() {
             this.g();
         }
     },
@@= skipped -24, +23 lines =@@
         this.b = value;
     }
 };
-var p1 = {
-    x: 10,
-    y: 20,
-    moveBy: function (dx, dy, dz) {
-        this.x += dx;
-        this.y += dy;
-        if (this.z && dz) {
-            this.z += dz;
-        }
-    }
-};
-var p2 = {
-    x: 10,
-    y: 20,
-    moveBy: function (dx, dy, dz) {
-        this.x += dx;
-        this.y += dy;
-        if (this.z && dz) {
-            this.z += dz;
-        }
-    }
-};
-var p3 = {
-    x: 10,
-    y: 20,
-    moveBy: function (dx, dy, dz) {
-        this.x += dx;
-        this.y += dy;
-        if (this.z && dz) {
-            this.z += dz;
-        }
-    }
-};
-var p4 = {
-    x: 10,
-    y: 20,
-    moveBy: function (dx, dy, dz) {
+let p1 = {
+    x: 10,
+    y: 20,
+    moveBy(dx, dy, dz) {
+        this.x += dx;
+        this.y += dy;
+        if (this.z && dz) {
+            this.z += dz;
+        }
+    }
+};
+let p2 = {
+    x: 10,
+    y: 20,
+    moveBy(dx, dy, dz) {
+        this.x += dx;
+        this.y += dy;
+        if (this.z && dz) {
+            this.z += dz;
+        }
+    }
+};
+let p3 = {
+    x: 10,
+    y: 20,
+    moveBy(dx, dy, dz) {
+        this.x += dx;
+        this.y += dy;
+        if (this.z && dz) {
+            this.z += dz;
+        }
+    }
+};
+let p4 = {
+    x: 10,
+    y: 20,
+    moveBy(dx, dy, dz) {
         this.x += dx;
         this.y += dy;
         if (this.z && dz) {
@@= skipped -47, +47 lines =@@
 f1({
     x: 10,
     y: 20,
-    moveBy: function (dx, dy, dz) {
+    moveBy(dx, dy, dz) {
         this.x += dx;
         this.y += dy;
         if (this.z && dz) {
@@= skipped -11, +11 lines =@@
 f2({
     x: 10,
     y: 20,
-    moveBy: function (dx, dy, dz) {
+    moveBy(dx, dy, dz) {
         this.x += dx;
         this.y += dy;
         if (this.z && dz) {
@@= skipped -8, +8 lines =@@
         }
     }
 });
-var x1 = makeObject({
-    data: { x: 0, y: 0 },
-    methods: {
-        moveBy: function (dx, dy) {
-            this.x += dx; // Strongly typed this
-            this.y += dy; // Strongly typed this
-        }
-    }
-});
-var x2 = makeObject2({
-    data: { x: 0, y: 0 },
-    methods: {
-        moveBy: function (dx, dy) {
-            this.x += dx; // Strongly typed this
-            this.y += dy; // Strongly typed this
-        }
-    }
-});
-var p10 = defineProp(p1, "foo", { value: 42 });
+let x1 = makeObject({
+    data: { x: 0, y: 0 },
+    methods: {
+        moveBy(dx, dy) {
+            this.x += dx; // Strongly typed this
+            this.y += dy; // Strongly typed this
+        }
+    }
+});
+let x2 = makeObject2({
+    data: { x: 0, y: 0 },
+    methods: {
+        moveBy(dx, dy) {
+            this.x += dx; // Strongly typed this
+            this.y += dy; // Strongly typed this
+        }
+    }
+});
+let p10 = defineProp(p1, "foo", { value: 42 });
 p10.foo = p10.foo + 1;
-var p11 = defineProp(p1, "bar", {
-    get: function () {
+let p11 = defineProp(p1, "bar", {
+    get() {
         return this.x;
     },
-    set: function (value) {
+    set(value) {
         this.x = value;
     }
 });
 p11.bar = p11.bar + 1;
-var p12 = defineProps(p1, {
+let p12 = defineProps(p1, {
     foo: {
         value: 42
     },
     bar: {
-        get: function () {
+        get() {
             return this.x;
         },
-        set: function (value) {
+        set(value) {
             this.x = value;
         }
     }
 });
 p12.foo = p12.foo + 1;
 p12.bar = p12.bar + 1;
-var vue = new Vue({
-    data: function () { return ({ x: 1, y: 2 }); },
+let vue = new Vue({
+    data: () => ({ x: 1, y: 2 }),
     methods: {
-        f: function (x) {
+        f(x) {
             return this.x;
         }
     },
     computed: {
-        test: function () {
+        test() {
             return this.x;
         },
         hello: {
-            get: function () {
+            get() {
                 return "hi";
             },
-            set: function (value) {
+            set(value) {
             }
         }
     }
@@= skipped -72, +72 lines =@@


 //// [thisTypeInObjectLiterals2.d.ts]
+// In methods of an object literal with no contextual type, 'this' has the type
+// of the object literal.
 declare let obj1: {
     a: number;
     f(): number;
@@= skipped -10, +12 lines =@@
     readonly d: number;
     e: string;
 };
+// In methods of an object literal with a contextual type, 'this' has the
+// contextual type.
 type Point = {
     x: number;
     y: number;
@@= skipped -12, +14 lines =@@
 declare let p4: Point | null | undefined;
 declare function f1(p: Point): void;
 declare function f2(p: Point | null | undefined): void;
+// In methods of an object literal with a contextual type that includes some
+// ThisType<T>, 'this' is of type T.
 type ObjectDescriptor<D, M> = {
     data?: D;
-    methods?: M & ThisType<D & M>;
+    methods?: M & ThisType<D & M>; // Type of 'this' in methods is D & M
 };
 declare function makeObject<D, M>(desc: ObjectDescriptor<D, M>): D & M;
 declare let x1: {
@@= skipped -11, +13 lines =@@
 } & {
     moveBy(dx: number, dy: number): void;
 };
+// In methods contained in an object literal with a contextual type that includes
+// some ThisType<T>, 'this' is of type T.
 type ObjectDescriptor2<D, M> = ThisType<D & M> & {
     data?: D;
     methods?: M;
@@= skipped -11, +13 lines =@@
 } & {
     moveBy(dx: number, dy: number): void;
 };
+// Check pattern similar to Object.defineProperty and Object.defineProperties
 type PropDesc<T> = {
     value?: T;
     get?(): T;
@@= skipped -16, +17 lines =@@
     foo: number;
     bar: number;
 };
+// Proof of concept for typing of Vue.js
 type Accessors<T> = {
     [K in keyof T]: (() => T[K]) | Computed<T[K]>;
 };