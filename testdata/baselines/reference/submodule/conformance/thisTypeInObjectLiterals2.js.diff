--- old.thisTypeInObjectLiterals2.js
+++ new.thisTypeInObjectLiterals2.js
@@= skipped -244, +244 lines =@@


 //// [thisTypeInObjectLiterals2.js]
-"use strict";
 // In methods of an object literal with no contextual type, 'this' has the type
 // of the object literal.
 let obj1 = {
@@= skipped -162, +161 lines =@@


 //// [thisTypeInObjectLiterals2.d.ts]
+// In methods of an object literal with no contextual type, 'this' has the type
+// of the object literal.
 declare let obj1: {
     a: number;
     f(): number;
@@= skipped -10, +12 lines =@@
     readonly d: number;
     e: string;
 };
+// In methods of an object literal with a contextual type, 'this' has the
+// contextual type.
 type Point = {
     x: number;
     y: number;
@@= skipped -12, +14 lines =@@
 declare let p4: Point | null | undefined;
 declare function f1(p: Point): void;
 declare function f2(p: Point | null | undefined): void;
+// In methods of an object literal with a contextual type that includes some
+// ThisType<T>, 'this' is of type T.
 type ObjectDescriptor<D, M> = {
     data?: D;
-    methods?: M & ThisType<D & M>;
+    methods?: M & ThisType<D & M>; // Type of 'this' in methods is D & M
 };
 declare function makeObject<D, M>(desc: ObjectDescriptor<D, M>): D & M;
 declare let x1: {
@@= skipped -11, +13 lines =@@
 } & {
     moveBy(dx: number, dy: number): void;
 };
+// In methods contained in an object literal with a contextual type that includes
+// some ThisType<T>, 'this' is of type T.
 type ObjectDescriptor2<D, M> = ThisType<D & M> & {
     data?: D;
     methods?: M;
@@= skipped -11, +13 lines =@@
 } & {
     moveBy(dx: number, dy: number): void;
 };
+// Check pattern similar to Object.defineProperty and Object.defineProperties
 type PropDesc<T> = {
     value?: T;
     get?(): T;
@@= skipped -16, +17 lines =@@
     foo: number;
     bar: number;
 };
+// Proof of concept for typing of Vue.js
 type Accessors<T> = {
     [K in keyof T]: (() => T[K]) | Computed<T[K]>;
 };