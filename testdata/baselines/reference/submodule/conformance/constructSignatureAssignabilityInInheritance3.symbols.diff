--- old.constructSignatureAssignabilityInInheritance3.symbols
+++ new.constructSignatureAssignabilityInInheritance3.symbols
@@= skipped -8, +8 lines =@@
 
     class Base { foo: string; }
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
->foo : Symbol(Base.foo, Decl(constructSignatureAssignabilityInInheritance3.ts, 4, 16))
+>foo : Symbol(foo, Decl(constructSignatureAssignabilityInInheritance3.ts, 4, 16))
 
     class Derived extends Base { bar: string; }
 >Derived : Symbol(Derived, Decl(constructSignatureAssignabilityInInheritance3.ts, 4, 31))
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
->bar : Symbol(Derived.bar, Decl(constructSignatureAssignabilityInInheritance3.ts, 5, 32))
+>bar : Symbol(bar, Decl(constructSignatureAssignabilityInInheritance3.ts, 5, 32))
 
     class Derived2 extends Derived { baz: string; }
 >Derived2 : Symbol(Derived2, Decl(constructSignatureAssignabilityInInheritance3.ts, 5, 47))
 >Derived : Symbol(Derived, Decl(constructSignatureAssignabilityInInheritance3.ts, 4, 31))
->baz : Symbol(Derived2.baz, Decl(constructSignatureAssignabilityInInheritance3.ts, 6, 36))
+>baz : Symbol(baz, Decl(constructSignatureAssignabilityInInheritance3.ts, 6, 36))
 
     class OtherDerived extends Base { bing: string; }
 >OtherDerived : Symbol(OtherDerived, Decl(constructSignatureAssignabilityInInheritance3.ts, 6, 51))
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
->bing : Symbol(OtherDerived.bing, Decl(constructSignatureAssignabilityInInheritance3.ts, 7, 37))
+>bing : Symbol(bing, Decl(constructSignatureAssignabilityInInheritance3.ts, 7, 37))
 
     module WithNonGenericSignaturesInBaseType {
 >WithNonGenericSignaturesInBaseType : Symbol(WithNonGenericSignaturesInBaseType, Decl(constructSignatureAssignabilityInInheritance3.ts, 7, 53))
@@= skipped -25, +25 lines =@@
 >A : Symbol(A, Decl(constructSignatureAssignabilityInInheritance3.ts, 9, 47))
 
             a2: new (x: number) => string[];
->a2 : Symbol(A.a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 11, 21))
+>a2 : Symbol(a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 11, 21))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 12, 21))
 
             a7: new (x: (arg: Base) => Derived) => (r: Base) => Derived2;
->a7 : Symbol(A.a7, Decl(constructSignatureAssignabilityInInheritance3.ts, 12, 44))
+>a7 : Symbol(a7, Decl(constructSignatureAssignabilityInInheritance3.ts, 12, 44))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 13, 21))
 >arg : Symbol(arg, Decl(constructSignatureAssignabilityInInheritance3.ts, 13, 25))
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
@@= skipped -14, +14 lines =@@
 >Derived2 : Symbol(Derived2, Decl(constructSignatureAssignabilityInInheritance3.ts, 5, 47))
 
             a8: new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived;
->a8 : Symbol(A.a8, Decl(constructSignatureAssignabilityInInheritance3.ts, 13, 73))
+>a8 : Symbol(a8, Decl(constructSignatureAssignabilityInInheritance3.ts, 13, 73))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 14, 21))
 >arg : Symbol(arg, Decl(constructSignatureAssignabilityInInheritance3.ts, 14, 25))
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
@@= skipped -14, +14 lines =@@
 >Derived : Symbol(Derived, Decl(constructSignatureAssignabilityInInheritance3.ts, 4, 31))
 
             a10: new (...x: Base[]) => Base;
->a10 : Symbol(A.a10, Decl(constructSignatureAssignabilityInInheritance3.ts, 14, 100))
+>a10 : Symbol(a10, Decl(constructSignatureAssignabilityInInheritance3.ts, 14, 100))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 15, 22))
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
 
             a11: new (x: { foo: string }, y: { foo: string; bar: string }) => Base;
->a11 : Symbol(A.a11, Decl(constructSignatureAssignabilityInInheritance3.ts, 15, 44))
+>a11 : Symbol(a11, Decl(constructSignatureAssignabilityInInheritance3.ts, 15, 44))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 16, 22))
 >foo : Symbol(foo, Decl(constructSignatureAssignabilityInInheritance3.ts, 16, 26))
 >y : Symbol(y, Decl(constructSignatureAssignabilityInInheritance3.ts, 16, 41))
@@= skipped -15, +15 lines =@@
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
 
             a12: new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
->a12 : Symbol(A.a12, Decl(constructSignatureAssignabilityInInheritance3.ts, 16, 83))
+>a12 : Symbol(a12, Decl(constructSignatureAssignabilityInInheritance3.ts, 16, 83))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 17, 22))
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
@@= skipped -11, +11 lines =@@
 >Derived : Symbol(Derived, Decl(constructSignatureAssignabilityInInheritance3.ts, 4, 31))
 
             a14: {
->a14 : Symbol(A.a14, Decl(constructSignatureAssignabilityInInheritance3.ts, 17, 76))
+>a14 : Symbol(a14, Decl(constructSignatureAssignabilityInInheritance3.ts, 17, 76))
 
                 new (x: number): number[];
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 19, 21))
@@= skipped -10, +10 lines =@@
 
             };
             a15: new (x: { a: string; b: number }) => number;
->a15 : Symbol(A.a15, Decl(constructSignatureAssignabilityInInheritance3.ts, 21, 14))
+>a15 : Symbol(a15, Decl(constructSignatureAssignabilityInInheritance3.ts, 21, 14))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 22, 22))
 >a : Symbol(a, Decl(constructSignatureAssignabilityInInheritance3.ts, 22, 26))
 >b : Symbol(b, Decl(constructSignatureAssignabilityInInheritance3.ts, 22, 37))
 
             a16: {
->a16 : Symbol(A.a16, Decl(constructSignatureAssignabilityInInheritance3.ts, 22, 61))
+>a16 : Symbol(a16, Decl(constructSignatureAssignabilityInInheritance3.ts, 22, 61))
 
                 // type of parameter is overload set which means we can't do inference based on this type
                 new (x: {
@@= skipped -37, +37 lines =@@
 >A : Symbol(A, Decl(constructSignatureAssignabilityInInheritance3.ts, 9, 47))
 
             a2: new <T, U>(x: T) => U[]; // error, contextual signature instantiation doesn't relate return types so U is {}, not a subtype of string[]
->a2 : Symbol(I.a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 36, 31))
+>a2 : Symbol(a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 36, 31))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 37, 21))
 >U : Symbol(U, Decl(constructSignatureAssignabilityInInheritance3.ts, 37, 23))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 37, 27))
@@= skipped -15, +15 lines =@@
 >A : Symbol(A, Decl(constructSignatureAssignabilityInInheritance3.ts, 9, 47))
 
             a2: new (x: T) => U[]; // error, no contextual signature instantiation since I2.a2 is not generic
->a2 : Symbol(I2.a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 40, 38))
+>a2 : Symbol(a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 40, 38))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 41, 21))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 40, 21))
 >U : Symbol(U, Decl(constructSignatureAssignabilityInInheritance3.ts, 40, 23))
@@= skipped -12, +12 lines =@@
 
             // valid, no inferences for V so it defaults to Derived2
             a7: new <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V;
->a7 : Symbol(I3.a7, Decl(constructSignatureAssignabilityInInheritance3.ts, 44, 32))
+>a7 : Symbol(a7, Decl(constructSignatureAssignabilityInInheritance3.ts, 44, 32))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 46, 21))
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
 >U : Symbol(U, Decl(constructSignatureAssignabilityInInheritance3.ts, 46, 36))
@@= skipped -21, +21 lines =@@
 >A : Symbol(A, Decl(constructSignatureAssignabilityInInheritance3.ts, 9, 47))
 
             a8: new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U; // error, type mismatch
->a8 : Symbol(I4.a8, Decl(constructSignatureAssignabilityInInheritance3.ts, 49, 32))
+>a8 : Symbol(a8, Decl(constructSignatureAssignabilityInInheritance3.ts, 49, 32))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 50, 21))
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
 >U : Symbol(U, Decl(constructSignatureAssignabilityInInheritance3.ts, 50, 36))
@@= skipped -23, +23 lines =@@
 >A : Symbol(A, Decl(constructSignatureAssignabilityInInheritance3.ts, 9, 47))
 
             a10: new <T extends Derived>(...x: T[]) => T; // valid, parameter covariance works even after contextual signature instantiation
->a10 : Symbol(I4B.a10, Decl(constructSignatureAssignabilityInInheritance3.ts, 53, 33))
+>a10 : Symbol(a10, Decl(constructSignatureAssignabilityInInheritance3.ts, 53, 33))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 54, 22))
 >Derived : Symbol(Derived, Decl(constructSignatureAssignabilityInInheritance3.ts, 4, 31))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 54, 41))
@@= skipped -13, +13 lines =@@
 >A : Symbol(A, Decl(constructSignatureAssignabilityInInheritance3.ts, 9, 47))
 
             a11: new <T extends Derived>(x: T, y: T) => T; // valid, even though x is a Base, parameter covariance works even after contextual signature instantiation
->a11 : Symbol(I4C.a11, Decl(constructSignatureAssignabilityInInheritance3.ts, 57, 33))
+>a11 : Symbol(a11, Decl(constructSignatureAssignabilityInInheritance3.ts, 57, 33))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 58, 22))
 >Derived : Symbol(Derived, Decl(constructSignatureAssignabilityInInheritance3.ts, 4, 31))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 58, 41))
@@= skipped -15, +15 lines =@@
 >A : Symbol(A, Decl(constructSignatureAssignabilityInInheritance3.ts, 9, 47))
 
             a12: new <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T; // valid, no inferences for T, defaults to Array<Derived2>
->a12 : Symbol(I4E.a12, Decl(constructSignatureAssignabilityInInheritance3.ts, 61, 33))
+>a12 : Symbol(a12, Decl(constructSignatureAssignabilityInInheritance3.ts, 61, 33))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 62, 22))
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >Derived2 : Symbol(Derived2, Decl(constructSignatureAssignabilityInInheritance3.ts, 5, 47))
@@= skipped -18, +18 lines =@@
 >A : Symbol(A, Decl(constructSignatureAssignabilityInInheritance3.ts, 9, 47))
 
             a15: new <T>(x: { a: T; b: T }) => T; // error, T is {} which isn't an acceptable return type
->a15 : Symbol(I6.a15, Decl(constructSignatureAssignabilityInInheritance3.ts, 65, 32))
+>a15 : Symbol(a15, Decl(constructSignatureAssignabilityInInheritance3.ts, 65, 32))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 66, 22))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 66, 25))
 >a : Symbol(a, Decl(constructSignatureAssignabilityInInheritance3.ts, 66, 29))
@@= skipped -15, +15 lines =@@
 >A : Symbol(A, Decl(constructSignatureAssignabilityInInheritance3.ts, 9, 47))
 
             a15: new <T extends Base>(x: { a: T; b: T }) => number; // error, T defaults to Base, which is not compatible with number or string
->a15 : Symbol(I7.a15, Decl(constructSignatureAssignabilityInInheritance3.ts, 69, 32))
+>a15 : Symbol(a15, Decl(constructSignatureAssignabilityInInheritance3.ts, 69, 32))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 70, 22))
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 70, 38))
@@= skipped -16, +16 lines =@@
 
             // ok, we relate each signature of a16 to b16, and within that, we make inferences from two different signatures in the respective A.a16 signature
             a16: new <T>(x: new (a: T) => T) => T[];
->a16 : Symbol(I8.a16, Decl(constructSignatureAssignabilityInInheritance3.ts, 73, 32))
+>a16 : Symbol(a16, Decl(constructSignatureAssignabilityInInheritance3.ts, 73, 32))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 75, 22))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 75, 25))
 >a : Symbol(a, Decl(constructSignatureAssignabilityInInheritance3.ts, 75, 33))
@@= skipped -18, +18 lines =@@
 >B : Symbol(B, Decl(constructSignatureAssignabilityInInheritance3.ts, 79, 44))
 
             a2: new <T>(x: T) => T[];
->a2 : Symbol(B.a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 81, 21))
+>a2 : Symbol(a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 81, 21))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 82, 21))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 82, 24))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 82, 21))
@@= skipped -12, +12 lines =@@
 >B : Symbol(B, Decl(constructSignatureAssignabilityInInheritance3.ts, 79, 44))
 
             a2: new <T>(x: T) => string[]; // error
->a2 : Symbol(I6.a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 85, 32))
+>a2 : Symbol(a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 85, 32))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 86, 21))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 86, 24))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 86, 21))
@@= skipped -11, +11 lines =@@
 >C : Symbol(C, Decl(constructSignatureAssignabilityInInheritance3.ts, 87, 9))
 
             a2: new <T>(x: T) => string[];
->a2 : Symbol(C.a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 90, 21))
+>a2 : Symbol(a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 90, 21))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 91, 21))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 91, 24))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 91, 21))
@@= skipped -11, +11 lines =@@
 >C : Symbol(C, Decl(constructSignatureAssignabilityInInheritance3.ts, 87, 9))
 
             a2: new <T>(x: T) => T[]; // error
->a2 : Symbol(I7.a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 94, 32))
+>a2 : Symbol(a2, Decl(constructSignatureAssignabilityInInheritance3.ts, 94, 32))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 95, 21))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 95, 24))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 95, 21))
@@= skipped -12, +12 lines =@@
 >D : Symbol(D, Decl(constructSignatureAssignabilityInInheritance3.ts, 96, 9))
 
             a14: {
->a14 : Symbol(D.a14, Decl(constructSignatureAssignabilityInInheritance3.ts, 99, 21))
+>a14 : Symbol(a14, Decl(constructSignatureAssignabilityInInheritance3.ts, 99, 21))
 
                 new <T extends Derived>(x: T): number[];
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 101, 21))
@@= skipped -22, +22 lines =@@
 >D : Symbol(D, Decl(constructSignatureAssignabilityInInheritance3.ts, 96, 9))
 
             a14: new <T extends Base>(x: T) => number[];
->a14 : Symbol(I8.a14, Decl(constructSignatureAssignabilityInInheritance3.ts, 106, 32))
+>a14 : Symbol(a14, Decl(constructSignatureAssignabilityInInheritance3.ts, 106, 32))
 >T : Symbol(T, Decl(constructSignatureAssignabilityInInheritance3.ts, 107, 22))
 >Base : Symbol(Base, Decl(constructSignatureAssignabilityInInheritance3.ts, 3, 15))
 >x : Symbol(x, Decl(constructSignatureAssignabilityInInheritance3.ts, 107, 38))
