--- old.iteratorSpreadInCall8.symbols
+++ new.iteratorSpreadInCall8.symbols
@@= skipped -13, +13 lines =@@
 >SymbolIterator : Symbol(SymbolIterator, Decl(iteratorSpreadInCall8.ts, 2, 1))
 
     next() {
->next : Symbol(SymbolIterator.next, Decl(iteratorSpreadInCall8.ts, 4, 22))
+>next : Symbol(next, Decl(iteratorSpreadInCall8.ts, 4, 22))
 
         return {
             value: Symbol(),
@@= skipped -14, +14 lines =@@
     }
 
     [Symbol.iterator]() {
->[Symbol.iterator] : Symbol(SymbolIterator[Symbol.iterator], Decl(iteratorSpreadInCall8.ts, 10, 5))
->Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(iteratorSpreadInCall8.ts, 10, 5))
+>Symbol.iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 
         return this;
 >this : Symbol(SymbolIterator, Decl(iteratorSpreadInCall8.ts, 2, 1))
@@= skipped -14, +14 lines =@@
 >_StringIterator : Symbol(_StringIterator, Decl(iteratorSpreadInCall8.ts, 15, 1))
 
     next() {
->next : Symbol(_StringIterator.next, Decl(iteratorSpreadInCall8.ts, 17, 23))
+>next : Symbol(next, Decl(iteratorSpreadInCall8.ts, 17, 23))
 
         return {
             value: "",
@@= skipped -13, +13 lines =@@
     }
 
     [Symbol.iterator]() {
->[Symbol.iterator] : Symbol(_StringIterator[Symbol.iterator], Decl(iteratorSpreadInCall8.ts, 23, 5))
->Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(iteratorSpreadInCall8.ts, 23, 5))
+>Symbol.iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 
         return this;
 >this : Symbol(_StringIterator, Decl(iteratorSpreadInCall8.ts, 15, 1))
