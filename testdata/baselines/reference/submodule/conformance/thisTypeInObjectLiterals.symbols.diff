--- old.thisTypeInObjectLiterals.symbols
+++ new.thisTypeInObjectLiterals.symbols
@@= skipped -10, +10 lines =@@
 >m : Symbol(m, Decl(thisTypeInObjectLiterals.ts, 1, 13))

         return this.d.length;
->this.d.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>this.d.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >this.d : Symbol(d, Decl(thisTypeInObjectLiterals.ts, 0, 9))
 >this : Symbol(o, Decl(thisTypeInObjectLiterals.ts, 0, 7))
 >d : Symbol(d, Decl(thisTypeInObjectLiterals.ts, 0, 9))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))

     },
     f: function() {
 >f : Symbol(f, Decl(thisTypeInObjectLiterals.ts, 4, 6))

         return this.d.length;
->this.d.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>this.d.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >this.d : Symbol(d, Decl(thisTypeInObjectLiterals.ts, 0, 9))
 >this : Symbol(o, Decl(thisTypeInObjectLiterals.ts, 0, 7))
 >d : Symbol(d, Decl(thisTypeInObjectLiterals.ts, 0, 9))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
     }
 }

@@= skipped -75, +75 lines =@@
 >I : Symbol(I, Decl(thisTypeInObjectLiterals.ts, 25, 42))

     a: number;
->a : Symbol(I.a, Decl(thisTypeInObjectLiterals.ts, 26, 13))
+>a : Symbol(a, Decl(thisTypeInObjectLiterals.ts, 26, 13))

     start(): number;
->start : Symbol(I.start, Decl(thisTypeInObjectLiterals.ts, 27, 14))
+>start : Symbol(start, Decl(thisTypeInObjectLiterals.ts, 27, 14))

     passthrough(n: number): number;
->passthrough : Symbol(I.passthrough, Decl(thisTypeInObjectLiterals.ts, 28, 20))
+>passthrough : Symbol(passthrough, Decl(thisTypeInObjectLiterals.ts, 28, 20))
 >n : Symbol(n, Decl(thisTypeInObjectLiterals.ts, 29, 16))

     sub1(n: number): number;
->sub1 : Symbol(I.sub1, Decl(thisTypeInObjectLiterals.ts, 29, 35))
+>sub1 : Symbol(sub1, Decl(thisTypeInObjectLiterals.ts, 29, 35))
 >n : Symbol(n, Decl(thisTypeInObjectLiterals.ts, 30, 9))
 }
 var impl: I = mutuallyRecursive;