--- old.recursiveTypeReferences1.js
+++ new.recursiveTypeReferences1.js
@@= skipped -132, +132 lines =@@


 //// [recursiveTypeReferences1.js]
-"use strict";
 const a0 = 1;
 const a1 = [1, [2, 3], [4, [5, [6, 7]]]];
 const hypertextNode = ["div", { id: "parent" },
@@= skipped -96, +95 lines =@@
 declare const b11: Box1;
 declare const b12: Box1;
 type Box2 = Box<Box2 | number>;
-declare const b20: Box2;
+declare const b20: Box2; // Error
 declare const b21: Box2;
 declare const b22: Box2;
 type RecArray<T> = Array<T | RecArray<T>>;
@@= skipped -19, +19 lines =@@
 type ValueOrArray2<T> = T | ValueOrArray2<T>[];
 declare function foo1<T>(a: ValueOrArray1<T>): T;
 declare let ra1: ValueOrArray2<string>;
-declare let x1: string;
+declare let x1: string; // Boom!
 type NumberOrArray1<T> = T | ValueOrArray1<T>[];
 type NumberOrArray2<T> = T | ValueOrArray2<T>[];
 declare function foo2<T>(a: ValueOrArray1<T>): T;
 declare let ra2: ValueOrArray2<string>;
-declare let x2: string;
+declare let x2: string; // Boom!
+// Repro from #33617 (errors are expected)
 type Tree = [HTMLHeadingElement, Tree][];
 declare function parse(node: Tree, index?: number[]): HTMLUListElement;
 declare function cons(hs: HTMLHeadingElement[]): Tree;