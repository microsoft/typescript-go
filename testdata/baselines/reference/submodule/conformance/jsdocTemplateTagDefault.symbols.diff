--- old.jsdocTemplateTagDefault.symbols
+++ new.jsdocTemplateTagDefault.symbols
@@= skipped -3, +3 lines =@@
 /**
  * @template {string | number} [T=string] - ok: defaults are permitted
  * @typedef {[T]} A
+>T : Symbol(T)
+
  */
 
 /** @type {A} */ // ok, default for `T` in `A` is `string`
@@= skipped -22, +24 lines =@@
  * @template T
  * @template [U=T] - ok: default can reference earlier type parameter
  * @typedef {[T, U]} B
+>B : Symbol(B, Decl(file.js, 48, 20))
+>T : Symbol(T, Decl(file.js, 48, 20))
+>U : Symbol(U, Decl(file.js, 48, 20))
+
  */
 
 /**
  * @template {string | number} [T] - error: default requires an `=type`
  * @typedef {[T]} C
+>C : Symbol(C, Decl(file.js, 48, 20))
+>T : Symbol(T, Decl(file.js, 48, 20))
+
  */
 
 /**
  * @template {string | number} [T=] - error: default requires a `type`
  * @typedef {[T]} D
+>D : Symbol(D, Decl(file.js, 48, 20))
+>T : Symbol(T, Decl(file.js, 48, 20))
+
  */
 
 /**
  * @template {string | number} [T=string]
  * @template U - error: Required type parameters cannot follow optional type parameters
  * @typedef {[T, U]} E
+>E : Symbol(E, Decl(file.js, 48, 20))
+>T : Symbol(T, Decl(file.js, 48, 20))
+>U : Symbol(U, Decl(file.js, 48, 20))
+
  */
 
 /**
  * @template [T=U] - error: Type parameter defaults can only reference previously declared type parameters.
  * @template [U=T]
  * @typedef {[T, U]} G
+>G : Symbol(G, Decl(file.js, 48, 20))
+>T : Symbol(T, Decl(file.js, 48, 20))
+>U : Symbol(U, Decl(file.js, 48, 20))
+
  */
 
 /**
