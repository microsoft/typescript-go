--- old.umd1.symbols
+++ new.umd1.symbols
@@= skipped -2, +2 lines =@@
 === a.ts ===
 /// <reference path="foo.d.ts" />
 Foo.fn();
->Foo.fn : Symbol(Foo.fn, Decl(foo.d.ts, 0, 21))
+>Foo.fn : Symbol(fn, Decl(foo.d.ts, 0, 21))
 >Foo : Symbol(Foo, Decl(foo.d.ts, 2, 38))
->fn : Symbol(Foo.fn, Decl(foo.d.ts, 0, 21))
+>fn : Symbol(fn, Decl(foo.d.ts, 0, 21))
 
 let x: Foo.Thing;
 >x : Symbol(x, Decl(a.ts, 2, 3))
 >Foo : Symbol(Foo, Decl(foo.d.ts, 2, 38))
->Thing : Symbol(Foo.Thing, Decl(foo.d.ts, 1, 27))
+>Thing : Symbol(Thing, Decl(foo.d.ts, 1, 27))
 
 let y: number = x.n;
 >y : Symbol(y, Decl(a.ts, 3, 3))
->x.n : Symbol(Foo.Thing.n, Decl(foo.d.ts, 2, 24))
+>x.n : Symbol(n, Decl(foo.d.ts, 2, 24))
 >x : Symbol(x, Decl(a.ts, 2, 3))
->n : Symbol(Foo.Thing.n, Decl(foo.d.ts, 2, 24))
+>n : Symbol(n, Decl(foo.d.ts, 2, 24))
 
 === foo.d.ts ===
 export var x: number;
@@= skipped -24, +24 lines =@@
 
 export interface Thing { n: typeof x }
 >Thing : Symbol(Thing, Decl(foo.d.ts, 1, 27))
->n : Symbol(Thing.n, Decl(foo.d.ts, 2, 24))
+>n : Symbol(n, Decl(foo.d.ts, 2, 24))
 >x : Symbol(x, Decl(foo.d.ts, 0, 10))
 
 export as namespace Foo;
