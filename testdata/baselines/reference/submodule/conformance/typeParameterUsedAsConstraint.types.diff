--- old.typeParameterUsedAsConstraint.types
+++ new.typeParameterUsedAsConstraint.types
@@= skipped -2, +2 lines =@@
 === typeParameterUsedAsConstraint.ts ===
 class C<T, U extends T> { }
 >C : C<T, U>
+>T : T
+>U : U
 
 class C2<T extends U, U> { }
 >C2 : C2<T, U>
+>T : T
+>U : U
 
 class C3<T extends Date, U extends T> { }
 >C3 : C3<T, U>
+>T : T
+>U : U
 
 class C4<T extends U, U extends Date> { }
 >C4 : C4<T, U>
+>T : T
+>U : U
 
 class C5<T extends U, U extends V, V> { }
 >C5 : C5<T, U, V>
+>T : T
+>U : U
+>V : V
 
 class C6<T, U extends T, V extends U> { }
 >C6 : C6<T, U, V>
+>T : T
+>U : U
+>V : V
 
 interface I<T, U extends T> { }
+>I : I<T, U>
+>T : T
+>U : U
+
 interface I2<T extends U, U> { }
+>I2 : I2<T, U>
+>T : T
+>U : U
+
 interface I3<T extends Date, U extends T> { }
+>I3 : I3<T, U>
+>T : T
+>U : U
+
 interface I4<T extends U, U extends Date> { }
+>I4 : I4<T, U>
+>T : T
+>U : U
+
 interface I5<T extends U, U extends V, V> { }
+>I5 : I5<T, U, V>
+>T : T
+>U : U
+>V : V
+
 interface I6<T, U extends T, V extends U> { }
+>I6 : I6<T, U, V>
+>T : T
+>U : U
+>V : V
 
 function f<T, U extends T>() { }
 >f : <T, U extends T>() => void
+>T : T
+>U : U
 
 function f2<T extends U, U>() { }
 >f2 : <T extends U, U>() => void
+>T : T
+>U : U
 
 function f3<T extends Date, U extends T>() { }
 >f3 : <T extends Date, U extends T>() => void
+>T : T
+>U : U
 
 function f4<T extends U, U extends Date>() { }
 >f4 : <T extends U, U extends Date>() => void
+>T : T
+>U : U
 
 function f5<T extends U, U extends V, V>() { }
 >f5 : <T extends U, U extends V, V>() => void
+>T : T
+>U : U
+>V : V
 
 function f6<T, U extends T, V extends U>() { }
 >f6 : <T, U extends T, V extends U>() => void
+>T : T
+>U : U
+>V : V
 
 var e = <T, U extends T>() => { }
 >e : <T, U extends T>() => void
 ><T, U extends T>() => { } : <T, U extends T>() => void
+>T : T
+>U : U
 
 var e2 = <T extends U, U>() => { }
 >e2 : <T extends U, U>() => void
 ><T extends U, U>() => { } : <T extends U, U>() => void
+>T : T
+>U : U
 
 var e3 = <T extends Date, U extends T>() => { }
 >e3 : <T extends Date, U extends T>() => void
 ><T extends Date, U extends T>() => { } : <T extends Date, U extends T>() => void
+>T : T
+>U : U
 
 var e4 = <T extends U, U extends Date>() => { }
 >e4 : <T extends U, U extends Date>() => void
 ><T extends U, U extends Date>() => { } : <T extends U, U extends Date>() => void
+>T : T
+>U : U
 
 var e5 = <T extends U, U extends V, V>() => { }
 >e5 : <T extends U, U extends V, V>() => void
 ><T extends U, U extends V, V>() => { } : <T extends U, U extends V, V>() => void
+>T : T
+>U : U
+>V : V
 
 var e6 = <T, U extends T, V extends U>() => { }
 >e6 : <T, U extends T, V extends U>() => void
 ><T, U extends T, V extends U>() => { } : <T, U extends T, V extends U>() => void
+>T : T
+>U : U
+>V : V
 
 var a: { <T, U extends T>(): void }
 >a : <T, U extends T>() => void
+>T : T
+>U : U
 
 var a2: { <T extends U, U>(): void }
 >a2 : <T extends U, U>() => void
+>T : T
+>U : U
 
 var a3: { <T extends Date, U extends T>(): void }
 >a3 : <T extends Date, U extends T>() => void
+>T : T
+>U : U
 
 var a4: { <T extends U, U extends Date>(): void }
 >a4 : <T extends U, U extends Date>() => void
+>T : T
+>U : U
 
 var a5: { <T extends U, U extends V, V>(): void }
 >a5 : <T extends U, U extends V, V>() => void
+>T : T
+>U : U
+>V : V
 
 var a6: { <T, U extends T, V extends U>(): void }
 >a6 : <T, U extends T, V extends U>() => void
+>T : T
+>U : U
+>V : V
 
