--- old.importClause_namespaceImport.types
+++ new.importClause_namespaceImport.types
@@= skipped -2, +2 lines =@@
 === /a.ts ===
 export class A { a!: string }
 >A : A
->  : ^
 >a : string
->  : ^^^^^^
 
 export class B { b!: number }
 >B : B
->  : ^
 >b : number
->  : ^^^^^^
 
 export type C<T> = T;
 >C : T
->  : ^
+>T : T
 
 export const Value = {};
 >Value : {}
->      : ^^
 >{} : {}
->   : ^^
 
 === /b.ts ===
 import type * as types from './a';
->types : typeof types
->      : ^^^^^^^^^^^^
+>types : typeof import("/a")
 
 types;
->types : typeof types
->      : ^^^^^^^^^^^^
+>types : typeof import("/a")
 
 types.Value;
 >types.Value : {}
->            : ^^
->types : typeof types
->      : ^^^^^^^^^^^^
+>types : typeof import("/a")
 >Value : {}
->      : ^^
 
 let v: types.Value;
->v : types.Value
->  : ^^^^^^^^^^^
+>v : Value
 >types : any
->      : ^^^
 
 const a: types.A = {};
->a : types.A
->  : ^^^^^^^
+>a : A
 >types : any
->      : ^^^
 >{} : {}
->   : ^^
 
 const b: types.B = {};
->b : types.B
->  : ^^^^^^^
+>b : B
 >types : any
->      : ^^^
 >{} : {}
->   : ^^
 
 const c: types.C<string> = "";
 >c : string
->  : ^^^^^^
 >types : any
->      : ^^^
 >"" : ""
->   : ^^
 
 const d = { types };
->d : { types: typeof types; }
->  : ^^^^^^^^^^^^^^^^^^^^^^^^
->{ types } : { types: typeof types; }
->          : ^^^^^^^^^^^^^^^^^^^^^^^^
->types : typeof types
->      : ^^^^^^^^^^^^
+>d : { types: typeof import("/a"); }
+>{ types } : { types: typeof import("/a"); }
+>types : any
 
