--- old.recursiveMappedTypes.js
+++ new.recursiveMappedTypes.js
@@= skipped -95, +95 lines =@@

 //// [recursiveMappedTypes.js]
 "use strict";
-// Recursive mapped types simply appear empty
 Object.defineProperty(exports, "__esModule", { value: true });
 function foo(arg) {
     return arg;
@@= skipped -10, +9 lines =@@


 //// [recursiveMappedTypes.d.ts]
+// Repro from #27881
 export type Circular<T> = {
     [P in keyof T]: Circular<T>;
 };
+// Repro from #29992
 type NonOptionalKeys<T> = {
     [P in keyof T]: undefined extends T[P] ? never : P;
 }[keyof T];
@@= skipped -13, +15 lines =@@
     "type": "list";
     "minimum_count": number;
     "maximum_count": number;
-    "collapsable"?: boolean;
+    "collapsable"?: boolean; //default to false, means all expanded
     "each": Child<ListWidget>;
 }
+// Repros from #41790
 export type TV<T, K extends keyof T> = T[K] extends Record<infer E, any> ? E : never;
 export type ObjectOrArray<T, K extends keyof any = keyof any> = T[] | Record<K, T | Record<K, T> | T[]>;
 export type ThemeValue<K extends keyof ThemeType, ThemeType, TVal = any> = ThemeType[K] extends TVal[] ? number : ThemeType[K] extends Record<infer E, TVal> ? E : ThemeType[K] extends ObjectOrArray<infer F> ? F : never;