--- old.everyTypeWithAnnotationAndInvalidInitializer.types
+++ new.everyTypeWithAnnotationAndInvalidInitializer.types
@@= skipped -1, +1 lines =@@
 
 === everyTypeWithAnnotationAndInvalidInitializer.ts ===
 interface I {
+>I : I
+
     id: number;
 >id : number
 }
@@= skipped -13, +15 lines =@@
 
 class D<T>{
 >D : D<T>
+>T : T
 
     source: T;
 >source : T
@@= skipped -106, +107 lines =@@
 
 var aFunction: typeof F = F2;
 >aFunction : (x: string) => number
->F : (x: string) => number
 >F2 : (x: number) => boolean
 
 var anOtherFunction: (x: string) => number = F2;
@@= skipped -10, +9 lines =@@
 
 var aLambda: typeof F = (x) => 'a string';
 >aLambda : (x: string) => number
->F : (x: string) => number
 >(x) => 'a string' : (x: string) => string
 >x : string
 >'a string' : "a string"
 
 var aModule: typeof M = N;
 >aModule : typeof M
->M : typeof M
 >N : typeof N
 
 var aClassInModule: M.A = new N.A();
->aClassInModule : M.A
+>aClassInModule : A
 >M : any
->new N.A() : N.A
->N.A : typeof N.A
+>new N.A() : A
+>N.A : typeof A
 >N : typeof N
->A : typeof N.A
+>A : typeof A
 
 var aFunctionInModule: typeof M.F2 = F2;
 >aFunctionInModule : (x: number) => string
->M.F2 : (x: number) => string
 >M : typeof M
->F2 : (x: number) => string
 >F2 : (x: number) => boolean
 
 
