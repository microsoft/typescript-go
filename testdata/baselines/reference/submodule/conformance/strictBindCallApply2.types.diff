--- old.strictBindCallApply2.types
+++ new.strictBindCallApply2.types
@@= skipped -16, +16 lines =@@
 const fb = fn.bind({ blub: "blub" });
 >fb : () => void
 >fn.bind({ blub: "blub" }) : () => void
->fn.bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
+>fn.bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args_1: A, ...args_2: B) => R, thisArg: T, ...args: A): (...args: B) => R; }
 >fn : (this: Foo) => void
->bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
+>bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args_1: A, ...args_2: B) => R, thisArg: T, ...args: A): (...args: B) => R; }
 >{ blub: "blub" } : { blub: string; }
 >blub : string
 >"blub" : "blub"
