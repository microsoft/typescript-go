--- old.genericContextualTypes1.types
+++ new.genericContextualTypes1.types
@@= skipped -2, +2 lines =@@
 === genericContextualTypes1.ts ===
 type Box<T> = { value: T };
 >Box : Box<T>
+>T : T
 >value : T
 
 declare function wrap<A, B>(f: (a: A) => B): (a: A) => B;
 >wrap : <A, B>(f: (a: A) => B) => (a: A) => B
+>A : A
+>B : B
 >f : (a: A) => B
 >a : A
 >a : A
 
 declare function compose<A, B, C>(f: (a: A) => B, g: (b: B) => C): (a: A) => C;
 >compose : <A, B, C>(f: (a: A) => B, g: (b: B) => C) => (a: A) => C
+>A : A
+>B : B
+>C : C
 >f : (a: A) => B
 >a : A
 >g : (b: B) => C
@@= skipped -18, +24 lines =@@
 
 declare function list<T>(a: T): T[];
 >list : <T>(a: T) => T[]
+>T : T
 >a : T
 
 declare function unlist<T>(a: T[]): T;
 >unlist : <T>(a: T[]) => T
+>T : T
 >a : T[]
 
 declare function box<V>(x: V): Box<V>;
 >box : <V>(x: V) => Box<V>
+>V : V
 >x : V
 
 declare function unbox<W>(x: Box<W>): W;
 >unbox : <W>(x: Box<W>) => W
+>W : W
 >x : Box<W>
 
 declare function map<T, U>(a: T[], f: (x: T) => U): U[];
 >map : <T, U>(a: T[], f: (x: T) => U) => U[]
+>T : T
+>U : U
 >a : T[]
 >f : (x: T) => U
 >x : T
 
 declare function identity<T>(x: T): T;
 >identity : <T>(x: T) => T
+>T : T
 >x : T
 
 declare function zip<A, B>(a: A, b: B): [A, B];
 >zip : <A, B>(a: A, b: B) => [A, B]
+>A : A
+>B : B
 >a : A
 >b : B
 
 declare function flip<X, Y, Z>(f: (x: X, y: Y) => Z): (y: Y, x: X) => Z;
 >flip : <X, Y, Z>(f: (x: X, y: Y) => Z) => (y: Y, x: X) => Z
+>X : X
+>Y : Y
+>Z : Z
 >f : (x: X, y: Y) => Z
 >x : X
 >y : Y
@@= skipped -39, +51 lines =@@
 
 const f00: <A>(x: A) => A[] = list;
 >f00 : <A>(x: A) => A[]
+>A : A
 >x : A
 >list : <T>(a: T) => T[]
 
 const f01: <A>(x: A) => A[] = x => [x];
 >f01 : <A>(x: A) => A[]
+>A : A
 >x : A
 >x => [x] : <A>(x: A) => A[]
 >x : A
@@= skipped -13, +15 lines =@@
 
 const f02: <A>(x: A) => A[] = wrap(list);
 >f02 : <A>(x: A) => A[]
+>A : A
 >x : A
 >wrap(list) : (a: A) => A[]
 >wrap : <A, B>(f: (a: A) => B) => (a: A) => B
@@= skipped -7, +8 lines =@@
 
 const f03: <A>(x: A) => A[] = wrap(x => [x]);
 >f03 : <A>(x: A) => A[]
+>A : A
 >x : A
 >wrap(x => [x]) : (a: A) => A[]
 >wrap : <A, B>(f: (a: A) => B) => (a: A) => B
@@= skipped -10, +11 lines =@@
 
 const f10: <T>(x: T) => Box<T[]> = compose(a => list(a), b => box(b));
 >f10 : <T>(x: T) => Box<T[]>
+>T : T
 >x : T
 >compose(a => list(a), b => box(b)) : (a: T) => Box<T[]>
 >compose : <A, B, C>(f: (a: A) => B, g: (b: B) => C) => (a: A) => C
@@= skipped -16, +17 lines =@@
 
 const f11: <T>(x: T) => Box<T[]> = compose(list, box);
 >f11 : <T>(x: T) => Box<T[]>
+>T : T
 >x : T
 >compose(list, box) : (a: T) => Box<T[]>
 >compose : <A, B, C>(f: (a: A) => B, g: (b: B) => C) => (a: A) => C
@@= skipped -8, +9 lines =@@
 
 const f12: <T>(x: Box<T[]>) => T = compose(a => unbox(a), b => unlist(b));
 >f12 : <T>(x: Box<T[]>) => T
+>T : T
 >x : Box<T[]>
 >compose(a => unbox(a), b => unlist(b)) : (a: Box<T[]>) => T
 >compose : <A, B, C>(f: (a: A) => B, g: (b: B) => C) => (a: A) => C
@@= skipped -16, +17 lines =@@
 
 const f13: <T>(x: Box<T[]>) => T = compose(unbox, unlist);
 >f13 : <T>(x: Box<T[]>) => T
+>T : T
 >x : Box<T[]>
 >compose(unbox, unlist) : (a: Box<T[]>) => T
 >compose : <A, B, C>(f: (a: A) => B, g: (b: B) => C) => (a: A) => C
@@= skipped -9, +10 lines =@@
 const arrayMap = <T, U>(f: (x: T) => U) => (a: T[]) => a.map(f);
 >arrayMap : <T, U>(f: (x: T) => U) => (a: T[]) => U[]
 ><T, U>(f: (x: T) => U) => (a: T[]) => a.map(f) : <T, U>(f: (x: T) => U) => (a: T[]) => U[]
+>T : T
+>U : U
 >f : (x: T) => U
 >x : T
 >(a: T[]) => a.map(f) : (a: T[]) => U[]
 >a : T[]
 >a.map(f) : U[]
->a.map : <U_1>(callbackfn: (value: T, index: number, array: T[]) => U_1, thisArg?: any) => U_1[]
+>a.map : <U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any) => U[]
 >a : T[]
->map : <U_1>(callbackfn: (value: T, index: number, array: T[]) => U_1, thisArg?: any) => U_1[]
+>map : <U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any) => U[]
 >f : (x: T) => U
 
 const arrayFilter = <T>(f: (x: T) => boolean) => (a: T[]) => a.filter(f);
 >arrayFilter : <T>(f: (x: T) => boolean) => (a: T[]) => T[]
 ><T>(f: (x: T) => boolean) => (a: T[]) => a.filter(f) : <T>(f: (x: T) => boolean) => (a: T[]) => T[]
+>T : T
 >f : (x: T) => boolean
 >x : T
 >(a: T[]) => a.filter(f) : (a: T[]) => T[]
@@= skipped -36, +39 lines =@@
 
 const f21: <A>(a: A[]) => A[][] = arrayMap(x => [x]);
 >f21 : <A>(a: A[]) => A[][]
+>A : A
 >a : A[]
 >arrayMap(x => [x]) : (a: A[]) => A[][]
 >arrayMap : <T, U>(f: (x: T) => U) => (a: T[]) => U[]
@@= skipped -10, +11 lines =@@
 
 const f22: <A>(a: A[]) => A[] = arrayMap(identity);
 >f22 : <A>(a: A[]) => A[]
+>A : A
 >a : A[]
 >arrayMap(identity) : (a: A[]) => A[]
 >arrayMap : <T, U>(f: (x: T) => U) => (a: T[]) => U[]
@@= skipped -7, +8 lines =@@
 
 const f23: <A>(a: A[]) => Box<A>[] = arrayMap(value => ({ value }));
 >f23 : <A>(a: A[]) => Box<A>[]
+>A : A
 >a : A[]
 >arrayMap(value => ({ value })) : (a: A[]) => { value: A; }[]
 >arrayMap : <T, U>(f: (x: T) => U) => (a: T[]) => U[]
@@= skipped -24, +25 lines =@@
 
 const f31: <T extends Box<number>>(a: T[]) => T[] = arrayFilter(x => x.value > 10);
 >f31 : <T extends Box<number>>(a: T[]) => T[]
+>T : T
 >a : T[]
 >arrayFilter(x => x.value > 10) : (a: T[]) => T[]
 >arrayFilter : <T>(f: (x: T) => boolean) => (a: T[]) => T[]
@@= skipped -13, +14 lines =@@
 
 const f40: <A, B>(b: B, a: A) => [A, B] = flip(zip);
 >f40 : <A, B>(b: B, a: A) => [A, B]
+>A : A
+>B : B
 >b : B
 >a : A
 >flip(zip) : (y: B, x: A) => [A, B]
@@= skipped -10, +12 lines =@@
 
 type fn = <A>(a: A) => A;
 >fn : fn
+>A : A
 >a : A
 
 const fn: fn = a => a;
