--- old.typeofOperatorWithBooleanType.types
+++ new.typeofOperatorWithBooleanType.types
@@= skipped -32, +32 lines =@@
 
 // boolean type var
 var ResultIsString1 = typeof BOOLEAN;
->ResultIsString1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof BOOLEAN : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof BOOLEAN : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >BOOLEAN : boolean
 
 // boolean type literal
 var ResultIsString2 = typeof true;
->ResultIsString2 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof true : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString2 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof true : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >true : true
 
 var ResultIsString3 = typeof { x: true, y: false };
->ResultIsString3 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof { x: true, y: false } : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString3 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof { x: true, y: false } : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >{ x: true, y: false } : { x: boolean; y: boolean; }
 >x : boolean
 >true : true
@@= skipped -21, +21 lines =@@
 
 // boolean type expressions
 var ResultIsString4 = typeof objA.a;
->ResultIsString4 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof objA.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString4 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof objA.a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >objA.a : boolean
 >objA : A
 >a : boolean
 
 var ResultIsString5 = typeof M.n;
->ResultIsString5 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof M.n : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString5 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof M.n : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >M.n : boolean
 >M : typeof M
 >n : boolean
 
 var ResultIsString6 = typeof foo();
->ResultIsString6 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof foo() : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString6 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof foo() : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >foo() : boolean
 >foo : () => boolean
 
 var ResultIsString7 = typeof A.foo();
->ResultIsString7 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof A.foo() : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString7 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof A.foo() : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >A.foo() : boolean
 >A.foo : () => boolean
 >A : typeof A
@@= skipped -29, +29 lines =@@
 
 // multiple typeof  operator
 var ResultIsString8 = typeof typeof BOOLEAN;
->ResultIsString8 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof typeof BOOLEAN : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof BOOLEAN : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString8 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof typeof BOOLEAN : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof BOOLEAN : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >BOOLEAN : boolean
 
 // miss assignment operators
 typeof true;
->typeof true : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof true : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >true : true
 
 typeof BOOLEAN;
->typeof BOOLEAN : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof BOOLEAN : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >BOOLEAN : boolean
 
 typeof foo();
->typeof foo() : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof foo() : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >foo() : boolean
 >foo : () => boolean
 
 typeof true, false;
 >typeof true, false : false
->typeof true : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof true : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >true : true
 >false : false
 
 typeof objA.a;
->typeof objA.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof objA.a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >objA.a : boolean
 >objA : A
 >a : boolean
 
 typeof M.n;
->typeof M.n : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof M.n : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >M.n : boolean
 >M : typeof M
 >n : boolean
@@= skipped -49, +49 lines =@@
 
 z: typeof BOOLEAN;
 >z : any
->typeof BOOLEAN : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof BOOLEAN : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >BOOLEAN : boolean
 
 r: typeof foo;
 >r : any
->typeof foo : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof foo : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >foo : () => boolean
 
 var y = { a: true, b: false};
@@= skipped -18, +18 lines =@@
 
 z: typeof y.a;
 >z : any
->typeof y.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof y.a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >y.a : boolean
 >y : { a: boolean; b: boolean; }
 >a : boolean
 
 z: typeof objA.a;
 >z : any
->typeof objA.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof objA.a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >objA.a : boolean
 >objA : A
 >a : boolean
 
 z: typeof A.foo;
 >z : any
->typeof A.foo : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof A.foo : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >A.foo : () => boolean
 >A : typeof A
 >foo : () => boolean
 
 z: typeof M.n;
 >z : any
->typeof M.n : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof M.n : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >M.n : boolean
 >M : typeof M
 >n : boolean
