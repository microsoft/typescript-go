--- old.constructSignatureAssignabilityInInheritance.types
+++ new.constructSignatureAssignabilityInInheritance.types
@@= skipped -3, +3 lines =@@
 // Checking basic subtype relations with construct signatures
 
 module ConstructSignature {
+>ConstructSignature : any
+
     interface Base { // T
+>Base : Base
+
         // M's
         new (x: number): void; // BUG 842221
 >x : number
@@= skipped -12, +16 lines =@@
 
     // S's
     interface I extends Base {
+>I : I
+
         // N's
         new (x: number): number; // satisfies subtype for both of base's call signatures
 >x : number
@@= skipped -10, +12 lines =@@
     }
 
     interface Base2 { // T
+>Base2 : Base2
+
         // M's
         new (x: number): number;
 >x : number
@@= skipped -7, +9 lines =@@
 
     // S's
     interface I2 extends Base2 {
+>I2 : I2
+
         // N's
         new (x: number): string; // error because return types don't match
 >x : number
@@= skipped -7, +9 lines =@@
 
     // S's
     interface I3 extends Base2 {
+>I3 : I3
+
         // N's
         new <T>(x: T): string; // ok, adds a new call signature
+>T : T
 >x : T
     }
 }
@@= skipped -10, +13 lines =@@
 >MemberWithConstructSignature : typeof MemberWithConstructSignature
 
     interface Base { // T
+>Base : Base
+
         // M's
         a: new (x: number) => void;
 >a : new (x: number) => void
@@= skipped -12, +14 lines =@@
 
         a3: new <T>(x: T) => void;
 >a3 : new <T>(x: T) => void
+>T : T
 >x : T
     }
 
@@= skipped -16, +17 lines =@@
 
     // S's
     interface I extends Base {
+>I : I
+
         // N's
         a: new (x: number) => number; // ok because base returns void
 >a : new (x: number) => number
@@= skipped -12, +14 lines =@@
 
         a3: new <T>(x: T) => string; // ok because base returns void
 >a3 : new <T>(x: T) => string
+>T : T
 >x : T
     }
 
     interface Base2 { // T
+>Base2 : Base2
+
         // M's
         a: new (x: number) => number;
 >a : new (x: number) => number
@@= skipped -11, +14 lines =@@
 
         a2: new <T>(x: T) => T;
 >a2 : new <T>(x: T) => T
+>T : T
 >x : T
     }
 
     // S's
     interface I2 extends Base2 {
+>I2 : I2
+
         // N's
         a: new (x: number) => string; // error because base returns non-void;
 >a : new (x: number) => string
@@= skipped -13, +16 lines =@@
 
     // S's
     interface I3 extends Base2 {
+>I3 : I3
+
         // N's
         a2: new <T>(x: T) => string; // error because base returns non-void;
 >a2 : new <T>(x: T) => string
+>T : T
 >x : T
     }
 }
