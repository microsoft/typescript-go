--- old.interfaceWithMultipleBaseTypes.types
+++ new.interfaceWithMultipleBaseTypes.types
@@= skipped -3, +3 lines =@@
 // an interface may have multiple bases with properties of the same name as long as the interface's implementation satisfies all base type versions
 
 interface Base1 {
+>Base1 : Base1
+
     x: {
 >x : { a: string; }
 
@@= skipped -9, +11 lines =@@
 }
 
 interface Base2 {
+>Base2 : Base2
+
     x: {
 >x : { b: string; }
 
@@= skipped -9, +11 lines =@@
 }
 
 interface Derived extends Base1, Base2 {
+>Derived : Derived
+
     x: {
 >x : { a: string; b: string; }
 
@@= skipped -10, +12 lines =@@
 }
 
 interface Derived2 extends Base1, Base2 { // error
+>Derived2 : Derived2
+
     x: {
 >x : { a: string; b: number; }
 
@@= skipped -10, +12 lines =@@
 }
 
 module Generic {
+>Generic : any
+
     interface Base1<T> {
+>Base1 : Base1<T>
+>T : T
+
         x: {
 >x : { a: T; }
 
@@= skipped -10, +15 lines =@@
     }
 
     interface Base2<T> {
+>Base2 : Base2<T>
+>T : T
+
         x: {
 >x : { b: T; }
 
@@= skipped -9, +12 lines =@@
     }
 
     interface Derived<T> extends Base1<string>, Base2<number> {
+>Derived : Derived<T>
+>T : T
+
         x: {
 >x : { a: string; b: number; }
 
@@= skipped -10, +13 lines =@@
     }
 
     interface Derived2<T, U> extends Base1<T>, Base2<U> {
+>Derived2 : Derived2<T, U>
+>T : T
+>U : U
+
         x: {
 >x : { a: T; b: U; }
 
@@= skipped -10, +14 lines =@@
     }
 
     interface Derived3<T> extends Base1<number>, Base2<number> { } // error
+>Derived3 : Derived3<T>
+>T : T
 
     interface Derived4<T> extends Base1<number>, Base2<number> { // error
+>Derived4 : Derived4<T>
+>T : T
+
         x: {
 >x : { a: T; b: T; }
 
@@= skipped -12, +17 lines =@@
     }
 
     interface Derived5<T> extends Base1<T>, Base2<T> { // error
+>Derived5 : Derived5<T>
+>T : T
+
         x: T;
 >x : T
     }
