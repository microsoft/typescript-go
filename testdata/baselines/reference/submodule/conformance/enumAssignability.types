//// [tests/cases/conformance/types/typeRelationships/assignmentCompatibility/enumAssignability.ts] ////

=== enumAssignability.ts ===
// enums assignable to number, any, Object, errors unless otherwise noted

enum E { A }
>E : E.A
>A : E.A

enum F { B }
>F : F.B
>B : F.B

var e = E.A;
>e : E.A
>E.A : E.A
>E : typeof E
>A : E.A

var f = F.B;
>f : F.B
>F.B : F.B
>F : typeof F
>B : F.B

e = f; 
>e = f : F.B
>e : E.A
>f : F.B

f = e; 
>f = e : E.A
>f : F.B
>e : E.A

e = 1; // ok
>e = 1 : 1
>e : E.A
>1 : 1

f = 1; // ok
>f = 1 : 1
>f : F.B
>1 : 1

var x: number = e; // ok
>x : number
>e : E.A

x = f; // ok
>x = f : F.B
>x : number
>f : F.B

module Others {
>Others : typeof Others

    var a: any = e; // ok
>a : any
>e : E.A

    class C {
>C : C

        foo: string;
>foo : string
    }
    var ac: C;
>ac : C

    interface I {
>I : I

        foo: string;
>foo : string
    }
    var ai: I;
>ai : I

    var b: number = e; // ok
>b : number
>e : E.A

    var c: string = e;
>c : string
>e : E.A

    var d: boolean = e;
>d : boolean
>e : E.A

    var ee: Date = e;
>ee : Date
>e : E.A

    var f: any = e; // ok
>f : any
>e : E.A

    var g: void = e;
>g : void
>e : E.A

    var h: Object = e;
>h : Object
>e : E.A

    var i: {} = e;
>i : {}
>e : E.A

    var j: () => {} = e;
>j : () => {}
>e : E.A

    var k: Function = e;
>k : Function
>e : E.A

    var l: (x: number) => string = e;
>l : (x: number) => string
>x : number
>e : E.A

    ac = e;
>ac = e : E.A
>ac : C
>e : E.A

    ai = e;
>ai = e : E.A
>ai : I
>e : E.A

    var m: number[] = e;
>m : number[]
>e : E.A

    var n: { foo: string } = e;
>n : { foo: string; }
>foo : string
>e : E.A

    var o: <T>(x: T) => T = e;
>o : <T>(x: T) => T
>T : T
>x : T
>e : E.A

    var p: Number = e;
>p : Number
>e : E.A

    var q: String = e;
>q : String
>e : E.A

    function foo<T, U extends T, V extends Date, A extends Number, B extends E>(x: T, y: U, z: V) {
>foo : <T, U extends T, V extends Date, A extends Number, B extends E.A>(x: T, y: U, z: V) => void
>T : T
>U : U
>V : V
>A : A
>B : B
>x : T
>y : U
>z : V

        x = e;
>x = e : E.A
>x : T
>e : E.A

        y = e;
>y = e : E.A
>y : U
>e : E.A

        z = e;
>z = e : E.A
>z : V
>e : E.A

        var a: A = e;
>a : A
>e : E.A

        var b: B = e;
>b : B
>e : E.A
    }
}
