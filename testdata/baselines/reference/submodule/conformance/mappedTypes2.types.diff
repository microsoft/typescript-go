--- old.mappedTypes2.types
+++ new.mappedTypes2.types
@@= skipped -2, +2 lines =@@
 === mappedTypes2.ts ===
 function verifyLibTypes<T, K extends keyof T, U>() {
 >verifyLibTypes : <T, K extends keyof T, U>() => void
+>T : T
+>K : K
+>U : U
 
     var x1: Partial<T>;
 >x1 : Partial<T>
 
     var x1: { [P in keyof T]?: T[P] };
 >x1 : Partial<T>
+>P : P
 
     var x2: Readonly<T>;
 >x2 : Readonly<T>
 
     var x2: { readonly [P in keyof T]: T[P] };
 >x2 : Readonly<T>
+>P : P
 
     var x3: Pick<T, K>;
 >x3 : Pick<T, K>
 
     var x3: { [P in K]: T[P] };
 >x3 : Pick<T, K>
+>P : P
 
     var x4: Record<K, U>;
 >x4 : Record<K, U>
 
     var x4: { [P in K]: U };
 >x4 : Record<K, U>
+>P : P
 }
 
 type Proxy<T> = {
 >Proxy : Proxy<T>
+>T : T
 
     get(): T;
 >get : () => T
@@= skipped -39, +47 lines =@@
 
 type Proxify<T> = {
 >Proxify : Proxify<T>
+>T : T
 
     [P in keyof T]: Proxy<T[P]>;
+>P : P
 }
 
 type DeepReadonly<T> = {
 >DeepReadonly : DeepReadonly<T>
+>T : T
 
     readonly [P in keyof T]: DeepReadonly<T[P]>;
+>P : P
+
 };
 
 declare function assign<T>(obj: T, props: Partial<T>): void;
 >assign : <T>(obj: T, props: Partial<T>) => void
+>T : T
 >obj : T
 >props : Partial<T>
 
 declare function freeze<T>(obj: T): Readonly<T>;
 >freeze : <T>(obj: T) => Readonly<T>
+>T : T
 >obj : T
 
 declare function pick<T, K extends keyof T>(obj: T, ...keys: K[]): Pick<T, K>;
 >pick : <T, K extends keyof T>(obj: T, ...keys: K[]) => Pick<T, K>
+>T : T
+>K : K
 >obj : T
 >keys : K[]
 
 declare function mapObject<K extends string, T, U>(obj: Record<K, T>, f: (x: T) => U): Record<K, U>;
 >mapObject : <K extends string, T, U>(obj: Record<K, T>, f: (x: T) => U) => Record<K, U>
+>K : K
+>T : T
+>U : U
 >obj : Record<K, T>
 >f : (x: T) => U
 >x : T
 
 declare function proxify<T>(obj: T): Proxify<T>;
 >proxify : <T>(obj: T) => Proxify<T>
+>T : T
 >obj : T
 
 interface Point {
+>Point : Point
+
     x: number;
 >x : number
 
@@= skipped -43, +58 lines =@@
 }
 
 interface Shape {
+>Shape : Shape
+
     name: string;
 >name : string
 
@@= skipped -14, +16 lines =@@
 }
 
 interface PartialShape {
+>PartialShape : PartialShape
+
     name?: string;
 >name : string | undefined
 
@@= skipped -14, +16 lines =@@
 }
 
 interface ReadonlyShape {
+>ReadonlyShape : ReadonlyShape
+
     readonly name: string;
 >name : string
 
@@= skipped -74, +76 lines =@@
 >shape : Shape
 
     const x = pick(shape, "name", "location");  // { name: string, location: Point }
->x : Pick<Shape, "name" | "location">
->pick(shape, "name", "location") : Pick<Shape, "name" | "location">
+>x : Pick<Shape, "location" | "name">
+>pick(shape, "name", "location") : Pick<Shape, "location" | "name">
 >pick : <T, K extends keyof T>(obj: T, ...keys: K[]) => Pick<T, K>
 >shape : Shape
 >"name" : "name"
@@= skipped -22, +22 lines =@@
 >"bye" : "bye"
 
     const lengths = mapObject(rec, s => s.length);  // { foo: number, bar: number, baz: number }
->lengths : Record<"foo" | "bar" | "baz", number>
->mapObject(rec, s => s.length) : Record<"foo" | "bar" | "baz", number>
+>lengths : Record<"bar" | "baz" | "foo", number>
+>mapObject(rec, s => s.length) : Record<"bar" | "baz" | "foo", number>
 >mapObject : <K extends string, T, U>(obj: Record<K, T>, f: (x: T) => U) => Record<K, U>
 >rec : { foo: string; bar: string; baz: string; }
 >s => s.length : (s: string) => number
