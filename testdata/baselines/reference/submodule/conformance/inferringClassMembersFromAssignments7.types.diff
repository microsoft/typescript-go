--- old.inferringClassMembersFromAssignments7.types
+++ new.inferringClassMembersFromAssignments7.types
@@= skipped -2, +2 lines =@@
 === inferringClassMembersFromAssignments7.js ===
 class C {
 >C : C
->  : ^
 
     constructor() {
         var self = this
 >self : this
->     : ^^^^
 >this : this
->     : ^^^^
 
         self.x = 1
 >self.x = 1 : 1
->           : ^
 >self.x : any
 >self : this
->     : ^^^^
 >x : any
->  : ^^^
 >1 : 1
->  : ^
 
         self.m = function() {
 >self.m = function() {            console.log(self.x)        } : () => void
->                                                              : ^^^^^^^^^^
 >self.m : any
 >self : this
->     : ^^^^
 >m : any
->  : ^^^
 >function() {            console.log(self.x)        } : () => void
->                                                     : ^^^^^^^^^^
 
             console.log(self.x)
 >console.log(self.x) : void
->                    : ^^^^
 >console.log : (...data: any[]) => void
->            : ^^^^    ^^     ^^^^^    
 >console : Console
->        : ^^^^^^^
 >log : (...data: any[]) => void
->    : ^^^^    ^^     ^^^^^    
->self.x : number
->       : ^^^^^^
+>self.x : any
 >self : this
->     : ^^^^
->x : number
->  : ^^^^^^
+>x : any
         }
     }
     mreal() {
 >mreal : () => void
->      : ^^^^^^^^^^
 
         var self = this
 >self : this
->     : ^^^^
 >this : this
->     : ^^^^
 
         self.y = 2
 >self.y = 2 : 2
->           : ^
->self.y : number | undefined
->       : ^^^^^^^^^^^^^^^^^^
+>self.y : any
 >self : this
->     : ^^^^
->y : number | undefined
->  : ^^^^^^^^^^^^^^^^^^
+>y : any
 >2 : 2
->  : ^
     }
 }
 const c = new C()
 >c : C
->  : ^
 >new C() : C
->        : ^
 >C : typeof C
->  : ^^^^^^^^
 
 c.x
->c.x : number
->    : ^^^^^^
+>c.x : any
 >c : C
->  : ^
->x : number
->  : ^^^^^^
+>x : any
 
 c.y
->c.y : number | undefined
->    : ^^^^^^^^^^^^^^^^^^
+>c.y : any
 >c : C
->  : ^
->y : number | undefined
->  : ^^^^^^^^^^^^^^^^^^
+>y : any
 
 c.m()
->c.m() : void
->      : ^^^^
->c.m : () => void
->    : ^^^^^^^^^^
+>c.m() : any
+>c.m : any
 >c : C
->  : ^
->m : () => void
->  : ^^^^^^^^^^
+>m : any
 
