--- old.uniqueSymbolsErrors.symbols
+++ new.uniqueSymbolsErrors.symbols
@@= skipped -48, +48 lines =@@
 >invalidConstructorArgType : Symbol(invalidConstructorArgType, Decl(uniqueSymbolsErrors.ts, 17, 16))
 
     readonly invalidReadonlyPropertyType: unique symbol;
->invalidReadonlyPropertyType : Symbol(InvalidClass.invalidReadonlyPropertyType, Decl(uniqueSymbolsErrors.ts, 17, 60))
+>invalidReadonlyPropertyType : Symbol(invalidReadonlyPropertyType, Decl(uniqueSymbolsErrors.ts, 17, 60))
 
     invalidPropertyType: unique symbol;
->invalidPropertyType : Symbol(InvalidClass.invalidPropertyType, Decl(uniqueSymbolsErrors.ts, 19, 56))
+>invalidPropertyType : Symbol(invalidPropertyType, Decl(uniqueSymbolsErrors.ts, 19, 56))
 
     invalidArgType(arg: unique symbol): void { return; }
->invalidArgType : Symbol(InvalidClass.invalidArgType, Decl(uniqueSymbolsErrors.ts, 20, 39))
+>invalidArgType : Symbol(invalidArgType, Decl(uniqueSymbolsErrors.ts, 20, 39))
 >arg : Symbol(arg, Decl(uniqueSymbolsErrors.ts, 21, 19))
 
     invalidRestArgType(...args: (unique symbol)[]): void { return; }
->invalidRestArgType : Symbol(InvalidClass.invalidRestArgType, Decl(uniqueSymbolsErrors.ts, 21, 56))
+>invalidRestArgType : Symbol(invalidRestArgType, Decl(uniqueSymbolsErrors.ts, 21, 56))
 >args : Symbol(args, Decl(uniqueSymbolsErrors.ts, 22, 23))
 
     invalidReturnType(): unique symbol { return; }
->invalidReturnType : Symbol(InvalidClass.invalidReturnType, Decl(uniqueSymbolsErrors.ts, 22, 68))
+>invalidReturnType : Symbol(invalidReturnType, Decl(uniqueSymbolsErrors.ts, 22, 68))
 
     invalidThisType(this: unique symbol): void { return; }
->invalidThisType : Symbol(InvalidClass.invalidThisType, Decl(uniqueSymbolsErrors.ts, 23, 50))
+>invalidThisType : Symbol(invalidThisType, Decl(uniqueSymbolsErrors.ts, 23, 50))
 >this : Symbol(this, Decl(uniqueSymbolsErrors.ts, 24, 20))
 
     invalidTypePredicate(n: any): n is unique symbol { return; }
->invalidTypePredicate : Symbol(InvalidClass.invalidTypePredicate, Decl(uniqueSymbolsErrors.ts, 24, 58))
+>invalidTypePredicate : Symbol(invalidTypePredicate, Decl(uniqueSymbolsErrors.ts, 24, 58))
 >n : Symbol(n, Decl(uniqueSymbolsErrors.ts, 25, 25))
 >n : Symbol(n, Decl(uniqueSymbolsErrors.ts, 25, 25))
 
     invalidTypeParameterConstraint<T extends unique symbol>(): void { return; }
->invalidTypeParameterConstraint : Symbol(InvalidClass.invalidTypeParameterConstraint, Decl(uniqueSymbolsErrors.ts, 25, 64))
+>invalidTypeParameterConstraint : Symbol(invalidTypeParameterConstraint, Decl(uniqueSymbolsErrors.ts, 25, 64))
 >T : Symbol(T, Decl(uniqueSymbolsErrors.ts, 26, 35))
 
     invalidTypeParameterDefault<T = unique symbol>(): void { return; }
->invalidTypeParameterDefault : Symbol(InvalidClass.invalidTypeParameterDefault, Decl(uniqueSymbolsErrors.ts, 26, 79))
+>invalidTypeParameterDefault : Symbol(invalidTypeParameterDefault, Decl(uniqueSymbolsErrors.ts, 26, 79))
 >T : Symbol(T, Decl(uniqueSymbolsErrors.ts, 27, 32))
 
     get invalidGetter(): unique symbol { return; }
->invalidGetter : Symbol(InvalidClass.invalidGetter, Decl(uniqueSymbolsErrors.ts, 27, 70))
+>invalidGetter : Symbol(invalidGetter, Decl(uniqueSymbolsErrors.ts, 27, 70))
 
     set invalidSetter(arg: unique symbol) { return; }
->invalidSetter : Symbol(InvalidClass.invalidSetter, Decl(uniqueSymbolsErrors.ts, 28, 50))
+>invalidSetter : Symbol(invalidSetter, Decl(uniqueSymbolsErrors.ts, 28, 50))
 >arg : Symbol(arg, Decl(uniqueSymbolsErrors.ts, 29, 22))
 
     static invalidStaticPropertyType: unique symbol;
->invalidStaticPropertyType : Symbol(InvalidClass.invalidStaticPropertyType, Decl(uniqueSymbolsErrors.ts, 29, 53))
+>invalidStaticPropertyType : Symbol(invalidStaticPropertyType, Decl(uniqueSymbolsErrors.ts, 29, 53))
 
     static invalidStaticArgType(arg: unique symbol): void { return; }
->invalidStaticArgType : Symbol(InvalidClass.invalidStaticArgType, Decl(uniqueSymbolsErrors.ts, 31, 52))
+>invalidStaticArgType : Symbol(invalidStaticArgType, Decl(uniqueSymbolsErrors.ts, 31, 52))
 >arg : Symbol(arg, Decl(uniqueSymbolsErrors.ts, 32, 32))
 
     static invalidStaticRestArgType(...args: (unique symbol)[]): void { return; }
->invalidStaticRestArgType : Symbol(InvalidClass.invalidStaticRestArgType, Decl(uniqueSymbolsErrors.ts, 32, 69))
+>invalidStaticRestArgType : Symbol(invalidStaticRestArgType, Decl(uniqueSymbolsErrors.ts, 32, 69))
 >args : Symbol(args, Decl(uniqueSymbolsErrors.ts, 33, 36))
 
     static invalidStaticReturnType(): unique symbol { return; }
->invalidStaticReturnType : Symbol(InvalidClass.invalidStaticReturnType, Decl(uniqueSymbolsErrors.ts, 33, 81))
+>invalidStaticReturnType : Symbol(invalidStaticReturnType, Decl(uniqueSymbolsErrors.ts, 33, 81))
 
     static invalidStaticThisType(this: unique symbol): void { return; }
->invalidStaticThisType : Symbol(InvalidClass.invalidStaticThisType, Decl(uniqueSymbolsErrors.ts, 34, 63))
+>invalidStaticThisType : Symbol(invalidStaticThisType, Decl(uniqueSymbolsErrors.ts, 34, 63))
 >this : Symbol(this, Decl(uniqueSymbolsErrors.ts, 35, 33))
 
     static invalidStaticTypePredicate(n: any): n is unique symbol { return; }
->invalidStaticTypePredicate : Symbol(InvalidClass.invalidStaticTypePredicate, Decl(uniqueSymbolsErrors.ts, 35, 71))
+>invalidStaticTypePredicate : Symbol(invalidStaticTypePredicate, Decl(uniqueSymbolsErrors.ts, 35, 71))
 >n : Symbol(n, Decl(uniqueSymbolsErrors.ts, 36, 38))
 >n : Symbol(n, Decl(uniqueSymbolsErrors.ts, 36, 38))
 
     static invalidStaticTypeParameterConstraint<T extends unique symbol>(): void { return; }
->invalidStaticTypeParameterConstraint : Symbol(InvalidClass.invalidStaticTypeParameterConstraint, Decl(uniqueSymbolsErrors.ts, 36, 77))
+>invalidStaticTypeParameterConstraint : Symbol(invalidStaticTypeParameterConstraint, Decl(uniqueSymbolsErrors.ts, 36, 77))
 >T : Symbol(T, Decl(uniqueSymbolsErrors.ts, 37, 48))
 
     static invalidStaticTypeParameterDefault<T = unique symbol>(): void { return; }
->invalidStaticTypeParameterDefault : Symbol(InvalidClass.invalidStaticTypeParameterDefault, Decl(uniqueSymbolsErrors.ts, 37, 92))
+>invalidStaticTypeParameterDefault : Symbol(invalidStaticTypeParameterDefault, Decl(uniqueSymbolsErrors.ts, 37, 92))
 >T : Symbol(T, Decl(uniqueSymbolsErrors.ts, 38, 45))
 
     static get invalidStaticGetter(): unique symbol { return; }
->invalidStaticGetter : Symbol(InvalidClass.invalidStaticGetter, Decl(uniqueSymbolsErrors.ts, 38, 83))
+>invalidStaticGetter : Symbol(invalidStaticGetter, Decl(uniqueSymbolsErrors.ts, 38, 83))
 
     static set invalidStaticSetter(arg: unique symbol) { return; }
->invalidStaticSetter : Symbol(InvalidClass.invalidStaticSetter, Decl(uniqueSymbolsErrors.ts, 39, 63))
+>invalidStaticSetter : Symbol(invalidStaticSetter, Decl(uniqueSymbolsErrors.ts, 39, 63))
 >arg : Symbol(arg, Decl(uniqueSymbolsErrors.ts, 40, 35))
 }
 
@@= skipped -84, +84 lines =@@
 >InvalidInterface : Symbol(InvalidInterface, Decl(uniqueSymbolsErrors.ts, 41, 1))
 
     invalidPropertyType: unique symbol;
->invalidPropertyType : Symbol(InvalidInterface.invalidPropertyType, Decl(uniqueSymbolsErrors.ts, 44, 28))
+>invalidPropertyType : Symbol(invalidPropertyType, Decl(uniqueSymbolsErrors.ts, 44, 28))
 
     invalidArgType(arg: unique symbol): void;
->invalidArgType : Symbol(InvalidInterface.invalidArgType, Decl(uniqueSymbolsErrors.ts, 45, 39))
+>invalidArgType : Symbol(invalidArgType, Decl(uniqueSymbolsErrors.ts, 45, 39))
 >arg : Symbol(arg, Decl(uniqueSymbolsErrors.ts, 46, 19))
 
     invalidRestArgType(...args: (unique symbol)[]): void;
->invalidRestArgType : Symbol(InvalidInterface.invalidRestArgType, Decl(uniqueSymbolsErrors.ts, 46, 45))
+>invalidRestArgType : Symbol(invalidRestArgType, Decl(uniqueSymbolsErrors.ts, 46, 45))
 >args : Symbol(args, Decl(uniqueSymbolsErrors.ts, 47, 23))
 
     invalidReturnType(): unique symbol;
->invalidReturnType : Symbol(InvalidInterface.invalidReturnType, Decl(uniqueSymbolsErrors.ts, 47, 57))
+>invalidReturnType : Symbol(invalidReturnType, Decl(uniqueSymbolsErrors.ts, 47, 57))
 
     invalidThisType(this: unique symbol);
->invalidThisType : Symbol(InvalidInterface.invalidThisType, Decl(uniqueSymbolsErrors.ts, 48, 39))
+>invalidThisType : Symbol(invalidThisType, Decl(uniqueSymbolsErrors.ts, 48, 39))
 >this : Symbol(this, Decl(uniqueSymbolsErrors.ts, 49, 20))
 
     invalidTypePredicate(n: any): n is unique symbol
->invalidTypePredicate : Symbol(InvalidInterface.invalidTypePredicate, Decl(uniqueSymbolsErrors.ts, 49, 41))
+>invalidTypePredicate : Symbol(invalidTypePredicate, Decl(uniqueSymbolsErrors.ts, 49, 41))
 >n : Symbol(n, Decl(uniqueSymbolsErrors.ts, 50, 25))
 >n : Symbol(n, Decl(uniqueSymbolsErrors.ts, 50, 25))
 
     invalidTypeParameterConstraint<T extends unique symbol>(): void;
->invalidTypeParameterConstraint : Symbol(InvalidInterface.invalidTypeParameterConstraint, Decl(uniqueSymbolsErrors.ts, 50, 52))
+>invalidTypeParameterConstraint : Symbol(invalidTypeParameterConstraint, Decl(uniqueSymbolsErrors.ts, 50, 52))
 >T : Symbol(T, Decl(uniqueSymbolsErrors.ts, 51, 35))
 
     invalidTypeParameterDefault<T = unique symbol>(): void;
->invalidTypeParameterDefault : Symbol(InvalidInterface.invalidTypeParameterDefault, Decl(uniqueSymbolsErrors.ts, 51, 68))
+>invalidTypeParameterDefault : Symbol(invalidTypeParameterDefault, Decl(uniqueSymbolsErrors.ts, 51, 68))
 >T : Symbol(T, Decl(uniqueSymbolsErrors.ts, 52, 32))
 }
 
