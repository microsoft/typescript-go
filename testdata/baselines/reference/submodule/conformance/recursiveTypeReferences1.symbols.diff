--- old.recursiveTypeReferences1.symbols
+++ new.recursiveTypeReferences1.symbols
@@= skipped -4, +4 lines =@@
 >ValueOrArray : Symbol(ValueOrArray, Decl(recursiveTypeReferences1.ts, 0, 0))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 0, 18))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 0, 18))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >ValueOrArray : Symbol(ValueOrArray, Decl(recursiveTypeReferences1.ts, 0, 0))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 0, 18))

@@= skipped -158, +158 lines =@@
 type RecArray<T> = Array<T | RecArray<T>>;
 >RecArray : Symbol(RecArray, Decl(recursiveTypeReferences1.ts, 46, 52))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 48, 14))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 48, 14))
 >RecArray : Symbol(RecArray, Decl(recursiveTypeReferences1.ts, 46, 52))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 48, 14))
@@= skipped -11, +11 lines =@@
 >a : Symbol(a, Decl(recursiveTypeReferences1.ts, 50, 25))
 >RecArray : Symbol(RecArray, Decl(recursiveTypeReferences1.ts, 46, 52))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 50, 22))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 50, 22))

 declare function flat1<T>(a: Array<T | Array<T>>): Array<T>
 >flat1 : Symbol(flat1, Decl(recursiveTypeReferences1.ts, 50, 51))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 51, 23))
 >a : Symbol(a, Decl(recursiveTypeReferences1.ts, 51, 26))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->T : Symbol(T, Decl(recursiveTypeReferences1.ts, 51, 23))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->T : Symbol(T, Decl(recursiveTypeReferences1.ts, 51, 23))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>T : Symbol(T, Decl(recursiveTypeReferences1.ts, 51, 23))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>T : Symbol(T, Decl(recursiveTypeReferences1.ts, 51, 23))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 51, 23))

 declare function flat2<T>(a: Array<T | Array<T | Array<T>>>): Array<T>;
 >flat2 : Symbol(flat2, Decl(recursiveTypeReferences1.ts, 51, 59))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 52, 23))
 >a : Symbol(a, Decl(recursiveTypeReferences1.ts, 52, 26))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->T : Symbol(T, Decl(recursiveTypeReferences1.ts, 52, 23))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->T : Symbol(T, Decl(recursiveTypeReferences1.ts, 52, 23))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->T : Symbol(T, Decl(recursiveTypeReferences1.ts, 52, 23))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>T : Symbol(T, Decl(recursiveTypeReferences1.ts, 52, 23))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>T : Symbol(T, Decl(recursiveTypeReferences1.ts, 52, 23))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>T : Symbol(T, Decl(recursiveTypeReferences1.ts, 52, 23))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(recursiveTypeReferences1.ts, 52, 23))

 flat([1, [2, [3]]]);  // number[]