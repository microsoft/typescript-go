--- old.genericCallTypeArgumentInference.types
+++ new.genericCallTypeArgumentInference.types
@@= skipped -4, +4 lines =@@
 
 function foo<T>(t: T) {
 >foo : <T>(t: T) => T
+>T : T
 >t : T
 
     return t;
@@= skipped -14, +15 lines =@@
 
 function foo2<T, U>(t: T, u: U) {
 >foo2 : <T, U>(t: T, u: U) => U
+>T : T
+>U : U
 >t : T
 >u : U
 
@@= skipped -9, +11 lines =@@
 
 function foo2b<T, U>(u: U) {
 >foo2b : <T, U>(u: U) => T
+>T : T
+>U : U
 >u : U
 
     var x: T;
@@= skipped -24, +26 lines =@@
 
 class C<T, U> {
 >C : C<T, U>
+>T : T
+>U : U
 
     constructor(public t: T, public u: U) {
 >t : T
@@= skipped -26, +28 lines =@@
 
     foo3<T>(t: T, u: U) {
 >foo3 : <T>(t: T, u: U) => T
+>T : T
 >t : T
 >u : U
 
@@= skipped -9, +10 lines =@@
 
     foo4<U>(t: T, u: U) {
 >foo4 : <U>(t: T, u: U) => T
+>U : U
 >t : T
 >u : U
 
@@= skipped -9, +10 lines =@@
 
     foo5<T,U>(t: T, u: U) {
 >foo5 : <T, U>(t: T, u: U) => T
+>T : T
+>U : U
 >t : T
 >u : U
 
@@= skipped -9, +11 lines =@@
 
     foo6<T, U>() {
 >foo6 : <T, U>() => T
+>T : T
+>U : U
 
         var x: T;
 >x : T
@@= skipped -10, +12 lines =@@
 
     foo7<T, U>(u: U) {
 >foo7 : <T, U>(u: U) => T
+>T : T
+>U : U
 >u : U
 
         var x: T;
@@= skipped -11, +13 lines =@@
 
     foo8<T, U>() {
 >foo8 : <T, U>() => T
+>T : T
+>U : U
 
         var x: T;
 >x : T
@@= skipped -84, +86 lines =@@
 >foo8 : <T, U>() => T
 
 interface I<T, U> {
+>I : I<T, U>
+>T : T
+>U : U
+
     new (t: T, u: U);
 >t : T
 >u : U
@@= skipped -16, +20 lines =@@
 
     foo3<T>(t: T, u: U): T;
 >foo3 : <T>(t: T, u: U) => T
+>T : T
 >t : T
 >u : U
 
     foo4<U>(t: T, u: U): T;
 >foo4 : <U>(t: T, u: U) => T
+>U : U
 >t : T
 >u : U
 
     foo5<T, U>(t: T, u: U): T;
 >foo5 : <T, U>(t: T, u: U) => T
+>T : T
+>U : U
 >t : T
 >u : U
 
     foo6<T, U>(): T;
 >foo6 : <T, U>() => T
+>T : T
+>U : U
 
     foo7<T, U>(u: U): T;
 >foo7 : <T, U>(u: U) => T
+>T : T
+>U : U
 >u : U
 
     foo8<T, U>(): T;    
 >foo8 : <T, U>() => T
+>T : T
+>U : U
 }
 
 var i: I<string, number>;
