--- old.missingDecoratorType.symbols
+++ new.missingDecoratorType.symbols
@@= skipped -1, +1 lines =@@
 
 === a.ts ===
 interface Object { }
->Object : Symbol(Object, Decl(a.ts, 0, 0))
+>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 0, 0))
 
 interface Array<T> { }
->Array : Symbol(Array, Decl(a.ts, 0, 20))
->T : Symbol(T, Decl(a.ts, 1, 16))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 0, 20))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(a.ts, 1, 16))
 
 interface String { }
->String : Symbol(String, Decl(a.ts, 1, 22))
+>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 1, 22))
 
 interface Boolean { }
->Boolean : Symbol(Boolean, Decl(a.ts, 2, 20))
+>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 2, 20))
 
 interface Number { }
->Number : Symbol(Number, Decl(a.ts, 3, 21))
+>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 3, 21))
 
 interface Function { }
->Function : Symbol(Function, Decl(a.ts, 4, 20))
+>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 4, 20))
 
 interface RegExp { }
->RegExp : Symbol(RegExp, Decl(a.ts, 5, 22))
+>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 5, 22))
 
 interface IArguments { }
->IArguments : Symbol(IArguments, Decl(a.ts, 6, 20))
+>IArguments : Symbol(IArguments, Decl(lib.es5.d.ts, --, --), Decl(a.ts, 6, 20))
 
 === b.ts ===
 declare function dec(t, k, d);
@@= skipped -38, +38 lines =@@
 >dec : Symbol(dec, Decl(b.ts, 0, 0))
 
     method() {}
->method : Symbol(C.method, Decl(b.ts, 2, 9))
+>method : Symbol(method, Decl(b.ts, 2, 9))
 }
 
 
