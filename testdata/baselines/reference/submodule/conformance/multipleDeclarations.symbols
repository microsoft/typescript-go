//// [tests/cases/conformance/salsa/multipleDeclarations.ts] ////

=== input.js ===
function C() {
>C : Symbol(C, Decl(input.js, 0, 0))

    this.m = null;
}
C.prototype.m = function() {
>C.prototype : Symbol(prototype, Decl(lib.es5.d.ts, --, --))
>C : Symbol(C, Decl(input.js, 0, 0))
>prototype : Symbol(prototype, Decl(lib.es5.d.ts, --, --))

    this.nothing();
}
class X {
>X : Symbol(X, Decl(input.js, 5, 1))

    constructor() {
        this.m = this.m.bind(this);
>this.m : Symbol(m, Decl(input.js, 10, 5))
>this : Symbol(X, Decl(input.js, 5, 1))
>m : Symbol(m, Decl(input.js, 10, 5))
>this.m.bind : Symbol(bind, Decl(lib.es5.d.ts, --, --))
>this.m : Symbol(m, Decl(input.js, 10, 5))
>this : Symbol(X, Decl(input.js, 5, 1))
>m : Symbol(m, Decl(input.js, 10, 5))
>bind : Symbol(bind, Decl(lib.es5.d.ts, --, --))
>this : Symbol(X, Decl(input.js, 5, 1))

        this.mistake = 'frankly, complete nonsense';
>this.mistake : Symbol(mistake, Decl(input.js, 12, 5))
>this : Symbol(X, Decl(input.js, 5, 1))
>mistake : Symbol(mistake, Decl(input.js, 12, 5))
    }
    m() {
>m : Symbol(m, Decl(input.js, 10, 5))
    }
    mistake() {
>mistake : Symbol(mistake, Decl(input.js, 12, 5))
    }
}
let x = new X();
>x : Symbol(x, Decl(input.js, 16, 3))
>X : Symbol(X, Decl(input.js, 5, 1))

X.prototype.mistake = false;
>X.prototype.mistake : Symbol(mistake, Decl(input.js, 12, 5))
>X.prototype : Symbol(prototype)
>X : Symbol(X, Decl(input.js, 5, 1))
>prototype : Symbol(prototype)
>mistake : Symbol(mistake, Decl(input.js, 12, 5))

x.m();
>x.m : Symbol(m, Decl(input.js, 10, 5))
>x : Symbol(x, Decl(input.js, 16, 3))
>m : Symbol(m, Decl(input.js, 10, 5))

x.mistake;
>x.mistake : Symbol(mistake, Decl(input.js, 12, 5))
>x : Symbol(x, Decl(input.js, 16, 3))
>mistake : Symbol(mistake, Decl(input.js, 12, 5))

class Y {
>Y : Symbol(Y, Decl(input.js, 19, 10))

    mistake() {
>mistake : Symbol(mistake, Decl(input.js, 20, 9))
    }
    m() {
>m : Symbol(m, Decl(input.js, 22, 5))
    }
    constructor() {
        this.m = this.m.bind(this);
>this.m : Symbol(m, Decl(input.js, 22, 5))
>this : Symbol(Y, Decl(input.js, 19, 10))
>m : Symbol(m, Decl(input.js, 22, 5))
>this.m.bind : Symbol(bind, Decl(lib.es5.d.ts, --, --))
>this.m : Symbol(m, Decl(input.js, 22, 5))
>this : Symbol(Y, Decl(input.js, 19, 10))
>m : Symbol(m, Decl(input.js, 22, 5))
>bind : Symbol(bind, Decl(lib.es5.d.ts, --, --))
>this : Symbol(Y, Decl(input.js, 19, 10))

        this.mistake = 'even more nonsense';
>this.mistake : Symbol(mistake, Decl(input.js, 20, 9))
>this : Symbol(Y, Decl(input.js, 19, 10))
>mistake : Symbol(mistake, Decl(input.js, 20, 9))
    }
}
Y.prototype.mistake = true;
>Y.prototype.mistake : Symbol(mistake, Decl(input.js, 20, 9))
>Y.prototype : Symbol(prototype)
>Y : Symbol(Y, Decl(input.js, 19, 10))
>prototype : Symbol(prototype)
>mistake : Symbol(mistake, Decl(input.js, 20, 9))

let y = new Y();
>y : Symbol(y, Decl(input.js, 31, 3))
>Y : Symbol(Y, Decl(input.js, 19, 10))

y.m();
>y.m : Symbol(m, Decl(input.js, 22, 5))
>y : Symbol(y, Decl(input.js, 31, 3))
>m : Symbol(m, Decl(input.js, 22, 5))

y.mistake();
>y.mistake : Symbol(mistake, Decl(input.js, 20, 9))
>y : Symbol(y, Decl(input.js, 31, 3))
>mistake : Symbol(mistake, Decl(input.js, 20, 9))

