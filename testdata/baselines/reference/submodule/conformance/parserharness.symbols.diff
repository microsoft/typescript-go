--- old.parserharness.symbols
+++ new.parserharness.symbols
@@= skipped -23, +23 lines =@@
 declare var assert: Harness.Assert;
 >assert : Symbol(assert, Decl(parserharness.ts, 20, 11))
 >Harness : Symbol(Harness, Decl(parserharness.ts, 52, 1))
->Assert : Symbol(Harness.Assert)
+>Assert : Symbol(Assert)
 
 declare var it;
 >it : Symbol(it, Decl(parserharness.ts, 21, 11))
@@= skipped -23, +23 lines =@@
 >path : Symbol(path, Decl(parserharness.ts, 27, 32))
 
     return path.replace(/\\/g, "/");
->path.replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>path.replace : Symbol(replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >path : Symbol(path, Decl(parserharness.ts, 27, 32))
->replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>replace : Symbol(replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 }
 
 function filePath(fullPath: string) {
@@= skipped -16, +16 lines =@@
 
     var components = fullPath.split("/");
 >components : Symbol(components, Decl(parserharness.ts, 33, 7))
->fullPath.split : Symbol(String.split, Decl(lib.es5.d.ts, --, --))
+>fullPath.split : Symbol(split, Decl(lib.es5.d.ts, --, --))
 >fullPath : Symbol(fullPath, Decl(parserharness.ts, 31, 18))
->split : Symbol(String.split, Decl(lib.es5.d.ts, --, --))
+>split : Symbol(split, Decl(lib.es5.d.ts, --, --))
 
     var path: string[] = components.slice(0, components.length - 1);
 >path : Symbol(path, Decl(parserharness.ts, 34, 7))
->components.slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
+>components.slice : Symbol(slice, Decl(lib.es5.d.ts, --, --))
 >components : Symbol(components, Decl(parserharness.ts, 33, 7))
->slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
->components.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>slice : Symbol(slice, Decl(lib.es5.d.ts, --, --))
+>components.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >components : Symbol(components, Decl(parserharness.ts, 33, 7))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
     return path.join("/") + "/";
->path.join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>path.join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 >path : Symbol(path, Decl(parserharness.ts, 34, 7))
->join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 }
 
 var typescriptServiceFileName = filePath(IO.getExecutingFilePath()) + "typescriptServices.js";
@@= skipped -70, +70 lines =@@
 
     var global = <any>Function("return this").call(null);
 >global : Symbol(global, Decl(parserharness.ts, 57, 7))
->Function("return this").call : Symbol(Function.call, Decl(lib.es5.d.ts, --, --))
+>Function("return this").call : Symbol(call, Decl(lib.es5.d.ts, --, --))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->call : Symbol(Function.call, Decl(lib.es5.d.ts, --, --))
+>call : Symbol(call, Decl(lib.es5.d.ts, --, --))
 
     export var usePull = false;
 >usePull : Symbol(usePull, Decl(parserharness.ts, 58, 14))
@@= skipped -11, +11 lines =@@
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 
         id: string;
->id : Symbol(ITestMetadata.id, Decl(parserharness.ts, 60, 36))
+>id : Symbol(id, Decl(parserharness.ts, 60, 36))
 
         desc: string;
->desc : Symbol(ITestMetadata.desc, Decl(parserharness.ts, 61, 19))
+>desc : Symbol(desc, Decl(parserharness.ts, 61, 19))
 
         pass: boolean;
->pass : Symbol(ITestMetadata.pass, Decl(parserharness.ts, 62, 21))
+>pass : Symbol(pass, Decl(parserharness.ts, 62, 21))
 
         perfResults: {
->perfResults : Symbol(ITestMetadata.perfResults, Decl(parserharness.ts, 63, 22))
+>perfResults : Symbol(perfResults, Decl(parserharness.ts, 63, 22))
 
             mean: number;
 >mean : Symbol(mean, Decl(parserharness.ts, 64, 22))
@@= skipped -32, +32 lines =@@
 >IScenarioMetadata : Symbol(IScenarioMetadata, Decl(parserharness.ts, 71, 5))
 
         id: string;
->id : Symbol(IScenarioMetadata.id, Decl(parserharness.ts, 72, 40))
+>id : Symbol(id, Decl(parserharness.ts, 72, 40))
 
         desc: string;
->desc : Symbol(IScenarioMetadata.desc, Decl(parserharness.ts, 73, 19))
+>desc : Symbol(desc, Decl(parserharness.ts, 73, 19))
 
         pass: boolean;
->pass : Symbol(IScenarioMetadata.pass, Decl(parserharness.ts, 74, 21))
+>pass : Symbol(pass, Decl(parserharness.ts, 74, 21))
 
         bugs: string[];
->bugs : Symbol(IScenarioMetadata.bugs, Decl(parserharness.ts, 75, 22))
+>bugs : Symbol(bugs, Decl(parserharness.ts, 75, 22))
     }
 
     // Assert functions
@@= skipped -35, +35 lines =@@
 >id : Symbol(id, Decl(parserharness.ts, 87, 28))
 
             if (bugIds.indexOf(id) < 0) {
->bugIds.indexOf : Symbol(Array.indexOf, Decl(lib.es5.d.ts, --, --))
+>bugIds.indexOf : Symbol(indexOf, Decl(lib.es5.d.ts, --, --))
 >bugIds : Symbol(bugIds, Decl(parserharness.ts, 81, 18))
->indexOf : Symbol(Array.indexOf, Decl(lib.es5.d.ts, --, --))
+>indexOf : Symbol(indexOf, Decl(lib.es5.d.ts, --, --))
 >id : Symbol(id, Decl(parserharness.ts, 87, 28))
 
                 bugIds.push(id);
->bugIds.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>bugIds.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >bugIds : Symbol(bugIds, Decl(parserharness.ts, 81, 18))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >id : Symbol(id, Decl(parserharness.ts, 87, 28))
             }
         }
@@= skipped -20, +20 lines =@@
 
             var bugs = content.match(/\bbug (\d+)/i);
 >bugs : Symbol(bugs, Decl(parserharness.ts, 95, 15))
->content.match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
+>content.match : Symbol(match, Decl(lib.es5.d.ts, --, --))
 >content : Symbol(content, Decl(parserharness.ts, 94, 29))
->match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
+>match : Symbol(match, Decl(lib.es5.d.ts, --, --))
 
             if (bugs) {
 >bugs : Symbol(bugs, Decl(parserharness.ts, 95, 15))
 
                 bugs.forEach(bug => assert.bug(bug));
->bugs.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>bugs.forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >bugs : Symbol(bugs, Decl(parserharness.ts, 95, 15))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >bug : Symbol(bug, Decl(parserharness.ts, 97, 29))
 >assert : Symbol(assert, Decl(parserharness.ts, 20, 11))
 >bug : Symbol(bug, Decl(parserharness.ts, 97, 29))
@@= skipped -38, +38 lines =@@
 >length : Symbol(length, Decl(parserharness.ts, 107, 49))
 
             if (arr.length != length) {
->arr.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>arr.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >arr : Symbol(arr, Decl(parserharness.ts, 107, 38))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >length : Symbol(length, Decl(parserharness.ts, 107, 49))
 
                 var actual = '';
 >actual : Symbol(actual, Decl(parserharness.ts, 109, 19))
 
                 arr.forEach(n => actual = actual + '\n      ' + n.toString());
->arr.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>arr.forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >arr : Symbol(arr, Decl(parserharness.ts, 107, 38))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >n : Symbol(n, Decl(parserharness.ts, 110, 28))
 >actual : Symbol(actual, Decl(parserharness.ts, 109, 19))
 >actual : Symbol(actual, Decl(parserharness.ts, 109, 19))
@@= skipped -77, +77 lines =@@
 >compilerWarning : Symbol(compilerWarning, Decl(parserharness.ts, 131, 9))
 >result : Symbol(result, Decl(parserharness.ts, 133, 40))
 >Compiler : Symbol(Compiler, Decl(parserharness.ts, 683, 5))
->CompilerResult : Symbol(Compiler.CompilerResult, Decl(parserharness.ts, 1167, 9))
+>CompilerResult : Symbol(CompilerResult, Decl(parserharness.ts, 1167, 9))
 >line : Symbol(line, Decl(parserharness.ts, 133, 72))
 >column : Symbol(column, Decl(parserharness.ts, 133, 86))
 >desc : Symbol(desc, Decl(parserharness.ts, 133, 102))
 
             if (!result.isErrorAt(line, column, desc)) {
->result.isErrorAt : Symbol(Compiler.CompilerResult.isErrorAt, Decl(parserharness.ts, 1196, 13))
+>result.isErrorAt : Symbol(isErrorAt, Decl(parserharness.ts, 1196, 13))
 >result : Symbol(result, Decl(parserharness.ts, 133, 40))
->isErrorAt : Symbol(Compiler.CompilerResult.isErrorAt, Decl(parserharness.ts, 1196, 13))
+>isErrorAt : Symbol(isErrorAt, Decl(parserharness.ts, 1196, 13))
 >line : Symbol(line, Decl(parserharness.ts, 133, 72))
 >column : Symbol(column, Decl(parserharness.ts, 133, 86))
 >desc : Symbol(desc, Decl(parserharness.ts, 133, 102))
@@= skipped -17, +17 lines =@@
 >actual : Symbol(actual, Decl(parserharness.ts, 135, 19))
 
                 result.errors.forEach(err => {
->result.errors.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
->result.errors : Symbol(Compiler.CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>result.errors.forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
+>result.errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >result : Symbol(result, Decl(parserharness.ts, 133, 40))
->errors : Symbol(Compiler.CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >err : Symbol(err, Decl(parserharness.ts, 136, 38))
 
                     actual = actual + '\n     ' + err.toString();
 >actual : Symbol(actual, Decl(parserharness.ts, 135, 19))
 >actual : Symbol(actual, Decl(parserharness.ts, 135, 19))
->err.toString : Symbol(Compiler.CompilerError.toString, Decl(parserharness.ts, 1213, 47))
+>err.toString : Symbol(toString, Decl(parserharness.ts, 1213, 47))
 >err : Symbol(err, Decl(parserharness.ts, 136, 38))
->toString : Symbol(Compiler.CompilerError.toString, Decl(parserharness.ts, 1213, 47))
+>toString : Symbol(toString, Decl(parserharness.ts, 1213, 47))
 
                 });
 
@@= skipped -99, +99 lines =@@
             for (var i = 0; i < contains.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 166, 20))
 >i : Symbol(i, Decl(parserharness.ts, 166, 20))
->contains.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>contains.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >contains : Symbol(contains, Decl(parserharness.ts, 163, 49))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 166, 20))
 
                 found = false;
@@= skipped -11, +11 lines =@@
                 for (var j = 0; j < arr.length; j++) {
 >j : Symbol(j, Decl(parserharness.ts, 169, 24))
 >j : Symbol(j, Decl(parserharness.ts, 169, 24))
->arr.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>arr.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >arr : Symbol(arr, Decl(parserharness.ts, 163, 38))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >j : Symbol(j, Decl(parserharness.ts, 169, 24))
 
                     if (arr[j] === contains[i]) {
@@= skipped -42, +42 lines =@@
             for (var i = 0; i < arr.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 185, 20))
 >i : Symbol(i, Decl(parserharness.ts, 185, 20))
->arr.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>arr.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >arr : Symbol(arr, Decl(parserharness.ts, 182, 42))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 185, 20))
 
                 if (filter(arr[i])) {
@@= skipped -36, +36 lines =@@
         // we have to string-based splitting instead and try to figure out the delimiting chars
         var lines = content.split('\r\n');
 >lines : Symbol(lines, Decl(parserharness.ts, 202, 11))
->content.split : Symbol(String.split, Decl(lib.es5.d.ts, --, --))
+>content.split : Symbol(split, Decl(lib.es5.d.ts, --, --))
 >content : Symbol(content, Decl(parserharness.ts, 198, 43))
->split : Symbol(String.split, Decl(lib.es5.d.ts, --, --))
+>split : Symbol(split, Decl(lib.es5.d.ts, --, --))
 
         if (lines.length === 1) {
->lines.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>lines.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >lines : Symbol(lines, Decl(parserharness.ts, 202, 11))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
             lines = content.split('\n');
 >lines : Symbol(lines, Decl(parserharness.ts, 202, 11))
->content.split : Symbol(String.split, Decl(lib.es5.d.ts, --, --))
+>content.split : Symbol(split, Decl(lib.es5.d.ts, --, --))
 >content : Symbol(content, Decl(parserharness.ts, 198, 43))
->split : Symbol(String.split, Decl(lib.es5.d.ts, --, --))
+>split : Symbol(split, Decl(lib.es5.d.ts, --, --))
         }
         return lines;
 >lines : Symbol(lines, Decl(parserharness.ts, 202, 11))
@@= skipped -25, +25 lines =@@
 >path : Symbol(path, Decl(parserharness.ts, 210, 29))
 
         if (path.indexOf('tests') < 0) {
->path.indexOf : Symbol(String.indexOf, Decl(lib.es5.d.ts, --, --))
+>path.indexOf : Symbol(indexOf, Decl(lib.es5.d.ts, --, --))
 >path : Symbol(path, Decl(parserharness.ts, 210, 29))
->indexOf : Symbol(String.indexOf, Decl(lib.es5.d.ts, --, --))
+>indexOf : Symbol(indexOf, Decl(lib.es5.d.ts, --, --))
 
             path = "tests/" + path;
 >path : Symbol(path, Decl(parserharness.ts, 210, 29))
@@= skipped -37, +37 lines =@@
 >ILogger : Symbol(ILogger, Decl(parserharness.ts, 222, 5))
 
         start: (fileName?: string, priority?: number) => void;
->start : Symbol(ILogger.start, Decl(parserharness.ts, 225, 30))
+>start : Symbol(start, Decl(parserharness.ts, 225, 30))
 >fileName : Symbol(fileName, Decl(parserharness.ts, 226, 16))
 >priority : Symbol(priority, Decl(parserharness.ts, 226, 34))
 
         end: (fileName?: string) => void;
->end : Symbol(ILogger.end, Decl(parserharness.ts, 226, 62))
+>end : Symbol(end, Decl(parserharness.ts, 226, 62))
 >fileName : Symbol(fileName, Decl(parserharness.ts, 227, 14))
 
         scenarioStart: (scenario: IScenarioMetadata) => void;
->scenarioStart : Symbol(ILogger.scenarioStart, Decl(parserharness.ts, 227, 41))
+>scenarioStart : Symbol(scenarioStart, Decl(parserharness.ts, 227, 41))
 >scenario : Symbol(scenario, Decl(parserharness.ts, 228, 24))
 >IScenarioMetadata : Symbol(IScenarioMetadata, Decl(parserharness.ts, 71, 5))
 
         scenarioEnd: (scenario: IScenarioMetadata, error?: Error) => void;
->scenarioEnd : Symbol(ILogger.scenarioEnd, Decl(parserharness.ts, 228, 61))
+>scenarioEnd : Symbol(scenarioEnd, Decl(parserharness.ts, 228, 61))
 >scenario : Symbol(scenario, Decl(parserharness.ts, 229, 22))
 >IScenarioMetadata : Symbol(IScenarioMetadata, Decl(parserharness.ts, 71, 5))
 >error : Symbol(error, Decl(parserharness.ts, 229, 50))
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         testStart: (test: ITestMetadata) => void;
->testStart : Symbol(ILogger.testStart, Decl(parserharness.ts, 229, 74))
+>testStart : Symbol(testStart, Decl(parserharness.ts, 229, 74))
 >test : Symbol(test, Decl(parserharness.ts, 230, 20))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 
         pass: (test: ITestMetadata) => void;
->pass : Symbol(ILogger.pass, Decl(parserharness.ts, 230, 49))
+>pass : Symbol(pass, Decl(parserharness.ts, 230, 49))
 >test : Symbol(test, Decl(parserharness.ts, 231, 15))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 
         bug: (test: ITestMetadata) => void;
->bug : Symbol(ILogger.bug, Decl(parserharness.ts, 231, 44))
+>bug : Symbol(bug, Decl(parserharness.ts, 231, 44))
 >test : Symbol(test, Decl(parserharness.ts, 232, 14))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 
         fail: (test: ITestMetadata) => void;
->fail : Symbol(ILogger.fail, Decl(parserharness.ts, 232, 43))
+>fail : Symbol(fail, Decl(parserharness.ts, 232, 43))
 >test : Symbol(test, Decl(parserharness.ts, 233, 15))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 
         error: (test: ITestMetadata, error: Error) => void;
->error : Symbol(ILogger.error, Decl(parserharness.ts, 233, 44))
+>error : Symbol(error, Decl(parserharness.ts, 233, 44))
 >test : Symbol(test, Decl(parserharness.ts, 234, 16))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 >error : Symbol(error, Decl(parserharness.ts, 234, 36))
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         comment: (comment: string) => void;
->comment : Symbol(ILogger.comment, Decl(parserharness.ts, 234, 59))
+>comment : Symbol(comment, Decl(parserharness.ts, 234, 59))
 >comment : Symbol(comment, Decl(parserharness.ts, 235, 18))
 
         verify: (test: ITestMetadata, passed: boolean, actual: any, expected: any, message: string) => void;
->verify : Symbol(ILogger.verify, Decl(parserharness.ts, 235, 43))
+>verify : Symbol(verify, Decl(parserharness.ts, 235, 43))
 >test : Symbol(test, Decl(parserharness.ts, 236, 17))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 >passed : Symbol(passed, Decl(parserharness.ts, 236, 37))
@@= skipped -66, +66 lines =@@
 >ILogger : Symbol(ILogger, Decl(parserharness.ts, 222, 5))
 
         public start(fileName?: string, priority?: number) { }
->start : Symbol(Logger.start, Decl(parserharness.ts, 239, 44))
+>start : Symbol(start, Decl(parserharness.ts, 239, 44))
 >fileName : Symbol(fileName, Decl(parserharness.ts, 240, 21))
 >priority : Symbol(priority, Decl(parserharness.ts, 240, 39))
 
         public end(fileName?: string) { }
->end : Symbol(Logger.end, Decl(parserharness.ts, 240, 62))
+>end : Symbol(end, Decl(parserharness.ts, 240, 62))
 >fileName : Symbol(fileName, Decl(parserharness.ts, 241, 19))
 
         public scenarioStart(scenario: IScenarioMetadata) { }
->scenarioStart : Symbol(Logger.scenarioStart, Decl(parserharness.ts, 241, 41))
+>scenarioStart : Symbol(scenarioStart, Decl(parserharness.ts, 241, 41))
 >scenario : Symbol(scenario, Decl(parserharness.ts, 242, 29))
 >IScenarioMetadata : Symbol(IScenarioMetadata, Decl(parserharness.ts, 71, 5))
 
         public scenarioEnd(scenario: IScenarioMetadata, error?: Error) { }
->scenarioEnd : Symbol(Logger.scenarioEnd, Decl(parserharness.ts, 242, 61))
+>scenarioEnd : Symbol(scenarioEnd, Decl(parserharness.ts, 242, 61))
 >scenario : Symbol(scenario, Decl(parserharness.ts, 243, 27))
 >IScenarioMetadata : Symbol(IScenarioMetadata, Decl(parserharness.ts, 71, 5))
 >error : Symbol(error, Decl(parserharness.ts, 243, 55))
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         public testStart(test: ITestMetadata) { }
->testStart : Symbol(Logger.testStart, Decl(parserharness.ts, 243, 74))
+>testStart : Symbol(testStart, Decl(parserharness.ts, 243, 74))
 >test : Symbol(test, Decl(parserharness.ts, 244, 25))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 
         public pass(test: ITestMetadata) { }
->pass : Symbol(Logger.pass, Decl(parserharness.ts, 244, 49))
+>pass : Symbol(pass, Decl(parserharness.ts, 244, 49))
 >test : Symbol(test, Decl(parserharness.ts, 245, 20))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 
         public bug(test: ITestMetadata) { }
->bug : Symbol(Logger.bug, Decl(parserharness.ts, 245, 44))
+>bug : Symbol(bug, Decl(parserharness.ts, 245, 44))
 >test : Symbol(test, Decl(parserharness.ts, 246, 19))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 
         public fail(test: ITestMetadata) { }
->fail : Symbol(Logger.fail, Decl(parserharness.ts, 246, 43))
+>fail : Symbol(fail, Decl(parserharness.ts, 246, 43))
 >test : Symbol(test, Decl(parserharness.ts, 247, 20))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 
         public error(test: ITestMetadata, error: Error) { }
->error : Symbol(Logger.error, Decl(parserharness.ts, 247, 44))
+>error : Symbol(error, Decl(parserharness.ts, 247, 44))
 >test : Symbol(test, Decl(parserharness.ts, 248, 21))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 >error : Symbol(error, Decl(parserharness.ts, 248, 41))
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         public comment(comment: string) { }
->comment : Symbol(Logger.comment, Decl(parserharness.ts, 248, 59))
+>comment : Symbol(comment, Decl(parserharness.ts, 248, 59))
 >comment : Symbol(comment, Decl(parserharness.ts, 249, 23))
 
         public verify(test: ITestMetadata, passed: boolean, actual: any, expected: any, message: string) { }
->verify : Symbol(Logger.verify, Decl(parserharness.ts, 249, 43))
+>verify : Symbol(verify, Decl(parserharness.ts, 249, 43))
 >test : Symbol(test, Decl(parserharness.ts, 250, 22))
 >ITestMetadata : Symbol(ITestMetadata, Decl(parserharness.ts, 58, 31))
 >passed : Symbol(passed, Decl(parserharness.ts, 250, 42))
@@= skipped -72, +72 lines =@@
 >ILogger : Symbol(ILogger, Decl(parserharness.ts, 222, 5))
 
         loggers.push(logger);
->loggers.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>loggers.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >loggers : Symbol(loggers, Decl(parserharness.ts, 254, 7))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >logger : Symbol(logger, Decl(parserharness.ts, 255, 35))
     }
     export function emitLog(field: string, ...params: any[]) {
@@= skipped -13, +13 lines =@@
         for (var i = 0; i < loggers.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 259, 16))
 >i : Symbol(i, Decl(parserharness.ts, 259, 16))
->loggers.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>loggers.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >loggers : Symbol(loggers, Decl(parserharness.ts, 254, 7))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 259, 16))
 
             if (typeof loggers[i][field] === 'function') {
@@= skipped -33, +33 lines =@@
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
 
         constructor(public description: string, public block: any) { }
->description : Symbol(Runnable.description, Decl(parserharness.ts, 271, 20))
->block : Symbol(Runnable.block, Decl(parserharness.ts, 271, 47))
+>description : Symbol(description, Decl(parserharness.ts, 271, 20))
+>block : Symbol(block, Decl(parserharness.ts, 271, 47))
 
         // The current stack of Runnable objects
         static currentStack: Runnable[] = [];
->currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
+>currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
 
         // The error, if any, that occurred when running 'block'
         public error: Error = null;
->error : Symbol(Runnable.error, Decl(parserharness.ts, 274, 45))
+>error : Symbol(error, Decl(parserharness.ts, 274, 45))
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         // Whether or not this object has any failures (including in its descendants)
         public passed = null;
->passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 
         // A list of bugs impacting this object
         public bugs: string[] = [];
->bugs : Symbol(Runnable.bugs, Decl(parserharness.ts, 280, 29))
+>bugs : Symbol(bugs, Decl(parserharness.ts, 280, 29))
 
         // A list of all our child Runnables
         public children: Runnable[] = [];
->children : Symbol(Runnable.children, Decl(parserharness.ts, 283, 35))
+>children : Symbol(children, Decl(parserharness.ts, 283, 35))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
 
         public addChild(child: Runnable): void {
->addChild : Symbol(Runnable.addChild, Decl(parserharness.ts, 286, 41))
+>addChild : Symbol(addChild, Decl(parserharness.ts, 286, 41))
 >child : Symbol(child, Decl(parserharness.ts, 288, 24))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
 
             this.children.push(child);
->this.children.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->this.children : Symbol(Runnable.children, Decl(parserharness.ts, 283, 35))
+>this.children.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>this.children : Symbol(children, Decl(parserharness.ts, 283, 35))
 >this : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->children : Symbol(Runnable.children, Decl(parserharness.ts, 283, 35))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>children : Symbol(children, Decl(parserharness.ts, 283, 35))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >child : Symbol(child, Decl(parserharness.ts, 288, 24))
         }
 
@@= skipped -45, +45 lines =@@
          *  on whether the function was asynchronous or not.
          */
         public call(fn: (done?: IDone) => void , done: IDone) {
->call : Symbol(Runnable.call, Decl(parserharness.ts, 290, 9))
+>call : Symbol(call, Decl(parserharness.ts, 290, 9))
 >fn : Symbol(fn, Decl(parserharness.ts, 296, 20))
 >done : Symbol(done, Decl(parserharness.ts, 296, 25))
 >IDone : Symbol(IDone, Decl(parserharness.ts, 264, 5))
@@= skipped -12, +12 lines =@@
 
             try {
                 if (fn.length === 0) {
->fn.length : Symbol(Function.length, Decl(lib.es5.d.ts, --, --))
+>fn.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >fn : Symbol(fn, Decl(parserharness.ts, 296, 20))
->length : Symbol(Function.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
                     // No async.
                     fn();
@@= skipped -16, +16 lines =@@
                     // Possibly async
 
                     Runnable.pushGlobalErrorHandler(done);
->Runnable.pushGlobalErrorHandler : Symbol(Runnable.pushGlobalErrorHandler, Decl(parserharness.ts, 337, 63))
+>Runnable.pushGlobalErrorHandler : Symbol(pushGlobalErrorHandler, Decl(parserharness.ts, 337, 63))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->pushGlobalErrorHandler : Symbol(Runnable.pushGlobalErrorHandler, Decl(parserharness.ts, 337, 63))
+>pushGlobalErrorHandler : Symbol(pushGlobalErrorHandler, Decl(parserharness.ts, 337, 63))
 >done : Symbol(done, Decl(parserharness.ts, 296, 48))
 
                     fn(function () {
@@= skipped -12, +12 lines =@@
 >isAsync : Symbol(isAsync, Decl(parserharness.ts, 297, 15))
 
                         Runnable.popGlobalErrorHandler();
->Runnable.popGlobalErrorHandler : Symbol(Runnable.popGlobalErrorHandler, Decl(parserharness.ts, 343, 9))
+>Runnable.popGlobalErrorHandler : Symbol(popGlobalErrorHandler, Decl(parserharness.ts, 343, 9))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->popGlobalErrorHandler : Symbol(Runnable.popGlobalErrorHandler, Decl(parserharness.ts, 343, 9))
+>popGlobalErrorHandler : Symbol(popGlobalErrorHandler, Decl(parserharness.ts, 343, 9))
 
                         done();
 >done : Symbol(done, Decl(parserharness.ts, 296, 48))
@@= skipped -25, +25 lines =@@
         }
 
         public run(done: IDone) { }
->run : Symbol(Runnable.run, Decl(parserharness.ts, 325, 9))
+>run : Symbol(run, Decl(parserharness.ts, 325, 9))
 >done : Symbol(done, Decl(parserharness.ts, 327, 19))
 >IDone : Symbol(IDone, Decl(parserharness.ts, 264, 5))
 
         public runBlock(done: IDone) {
->runBlock : Symbol(Runnable.runBlock, Decl(parserharness.ts, 327, 35))
+>runBlock : Symbol(runBlock, Decl(parserharness.ts, 327, 35))
 >done : Symbol(done, Decl(parserharness.ts, 329, 24))
 >IDone : Symbol(IDone, Decl(parserharness.ts, 264, 5))
 
             return this.call(this.block, done);
->this.call : Symbol(Runnable.call, Decl(parserharness.ts, 290, 9))
+>this.call : Symbol(call, Decl(parserharness.ts, 290, 9))
 >this : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->call : Symbol(Runnable.call, Decl(parserharness.ts, 290, 9))
->this.block : Symbol(Runnable.block, Decl(parserharness.ts, 271, 47))
+>call : Symbol(call, Decl(parserharness.ts, 290, 9))
+>this.block : Symbol(block, Decl(parserharness.ts, 271, 47))
 >this : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->block : Symbol(Runnable.block, Decl(parserharness.ts, 271, 47))
+>block : Symbol(block, Decl(parserharness.ts, 271, 47))
 >done : Symbol(done, Decl(parserharness.ts, 329, 24))
         }
 
         public runChild(index: number, done: IDone) {
->runChild : Symbol(Runnable.runChild, Decl(parserharness.ts, 331, 9))
+>runChild : Symbol(runChild, Decl(parserharness.ts, 331, 9))
 >index : Symbol(index, Decl(parserharness.ts, 333, 24))
 >done : Symbol(done, Decl(parserharness.ts, 333, 38))
 >IDone : Symbol(IDone, Decl(parserharness.ts, 264, 5))
 
             return this.call(<any>((done) => this.children[index].run(done)), done);
->this.call : Symbol(Runnable.call, Decl(parserharness.ts, 290, 9))
+>this.call : Symbol(call, Decl(parserharness.ts, 290, 9))
 >this : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->call : Symbol(Runnable.call, Decl(parserharness.ts, 290, 9))
+>call : Symbol(call, Decl(parserharness.ts, 290, 9))
 >done : Symbol(done, Decl(parserharness.ts, 334, 36))
->this.children[index].run : Symbol(Runnable.run, Decl(parserharness.ts, 325, 9))
->this.children : Symbol(Runnable.children, Decl(parserharness.ts, 283, 35))
+>this.children[index].run : Symbol(run, Decl(parserharness.ts, 325, 9))
+>this.children : Symbol(children, Decl(parserharness.ts, 283, 35))
 >this : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->children : Symbol(Runnable.children, Decl(parserharness.ts, 283, 35))
+>children : Symbol(children, Decl(parserharness.ts, 283, 35))
 >index : Symbol(index, Decl(parserharness.ts, 333, 24))
->run : Symbol(Runnable.run, Decl(parserharness.ts, 325, 9))
+>run : Symbol(run, Decl(parserharness.ts, 325, 9))
 >done : Symbol(done, Decl(parserharness.ts, 334, 36))
 >done : Symbol(done, Decl(parserharness.ts, 333, 38))
         }
 
         static errorHandlerStack: { (e: Error): void; }[] = [];
->errorHandlerStack : Symbol(Runnable.errorHandlerStack, Decl(parserharness.ts, 335, 9))
+>errorHandlerStack : Symbol(errorHandlerStack, Decl(parserharness.ts, 335, 9))
 >e : Symbol(e, Decl(parserharness.ts, 337, 37))
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         static pushGlobalErrorHandler(done: IDone) {
->pushGlobalErrorHandler : Symbol(Runnable.pushGlobalErrorHandler, Decl(parserharness.ts, 337, 63))
+>pushGlobalErrorHandler : Symbol(pushGlobalErrorHandler, Decl(parserharness.ts, 337, 63))
 >done : Symbol(done, Decl(parserharness.ts, 339, 38))
 >IDone : Symbol(IDone, Decl(parserharness.ts, 264, 5))
 
@@= skipped -61, +61 lines =@@
         }
 
         static popGlobalErrorHandler() {
->popGlobalErrorHandler : Symbol(Runnable.popGlobalErrorHandler, Decl(parserharness.ts, 343, 9))
+>popGlobalErrorHandler : Symbol(popGlobalErrorHandler, Decl(parserharness.ts, 343, 9))
 
             errorHandlerStack.pop();
         }
 
         static handleError(e: Error) {
->handleError : Symbol(Runnable.handleError, Decl(parserharness.ts, 347, 9))
+>handleError : Symbol(handleError, Decl(parserharness.ts, 347, 9))
 >e : Symbol(e, Decl(parserharness.ts, 349, 27))
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
@@= skipped -26, +26 lines =@@
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
 
         public description: string;
->description : Symbol(TestCase.description, Decl(parserharness.ts, 357, 44))
+>description : Symbol(description, Decl(parserharness.ts, 357, 44))
 
         public block;
->block : Symbol(TestCase.block, Decl(parserharness.ts, 358, 35))
+>block : Symbol(block, Decl(parserharness.ts, 358, 35))
 
         constructor(description: string, block: any) {
 >description : Symbol(description, Decl(parserharness.ts, 361, 20))
@@= skipped -15, +15 lines =@@
 >block : Symbol(block, Decl(parserharness.ts, 361, 40))
 
             this.description = description;
->this.description : Symbol(TestCase.description, Decl(parserharness.ts, 357, 44))
+>this.description : Symbol(description, Decl(parserharness.ts, 357, 44))
 >this : Symbol(TestCase, Decl(parserharness.ts, 356, 5))
->description : Symbol(TestCase.description, Decl(parserharness.ts, 357, 44))
+>description : Symbol(description, Decl(parserharness.ts, 357, 44))
 >description : Symbol(description, Decl(parserharness.ts, 361, 20))
 
             this.block = block;
->this.block : Symbol(TestCase.block, Decl(parserharness.ts, 358, 35))
+>this.block : Symbol(block, Decl(parserharness.ts, 358, 35))
 >this : Symbol(TestCase, Decl(parserharness.ts, 356, 5))
->block : Symbol(TestCase.block, Decl(parserharness.ts, 358, 35))
+>block : Symbol(block, Decl(parserharness.ts, 358, 35))
 >block : Symbol(block, Decl(parserharness.ts, 361, 40))
         }
 
         public addChild(child: Runnable): void {
->addChild : Symbol(TestCase.addChild, Decl(parserharness.ts, 365, 9))
+>addChild : Symbol(addChild, Decl(parserharness.ts, 365, 9))
 >child : Symbol(child, Decl(parserharness.ts, 367, 24))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
 
@@= skipped -23, +23 lines =@@
 
         /** Run the test case block and fail the test if it raised an error. If no error is raised, the test passes. */
         public run(done: IDone) {
->run : Symbol(TestCase.run, Decl(parserharness.ts, 369, 9))
+>run : Symbol(run, Decl(parserharness.ts, 369, 9))
 >done : Symbol(done, Decl(parserharness.ts, 372, 19))
 >IDone : Symbol(IDone, Decl(parserharness.ts, 264, 5))
 
@@= skipped -9, +9 lines =@@
 >this : Symbol(TestCase, Decl(parserharness.ts, 356, 5))
 
             Runnable.currentStack.push(this);
->Runnable.currentStack.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->Runnable.currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
+>Runnable.currentStack.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>Runnable.currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >this : Symbol(TestCase, Decl(parserharness.ts, 356, 5))
 
             emitLog('testStart', { desc: this.description });
 >emitLog : Symbol(emitLog, Decl(parserharness.ts, 257, 5))
 >desc : Symbol(desc, Decl(parserharness.ts, 377, 34))
->this.description : Symbol(TestCase.description, Decl(parserharness.ts, 357, 44))
+>this.description : Symbol(description, Decl(parserharness.ts, 357, 44))
 >this : Symbol(TestCase, Decl(parserharness.ts, 356, 5))
->description : Symbol(TestCase.description, Decl(parserharness.ts, 357, 44))
+>description : Symbol(description, Decl(parserharness.ts, 357, 44))
 
             if (this.block) {
->this.block : Symbol(TestCase.block, Decl(parserharness.ts, 358, 35))
+>this.block : Symbol(block, Decl(parserharness.ts, 358, 35))
 >this : Symbol(TestCase, Decl(parserharness.ts, 356, 5))
->block : Symbol(TestCase.block, Decl(parserharness.ts, 358, 35))
+>block : Symbol(block, Decl(parserharness.ts, 358, 35))
 
                 var async = this.runBlock(<any>function (e) {
 >async : Symbol(async, Decl(parserharness.ts, 380, 19))
->this.runBlock : Symbol(Runnable.runBlock, Decl(parserharness.ts, 327, 35))
+>this.runBlock : Symbol(runBlock, Decl(parserharness.ts, 327, 35))
 >this : Symbol(TestCase, Decl(parserharness.ts, 356, 5))
->runBlock : Symbol(Runnable.runBlock, Decl(parserharness.ts, 327, 35))
+>runBlock : Symbol(runBlock, Decl(parserharness.ts, 327, 35))
 >e : Symbol(e, Decl(parserharness.ts, 380, 57))
 
                     if (e) {
 >e : Symbol(e, Decl(parserharness.ts, 380, 57))
 
                         that.passed = false;
->that.passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>that.passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 >that : Symbol(that, Decl(parserharness.ts, 373, 15))
->passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 
                         that.error = e;
->that.error : Symbol(Runnable.error, Decl(parserharness.ts, 274, 45))
+>that.error : Symbol(error, Decl(parserharness.ts, 274, 45))
 >that : Symbol(that, Decl(parserharness.ts, 373, 15))
->error : Symbol(Runnable.error, Decl(parserharness.ts, 274, 45))
+>error : Symbol(error, Decl(parserharness.ts, 274, 45))
 >e : Symbol(e, Decl(parserharness.ts, 380, 57))
 
                         emitLog('error', { desc: this.description, pass: false }, e);
@@= skipped -48, +48 lines =@@
 
                     } else {
                         that.passed = true;
->that.passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>that.passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 >that : Symbol(that, Decl(parserharness.ts, 373, 15))
->passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 
                         emitLog('pass', { desc: this.description, pass: true });
 >emitLog : Symbol(emitLog, Decl(parserharness.ts, 257, 5))
@@= skipped -11, +11 lines =@@
                     }
 
                     Runnable.currentStack.pop();
->Runnable.currentStack.pop : Symbol(Array.pop, Decl(lib.es5.d.ts, --, --))
->Runnable.currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
+>Runnable.currentStack.pop : Symbol(pop, Decl(lib.es5.d.ts, --, --))
+>Runnable.currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
->pop : Symbol(Array.pop, Decl(lib.es5.d.ts, --, --))
+>currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
+>pop : Symbol(pop, Decl(lib.es5.d.ts, --, --))
 
                     done()
 >done : Symbol(done, Decl(parserharness.ts, 372, 19))
@@= skipped -20, +20 lines =@@
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
 
         public description: string;
->description : Symbol(Scenario.description, Decl(parserharness.ts, 400, 44))
+>description : Symbol(description, Decl(parserharness.ts, 400, 44))
 
         public block;
->block : Symbol(Scenario.block, Decl(parserharness.ts, 401, 35))
+>block : Symbol(block, Decl(parserharness.ts, 401, 35))
 
         constructor(description: string, block: any) {
 >description : Symbol(description, Decl(parserharness.ts, 404, 20))
@@= skipped -15, +15 lines =@@
 >block : Symbol(block, Decl(parserharness.ts, 404, 40))
 
             this.description = description;
->this.description : Symbol(Scenario.description, Decl(parserharness.ts, 400, 44))
+>this.description : Symbol(description, Decl(parserharness.ts, 400, 44))
 >this : Symbol(Scenario, Decl(parserharness.ts, 398, 5))
->description : Symbol(Scenario.description, Decl(parserharness.ts, 400, 44))
+>description : Symbol(description, Decl(parserharness.ts, 400, 44))
 >description : Symbol(description, Decl(parserharness.ts, 404, 20))
 
             this.block = block;
->this.block : Symbol(Scenario.block, Decl(parserharness.ts, 401, 35))
+>this.block : Symbol(block, Decl(parserharness.ts, 401, 35))
 >this : Symbol(Scenario, Decl(parserharness.ts, 398, 5))
->block : Symbol(Scenario.block, Decl(parserharness.ts, 401, 35))
+>block : Symbol(block, Decl(parserharness.ts, 401, 35))
 >block : Symbol(block, Decl(parserharness.ts, 404, 40))
         }
 
         /** Run the block, and if the block doesn't raise an error, run the children. */
         public run(done: IDone) {
->run : Symbol(Scenario.run, Decl(parserharness.ts, 408, 9))
+>run : Symbol(run, Decl(parserharness.ts, 408, 9))
 >done : Symbol(done, Decl(parserharness.ts, 411, 19))
 >IDone : Symbol(IDone, Decl(parserharness.ts, 264, 5))
 
@@= skipped -23, +23 lines =@@
 >this : Symbol(Scenario, Decl(parserharness.ts, 398, 5))
 
             Runnable.currentStack.push(this);
->Runnable.currentStack.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->Runnable.currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
+>Runnable.currentStack.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>Runnable.currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >this : Symbol(Scenario, Decl(parserharness.ts, 398, 5))
 
             emitLog('scenarioStart', { desc: this.description });
 >emitLog : Symbol(emitLog, Decl(parserharness.ts, 257, 5))
 >desc : Symbol(desc, Decl(parserharness.ts, 416, 38))
->this.description : Symbol(Scenario.description, Decl(parserharness.ts, 400, 44))
+>this.description : Symbol(description, Decl(parserharness.ts, 400, 44))
 >this : Symbol(Scenario, Decl(parserharness.ts, 398, 5))
->description : Symbol(Scenario.description, Decl(parserharness.ts, 400, 44))
+>description : Symbol(description, Decl(parserharness.ts, 400, 44))
 
             var async = this.runBlock(<any>function (e) {
 >async : Symbol(async, Decl(parserharness.ts, 418, 15))
->this.runBlock : Symbol(Runnable.runBlock, Decl(parserharness.ts, 327, 35))
+>this.runBlock : Symbol(runBlock, Decl(parserharness.ts, 327, 35))
 >this : Symbol(Scenario, Decl(parserharness.ts, 398, 5))
->runBlock : Symbol(Runnable.runBlock, Decl(parserharness.ts, 327, 35))
+>runBlock : Symbol(runBlock, Decl(parserharness.ts, 327, 35))
 >e : Symbol(e, Decl(parserharness.ts, 418, 53))
 
                 Runnable.currentStack.pop();
->Runnable.currentStack.pop : Symbol(Array.pop, Decl(lib.es5.d.ts, --, --))
->Runnable.currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
+>Runnable.currentStack.pop : Symbol(pop, Decl(lib.es5.d.ts, --, --))
+>Runnable.currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
->pop : Symbol(Array.pop, Decl(lib.es5.d.ts, --, --))
+>currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
+>pop : Symbol(pop, Decl(lib.es5.d.ts, --, --))
 
                 if (e) {
 >e : Symbol(e, Decl(parserharness.ts, 418, 53))
 
                     that.passed = false;
->that.passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>that.passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 >that : Symbol(that, Decl(parserharness.ts, 412, 15))
->passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 
                     that.error = e;
->that.error : Symbol(Runnable.error, Decl(parserharness.ts, 274, 45))
+>that.error : Symbol(error, Decl(parserharness.ts, 274, 45))
 >that : Symbol(that, Decl(parserharness.ts, 412, 15))
->error : Symbol(Runnable.error, Decl(parserharness.ts, 274, 45))
+>error : Symbol(error, Decl(parserharness.ts, 274, 45))
 >e : Symbol(e, Decl(parserharness.ts, 418, 53))
 
                     var metadata: IScenarioMetadata = { id: undefined, desc: this.description, pass: false, bugs: assert.bugIds };
@@= skipped -70, +70 lines =@@
 
                 } else {
                     that.passed = true; // so far so good.
->that.passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>that.passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 >that : Symbol(that, Decl(parserharness.ts, 412, 15))
->passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 
                     that.runChildren(done);
->that.runChildren : Symbol(Scenario.runChildren, Decl(parserharness.ts, 433, 9))
+>that.runChildren : Symbol(runChildren, Decl(parserharness.ts, 433, 9))
 >that : Symbol(that, Decl(parserharness.ts, 412, 15))
->runChildren : Symbol(Scenario.runChildren, Decl(parserharness.ts, 433, 9))
+>runChildren : Symbol(runChildren, Decl(parserharness.ts, 433, 9))
 >done : Symbol(done, Decl(parserharness.ts, 411, 19))
                 }
             });
@@= skipped -18, +18 lines =@@
          *  adding stack frames.
          */
         public runChildren(done: IDone, index = 0) {
->runChildren : Symbol(Scenario.runChildren, Decl(parserharness.ts, 433, 9))
+>runChildren : Symbol(runChildren, Decl(parserharness.ts, 433, 9))
 >done : Symbol(done, Decl(parserharness.ts, 439, 27))
 >IDone : Symbol(IDone, Decl(parserharness.ts, 264, 5))
 >index : Symbol(index, Decl(parserharness.ts, 439, 39))
@@= skipped -14, +14 lines =@@
 
             for (; index < this.children.length; index++) {
 >index : Symbol(index, Decl(parserharness.ts, 439, 39))
->this.children.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.children : Symbol(Runnable.children, Decl(parserharness.ts, 283, 35))
+>this.children.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.children : Symbol(children, Decl(parserharness.ts, 283, 35))
 >this : Symbol(Scenario, Decl(parserharness.ts, 398, 5))
->children : Symbol(Runnable.children, Decl(parserharness.ts, 283, 35))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>children : Symbol(children, Decl(parserharness.ts, 283, 35))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >index : Symbol(index, Decl(parserharness.ts, 439, 39))
 
                 async = this.runChild(index, <any>function (e) {
 >async : Symbol(async, Decl(parserharness.ts, 441, 15))
->this.runChild : Symbol(Runnable.runChild, Decl(parserharness.ts, 331, 9))
+>this.runChild : Symbol(runChild, Decl(parserharness.ts, 331, 9))
 >this : Symbol(Scenario, Decl(parserharness.ts, 398, 5))
->runChild : Symbol(Runnable.runChild, Decl(parserharness.ts, 331, 9))
+>runChild : Symbol(runChild, Decl(parserharness.ts, 331, 9))
 >index : Symbol(index, Decl(parserharness.ts, 439, 39))
 >e : Symbol(e, Decl(parserharness.ts, 444, 60))
 
                     that.passed = that.passed && that.children[index].passed;
->that.passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>that.passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 >that : Symbol(that, Decl(parserharness.ts, 440, 15))
->passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
->that.passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
+>that.passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 >that : Symbol(that, Decl(parserharness.ts, 440, 15))
->passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
->that.children[index].passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
->that.children : Symbol(Runnable.children, Decl(parserharness.ts, 283, 35))
+>passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
+>that.children[index].passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
+>that.children : Symbol(children, Decl(parserharness.ts, 283, 35))
 >that : Symbol(that, Decl(parserharness.ts, 440, 15))
->children : Symbol(Runnable.children, Decl(parserharness.ts, 283, 35))
+>children : Symbol(children, Decl(parserharness.ts, 283, 35))
 >index : Symbol(index, Decl(parserharness.ts, 439, 39))
->passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 
                     if (async)
 >async : Symbol(async, Decl(parserharness.ts, 441, 15))
 
                         that.runChildren(done, index + 1);
->that.runChildren : Symbol(Scenario.runChildren, Decl(parserharness.ts, 433, 9))
+>that.runChildren : Symbol(runChildren, Decl(parserharness.ts, 433, 9))
 >that : Symbol(that, Decl(parserharness.ts, 440, 15))
->runChildren : Symbol(Scenario.runChildren, Decl(parserharness.ts, 433, 9))
+>runChildren : Symbol(runChildren, Decl(parserharness.ts, 433, 9))
 >done : Symbol(done, Decl(parserharness.ts, 439, 27))
 >index : Symbol(index, Decl(parserharness.ts, 439, 39))
 
@@= skipped -53, +53 lines =@@
 >id : Symbol(id, Decl(parserharness.ts, 455, 47))
 >undefined : Symbol(undefined)
 >desc : Symbol(desc, Decl(parserharness.ts, 455, 62))
->this.description : Symbol(Scenario.description, Decl(parserharness.ts, 400, 44))
+>this.description : Symbol(description, Decl(parserharness.ts, 400, 44))
 >this : Symbol(Scenario, Decl(parserharness.ts, 398, 5))
->description : Symbol(Scenario.description, Decl(parserharness.ts, 400, 44))
+>description : Symbol(description, Decl(parserharness.ts, 400, 44))
 >pass : Symbol(pass, Decl(parserharness.ts, 455, 86))
->this.passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>this.passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 >this : Symbol(Scenario, Decl(parserharness.ts, 398, 5))
->passed : Symbol(Runnable.passed, Decl(parserharness.ts, 277, 35))
+>passed : Symbol(passed, Decl(parserharness.ts, 277, 35))
 >bugs : Symbol(bugs, Decl(parserharness.ts, 455, 105))
 >assert : Symbol(assert, Decl(parserharness.ts, 20, 11))
 
@@= skipped -36, +36 lines =@@
         }
 
         public run() {
->run : Symbol(Run.run, Decl(parserharness.ts, 466, 9))
+>run : Symbol(run, Decl(parserharness.ts, 466, 9))
 
             emitLog('start');
 >emitLog : Symbol(emitLog, Decl(parserharness.ts, 257, 5))
 
             this.runChildren();
->this.runChildren : Symbol(Run.runChildren, Decl(parserharness.ts, 471, 9))
+>this.runChildren : Symbol(runChildren, Decl(parserharness.ts, 471, 9))
 >this : Symbol(Run, Decl(parserharness.ts, 462, 5))
->runChildren : Symbol(Run.runChildren, Decl(parserharness.ts, 471, 9))
+>runChildren : Symbol(runChildren, Decl(parserharness.ts, 471, 9))
         }
 
         public runChildren(index = 0) {
->runChildren : Symbol(Run.runChildren, Decl(parserharness.ts, 471, 9))
+>runChildren : Symbol(runChildren, Decl(parserharness.ts, 471, 9))
 >index : Symbol(index, Decl(parserharness.ts, 473, 27))
 
             var async = false;
@@= skipped -24, +24 lines =@@
 
             for (; index < this.children.length; index++) {
 >index : Symbol(index, Decl(parserharness.ts, 473, 27))
->this.children.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.children : Symbol(Runnable.children, Decl(parserharness.ts, 283, 35))
+>this.children.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.children : Symbol(children, Decl(parserharness.ts, 283, 35))
 >this : Symbol(Run, Decl(parserharness.ts, 462, 5))
->children : Symbol(Runnable.children, Decl(parserharness.ts, 283, 35))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>children : Symbol(children, Decl(parserharness.ts, 283, 35))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >index : Symbol(index, Decl(parserharness.ts, 473, 27))
 
                 // Clear out bug descriptions
@@= skipped -13, +13 lines =@@
 
                 async = this.runChild(index, <any>function (e) {
 >async : Symbol(async, Decl(parserharness.ts, 474, 15))
->this.runChild : Symbol(Runnable.runChild, Decl(parserharness.ts, 331, 9))
+>this.runChild : Symbol(runChild, Decl(parserharness.ts, 331, 9))
 >this : Symbol(Run, Decl(parserharness.ts, 462, 5))
->runChild : Symbol(Runnable.runChild, Decl(parserharness.ts, 331, 9))
+>runChild : Symbol(runChild, Decl(parserharness.ts, 331, 9))
 >index : Symbol(index, Decl(parserharness.ts, 473, 27))
 >e : Symbol(e, Decl(parserharness.ts, 481, 60))
 
@@= skipped -10, +10 lines =@@
 >async : Symbol(async, Decl(parserharness.ts, 474, 15))
 
                         that.runChildren(index + 1);
->that.runChildren : Symbol(Run.runChildren, Decl(parserharness.ts, 471, 9))
+>that.runChildren : Symbol(runChildren, Decl(parserharness.ts, 471, 9))
 >that : Symbol(that, Decl(parserharness.ts, 475, 15))
->runChildren : Symbol(Run.runChildren, Decl(parserharness.ts, 471, 9))
+>runChildren : Symbol(runChildren, Decl(parserharness.ts, 471, 9))
 >index : Symbol(index, Decl(parserharness.ts, 473, 27))
                     }
                 });
@@= skipped -15, +15 lines =@@
             }
 
             Perf.runBenchmarks();
->Perf.runBenchmarks : Symbol(Perf.runBenchmarks, Decl(parserharness.ts, 641, 9))
+>Perf.runBenchmarks : Symbol(runBenchmarks, Decl(parserharness.ts, 641, 9))
 >Perf : Symbol(Perf, Decl(parserharness.ts, 495, 5))
->runBenchmarks : Symbol(Perf.runBenchmarks, Decl(parserharness.ts, 641, 9))
+>runBenchmarks : Symbol(runBenchmarks, Decl(parserharness.ts, 641, 9))
 
             emitLog('end');
 >emitLog : Symbol(emitLog, Decl(parserharness.ts, 257, 5))
@@= skipped -51, +51 lines =@@
 >now : Symbol(now, Decl(parserharness.ts, 500, 22))
 
                     return TestUtilities.QueryPerformanceCounter();
->TestUtilities.QueryPerformanceCounter : Symbol(TestUtilities.QueryPerformanceCounter, Decl(parserharness.ts, 507, 42))
+>TestUtilities.QueryPerformanceCounter : Symbol(QueryPerformanceCounter, Decl(parserharness.ts, 507, 42))
 >TestUtilities : Symbol(TestUtilities, Decl(parserharness.ts, 505, 13))
->QueryPerformanceCounter : Symbol(TestUtilities.QueryPerformanceCounter, Decl(parserharness.ts, 507, 42))
+>QueryPerformanceCounter : Symbol(QueryPerformanceCounter, Decl(parserharness.ts, 507, 42))
                 }
 
                 resolution = TestUtilities.QueryPerformanceFrequency();
 >resolution : Symbol(resolution, Decl(parserharness.ts, 501, 22))
->TestUtilities.QueryPerformanceFrequency : Symbol(TestUtilities.QueryPerformanceFrequency, Decl(parserharness.ts, 508, 66))
+>TestUtilities.QueryPerformanceFrequency : Symbol(QueryPerformanceFrequency, Decl(parserharness.ts, 508, 66))
 >TestUtilities : Symbol(TestUtilities, Decl(parserharness.ts, 505, 13))
->QueryPerformanceFrequency : Symbol(TestUtilities.QueryPerformanceFrequency, Decl(parserharness.ts, 508, 66))
+>QueryPerformanceFrequency : Symbol(QueryPerformanceFrequency, Decl(parserharness.ts, 508, 66))
 
             } else {
                 now = function () {
 >now : Symbol(now, Decl(parserharness.ts, 500, 22))
 
                     return Date.now();
->Date.now : Symbol(DateConstructor.now, Decl(lib.es5.d.ts, --, --))
+>Date.now : Symbol(now, Decl(lib.es5.d.ts, --, --))
 >Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->now : Symbol(DateConstructor.now, Decl(lib.es5.d.ts, --, --))
+>now : Symbol(now, Decl(lib.es5.d.ts, --, --))
                 }
 
                 resolution = 1000;
@@= skipped -30, +30 lines =@@
 >Timer : Symbol(Timer, Decl(parserharness.ts, 528, 9))
 
             public startTime;
->startTime : Symbol(Timer.startTime, Decl(parserharness.ts, 530, 28))
+>startTime : Symbol(startTime, Decl(parserharness.ts, 530, 28))
 
             public time = 0;
->time : Symbol(Timer.time, Decl(parserharness.ts, 531, 29))
+>time : Symbol(time, Decl(parserharness.ts, 531, 29))
 
             public start() {
->start : Symbol(Timer.start, Decl(parserharness.ts, 532, 28))
+>start : Symbol(start, Decl(parserharness.ts, 532, 28))
 
                 this.time = 0;
->this.time : Symbol(Timer.time, Decl(parserharness.ts, 531, 29))
+>this.time : Symbol(time, Decl(parserharness.ts, 531, 29))
 >this : Symbol(Timer, Decl(parserharness.ts, 528, 9))
->time : Symbol(Timer.time, Decl(parserharness.ts, 531, 29))
+>time : Symbol(time, Decl(parserharness.ts, 531, 29))
 
                 this.startTime = Clock.now();
->this.startTime : Symbol(Timer.startTime, Decl(parserharness.ts, 530, 28))
+>this.startTime : Symbol(startTime, Decl(parserharness.ts, 530, 28))
 >this : Symbol(Timer, Decl(parserharness.ts, 528, 9))
->startTime : Symbol(Timer.startTime, Decl(parserharness.ts, 530, 28))
->Clock.now : Symbol(Clock.now, Decl(parserharness.ts, 500, 22))
+>startTime : Symbol(startTime, Decl(parserharness.ts, 530, 28))
+>Clock.now : Symbol(now, Decl(parserharness.ts, 500, 22))
 >Clock : Symbol(Clock, Decl(parserharness.ts, 498, 24))
->now : Symbol(Clock.now, Decl(parserharness.ts, 500, 22))
+>now : Symbol(now, Decl(parserharness.ts, 500, 22))
             }
 
             public end() {
->end : Symbol(Timer.end, Decl(parserharness.ts, 537, 13))
+>end : Symbol(end, Decl(parserharness.ts, 537, 13))
 
                 // Set time to MS.
                 this.time = (Clock.now() - this.startTime) / Clock.resolution * 1000;
->this.time : Symbol(Timer.time, Decl(parserharness.ts, 531, 29))
+>this.time : Symbol(time, Decl(parserharness.ts, 531, 29))
 >this : Symbol(Timer, Decl(parserharness.ts, 528, 9))
->time : Symbol(Timer.time, Decl(parserharness.ts, 531, 29))
->Clock.now : Symbol(Clock.now, Decl(parserharness.ts, 500, 22))
+>time : Symbol(time, Decl(parserharness.ts, 531, 29))
+>Clock.now : Symbol(now, Decl(parserharness.ts, 500, 22))
 >Clock : Symbol(Clock, Decl(parserharness.ts, 498, 24))
->now : Symbol(Clock.now, Decl(parserharness.ts, 500, 22))
->this.startTime : Symbol(Timer.startTime, Decl(parserharness.ts, 530, 28))
+>now : Symbol(now, Decl(parserharness.ts, 500, 22))
+>this.startTime : Symbol(startTime, Decl(parserharness.ts, 530, 28))
 >this : Symbol(Timer, Decl(parserharness.ts, 528, 9))
->startTime : Symbol(Timer.startTime, Decl(parserharness.ts, 530, 28))
->Clock.resolution : Symbol(Clock.resolution, Decl(parserharness.ts, 501, 22))
+>startTime : Symbol(startTime, Decl(parserharness.ts, 530, 28))
+>Clock.resolution : Symbol(resolution, Decl(parserharness.ts, 501, 22))
 >Clock : Symbol(Clock, Decl(parserharness.ts, 498, 24))
->resolution : Symbol(Clock.resolution, Decl(parserharness.ts, 501, 22))
+>resolution : Symbol(resolution, Decl(parserharness.ts, 501, 22))
             }
         }
 
@@= skipped -46, +46 lines =@@
 >Dataset : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
 
             public data: number[] = [];
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
 
             public add(value: number) {
->add : Symbol(Dataset.add, Decl(parserharness.ts, 546, 39))
+>add : Symbol(add, Decl(parserharness.ts, 546, 39))
 >value : Symbol(value, Decl(parserharness.ts, 548, 23))
 
                 this.data.push(value);
->this.data.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >value : Symbol(value, Decl(parserharness.ts, 548, 23))
             }
 
             public mean() {
->mean : Symbol(Dataset.mean, Decl(parserharness.ts, 550, 13))
+>mean : Symbol(mean, Decl(parserharness.ts, 550, 13))
 
                 var sum = 0;
 >sum : Symbol(sum, Decl(parserharness.ts, 553, 19))
@@= skipped -24, +24 lines =@@
                 for (var i = 0; i < this.data.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 554, 24))
 >i : Symbol(i, Decl(parserharness.ts, 554, 24))
->this.data.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 554, 24))
 
                     sum += this.data[i];
 >sum : Symbol(sum, Decl(parserharness.ts, 553, 19))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >i : Symbol(i, Decl(parserharness.ts, 554, 24))
                 }
 
                 return sum / this.data.length;
 >sum : Symbol(sum, Decl(parserharness.ts, 553, 19))
->this.data.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
             }
 
             public min() {
->min : Symbol(Dataset.min, Decl(parserharness.ts, 559, 13))
+>min : Symbol(min, Decl(parserharness.ts, 559, 13))
 
                 var min = this.data[0];
 >min : Symbol(min, Decl(parserharness.ts, 562, 19))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
 
                 for (var i = 1; i < this.data.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 564, 24))
 >i : Symbol(i, Decl(parserharness.ts, 564, 24))
->this.data.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 564, 24))
 
                     if (this.data[i] < min) {
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >i : Symbol(i, Decl(parserharness.ts, 564, 24))
 >min : Symbol(min, Decl(parserharness.ts, 562, 19))
 
                         min = this.data[i];
 >min : Symbol(min, Decl(parserharness.ts, 562, 19))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >i : Symbol(i, Decl(parserharness.ts, 564, 24))
                     }
                 }
@@= skipped -64, +64 lines =@@
             }
 
             public max() {
->max : Symbol(Dataset.max, Decl(parserharness.ts, 571, 13))
+>max : Symbol(max, Decl(parserharness.ts, 571, 13))
 
                 var max = this.data[0];
 >max : Symbol(max, Decl(parserharness.ts, 574, 19))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
 
                 for (var i = 1; i < this.data.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 576, 24))
 >i : Symbol(i, Decl(parserharness.ts, 576, 24))
->this.data.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 576, 24))
 
                     if (this.data[i] > max) {
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >i : Symbol(i, Decl(parserharness.ts, 576, 24))
 >max : Symbol(max, Decl(parserharness.ts, 574, 19))
 
                         max = this.data[i];
 >max : Symbol(max, Decl(parserharness.ts, 574, 19))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >i : Symbol(i, Decl(parserharness.ts, 576, 24))
                     }
                 }
@@= skipped -39, +39 lines =@@
             }
 
             public stdDev() {
->stdDev : Symbol(Dataset.stdDev, Decl(parserharness.ts, 583, 13))
+>stdDev : Symbol(stdDev, Decl(parserharness.ts, 583, 13))
 
                 var sampleMean = this.mean();
 >sampleMean : Symbol(sampleMean, Decl(parserharness.ts, 586, 19))
->this.mean : Symbol(Dataset.mean, Decl(parserharness.ts, 550, 13))
+>this.mean : Symbol(mean, Decl(parserharness.ts, 550, 13))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->mean : Symbol(Dataset.mean, Decl(parserharness.ts, 550, 13))
+>mean : Symbol(mean, Decl(parserharness.ts, 550, 13))
 
                 var sumOfSquares = 0;
 >sumOfSquares : Symbol(sumOfSquares, Decl(parserharness.ts, 587, 19))
@@= skipped -14, +14 lines =@@
                 for (var i = 0; i < this.data.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 588, 24))
 >i : Symbol(i, Decl(parserharness.ts, 588, 24))
->this.data.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 588, 24))
 
                     sumOfSquares += Math.pow(this.data[i] - sampleMean, 2);
 >sumOfSquares : Symbol(sumOfSquares, Decl(parserharness.ts, 587, 19))
->Math.pow : Symbol(Math.pow, Decl(lib.es5.d.ts, --, --))
+>Math.pow : Symbol(pow, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->pow : Symbol(Math.pow, Decl(lib.es5.d.ts, --, --))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>pow : Symbol(pow, Decl(lib.es5.d.ts, --, --))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >i : Symbol(i, Decl(parserharness.ts, 588, 24))
 >sampleMean : Symbol(sampleMean, Decl(parserharness.ts, 586, 19))
                 }
 
                 return Math.sqrt(sumOfSquares / this.data.length);
->Math.sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
+>Math.sqrt : Symbol(sqrt, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
+>sqrt : Symbol(sqrt, Decl(lib.es5.d.ts, --, --))
 >sumOfSquares : Symbol(sumOfSquares, Decl(parserharness.ts, 587, 19))
->this.data.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>this.data.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.data : Symbol(data, Decl(parserharness.ts, 545, 30))
 >this : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
             }
         }
 
@@= skipped -37, +37 lines =@@
 >Benchmark : Symbol(Benchmark, Decl(parserharness.ts, 594, 9))
 
             public iterations = 10;
->iterations : Symbol(Benchmark.iterations, Decl(parserharness.ts, 597, 32))
+>iterations : Symbol(iterations, Decl(parserharness.ts, 597, 32))
 
             public description = "";
->description : Symbol(Benchmark.description, Decl(parserharness.ts, 598, 35))
+>description : Symbol(description, Decl(parserharness.ts, 598, 35))
 
             public bench(subBench?: () => void ) { }
->bench : Symbol(Benchmark.bench, Decl(parserharness.ts, 599, 36))
+>bench : Symbol(bench, Decl(parserharness.ts, 599, 36))
 >subBench : Symbol(subBench, Decl(parserharness.ts, 600, 25))
 
             public before() { }
->before : Symbol(Benchmark.before, Decl(parserharness.ts, 600, 52))
+>before : Symbol(before, Decl(parserharness.ts, 600, 52))
 
             public beforeEach() { }
->beforeEach : Symbol(Benchmark.beforeEach, Decl(parserharness.ts, 601, 31))
+>beforeEach : Symbol(beforeEach, Decl(parserharness.ts, 601, 31))
 
             public after() { }
->after : Symbol(Benchmark.after, Decl(parserharness.ts, 602, 35))
+>after : Symbol(after, Decl(parserharness.ts, 602, 35))
 
             public afterEach() { }
->afterEach : Symbol(Benchmark.afterEach, Decl(parserharness.ts, 603, 30))
+>afterEach : Symbol(afterEach, Decl(parserharness.ts, 603, 30))
 
             public results: { [x: string]: Dataset; } = <{ [x: string]: Dataset; }>{};
->results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >x : Symbol(x, Decl(parserharness.ts, 605, 31))
 >Dataset : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
 >x : Symbol(x, Decl(parserharness.ts, 605, 60))
 >Dataset : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
 
             public addTimingFor(name: string, timing: number) {
->addTimingFor : Symbol(Benchmark.addTimingFor, Decl(parserharness.ts, 605, 86))
+>addTimingFor : Symbol(addTimingFor, Decl(parserharness.ts, 605, 86))
 >name : Symbol(name, Decl(parserharness.ts, 607, 32))
 >timing : Symbol(timing, Decl(parserharness.ts, 607, 45))
 
                 this.results[name] = this.results[name] || new Dataset();
->this.results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>this.results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >this : Symbol(Benchmark, Decl(parserharness.ts, 594, 9))
->results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >name : Symbol(name, Decl(parserharness.ts, 607, 32))
->this.results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>this.results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >this : Symbol(Benchmark, Decl(parserharness.ts, 594, 9))
->results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >name : Symbol(name, Decl(parserharness.ts, 607, 32))
 >Dataset : Symbol(Dataset, Decl(parserharness.ts, 543, 9))
 
                 this.results[name].add(timing);
->this.results[name].add : Symbol(Dataset.add, Decl(parserharness.ts, 546, 39))
->this.results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>this.results[name].add : Symbol(add, Decl(parserharness.ts, 546, 39))
+>this.results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >this : Symbol(Benchmark, Decl(parserharness.ts, 594, 9))
->results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >name : Symbol(name, Decl(parserharness.ts, 607, 32))
->add : Symbol(Dataset.add, Decl(parserharness.ts, 546, 39))
+>add : Symbol(add, Decl(parserharness.ts, 546, 39))
 >timing : Symbol(timing, Decl(parserharness.ts, 607, 45))
             }
         }
@@= skipped -87, +87 lines =@@
 
             description: string = benchmark.description,
 >description : Symbol(description, Decl(parserharness.ts, 623, 33))
->benchmark.description : Symbol(Benchmark.description, Decl(parserharness.ts, 598, 35))
+>benchmark.description : Symbol(description, Decl(parserharness.ts, 598, 35))
 >benchmark : Symbol(benchmark, Decl(parserharness.ts, 622, 33))
->description : Symbol(Benchmark.description, Decl(parserharness.ts, 598, 35))
+>description : Symbol(description, Decl(parserharness.ts, 598, 35))
 
             name: string = '',
 >name : Symbol(name, Decl(parserharness.ts, 624, 56))
 
             f = benchmark.bench
 >f : Symbol(f, Decl(parserharness.ts, 625, 30))
->benchmark.bench : Symbol(Benchmark.bench, Decl(parserharness.ts, 599, 36))
+>benchmark.bench : Symbol(bench, Decl(parserharness.ts, 599, 36))
 >benchmark : Symbol(benchmark, Decl(parserharness.ts, 622, 33))
->bench : Symbol(Benchmark.bench, Decl(parserharness.ts, 599, 36))
+>bench : Symbol(bench, Decl(parserharness.ts, 599, 36))
 
         ): void {
 
@@= skipped -20, +20 lines =@@
 >Timer : Symbol(Timer, Decl(parserharness.ts, 528, 9))
 
             t.start();
->t.start : Symbol(Timer.start, Decl(parserharness.ts, 532, 28))
+>t.start : Symbol(start, Decl(parserharness.ts, 532, 28))
 >t : Symbol(t, Decl(parserharness.ts, 629, 15))
->start : Symbol(Timer.start, Decl(parserharness.ts, 532, 28))
+>start : Symbol(start, Decl(parserharness.ts, 532, 28))
 
             var subBenchmark = function (name, f): void {
 >subBenchmark : Symbol(subBenchmark, Decl(parserharness.ts, 632, 15))
@@= skipped -18, +18 lines =@@
             }
 
             f.call(benchmark, subBenchmark);
->f.call : Symbol(Function.call, Decl(lib.es5.d.ts, --, --))
+>f.call : Symbol(call, Decl(lib.es5.d.ts, --, --))
 >f : Symbol(f, Decl(parserharness.ts, 625, 30))
->call : Symbol(Function.call, Decl(lib.es5.d.ts, --, --))
+>call : Symbol(call, Decl(lib.es5.d.ts, --, --))
 >benchmark : Symbol(benchmark, Decl(parserharness.ts, 622, 33))
 >subBenchmark : Symbol(subBenchmark, Decl(parserharness.ts, 632, 15))
 
             t.end();
->t.end : Symbol(Timer.end, Decl(parserharness.ts, 537, 13))
+>t.end : Symbol(end, Decl(parserharness.ts, 537, 13))
 >t : Symbol(t, Decl(parserharness.ts, 629, 15))
->end : Symbol(Timer.end, Decl(parserharness.ts, 537, 13))
+>end : Symbol(end, Decl(parserharness.ts, 537, 13))
 
             benchmark.addTimingFor(name, t.time);
->benchmark.addTimingFor : Symbol(Benchmark.addTimingFor, Decl(parserharness.ts, 605, 86))
+>benchmark.addTimingFor : Symbol(addTimingFor, Decl(parserharness.ts, 605, 86))
 >benchmark : Symbol(benchmark, Decl(parserharness.ts, 622, 33))
->addTimingFor : Symbol(Benchmark.addTimingFor, Decl(parserharness.ts, 605, 86))
+>addTimingFor : Symbol(addTimingFor, Decl(parserharness.ts, 605, 86))
 >name : Symbol(name, Decl(parserharness.ts, 624, 56))
->t.time : Symbol(Timer.time, Decl(parserharness.ts, 531, 29))
+>t.time : Symbol(time, Decl(parserharness.ts, 531, 29))
 >t : Symbol(t, Decl(parserharness.ts, 629, 15))
->time : Symbol(Timer.time, Decl(parserharness.ts, 531, 29))
+>time : Symbol(time, Decl(parserharness.ts, 531, 29))
         }
 
         export function runBenchmarks() {
@@= skipped -27, +27 lines =@@
             for (var i = 0; i < benchmarks.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 644, 20))
 >i : Symbol(i, Decl(parserharness.ts, 644, 20))
->benchmarks.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>benchmarks.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >benchmarks : Symbol(benchmarks, Decl(parserharness.ts, 613, 18))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 644, 20))
 
                 var b = new benchmarks[i]();
@@= skipped -16, +16 lines =@@
 >Timer : Symbol(Timer, Decl(parserharness.ts, 528, 9))
 
                 b.before();
->b.before : Symbol(Benchmark.before, Decl(parserharness.ts, 600, 52))
+>b.before : Symbol(before, Decl(parserharness.ts, 600, 52))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->before : Symbol(Benchmark.before, Decl(parserharness.ts, 600, 52))
+>before : Symbol(before, Decl(parserharness.ts, 600, 52))
 
                 for (var j = 0; j < b.iterations; j++) {
 >j : Symbol(j, Decl(parserharness.ts, 650, 24))
 >j : Symbol(j, Decl(parserharness.ts, 650, 24))
->b.iterations : Symbol(Benchmark.iterations, Decl(parserharness.ts, 597, 32))
+>b.iterations : Symbol(iterations, Decl(parserharness.ts, 597, 32))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->iterations : Symbol(Benchmark.iterations, Decl(parserharness.ts, 597, 32))
+>iterations : Symbol(iterations, Decl(parserharness.ts, 597, 32))
 >j : Symbol(j, Decl(parserharness.ts, 650, 24))
 
                     b.beforeEach();
->b.beforeEach : Symbol(Benchmark.beforeEach, Decl(parserharness.ts, 601, 31))
+>b.beforeEach : Symbol(beforeEach, Decl(parserharness.ts, 601, 31))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->beforeEach : Symbol(Benchmark.beforeEach, Decl(parserharness.ts, 601, 31))
+>beforeEach : Symbol(beforeEach, Decl(parserharness.ts, 601, 31))
 
                     timeFunction(b);
 >timeFunction : Symbol(timeFunction, Decl(parserharness.ts, 615, 11))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
 
                     b.afterEach();
->b.afterEach : Symbol(Benchmark.afterEach, Decl(parserharness.ts, 603, 30))
+>b.afterEach : Symbol(afterEach, Decl(parserharness.ts, 603, 30))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->afterEach : Symbol(Benchmark.afterEach, Decl(parserharness.ts, 603, 30))
+>afterEach : Symbol(afterEach, Decl(parserharness.ts, 603, 30))
                 }
                 b.after();
->b.after : Symbol(Benchmark.after, Decl(parserharness.ts, 602, 35))
+>b.after : Symbol(after, Decl(parserharness.ts, 602, 35))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->after : Symbol(Benchmark.after, Decl(parserharness.ts, 602, 35))
+>after : Symbol(after, Decl(parserharness.ts, 602, 35))
 
                 for (var prop in b.results) {
 >prop : Symbol(prop, Decl(parserharness.ts, 657, 24))
->b.results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>b.results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>results : Symbol(results, Decl(parserharness.ts, 604, 34))
 
                     var description = b.description + (prop ? ": " + prop : '');
 >description : Symbol(description, Decl(parserharness.ts, 658, 23))
->b.description : Symbol(Benchmark.description, Decl(parserharness.ts, 598, 35))
+>b.description : Symbol(description, Decl(parserharness.ts, 598, 35))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->description : Symbol(Benchmark.description, Decl(parserharness.ts, 598, 35))
+>description : Symbol(description, Decl(parserharness.ts, 598, 35))
 >prop : Symbol(prop, Decl(parserharness.ts, 657, 24))
 >prop : Symbol(prop, Decl(parserharness.ts, 657, 24))
 
@@= skipped -61, +61 lines =@@
 
                             mean: b.results[prop].mean(),
 >mean : Symbol(mean, Decl(parserharness.ts, 663, 69))
->b.results[prop].mean : Symbol(Dataset.mean, Decl(parserharness.ts, 550, 13))
->b.results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>b.results[prop].mean : Symbol(mean, Decl(parserharness.ts, 550, 13))
+>b.results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >prop : Symbol(prop, Decl(parserharness.ts, 657, 24))
->mean : Symbol(Dataset.mean, Decl(parserharness.ts, 550, 13))
+>mean : Symbol(mean, Decl(parserharness.ts, 550, 13))
 
                             min: b.results[prop].min(),
 >min : Symbol(min, Decl(parserharness.ts, 664, 57))
->b.results[prop].min : Symbol(Dataset.min, Decl(parserharness.ts, 559, 13))
->b.results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>b.results[prop].min : Symbol(min, Decl(parserharness.ts, 559, 13))
+>b.results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >prop : Symbol(prop, Decl(parserharness.ts, 657, 24))
->min : Symbol(Dataset.min, Decl(parserharness.ts, 559, 13))
+>min : Symbol(min, Decl(parserharness.ts, 559, 13))
 
                             max: b.results[prop].max(),
 >max : Symbol(max, Decl(parserharness.ts, 665, 55))
->b.results[prop].max : Symbol(Dataset.max, Decl(parserharness.ts, 571, 13))
->b.results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>b.results[prop].max : Symbol(max, Decl(parserharness.ts, 571, 13))
+>b.results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >prop : Symbol(prop, Decl(parserharness.ts, 657, 24))
->max : Symbol(Dataset.max, Decl(parserharness.ts, 571, 13))
+>max : Symbol(max, Decl(parserharness.ts, 571, 13))
 
                             stdDev: b.results[prop].stdDev(),
 >stdDev : Symbol(stdDev, Decl(parserharness.ts, 666, 55))
->b.results[prop].stdDev : Symbol(Dataset.stdDev, Decl(parserharness.ts, 583, 13))
->b.results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>b.results[prop].stdDev : Symbol(stdDev, Decl(parserharness.ts, 583, 13))
+>b.results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >prop : Symbol(prop, Decl(parserharness.ts, 657, 24))
->stdDev : Symbol(Dataset.stdDev, Decl(parserharness.ts, 583, 13))
+>stdDev : Symbol(stdDev, Decl(parserharness.ts, 583, 13))
 
                             trials: b.results[prop].data
 >trials : Symbol(trials, Decl(parserharness.ts, 667, 61))
->b.results[prop].data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
->b.results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>b.results[prop].data : Symbol(data, Decl(parserharness.ts, 545, 30))
+>b.results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >b : Symbol(b, Decl(parserharness.ts, 645, 19))
->results : Symbol(Benchmark.results, Decl(parserharness.ts, 604, 34))
+>results : Symbol(results, Decl(parserharness.ts, 604, 34))
 >prop : Symbol(prop, Decl(parserharness.ts, 657, 24))
->data : Symbol(Dataset.data, Decl(parserharness.ts, 545, 30))
+>data : Symbol(data, Decl(parserharness.ts, 545, 30))
                         }
                     });
                 }
@@= skipped -57, +57 lines =@@
 >BenchmarkClass : Symbol(BenchmarkClass, Decl(parserharness.ts, 679, 37))
 
             benchmarks.push(BenchmarkClass);
->benchmarks.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>benchmarks.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >benchmarks : Symbol(benchmarks, Decl(parserharness.ts, 613, 18))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >BenchmarkClass : Symbol(BenchmarkClass, Decl(parserharness.ts, 679, 37))
         }
 
@@= skipped -19, +19 lines =@@
 >WriterAggregator : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
 
             public lines: string[] = [];
->lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 
             public currentLine = "";
->currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
 
             public Write(str) {
->Write : Symbol(WriterAggregator.Write, Decl(parserharness.ts, 692, 36))
+>Write : Symbol(Write, Decl(parserharness.ts, 692, 36))
 >str : Symbol(str, Decl(parserharness.ts, 694, 25))
 
                 this.currentLine += str;
->this.currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>this.currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
 >this : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
->currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
 >str : Symbol(str, Decl(parserharness.ts, 694, 25))
             }
 
             public WriteLine(str) {
->WriteLine : Symbol(WriterAggregator.WriteLine, Decl(parserharness.ts, 696, 13))
+>WriteLine : Symbol(WriteLine, Decl(parserharness.ts, 696, 13))
 >str : Symbol(str, Decl(parserharness.ts, 698, 29))
 
                 this.lines.push(this.currentLine + str);
->this.lines.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->this.lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>this.lines.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>this.lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 >this : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
->lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->this.currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>this.currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
 >this : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
->currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
 >str : Symbol(str, Decl(parserharness.ts, 698, 29))
 
                 this.currentLine = "";
->this.currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>this.currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
 >this : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
->currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
             }
 
             public Close() {
->Close : Symbol(WriterAggregator.Close, Decl(parserharness.ts, 701, 13))
+>Close : Symbol(Close, Decl(parserharness.ts, 701, 13))
 
                 if (this.currentLine.length > 0) { this.lines.push(this.currentLine); }
->this.currentLine.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
->this.currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>this.currentLine.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
 >this : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
->currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
->this.lines.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->this.lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.lines.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>this.lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 >this : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
->lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->this.currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>this.currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
 >this : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
->currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
 
                 this.currentLine = "";
->this.currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>this.currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
 >this : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
->currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
             }
 
             public reset() {
->reset : Symbol(WriterAggregator.reset, Decl(parserharness.ts, 706, 13))
+>reset : Symbol(reset, Decl(parserharness.ts, 706, 13))
 
                 this.lines = [];
->this.lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>this.lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 >this : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
->lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 
                 this.currentLine = "";
->this.currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>this.currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
 >this : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
->currentLine : Symbol(WriterAggregator.currentLine, Decl(parserharness.ts, 691, 40))
+>currentLine : Symbol(currentLine, Decl(parserharness.ts, 691, 40))
             }
         }
 
@@= skipped -81, +81 lines =@@
 >EmitterIOHost : Symbol(EmitterIOHost, Decl(parserharness.ts, 712, 9))
 
             private fileCollection = {};
->fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 
             /** create file gets the whole path to create, so this works as expected with the --out parameter */
             public createFile(s: string, useUTF8?: boolean): ITextWriter {
->createFile : Symbol(EmitterIOHost.createFile, Decl(parserharness.ts, 717, 40))
+>createFile : Symbol(createFile, Decl(parserharness.ts, 717, 40))
 >s : Symbol(s, Decl(parserharness.ts, 720, 30))
 >useUTF8 : Symbol(useUTF8, Decl(parserharness.ts, 720, 40))
 >ITextWriter : Symbol(ITextWriter)
 
                 if (this.fileCollection[s]) {
->this.fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>this.fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >this : Symbol(EmitterIOHost, Decl(parserharness.ts, 712, 9))
->fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >s : Symbol(s, Decl(parserharness.ts, 720, 30))
 
                     return <ITextWriter>this.fileCollection[s];
 >ITextWriter : Symbol(ITextWriter)
->this.fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>this.fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >this : Symbol(EmitterIOHost, Decl(parserharness.ts, 712, 9))
->fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >s : Symbol(s, Decl(parserharness.ts, 720, 30))
                 }
 
@@= skipped -32, +32 lines =@@
 >WriterAggregator : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
 
                 this.fileCollection[s] = writer;
->this.fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>this.fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >this : Symbol(EmitterIOHost, Decl(parserharness.ts, 712, 9))
->fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >s : Symbol(s, Decl(parserharness.ts, 720, 30))
 >writer : Symbol(writer, Decl(parserharness.ts, 726, 19))
 
@@= skipped -11, +11 lines =@@
             }
 
             public directoryExists(s: string) { return false; }
->directoryExists : Symbol(EmitterIOHost.directoryExists, Decl(parserharness.ts, 729, 13))
+>directoryExists : Symbol(directoryExists, Decl(parserharness.ts, 729, 13))
 >s : Symbol(s, Decl(parserharness.ts, 731, 35))
 
             public fileExists(s: string) { return typeof this.fileCollection[s] !== 'undefined'; }
->fileExists : Symbol(EmitterIOHost.fileExists, Decl(parserharness.ts, 731, 63))
+>fileExists : Symbol(fileExists, Decl(parserharness.ts, 731, 63))
 >s : Symbol(s, Decl(parserharness.ts, 732, 30))
->this.fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>this.fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >this : Symbol(EmitterIOHost, Decl(parserharness.ts, 712, 9))
->fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >s : Symbol(s, Decl(parserharness.ts, 732, 30))
 
             public resolvePath(s: string) { return s; }
->resolvePath : Symbol(EmitterIOHost.resolvePath, Decl(parserharness.ts, 732, 98))
+>resolvePath : Symbol(resolvePath, Decl(parserharness.ts, 732, 98))
 >s : Symbol(s, Decl(parserharness.ts, 733, 31))
 >s : Symbol(s, Decl(parserharness.ts, 733, 31))
 
             public reset() { this.fileCollection = {}; }
->reset : Symbol(EmitterIOHost.reset, Decl(parserharness.ts, 733, 55))
->this.fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>reset : Symbol(reset, Decl(parserharness.ts, 733, 55))
+>this.fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >this : Symbol(EmitterIOHost, Decl(parserharness.ts, 712, 9))
->fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 
             public toArray(): { filename: string; file: WriterAggregator; }[] {
->toArray : Symbol(EmitterIOHost.toArray, Decl(parserharness.ts, 735, 56))
+>toArray : Symbol(toArray, Decl(parserharness.ts, 735, 56))
 >filename : Symbol(filename, Decl(parserharness.ts, 737, 31))
 >file : Symbol(file, Decl(parserharness.ts, 737, 49))
 >WriterAggregator : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
@@= skipped -36, +36 lines =@@
 
                 for (var p in this.fileCollection) {
 >p : Symbol(p, Decl(parserharness.ts, 740, 24))
->this.fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>this.fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >this : Symbol(EmitterIOHost, Decl(parserharness.ts, 712, 9))
->fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 
                     if (this.fileCollection.hasOwnProperty(p)) {
->this.fileCollection.hasOwnProperty : Symbol(Object.hasOwnProperty, Decl(lib.es5.d.ts, --, --))
->this.fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>this.fileCollection.hasOwnProperty : Symbol(hasOwnProperty, Decl(lib.es5.d.ts, --, --))
+>this.fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >this : Symbol(EmitterIOHost, Decl(parserharness.ts, 712, 9))
->fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
->hasOwnProperty : Symbol(Object.hasOwnProperty, Decl(lib.es5.d.ts, --, --))
+>fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
+>hasOwnProperty : Symbol(hasOwnProperty, Decl(lib.es5.d.ts, --, --))
 >p : Symbol(p, Decl(parserharness.ts, 740, 24))
 
                         var current = <Harness.Compiler.WriterAggregator>this.fileCollection[p];
@@= skipped -17, +17 lines =@@
 >Harness : Symbol(Harness, Decl(parserharness.ts, 52, 1))
 >Compiler : Symbol(Compiler, Decl(parserharness.ts, 683, 5))
 >WriterAggregator : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
->this.fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>this.fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >this : Symbol(EmitterIOHost, Decl(parserharness.ts, 712, 9))
->fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >p : Symbol(p, Decl(parserharness.ts, 740, 24))
 
                         if (current.lines.length > 0) {
->current.lines.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->current.lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>current.lines.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>current.lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 >current : Symbol(current, Decl(parserharness.ts, 742, 27))
->lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
                             if (p !== '0.js') { current.lines.unshift('////[' + p + ']'); }
 >p : Symbol(p, Decl(parserharness.ts, 740, 24))
->current.lines.unshift : Symbol(Array.unshift, Decl(lib.es5.d.ts, --, --))
->current.lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>current.lines.unshift : Symbol(unshift, Decl(lib.es5.d.ts, --, --))
+>current.lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 >current : Symbol(current, Decl(parserharness.ts, 742, 27))
->lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
->unshift : Symbol(Array.unshift, Decl(lib.es5.d.ts, --, --))
+>lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
+>unshift : Symbol(unshift, Decl(lib.es5.d.ts, --, --))
 >p : Symbol(p, Decl(parserharness.ts, 740, 24))
 
                             result.push({ filename: p, file: this.fileCollection[p] });
->result.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>result.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >result : Symbol(result, Decl(parserharness.ts, 738, 19))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >filename : Symbol(filename, Decl(parserharness.ts, 745, 41))
 >p : Symbol(p, Decl(parserharness.ts, 740, 24))
 >file : Symbol(file, Decl(parserharness.ts, 745, 54))
->this.fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>this.fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >this : Symbol(EmitterIOHost, Decl(parserharness.ts, 712, 9))
->fileCollection : Symbol(EmitterIOHost.fileCollection, Decl(parserharness.ts, 715, 72))
+>fileCollection : Symbol(fileCollection, Decl(parserharness.ts, 715, 72))
 >p : Symbol(p, Decl(parserharness.ts, 740, 24))
                         }
                     }
@@= skipped -65, +65 lines =@@
 >filename : Symbol(filename, Decl(parserharness.ts, 759, 38))
 
             return /\.d\.ts$/.test(filename);
->/\.d\.ts$/.test : Symbol(RegExp.test, Decl(lib.es5.d.ts, --, --))
->test : Symbol(RegExp.test, Decl(lib.es5.d.ts, --, --))
+>/\.d\.ts$/.test : Symbol(test, Decl(lib.es5.d.ts, --, --))
+>test : Symbol(test, Decl(lib.es5.d.ts, --, --))
 >filename : Symbol(filename, Decl(parserharness.ts, 759, 38))
         }
 
@@= skipped -9, +9 lines =@@
 >makeDefaultCompilerForTest : Symbol(makeDefaultCompilerForTest, Decl(parserharness.ts, 761, 9))
 >c : Symbol(c, Decl(parserharness.ts, 763, 51))
 >TypeScript : Symbol(TypeScript)
->TypeScriptCompiler : Symbol(TypeScript.TypeScriptCompiler)
+>TypeScriptCompiler : Symbol(TypeScriptCompiler)
 
             var compiler = c || new TypeScript.TypeScriptCompiler(stderr);
 >compiler : Symbol(compiler, Decl(parserharness.ts, 764, 15))
@@= skipped -51, +51 lines =@@
         var compiler: TypeScript.TypeScriptCompiler;
 >compiler : Symbol(compiler, Decl(parserharness.ts, 780, 11))
 >TypeScript : Symbol(TypeScript)
->TypeScriptCompiler : Symbol(TypeScript.TypeScriptCompiler)
+>TypeScriptCompiler : Symbol(TypeScriptCompiler)
 
         recreate();
 >recreate : Symbol(recreate, Decl(parserharness.ts, 1218, 9))
@@= skipped -49, +49 lines =@@
 >Type : Symbol(Type, Decl(parserharness.ts, 800, 9))
 
             constructor(public type, public code, public identifier) { }
->type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
->code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
->identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>type : Symbol(type, Decl(parserharness.ts, 804, 24))
+>code : Symbol(code, Decl(parserharness.ts, 804, 36))
+>identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 
             public normalizeToArray(arg: any) {
->normalizeToArray : Symbol(Type.normalizeToArray, Decl(parserharness.ts, 804, 72))
+>normalizeToArray : Symbol(normalizeToArray, Decl(parserharness.ts, 804, 72))
 >arg : Symbol(arg, Decl(parserharness.ts, 806, 36))
 
                 if ((Array.isArray && Array.isArray(arg)) || arg instanceof Array)
->Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
+>Array.isArray : Symbol(isArray, Decl(lib.es5.d.ts, --, --))
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
->Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
+>isArray : Symbol(isArray, Decl(lib.es5.d.ts, --, --))
+>Array.isArray : Symbol(isArray, Decl(lib.es5.d.ts, --, --))
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
+>isArray : Symbol(isArray, Decl(lib.es5.d.ts, --, --))
 >arg : Symbol(arg, Decl(parserharness.ts, 806, 36))
 >arg : Symbol(arg, Decl(parserharness.ts, 806, 36))
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
@@= skipped -27, +27 lines =@@
             }
 
             public compilesOk(testCode): boolean {
->compilesOk : Symbol(Type.compilesOk, Decl(parserharness.ts, 811, 13))
+>compilesOk : Symbol(compilesOk, Decl(parserharness.ts, 811, 13))
 >testCode : Symbol(testCode, Decl(parserharness.ts, 813, 30))
 
                 var errors = null;
@@= skipped -13, +13 lines =@@
 
                     errors = compilerResult.errors;
 >errors : Symbol(errors, Decl(parserharness.ts, 814, 19))
->compilerResult.errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>compilerResult.errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >compilerResult : Symbol(compilerResult, Decl(parserharness.ts, 815, 61))
->errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 
                 })
 
@@= skipped -11, +11 lines =@@
             }
 
             public isSubtypeOf(other: Type) {
->isSubtypeOf : Symbol(Type.isSubtypeOf, Decl(parserharness.ts, 820, 13))
+>isSubtypeOf : Symbol(isSubtypeOf, Decl(parserharness.ts, 820, 13))
 >other : Symbol(other, Decl(parserharness.ts, 822, 31))
 >Type : Symbol(Type, Decl(parserharness.ts, 800, 9))
 
@@= skipped -12, +12 lines =@@
 
                 testCode += '        ' + other.code + ';\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 823, 19))
->other.code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>other.code : Symbol(code, Decl(parserharness.ts, 804, 36))
 >other : Symbol(other, Decl(parserharness.ts, 822, 31))
->code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>code : Symbol(code, Decl(parserharness.ts, 804, 36))
 
                 testCode += '        return ' + other.identifier + ';\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 823, 19))
->other.identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>other.identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 >other : Symbol(other, Decl(parserharness.ts, 822, 31))
->identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 
                 testCode += '    }\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 823, 19))
@@= skipped -24, +24 lines =@@
 
                 testCode += '        ' + this.code + ';\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 823, 19))
->this.code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>this.code : Symbol(code, Decl(parserharness.ts, 804, 36))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>code : Symbol(code, Decl(parserharness.ts, 804, 36))
 
                 testCode += '        return ' + other.identifier + ';\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 823, 19))
->other.identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>other.identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 >other : Symbol(other, Decl(parserharness.ts, 822, 31))
->identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 
                 testCode += '    }\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 823, 19))
@@= skipped -17, +17 lines =@@
 >testCode : Symbol(testCode, Decl(parserharness.ts, 823, 19))
 
                 return this.compilesOk(testCode);
->this.compilesOk : Symbol(Type.compilesOk, Decl(parserharness.ts, 811, 13))
+>this.compilesOk : Symbol(compilesOk, Decl(parserharness.ts, 811, 13))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->compilesOk : Symbol(Type.compilesOk, Decl(parserharness.ts, 811, 13))
+>compilesOk : Symbol(compilesOk, Decl(parserharness.ts, 811, 13))
 >testCode : Symbol(testCode, Decl(parserharness.ts, 823, 19))
             }
 
@@= skipped -26, +26 lines =@@
             //}
 
             public assertSubtypeOf(others: any) {
->assertSubtypeOf : Symbol(Type.assertSubtypeOf, Decl(parserharness.ts, 837, 13))
+>assertSubtypeOf : Symbol(assertSubtypeOf, Decl(parserharness.ts, 837, 13))
 >others : Symbol(others, Decl(parserharness.ts, 858, 35))
 
                 others = this.normalizeToArray(others);
 >others : Symbol(others, Decl(parserharness.ts, 858, 35))
->this.normalizeToArray : Symbol(Type.normalizeToArray, Decl(parserharness.ts, 804, 72))
+>this.normalizeToArray : Symbol(normalizeToArray, Decl(parserharness.ts, 804, 72))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->normalizeToArray : Symbol(Type.normalizeToArray, Decl(parserharness.ts, 804, 72))
+>normalizeToArray : Symbol(normalizeToArray, Decl(parserharness.ts, 804, 72))
 >others : Symbol(others, Decl(parserharness.ts, 858, 35))
 
                 for (var i = 0; i < others.length; i++) {
@@= skipped -17, +17 lines =@@
 >i : Symbol(i, Decl(parserharness.ts, 861, 24))
 
                     if (!this.isSubtypeOf(others[i])) {
->this.isSubtypeOf : Symbol(Type.isSubtypeOf, Decl(parserharness.ts, 820, 13))
+>this.isSubtypeOf : Symbol(isSubtypeOf, Decl(parserharness.ts, 820, 13))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->isSubtypeOf : Symbol(Type.isSubtypeOf, Decl(parserharness.ts, 820, 13))
+>isSubtypeOf : Symbol(isSubtypeOf, Decl(parserharness.ts, 820, 13))
 >others : Symbol(others, Decl(parserharness.ts, 858, 35))
 >i : Symbol(i, Decl(parserharness.ts, 861, 24))
 
                         throw new Error("Expected " + this.type + " to be a subtype of " + others[i].type);
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->this.type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>this.type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >others : Symbol(others, Decl(parserharness.ts, 858, 35))
 >i : Symbol(i, Decl(parserharness.ts, 861, 24))
                     }
@@= skipped -18, +18 lines =@@
             }
 
             public assertNotSubtypeOf(others: any) {
->assertNotSubtypeOf : Symbol(Type.assertNotSubtypeOf, Decl(parserharness.ts, 866, 13))
+>assertNotSubtypeOf : Symbol(assertNotSubtypeOf, Decl(parserharness.ts, 866, 13))
 >others : Symbol(others, Decl(parserharness.ts, 868, 38))
 
                 others = this.normalizeToArray(others);
 >others : Symbol(others, Decl(parserharness.ts, 868, 38))
->this.normalizeToArray : Symbol(Type.normalizeToArray, Decl(parserharness.ts, 804, 72))
+>this.normalizeToArray : Symbol(normalizeToArray, Decl(parserharness.ts, 804, 72))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->normalizeToArray : Symbol(Type.normalizeToArray, Decl(parserharness.ts, 804, 72))
+>normalizeToArray : Symbol(normalizeToArray, Decl(parserharness.ts, 804, 72))
 >others : Symbol(others, Decl(parserharness.ts, 868, 38))
 
                 for (var i = 0; i < others.length; i++) {
@@= skipped -17, +17 lines =@@
 >i : Symbol(i, Decl(parserharness.ts, 871, 24))
 
                     if (this.isSubtypeOf(others[i])) {
->this.isSubtypeOf : Symbol(Type.isSubtypeOf, Decl(parserharness.ts, 820, 13))
+>this.isSubtypeOf : Symbol(isSubtypeOf, Decl(parserharness.ts, 820, 13))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->isSubtypeOf : Symbol(Type.isSubtypeOf, Decl(parserharness.ts, 820, 13))
+>isSubtypeOf : Symbol(isSubtypeOf, Decl(parserharness.ts, 820, 13))
 >others : Symbol(others, Decl(parserharness.ts, 868, 38))
 >i : Symbol(i, Decl(parserharness.ts, 871, 24))
 
                         throw new Error("Expected " + this.type + " to be a subtype of " + others[i].type);
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->this.type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>this.type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >others : Symbol(others, Decl(parserharness.ts, 868, 38))
 >i : Symbol(i, Decl(parserharness.ts, 871, 24))
                     }
@@= skipped -30, +30 lines =@@
             //}
 
             public isAssignmentCompatibleWith(other: Type) {
->isAssignmentCompatibleWith : Symbol(Type.isAssignmentCompatibleWith, Decl(parserharness.ts, 876, 13))
+>isAssignmentCompatibleWith : Symbol(isAssignmentCompatibleWith, Decl(parserharness.ts, 876, 13))
 >other : Symbol(other, Decl(parserharness.ts, 890, 46))
 >Type : Symbol(Type, Decl(parserharness.ts, 800, 9))
 
@@= skipped -9, +9 lines =@@
 
                 testCode += '    ' + this.code + ';\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 891, 19))
->this.code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>this.code : Symbol(code, Decl(parserharness.ts, 804, 36))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>code : Symbol(code, Decl(parserharness.ts, 804, 36))
 
                 testCode += '    export var __val__ = ' + this.identifier + ';\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 891, 19))
->this.identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>this.identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 
                 testCode += '}\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 891, 19))
@@= skipped -21, +21 lines =@@
 
                 testCode += '    export ' + other.code + ';\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 891, 19))
->other.code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>other.code : Symbol(code, Decl(parserharness.ts, 804, 36))
 >other : Symbol(other, Decl(parserharness.ts, 890, 46))
->code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>code : Symbol(code, Decl(parserharness.ts, 804, 36))
 
                 testCode += '    export var __val__ = ' + other.identifier + ';\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 891, 19))
->other.identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>other.identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 >other : Symbol(other, Decl(parserharness.ts, 890, 46))
->identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 
                 testCode += '}\n';
 >testCode : Symbol(testCode, Decl(parserharness.ts, 891, 19))
@@= skipped -20, +20 lines =@@
 >testCode : Symbol(testCode, Decl(parserharness.ts, 891, 19))
 
                 return this.compilesOk(testCode);
->this.compilesOk : Symbol(Type.compilesOk, Decl(parserharness.ts, 811, 13))
+>this.compilesOk : Symbol(compilesOk, Decl(parserharness.ts, 811, 13))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->compilesOk : Symbol(Type.compilesOk, Decl(parserharness.ts, 811, 13))
+>compilesOk : Symbol(compilesOk, Decl(parserharness.ts, 811, 13))
 >testCode : Symbol(testCode, Decl(parserharness.ts, 891, 19))
             }
 
             public assertAssignmentCompatibleWith(others: any) {
->assertAssignmentCompatibleWith : Symbol(Type.assertAssignmentCompatibleWith, Decl(parserharness.ts, 906, 13))
+>assertAssignmentCompatibleWith : Symbol(assertAssignmentCompatibleWith, Decl(parserharness.ts, 906, 13))
 >others : Symbol(others, Decl(parserharness.ts, 908, 50))
 
                 others = this.normalizeToArray(others);
 >others : Symbol(others, Decl(parserharness.ts, 908, 50))
->this.normalizeToArray : Symbol(Type.normalizeToArray, Decl(parserharness.ts, 804, 72))
+>this.normalizeToArray : Symbol(normalizeToArray, Decl(parserharness.ts, 804, 72))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->normalizeToArray : Symbol(Type.normalizeToArray, Decl(parserharness.ts, 804, 72))
+>normalizeToArray : Symbol(normalizeToArray, Decl(parserharness.ts, 804, 72))
 >others : Symbol(others, Decl(parserharness.ts, 908, 50))
 
                 for (var i = 0; i < others.length; i++) {
@@= skipped -29, +29 lines =@@
 >i : Symbol(i, Decl(parserharness.ts, 911, 24))
 
                     if (!this.isAssignmentCompatibleWith(other)) {
->this.isAssignmentCompatibleWith : Symbol(Type.isAssignmentCompatibleWith, Decl(parserharness.ts, 876, 13))
+>this.isAssignmentCompatibleWith : Symbol(isAssignmentCompatibleWith, Decl(parserharness.ts, 876, 13))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->isAssignmentCompatibleWith : Symbol(Type.isAssignmentCompatibleWith, Decl(parserharness.ts, 876, 13))
+>isAssignmentCompatibleWith : Symbol(isAssignmentCompatibleWith, Decl(parserharness.ts, 876, 13))
 >other : Symbol(other, Decl(parserharness.ts, 912, 23))
 
                         throw new Error("Expected " + this.type + " to be assignment compatible with " + other.type);
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->this.type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>this.type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >other : Symbol(other, Decl(parserharness.ts, 912, 23))
                     }
                 }
             }
 
             public assertNotAssignmentCompatibleWith(others: any) {
->assertNotAssignmentCompatibleWith : Symbol(Type.assertNotAssignmentCompatibleWith, Decl(parserharness.ts, 918, 13))
+>assertNotAssignmentCompatibleWith : Symbol(assertNotAssignmentCompatibleWith, Decl(parserharness.ts, 918, 13))
 >others : Symbol(others, Decl(parserharness.ts, 920, 53))
 
                 others = this.normalizeToArray(others);
 >others : Symbol(others, Decl(parserharness.ts, 920, 53))
->this.normalizeToArray : Symbol(Type.normalizeToArray, Decl(parserharness.ts, 804, 72))
+>this.normalizeToArray : Symbol(normalizeToArray, Decl(parserharness.ts, 804, 72))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->normalizeToArray : Symbol(Type.normalizeToArray, Decl(parserharness.ts, 804, 72))
+>normalizeToArray : Symbol(normalizeToArray, Decl(parserharness.ts, 804, 72))
 >others : Symbol(others, Decl(parserharness.ts, 920, 53))
 
                 for (var i = 0; i < others.length; i++) {
@@= skipped -38, +38 lines =@@
 >i : Symbol(i, Decl(parserharness.ts, 923, 24))
 
                     if (this.isAssignmentCompatibleWith(other)) {
->this.isAssignmentCompatibleWith : Symbol(Type.isAssignmentCompatibleWith, Decl(parserharness.ts, 876, 13))
+>this.isAssignmentCompatibleWith : Symbol(isAssignmentCompatibleWith, Decl(parserharness.ts, 876, 13))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->isAssignmentCompatibleWith : Symbol(Type.isAssignmentCompatibleWith, Decl(parserharness.ts, 876, 13))
+>isAssignmentCompatibleWith : Symbol(isAssignmentCompatibleWith, Decl(parserharness.ts, 876, 13))
 >other : Symbol(other, Decl(parserharness.ts, 924, 23))
 
                         throw new Error("Expected " + this.type + " to not be assignment compatible with " + other.type);
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->this.type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>this.type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >other : Symbol(other, Decl(parserharness.ts, 924, 23))
                     }
                 }
             }
 
             public assertThisCanBeAssignedTo(desc: string, these: any[], notThese: any[]) {
->assertThisCanBeAssignedTo : Symbol(Type.assertThisCanBeAssignedTo, Decl(parserharness.ts, 930, 13))
+>assertThisCanBeAssignedTo : Symbol(assertThisCanBeAssignedTo, Decl(parserharness.ts, 930, 13))
 >desc : Symbol(desc, Decl(parserharness.ts, 932, 45))
 >these : Symbol(these, Decl(parserharness.ts, 932, 58))
 >notThese : Symbol(notThese, Decl(parserharness.ts, 932, 72))
@@= skipped -26, +26 lines =@@
 >desc : Symbol(desc, Decl(parserharness.ts, 932, 45))
 
                     this.assertAssignmentCompatibleWith(these);
->this.assertAssignmentCompatibleWith : Symbol(Type.assertAssignmentCompatibleWith, Decl(parserharness.ts, 906, 13))
+>this.assertAssignmentCompatibleWith : Symbol(assertAssignmentCompatibleWith, Decl(parserharness.ts, 906, 13))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->assertAssignmentCompatibleWith : Symbol(Type.assertAssignmentCompatibleWith, Decl(parserharness.ts, 906, 13))
+>assertAssignmentCompatibleWith : Symbol(assertAssignmentCompatibleWith, Decl(parserharness.ts, 906, 13))
 >these : Symbol(these, Decl(parserharness.ts, 932, 58))
 
                 });
@@= skipped -12, +12 lines =@@
 >desc : Symbol(desc, Decl(parserharness.ts, 932, 45))
 
                     this.assertNotAssignmentCompatibleWith(notThese);
->this.assertNotAssignmentCompatibleWith : Symbol(Type.assertNotAssignmentCompatibleWith, Decl(parserharness.ts, 918, 13))
+>this.assertNotAssignmentCompatibleWith : Symbol(assertNotAssignmentCompatibleWith, Decl(parserharness.ts, 918, 13))
 >this : Symbol(Type, Decl(parserharness.ts, 800, 9))
->assertNotAssignmentCompatibleWith : Symbol(Type.assertNotAssignmentCompatibleWith, Decl(parserharness.ts, 918, 13))
+>assertNotAssignmentCompatibleWith : Symbol(assertNotAssignmentCompatibleWith, Decl(parserharness.ts, 918, 13))
 >notThese : Symbol(notThese, Decl(parserharness.ts, 932, 72))
 
                 });
@@= skipped -14, +14 lines =@@
 >TypeFactory : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
 
             public any: Type;
->any : Symbol(TypeFactory.any, Decl(parserharness.ts, 944, 34))
+>any : Symbol(any, Decl(parserharness.ts, 944, 34))
 >Type : Symbol(Type, Decl(parserharness.ts, 800, 9))
 
             public number: Type;
->number : Symbol(TypeFactory.number, Decl(parserharness.ts, 945, 29))
+>number : Symbol(number, Decl(parserharness.ts, 945, 29))
 >Type : Symbol(Type, Decl(parserharness.ts, 800, 9))
 
             public string: Type;
->string : Symbol(TypeFactory.string, Decl(parserharness.ts, 946, 32))
+>string : Symbol(string, Decl(parserharness.ts, 946, 32))
 >Type : Symbol(Type, Decl(parserharness.ts, 800, 9))
 
             public boolean: Type;
->boolean : Symbol(TypeFactory.boolean, Decl(parserharness.ts, 947, 32))
+>boolean : Symbol(boolean, Decl(parserharness.ts, 947, 32))
 >Type : Symbol(Type, Decl(parserharness.ts, 800, 9))
 
             constructor() {
                 this.any = this.get('var x : any', 'x');
->this.any : Symbol(TypeFactory.any, Decl(parserharness.ts, 944, 34))
+>this.any : Symbol(any, Decl(parserharness.ts, 944, 34))
 >this : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
->any : Symbol(TypeFactory.any, Decl(parserharness.ts, 944, 34))
->this.get : Symbol(TypeFactory.get, Decl(parserharness.ts, 955, 13))
+>any : Symbol(any, Decl(parserharness.ts, 944, 34))
+>this.get : Symbol(get, Decl(parserharness.ts, 955, 13))
 >this : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
->get : Symbol(TypeFactory.get, Decl(parserharness.ts, 955, 13))
+>get : Symbol(get, Decl(parserharness.ts, 955, 13))
 
                 this.number = this.get('var x : number', 'x');
->this.number : Symbol(TypeFactory.number, Decl(parserharness.ts, 945, 29))
+>this.number : Symbol(number, Decl(parserharness.ts, 945, 29))
 >this : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
->number : Symbol(TypeFactory.number, Decl(parserharness.ts, 945, 29))
->this.get : Symbol(TypeFactory.get, Decl(parserharness.ts, 955, 13))
+>number : Symbol(number, Decl(parserharness.ts, 945, 29))
+>this.get : Symbol(get, Decl(parserharness.ts, 955, 13))
 >this : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
->get : Symbol(TypeFactory.get, Decl(parserharness.ts, 955, 13))
+>get : Symbol(get, Decl(parserharness.ts, 955, 13))
 
                 this.string = this.get('var x : string', 'x');
->this.string : Symbol(TypeFactory.string, Decl(parserharness.ts, 946, 32))
+>this.string : Symbol(string, Decl(parserharness.ts, 946, 32))
 >this : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
->string : Symbol(TypeFactory.string, Decl(parserharness.ts, 946, 32))
->this.get : Symbol(TypeFactory.get, Decl(parserharness.ts, 955, 13))
+>string : Symbol(string, Decl(parserharness.ts, 946, 32))
+>this.get : Symbol(get, Decl(parserharness.ts, 955, 13))
 >this : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
->get : Symbol(TypeFactory.get, Decl(parserharness.ts, 955, 13))
+>get : Symbol(get, Decl(parserharness.ts, 955, 13))
 
                 this.boolean = this.get('var x : boolean', 'x');
->this.boolean : Symbol(TypeFactory.boolean, Decl(parserharness.ts, 947, 32))
+>this.boolean : Symbol(boolean, Decl(parserharness.ts, 947, 32))
 >this : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
->boolean : Symbol(TypeFactory.boolean, Decl(parserharness.ts, 947, 32))
->this.get : Symbol(TypeFactory.get, Decl(parserharness.ts, 955, 13))
+>boolean : Symbol(boolean, Decl(parserharness.ts, 947, 32))
+>this.get : Symbol(get, Decl(parserharness.ts, 955, 13))
 >this : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
->get : Symbol(TypeFactory.get, Decl(parserharness.ts, 955, 13))
+>get : Symbol(get, Decl(parserharness.ts, 955, 13))
             }
 
             public get (code: string, target: any) {
->get : Symbol(TypeFactory.get, Decl(parserharness.ts, 955, 13))
+>get : Symbol(get, Decl(parserharness.ts, 955, 13))
 >code : Symbol(code, Decl(parserharness.ts, 957, 24))
 >target : Symbol(target, Decl(parserharness.ts, 957, 37))
 
@@= skipped -90, +90 lines =@@
 
                     errors = compilerResult.errors;
 >errors : Symbol(errors, Decl(parserharness.ts, 970, 19))
->compilerResult.errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>compilerResult.errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >compilerResult : Symbol(compilerResult, Decl(parserharness.ts, 971, 57))
->errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 
                 })
 
@@= skipped -37, +37 lines =@@
                         var enclosingScopeContext = TypeScript.findEnclosingScopeAt(new TypeScript.NullLogger(), <TypeScript.Script>script, new TypeScript.StringSourceText(code), 0, false);
 >enclosingScopeContext : Symbol(enclosingScopeContext, Decl(parserharness.ts, 986, 27))
 >TypeScript : Symbol(TypeScript)
->Script : Symbol(TypeScript.Script)
+>Script : Symbol(Script)
 >script : Symbol(script, Decl(parserharness.ts, 985, 27))
 >code : Symbol(code, Decl(parserharness.ts, 957, 24))
 
@@= skipped -21, +21 lines =@@
 >targetIdentifier : Symbol(targetIdentifier, Decl(parserharness.ts, 958, 19))
 
                                 matchingIdentifiers.push(new Type(entries[i].type, code, targetIdentifier));
->matchingIdentifiers.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>matchingIdentifiers.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >matchingIdentifiers : Symbol(matchingIdentifiers, Decl(parserharness.ts, 978, 19))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >Type : Symbol(Type, Decl(parserharness.ts, 800, 9))
 >entries : Symbol(entries, Decl(parserharness.ts, 987, 27))
 >i : Symbol(i, Decl(parserharness.ts, 989, 32))
@@= skipped -22, +22 lines =@@
                         var script2 = <TypeScript.Script>compiler.scripts.members[m];
 >script2 : Symbol(script2, Decl(parserharness.ts, 998, 27))
 >TypeScript : Symbol(TypeScript)
->Script : Symbol(TypeScript.Script)
+>Script : Symbol(Script)
 >compiler : Symbol(compiler, Decl(parserharness.ts, 780, 11))
 >m : Symbol(m, Decl(parserharness.ts, 984, 28), Decl(parserharness.ts, 997, 28))
 
@@= skipped -18, +18 lines =@@
 
                                 var name = this.getTypeInfoName(tyInfo.ast);
 >name : Symbol(name, Decl(parserharness.ts, 1002, 35), Decl(parserharness.ts, 1011, 39))
->this.getTypeInfoName : Symbol(TypeFactory.getTypeInfoName, Decl(parserharness.ts, 1038, 13))
+>this.getTypeInfoName : Symbol(getTypeInfoName, Decl(parserharness.ts, 1038, 13))
 >this : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
->getTypeInfoName : Symbol(TypeFactory.getTypeInfoName, Decl(parserharness.ts, 1038, 13))
+>getTypeInfoName : Symbol(getTypeInfoName, Decl(parserharness.ts, 1038, 13))
 >tyInfo : Symbol(tyInfo, Decl(parserharness.ts, 1001, 35), Decl(parserharness.ts, 1010, 39))
 
                                 var foundValue = new Type(tyInfo.typeInfo, code, name);
@@= skipped -13, +13 lines =@@
 >name : Symbol(name, Decl(parserharness.ts, 1002, 35), Decl(parserharness.ts, 1011, 39))
 
                                 if (!matchingIdentifiers.some(value => (value.identifier === foundValue.identifier) && (value.code === foundValue.code) && (value.type === foundValue.type))) {
->matchingIdentifiers.some : Symbol(Array.some, Decl(lib.es5.d.ts, --, --))
+>matchingIdentifiers.some : Symbol(some, Decl(lib.es5.d.ts, --, --))
 >matchingIdentifiers : Symbol(matchingIdentifiers, Decl(parserharness.ts, 978, 19))
->some : Symbol(Array.some, Decl(lib.es5.d.ts, --, --))
+>some : Symbol(some, Decl(lib.es5.d.ts, --, --))
 >value : Symbol(value, Decl(parserharness.ts, 1004, 62))
->value.identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>value.identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 >value : Symbol(value, Decl(parserharness.ts, 1004, 62))
->identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
->foundValue.identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
+>foundValue.identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 >foundValue : Symbol(foundValue, Decl(parserharness.ts, 1003, 35), Decl(parserharness.ts, 1013, 43))
->identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
->value.code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
+>value.code : Symbol(code, Decl(parserharness.ts, 804, 36))
 >value : Symbol(value, Decl(parserharness.ts, 1004, 62))
->code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
->foundValue.code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>code : Symbol(code, Decl(parserharness.ts, 804, 36))
+>foundValue.code : Symbol(code, Decl(parserharness.ts, 804, 36))
 >foundValue : Symbol(foundValue, Decl(parserharness.ts, 1003, 35), Decl(parserharness.ts, 1013, 43))
->code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
->value.type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>code : Symbol(code, Decl(parserharness.ts, 804, 36))
+>value.type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >value : Symbol(value, Decl(parserharness.ts, 1004, 62))
->type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
->foundValue.type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>type : Symbol(type, Decl(parserharness.ts, 804, 24))
+>foundValue.type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >foundValue : Symbol(foundValue, Decl(parserharness.ts, 1003, 35), Decl(parserharness.ts, 1013, 43))
->type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>type : Symbol(type, Decl(parserharness.ts, 804, 24))
 
                                     matchingIdentifiers.push(foundValue);
->matchingIdentifiers.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>matchingIdentifiers.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >matchingIdentifiers : Symbol(matchingIdentifiers, Decl(parserharness.ts, 978, 19))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >foundValue : Symbol(foundValue, Decl(parserharness.ts, 1003, 35), Decl(parserharness.ts, 1013, 43))
                                 }
                             }
@@= skipped -34, +34 lines =@@
                                 for (var pos = 0; pos < code.length; pos++) {
 >pos : Symbol(pos, Decl(parserharness.ts, 1009, 40))
 >pos : Symbol(pos, Decl(parserharness.ts, 1009, 40))
->code.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>code.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >code : Symbol(code, Decl(parserharness.ts, 957, 24))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >pos : Symbol(pos, Decl(parserharness.ts, 1009, 40))
 
                                     var tyInfo = compiler.pullGetTypeInfoAtPosition(pos, script2);
@@= skipped -13, +13 lines =@@
 
                                     var name = this.getTypeInfoName(tyInfo.ast);
 >name : Symbol(name, Decl(parserharness.ts, 1002, 35), Decl(parserharness.ts, 1011, 39))
->this.getTypeInfoName : Symbol(TypeFactory.getTypeInfoName, Decl(parserharness.ts, 1038, 13))
+>this.getTypeInfoName : Symbol(getTypeInfoName, Decl(parserharness.ts, 1038, 13))
 >this : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
->getTypeInfoName : Symbol(TypeFactory.getTypeInfoName, Decl(parserharness.ts, 1038, 13))
+>getTypeInfoName : Symbol(getTypeInfoName, Decl(parserharness.ts, 1038, 13))
 >tyInfo : Symbol(tyInfo, Decl(parserharness.ts, 1001, 35), Decl(parserharness.ts, 1010, 39))
 
                                     if (name === targetIdentifier) {
@@= skipped -17, +17 lines =@@
 >targetIdentifier : Symbol(targetIdentifier, Decl(parserharness.ts, 958, 19))
 
                                         if (!matchingIdentifiers.some(value => (value.identifier === foundValue.identifier) && (value.code === foundValue.code) && (value.type === foundValue.type))) {
->matchingIdentifiers.some : Symbol(Array.some, Decl(lib.es5.d.ts, --, --))
+>matchingIdentifiers.some : Symbol(some, Decl(lib.es5.d.ts, --, --))
 >matchingIdentifiers : Symbol(matchingIdentifiers, Decl(parserharness.ts, 978, 19))
->some : Symbol(Array.some, Decl(lib.es5.d.ts, --, --))
+>some : Symbol(some, Decl(lib.es5.d.ts, --, --))
 >value : Symbol(value, Decl(parserharness.ts, 1014, 70))
->value.identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>value.identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 >value : Symbol(value, Decl(parserharness.ts, 1014, 70))
->identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
->foundValue.identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
+>identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
+>foundValue.identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
 >foundValue : Symbol(foundValue, Decl(parserharness.ts, 1003, 35), Decl(parserharness.ts, 1013, 43))
->identifier : Symbol(Type.identifier, Decl(parserharness.ts, 804, 49))
->value.code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>identifier : Symbol(identifier, Decl(parserharness.ts, 804, 49))
+>value.code : Symbol(code, Decl(parserharness.ts, 804, 36))
 >value : Symbol(value, Decl(parserharness.ts, 1014, 70))
->code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
->foundValue.code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
+>code : Symbol(code, Decl(parserharness.ts, 804, 36))
+>foundValue.code : Symbol(code, Decl(parserharness.ts, 804, 36))
 >foundValue : Symbol(foundValue, Decl(parserharness.ts, 1003, 35), Decl(parserharness.ts, 1013, 43))
->code : Symbol(Type.code, Decl(parserharness.ts, 804, 36))
->value.type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>code : Symbol(code, Decl(parserharness.ts, 804, 36))
+>value.type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >value : Symbol(value, Decl(parserharness.ts, 1014, 70))
->type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
->foundValue.type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>type : Symbol(type, Decl(parserharness.ts, 804, 24))
+>foundValue.type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >foundValue : Symbol(foundValue, Decl(parserharness.ts, 1003, 35), Decl(parserharness.ts, 1013, 43))
->type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>type : Symbol(type, Decl(parserharness.ts, 804, 24))
 
                                             matchingIdentifiers.push(foundValue);
->matchingIdentifiers.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>matchingIdentifiers.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >matchingIdentifiers : Symbol(matchingIdentifiers, Decl(parserharness.ts, 978, 19))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >foundValue : Symbol(foundValue, Decl(parserharness.ts, 1003, 35), Decl(parserharness.ts, 1013, 43))
                                         }
                                     }
@@= skipped -37, +37 lines =@@
                 }
 
                 if (matchingIdentifiers.length === 0) {
->matchingIdentifiers.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>matchingIdentifiers.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >matchingIdentifiers : Symbol(matchingIdentifiers, Decl(parserharness.ts, 978, 19))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
                     if (targetPosition > -1) {
 >targetPosition : Symbol(targetPosition, Decl(parserharness.ts, 959, 19))
@@= skipped -18, +18 lines =@@
                     }
                 }
                 else if (matchingIdentifiers.length > 1) {
->matchingIdentifiers.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>matchingIdentifiers.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >matchingIdentifiers : Symbol(matchingIdentifiers, Decl(parserharness.ts, 978, 19))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
                     throw new Error("Found multiple matching identifiers for " + target);
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
@@= skipped -15, +15 lines =@@
             }
 
             private getTypeInfoName(ast : TypeScript.AST) {
->getTypeInfoName : Symbol(TypeFactory.getTypeInfoName, Decl(parserharness.ts, 1038, 13))
+>getTypeInfoName : Symbol(getTypeInfoName, Decl(parserharness.ts, 1038, 13))
 >ast : Symbol(ast, Decl(parserharness.ts, 1040, 36))
 >TypeScript : Symbol(TypeScript)
->AST : Symbol(TypeScript.AST)
+>AST : Symbol(AST)
 
                 var name = '';
 >name : Symbol(name, Decl(parserharness.ts, 1041, 19))
@@= skipped -32, +32 lines =@@
                         name = (<TypeScript.RegexLiteral>ast).text;
 >name : Symbol(name, Decl(parserharness.ts, 1041, 19))
 >TypeScript : Symbol(TypeScript)
->RegexLiteral : Symbol(TypeScript.RegexLiteral)
+>RegexLiteral : Symbol(RegexLiteral)
 >ast : Symbol(ast, Decl(parserharness.ts, 1040, 36))
 
                         break;
@@= skipped -14, +14 lines =@@
                         name = (<TypeScript.NumberLiteral>ast).text;
 >name : Symbol(name, Decl(parserharness.ts, 1041, 19))
 >TypeScript : Symbol(TypeScript)
->NumberLiteral : Symbol(TypeScript.NumberLiteral)
+>NumberLiteral : Symbol(NumberLiteral)
 >ast : Symbol(ast, Decl(parserharness.ts, 1040, 36))
 
                         break;
@@= skipped -11, +11 lines =@@
                         name = (<TypeScript.InterfaceDeclaration>ast).name.actualText;
 >name : Symbol(name, Decl(parserharness.ts, 1041, 19))
 >TypeScript : Symbol(TypeScript)
->InterfaceDeclaration : Symbol(TypeScript.InterfaceDeclaration)
+>InterfaceDeclaration : Symbol(InterfaceDeclaration)
 >ast : Symbol(ast, Decl(parserharness.ts, 1040, 36))
 
                         break;
@@= skipped -8, +8 lines =@@
                         name = (<TypeScript.ModuleDeclaration>ast).name.actualText;
 >name : Symbol(name, Decl(parserharness.ts, 1041, 19))
 >TypeScript : Symbol(TypeScript)
->ModuleDeclaration : Symbol(TypeScript.ModuleDeclaration)
+>ModuleDeclaration : Symbol(ModuleDeclaration)
 >ast : Symbol(ast, Decl(parserharness.ts, 1040, 36))
 
                         break;
@@= skipped -8, +8 lines =@@
                         name = (<TypeScript.ClassDeclaration>ast).name.actualText;
 >name : Symbol(name, Decl(parserharness.ts, 1041, 19))
 >TypeScript : Symbol(TypeScript)
->ClassDeclaration : Symbol(TypeScript.ClassDeclaration)
+>ClassDeclaration : Symbol(ClassDeclaration)
 >ast : Symbol(ast, Decl(parserharness.ts, 1040, 36))
 
                         break;
@@= skipped -8, +8 lines =@@
                         name = !(<TypeScript.FuncDecl>ast).name ? "" : (<TypeScript.FuncDecl>ast).name.actualText; // name == null for lambdas
 >name : Symbol(name, Decl(parserharness.ts, 1041, 19))
 >TypeScript : Symbol(TypeScript)
->FuncDecl : Symbol(TypeScript.FuncDecl)
+>FuncDecl : Symbol(FuncDecl)
 >ast : Symbol(ast, Decl(parserharness.ts, 1040, 36))
 >TypeScript : Symbol(TypeScript)
->FuncDecl : Symbol(TypeScript.FuncDecl)
+>FuncDecl : Symbol(FuncDecl)
 >ast : Symbol(ast, Decl(parserharness.ts, 1040, 36))
 
                         break;
@@= skipped -30, +30 lines =@@
             }
 
             public isOfType(expr: string, expectedType: string) {
->isOfType : Symbol(TypeFactory.isOfType, Decl(parserharness.ts, 1089, 13))
+>isOfType : Symbol(isOfType, Decl(parserharness.ts, 1089, 13))
 >expr : Symbol(expr, Decl(parserharness.ts, 1091, 28))
 >expectedType : Symbol(expectedType, Decl(parserharness.ts, 1091, 41))
 
                 var actualType = this.get('var _v_a_r_ = ' + expr, '_v_a_r_');
 >actualType : Symbol(actualType, Decl(parserharness.ts, 1092, 19))
->this.get : Symbol(TypeFactory.get, Decl(parserharness.ts, 955, 13))
+>this.get : Symbol(get, Decl(parserharness.ts, 955, 13))
 >this : Symbol(TypeFactory, Decl(parserharness.ts, 942, 9))
->get : Symbol(TypeFactory.get, Decl(parserharness.ts, 955, 13))
+>get : Symbol(get, Decl(parserharness.ts, 955, 13))
 >expr : Symbol(expr, Decl(parserharness.ts, 1091, 28))
 
                 it('Expression "' + expr + '" is of type "' + expectedType + '"', function () {
@@= skipped -18, +18 lines =@@
 
                     assert.equal(actualType.type, expectedType);
 >assert : Symbol(assert, Decl(parserharness.ts, 20, 11))
->actualType.type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>actualType.type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >actualType : Symbol(actualType, Decl(parserharness.ts, 1092, 19))
->type : Symbol(Type.type, Decl(parserharness.ts, 804, 24))
+>type : Symbol(type, Decl(parserharness.ts, 804, 24))
 >expectedType : Symbol(expectedType, Decl(parserharness.ts, 1091, 41))
 
                 });
@@= skipped -26, +26 lines =@@
 >CompilationContext : Symbol(CompilationContext, Decl(parserharness.ts, 1245, 9))
 >references : Symbol(references, Decl(parserharness.ts, 1106, 158))
 >TypeScript : Symbol(TypeScript)
->IFileReference : Symbol(TypeScript.IFileReference)
+>IFileReference : Symbol(IFileReference)
 
             reset();
 >reset : Symbol(reset, Decl(parserharness.ts, 1229, 9))
@@= skipped -19, +19 lines =@@
             try {
                 if (compilationContext && compilationContext.preCompile) {
 >compilationContext : Symbol(compilationContext, Decl(parserharness.ts, 1106, 100))
->compilationContext.preCompile : Symbol(CompilationContext.preCompile, Decl(parserharness.ts, 1250, 29))
+>compilationContext.preCompile : Symbol(preCompile, Decl(parserharness.ts, 1250, 29))
 >compilationContext : Symbol(compilationContext, Decl(parserharness.ts, 1106, 100))
->preCompile : Symbol(CompilationContext.preCompile, Decl(parserharness.ts, 1250, 29))
+>preCompile : Symbol(preCompile, Decl(parserharness.ts, 1250, 29))
 
                     compilationContext.preCompile();
->compilationContext.preCompile : Symbol(CompilationContext.preCompile, Decl(parserharness.ts, 1250, 29))
+>compilationContext.preCompile : Symbol(preCompile, Decl(parserharness.ts, 1250, 29))
 >compilationContext : Symbol(compilationContext, Decl(parserharness.ts, 1106, 100))
->preCompile : Symbol(CompilationContext.preCompile, Decl(parserharness.ts, 1250, 29))
+>preCompile : Symbol(preCompile, Decl(parserharness.ts, 1250, 29))
                 }
 
                 addUnit(code, unitName, false, false, references);
@@= skipped -71, +71 lines =@@
 >outputs : Symbol(outputs, Decl(parserharness.ts, 1120, 19))
 
                     if (fn.indexOf('.d.ts') >= 0) {
->fn.indexOf : Symbol(String.indexOf, Decl(lib.es5.d.ts, --, --))
+>fn.indexOf : Symbol(indexOf, Decl(lib.es5.d.ts, --, --))
 >fn : Symbol(fn, Decl(parserharness.ts, 1136, 24))
->indexOf : Symbol(String.indexOf, Decl(lib.es5.d.ts, --, --))
+>indexOf : Symbol(indexOf, Decl(lib.es5.d.ts, --, --))
 
                         var writer = <Harness.Compiler.WriterAggregator>outputs[fn];
 >writer : Symbol(writer, Decl(parserharness.ts, 1138, 27))
@@= skipped -13, +13 lines =@@
 >fn : Symbol(fn, Decl(parserharness.ts, 1136, 24))
 
                         writer.Close();
->writer.Close : Symbol(WriterAggregator.Close, Decl(parserharness.ts, 701, 13))
+>writer.Close : Symbol(Close, Decl(parserharness.ts, 701, 13))
 >writer : Symbol(writer, Decl(parserharness.ts, 1138, 27))
->Close : Symbol(WriterAggregator.Close, Decl(parserharness.ts, 701, 13))
+>Close : Symbol(Close, Decl(parserharness.ts, 701, 13))
 
                         results = writer.lines.join('\n');
 >results : Symbol(results, Decl(parserharness.ts, 1135, 19))
->writer.lines.join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
->writer.lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>writer.lines.join : Symbol(join, Decl(lib.es5.d.ts, --, --))
+>writer.lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 >writer : Symbol(writer, Decl(parserharness.ts, 1138, 27))
->lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
->join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
+>join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 
                         if (verifyNoDeclFile && results != "") {
 >verifyNoDeclFile : Symbol(verifyNoDeclFile, Decl(parserharness.ts, 1106, 54))
@@= skipped -50, +50 lines =@@
 
                 if (compilationContext && compilationContext.postCompile) {
 >compilationContext : Symbol(compilationContext, Decl(parserharness.ts, 1106, 100))
->compilationContext.postCompile : Symbol(CompilationContext.postCompile, Decl(parserharness.ts, 1251, 35))
+>compilationContext.postCompile : Symbol(postCompile, Decl(parserharness.ts, 1251, 35))
 >compilationContext : Symbol(compilationContext, Decl(parserharness.ts, 1106, 100))
->postCompile : Symbol(CompilationContext.postCompile, Decl(parserharness.ts, 1251, 35))
+>postCompile : Symbol(postCompile, Decl(parserharness.ts, 1251, 35))
 
                     compilationContext.postCompile();
->compilationContext.postCompile : Symbol(CompilationContext.postCompile, Decl(parserharness.ts, 1251, 35))
+>compilationContext.postCompile : Symbol(postCompile, Decl(parserharness.ts, 1251, 35))
 >compilationContext : Symbol(compilationContext, Decl(parserharness.ts, 1106, 100))
->postCompile : Symbol(CompilationContext.postCompile, Decl(parserharness.ts, 1251, 35))
+>postCompile : Symbol(postCompile, Decl(parserharness.ts, 1251, 35))
                 }
 
                 var uName = unitName || '0.ts';
@@= skipped -27, +27 lines =@@
 >CompilerResult : Symbol(CompilerResult, Decl(parserharness.ts, 1167, 9))
 
             public code: string;
->code : Symbol(CompilerResult.code, Decl(parserharness.ts, 1170, 37))
+>code : Symbol(code, Decl(parserharness.ts, 1170, 37))
 
             public errors: CompilerError[];
->errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >CompilerError : Symbol(CompilerError, Decl(parserharness.ts, 1206, 9))
 
             /** @param fileResults an array of strings for the filename and an ITextWriter with its code */
             constructor(public fileResults: { filename: string; file: WriterAggregator; }[], errorLines: string[], public scripts: TypeScript.Script[]) {
->fileResults : Symbol(CompilerResult.fileResults, Decl(parserharness.ts, 1175, 24))
+>fileResults : Symbol(fileResults, Decl(parserharness.ts, 1175, 24))
 >filename : Symbol(filename, Decl(parserharness.ts, 1175, 45))
 >file : Symbol(file, Decl(parserharness.ts, 1175, 63))
 >WriterAggregator : Symbol(WriterAggregator, Decl(parserharness.ts, 686, 28))
 >errorLines : Symbol(errorLines, Decl(parserharness.ts, 1175, 92))
->scripts : Symbol(CompilerResult.scripts, Decl(parserharness.ts, 1175, 114))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1175, 114))
 >TypeScript : Symbol(TypeScript)
->Script : Symbol(TypeScript.Script)
+>Script : Symbol(Script)
 
                 var lines = [];
 >lines : Symbol(lines, Decl(parserharness.ts, 1176, 19))
 
                 fileResults.forEach(v => lines = lines.concat(v.file.lines));
->fileResults.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>fileResults.forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >fileResults : Symbol(fileResults, Decl(parserharness.ts, 1175, 24))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >v : Symbol(v, Decl(parserharness.ts, 1177, 36))
 >lines : Symbol(lines, Decl(parserharness.ts, 1176, 19))
->lines.concat : Symbol(Array.concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>lines.concat : Symbol(concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >lines : Symbol(lines, Decl(parserharness.ts, 1176, 19))
->concat : Symbol(Array.concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->v.file.lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>concat : Symbol(concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>v.file.lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 >v.file : Symbol(file, Decl(parserharness.ts, 1175, 63))
 >v : Symbol(v, Decl(parserharness.ts, 1177, 36))
 >file : Symbol(file, Decl(parserharness.ts, 1175, 63))
->lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 
                 this.code = lines.join("\n")
->this.code : Symbol(CompilerResult.code, Decl(parserharness.ts, 1170, 37))
+>this.code : Symbol(code, Decl(parserharness.ts, 1170, 37))
 >this : Symbol(CompilerResult, Decl(parserharness.ts, 1167, 9))
->code : Symbol(CompilerResult.code, Decl(parserharness.ts, 1170, 37))
->lines.join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>code : Symbol(code, Decl(parserharness.ts, 1170, 37))
+>lines.join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 >lines : Symbol(lines, Decl(parserharness.ts, 1176, 19))
->join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 
                 this.errors = [];
->this.errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>this.errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >this : Symbol(CompilerResult, Decl(parserharness.ts, 1167, 9))
->errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 
                 for (var i = 0; i < errorLines.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 1182, 24))
 >i : Symbol(i, Decl(parserharness.ts, 1182, 24))
->errorLines.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>errorLines.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >errorLines : Symbol(errorLines, Decl(parserharness.ts, 1175, 92))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 1182, 24))
 
                     if (Harness.usePull) {
@@= skipped -67, +67 lines =@@
 >i : Symbol(i, Decl(parserharness.ts, 1182, 24))
 
                         this.errors.push(new CompilerError(err.filename, 0, 0, err.message));
->this.errors.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->this.errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>this.errors.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>this.errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >this : Symbol(CompilerResult, Decl(parserharness.ts, 1167, 9))
->errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >CompilerError : Symbol(CompilerError, Decl(parserharness.ts, 1206, 9))
 >err : Symbol(err, Decl(parserharness.ts, 1184, 27))
 >err : Symbol(err, Decl(parserharness.ts, 1184, 27))
@@= skipped -12, +12 lines =@@
                     } else {
                         var match = errorLines[i].match(/([^\(]*)\((\d+),(\d+)\):\s+((.*[\s\r\n]*.*)+)\s*$/);
 >match : Symbol(match, Decl(parserharness.ts, 1187, 27))
->errorLines[i].match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
+>errorLines[i].match : Symbol(match, Decl(lib.es5.d.ts, --, --))
 >errorLines : Symbol(errorLines, Decl(parserharness.ts, 1175, 92))
 >i : Symbol(i, Decl(parserharness.ts, 1182, 24))
->match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
+>match : Symbol(match, Decl(lib.es5.d.ts, --, --))
 
                         if (match) {
 >match : Symbol(match, Decl(parserharness.ts, 1187, 27))
 
                             this.errors.push(new CompilerError(match[1], parseFloat(match[2]), parseFloat(match[3]), match[4]));
->this.errors.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->this.errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>this.errors.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>this.errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >this : Symbol(CompilerResult, Decl(parserharness.ts, 1167, 9))
->errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >CompilerError : Symbol(CompilerError, Decl(parserharness.ts, 1206, 9))
 >match : Symbol(match, Decl(parserharness.ts, 1187, 27))
 >parseFloat : Symbol(parseFloat, Decl(lib.es5.d.ts, --, --))
@@= skipped -32, +32 lines =@@
             }
 
             public isErrorAt(line: number, column: number, message: string) {
->isErrorAt : Symbol(CompilerResult.isErrorAt, Decl(parserharness.ts, 1196, 13))
+>isErrorAt : Symbol(isErrorAt, Decl(parserharness.ts, 1196, 13))
 >line : Symbol(line, Decl(parserharness.ts, 1198, 29))
 >column : Symbol(column, Decl(parserharness.ts, 1198, 42))
 >message : Symbol(message, Decl(parserharness.ts, 1198, 58))
@@= skipped -8, +8 lines =@@
                 for (var i = 0; i < this.errors.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 1199, 24))
 >i : Symbol(i, Decl(parserharness.ts, 1199, 24))
->this.errors.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>this.errors.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >this : Symbol(CompilerResult, Decl(parserharness.ts, 1167, 9))
->errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 1199, 24))
 
                     if (this.errors[i].line === line && this.errors[i].column === column && this.errors[i].message === message)
->this.errors[i].line : Symbol(CompilerError.line, Decl(parserharness.ts, 1210, 44))
->this.errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>this.errors[i].line : Symbol(line, Decl(parserharness.ts, 1210, 44))
+>this.errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >this : Symbol(CompilerResult, Decl(parserharness.ts, 1167, 9))
->errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >i : Symbol(i, Decl(parserharness.ts, 1199, 24))
->line : Symbol(CompilerError.line, Decl(parserharness.ts, 1210, 44))
+>line : Symbol(line, Decl(parserharness.ts, 1210, 44))
 >line : Symbol(line, Decl(parserharness.ts, 1198, 29))
->this.errors[i].column : Symbol(CompilerError.column, Decl(parserharness.ts, 1211, 40))
->this.errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>this.errors[i].column : Symbol(column, Decl(parserharness.ts, 1211, 40))
+>this.errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >this : Symbol(CompilerResult, Decl(parserharness.ts, 1167, 9))
->errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >i : Symbol(i, Decl(parserharness.ts, 1199, 24))
->column : Symbol(CompilerError.column, Decl(parserharness.ts, 1211, 40))
+>column : Symbol(column, Decl(parserharness.ts, 1211, 40))
 >column : Symbol(column, Decl(parserharness.ts, 1198, 42))
->this.errors[i].message : Symbol(CompilerError.message, Decl(parserharness.ts, 1212, 42))
->this.errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>this.errors[i].message : Symbol(message, Decl(parserharness.ts, 1212, 42))
+>this.errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >this : Symbol(CompilerResult, Decl(parserharness.ts, 1167, 9))
->errors : Symbol(CompilerResult.errors, Decl(parserharness.ts, 1171, 32))
+>errors : Symbol(errors, Decl(parserharness.ts, 1171, 32))
 >i : Symbol(i, Decl(parserharness.ts, 1199, 24))
->message : Symbol(CompilerError.message, Decl(parserharness.ts, 1212, 42))
+>message : Symbol(message, Decl(parserharness.ts, 1212, 42))
 >message : Symbol(message, Decl(parserharness.ts, 1198, 58))
 
                         return true;
@@= skipped -42, +42 lines =@@
 >CompilerError : Symbol(CompilerError, Decl(parserharness.ts, 1206, 9))
 
             constructor(public file: string,
->file : Symbol(CompilerError.file, Decl(parserharness.ts, 1210, 24))
+>file : Symbol(file, Decl(parserharness.ts, 1210, 24))
 
                     public line: number,
->line : Symbol(CompilerError.line, Decl(parserharness.ts, 1210, 44))
+>line : Symbol(line, Decl(parserharness.ts, 1210, 44))
 
                     public column: number,
->column : Symbol(CompilerError.column, Decl(parserharness.ts, 1211, 40))
+>column : Symbol(column, Decl(parserharness.ts, 1211, 40))
 
                     public message: string) { }
->message : Symbol(CompilerError.message, Decl(parserharness.ts, 1212, 42))
+>message : Symbol(message, Decl(parserharness.ts, 1212, 42))
 
             public toString() {
->toString : Symbol(CompilerError.toString, Decl(parserharness.ts, 1213, 47))
+>toString : Symbol(toString, Decl(parserharness.ts, 1213, 47))
 
                 return this.file + "(" + this.line + "," + this.column + "): " + this.message;
->this.file : Symbol(CompilerError.file, Decl(parserharness.ts, 1210, 24))
+>this.file : Symbol(file, Decl(parserharness.ts, 1210, 24))
 >this : Symbol(CompilerError, Decl(parserharness.ts, 1206, 9))
->file : Symbol(CompilerError.file, Decl(parserharness.ts, 1210, 24))
->this.line : Symbol(CompilerError.line, Decl(parserharness.ts, 1210, 44))
+>file : Symbol(file, Decl(parserharness.ts, 1210, 24))
+>this.line : Symbol(line, Decl(parserharness.ts, 1210, 44))
 >this : Symbol(CompilerError, Decl(parserharness.ts, 1206, 9))
->line : Symbol(CompilerError.line, Decl(parserharness.ts, 1210, 44))
->this.column : Symbol(CompilerError.column, Decl(parserharness.ts, 1211, 40))
+>line : Symbol(line, Decl(parserharness.ts, 1210, 44))
+>this.column : Symbol(column, Decl(parserharness.ts, 1211, 40))
 >this : Symbol(CompilerError, Decl(parserharness.ts, 1206, 9))
->column : Symbol(CompilerError.column, Decl(parserharness.ts, 1211, 40))
->this.message : Symbol(CompilerError.message, Decl(parserharness.ts, 1212, 42))
+>column : Symbol(column, Decl(parserharness.ts, 1211, 40))
+>this.message : Symbol(message, Decl(parserharness.ts, 1212, 42))
 >this : Symbol(CompilerError, Decl(parserharness.ts, 1206, 9))
->message : Symbol(CompilerError.message, Decl(parserharness.ts, 1212, 42))
+>message : Symbol(message, Decl(parserharness.ts, 1212, 42))
             }
         }
 
@@= skipped -54, +54 lines =@@
 >reset : Symbol(reset, Decl(parserharness.ts, 1229, 9))
 
             stdout.reset();
->stdout.reset : Symbol(EmitterIOHost.reset, Decl(parserharness.ts, 733, 55))
+>stdout.reset : Symbol(reset, Decl(parserharness.ts, 733, 55))
 >stdout : Symbol(stdout, Decl(parserharness.ts, 756, 11))
->reset : Symbol(EmitterIOHost.reset, Decl(parserharness.ts, 733, 55))
+>reset : Symbol(reset, Decl(parserharness.ts, 733, 55))
 
             stderr.reset();
->stderr.reset : Symbol(WriterAggregator.reset, Decl(parserharness.ts, 706, 13))
+>stderr.reset : Symbol(reset, Decl(parserharness.ts, 706, 13))
 >stderr : Symbol(stderr, Decl(parserharness.ts, 757, 11))
->reset : Symbol(WriterAggregator.reset, Decl(parserharness.ts, 706, 13))
+>reset : Symbol(reset, Decl(parserharness.ts, 706, 13))
 
             var files = compiler.units.map((value) => value.filename);
 >files : Symbol(files, Decl(parserharness.ts, 1235, 15))
@@= skipped -45, +45 lines =@@
 >CompilationContext : Symbol(CompilationContext, Decl(parserharness.ts, 1245, 9))
 
             filename: string;
->filename : Symbol(CompilationContext.filename, Decl(parserharness.ts, 1249, 45))
+>filename : Symbol(filename, Decl(parserharness.ts, 1249, 45))
 
             preCompile: () => void;
->preCompile : Symbol(CompilationContext.preCompile, Decl(parserharness.ts, 1250, 29))
+>preCompile : Symbol(preCompile, Decl(parserharness.ts, 1250, 29))
 
             postCompile: () => void;
->postCompile : Symbol(CompilationContext.postCompile, Decl(parserharness.ts, 1251, 35))
+>postCompile : Symbol(postCompile, Decl(parserharness.ts, 1251, 35))
         }
 
         export function addUnit(code: string, unitName?: string, isResident?: boolean, isDeclareFile?: boolean, references?: TypeScript.IFileReference[]) {
@@= skipped -17, +17 lines =@@
 >isDeclareFile : Symbol(isDeclareFile, Decl(parserharness.ts, 1255, 86))
 >references : Symbol(references, Decl(parserharness.ts, 1255, 111))
 >TypeScript : Symbol(TypeScript)
->IFileReference : Symbol(TypeScript.IFileReference)
+>IFileReference : Symbol(IFileReference)
 
             var script: TypeScript.Script = null;
 >script : Symbol(script, Decl(parserharness.ts, 1256, 15))
 >TypeScript : Symbol(TypeScript)
->Script : Symbol(TypeScript.Script)
+>Script : Symbol(Script)
 
             var uName = unitName || '0' + (isDeclareFile ? '.d.ts' : '.ts');
 >uName : Symbol(uName, Decl(parserharness.ts, 1257, 15))
@@= skipped -31, +31 lines =@@
                     script = <TypeScript.Script>compiler.scripts.members[i];
 >script : Symbol(script, Decl(parserharness.ts, 1256, 15))
 >TypeScript : Symbol(TypeScript)
->Script : Symbol(TypeScript.Script)
+>Script : Symbol(Script)
 >compiler : Symbol(compiler, Decl(parserharness.ts, 780, 11))
 >i : Symbol(i, Decl(parserharness.ts, 1259, 20))
                 }
@@= skipped -63, +63 lines =@@
 >settingsCallback : Symbol(settingsCallback, Decl(parserharness.ts, 1285, 91))
 >settings : Symbol(settings, Decl(parserharness.ts, 1285, 112))
 >TypeScript : Symbol(TypeScript)
->CompilationSettings : Symbol(TypeScript.CompilationSettings)
+>CompilationSettings : Symbol(CompilationSettings)
 >context : Symbol(context, Decl(parserharness.ts, 1285, 164))
 >CompilationContext : Symbol(CompilationContext, Decl(parserharness.ts, 1245, 9))
 >references : Symbol(references, Decl(parserharness.ts, 1285, 194))
 >TypeScript : Symbol(TypeScript)
->IFileReference : Symbol(TypeScript.IFileReference)
+>IFileReference : Symbol(IFileReference)
 
             path = switchToForwardSlashes(path);
 >path : Symbol(path, Decl(parserharness.ts, 1285, 36))
@@= skipped -14, +14 lines =@@
 
             var filename = path.match(/[^\/]*$/)[0];
 >filename : Symbol(filename, Decl(parserharness.ts, 1287, 15))
->path.match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
+>path.match : Symbol(match, Decl(lib.es5.d.ts, --, --))
 >path : Symbol(path, Decl(parserharness.ts, 1285, 36))
->match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
->0 : Symbol(RegExpMatchArray[0], Decl(lib.es5.d.ts, --, --))
+>match : Symbol(match, Decl(lib.es5.d.ts, --, --))
+>0 : Symbol(0, Decl(lib.es5.d.ts, --, --))
 
             var code = readFile(path);
 >code : Symbol(code, Decl(parserharness.ts, 1288, 15))
@@= skipped -30, +30 lines =@@
 >settingsCallback : Symbol(settingsCallback, Decl(parserharness.ts, 1293, 109))
 >settings : Symbol(settings, Decl(parserharness.ts, 1293, 130))
 >TypeScript : Symbol(TypeScript)
->CompilationSettings : Symbol(TypeScript.CompilationSettings)
+>CompilationSettings : Symbol(CompilationSettings)
 >context : Symbol(context, Decl(parserharness.ts, 1293, 182))
 >CompilationContext : Symbol(CompilationContext, Decl(parserharness.ts, 1245, 9))
 >references : Symbol(references, Decl(parserharness.ts, 1293, 212))
 >TypeScript : Symbol(TypeScript)
->IFileReference : Symbol(TypeScript.IFileReference)
+>IFileReference : Symbol(IFileReference)
 
             // not recursive
             function clone/* <T> */(source: any, target: any) {
@@= skipped -89, +89 lines =@@
 >compileUnits : Symbol(compileUnits, Decl(parserharness.ts, 1323, 9))
 >units : Symbol(units, Decl(parserharness.ts, 1325, 37))
 >TestCaseParser : Symbol(TestCaseParser, Decl(parserharness.ts, 1408, 5))
->TestUnitData : Symbol(TestCaseParser.TestUnitData, Decl(parserharness.ts, 1418, 9))
+>TestUnitData : Symbol(TestUnitData, Decl(parserharness.ts, 1418, 9))
 >callback : Symbol(callback, Decl(parserharness.ts, 1325, 74))
 >res : Symbol(res, Decl(parserharness.ts, 1325, 86))
 >Compiler : Symbol(Compiler, Decl(parserharness.ts, 683, 5))
@@= skipped -10, +10 lines =@@
             var lastUnit = units[units.length - 1];
 >lastUnit : Symbol(lastUnit, Decl(parserharness.ts, 1326, 15))
 >units : Symbol(units, Decl(parserharness.ts, 1325, 37))
->units.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>units.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >units : Symbol(units, Decl(parserharness.ts, 1325, 37))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
             var unitName = switchToForwardSlashes(lastUnit.name).match(/[^\/]*$/)[0];
 >unitName : Symbol(unitName, Decl(parserharness.ts, 1327, 15))
->switchToForwardSlashes(lastUnit.name).match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
+>switchToForwardSlashes(lastUnit.name).match : Symbol(match, Decl(lib.es5.d.ts, --, --))
 >switchToForwardSlashes : Symbol(switchToForwardSlashes, Decl(parserharness.ts, 25, 22))
->lastUnit.name : Symbol(TestCaseParser.TestUnitData.name, Decl(parserharness.ts, 1422, 28))
+>lastUnit.name : Symbol(name, Decl(parserharness.ts, 1422, 28))
 >lastUnit : Symbol(lastUnit, Decl(parserharness.ts, 1326, 15))
->name : Symbol(TestCaseParser.TestUnitData.name, Decl(parserharness.ts, 1422, 28))
->match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
->0 : Symbol(RegExpMatchArray[0], Decl(lib.es5.d.ts, --, --))
+>name : Symbol(name, Decl(parserharness.ts, 1422, 28))
+>match : Symbol(match, Decl(lib.es5.d.ts, --, --))
+>0 : Symbol(0, Decl(lib.es5.d.ts, --, --))
 
             var dependencies = units.slice(0, units.length - 1);
 >dependencies : Symbol(dependencies, Decl(parserharness.ts, 1329, 15))
->units.slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
+>units.slice : Symbol(slice, Decl(lib.es5.d.ts, --, --))
 >units : Symbol(units, Decl(parserharness.ts, 1325, 37))
->slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
->units.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>slice : Symbol(slice, Decl(lib.es5.d.ts, --, --))
+>units.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >units : Symbol(units, Decl(parserharness.ts, 1325, 37))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
             var compilationContext = Harness.Compiler.defineCompilationContextForTest(unitName, dependencies);
 >compilationContext : Symbol(compilationContext, Decl(parserharness.ts, 1330, 15))
@@= skipped -35, +35 lines =@@
 
             compileUnit(lastUnit.content, unitName, callback, settingsCallback, compilationContext, lastUnit.references);
 >compileUnit : Symbol(compileUnit, Decl(parserharness.ts, 1291, 9))
->lastUnit.content : Symbol(TestCaseParser.TestUnitData.content, Decl(parserharness.ts, 1421, 39))
+>lastUnit.content : Symbol(content, Decl(parserharness.ts, 1421, 39))
 >lastUnit : Symbol(lastUnit, Decl(parserharness.ts, 1326, 15))
->content : Symbol(TestCaseParser.TestUnitData.content, Decl(parserharness.ts, 1421, 39))
+>content : Symbol(content, Decl(parserharness.ts, 1421, 39))
 >unitName : Symbol(unitName, Decl(parserharness.ts, 1327, 15))
 >callback : Symbol(callback, Decl(parserharness.ts, 1325, 74))
 >settingsCallback : Symbol(settingsCallback, Decl(parserharness.ts, 1325, 125))
 >compilationContext : Symbol(compilationContext, Decl(parserharness.ts, 1330, 15))
->lastUnit.references : Symbol(TestCaseParser.TestUnitData.references, Decl(parserharness.ts, 1424, 37))
+>lastUnit.references : Symbol(references, Decl(parserharness.ts, 1424, 37))
 >lastUnit : Symbol(lastUnit, Decl(parserharness.ts, 1326, 15))
->references : Symbol(TestCaseParser.TestUnitData.references, Decl(parserharness.ts, 1424, 37))
+>references : Symbol(references, Decl(parserharness.ts, 1424, 37))
         }
 
         export function emitToOutfile(outfile: WriterAggregator) {
@@= skipped -26, +26 lines =@@
 >emit : Symbol(emit, Decl(parserharness.ts, 1337, 9))
 >ioHost : Symbol(ioHost, Decl(parserharness.ts, 1339, 29))
 >TypeScript : Symbol(TypeScript)
->EmitterIOHost : Symbol(TypeScript.EmitterIOHost)
+>EmitterIOHost : Symbol(EmitterIOHost)
 >usePullEmitter : Symbol(usePullEmitter, Decl(parserharness.ts, 1339, 62))
 
             compiler.emit(ioHost, usePullEmitter);
@@= skipped -21, +21 lines =@@
 >CompilationContext : Symbol(CompilationContext, Decl(parserharness.ts, 1245, 9))
 >references : Symbol(references, Decl(parserharness.ts, 1343, 150))
 >TypeScript : Symbol(TypeScript)
->IFileReference : Symbol(TypeScript.IFileReference)
+>IFileReference : Symbol(IFileReference)
 
             var scripts: TypeScript.Script[] = [];
 >scripts : Symbol(scripts, Decl(parserharness.ts, 1344, 15))
 >TypeScript : Symbol(TypeScript)
->Script : Symbol(TypeScript.Script)
+>Script : Symbol(Script)
 
             reset();
 >reset : Symbol(reset, Decl(parserharness.ts, 1229, 9))
@@= skipped -14, +14 lines =@@
 >context : Symbol(context, Decl(parserharness.ts, 1343, 120))
 
                 context.preCompile();
->context.preCompile : Symbol(CompilationContext.preCompile, Decl(parserharness.ts, 1250, 29))
+>context.preCompile : Symbol(preCompile, Decl(parserharness.ts, 1250, 29))
 >context : Symbol(context, Decl(parserharness.ts, 1343, 120))
->preCompile : Symbol(CompilationContext.preCompile, Decl(parserharness.ts, 1250, 29))
+>preCompile : Symbol(preCompile, Decl(parserharness.ts, 1250, 29))
             }
 
             var isDeclareFile = Harness.Compiler.isDeclareFile(unitName);
@@= skipped -22, +22 lines =@@
 >isDeclareFile : Symbol(isDeclareFile, Decl(parserharness.ts, 1352, 15))
 
             scripts.push(addUnit(code, uName, false, isDeclareFile, references));
->scripts.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>scripts.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >scripts : Symbol(scripts, Decl(parserharness.ts, 1344, 15))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >addUnit : Symbol(addUnit, Decl(parserharness.ts, 1253, 9))
 >code : Symbol(code, Decl(parserharness.ts, 1343, 38))
 >uName : Symbol(uName, Decl(parserharness.ts, 1354, 15))
@@= skipped -33, +33 lines =@@
             else {
                 errors = stderr.lines;
 >errors : Symbol(errors, Decl(parserharness.ts, 1358, 15))
->stderr.lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>stderr.lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 >stderr : Symbol(stderr, Decl(parserharness.ts, 757, 11))
->lines : Symbol(WriterAggregator.lines, Decl(parserharness.ts, 690, 62))
+>lines : Symbol(lines, Decl(parserharness.ts, 690, 62))
 
                 emit(stdout, false);
 >emit : Symbol(emit, Decl(parserharness.ts, 1337, 9))
@@= skipped -17, +17 lines =@@
 >context : Symbol(context, Decl(parserharness.ts, 1343, 120))
 
                 context.postCompile();
->context.postCompile : Symbol(CompilationContext.postCompile, Decl(parserharness.ts, 1251, 35))
+>context.postCompile : Symbol(postCompile, Decl(parserharness.ts, 1251, 35))
 >context : Symbol(context, Decl(parserharness.ts, 1343, 120))
->postCompile : Symbol(CompilationContext.postCompile, Decl(parserharness.ts, 1251, 35))
+>postCompile : Symbol(postCompile, Decl(parserharness.ts, 1251, 35))
             }
 
             callback(new CompilerResult(stdout.toArray(), errors, scripts));
 >callback : Symbol(callback, Decl(parserharness.ts, 1343, 69))
 >CompilerResult : Symbol(CompilerResult, Decl(parserharness.ts, 1167, 9))
->stdout.toArray : Symbol(EmitterIOHost.toArray, Decl(parserharness.ts, 735, 56))
+>stdout.toArray : Symbol(toArray, Decl(parserharness.ts, 735, 56))
 >stdout : Symbol(stdout, Decl(parserharness.ts, 756, 11))
->toArray : Symbol(EmitterIOHost.toArray, Decl(parserharness.ts, 735, 56))
+>toArray : Symbol(toArray, Decl(parserharness.ts, 735, 56))
 >errors : Symbol(errors, Decl(parserharness.ts, 1358, 15))
 >scripts : Symbol(scripts, Decl(parserharness.ts, 1344, 15))
         }
@@= skipped -23, +23 lines =@@
 >filename : Symbol(filename, Decl(parserharness.ts, 1381, 56))
 >dependencies : Symbol(dependencies, Decl(parserharness.ts, 1381, 73))
 >TestCaseParser : Symbol(TestCaseParser, Decl(parserharness.ts, 1408, 5))
->TestUnitData : Symbol(TestCaseParser.TestUnitData, Decl(parserharness.ts, 1418, 9))
+>TestUnitData : Symbol(TestUnitData, Decl(parserharness.ts, 1418, 9))
 >CompilationContext : Symbol(CompilationContext, Decl(parserharness.ts, 1245, 9))
 
             // if the given file has no dependencies, there is no context to return, it can be compiled without additional work
             if (dependencies.length == 0) {
->dependencies.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>dependencies.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >dependencies : Symbol(dependencies, Decl(parserharness.ts, 1381, 73))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
                 return null;
             } else {
@@= skipped -20, +20 lines =@@
                     // REVIEW: if any dependency has a triple slash reference then does postCompile potentially have to do a recreate since we can't update references with updateUnit?
                     // easy enough to do if so, prefer to avoid the recreate cost until it proves to be an issue
                     dependencies.forEach(dep => {
->dependencies.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>dependencies.forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >dependencies : Symbol(dependencies, Decl(parserharness.ts, 1381, 73))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >dep : Symbol(dep, Decl(parserharness.ts, 1390, 41))
 
                         addUnit(dep.content, dep.name, false, Harness.Compiler.isDeclareFile(dep.name));
 >addUnit : Symbol(addUnit, Decl(parserharness.ts, 1253, 9))
->dep.content : Symbol(TestCaseParser.TestUnitData.content, Decl(parserharness.ts, 1421, 39))
+>dep.content : Symbol(content, Decl(parserharness.ts, 1421, 39))
 >dep : Symbol(dep, Decl(parserharness.ts, 1390, 41))
->content : Symbol(TestCaseParser.TestUnitData.content, Decl(parserharness.ts, 1421, 39))
->dep.name : Symbol(TestCaseParser.TestUnitData.name, Decl(parserharness.ts, 1422, 28))
+>content : Symbol(content, Decl(parserharness.ts, 1421, 39))
+>dep.name : Symbol(name, Decl(parserharness.ts, 1422, 28))
 >dep : Symbol(dep, Decl(parserharness.ts, 1390, 41))
->name : Symbol(TestCaseParser.TestUnitData.name, Decl(parserharness.ts, 1422, 28))
+>name : Symbol(name, Decl(parserharness.ts, 1422, 28))
 >Harness.Compiler.isDeclareFile : Symbol(isDeclareFile, Decl(parserharness.ts, 757, 44))
 >Harness.Compiler : Symbol(Compiler, Decl(parserharness.ts, 683, 5))
 >Harness : Symbol(Harness, Decl(parserharness.ts, 52, 1))
 >Compiler : Symbol(Compiler, Decl(parserharness.ts, 683, 5))
 >isDeclareFile : Symbol(isDeclareFile, Decl(parserharness.ts, 757, 44))
->dep.name : Symbol(TestCaseParser.TestUnitData.name, Decl(parserharness.ts, 1422, 28))
+>dep.name : Symbol(name, Decl(parserharness.ts, 1422, 28))
 >dep : Symbol(dep, Decl(parserharness.ts, 1390, 41))
->name : Symbol(TestCaseParser.TestUnitData.name, Decl(parserharness.ts, 1422, 28))
+>name : Symbol(name, Decl(parserharness.ts, 1422, 28))
 
                         addedFiles.push(dep.name);
->addedFiles.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>addedFiles.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >addedFiles : Symbol(addedFiles, Decl(parserharness.ts, 1386, 19))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->dep.name : Symbol(TestCaseParser.TestUnitData.name, Decl(parserharness.ts, 1422, 28))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>dep.name : Symbol(name, Decl(parserharness.ts, 1422, 28))
 >dep : Symbol(dep, Decl(parserharness.ts, 1390, 41))
->name : Symbol(TestCaseParser.TestUnitData.name, Decl(parserharness.ts, 1422, 28))
+>name : Symbol(name, Decl(parserharness.ts, 1422, 28))
 
                     });
                 };
@@= skipped -36, +36 lines =@@
 >postcompile : Symbol(postcompile, Decl(parserharness.ts, 1395, 19))
 
                     addedFiles.forEach(file => {
->addedFiles.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>addedFiles.forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >addedFiles : Symbol(addedFiles, Decl(parserharness.ts, 1386, 19))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >file : Symbol(file, Decl(parserharness.ts, 1396, 39))
 
                         updateUnit('', file);
@@= skipped -44, +44 lines =@@
 >CompilerSetting : Symbol(CompilerSetting, Decl(parserharness.ts, 1413, 34))
 
             flag: string;
->flag : Symbol(CompilerSetting.flag, Decl(parserharness.ts, 1415, 42))
+>flag : Symbol(flag, Decl(parserharness.ts, 1415, 42))
 
             value: string;
->value : Symbol(CompilerSetting.value, Decl(parserharness.ts, 1416, 25))
+>value : Symbol(value, Decl(parserharness.ts, 1416, 25))
         }
 
         /** All the necessary information to turn a multi file test into useful units for later compilation */
@@= skipped -11, +11 lines =@@
 >TestUnitData : Symbol(TestUnitData, Decl(parserharness.ts, 1418, 9))
 
             content: string;
->content : Symbol(TestUnitData.content, Decl(parserharness.ts, 1421, 39))
+>content : Symbol(content, Decl(parserharness.ts, 1421, 39))
 
             name: string;
->name : Symbol(TestUnitData.name, Decl(parserharness.ts, 1422, 28))
+>name : Symbol(name, Decl(parserharness.ts, 1422, 28))
 
             originalFilePath: string;
->originalFilePath : Symbol(TestUnitData.originalFilePath, Decl(parserharness.ts, 1423, 25))
+>originalFilePath : Symbol(originalFilePath, Decl(parserharness.ts, 1423, 25))
 
             references: TypeScript.IFileReference[];
->references : Symbol(TestUnitData.references, Decl(parserharness.ts, 1424, 37))
+>references : Symbol(references, Decl(parserharness.ts, 1424, 37))
 >TypeScript : Symbol(TypeScript)
->IFileReference : Symbol(TypeScript.IFileReference)
+>IFileReference : Symbol(IFileReference)
         }
 
         // Regex for parsing options in the format "@Alpha: Value of any sort"
@@= skipped -37, +37 lines =@@
 >content : Symbol(content, Decl(parserharness.ts, 1434, 41))
 
                 opts.push({ flag: match[1], value: match[2] });
->opts.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>opts.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >opts : Symbol(opts, Decl(parserharness.ts, 1436, 15))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >flag : Symbol(flag, Decl(parserharness.ts, 1440, 27))
 >match : Symbol(match, Decl(parserharness.ts, 1438, 15))
 >value : Symbol(value, Decl(parserharness.ts, 1440, 43))
@@= skipped -51, +51 lines =@@
             var refs: TypeScript.IFileReference[] = [];
 >refs : Symbol(refs, Decl(parserharness.ts, 1460, 15))
 >TypeScript : Symbol(TypeScript)
->IFileReference : Symbol(TypeScript.IFileReference)
+>IFileReference : Symbol(IFileReference)
 
             for (var i = 0; i < lines.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 1462, 20))
 >i : Symbol(i, Decl(parserharness.ts, 1462, 20))
->lines.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>lines.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >lines : Symbol(lines, Decl(parserharness.ts, 1454, 15))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 1462, 20))
 
                 var line = lines[i];
@@= skipped -17, +17 lines =@@
 
                 var isTripleSlashReference = /[\/]{3}\s*<reference path/.test(line);
 >isTripleSlashReference : Symbol(isTripleSlashReference, Decl(parserharness.ts, 1464, 19))
->/[\/]{3}\s*<reference path/.test : Symbol(RegExp.test, Decl(lib.es5.d.ts, --, --))
->test : Symbol(RegExp.test, Decl(lib.es5.d.ts, --, --))
+>/[\/]{3}\s*<reference path/.test : Symbol(test, Decl(lib.es5.d.ts, --, --))
+>test : Symbol(test, Decl(lib.es5.d.ts, --, --))
 >line : Symbol(line, Decl(parserharness.ts, 1463, 19))
 
                 var testMetaData = optionRegex.exec(line);
@@= skipped -14, +14 lines =@@
 
                     var isRef = line.match(/reference\spath='(\w*_?\w*\.?d?\.ts)'/);
 >isRef : Symbol(isRef, Decl(parserharness.ts, 1468, 23))
->line.match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
+>line.match : Symbol(match, Decl(lib.es5.d.ts, --, --))
 >line : Symbol(line, Decl(parserharness.ts, 1463, 19))
->match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
+>match : Symbol(match, Decl(lib.es5.d.ts, --, --))
 
                     if (isRef) {
 >isRef : Symbol(isRef, Decl(parserharness.ts, 1468, 23))
@@= skipped -32, +32 lines =@@
                         };
 
                         refs.push(ref);
->refs.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>refs.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >refs : Symbol(refs, Decl(parserharness.ts, 1460, 15))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >ref : Symbol(ref, Decl(parserharness.ts, 1470, 27))
                     }
                 } else if (testMetaData) {
@@= skipped -12, +12 lines =@@
                     optionRegex.lastIndex = 0;
                     var fileNameIndex = fileMetadataNames.indexOf(testMetaData[1].toLowerCase());
 >fileNameIndex : Symbol(fileNameIndex, Decl(parserharness.ts, 1484, 23))
->fileMetadataNames.indexOf : Symbol(Array.indexOf, Decl(lib.es5.d.ts, --, --))
+>fileMetadataNames.indexOf : Symbol(indexOf, Decl(lib.es5.d.ts, --, --))
 >fileMetadataNames : Symbol(fileMetadataNames, Decl(parserharness.ts, 1432, 11))
->indexOf : Symbol(Array.indexOf, Decl(lib.es5.d.ts, --, --))
+>indexOf : Symbol(indexOf, Decl(lib.es5.d.ts, --, --))
 >testMetaData : Symbol(testMetaData, Decl(parserharness.ts, 1465, 19))
 
                     if (fileNameIndex == -1) {
@@= skipped -11, +11 lines =@@
                         throw new Error('Unrecognized metadata name "' + testMetaData[1] + '". Available file metadata names are: ' + fileMetadataNames.join(', '));
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >testMetaData : Symbol(testMetaData, Decl(parserharness.ts, 1465, 19))
->fileMetadataNames.join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>fileMetadataNames.join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 >fileMetadataNames : Symbol(fileMetadataNames, Decl(parserharness.ts, 1432, 11))
->join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 
                     } else if (fileNameIndex == 0) {
 >fileNameIndex : Symbol(fileNameIndex, Decl(parserharness.ts, 1484, 23))
@@= skipped -46, +46 lines =@@
 
                             };
                         files.push(newTestFile);
->files.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>files.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >files : Symbol(files, Decl(parserharness.ts, 1452, 15))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >newTestFile : Symbol(newTestFile, Decl(parserharness.ts, 1496, 27), Decl(parserharness.ts, 1532, 15))
 
                         // Reset local data
@@= skipped -50, +50 lines =@@
             // normalize the filename for the single file case
             currentFileName = files.length > 0 ? currentFileName : '0.ts';
 >currentFileName : Symbol(currentFileName, Decl(parserharness.ts, 1459, 15))
->files.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>files.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >files : Symbol(files, Decl(parserharness.ts, 1452, 15))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >currentFileName : Symbol(currentFileName, Decl(parserharness.ts, 1459, 15))
 
             // EOF, push whatever remains
@@= skipped -31, +31 lines =@@
 
             };
             files.push(newTestFile);
->files.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>files.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >files : Symbol(files, Decl(parserharness.ts, 1452, 15))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >newTestFile : Symbol(newTestFile, Decl(parserharness.ts, 1496, 27), Decl(parserharness.ts, 1532, 15))
 
             return { settings: settings, testUnitData: files };
@@= skipped -17, +17 lines =@@
 >ScriptInfo : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
 
         public version: number;
->version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>version : Symbol(version, Decl(parserharness.ts, 1545, 29))
 
         public editRanges: { length: number; editRange: TypeScript.ScriptEditRange; }[] = [];
->editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
+>editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
 >length : Symbol(length, Decl(parserharness.ts, 1547, 28))
 >editRange : Symbol(editRange, Decl(parserharness.ts, 1547, 44))
 >TypeScript : Symbol(TypeScript)
->ScriptEditRange : Symbol(TypeScript.ScriptEditRange)
+>ScriptEditRange : Symbol(ScriptEditRange)
 
         constructor(public name: string, public content: string, public isResident: boolean, public maxScriptVersions: number) {
->name : Symbol(ScriptInfo.name, Decl(parserharness.ts, 1549, 20))
->content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
->isResident : Symbol(ScriptInfo.isResident, Decl(parserharness.ts, 1549, 64))
->maxScriptVersions : Symbol(ScriptInfo.maxScriptVersions, Decl(parserharness.ts, 1549, 92))
+>name : Symbol(name, Decl(parserharness.ts, 1549, 20))
+>content : Symbol(content, Decl(parserharness.ts, 1549, 40))
+>isResident : Symbol(isResident, Decl(parserharness.ts, 1549, 64))
+>maxScriptVersions : Symbol(maxScriptVersions, Decl(parserharness.ts, 1549, 92))
 
             this.version = 1;
->this.version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>this.version : Symbol(version, Decl(parserharness.ts, 1545, 29))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>version : Symbol(version, Decl(parserharness.ts, 1545, 29))
         }
 
         public updateContent(content: string, isResident: boolean) {
->updateContent : Symbol(ScriptInfo.updateContent, Decl(parserharness.ts, 1551, 9))
+>updateContent : Symbol(updateContent, Decl(parserharness.ts, 1551, 9))
 >content : Symbol(content, Decl(parserharness.ts, 1553, 29))
 >isResident : Symbol(isResident, Decl(parserharness.ts, 1553, 45))
 
             this.editRanges = [];
->this.editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
+>this.editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
+>editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
 
             this.content = content;
->this.content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
+>this.content : Symbol(content, Decl(parserharness.ts, 1549, 40))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
+>content : Symbol(content, Decl(parserharness.ts, 1549, 40))
 >content : Symbol(content, Decl(parserharness.ts, 1553, 29))
 
             this.isResident = isResident;
->this.isResident : Symbol(ScriptInfo.isResident, Decl(parserharness.ts, 1549, 64))
+>this.isResident : Symbol(isResident, Decl(parserharness.ts, 1549, 64))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->isResident : Symbol(ScriptInfo.isResident, Decl(parserharness.ts, 1549, 64))
+>isResident : Symbol(isResident, Decl(parserharness.ts, 1549, 64))
 >isResident : Symbol(isResident, Decl(parserharness.ts, 1553, 45))
 
             this.version++;
->this.version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>this.version : Symbol(version, Decl(parserharness.ts, 1545, 29))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>version : Symbol(version, Decl(parserharness.ts, 1545, 29))
         }
 
         public editContent(minChar: number, limChar: number, newText: string) {
->editContent : Symbol(ScriptInfo.editContent, Decl(parserharness.ts, 1558, 9))
+>editContent : Symbol(editContent, Decl(parserharness.ts, 1558, 9))
 >minChar : Symbol(minChar, Decl(parserharness.ts, 1560, 27))
 >limChar : Symbol(limChar, Decl(parserharness.ts, 1560, 43))
 >newText : Symbol(newText, Decl(parserharness.ts, 1560, 60))
@@= skipped -58, +58 lines =@@
             // Apply edits
             var prefix = this.content.substring(0, minChar);
 >prefix : Symbol(prefix, Decl(parserharness.ts, 1562, 15))
->this.content.substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
->this.content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
+>this.content.substring : Symbol(substring, Decl(lib.es5.d.ts, --, --))
+>this.content : Symbol(content, Decl(parserharness.ts, 1549, 40))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
->substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
+>content : Symbol(content, Decl(parserharness.ts, 1549, 40))
+>substring : Symbol(substring, Decl(lib.es5.d.ts, --, --))
 >minChar : Symbol(minChar, Decl(parserharness.ts, 1560, 27))
 
             var middle = newText;
@@= skipped -13, +13 lines =@@
 
             var suffix = this.content.substring(limChar);
 >suffix : Symbol(suffix, Decl(parserharness.ts, 1564, 15))
->this.content.substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
->this.content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
+>this.content.substring : Symbol(substring, Decl(lib.es5.d.ts, --, --))
+>this.content : Symbol(content, Decl(parserharness.ts, 1549, 40))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
->substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
+>content : Symbol(content, Decl(parserharness.ts, 1549, 40))
+>substring : Symbol(substring, Decl(lib.es5.d.ts, --, --))
 >limChar : Symbol(limChar, Decl(parserharness.ts, 1560, 43))
 
             this.content = prefix + middle + suffix;
->this.content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
+>this.content : Symbol(content, Decl(parserharness.ts, 1549, 40))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
+>content : Symbol(content, Decl(parserharness.ts, 1549, 40))
 >prefix : Symbol(prefix, Decl(parserharness.ts, 1562, 15))
 >middle : Symbol(middle, Decl(parserharness.ts, 1563, 15))
 >suffix : Symbol(suffix, Decl(parserharness.ts, 1564, 15))
 
             // Store edit range + new length of script
             this.editRanges.push({
->this.editRanges.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->this.editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
+>this.editRanges.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>this.editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 
                 length: this.content.length,
 >length : Symbol(length, Decl(parserharness.ts, 1568, 34))
->this.content.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
->this.content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
+>this.content.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.content : Symbol(content, Decl(parserharness.ts, 1549, 40))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>content : Symbol(content, Decl(parserharness.ts, 1549, 40))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
                 editRange: new TypeScript.ScriptEditRange(minChar, limChar, (limChar - minChar) + newText.length)
 >editRange : Symbol(editRange, Decl(parserharness.ts, 1569, 44))
@@= skipped -37, +37 lines =@@
 >limChar : Symbol(limChar, Decl(parserharness.ts, 1560, 43))
 >limChar : Symbol(limChar, Decl(parserharness.ts, 1560, 43))
 >minChar : Symbol(minChar, Decl(parserharness.ts, 1560, 27))
->newText.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>newText.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >newText : Symbol(newText, Decl(parserharness.ts, 1560, 60))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
             });
 
             if (this.editRanges.length > this.maxScriptVersions) {
->this.editRanges.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
+>this.editRanges.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.maxScriptVersions : Symbol(ScriptInfo.maxScriptVersions, Decl(parserharness.ts, 1549, 92))
+>editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.maxScriptVersions : Symbol(maxScriptVersions, Decl(parserharness.ts, 1549, 92))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->maxScriptVersions : Symbol(ScriptInfo.maxScriptVersions, Decl(parserharness.ts, 1549, 92))
+>maxScriptVersions : Symbol(maxScriptVersions, Decl(parserharness.ts, 1549, 92))
 
                 this.editRanges.splice(0, this.maxScriptVersions - this.editRanges.length);
->this.editRanges.splice : Symbol(Array.splice, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->this.editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
+>this.editRanges.splice : Symbol(splice, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>this.editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
->splice : Symbol(Array.splice, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->this.maxScriptVersions : Symbol(ScriptInfo.maxScriptVersions, Decl(parserharness.ts, 1549, 92))
+>editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
+>splice : Symbol(splice, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>this.maxScriptVersions : Symbol(maxScriptVersions, Decl(parserharness.ts, 1549, 92))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->maxScriptVersions : Symbol(ScriptInfo.maxScriptVersions, Decl(parserharness.ts, 1549, 92))
->this.editRanges.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
+>maxScriptVersions : Symbol(maxScriptVersions, Decl(parserharness.ts, 1549, 92))
+>this.editRanges.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
             }
 
             // Update version #
             this.version++;
->this.version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>this.version : Symbol(version, Decl(parserharness.ts, 1545, 29))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>version : Symbol(version, Decl(parserharness.ts, 1545, 29))
         }
 
         public getEditRangeSinceVersion(version: number): TypeScript.ScriptEditRange {
->getEditRangeSinceVersion : Symbol(ScriptInfo.getEditRangeSinceVersion, Decl(parserharness.ts, 1579, 9))
+>getEditRangeSinceVersion : Symbol(getEditRangeSinceVersion, Decl(parserharness.ts, 1579, 9))
 >version : Symbol(version, Decl(parserharness.ts, 1581, 40))
 >TypeScript : Symbol(TypeScript)
->ScriptEditRange : Symbol(TypeScript.ScriptEditRange)
+>ScriptEditRange : Symbol(ScriptEditRange)
 
             if (this.version == version) {
->this.version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>this.version : Symbol(version, Decl(parserharness.ts, 1545, 29))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>version : Symbol(version, Decl(parserharness.ts, 1545, 29))
 >version : Symbol(version, Decl(parserharness.ts, 1581, 40))
 
                 // No edits!
@@= skipped -57, +57 lines =@@
 
             var initialEditRangeIndex = this.editRanges.length - (this.version - version);
 >initialEditRangeIndex : Symbol(initialEditRangeIndex, Decl(parserharness.ts, 1587, 15))
->this.editRanges.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
+>this.editRanges.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.version : Symbol(version, Decl(parserharness.ts, 1545, 29))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>version : Symbol(version, Decl(parserharness.ts, 1545, 29))
 >version : Symbol(version, Decl(parserharness.ts, 1581, 40))
 
             if (initialEditRangeIndex < 0 || initialEditRangeIndex >= this.editRanges.length) {
 >initialEditRangeIndex : Symbol(initialEditRangeIndex, Decl(parserharness.ts, 1587, 15))
 >initialEditRangeIndex : Symbol(initialEditRangeIndex, Decl(parserharness.ts, 1587, 15))
->this.editRanges.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
+>this.editRanges.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
                 // Too far away from what we know
                 return TypeScript.ScriptEditRange.unknown();
@@= skipped -25, +25 lines =@@
 
             var entries = this.editRanges.slice(initialEditRangeIndex);
 >entries : Symbol(entries, Decl(parserharness.ts, 1593, 15))
->this.editRanges.slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
->this.editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
+>this.editRanges.slice : Symbol(slice, Decl(lib.es5.d.ts, --, --))
+>this.editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
 >this : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
->editRanges : Symbol(ScriptInfo.editRanges, Decl(parserharness.ts, 1546, 31))
->slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
+>editRanges : Symbol(editRanges, Decl(parserharness.ts, 1546, 31))
+>slice : Symbol(slice, Decl(lib.es5.d.ts, --, --))
 >initialEditRangeIndex : Symbol(initialEditRangeIndex, Decl(parserharness.ts, 1587, 15))
 
             var minDistFromStart = entries.map(x => x.editRange.minChar).reduce((prev, current) => Math.min(prev, current));
 >minDistFromStart : Symbol(minDistFromStart, Decl(parserharness.ts, 1595, 15))
->entries.map(x => x.editRange.minChar).reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->entries.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>entries.map(x => x.editRange.minChar).reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>entries.map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >entries : Symbol(entries, Decl(parserharness.ts, 1593, 15))
->map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(parserharness.ts, 1595, 47))
 >x.editRange : Symbol(editRange, Decl(parserharness.ts, 1547, 44))
 >x : Symbol(x, Decl(parserharness.ts, 1595, 47))
 >editRange : Symbol(editRange, Decl(parserharness.ts, 1547, 44))
->reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >prev : Symbol(prev, Decl(parserharness.ts, 1595, 81))
 >current : Symbol(current, Decl(parserharness.ts, 1595, 86))
->Math.min : Symbol(Math.min, Decl(lib.es5.d.ts, --, --))
+>Math.min : Symbol(min, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->min : Symbol(Math.min, Decl(lib.es5.d.ts, --, --))
+>min : Symbol(min, Decl(lib.es5.d.ts, --, --))
 >prev : Symbol(prev, Decl(parserharness.ts, 1595, 81))
 >current : Symbol(current, Decl(parserharness.ts, 1595, 86))
 
             var minDistFromEnd = entries.map(x => x.length - x.editRange.limChar).reduce((prev, current) => Math.min(prev, current));
 >minDistFromEnd : Symbol(minDistFromEnd, Decl(parserharness.ts, 1596, 15))
->entries.map(x => x.length - x.editRange.limChar).reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->entries.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>entries.map(x => x.length - x.editRange.limChar).reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>entries.map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >entries : Symbol(entries, Decl(parserharness.ts, 1593, 15))
->map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(parserharness.ts, 1596, 45))
 >x.length : Symbol(length, Decl(parserharness.ts, 1547, 28))
 >x : Symbol(x, Decl(parserharness.ts, 1596, 45))
@@= skipped -39, +39 lines =@@
 >x.editRange : Symbol(editRange, Decl(parserharness.ts, 1547, 44))
 >x : Symbol(x, Decl(parserharness.ts, 1596, 45))
 >editRange : Symbol(editRange, Decl(parserharness.ts, 1547, 44))
->reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >prev : Symbol(prev, Decl(parserharness.ts, 1596, 90))
 >current : Symbol(current, Decl(parserharness.ts, 1596, 95))
->Math.min : Symbol(Math.min, Decl(lib.es5.d.ts, --, --))
+>Math.min : Symbol(min, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->min : Symbol(Math.min, Decl(lib.es5.d.ts, --, --))
+>min : Symbol(min, Decl(lib.es5.d.ts, --, --))
 >prev : Symbol(prev, Decl(parserharness.ts, 1596, 90))
 >current : Symbol(current, Decl(parserharness.ts, 1596, 95))
 
             var aggDelta = entries.map(x => x.editRange.delta).reduce((prev, current) => prev + current);
 >aggDelta : Symbol(aggDelta, Decl(parserharness.ts, 1597, 15))
->entries.map(x => x.editRange.delta).reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->entries.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>entries.map(x => x.editRange.delta).reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>entries.map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >entries : Symbol(entries, Decl(parserharness.ts, 1593, 15))
->map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(parserharness.ts, 1597, 39))
 >x.editRange : Symbol(editRange, Decl(parserharness.ts, 1547, 44))
 >x : Symbol(x, Decl(parserharness.ts, 1597, 39))
 >editRange : Symbol(editRange, Decl(parserharness.ts, 1547, 44))
->reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >prev : Symbol(prev, Decl(parserharness.ts, 1597, 71))
 >current : Symbol(current, Decl(parserharness.ts, 1597, 76))
 >prev : Symbol(prev, Decl(parserharness.ts, 1597, 71))
@@= skipped -39, +39 lines =@@
 >TypeScriptLS : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
 
         private ls: Services.ILanguageServiceShim = null;
->ls : Symbol(TypeScriptLS.ls, Decl(parserharness.ts, 1603, 76))
+>ls : Symbol(ls, Decl(parserharness.ts, 1603, 76))
 >Services : Symbol(Services)
->ILanguageServiceShim : Symbol(Services.ILanguageServiceShim)
+>ILanguageServiceShim : Symbol(ILanguageServiceShim)
 
         public scripts: ScriptInfo[] = [];
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >ScriptInfo : Symbol(ScriptInfo, Decl(parserharness.ts, 1543, 5))
 
         public maxScriptVersions = 100;
->maxScriptVersions : Symbol(TypeScriptLS.maxScriptVersions, Decl(parserharness.ts, 1606, 42))
+>maxScriptVersions : Symbol(maxScriptVersions, Decl(parserharness.ts, 1606, 42))
 
         public addDefaultLibrary() {
->addDefaultLibrary : Symbol(TypeScriptLS.addDefaultLibrary, Decl(parserharness.ts, 1607, 39))
+>addDefaultLibrary : Symbol(addDefaultLibrary, Decl(parserharness.ts, 1607, 39))
 
             this.addScript("lib.d.ts", Harness.Compiler.libText, true);
->this.addScript : Symbol(TypeScriptLS.addScript, Decl(parserharness.ts, 1616, 9))
+>this.addScript : Symbol(addScript, Decl(parserharness.ts, 1616, 9))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->addScript : Symbol(TypeScriptLS.addScript, Decl(parserharness.ts, 1616, 9))
->Harness.Compiler.libText : Symbol(Compiler.libText, Decl(parserharness.ts, 754, 18))
+>addScript : Symbol(addScript, Decl(parserharness.ts, 1616, 9))
+>Harness.Compiler.libText : Symbol(libText, Decl(parserharness.ts, 754, 18))
 >Harness.Compiler : Symbol(Compiler, Decl(parserharness.ts, 683, 5))
 >Harness : Symbol(Harness, Decl(parserharness.ts, 52, 1))
 >Compiler : Symbol(Compiler, Decl(parserharness.ts, 683, 5))
->libText : Symbol(Compiler.libText, Decl(parserharness.ts, 754, 18))
+>libText : Symbol(libText, Decl(parserharness.ts, 754, 18))
         }
 
         public addFile(name: string, isResident = false) {
->addFile : Symbol(TypeScriptLS.addFile, Decl(parserharness.ts, 1611, 9))
+>addFile : Symbol(addFile, Decl(parserharness.ts, 1611, 9))
 >name : Symbol(name, Decl(parserharness.ts, 1613, 23))
 >isResident : Symbol(isResident, Decl(parserharness.ts, 1613, 36))
 
@@= skipped -36, +36 lines =@@
 >name : Symbol(name, Decl(parserharness.ts, 1613, 23))
 
             this.addScript(name, code, isResident);
->this.addScript : Symbol(TypeScriptLS.addScript, Decl(parserharness.ts, 1616, 9))
+>this.addScript : Symbol(addScript, Decl(parserharness.ts, 1616, 9))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->addScript : Symbol(TypeScriptLS.addScript, Decl(parserharness.ts, 1616, 9))
+>addScript : Symbol(addScript, Decl(parserharness.ts, 1616, 9))
 >name : Symbol(name, Decl(parserharness.ts, 1613, 23))
 >code : Symbol(code, Decl(parserharness.ts, 1614, 15))
 >isResident : Symbol(isResident, Decl(parserharness.ts, 1613, 36))
         }
 
         public addScript(name: string, content: string, isResident = false) {
->addScript : Symbol(TypeScriptLS.addScript, Decl(parserharness.ts, 1616, 9))
+>addScript : Symbol(addScript, Decl(parserharness.ts, 1616, 9))
 >name : Symbol(name, Decl(parserharness.ts, 1618, 25))
 >content : Symbol(content, Decl(parserharness.ts, 1618, 38))
 >isResident : Symbol(isResident, Decl(parserharness.ts, 1618, 55))
@@= skipped -20, +20 lines =@@
 >name : Symbol(name, Decl(parserharness.ts, 1618, 25))
 >content : Symbol(content, Decl(parserharness.ts, 1618, 38))
 >isResident : Symbol(isResident, Decl(parserharness.ts, 1618, 55))
->this.maxScriptVersions : Symbol(TypeScriptLS.maxScriptVersions, Decl(parserharness.ts, 1606, 42))
+>this.maxScriptVersions : Symbol(maxScriptVersions, Decl(parserharness.ts, 1606, 42))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->maxScriptVersions : Symbol(TypeScriptLS.maxScriptVersions, Decl(parserharness.ts, 1606, 42))
+>maxScriptVersions : Symbol(maxScriptVersions, Decl(parserharness.ts, 1606, 42))
 
             this.scripts.push(script);
->this.scripts.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >script : Symbol(script, Decl(parserharness.ts, 1619, 15))
         }
 
         public updateScript(name: string, content: string, isResident = false) {
->updateScript : Symbol(TypeScriptLS.updateScript, Decl(parserharness.ts, 1621, 9))
+>updateScript : Symbol(updateScript, Decl(parserharness.ts, 1621, 9))
 >name : Symbol(name, Decl(parserharness.ts, 1623, 28))
 >content : Symbol(content, Decl(parserharness.ts, 1623, 41))
 >isResident : Symbol(isResident, Decl(parserharness.ts, 1623, 58))
@@= skipped -22, +22 lines =@@
             for (var i = 0; i < this.scripts.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 1624, 20))
 >i : Symbol(i, Decl(parserharness.ts, 1624, 20))
->this.scripts.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 1624, 20))
 
                 if (this.scripts[i].name == name) {
->this.scripts[i].name : Symbol(ScriptInfo.name, Decl(parserharness.ts, 1549, 20))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts[i].name : Symbol(name, Decl(parserharness.ts, 1549, 20))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >i : Symbol(i, Decl(parserharness.ts, 1624, 20))
->name : Symbol(ScriptInfo.name, Decl(parserharness.ts, 1549, 20))
+>name : Symbol(name, Decl(parserharness.ts, 1549, 20))
 >name : Symbol(name, Decl(parserharness.ts, 1623, 28))
 
                     this.scripts[i].updateContent(content, isResident);
->this.scripts[i].updateContent : Symbol(ScriptInfo.updateContent, Decl(parserharness.ts, 1551, 9))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts[i].updateContent : Symbol(updateContent, Decl(parserharness.ts, 1551, 9))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >i : Symbol(i, Decl(parserharness.ts, 1624, 20))
->updateContent : Symbol(ScriptInfo.updateContent, Decl(parserharness.ts, 1551, 9))
+>updateContent : Symbol(updateContent, Decl(parserharness.ts, 1551, 9))
 >content : Symbol(content, Decl(parserharness.ts, 1623, 41))
 >isResident : Symbol(isResident, Decl(parserharness.ts, 1623, 58))
 
@@= skipped -31, +31 lines =@@
             }
 
             this.addScript(name, content, isResident);
->this.addScript : Symbol(TypeScriptLS.addScript, Decl(parserharness.ts, 1616, 9))
+>this.addScript : Symbol(addScript, Decl(parserharness.ts, 1616, 9))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->addScript : Symbol(TypeScriptLS.addScript, Decl(parserharness.ts, 1616, 9))
+>addScript : Symbol(addScript, Decl(parserharness.ts, 1616, 9))
 >name : Symbol(name, Decl(parserharness.ts, 1623, 28))
 >content : Symbol(content, Decl(parserharness.ts, 1623, 41))
 >isResident : Symbol(isResident, Decl(parserharness.ts, 1623, 58))
         }
 
         public editScript(name: string, minChar: number, limChar: number, newText: string) {
->editScript : Symbol(TypeScriptLS.editScript, Decl(parserharness.ts, 1632, 9))
+>editScript : Symbol(editScript, Decl(parserharness.ts, 1632, 9))
 >name : Symbol(name, Decl(parserharness.ts, 1634, 26))
 >minChar : Symbol(minChar, Decl(parserharness.ts, 1634, 39))
 >limChar : Symbol(limChar, Decl(parserharness.ts, 1634, 56))
@@= skipped -18, +18 lines =@@
             for (var i = 0; i < this.scripts.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 1635, 20))
 >i : Symbol(i, Decl(parserharness.ts, 1635, 20))
->this.scripts.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 1635, 20))
 
                 if (this.scripts[i].name == name) {
->this.scripts[i].name : Symbol(ScriptInfo.name, Decl(parserharness.ts, 1549, 20))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts[i].name : Symbol(name, Decl(parserharness.ts, 1549, 20))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >i : Symbol(i, Decl(parserharness.ts, 1635, 20))
->name : Symbol(ScriptInfo.name, Decl(parserharness.ts, 1549, 20))
+>name : Symbol(name, Decl(parserharness.ts, 1549, 20))
 >name : Symbol(name, Decl(parserharness.ts, 1634, 26))
 
                     this.scripts[i].editContent(minChar, limChar, newText);
->this.scripts[i].editContent : Symbol(ScriptInfo.editContent, Decl(parserharness.ts, 1558, 9))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts[i].editContent : Symbol(editContent, Decl(parserharness.ts, 1558, 9))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >i : Symbol(i, Decl(parserharness.ts, 1635, 20))
->editContent : Symbol(ScriptInfo.editContent, Decl(parserharness.ts, 1558, 9))
+>editContent : Symbol(editContent, Decl(parserharness.ts, 1558, 9))
 >minChar : Symbol(minChar, Decl(parserharness.ts, 1634, 39))
 >limChar : Symbol(limChar, Decl(parserharness.ts, 1634, 56))
 >newText : Symbol(newText, Decl(parserharness.ts, 1634, 73))
@@= skipped -37, +37 lines =@@
         }
 
         public getScriptContent(scriptIndex: number): string {
->getScriptContent : Symbol(TypeScriptLS.getScriptContent, Decl(parserharness.ts, 1643, 9))
+>getScriptContent : Symbol(getScriptContent, Decl(parserharness.ts, 1643, 9))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1645, 32))
 
             return this.scripts[scriptIndex].content;
->this.scripts[scriptIndex].content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts[scriptIndex].content : Symbol(content, Decl(parserharness.ts, 1549, 40))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1645, 32))
->content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
+>content : Symbol(content, Decl(parserharness.ts, 1549, 40))
         }
 
         //////////////////////////////////////////////////////////////////////
         // ILogger implementation
         //
         public information(): boolean { return false; }
->information : Symbol(TypeScriptLS.information, Decl(parserharness.ts, 1647, 9))
+>information : Symbol(information, Decl(parserharness.ts, 1647, 9))
 
         public debug(): boolean { return true; }
->debug : Symbol(TypeScriptLS.debug, Decl(parserharness.ts, 1652, 55))
+>debug : Symbol(debug, Decl(parserharness.ts, 1652, 55))
 
         public warning(): boolean { return true; }
->warning : Symbol(TypeScriptLS.warning, Decl(parserharness.ts, 1653, 48))
+>warning : Symbol(warning, Decl(parserharness.ts, 1653, 48))
 
         public error(): boolean { return true; }
->error : Symbol(TypeScriptLS.error, Decl(parserharness.ts, 1654, 50))
+>error : Symbol(error, Decl(parserharness.ts, 1654, 50))
 
         public fatal(): boolean { return true; }
->fatal : Symbol(TypeScriptLS.fatal, Decl(parserharness.ts, 1655, 48))
+>fatal : Symbol(fatal, Decl(parserharness.ts, 1655, 48))
 
         public log(s: string): void {
->log : Symbol(TypeScriptLS.log, Decl(parserharness.ts, 1656, 48))
+>log : Symbol(log, Decl(parserharness.ts, 1656, 48))
 >s : Symbol(s, Decl(parserharness.ts, 1658, 19))
 
             // For debugging...
@@= skipped -43, +43 lines =@@
         //
 
         public getCompilationSettings(): string/*json for Tools.CompilationSettings*/ {
->getCompilationSettings : Symbol(TypeScriptLS.getCompilationSettings, Decl(parserharness.ts, 1661, 9))
+>getCompilationSettings : Symbol(getCompilationSettings, Decl(parserharness.ts, 1661, 9))
 
             return ""; // i.e. default settings
         }
 
         public getScriptCount(): number {
->getScriptCount : Symbol(TypeScriptLS.getScriptCount, Decl(parserharness.ts, 1669, 9))
+>getScriptCount : Symbol(getScriptCount, Decl(parserharness.ts, 1669, 9))
 
             return this.scripts.length;
->this.scripts.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
         }
 
         public getScriptSourceText(scriptIndex: number, start: number, end: number): string {
->getScriptSourceText : Symbol(TypeScriptLS.getScriptSourceText, Decl(parserharness.ts, 1673, 9))
+>getScriptSourceText : Symbol(getScriptSourceText, Decl(parserharness.ts, 1673, 9))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1675, 35))
 >start : Symbol(start, Decl(parserharness.ts, 1675, 55))
 >end : Symbol(end, Decl(parserharness.ts, 1675, 70))
 
             return this.scripts[scriptIndex].content.substring(start, end);
->this.scripts[scriptIndex].content.substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
->this.scripts[scriptIndex].content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts[scriptIndex].content.substring : Symbol(substring, Decl(lib.es5.d.ts, --, --))
+>this.scripts[scriptIndex].content : Symbol(content, Decl(parserharness.ts, 1549, 40))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1675, 35))
->content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
->substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
+>content : Symbol(content, Decl(parserharness.ts, 1549, 40))
+>substring : Symbol(substring, Decl(lib.es5.d.ts, --, --))
 >start : Symbol(start, Decl(parserharness.ts, 1675, 55))
 >end : Symbol(end, Decl(parserharness.ts, 1675, 70))
         }
 
         public getScriptSourceLength(scriptIndex: number): number {
->getScriptSourceLength : Symbol(TypeScriptLS.getScriptSourceLength, Decl(parserharness.ts, 1677, 9))
+>getScriptSourceLength : Symbol(getScriptSourceLength, Decl(parserharness.ts, 1677, 9))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1679, 37))
 
             return this.scripts[scriptIndex].content.length;
->this.scripts[scriptIndex].content.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
->this.scripts[scriptIndex].content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts[scriptIndex].content.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>this.scripts[scriptIndex].content : Symbol(content, Decl(parserharness.ts, 1549, 40))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1679, 37))
->content : Symbol(ScriptInfo.content, Decl(parserharness.ts, 1549, 40))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>content : Symbol(content, Decl(parserharness.ts, 1549, 40))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
         }
 
         public getScriptId(scriptIndex: number): string {
->getScriptId : Symbol(TypeScriptLS.getScriptId, Decl(parserharness.ts, 1681, 9))
+>getScriptId : Symbol(getScriptId, Decl(parserharness.ts, 1681, 9))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1683, 27))
 
             return this.scripts[scriptIndex].name;
->this.scripts[scriptIndex].name : Symbol(ScriptInfo.name, Decl(parserharness.ts, 1549, 20))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts[scriptIndex].name : Symbol(name, Decl(parserharness.ts, 1549, 20))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1683, 27))
->name : Symbol(ScriptInfo.name, Decl(parserharness.ts, 1549, 20))
+>name : Symbol(name, Decl(parserharness.ts, 1549, 20))
         }
 
         public getScriptIsResident(scriptIndex: number): boolean {
->getScriptIsResident : Symbol(TypeScriptLS.getScriptIsResident, Decl(parserharness.ts, 1685, 9))
+>getScriptIsResident : Symbol(getScriptIsResident, Decl(parserharness.ts, 1685, 9))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1687, 35))
 
             return this.scripts[scriptIndex].isResident;
->this.scripts[scriptIndex].isResident : Symbol(ScriptInfo.isResident, Decl(parserharness.ts, 1549, 64))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts[scriptIndex].isResident : Symbol(isResident, Decl(parserharness.ts, 1549, 64))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1687, 35))
->isResident : Symbol(ScriptInfo.isResident, Decl(parserharness.ts, 1549, 64))
+>isResident : Symbol(isResident, Decl(parserharness.ts, 1549, 64))
         }
 
         public getScriptVersion(scriptIndex: number): number {
->getScriptVersion : Symbol(TypeScriptLS.getScriptVersion, Decl(parserharness.ts, 1689, 9))
+>getScriptVersion : Symbol(getScriptVersion, Decl(parserharness.ts, 1689, 9))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1691, 32))
 
             return this.scripts[scriptIndex].version;
->this.scripts[scriptIndex].version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts[scriptIndex].version : Symbol(version, Decl(parserharness.ts, 1545, 29))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1691, 32))
->version : Symbol(ScriptInfo.version, Decl(parserharness.ts, 1545, 29))
+>version : Symbol(version, Decl(parserharness.ts, 1545, 29))
         }
 
         public getScriptEditRangeSinceVersion(scriptIndex: number, scriptVersion: number): string {
->getScriptEditRangeSinceVersion : Symbol(TypeScriptLS.getScriptEditRangeSinceVersion, Decl(parserharness.ts, 1693, 9))
+>getScriptEditRangeSinceVersion : Symbol(getScriptEditRangeSinceVersion, Decl(parserharness.ts, 1693, 9))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1695, 46))
 >scriptVersion : Symbol(scriptVersion, Decl(parserharness.ts, 1695, 66))
 
             var range = this.scripts[scriptIndex].getEditRangeSinceVersion(scriptVersion);
 >range : Symbol(range, Decl(parserharness.ts, 1696, 15))
->this.scripts[scriptIndex].getEditRangeSinceVersion : Symbol(ScriptInfo.getEditRangeSinceVersion, Decl(parserharness.ts, 1579, 9))
->this.scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>this.scripts[scriptIndex].getEditRangeSinceVersion : Symbol(getEditRangeSinceVersion, Decl(parserharness.ts, 1579, 9))
+>this.scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->scripts : Symbol(TypeScriptLS.scripts, Decl(parserharness.ts, 1604, 57))
+>scripts : Symbol(scripts, Decl(parserharness.ts, 1604, 57))
 >scriptIndex : Symbol(scriptIndex, Decl(parserharness.ts, 1695, 46))
->getEditRangeSinceVersion : Symbol(ScriptInfo.getEditRangeSinceVersion, Decl(parserharness.ts, 1579, 9))
+>getEditRangeSinceVersion : Symbol(getEditRangeSinceVersion, Decl(parserharness.ts, 1579, 9))
 >scriptVersion : Symbol(scriptVersion, Decl(parserharness.ts, 1695, 66))
 
             var result = (range.minChar + "," + range.limChar + "," + range.delta);
@@= skipped -118, +118 lines =@@
          *  To access the non-shim (i.e. actual) language service, use the "ls.languageService" property.
          */
         public getLanguageService(): Services.ILanguageServiceShim {
->getLanguageService : Symbol(TypeScriptLS.getLanguageService, Decl(parserharness.ts, 1699, 9))
+>getLanguageService : Symbol(getLanguageService, Decl(parserharness.ts, 1699, 9))
 >Services : Symbol(Services)
->ILanguageServiceShim : Symbol(Services.ILanguageServiceShim)
+>ILanguageServiceShim : Symbol(ILanguageServiceShim)
 
             var ls = new Services.TypeScriptServicesFactory().createLanguageServiceShim(this);
 >ls : Symbol(ls, Decl(parserharness.ts, 1705, 15))
@@= skipped -12, +12 lines =@@
 >ls : Symbol(ls, Decl(parserharness.ts, 1705, 15))
 
             this.ls = ls;
->this.ls : Symbol(TypeScriptLS.ls, Decl(parserharness.ts, 1603, 76))
+>this.ls : Symbol(ls, Decl(parserharness.ts, 1603, 76))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->ls : Symbol(TypeScriptLS.ls, Decl(parserharness.ts, 1603, 76))
+>ls : Symbol(ls, Decl(parserharness.ts, 1603, 76))
 >ls : Symbol(ls, Decl(parserharness.ts, 1705, 15))
 
             return ls;
@@= skipped -11, +11 lines =@@
 
         /** Parse file given its source text */
         public parseSourceText(fileName: string, sourceText: TypeScript.ISourceText): TypeScript.Script {
->parseSourceText : Symbol(TypeScriptLS.parseSourceText, Decl(parserharness.ts, 1709, 9))
+>parseSourceText : Symbol(parseSourceText, Decl(parserharness.ts, 1709, 9))
 >fileName : Symbol(fileName, Decl(parserharness.ts, 1712, 31))
 >sourceText : Symbol(sourceText, Decl(parserharness.ts, 1712, 48))
 >TypeScript : Symbol(TypeScript)
->ISourceText : Symbol(TypeScript.ISourceText)
+>ISourceText : Symbol(ISourceText)
 >TypeScript : Symbol(TypeScript)
->Script : Symbol(TypeScript.Script)
+>Script : Symbol(Script)
 
             var parser = new TypeScript.Parser();
 >parser : Symbol(parser, Decl(parserharness.ts, 1713, 15))
@@= skipped -33, +33 lines =@@
 
         /** Parse a file on disk given its filename */
         public parseFile(fileName: string) {
->parseFile : Symbol(TypeScriptLS.parseFile, Decl(parserharness.ts, 1719, 9))
+>parseFile : Symbol(parseFile, Decl(parserharness.ts, 1719, 9))
 >fileName : Symbol(fileName, Decl(parserharness.ts, 1722, 25))
 
             var sourceText = new TypeScript.StringSourceText(IO.readFile(fileName))
@@= skipped -9, +9 lines =@@
 >fileName : Symbol(fileName, Decl(parserharness.ts, 1722, 25))
 
             return this.parseSourceText(fileName, sourceText);
->this.parseSourceText : Symbol(TypeScriptLS.parseSourceText, Decl(parserharness.ts, 1709, 9))
+>this.parseSourceText : Symbol(parseSourceText, Decl(parserharness.ts, 1709, 9))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->parseSourceText : Symbol(TypeScriptLS.parseSourceText, Decl(parserharness.ts, 1709, 9))
+>parseSourceText : Symbol(parseSourceText, Decl(parserharness.ts, 1709, 9))
 >fileName : Symbol(fileName, Decl(parserharness.ts, 1722, 25))
 >sourceText : Symbol(sourceText, Decl(parserharness.ts, 1723, 15))
         }
@@= skipped -12, +12 lines =@@
          * @param col 1 based index
         */
         public lineColToPosition(fileName: string, line: number, col: number): number {
->lineColToPosition : Symbol(TypeScriptLS.lineColToPosition, Decl(parserharness.ts, 1725, 9))
+>lineColToPosition : Symbol(lineColToPosition, Decl(parserharness.ts, 1725, 9))
 >fileName : Symbol(fileName, Decl(parserharness.ts, 1731, 33))
 >line : Symbol(line, Decl(parserharness.ts, 1731, 50))
 >col : Symbol(col, Decl(parserharness.ts, 1731, 64))
 
             var script = this.ls.languageService.getScriptAST(fileName);
 >script : Symbol(script, Decl(parserharness.ts, 1732, 15))
->this.ls : Symbol(TypeScriptLS.ls, Decl(parserharness.ts, 1603, 76))
+>this.ls : Symbol(ls, Decl(parserharness.ts, 1603, 76))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->ls : Symbol(TypeScriptLS.ls, Decl(parserharness.ts, 1603, 76))
+>ls : Symbol(ls, Decl(parserharness.ts, 1603, 76))
 >fileName : Symbol(fileName, Decl(parserharness.ts, 1731, 33))
 
             assert.notNull(script);
@@= skipped -40, +40 lines =@@
          * @param col 0 based index
         */
         public positionToZeroBasedLineCol(fileName: string, position: number): TypeScript.ILineCol {
->positionToZeroBasedLineCol : Symbol(TypeScriptLS.positionToZeroBasedLineCol, Decl(parserharness.ts, 1739, 9))
+>positionToZeroBasedLineCol : Symbol(positionToZeroBasedLineCol, Decl(parserharness.ts, 1739, 9))
 >fileName : Symbol(fileName, Decl(parserharness.ts, 1745, 42))
 >position : Symbol(position, Decl(parserharness.ts, 1745, 59))
 >TypeScript : Symbol(TypeScript)
->ILineCol : Symbol(TypeScript.ILineCol)
+>ILineCol : Symbol(ILineCol)
 
             var script = this.ls.languageService.getScriptAST(fileName);
 >script : Symbol(script, Decl(parserharness.ts, 1746, 15))
->this.ls : Symbol(TypeScriptLS.ls, Decl(parserharness.ts, 1603, 76))
+>this.ls : Symbol(ls, Decl(parserharness.ts, 1603, 76))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->ls : Symbol(TypeScriptLS.ls, Decl(parserharness.ts, 1603, 76))
+>ls : Symbol(ls, Decl(parserharness.ts, 1603, 76))
 >fileName : Symbol(fileName, Decl(parserharness.ts, 1745, 42))
 
             assert.notNull(script);
@@= skipped -36, +36 lines =@@
 
         /** Verify that applying edits to sourceFileName result in the content of the file baselineFileName */
         public checkEdits(sourceFileName: string, baselineFileName: string, edits: Services.TextEdit[]) {
->checkEdits : Symbol(TypeScriptLS.checkEdits, Decl(parserharness.ts, 1754, 9))
+>checkEdits : Symbol(checkEdits, Decl(parserharness.ts, 1754, 9))
 >sourceFileName : Symbol(sourceFileName, Decl(parserharness.ts, 1757, 26))
 >baselineFileName : Symbol(baselineFileName, Decl(parserharness.ts, 1757, 49))
 >edits : Symbol(edits, Decl(parserharness.ts, 1757, 75))
 >Services : Symbol(Services)
->TextEdit : Symbol(Services.TextEdit)
+>TextEdit : Symbol(TextEdit)
 
             var script = readFile(sourceFileName);
 >script : Symbol(script, Decl(parserharness.ts, 1758, 15))
@@= skipped -14, +14 lines =@@
 
             var formattedScript = this.applyEdits(script, edits);
 >formattedScript : Symbol(formattedScript, Decl(parserharness.ts, 1759, 15))
->this.applyEdits : Symbol(TypeScriptLS.applyEdits, Decl(parserharness.ts, 1764, 9))
+>this.applyEdits : Symbol(applyEdits, Decl(parserharness.ts, 1764, 9))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->applyEdits : Symbol(TypeScriptLS.applyEdits, Decl(parserharness.ts, 1764, 9))
+>applyEdits : Symbol(applyEdits, Decl(parserharness.ts, 1764, 9))
 >script : Symbol(script, Decl(parserharness.ts, 1758, 15))
 >edits : Symbol(edits, Decl(parserharness.ts, 1757, 75))
 
@@= skipped -25, +25 lines =@@
 
         /** Apply an array of text edits to a string, and return the resulting string. */
         public applyEdits(content: string, edits: Services.TextEdit[]): string {
->applyEdits : Symbol(TypeScriptLS.applyEdits, Decl(parserharness.ts, 1764, 9))
+>applyEdits : Symbol(applyEdits, Decl(parserharness.ts, 1764, 9))
 >content : Symbol(content, Decl(parserharness.ts, 1768, 26))
 >edits : Symbol(edits, Decl(parserharness.ts, 1768, 42))
 >Services : Symbol(Services)
->TextEdit : Symbol(Services.TextEdit)
+>TextEdit : Symbol(TextEdit)
 
             var result = content;
 >result : Symbol(result, Decl(parserharness.ts, 1769, 15))
@@= skipped -12, +12 lines =@@
 
             edits = this.normalizeEdits(edits);
 >edits : Symbol(edits, Decl(parserharness.ts, 1768, 42))
->this.normalizeEdits : Symbol(TypeScriptLS.normalizeEdits, Decl(parserharness.ts, 1780, 9))
+>this.normalizeEdits : Symbol(normalizeEdits, Decl(parserharness.ts, 1780, 9))
 >this : Symbol(TypeScriptLS, Decl(parserharness.ts, 1601, 5))
->normalizeEdits : Symbol(TypeScriptLS.normalizeEdits, Decl(parserharness.ts, 1780, 9))
+>normalizeEdits : Symbol(normalizeEdits, Decl(parserharness.ts, 1780, 9))
 >edits : Symbol(edits, Decl(parserharness.ts, 1768, 42))
 
             for (var i = edits.length - 1; i >= 0; i--) {
 >i : Symbol(i, Decl(parserharness.ts, 1772, 20))
->edits.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>edits.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >edits : Symbol(edits, Decl(parserharness.ts, 1768, 42))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 1772, 20))
 >i : Symbol(i, Decl(parserharness.ts, 1772, 20))
 
@@= skipped -20, +20 lines =@@
 
                 var prefix = result.substring(0, edit.minChar);
 >prefix : Symbol(prefix, Decl(parserharness.ts, 1774, 19))
->result.substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
+>result.substring : Symbol(substring, Decl(lib.es5.d.ts, --, --))
 >result : Symbol(result, Decl(parserharness.ts, 1769, 15))
->substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
+>substring : Symbol(substring, Decl(lib.es5.d.ts, --, --))
 >edit : Symbol(edit, Decl(parserharness.ts, 1773, 19))
 
                 var middle = edit.text;
@@= skipped -11, +11 lines =@@
 
                 var suffix = result.substring(edit.limChar);
 >suffix : Symbol(suffix, Decl(parserharness.ts, 1776, 19))
->result.substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
+>result.substring : Symbol(substring, Decl(lib.es5.d.ts, --, --))
 >result : Symbol(result, Decl(parserharness.ts, 1769, 15))
->substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
+>substring : Symbol(substring, Decl(lib.es5.d.ts, --, --))
 >edit : Symbol(edit, Decl(parserharness.ts, 1773, 19))
 
                 result = prefix + middle + suffix;
@@= skipped -17, +17 lines =@@
 
         /** Normalize an array of edits by removing overlapping entries and sorting entries on the minChar position. */
         private normalizeEdits(edits: Services.TextEdit[]): Services.TextEdit[] {
->normalizeEdits : Symbol(TypeScriptLS.normalizeEdits, Decl(parserharness.ts, 1780, 9))
+>normalizeEdits : Symbol(normalizeEdits, Decl(parserharness.ts, 1780, 9))
 >edits : Symbol(edits, Decl(parserharness.ts, 1783, 31))
 >Services : Symbol(Services)
->TextEdit : Symbol(Services.TextEdit)
+>TextEdit : Symbol(TextEdit)
 >Services : Symbol(Services)
->TextEdit : Symbol(Services.TextEdit)
+>TextEdit : Symbol(TextEdit)
 
             var result: Services.TextEdit[] = [];
 >result : Symbol(result, Decl(parserharness.ts, 1784, 15))
 >Services : Symbol(Services)
->TextEdit : Symbol(Services.TextEdit)
+>TextEdit : Symbol(TextEdit)
 
             function mapEdits(edits: Services.TextEdit[]): { edit: Services.TextEdit; index: number; }[] {
 >mapEdits : Symbol(mapEdits, Decl(parserharness.ts, 1784, 49))
 >edits : Symbol(edits, Decl(parserharness.ts, 1786, 30))
 >Services : Symbol(Services)
->TextEdit : Symbol(Services.TextEdit)
+>TextEdit : Symbol(TextEdit)
 >edit : Symbol(edit, Decl(parserharness.ts, 1786, 60))
 >Services : Symbol(Services)
->TextEdit : Symbol(Services.TextEdit)
+>TextEdit : Symbol(TextEdit)
 >index : Symbol(index, Decl(parserharness.ts, 1786, 85))
 
                 var result = [];
@@= skipped -28, +28 lines =@@
                 for (var i = 0; i < edits.length; i++) {
 >i : Symbol(i, Decl(parserharness.ts, 1788, 24))
 >i : Symbol(i, Decl(parserharness.ts, 1788, 24))
->edits.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>edits.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >edits : Symbol(edits, Decl(parserharness.ts, 1786, 30))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserharness.ts, 1788, 24))
 
                     result.push({ edit: edits[i], index: i });
->result.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>result.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >result : Symbol(result, Decl(parserharness.ts, 1787, 19))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >edit : Symbol(edit, Decl(parserharness.ts, 1789, 33))
 >edits : Symbol(edits, Decl(parserharness.ts, 1786, 30))
 >i : Symbol(i, Decl(parserharness.ts, 1788, 24))
@@= skipped -21, +21 lines =@@
 
             var temp = mapEdits(edits).sort(function (a, b) {
 >temp : Symbol(temp, Decl(parserharness.ts, 1794, 15))
->mapEdits(edits).sort : Symbol(Array.sort, Decl(lib.es5.d.ts, --, --))
+>mapEdits(edits).sort : Symbol(sort, Decl(lib.es5.d.ts, --, --))
 >mapEdits : Symbol(mapEdits, Decl(parserharness.ts, 1784, 49))
 >edits : Symbol(edits, Decl(parserharness.ts, 1783, 31))
->sort : Symbol(Array.sort, Decl(lib.es5.d.ts, --, --))
+>sort : Symbol(sort, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(parserharness.ts, 1794, 54))
 >b : Symbol(b, Decl(parserharness.ts, 1794, 56))
 
@@= skipped -41, +41 lines =@@
 
             while (current < temp.length) {
 >current : Symbol(current, Decl(parserharness.ts, 1801, 15))
->temp.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>temp.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >temp : Symbol(temp, Decl(parserharness.ts, 1794, 15))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
                 var currentEdit = temp[current].edit;
 >currentEdit : Symbol(currentEdit, Decl(parserharness.ts, 1804, 19))
@@= skipped -14, +14 lines =@@
                 // Last edit
                 if (next >= temp.length) {
 >next : Symbol(next, Decl(parserharness.ts, 1802, 15))
->temp.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>temp.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >temp : Symbol(temp, Decl(parserharness.ts, 1794, 15))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
                     result.push(currentEdit);
->result.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>result.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >result : Symbol(result, Decl(parserharness.ts, 1784, 15))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >currentEdit : Symbol(currentEdit, Decl(parserharness.ts, 1804, 19))
 
                     current++;
@@= skipped -32, +32 lines =@@
 >gap : Symbol(gap, Decl(parserharness.ts, 1814, 19))
 
                     result.push(currentEdit);
->result.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>result.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >result : Symbol(result, Decl(parserharness.ts, 1784, 15))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >currentEdit : Symbol(currentEdit, Decl(parserharness.ts, 1804, 19))
 
                     current = next;
@@= skipped -37, +37 lines =@@
         }
 
         public getHostSettings(): string {
->getHostSettings : Symbol(TypeScriptLS.getHostSettings, Decl(parserharness.ts, 1836, 9))
+>getHostSettings : Symbol(getHostSettings, Decl(parserharness.ts, 1836, 9))
 
             return JSON.stringify({ usePullLanguageService: usePull });
->JSON.stringify : Symbol(JSON.stringify, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>JSON.stringify : Symbol(stringify, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >JSON : Symbol(JSON, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->stringify : Symbol(JSON.stringify, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>stringify : Symbol(stringify, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >usePullLanguageService : Symbol(usePullLanguageService, Decl(parserharness.ts, 1839, 35))
 >usePull : Symbol(usePull, Decl(parserharness.ts, 58, 14))
         }
@@= skipped -24, +24 lines =@@
 >block : Symbol(block, Decl(parserharness.ts, 1844, 49))
 
         if (Runnable.currentStack.length === 0) {
->Runnable.currentStack.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->Runnable.currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
+>Runnable.currentStack.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>Runnable.currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
             Runnable.currentStack.push(currentRun);
->Runnable.currentStack.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->Runnable.currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
+>Runnable.currentStack.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>Runnable.currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >currentRun : Symbol(currentRun, Decl(parserharness.ts, 2073, 7))
         }
 
         Runnable.currentStack[Runnable.currentStack.length - 1].addChild(newScenario);
->Runnable.currentStack[Runnable.currentStack.length - 1].addChild : Symbol(Runnable.addChild, Decl(parserharness.ts, 286, 41))
->Runnable.currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
+>Runnable.currentStack[Runnable.currentStack.length - 1].addChild : Symbol(addChild, Decl(parserharness.ts, 286, 41))
+>Runnable.currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
->Runnable.currentStack.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->Runnable.currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
+>currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
+>Runnable.currentStack.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>Runnable.currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->addChild : Symbol(Runnable.addChild, Decl(parserharness.ts, 286, 41))
+>currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>addChild : Symbol(addChild, Decl(parserharness.ts, 286, 41))
 >newScenario : Symbol(newScenario, Decl(parserharness.ts, 1845, 11))
     }
     export function it(description: string, block: () => void ) {
@@= skipped -40, +40 lines =@@
 >block : Symbol(block, Decl(parserharness.ts, 1853, 43))
 
         Runnable.currentStack[Runnable.currentStack.length - 1].addChild(testCase);
->Runnable.currentStack[Runnable.currentStack.length - 1].addChild : Symbol(Runnable.addChild, Decl(parserharness.ts, 286, 41))
->Runnable.currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
+>Runnable.currentStack[Runnable.currentStack.length - 1].addChild : Symbol(addChild, Decl(parserharness.ts, 286, 41))
+>Runnable.currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
->Runnable.currentStack.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->Runnable.currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
+>currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
+>Runnable.currentStack.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>Runnable.currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->currentStack : Symbol(Runnable.currentStack, Decl(parserharness.ts, 271, 70))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->addChild : Symbol(Runnable.addChild, Decl(parserharness.ts, 286, 41))
+>currentStack : Symbol(currentStack, Decl(parserharness.ts, 271, 70))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>addChild : Symbol(addChild, Decl(parserharness.ts, 286, 41))
 >testCase : Symbol(testCase, Decl(parserharness.ts, 1854, 11))
     }
 
@@= skipped -20, +20 lines =@@
 >process : Symbol(process, Decl(parserharness.ts, 47, 1))
 
             process.on('uncaughtException', Runnable.handleError);
->process.on : Symbol(process.on, Decl(parserharness.ts, 50, 56))
+>process.on : Symbol(on, Decl(parserharness.ts, 50, 56))
 >process : Symbol(process, Decl(parserharness.ts, 47, 1))
->on : Symbol(process.on, Decl(parserharness.ts, 50, 56))
->Runnable.handleError : Symbol(Runnable.handleError, Decl(parserharness.ts, 347, 9))
+>on : Symbol(on, Decl(parserharness.ts, 50, 56))
+>Runnable.handleError : Symbol(handleError, Decl(parserharness.ts, 347, 9))
 >Runnable : Symbol(Runnable, Decl(parserharness.ts, 269, 5))
->handleError : Symbol(Runnable.handleError, Decl(parserharness.ts, 347, 9))
+>handleError : Symbol(handleError, Decl(parserharness.ts, 347, 9))
         }
 
         Baseline.reset();
->Baseline.reset : Symbol(Baseline.reset, Decl(parserharness.ts, 1946, 9))
+>Baseline.reset : Symbol(reset, Decl(parserharness.ts, 1946, 9))
 >Baseline : Symbol(Baseline, Decl(parserharness.ts, 1906, 5))
->reset : Symbol(Baseline.reset, Decl(parserharness.ts, 1946, 9))
+>reset : Symbol(reset, Decl(parserharness.ts, 1946, 9))
 
         currentRun.run();
->currentRun.run : Symbol(Run.run, Decl(parserharness.ts, 466, 9))
+>currentRun.run : Symbol(run, Decl(parserharness.ts, 466, 9))
 >currentRun : Symbol(currentRun, Decl(parserharness.ts, 2073, 7))
->run : Symbol(Run.run, Decl(parserharness.ts, 466, 9))
+>run : Symbol(run, Decl(parserharness.ts, 466, 9))
     }
 
     /** Runs TypeScript or Javascript code. */
@@= skipped -40, +40 lines =@@
 >runString : Symbol(runString, Decl(parserharness.ts, 1899, 9))
 >readFile : Symbol(readFile, Decl(parserharness.ts, 207, 5))
 >path : Symbol(path, Decl(parserharness.ts, 1869, 38))
->path.match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
+>path.match : Symbol(match, Decl(lib.es5.d.ts, --, --))
 >path : Symbol(path, Decl(parserharness.ts, 1869, 38))
->match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
->0 : Symbol(RegExpMatchArray[0], Decl(lib.es5.d.ts, --, --))
+>match : Symbol(match, Decl(lib.es5.d.ts, --, --))
+>0 : Symbol(0, Decl(lib.es5.d.ts, --, --))
 >callback : Symbol(callback, Decl(parserharness.ts, 1869, 51))
         }
 
@@= skipped -93, +93 lines =@@
 >result : Symbol(result, Decl(parserharness.ts, 1901, 90))
 
             Compiler.compileString(code, unitName, function (res) {
->Compiler.compileString : Symbol(Compiler.compileString, Decl(parserharness.ts, 1341, 9))
+>Compiler.compileString : Symbol(compileString, Decl(parserharness.ts, 1341, 9))
 >Compiler : Symbol(Compiler, Decl(parserharness.ts, 683, 5))
->compileString : Symbol(Compiler.compileString, Decl(parserharness.ts, 1341, 9))
+>compileString : Symbol(compileString, Decl(parserharness.ts, 1341, 9))
 >code : Symbol(code, Decl(parserharness.ts, 1901, 34))
 >unitName : Symbol(unitName, Decl(parserharness.ts, 1901, 47))
 >res : Symbol(res, Decl(parserharness.ts, 1902, 61))
 
                 runJSString(res.code, callback);
 >runJSString : Symbol(runJSString, Decl(parserharness.ts, 1872, 9))
->res.code : Symbol(Compiler.CompilerResult.code, Decl(parserharness.ts, 1170, 37))
+>res.code : Symbol(code, Decl(parserharness.ts, 1170, 37))
 >res : Symbol(res, Decl(parserharness.ts, 1902, 61))
->code : Symbol(Compiler.CompilerResult.code, Decl(parserharness.ts, 1170, 37))
+>code : Symbol(code, Decl(parserharness.ts, 1170, 37))
 >callback : Symbol(callback, Decl(parserharness.ts, 1901, 65))
 
             });
@@= skipped -68, +68 lines =@@
 >BaselineOptions : Symbol(BaselineOptions, Decl(parserharness.ts, 1924, 44))
 
             LineEndingSensitive?: boolean;
->LineEndingSensitive : Symbol(BaselineOptions.LineEndingSensitive, Decl(parserharness.ts, 1926, 42))
+>LineEndingSensitive : Symbol(LineEndingSensitive, Decl(parserharness.ts, 1926, 42))
         }
 
         function localPath(filename: string) {
@@= skipped -79, +79 lines =@@
 
                 reportContent = reportContent.replace(htmlTrailer, '');
 >reportContent : Symbol(reportContent, Decl(parserharness.ts, 1955, 15))
->reportContent.replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>reportContent.replace : Symbol(replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >reportContent : Symbol(reportContent, Decl(parserharness.ts, 1955, 15))
->replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>replace : Symbol(replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >htmlTrailer : Symbol(htmlTrailer, Decl(parserharness.ts, 1913, 11))
 
             } else {
@@= skipped -113, +113 lines =@@
             var lineEndingSensitive = opts && opts.LineEndingSensitive;
 >lineEndingSensitive : Symbol(lineEndingSensitive, Decl(parserharness.ts, 2010, 15))
 >opts : Symbol(opts, Decl(parserharness.ts, 1991, 76))
->opts.LineEndingSensitive : Symbol(BaselineOptions.LineEndingSensitive, Decl(parserharness.ts, 1926, 42))
+>opts.LineEndingSensitive : Symbol(LineEndingSensitive, Decl(parserharness.ts, 1926, 42))
 >opts : Symbol(opts, Decl(parserharness.ts, 1991, 76))
->LineEndingSensitive : Symbol(BaselineOptions.LineEndingSensitive, Decl(parserharness.ts, 1926, 42))
+>LineEndingSensitive : Symbol(LineEndingSensitive, Decl(parserharness.ts, 1926, 42))
 
             if (!lineEndingSensitive) {
 >lineEndingSensitive : Symbol(lineEndingSensitive, Decl(parserharness.ts, 2010, 15))
 
                 expected = expected.replace(/\r\n?/g, '\n')
 >expected : Symbol(expected, Decl(parserharness.ts, 2005, 15))
->expected.replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>expected.replace : Symbol(replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >expected : Symbol(expected, Decl(parserharness.ts, 2005, 15))
->replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>replace : Symbol(replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
                 actual = actual.replace(/\r\n?/g, '\n')
 >actual : Symbol(actual, Decl(parserharness.ts, 1991, 35))
->actual.replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>actual.replace : Symbol(replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >actual : Symbol(actual, Decl(parserharness.ts, 1991, 35))
->replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>replace : Symbol(replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
             }
 
             return { expected: expected, actual: actual };
