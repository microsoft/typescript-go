--- old.importCallExpressionInSystem4.types
+++ new.importCallExpressionInSystem4.types
@@= skipped -25, +25 lines =@@
 >C : C

     private myModule = import("./0");
->myModule : Promise<typeof import("0")>
->import("./0") : Promise<typeof import("0")>
+>myModule : Promise<typeof import("./0")>
+>import("./0") : Promise<typeof import("./0")>
 >"./0" : "./0"

     method() {
 >method : () => void

         const loadAsync = import("./0");
->loadAsync : Promise<typeof import("0")>
->import("./0") : Promise<typeof import("0")>
+>loadAsync : Promise<typeof import("./0")>
+>import("./0") : Promise<typeof import("./0")>
 >"./0" : "./0"

         this.myModule.then(Zero => {
 >this.myModule.then(Zero => {            console.log(Zero.foo());        }, async err => {            console.log(err);            let one = await import("./1");            console.log(one.backup());        }) : Promise<void>
->this.myModule.then : <TResult1 = typeof import("0"), TResult2 = never>(onfulfilled?: (value: typeof import("0")) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
->this.myModule : Promise<typeof import("0")>
+>this.myModule.then : <TResult1 = typeof import("./0"), TResult2 = never>(onfulfilled?: (value: typeof import("./0")) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
+>this.myModule : Promise<typeof import("./0")>
 >this : this
->myModule : Promise<typeof import("0")>
->then : <TResult1 = typeof import("0"), TResult2 = never>(onfulfilled?: (value: typeof import("0")) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
->Zero => {            console.log(Zero.foo());        } : (Zero: typeof import("0")) => void
->Zero : typeof import("0")
+>myModule : Promise<typeof import("./0")>
+>then : <TResult1 = typeof import("./0"), TResult2 = never>(onfulfilled?: (value: typeof import("./0")) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
+>Zero => {            console.log(Zero.foo());        } : (Zero: typeof import("./0")) => void
+>Zero : typeof import("./0")

             console.log(Zero.foo());
 >console.log(Zero.foo()) : any
@@= skipped -29, +29 lines =@@
 >log : any
 >Zero.foo() : string
 >Zero.foo : () => string
->Zero : typeof import("0")
+>Zero : typeof import("./0")
 >foo : () => string

         }, async err => {
@@= skipped -15, +15 lines =@@
 >err : any

             let one = await import("./1");
->one : typeof import("1")
->await import("./1") : typeof import("1")
->import("./1") : Promise<typeof import("1")>
+>one : typeof import("./1")
+>await import("./1") : typeof import("./1")
+>import("./1") : Promise<typeof import("./1")>
 >"./1" : "./1"

             console.log(one.backup());
@@= skipped -12, +12 lines =@@
 >log : any
 >one.backup() : string
 >one.backup : () => string
->one : typeof import("1")
+>one : typeof import("./1")
 >backup : () => string

         });
@@= skipped -11, +11 lines =@@
 >D : D

     private myModule = import("./0");
->myModule : Promise<typeof import("0")>
->import("./0") : Promise<typeof import("0")>
+>myModule : Promise<typeof import("./0")>
+>import("./0") : Promise<typeof import("./0")>
 >"./0" : "./0"

     method() {
 >method : () => void

         const loadAsync = import("./0");
->loadAsync : Promise<typeof import("0")>
->import("./0") : Promise<typeof import("0")>
+>loadAsync : Promise<typeof import("./0")>
+>import("./0") : Promise<typeof import("./0")>
 >"./0" : "./0"

         this.myModule.then(Zero => {
 >this.myModule.then(Zero => {            console.log(Zero.foo());        }, async err => {            console.log(err);            let one = await import("./1");            console.log(one.backup());        }) : Promise<void>
->this.myModule.then : <TResult1 = typeof import("0"), TResult2 = never>(onfulfilled?: (value: typeof import("0")) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
->this.myModule : Promise<typeof import("0")>
+>this.myModule.then : <TResult1 = typeof import("./0"), TResult2 = never>(onfulfilled?: (value: typeof import("./0")) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
+>this.myModule : Promise<typeof import("./0")>
 >this : this
->myModule : Promise<typeof import("0")>
->then : <TResult1 = typeof import("0"), TResult2 = never>(onfulfilled?: (value: typeof import("0")) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
->Zero => {            console.log(Zero.foo());        } : (Zero: typeof import("0")) => void
->Zero : typeof import("0")
+>myModule : Promise<typeof import("./0")>
+>then : <TResult1 = typeof import("./0"), TResult2 = never>(onfulfilled?: (value: typeof import("./0")) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
+>Zero => {            console.log(Zero.foo());        } : (Zero: typeof import("./0")) => void
+>Zero : typeof import("./0")

             console.log(Zero.foo());
 >console.log(Zero.foo()) : any
@@= skipped -29, +29 lines =@@
 >log : any
 >Zero.foo() : string
 >Zero.foo : () => string
->Zero : typeof import("0")
+>Zero : typeof import("./0")
 >foo : () => string

         }, async err => {
@@= skipped -15, +15 lines =@@
 >err : any

             let one = await import("./1");
->one : typeof import("1")
->await import("./1") : typeof import("1")
->import("./1") : Promise<typeof import("1")>
+>one : typeof import("./1")
+>await import("./1") : typeof import("./1")
+>import("./1") : Promise<typeof import("./1")>
 >"./1" : "./1"

             console.log(one.backup());
@@= skipped -12, +12 lines =@@
 >log : any
 >one.backup() : string
 >one.backup : () => string
->one : typeof import("1")
+>one : typeof import("./1")
 >backup : () => string

         });