--- old.types.forAwait.es2018.2.errors.txt
+++ new.types.forAwait.es2018.2.errors.txt
@@= skipped -1, +1 lines =@@
 types.forAwait.es2018.2.ts(8,21): error TS2504: Type '{}' must have a '[Symbol.asyncIterator]()' method that returns an async iterator.
 types.forAwait.es2018.2.ts(10,16): error TS2322: Type 'number' is not assignable to type 'string'.
 types.forAwait.es2018.2.ts(12,16): error TS2322: Type 'number' is not assignable to type 'string'.
-types.forAwait.es2018.2.ts(14,21): error TS2488: Type 'AsyncIterable<number>' must have a '[Symbol.iterator]()' method that returns an iterator.
-types.forAwait.es2018.2.ts(16,15): error TS2488: Type 'AsyncIterable<number>' must have a '[Symbol.iterator]()' method that returns an iterator.
+types.forAwait.es2018.2.ts(14,21): error TS2488: Type 'AsyncIterable<number, any, any>' must have a '[Symbol.iterator]()' method that returns an iterator.
 
 
-==== types.forAwait.es2018.2.ts (6 errors) ====
+==== types.forAwait.es2018.2.ts (5 errors) ====
     declare const asyncIterable: AsyncIterable<number>;
     declare const iterable: Iterable<number>;
     async function f() {
@@= skipped -28, +27 lines =@@
         }
         for (const x of asyncIterable) {
                         ~~~~~~~~~~~~~
-!!! error TS2488: Type 'AsyncIterable<number>' must have a '[Symbol.iterator]()' method that returns an iterator.
+!!! error TS2488: Type 'AsyncIterable<number, any, any>' must have a '[Symbol.iterator]()' method that returns an iterator.
 !!! related TS2773 types.forAwait.es2018.2.ts:14:21: Did you forget to use 'await'?
         }
         for (y of asyncIterable) {
-                  ~~~~~~~~~~~~~
-!!! error TS2488: Type 'AsyncIterable<number>' must have a '[Symbol.iterator]()' method that returns an iterator.
-!!! related TS2773 types.forAwait.es2018.2.ts:16:15: Did you forget to use 'await'?
         }
     }
     
