--- old.jsdocTemplateTagDefault.js
+++ new.jsdocTemplateTagDefault.js
@@= skipped -128, +128 lines =@@

 //// [file.d.ts]
 /**
+ * @template {string | number} [T=string] - ok: defaults are permitted
+ * @typedef {[T]} A
+ */
+type A<T extends string | number = string> = [T];
+/** @type {A} */ declare const aDefault1: A;
+/** @type {A} */ declare const aDefault2: A;
+/** @type {A<string>} */ declare const aString: A<string>;
+/** @type {A<number>} */ declare const aNumber: A<number>;
+type B<T, U = T> = [T, U];
+type C<T extends string | number = > = [T];
+type D<T extends string | number = > = [T];
+type E<T extends string | number = string, U> = [T, U];
+type G<T = U, U = T> = [T, U];
+/**
  * @template T
  * @template [U=T] - ok: default can reference earlier type parameter
  * @typedef {[T, U]} B
@@= skipped -43, +57 lines =@@
  * @param {U} b
  */
 declare function f3<T = U, U = T>(a: T, b: U): void;
-/**
- * @template {string | number} [T=string] - ok: defaults are permitted
- * @typedef {[T]} A
- */
-/** @type {A} */ declare const aDefault1: A;
-/** @type {A} */ declare const aDefault2: A;
-/** @type {A<string>} */ declare const aString: A<string>;
-/** @type {A<number>} */ declare const aNumber: A<number>;
-type B<T, U = T> = [T, U];
-type C<T extends string | number = any> = [T];
-type D<T extends string | number = any> = [T];
-type E<T extends string | number = string, U> = [T, U];
-type G<T = U, U = T> = [T, U];
-type A<T extends string | number = string> = [T];