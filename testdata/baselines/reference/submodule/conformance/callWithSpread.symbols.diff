--- old.callWithSpread.symbols
+++ new.callWithSpread.symbols
@@= skipped -4, +4 lines =@@
 >X : Symbol(X, Decl(callWithSpread.ts, 0, 0))
 
     foo(x: number, y: number, ...z: string[]): X;
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >x : Symbol(x, Decl(callWithSpread.ts, 1, 8))
 >y : Symbol(y, Decl(callWithSpread.ts, 1, 18))
 >z : Symbol(z, Decl(callWithSpread.ts, 1, 29))
@@= skipped -40, +40 lines =@@
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
 
 obj.foo(1, 2, "abc");
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 
 obj.foo(1, 2, ...a);
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
 
 obj.foo(1, 2, ...a, "abc");
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
 
 obj.foo(1, 2, ...a).foo(1, 2, "abc");
->obj.foo(1, 2, ...a).foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo(1, 2, ...a).foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 
 obj.foo(1, 2, ...a).foo(1, 2, ...a);
->obj.foo(1, 2, ...a).foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo(1, 2, ...a).foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
 
 obj.foo(1, 2, ...a).foo(1, 2, ...a, "abc");
->obj.foo(1, 2, ...a).foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo(1, 2, ...a).foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
 
 (obj.foo)(1, 2, "abc");
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 
 (obj.foo)(1, 2, ...a);
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
 
 (obj.foo)(1, 2, ...a, "abc");
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
 
 ((obj.foo)(1, 2, ...a).foo)(1, 2, "abc");
->(obj.foo)(1, 2, ...a).foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>(obj.foo)(1, 2, ...a).foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 
 ((obj.foo)(1, 2, ...a).foo)(1, 2, ...a);
->(obj.foo)(1, 2, ...a).foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>(obj.foo)(1, 2, ...a).foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
 
 ((obj.foo)(1, 2, ...a).foo)(1, 2, ...a, "abc");
->(obj.foo)(1, 2, ...a).foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
->obj.foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>(obj.foo)(1, 2, ...a).foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
+>obj.foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >obj : Symbol(obj, Decl(callWithSpread.ts, 9, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
 
 xa[1].foo(1, 2, "abc");
->xa[1].foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>xa[1].foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >xa : Symbol(xa, Decl(callWithSpread.ts, 10, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 
 xa[1].foo(1, 2, ...a);
->xa[1].foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>xa[1].foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >xa : Symbol(xa, Decl(callWithSpread.ts, 10, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
 
 xa[1].foo(1, 2, ...a, "abc");
->xa[1].foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>xa[1].foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >xa : Symbol(xa, Decl(callWithSpread.ts, 10, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
 
 (<Function>xa[1].foo)(...[1, 2, "abc"]);
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->xa[1].foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>xa[1].foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 >xa : Symbol(xa, Decl(callWithSpread.ts, 10, 3))
->foo : Symbol(X.foo, Decl(callWithSpread.ts, 0, 13))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 0, 13))
 
 class C {
 >C : Symbol(C, Decl(callWithSpread.ts, 36, 40))
@@= skipped -117, +117 lines =@@
 >z : Symbol(z, Decl(callWithSpread.ts, 39, 37))
 
         this.foo(x, y);
->this.foo : Symbol(C.foo, Decl(callWithSpread.ts, 42, 5))
+>this.foo : Symbol(foo, Decl(callWithSpread.ts, 42, 5))
 >this : Symbol(C, Decl(callWithSpread.ts, 36, 40))
->foo : Symbol(C.foo, Decl(callWithSpread.ts, 42, 5))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 42, 5))
 >x : Symbol(x, Decl(callWithSpread.ts, 39, 16))
 >y : Symbol(y, Decl(callWithSpread.ts, 39, 26))
 
         this.foo(x, y, ...z);
->this.foo : Symbol(C.foo, Decl(callWithSpread.ts, 42, 5))
+>this.foo : Symbol(foo, Decl(callWithSpread.ts, 42, 5))
 >this : Symbol(C, Decl(callWithSpread.ts, 36, 40))
->foo : Symbol(C.foo, Decl(callWithSpread.ts, 42, 5))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 42, 5))
 >x : Symbol(x, Decl(callWithSpread.ts, 39, 16))
 >y : Symbol(y, Decl(callWithSpread.ts, 39, 26))
 >z : Symbol(z, Decl(callWithSpread.ts, 39, 37))
     }
     foo(x: number, y: number, ...z: string[]) {
->foo : Symbol(C.foo, Decl(callWithSpread.ts, 42, 5))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 42, 5))
 >x : Symbol(x, Decl(callWithSpread.ts, 43, 8))
 >y : Symbol(y, Decl(callWithSpread.ts, 43, 18))
 >z : Symbol(z, Decl(callWithSpread.ts, 43, 29))
@@= skipped -35, +35 lines =@@
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
     }
     foo() {
->foo : Symbol(D.foo, Decl(callWithSpread.ts, 51, 5))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 51, 5))
 
         super.foo(1, 2);
->super.foo : Symbol(C.foo, Decl(callWithSpread.ts, 42, 5))
+>super.foo : Symbol(foo, Decl(callWithSpread.ts, 42, 5))
 >super : Symbol(C, Decl(callWithSpread.ts, 36, 40))
->foo : Symbol(C.foo, Decl(callWithSpread.ts, 42, 5))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 42, 5))
 
         super.foo(1, 2, ...a);
->super.foo : Symbol(C.foo, Decl(callWithSpread.ts, 42, 5))
+>super.foo : Symbol(foo, Decl(callWithSpread.ts, 42, 5))
 >super : Symbol(C, Decl(callWithSpread.ts, 36, 40))
->foo : Symbol(C.foo, Decl(callWithSpread.ts, 42, 5))
+>foo : Symbol(foo, Decl(callWithSpread.ts, 42, 5))
 >a : Symbol(a, Decl(callWithSpread.ts, 7, 3))
     }
 }
