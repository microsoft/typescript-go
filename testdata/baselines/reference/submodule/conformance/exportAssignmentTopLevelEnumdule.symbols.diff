--- old.exportAssignmentTopLevelEnumdule.symbols
+++ new.exportAssignmentTopLevelEnumdule.symbols
@@= skipped -9, +9 lines =@@
 
 if(color === foo.green){
 >color : Symbol(color, Decl(foo_1.ts, 1, 3))
->foo.green : Symbol(foo.green, Decl(foo_0.ts, 1, 5))
+>foo.green : Symbol(green, Decl(foo_0.ts, 1, 5))
 >foo : Symbol(foo, Decl(foo_1.ts, 0, 0))
->green : Symbol(foo.green, Decl(foo_0.ts, 1, 5))
+>green : Symbol(green, Decl(foo_0.ts, 1, 5))
 
 	color = foo.answer;
 >color : Symbol(color, Decl(foo_1.ts, 1, 3))
->foo.answer : Symbol(foo.answer, Decl(foo_0.ts, 4, 11))
+>foo.answer : Symbol(answer, Decl(foo_0.ts, 4, 11))
 >foo : Symbol(foo, Decl(foo_1.ts, 0, 0))
->answer : Symbol(foo.answer, Decl(foo_0.ts, 4, 11))
+>answer : Symbol(answer, Decl(foo_0.ts, 4, 11))
 }
 
 === foo_0.ts ===
@@= skipped -16, +16 lines =@@
 >foo : Symbol(foo, Decl(foo_0.ts, 0, 0), Decl(foo_0.ts, 2, 1))
 
 	red, green, blue
->red : Symbol(foo.red, Decl(foo_0.ts, 0, 10))
->green : Symbol(foo.green, Decl(foo_0.ts, 1, 5))
->blue : Symbol(foo.blue, Decl(foo_0.ts, 1, 12))
+>red : Symbol(red, Decl(foo_0.ts, 0, 10))
+>green : Symbol(green, Decl(foo_0.ts, 1, 5))
+>blue : Symbol(blue, Decl(foo_0.ts, 1, 12))
 }
 module foo {
 >foo : Symbol(foo, Decl(foo_0.ts, 0, 0), Decl(foo_0.ts, 2, 1))
