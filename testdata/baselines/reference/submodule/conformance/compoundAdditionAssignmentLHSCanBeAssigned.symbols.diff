--- old.compoundAdditionAssignmentLHSCanBeAssigned.symbols
+++ new.compoundAdditionAssignmentLHSCanBeAssigned.symbols
@@= skipped -2, +2 lines =@@
 === compoundAdditionAssignmentLHSCanBeAssigned.ts ===
 enum E { a, b }
 >E : Symbol(E, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 0))
->a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
->b : Symbol(E.b, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 11))
+>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
+>b : Symbol(b, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 11))
 
 var a: any;
 >a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 2, 3))
@@= skipped -31, +31 lines =@@
 
 x1 += E.a;
 >x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))
->E.a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
+>E.a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
 >E : Symbol(E, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 0))
->a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
+>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
 
 x1 += {};
 >x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))
@@= skipped -36, +36 lines =@@
 
 x2 += E.a;
 >x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))
->E.a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
+>E.a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
 >E : Symbol(E, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 0))
->a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
+>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
 
 x2 += {};
 >x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))
@@= skipped -26, +26 lines =@@
 
 x3 += E.a;
 >x3 : Symbol(x3, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 27, 3))
->E.a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
+>E.a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
 >E : Symbol(E, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 0))
->a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
+>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
 
 x3 += null;
 >x3 : Symbol(x3, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 27, 3))
@@= skipped -24, +24 lines =@@
 
 x4 += E.a;
 >x4 : Symbol(x4, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 34, 3))
->E.a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
+>E.a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
 >E : Symbol(E, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 0))
->a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
+>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
 
 x4 += null;
 >x4 : Symbol(x4, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 34, 3))
