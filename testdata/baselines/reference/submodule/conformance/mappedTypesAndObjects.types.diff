--- old.mappedTypesAndObjects.types
+++ new.mappedTypesAndObjects.types
@@= skipped -2, +2 lines =@@
 === mappedTypesAndObjects.ts ===
 function f1<T>(x: Partial<T>, y: Readonly<T>) {
 >f1 : <T>(x: Partial<T>, y: Readonly<T>) => void
+>T : T
 >x : Partial<T>
 >y : Readonly<T>
 
@@= skipped -19, +20 lines =@@
 
 function f2<T>(x: Partial<T>, y: Readonly<T>) {
 >f2 : <T>(x: Partial<T>, y: Readonly<T>) => void
+>T : T
 >x : Partial<T>
 >y : Readonly<T>
 
@@= skipped -20, +21 lines =@@
 
 function f3<T>(x: Partial<T>) {
 >f3 : <T>(x: Partial<T>) => void
+>T : T
 >x : Partial<T>
 
     x = {};
@@= skipped -11, +12 lines =@@
 // Repro from #12900
 
 interface Base {
+>Base : Base
+
     foo: { [key: string]: any };
 >foo : { [key: string]: any; }
 >key : string
@@= skipped -12, +14 lines =@@
 }
 
 interface E1<T> extends Base {
+>E1 : E1<T>
+>T : T
+
     foo: T;
 >foo : T
 }
 
 interface Something { name: string, value: string };
+>Something : Something
 >name : string
 >value : string
 
 interface E2 extends Base {
+>E2 : E2
+
     foo: Partial<Something>;  // or other mapped type
 >foo : Partial<Something>
 }
 
 interface E3<T> extends Base {
+>E3 : E3<T>
+>T : T
+
     foo: Partial<T>; // or other mapped type
 >foo : Partial<T>
 }
@@= skipped -22, +31 lines =@@
 
 class Form<T> {
 >Form : Form<T>
+>T : T
 
     private values: {[P in keyof T]?: T[P]} = {}
->values : { [P in keyof T]?: T[P] | undefined; }
+>values : { [P in keyof T]?: T[P] | undefined }
+>P : P
 >{} : {}
 }
 
