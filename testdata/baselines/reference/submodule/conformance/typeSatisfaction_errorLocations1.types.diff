--- old.typeSatisfaction_errorLocations1.types
+++ new.typeSatisfaction_errorLocations1.types
@@= skipped -133, +133 lines =@@
 >"20" : "20"
 
 const tuple2 = [10, "20"] as const;
->tuple2 : readonly [10, "20"]
->[10, "20"] as const : readonly [10, "20"]
->[10, "20"] : readonly [10, "20"]
+>tuple2 : [10, "20"]
+>[10, "20"] as const : [10, "20"]
+>[10, "20"] : [10, "20"]
 >10 : 10
 >"20" : "20"
 
@@= skipped -10, +10 lines =@@
 >fn3(10, ...(tuple2 satisfies number[])) : void
 >fn3 : (...args: unknown[]) => void
 >10 : 10
->...(tuple2 satisfies number[]) : 10 | "20"
->(tuple2 satisfies number[]) : readonly [10, "20"]
->tuple2 satisfies number[] : readonly [10, "20"]
->tuple2 : readonly [10, "20"]
+>...(tuple2 satisfies number[]) : "20" | 10
+>(tuple2 satisfies number[]) : [10, "20"]
+>tuple2 satisfies number[] : [10, "20"]
+>tuple2 : [10, "20"]
 
 declare function fn4(...args: number[]): void;
 >fn4 : (...args: number[]) => void
@@= skipped -21, +21 lines =@@
 >"20" : "20"
 
 const tuple3 = ["10", "20"] as const;
->tuple3 : readonly ["10", "20"]
->["10", "20"] as const : readonly ["10", "20"]
->["10", "20"] : readonly ["10", "20"]
+>tuple3 : ["10", "20"]
+>["10", "20"] as const : ["10", "20"]
+>["10", "20"] : ["10", "20"]
 >"10" : "10"
 >"20" : "20"
 
@@= skipped -10, +10 lines =@@
 >fn4(10, ...(tuple3 satisfies readonly string[])) : void
 >fn4 : (...args: number[]) => void
 >10 : 10
->...(tuple3 satisfies readonly string[]) : "20" | "10"
->(tuple3 satisfies readonly string[]) : readonly ["10", "20"]
->tuple3 satisfies readonly string[] : readonly ["10", "20"]
->tuple3 : readonly ["10", "20"]
+>...(tuple3 satisfies readonly string[]) : "10" | "20"
+>(tuple3 satisfies readonly string[]) : ["10", "20"]
+>tuple3 satisfies readonly string[] : ["10", "20"]
+>tuple3 : ["10", "20"]
 
 function fn5(): number {
 >fn5 : () => number
