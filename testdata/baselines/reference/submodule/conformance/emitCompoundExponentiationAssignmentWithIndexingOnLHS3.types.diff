--- old.emitCompoundExponentiationAssignmentWithIndexingOnLHS3.types
+++ new.emitCompoundExponentiationAssignmentWithIndexingOnLHS3.types
@@= skipped -1, +1 lines =@@
 
 === emitCompoundExponentiationAssignmentWithIndexingOnLHS3.ts ===
 var object = {
->object : { _0: number; 0: number; }
->{    _0: 2,    get 0() {        return this._0;    },    set 0(x: number) {        this._0 = x;    },} : { _0: number; 0: number; }
+>object : { 0: number; _0: number; }
+>{    _0: 2,    get 0() {        return this._0;    },    set 0(x: number) {        this._0 = x;    },} : { 0: number; _0: number; }
 
     _0: 2,
 >_0 : number
@@= skipped -32, +32 lines =@@
 object[0] **= object[0];
 >object[0] **= object[0] : number
 >object[0] : number
->object : { _0: number; 0: number; }
+>object : { 0: number; _0: number; }
 >0 : 0
 >object[0] : number
->object : { _0: number; 0: number; }
+>object : { 0: number; _0: number; }
 >0 : 0
 
 object[0] **= object[0] **= 2;
 >object[0] **= object[0] **= 2 : number
 >object[0] : number
->object : { _0: number; 0: number; }
+>object : { 0: number; _0: number; }
 >0 : 0
 >object[0] **= 2 : number
 >object[0] : number
->object : { _0: number; 0: number; }
+>object : { 0: number; _0: number; }
 >0 : 0
 >2 : 2
 
 object[0] **= object[0] ** 2;
 >object[0] **= object[0] ** 2 : number
 >object[0] : number
->object : { _0: number; 0: number; }
+>object : { 0: number; _0: number; }
 >0 : 0
 >object[0] ** 2 : number
 >object[0] : number
->object : { _0: number; 0: number; }
+>object : { 0: number; _0: number; }
 >0 : 0
 >2 : 2
 
