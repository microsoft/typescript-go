//// [tests/cases/conformance/types/tuple/named/partiallyNamedTuples2.ts] ////

=== partiallyNamedTuples2.ts ===
// https://github.com/microsoft/TypeScript/issues/55693
interface MultiKeyMap<Keys extends readonly unknown[], Value> {
>MultiKeyMap : MultiKeyMap<Keys, Value>
>Keys : Keys
>Value : Value

  get<Key extends GetKeys<Keys>>(...key: Key): GetResult<Keys, Key, Value>;
>get : <Key extends GetKeys<Keys>>(...key: Key) => GetResult<Keys, Key, Value>
>Key : Key
>key : Key
}
type GetKeys<Keys extends readonly unknown[]> = Keys extends [
>GetKeys : GetKeys<Keys>
>Keys : Keys

  ...infer Remain,
>Remain : Remain

  infer _,
>_ : _

]
  ? Keys | GetKeys<Remain>
  : Keys;
type GetResult<
>GetResult : GetResult<Id, Args, Value>

  Id extends readonly unknown[],
>Id : Id

  Args extends GetKeys<Id>,
>Args : Args

  Value,
>Value : Value

> = Args extends Id
  ? Value | undefined
  : Id extends [...Args, ...infer Rest]
>Rest : Rest

  ? Iterable<[...Rest, Value]>
  : never;
const x: MultiKeyMap<[id1: string, id2: string], object> = null!;
>x : MultiKeyMap<[id1: string, id2: string], object>
>null! : never

const id1 = "abc" as string;
>id1 : string
>"abc" as string : string
>"abc" : "abc"

const matches = x.get(id1);
>matches : Iterable<[id2: string, object], any, any>
>x.get(id1) : Iterable<[id2: string, object], any, any>
>x.get : <Key extends [] | [id1: string] | [id1: string, id2: string]>(...key: Key) => GetResult<[id1: string, id2: string], Key, object>
>x : MultiKeyMap<[id1: string, id2: string], object>
>get : <Key extends [] | [id1: string] | [id1: string, id2: string]>(...key: Key) => GetResult<[id1: string, id2: string], Key, object>
>id1 : string

