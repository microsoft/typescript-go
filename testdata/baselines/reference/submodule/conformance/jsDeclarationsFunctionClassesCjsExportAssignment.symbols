//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsFunctionClassesCjsExportAssignment.ts] ////

=== timer.js ===
/**
 * @param {number} timeout
 */
function Timer(timeout) {
>Timer : Symbol(Timer, Decl(timer.js, 0, 0))
>timeout : Symbol(timeout, Decl(timer.js, 3, 15))

    this.timeout = timeout;
>timeout : Symbol(timeout, Decl(timer.js, 3, 15))
}
module.exports = Timer;
>Timer : Symbol(Timer, Decl(timer.js, 0, 0))

=== hook.js ===
/**
 * @typedef {(arg: import("./context")) => void} HookHandler
>HookHandler : Symbol(HookHandler, Decl(hook.js, 1, 3))
>arg : Symbol(arg, Decl(hook.js, 1, 14))

 */
/**
 * @param {HookHandler} handle
 */
function Hook(handle) {
>Hook : Symbol(Hook, Decl(hook.js, 0, 0))
>handle : Symbol(handle, Decl(hook.js, 6, 14))

    this.handle = handle;
>handle : Symbol(handle, Decl(hook.js, 6, 14))
}
module.exports = Hook;
>Hook : Symbol(Hook, Decl(hook.js, 0, 0))

=== context.js ===
/**
 * Imports
 *
 * @typedef {import("./timer")} Timer
>Timer : Symbol(Timer, Decl(context.js, 3, 3))

 * @typedef {import("./hook")} Hook
>Hook : Symbol(Hook, Decl(context.js, 4, 3))

 * @typedef {import("./hook").HookHandler} HookHandler
>HookHandler : Symbol(HookHandler, Decl(context.js, 5, 3))
>HookHandler : Symbol(HookHandler, Decl(hook.js, 1, 3))

 */

/**
 * Input type definition
 *
 * @typedef {Object} Input
>Input : Symbol(Input, Decl(context.js, 11, 3))

 * @prop {Timer} timer
>timer : Symbol(timer, Decl(context.js, 12, 3))
>Timer : Symbol(Timer, Decl(context.js, 3, 3))

 * @prop {Hook} hook
>hook : Symbol(hook, Decl(context.js, 13, 3))
>Hook : Symbol(Hook, Decl(context.js, 4, 3))

 */
 
/**
 * State type definition
 *
 * @typedef {Object} State
>State : Symbol(State, Decl(context.js, 19, 3))

 * @prop {Timer} timer
>timer : Symbol(timer, Decl(context.js, 20, 3))
>Timer : Symbol(Timer, Decl(context.js, 3, 3))

 * @prop {Hook} hook
>hook : Symbol(hook, Decl(context.js, 21, 3))
>Hook : Symbol(Hook, Decl(context.js, 4, 3))

 */

/**
 * New `Context`
 *
 * @class
 * @param {Input} input
 */

function Context(input) {
>Context : Symbol(Context, Decl(context.js, 0, 0))
>input : Symbol(input, Decl(context.js, 31, 17))

    if (!(this instanceof Context)) {
>Context : Symbol(Context, Decl(context.js, 0, 0))

      return new Context(input)
>Context : Symbol(Context, Decl(context.js, 0, 0))
>input : Symbol(input, Decl(context.js, 31, 17))
    }
    this.state = this.construct(input);
>input : Symbol(input, Decl(context.js, 31, 17))
}
Context.prototype = {
>Context.prototype : Symbol(prototype, Decl(context.js, 36, 1))
>Context : Symbol(Context, Decl(context.js, 0, 0))
>prototype : Symbol(prototype, Decl(context.js, 36, 1))

    /**
     * @param {Input} input
     * @param {HookHandler=} handle
     * @returns {State}
     */
    construct(input, handle = () => void 0) {
>construct : Symbol(construct, Decl(context.js, 37, 21))
>input : Symbol(input, Decl(context.js, 43, 14))
>handle : Symbol(handle, Decl(context.js, 43, 20))

        return input;
>input : Symbol(input, Decl(context.js, 43, 14))
    }
}
module.exports = Context;
>Context : Symbol(Context, Decl(context.js, 0, 0))

