--- old.inferTypes1.types
+++ new.inferTypes1.types
@@= skipped -2, +2 lines =@@
 === inferTypes1.ts ===
 type Unpacked<T> =
 >Unpacked : Unpacked<T>
+>T : T
 
     T extends (infer U)[] ? U :
+>U : U
+
     T extends (...args: any[]) => infer U ? U :
 >args : any[]
+>U : U
 
     T extends Promise<infer U> ? U :
+>U : U
+
     T;
 
 type T00 = Unpacked<string>;  // string
@@= skipped -74, +80 lines =@@
 
 type T12 = ReturnType<(<T>() => T)>;  // {}
 >T12 : unknown
+>T : T
 
 type T13 = ReturnType<(<T extends U, U extends number[]>() => T)>;  // number[]
 >T13 : number[]
+>T : T
+>U : U
 
 type T14 = ReturnType<typeof f1>;  // { a: number, b: string }
 >T14 : { a: number; b: string; }
->f1 : (s: string) => { a: number; b: string; }
 
 type T15 = ReturnType<any>;  // any
 >T15 : any
@@= skipped -22, +24 lines =@@
 
 type T19<T extends any[]> = ReturnType<(x: string, ...args: T) => T[]>;  // T[]
 >T19 : T[]
+>T : T
 >x : string
 >args : T
 
 type U10 = InstanceType<typeof C>;  // C
 >U10 : C
->C : typeof C
 
 type U11 = InstanceType<any>;  // any
 >U11 : any
@@= skipped -21, +21 lines =@@
 
 type U15 = InstanceType<typeof Abstract>;  // Abstract
 >U15 : Abstract
->Abstract : typeof Abstract
 
 type U16<T extends any[]> = InstanceType<new (x: string, ...args: T) => T[]>;  // T[]
 >U16 : T[]
+>T : T
 >x : string
 >args : T
 
 type U17<T extends any[]> = InstanceType<abstract new (x: string, ...args: T) => T[]>;  // T[]
 >U17 : T[]
+>T : T
 >x : string
 >args : T
 
 type ArgumentType<T extends (x: any) => any> = T extends (a: infer A) => any ? A : any;
 >ArgumentType : ArgumentType<T>
+>T : T
 >x : any
 >a : A
+>A : A
 
 type T20 = ArgumentType<() => void>;  // {}
 >T20 : unknown
@@= skipped -48, +51 lines =@@
 
 type X1<T extends { x: any, y: any }> = T extends { x: infer X, y: infer Y } ? [X, Y] : any;
 >X1 : X1<T>
+>T : T
 >x : any
 >y : any
 >x : X
+>X : X
 >y : Y
+>Y : Y
 
 type T30 = X1<{ x: any, y: any }>;  // [any, any]
 >T30 : [any, any]
@@= skipped -23, +26 lines =@@
 
 type X2<T> = T extends { a: infer U, b: infer U } ? U : never;
 >X2 : X2<T>
+>T : T
 >a : U
+>U : U
 >b : U
+>U : U
 
 type T40 = X2<{}>;  // never
 >T40 : never
@@= skipped -28, +31 lines =@@
 
 type X3<T> = T extends { a: (x: infer U) => void, b: (x: infer U) => void } ? U : never;
 >X3 : X3<T>
->a : (x: infer U) => void
+>T : T
+>a : (x: U) => void
 >x : U
->b : (x: infer U) => void
+>U : U
+>b : (x: U) => void
 >x : U
+>U : U
 
 type T50 = X3<{}>;  // never
 >T50 : never
@@= skipped -35, +38 lines =@@
 
 type T60 = infer U;  // Error
 >T60 : U
+>U : U
 
 type T61<T> = (infer A) extends infer B ? infer C : infer D;  // Error
 >T61 : T61<T>
+>T : T
+>A : A
+>B : B
+>C : C
+>D : D
 
 type T62<T> = U extends (infer U)[] ? U : U;  // Error
 >T62 : any
+>T : T
+>U : U
 
 type T63<T> = T extends ((infer A) extends infer B ? infer C : infer D) ? string : number;
 >T63 : T63<T>
+>T : T
+>A : A
+>B : B
+>C : C
+>D : D
 
 type T70<T extends string> = { x: T };
 >T70 : T70<T>
+>T : T
 >x : T
 
 type T71<T> = T extends T70<infer U> ? T70<U> : never;
 >T71 : T71<T>
+>T : T
+>U : U
 
 type T72<T extends number> = { y: T };
 >T72 : T72<T>
+>T : T
 >y : T
 
 type T73<T> = T extends T72<infer U> ? T70<U> : never;  // Error
 >T73 : T73<T>
+>T : T
+>U : U
 
 type T74<T extends number, U extends string> = { x: T, y: U };
 >T74 : T74<T, U>
+>T : T
+>U : U
 >x : T
 >y : U
 
 type T75<T> = T extends T74<infer U, infer U> ? T70<U> | T72<U> | T74<U, U> : never;
 >T75 : T75<T>
+>T : T
+>U : U
+>U : U
 
 type T76<T extends T[], U extends T> = { x: T };
 >T76 : T76<T, U>
+>T : T
+>U : U
 >x : T
 
 type T77<T> = T extends T76<infer X, infer Y> ? T76<X, Y> : never;
 >T77 : T77<T>
+>T : T
+>X : X
+>Y : Y
 
 type T78<T> = T extends T76<infer X, infer X> ? T76<X, X> : never;
 >T78 : T78<T>
+>T : T
+>X : X
+>X : X
 
 type Foo<T extends string, U extends T> = [T, U];
 >Foo : Foo<T, U>
+>T : T
+>U : U
 
 type Bar<T> = T extends Foo<infer X, infer Y> ? Foo<X, Y> : never;
 >Bar : Bar<T>
+>T : T
+>X : X
+>Y : Y
 
 type T90 = Bar<[string, string]>;  // [string, string]
 >T90 : Foo<string, string>
@@= skipped -68, +105 lines =@@
 
 type JsonifiedObject<T extends object> = { [K in keyof T]: Jsonified<T[K]> };
 >JsonifiedObject : JsonifiedObject<T>
+>T : T
+>K : K
 
 type Jsonified<T> =
 >Jsonified : Jsonified<T>
+>T : T
 
     T extends string | number | boolean | null ? T
     : T extends undefined | Function ? never // undefined and functions are removed
     : T extends { toJSON(): infer R } ? R // toJSON is called if it exists (e.g. Date)
->toJSON : () => infer R
+>toJSON : () => R
+>R : R
 
     : T extends object ? JsonifiedObject<T>
     : "what is this";
@@= skipped -76, +80 lines =@@
 
 type A1<T, U extends A1<any, any>> = [T, U];
 >A1 : A1<T, U>
+>T : T
+>U : U
 
 type B1<S> = S extends A1<infer T, infer U> ? [T, U] : never;
 >B1 : B1<S>
+>S : S
+>T : T
+>U : U
 
 type A2<T, U extends void> = [T, U];
 >A2 : A2<T, U>
+>T : T
+>U : U
 
 type B2<S> = S extends A2<infer T, infer U> ? [T, U] : never;
 >B2 : B2<S>
+>S : S
+>T : T
+>U : U
 
 type C2<S, U extends void> = S extends A2<infer T, U> ? [T, U] : never;
 >C2 : C2<S, U>
+>S : S
+>U : U
+>T : T
 
 // Repro from #21735
 
 type A<T> = T extends string ? { [P in T]: void; } : T;
 >A : A<T>
+>T : T
+>P : P
 
 type B<T> = string extends T ? { [P in T]: void; } : T;  // Error
 >B : B<T>
+>T : T
+>P : P
 
 // Repro from #22302
 
 type MatchingKeys<T, U, K extends keyof T = keyof T> =
 >MatchingKeys : MatchingKeys<T, U, K>
+>T : T
+>U : U
+>K : K
 
     K extends keyof T ? T[K] extends U ? K : never : never;
 
 type VoidKeys<T> = MatchingKeys<T, void>;
 >VoidKeys : VoidKeys<T>
+>T : T
 
 interface test {
+>test : test
+
     a: 1,
 >a : 1
 
@@= skipped -49, +72 lines =@@
 
 type MustBeString<T extends string> = T;
 >MustBeString : T
+>T : T
 
 type EnsureIsString<T> = T extends MustBeString<infer U> ? U : never;
 >EnsureIsString : EnsureIsString<T>
+>T : T
+>U : U
 
 type Test1 = EnsureIsString<"hello">;  // "hello"
 >Test1 : "hello"
@@= skipped -14, +17 lines =@@
 
 function invoker <K extends string | number | symbol, A extends any[]> (key: K, ...args: A) {
 >invoker : <K extends string | number | symbol, A extends any[]>(key: K, ...args: A) => <T extends Record<K, (...args: A) => any>>(obj: T) => ReturnType<T[K]>
+>K : K
+>A : A
 >key : K
 >args : A
 
     return <T extends Record<K, (...args: A) => any>> (obj: T): ReturnType<T[K]> => obj[key](...args)
 ><T extends Record<K, (...args: A) => any>> (obj: T): ReturnType<T[K]> => obj[key](...args) : <T extends Record<K, (...args: A) => any>>(obj: T) => ReturnType<T[K]>
+>T : T
 >args : A
 >obj : T
 >obj[key](...args) : any
@@= skipped -18, +21 lines =@@
 const result = invoker('test', true)({ test: (a: boolean) => 123 })
 >result : number
 >invoker('test', true)({ test: (a: boolean) => 123 }) : number
->invoker('test', true) : <T extends Record<"test", (args_0: boolean) => any>>(obj: T) => ReturnType<T["test"]>
+>invoker('test', true) : <T extends Record<"test", (...args: [boolean]) => any>>(obj: T) => ReturnType<T["test"]>
 >invoker : <K extends string | number | symbol, A extends any[]>(key: K, ...args: A) => <T extends Record<K, (...args: A) => any>>(obj: T) => ReturnType<T[K]>
 >'test' : "test"
 >true : true
@@= skipped -12, +12 lines =@@
 
 type Foo2<A extends any[]> = ReturnType<(...args: A) => string>;
 >Foo2 : string
+>A : A
 >args : A
 
