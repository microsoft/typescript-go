--- old.templateLiteralTypesPatterns.types
+++ new.templateLiteralTypesPatterns.types
@@= skipped -15, +15 lines =@@
 
 type Protocol<T extends string, U extends string> = `${T}://${U}`;
 >Protocol : `${T}://${U}`
+>T : T
+>U : U
 
 function download(hostSpec: Protocol<"http" | "https" | "ftp", string>) { }
->download : (hostSpec: Protocol<"http" | "https" | "ftp", string>) => void
->hostSpec : `http://${string}` | `https://${string}` | `ftp://${string}`
+>download : (hostSpec: `ftp://${string}` | `http://${string}` | `https://${string}`) => void
+>hostSpec : `ftp://${string}` | `http://${string}` | `https://${string}`
 
 // ok, has protocol
 download("http://example.com/protocol");
 >download("http://example.com/protocol") : void
->download : (hostSpec: Protocol<"http" | "https" | "ftp", string>) => void
+>download : (hostSpec: `ftp://${string}` | `http://${string}` | `https://${string}`) => void
 >"http://example.com/protocol" : "http://example.com/protocol"
 
 // issues error - no protocol
 download("example.com/noprotocol");
 >download("example.com/noprotocol") : void
->download : (hostSpec: Protocol<"http" | "https" | "ftp", string>) => void
+>download : (hostSpec: `ftp://${string}` | `http://${string}` | `https://${string}`) => void
 >"example.com/noprotocol" : "example.com/noprotocol"
 
 // issues error, incorrect protocol
 download("gopher://example.com/protocol");
 >download("gopher://example.com/protocol") : void
->download : (hostSpec: Protocol<"http" | "https" | "ftp", string>) => void
+>download : (hostSpec: `ftp://${string}` | `http://${string}` | `https://${string}`) => void
 >"gopher://example.com/protocol" : "gopher://example.com/protocol"
 
 const q: RequiresLeadingSlash extends string ? true : false = true;
@@= skipped -30, +32 lines =@@
 >true : true
 
 declare function bools(x: `${boolean}`): void;
->bools : (x: `${boolean}`) => void
+>bools : (x: "false" | "true") => void
 >x : "false" | "true"
 
 // ok
 bools("true");
 >bools("true") : void
->bools : (x: `${boolean}`) => void
+>bools : (x: "false" | "true") => void
 >"true" : "true"
 
 bools("false");
 >bools("false") : void
->bools : (x: `${boolean}`) => void
+>bools : (x: "false" | "true") => void
 >"false" : "false"
 
 // not ok
 bools("other");
 >bools("other") : void
->bools : (x: `${boolean}`) => void
+>bools : (x: "false" | "true") => void
 >"other" : "other"
 
 type Pat<T extends string | null | undefined> = `${T}`
 >Pat : `${T}`
+>T : T
 
 declare function nullishes(x: Pat<null | undefined>): void;
->nullishes : (x: Pat<null | undefined>) => void
->x : "undefined" | "null"
+>nullishes : (x: "null" | "undefined") => void
+>x : "null" | "undefined"
 
 // ok
 nullishes("null");
 >nullishes("null") : void
->nullishes : (x: Pat<null | undefined>) => void
+>nullishes : (x: "null" | "undefined") => void
 >"null" : "null"
 
 nullishes("undefined");
 >nullishes("undefined") : void
->nullishes : (x: Pat<null | undefined>) => void
+>nullishes : (x: "null" | "undefined") => void
 >"undefined" : "undefined"
 
 // not ok
 nullishes("0");
 >nullishes("0") : void
->nullishes : (x: Pat<null | undefined>) => void
+>nullishes : (x: "null" | "undefined") => void
 >"0" : "0"
 
 nullishes("false");
 >nullishes("false") : void
->nullishes : (x: Pat<null | undefined>) => void
+>nullishes : (x: "null" | "undefined") => void
 >"false" : "false"
 
 nullishes("NaN");
 >nullishes("NaN") : void
->nullishes : (x: Pat<null | undefined>) => void
+>nullishes : (x: "null" | "undefined") => void
 >"NaN" : "NaN"
 
 nullishes("");
 >nullishes("") : void
->nullishes : (x: Pat<null | undefined>) => void
+>nullishes : (x: "null" | "undefined") => void
 >"" : ""
 
 nullishes("other");
 >nullishes("other") : void
->nullishes : (x: Pat<null | undefined>) => void
+>nullishes : (x: "null" | "undefined") => void
 >"other" : "other"
 
 declare function numbers(x: `${number}`): void;
@@= skipped -477, +478 lines =@@
 // Validates variance isn't measured as strictly covariant
 type AGen<T extends string | number> = {field: `a${T}`};
 >AGen : AGen<T>
+>T : T
 >field : `a${T}`
 
 const shouldWork1: AGen<string> = null as any as AGen<"yes">;
@@= skipped -38, +39 lines =@@
 // Remove string literals from unions with matching template literals
 
 let t1: `foo${string}` | 'foo1' | '1foo';  // `foo${string}` | '1foo'
->t1 : `foo${string}` | "1foo"
+>t1 : "1foo" | `foo${string}`
 
 let t2: `foo1` | '1foo' | 'foofoo' | `foo${string}` | 'foox' | 'xfoo';  // `foo${string}` | '1foo' | 'xfoo'
->t2 : `foo${string}` | "1foo" | "xfoo"
+>t2 : "1foo" | "xfoo" | `foo${string}`
 
 let t3: `foo1` | '1foo' | 'foofoo' | `foo${string}` | 'foox' | 'xfoo' | `${number}foo`;  // `foo${string}` | xfoo' | `${number}foo`
->t3 : `foo${string}` | "xfoo" | `${number}foo`
+>t3 : "xfoo" | `${number}foo` | `foo${string}`
 
 var bb: `${number}`;
 >bb : `${number}`
@@= skipped -18, +18 lines =@@
 
 type T2S<A extends string, B extends string> = `${A}${B}`;
 >T2S : `${A}${B}`
+>A : A
+>B : B
 
 type S10 = `${string}`;  // string
 >S10 : string
@@= skipped -31, +33 lines =@@
 
 export type Id<TA, TId extends string = string> = `${TId}-${TId}`;
 >Id : `${TId}-${TId}`
+>TA : TA
+>TId : TId
 
 export class AA {}
 >AA : AA
@@= skipped -8, +10 lines =@@
 >BB : BB
 
     abstract get(id: Id<AA>): void;
->get : (id: Id<AA>) => void
+>get : (id: `${string}-${string}`) => void
 >id : `${string}-${string}`
 
     update(id: Id<AA>): void {
->update : (id: Id<AA>) => void
+>update : (id: `${string}-${string}`) => void
 >id : `${string}-${string}`
 
         this.get(id!);
 >this.get(id!) : void
->this.get : (id: Id<AA>) => void
+>this.get : (id: `${string}-${string}`) => void
 >this : this
->get : (id: Id<AA>) => void
+>get : (id: `${string}-${string}`) => void
 >id! : `${string}-${string}`
 >id : `${string}-${string}`
     }
@@= skipped -19, +19 lines =@@
 
 // repro from https://github.com/microsoft/TypeScript/issues/54177#issuecomment-1538436654
 function conversionTest(groupName: | "downcast" | "dataDowncast" | "editingDowncast" | `${string}Downcast` & {}) {}
->conversionTest : (groupName: "downcast" | "dataDowncast" | "editingDowncast" | (`${string}Downcast` & {})) => void
->groupName : (`${string}Downcast` & {}) | "downcast" | "dataDowncast" | "editingDowncast"
+>conversionTest : (groupName: "dataDowncast" | "downcast" | "editingDowncast" | `${string}Downcast` & {}) => void
+>groupName : "dataDowncast" | "downcast" | "editingDowncast" | `${string}Downcast` & {}
 
 conversionTest("testDowncast");
 >conversionTest("testDowncast") : void
->conversionTest : (groupName: "downcast" | "dataDowncast" | "editingDowncast" | (`${string}Downcast` & {})) => void
+>conversionTest : (groupName: "dataDowncast" | "downcast" | "editingDowncast" | `${string}Downcast` & {}) => void
 >"testDowncast" : "testDowncast"
 
 function conversionTest2(groupName: | "downcast" | "dataDowncast" | "editingDowncast" | {} & `${string}Downcast`) {}
->conversionTest2 : (groupName: "downcast" | "dataDowncast" | "editingDowncast" | ({} & `${string}Downcast`)) => void
->groupName : "downcast" | "dataDowncast" | "editingDowncast" | ({} & `${string}Downcast`)
+>conversionTest2 : (groupName: "dataDowncast" | "downcast" | "editingDowncast" | {} & `${string}Downcast`) => void
+>groupName : "dataDowncast" | "downcast" | "editingDowncast" | {} & `${string}Downcast`
 
 conversionTest2("testDowncast");
 >conversionTest2("testDowncast") : void
->conversionTest2 : (groupName: "downcast" | "dataDowncast" | "editingDowncast" | ({} & `${string}Downcast`)) => void
+>conversionTest2 : (groupName: "dataDowncast" | "downcast" | "editingDowncast" | {} & `${string}Downcast`) => void
 >"testDowncast" : "testDowncast"
 
 function conversionTest3(groupName: | "downcast" | "dataDowncast" | "editingDowncast" | `${string & {}}Downcast`) {}
->conversionTest3 : (groupName: "downcast" | "dataDowncast" | "editingDowncast" | `${string & {}}Downcast`) => void
+>conversionTest3 : (groupName: "downcast" | `${string & {}}Downcast`) => void
 >groupName : "downcast" | `${string & {}}Downcast`
 
 conversionTest3("testDowncast");
 >conversionTest3("testDowncast") : void
->conversionTest3 : (groupName: "downcast" | "dataDowncast" | "editingDowncast" | `${string & {}}Downcast`) => void
+>conversionTest3 : (groupName: "downcast" | `${string & {}}Downcast`) => void
 >"testDowncast" : "testDowncast"
 
 function conversionTest4(groupName: | "downcast" | "dataDowncast" | "editingDowncast" | `${{} & string}Downcast`) {}
->conversionTest4 : (groupName: "downcast" | "dataDowncast" | "editingDowncast" | `${{} & string}Downcast`) => void
+>conversionTest4 : (groupName: "downcast" | `${{} & string}Downcast`) => void
 >groupName : "downcast" | `${{} & string}Downcast`
 
 conversionTest4("testDowncast");
 >conversionTest4("testDowncast") : void
->conversionTest4 : (groupName: "downcast" | "dataDowncast" | "editingDowncast" | `${{} & string}Downcast`) => void
+>conversionTest4 : (groupName: "downcast" | `${{} & string}Downcast`) => void
 >"testDowncast" : "testDowncast"
 
 function foo(str: `${`a${string}` & `${string}a`}Test`) {}
