--- old.objectTypeWithStringNamedNumericProperty.types
+++ new.objectTypeWithStringNamedNumericProperty.types
@@= skipped -279, +279 lines =@@
 >01 : 1
 
 var a: {
->a : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": Date; }
+>a : { "-1": Date; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 
     "0.1": void;
 >"0.1" : void
@@= skipped -30, +30 lines =@@
 var r1 = a['0.1'];
 >r1 : void
 >a['0.1'] : void
->a : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": Date; }
+>a : { "-1": Date; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'0.1' : "0.1"
 
 var r2 = a['.1'];
 >r2 : Object
 >a['.1'] : Object
->a : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": Date; }
+>a : { "-1": Date; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'.1' : ".1"
 
 var r3 = a['1'];
 >r3 : number
 >a['1'] : number
->a : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": Date; }
+>a : { "-1": Date; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'1' : "1"
 
 var r3 = c[1];
@@= skipped -24, +24 lines =@@
 var r4 = a['1.'];
 >r4 : string
 >a['1.'] : string
->a : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": Date; }
+>a : { "-1": Date; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'1.' : "1."
 
 var r3 = c[1.]; // same as indexing by 1 when done numerically
@@= skipped -12, +12 lines =@@
 var r5 = a['1..'];
 >r5 : boolean
 >a['1..'] : boolean
->a : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": Date; }
+>a : { "-1": Date; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'1..' : "1.."
 
 var r6 = a['1.0'];
 >r6 : Date
 >a['1.0'] : Date
->a : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": Date; }
+>a : { "-1": Date; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'1.0' : "1.0"
 
 var r3 = c[1.0]; // same as indexing by 1 when done numerically
@@= skipped -69, +69 lines =@@
 >01 : 1
 
 var b = {
->b : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": DateConstructor; }
->{    "0.1": <void>null,    ".1": new Object(),    "1": 1,    "1.": "",    "1..": true,    "1.0": new Date(),    "-1.0": /123/,    "-1": Date} : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": DateConstructor; }
+>b : { "-1": DateConstructor; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
+>{    "0.1": <void>null,    ".1": new Object(),    "1": 1,    "1.": "",    "1..": true,    "1.0": new Date(),    "-1.0": /123/,    "-1": Date} : { "-1": DateConstructor; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 
     "0.1": <void>null,
 >"0.1" : void
@@= skipped -42, +42 lines =@@
 var r1 = b['0.1'];
 >r1 : void
 >b['0.1'] : void
->b : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": DateConstructor; }
+>b : { "-1": DateConstructor; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'0.1' : "0.1"
 
 var r2 = b['.1'];
 >r2 : Object
 >b['.1'] : Object
->b : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": DateConstructor; }
+>b : { "-1": DateConstructor; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'.1' : ".1"
 
 var r3 = b['1'];
 >r3 : number
 >b['1'] : number
->b : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": DateConstructor; }
+>b : { "-1": DateConstructor; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'1' : "1"
 
 var r3 = c[1];
@@= skipped -24, +24 lines =@@
 var r4 = b['1.'];
 >r4 : string
 >b['1.'] : string
->b : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": DateConstructor; }
+>b : { "-1": DateConstructor; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'1.' : "1."
 
 var r3 = c[1.]; // same as indexing by 1 when done numerically
@@= skipped -12, +12 lines =@@
 var r5 = b['1..'];
 >r5 : boolean
 >b['1..'] : boolean
->b : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": DateConstructor; }
+>b : { "-1": DateConstructor; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'1..' : "1.."
 
 var r6 = b['1.0'];
 >r6 : Date
 >b['1.0'] : Date
->b : { "0.1": void; ".1": Object; "1": number; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; "-1": DateConstructor; }
+>b : { "-1": DateConstructor; "1": number; "0.1": void; ".1": Object; "1.": string; "1..": boolean; "1.0": Date; "-1.0": RegExp; }
 >'1.0' : "1.0"
 
 var r3 = c[1.0]; // same as indexing by 1 when done numerically
