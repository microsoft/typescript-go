--- old.typeGuardsInProperties.symbols
+++ new.typeGuardsInProperties.symbols
@@= skipped -13, +13 lines =@@
 >C1 : Symbol(C1, Decl(typeGuardsInProperties.ts, 4, 30))
 
     private pp1: string | number;
->pp1 : Symbol(C1.pp1, Decl(typeGuardsInProperties.ts, 5, 10))
+>pp1 : Symbol(pp1, Decl(typeGuardsInProperties.ts, 5, 10))
 
     pp2: string | number;
->pp2 : Symbol(C1.pp2, Decl(typeGuardsInProperties.ts, 6, 33))
+>pp2 : Symbol(pp2, Decl(typeGuardsInProperties.ts, 6, 33))
 
     // Inside public accessor getter
     get pp3() {
->pp3 : Symbol(C1.pp3, Decl(typeGuardsInProperties.ts, 7, 25))
+>pp3 : Symbol(pp3, Decl(typeGuardsInProperties.ts, 7, 25))
 
         return strOrNum;
 >strOrNum : Symbol(strOrNum, Decl(typeGuardsInProperties.ts, 4, 3))
     }
     method() {
->method : Symbol(C1.method, Decl(typeGuardsInProperties.ts, 11, 5))
+>method : Symbol(method, Decl(typeGuardsInProperties.ts, 11, 5))
 
         strOrNum = typeof this.pp1 === "string" && this.pp1; // string | number
 >strOrNum : Symbol(strOrNum, Decl(typeGuardsInProperties.ts, 4, 3))
->this.pp1 : Symbol(C1.pp1, Decl(typeGuardsInProperties.ts, 5, 10))
+>this.pp1 : Symbol(pp1, Decl(typeGuardsInProperties.ts, 5, 10))
 >this : Symbol(C1, Decl(typeGuardsInProperties.ts, 4, 30))
->pp1 : Symbol(C1.pp1, Decl(typeGuardsInProperties.ts, 5, 10))
->this.pp1 : Symbol(C1.pp1, Decl(typeGuardsInProperties.ts, 5, 10))
+>pp1 : Symbol(pp1, Decl(typeGuardsInProperties.ts, 5, 10))
+>this.pp1 : Symbol(pp1, Decl(typeGuardsInProperties.ts, 5, 10))
 >this : Symbol(C1, Decl(typeGuardsInProperties.ts, 4, 30))
->pp1 : Symbol(C1.pp1, Decl(typeGuardsInProperties.ts, 5, 10))
+>pp1 : Symbol(pp1, Decl(typeGuardsInProperties.ts, 5, 10))
 
         strOrNum = typeof this.pp2 === "string" && this.pp2; // string | number
 >strOrNum : Symbol(strOrNum, Decl(typeGuardsInProperties.ts, 4, 3))
->this.pp2 : Symbol(C1.pp2, Decl(typeGuardsInProperties.ts, 6, 33))
+>this.pp2 : Symbol(pp2, Decl(typeGuardsInProperties.ts, 6, 33))
 >this : Symbol(C1, Decl(typeGuardsInProperties.ts, 4, 30))
->pp2 : Symbol(C1.pp2, Decl(typeGuardsInProperties.ts, 6, 33))
->this.pp2 : Symbol(C1.pp2, Decl(typeGuardsInProperties.ts, 6, 33))
+>pp2 : Symbol(pp2, Decl(typeGuardsInProperties.ts, 6, 33))
+>this.pp2 : Symbol(pp2, Decl(typeGuardsInProperties.ts, 6, 33))
 >this : Symbol(C1, Decl(typeGuardsInProperties.ts, 4, 30))
->pp2 : Symbol(C1.pp2, Decl(typeGuardsInProperties.ts, 6, 33))
+>pp2 : Symbol(pp2, Decl(typeGuardsInProperties.ts, 6, 33))
 
         strOrNum = typeof this.pp3 === "string" && this.pp3; // string | number
 >strOrNum : Symbol(strOrNum, Decl(typeGuardsInProperties.ts, 4, 3))
->this.pp3 : Symbol(C1.pp3, Decl(typeGuardsInProperties.ts, 7, 25))
+>this.pp3 : Symbol(pp3, Decl(typeGuardsInProperties.ts, 7, 25))
 >this : Symbol(C1, Decl(typeGuardsInProperties.ts, 4, 30))
->pp3 : Symbol(C1.pp3, Decl(typeGuardsInProperties.ts, 7, 25))
->this.pp3 : Symbol(C1.pp3, Decl(typeGuardsInProperties.ts, 7, 25))
+>pp3 : Symbol(pp3, Decl(typeGuardsInProperties.ts, 7, 25))
+>this.pp3 : Symbol(pp3, Decl(typeGuardsInProperties.ts, 7, 25))
 >this : Symbol(C1, Decl(typeGuardsInProperties.ts, 4, 30))
->pp3 : Symbol(C1.pp3, Decl(typeGuardsInProperties.ts, 7, 25))
+>pp3 : Symbol(pp3, Decl(typeGuardsInProperties.ts, 7, 25))
     }
 }
 var c1: C1;
@@= skipped -49, +49 lines =@@
 
 strOrNum = typeof c1.pp2 === "string" && c1.pp2; // string | number
 >strOrNum : Symbol(strOrNum, Decl(typeGuardsInProperties.ts, 4, 3))
->c1.pp2 : Symbol(C1.pp2, Decl(typeGuardsInProperties.ts, 6, 33))
+>c1.pp2 : Symbol(pp2, Decl(typeGuardsInProperties.ts, 6, 33))
 >c1 : Symbol(c1, Decl(typeGuardsInProperties.ts, 18, 3))
->pp2 : Symbol(C1.pp2, Decl(typeGuardsInProperties.ts, 6, 33))
->c1.pp2 : Symbol(C1.pp2, Decl(typeGuardsInProperties.ts, 6, 33))
+>pp2 : Symbol(pp2, Decl(typeGuardsInProperties.ts, 6, 33))
+>c1.pp2 : Symbol(pp2, Decl(typeGuardsInProperties.ts, 6, 33))
 >c1 : Symbol(c1, Decl(typeGuardsInProperties.ts, 18, 3))
->pp2 : Symbol(C1.pp2, Decl(typeGuardsInProperties.ts, 6, 33))
+>pp2 : Symbol(pp2, Decl(typeGuardsInProperties.ts, 6, 33))
 
 strOrNum = typeof c1.pp3 === "string" && c1.pp3; // string | number
 >strOrNum : Symbol(strOrNum, Decl(typeGuardsInProperties.ts, 4, 3))
->c1.pp3 : Symbol(C1.pp3, Decl(typeGuardsInProperties.ts, 7, 25))
+>c1.pp3 : Symbol(pp3, Decl(typeGuardsInProperties.ts, 7, 25))
 >c1 : Symbol(c1, Decl(typeGuardsInProperties.ts, 18, 3))
->pp3 : Symbol(C1.pp3, Decl(typeGuardsInProperties.ts, 7, 25))
->c1.pp3 : Symbol(C1.pp3, Decl(typeGuardsInProperties.ts, 7, 25))
+>pp3 : Symbol(pp3, Decl(typeGuardsInProperties.ts, 7, 25))
+>c1.pp3 : Symbol(pp3, Decl(typeGuardsInProperties.ts, 7, 25))
 >c1 : Symbol(c1, Decl(typeGuardsInProperties.ts, 18, 3))
->pp3 : Symbol(C1.pp3, Decl(typeGuardsInProperties.ts, 7, 25))
+>pp3 : Symbol(pp3, Decl(typeGuardsInProperties.ts, 7, 25))
 
 var obj1: {
 >obj1 : Symbol(obj1, Decl(typeGuardsInProperties.ts, 21, 3))
