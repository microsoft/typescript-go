--- old.generatorTypeCheck63.types
+++ new.generatorTypeCheck63.types
@@= skipped -1, +1 lines =@@
 
 === generatorTypeCheck63.ts ===
 export interface StrategicState {
+>StrategicState : StrategicState
+
     lastStrategyApplied?: string;
 >lastStrategyApplied : string
 }
 
 export function strategy<T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T | undefined, void>): (a: T) => IterableIterator<T | undefined, void> {
->strategy : <T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T | undefined, void>) => (a: T) => IterableIterator<T | undefined, void>
+>strategy : <T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T, void, any>) => (a: T) => IterableIterator<T, void, any>
+>T : T
 >stratName : string
->gen : (a: T) => IterableIterator<T | undefined, void>
+>gen : (a: T) => IterableIterator<T, void, any>
 >a : T
 >a : T
 
@@= skipped -17, +20 lines =@@
 
         for (const next of gen(state)) {
 >next : T
->gen(state) : IterableIterator<T, void>
->gen : (a: T) => IterableIterator<T | undefined, void>
+>gen(state) : IterableIterator<T, void, any>
+>gen : (a: T) => IterableIterator<T, void, any>
 >state : T
 
             if (next) {
@@= skipped -22, +22 lines =@@
 }
 
 export interface Strategy<T> {
+>Strategy : Strategy<T>
+>T : T
+
     (a: T): IterableIterator<T | undefined, void>;
 >a : T
 }
 
 export interface State extends StrategicState {
+>State : State
+
     foo: number;
 >foo : number
 }
 
 export const Nothing: Strategy<State> = strategy("Nothing", function* (state: State) {
 >Nothing : Strategy<State>
->strategy("Nothing", function* (state: State) {    yield 1; // number isn't a `State`, so this should error.    return state; // `return`/`TReturn` isn't supported by `strategy`, so this should error.}) : (a: State) => IterableIterator<State, void>
->strategy : <T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T | undefined, void>) => (a: T) => IterableIterator<T | undefined, void>
+>strategy("Nothing", function* (state: State) {    yield 1; // number isn't a `State`, so this should error.    return state; // `return`/`TReturn` isn't supported by `strategy`, so this should error.}) : (a: State) => IterableIterator<State, void, any>
+>strategy : <T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T, void, any>) => (a: T) => IterableIterator<T, void, any>
 >"Nothing" : "Nothing"
 >function* (state: State) {    yield 1; // number isn't a `State`, so this should error.    return state; // `return`/`TReturn` isn't supported by `strategy`, so this should error.} : (state: State) => Generator<number, State, any>
 >state : State
@@= skipped -28, +33 lines =@@
 
 export const Nothing1: Strategy<State> = strategy("Nothing", function* (state: State) {
 >Nothing1 : Strategy<State>
->strategy("Nothing", function* (state: State) {}) : (a: State) => IterableIterator<State, void>
->strategy : <T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T | undefined, void>) => (a: T) => IterableIterator<T | undefined, void>
+>strategy("Nothing", function* (state: State) {}) : (a: State) => IterableIterator<State, void, any>
+>strategy : <T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T, void, any>) => (a: T) => IterableIterator<T, void, any>
 >"Nothing" : "Nothing"
 >function* (state: State) {} : (state: State) => Generator<never, void, any>
 >state : State
@@= skipped -10, +10 lines =@@
 
 export const Nothing2: Strategy<State> = strategy("Nothing", function* (state: State) {
 >Nothing2 : Strategy<State>
->strategy("Nothing", function* (state: State) {    return 1; // `return`/`TReturn` isn't supported by `strategy`, so this should error.}) : (a: State) => IterableIterator<State, void>
->strategy : <T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T | undefined, void>) => (a: T) => IterableIterator<T | undefined, void>
+>strategy("Nothing", function* (state: State) {    return 1; // `return`/`TReturn` isn't supported by `strategy`, so this should error.}) : (a: State) => IterableIterator<State, void, any>
+>strategy : <T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T, void, any>) => (a: T) => IterableIterator<T, void, any>
 >"Nothing" : "Nothing"
 >function* (state: State) {    return 1; // `return`/`TReturn` isn't supported by `strategy`, so this should error.} : (state: State) => Generator<never, number, any>
 >state : State
@@= skipped -13, +13 lines =@@
 
 export const Nothing3: Strategy<State> = strategy("Nothing", function* (state: State) {
 >Nothing3 : Strategy<State>
->strategy("Nothing", function* (state: State) {    yield state;    return 1; // `return`/`TReturn` isn't supported by `strategy`, so this should error.}) : (a: State) => IterableIterator<State, void>
->strategy : <T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T | undefined, void>) => (a: T) => IterableIterator<T | undefined, void>
+>strategy("Nothing", function* (state: State) {    yield state;    return 1; // `return`/`TReturn` isn't supported by `strategy`, so this should error.}) : (a: State) => IterableIterator<State, void, any>
+>strategy : <T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T, void, any>) => (a: T) => IterableIterator<T, void, any>
 >"Nothing" : "Nothing"
 >function* (state: State) {    yield state;    return 1; // `return`/`TReturn` isn't supported by `strategy`, so this should error.} : (state: State) => Generator<State, number, any>
 >state : State
