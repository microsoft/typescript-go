//// [tests/cases/conformance/salsa/inferringClassMembersFromAssignments.ts] ////

=== a.js ===
class C {
>C : C

    constructor() {
        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inConstructor = 0;
>this.inConstructor = 0 : 0
>this.inConstructor : string | number
>this : this
>inConstructor : string | number
>0 : 0
        }
        else {
            this.inConstructor = "string"
>this.inConstructor = "string" : "string"
>this.inConstructor : string | number
>this : this
>inConstructor : string | number
>"string" : "string"
        }
        this.inMultiple = 0;
>this.inMultiple = 0 : 0
>this.inMultiple : string | number | boolean
>this : this
>inMultiple : string | number | boolean
>0 : 0
    }
    method() {
>method : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inMethod = 0;
>this.inMethod = 0 : 0
>this.inMethod : string | number
>this : this
>inMethod : string | number
>0 : 0

            this.inMethodNullable = null;
>this.inMethodNullable = null : null
>this.inMethodNullable : null | undefined
>this : this
>inMethodNullable : null | undefined
        }
        else {
            this.inMethod = "string"
>this.inMethod = "string" : "string"
>this.inMethod : string | number
>this : this
>inMethod : string | number
>"string" : "string"

            this.inMethodNullable = undefined;
>this.inMethodNullable = undefined : undefined
>this.inMethodNullable : null | undefined
>this : this
>inMethodNullable : null | undefined
>undefined : undefined
        }
        this.inMultiple = "string";
>this.inMultiple = "string" : "string"
>this.inMultiple : string | number | boolean
>this : this
>inMultiple : string | number | boolean
>"string" : "string"

        this.inMultipleMethods = "string";
>this.inMultipleMethods = "string" : "string"
>this.inMultipleMethods : string | boolean
>this : this
>inMultipleMethods : string | boolean
>"string" : "string"

        var action = () => {
>action : () => void
>() => {            if (Math.random()) {                this.inNestedArrowFunction = 0;            }            else {                this.inNestedArrowFunction = "string"            }        } : () => void

            if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

                this.inNestedArrowFunction = 0;
>this.inNestedArrowFunction = 0 : 0
>this.inNestedArrowFunction : string | number
>this : this
>inNestedArrowFunction : string | number
>0 : 0
            }
            else {
                this.inNestedArrowFunction = "string"
>this.inNestedArrowFunction = "string" : "string"
>this.inNestedArrowFunction : string | number
>this : this
>inNestedArrowFunction : string | number
>"string" : "string"
            }
        };
    }
    get() {
>get : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inGetter = 0;
>this.inGetter = 0 : 0
>this.inGetter : string | number
>this : this
>inGetter : string | number
>0 : 0
        }
        else {
            this.inGetter = "string"
>this.inGetter = "string" : "string"
>this.inGetter : string | number
>this : this
>inGetter : string | number
>"string" : "string"
        }
        this.inMultiple = false;
>this.inMultiple = false : false
>this.inMultiple : string | number | boolean
>this : this
>inMultiple : string | number | boolean
>false : false

        this.inMultipleMethods = false;
>this.inMultipleMethods = false : false
>this.inMultipleMethods : string | boolean
>this : this
>inMultipleMethods : string | boolean
>false : false
    }
    set() {
>set : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inSetter = 0;
>this.inSetter = 0 : 0
>this.inSetter : string | number
>this : this
>inSetter : string | number
>0 : 0
        }
        else {
            this.inSetter = "string"
>this.inSetter = "string" : "string"
>this.inSetter : string | number
>this : this
>inSetter : string | number
>"string" : "string"
        }
    }
    prop = () => {
>prop : () => void
>() => {        if (Math.random()) {            this.inPropertyDeclaration = 0;        }        else {            this.inPropertyDeclaration = "string"        }    } : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inPropertyDeclaration = 0;
>this.inPropertyDeclaration = 0 : 0
>this.inPropertyDeclaration : string | number
>this : this
>inPropertyDeclaration : string | number
>0 : 0
        }
        else {
            this.inPropertyDeclaration = "string"
>this.inPropertyDeclaration = "string" : "string"
>this.inPropertyDeclaration : string | number
>this : this
>inPropertyDeclaration : string | number
>"string" : "string"
        }
    }
    static method() {
>method : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inStaticMethod = 0;
>this.inStaticMethod = 0 : 0
>this.inStaticMethod : string | number
>this : typeof C
>inStaticMethod : string | number
>0 : 0
        }
        else {
            this.inStaticMethod = "string"
>this.inStaticMethod = "string" : "string"
>this.inStaticMethod : string | number
>this : typeof C
>inStaticMethod : string | number
>"string" : "string"
        }

        var action = () => {
>action : () => void
>() => {            if (Math.random()) {                this.inStaticNestedArrowFunction = 0;            }            else {                this.inStaticNestedArrowFunction = "string"            }        } : () => void

            if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

                this.inStaticNestedArrowFunction = 0;
>this.inStaticNestedArrowFunction = 0 : 0
>this.inStaticNestedArrowFunction : string | number
>this : typeof C
>inStaticNestedArrowFunction : string | number
>0 : 0
            }
            else {
                this.inStaticNestedArrowFunction = "string"
>this.inStaticNestedArrowFunction = "string" : "string"
>this.inStaticNestedArrowFunction : string | number
>this : typeof C
>inStaticNestedArrowFunction : string | number
>"string" : "string"
            }
        };
    }
    static get() {
>get : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inStaticGetter = 0;
>this.inStaticGetter = 0 : 0
>this.inStaticGetter : string | number
>this : typeof C
>inStaticGetter : string | number
>0 : 0
        }
        else {
            this.inStaticGetter = "string"
>this.inStaticGetter = "string" : "string"
>this.inStaticGetter : string | number
>this : typeof C
>inStaticGetter : string | number
>"string" : "string"
        }
    }
    static set() {
>set : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inStaticSetter = 0;
>this.inStaticSetter = 0 : 0
>this.inStaticSetter : string | number
>this : typeof C
>inStaticSetter : string | number
>0 : 0
        }
        else {
            this.inStaticSetter = "string"
>this.inStaticSetter = "string" : "string"
>this.inStaticSetter : string | number
>this : typeof C
>inStaticSetter : string | number
>"string" : "string"
        }
    }
    static prop = () => {
>prop : () => void
>() => {        if (Math.random()) {            this.inStaticPropertyDeclaration = 0;        }        else {            this.inStaticPropertyDeclaration = "string"        }    } : () => void

        if (Math.random()) {
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number

            this.inStaticPropertyDeclaration = 0;
>this.inStaticPropertyDeclaration = 0 : 0
>this.inStaticPropertyDeclaration : string | number
>this : typeof C
>inStaticPropertyDeclaration : string | number
>0 : 0
        }
        else {
            this.inStaticPropertyDeclaration = "string"
>this.inStaticPropertyDeclaration = "string" : "string"
>this.inStaticPropertyDeclaration : string | number
>this : typeof C
>inStaticPropertyDeclaration : string | number
>"string" : "string"
        }
    }
}

=== b.ts ===
var c = new C();
>c : C
>new C() : C
>C : typeof C

var stringOrNumber: string | number;
>stringOrNumber : string | number

var stringOrNumber = c.inConstructor;
>stringOrNumber : string | number
>c.inConstructor : string | number
>c : C
>inConstructor : string | number

var stringOrNumberOrUndefined: string | number | undefined;
>stringOrNumberOrUndefined : string | number | undefined

var stringOrNumberOrUndefined = c.inMethod;
>stringOrNumberOrUndefined : string | number | undefined
>c.inMethod : string | number
>c : C
>inMethod : string | number

var stringOrNumberOrUndefined = c.inGetter;
>stringOrNumberOrUndefined : string | number | undefined
>c.inGetter : string | number
>c : C
>inGetter : string | number

var stringOrNumberOrUndefined = c.inSetter;
>stringOrNumberOrUndefined : string | number | undefined
>c.inSetter : string | number
>c : C
>inSetter : string | number

var stringOrNumberOrUndefined = c.inPropertyDeclaration;
>stringOrNumberOrUndefined : string | number | undefined
>c.inPropertyDeclaration : string | number
>c : C
>inPropertyDeclaration : string | number

var stringOrNumberOrUndefined = c.inNestedArrowFunction
>stringOrNumberOrUndefined : string | number | undefined
>c.inNestedArrowFunction : string | number
>c : C
>inNestedArrowFunction : string | number

var stringOrNumberOrBoolean: string | number | boolean;
>stringOrNumberOrBoolean : string | number | boolean

var number: number;
>number : number

var number = c.inMultiple;
>number : number
>c.inMultiple : string | number | boolean
>c : C
>inMultiple : string | number | boolean

var stringOrBooleanOrUndefined : string | boolean | undefined;
>stringOrBooleanOrUndefined : string | boolean | undefined

var stringOrBooleanOrUndefined = c.inMultipleMethods;
>stringOrBooleanOrUndefined : string | boolean | undefined
>c.inMultipleMethods : string | boolean
>c : C
>inMultipleMethods : string | boolean

var any: any;
>any : any

var any = c.inMethodNullable;
>any : any
>c.inMethodNullable : null | undefined
>c : C
>inMethodNullable : null | undefined


var stringOrNumberOrUndefined = C.inStaticMethod;
>stringOrNumberOrUndefined : string | number | undefined
>C.inStaticMethod : string | number
>C : typeof C
>inStaticMethod : string | number

var stringOrNumberOrUndefined = C.inStaticGetter;
>stringOrNumberOrUndefined : string | number | undefined
>C.inStaticGetter : string | number
>C : typeof C
>inStaticGetter : string | number

var stringOrNumberOrUndefined = C.inStaticSetter;
>stringOrNumberOrUndefined : string | number | undefined
>C.inStaticSetter : string | number
>C : typeof C
>inStaticSetter : string | number

var stringOrNumberOrUndefined = C.inStaticPropertyDeclaration;
>stringOrNumberOrUndefined : string | number | undefined
>C.inStaticPropertyDeclaration : string | number
>C : typeof C
>inStaticPropertyDeclaration : string | number

var stringOrNumberOrUndefined = C.inStaticNestedArrowFunction;
>stringOrNumberOrUndefined : string | number | undefined
>C.inStaticNestedArrowFunction : string | number
>C : typeof C
>inStaticNestedArrowFunction : string | number

