--- old.intersectionIncludingPropFromGlobalAugmentation.symbols
+++ new.intersectionIncludingPropFromGlobalAugmentation.symbols
@@= skipped -4, +4 lines =@@
 
 interface Test1 { toString: null | 'string'; }
 >Test1 : Symbol(Test1, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 0, 0))
->toString : Symbol(Test1.toString, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 2, 17))
+>toString : Symbol(toString, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 2, 17))
 
 type Test2 = Test1 & { optional?: unknown };
 >Test2 : Symbol(Test2, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 2, 46))
@@= skipped -18, +18 lines =@@
 
 const toString = target.toString;
 >toString : Symbol(toString, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 7, 5))
->target.toString : Symbol(Test1.toString, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 2, 17))
+>target.toString : Symbol(toString, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 2, 17))
 >target : Symbol(target, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 5, 5))
->toString : Symbol(Test1.toString, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 2, 17))
+>toString : Symbol(toString, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 2, 17))
 
 const hasOwn = target.hasOwnProperty; // not an own member but it should still be accessible
 >hasOwn : Symbol(hasOwn, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 8, 5))
->target.hasOwnProperty : Symbol(Object.hasOwnProperty, Decl(lib.es5.d.ts, --, --))
+>target.hasOwnProperty : Symbol(hasOwnProperty, Decl(lib.es5.d.ts, --, --))
 >target : Symbol(target, Decl(intersectionIncludingPropFromGlobalAugmentation.ts, 5, 5))
->hasOwnProperty : Symbol(Object.hasOwnProperty, Decl(lib.es5.d.ts, --, --))
+>hasOwnProperty : Symbol(hasOwnProperty, Decl(lib.es5.d.ts, --, --))
 
 export {}
 
