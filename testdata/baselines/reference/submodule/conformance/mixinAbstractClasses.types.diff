--- old.mixinAbstractClasses.types
+++ new.mixinAbstractClasses.types
@@= skipped -1, +1 lines =@@
 
 === mixinAbstractClasses.ts ===
 interface Mixin {
+>Mixin : Mixin
+
     mixinMethod(): void;
 >mixinMethod : () => void
 }
 
 function Mixin<TBaseClass extends abstract new (...args: any) => any>(baseClass: TBaseClass): TBaseClass & (abstract new (...args: any) => Mixin) {
->Mixin : <TBaseClass extends abstract new (...args: any) => any>(baseClass: TBaseClass) => TBaseClass & (abstract new (...args: any) => Mixin)
+>Mixin : <TBaseClass extends new (...args: any) => any>(baseClass: TBaseClass) => TBaseClass & new (...args: any) => Mixin
+>TBaseClass : TBaseClass
 >args : any
 >baseClass : TBaseClass
 >args : any
 
     abstract class MixinClass extends baseClass implements Mixin {
->MixinClass : MixinClass
+>MixinClass : MixinClass<TBaseClass>
 >baseClass : TBaseClass
 
         mixinMethod() {
@@= skipped -19, +22 lines =@@
         }
     }
     return MixinClass;
->MixinClass : ((abstract new (...args: any) => MixinClass) & { prototype: Mixin<any>.MixinClass; }) & TBaseClass
+>MixinClass : { new (...args: any): MixinClass<TBaseClass>; prototype: MixinClass<any>; } & TBaseClass
 }
 
 class ConcreteBase {
@@= skipped -20, +20 lines =@@
 class DerivedFromConcrete extends Mixin(ConcreteBase) {
 >DerivedFromConcrete : DerivedFromConcrete
 >Mixin(ConcreteBase) : ConcreteBase & Mixin
->Mixin : <TBaseClass extends abstract new (...args: any) => any>(baseClass: TBaseClass) => TBaseClass & (abstract new (...args: any) => Mixin)
+>Mixin : <TBaseClass extends new (...args: any) => any>(baseClass: TBaseClass) => TBaseClass & new (...args: any) => Mixin
 >ConcreteBase : typeof ConcreteBase
 }
 
@@= skipped -24, +24 lines =@@
 class DerivedFromAbstract extends Mixin(AbstractBase) {
 >DerivedFromAbstract : DerivedFromAbstract
 >Mixin(AbstractBase) : AbstractBase & Mixin
->Mixin : <TBaseClass extends abstract new (...args: any) => any>(baseClass: TBaseClass) => TBaseClass & (abstract new (...args: any) => Mixin)
+>Mixin : <TBaseClass extends new (...args: any) => any>(baseClass: TBaseClass) => TBaseClass & new (...args: any) => Mixin
 >AbstractBase : typeof AbstractBase
 
     abstractBaseMethod() {}
