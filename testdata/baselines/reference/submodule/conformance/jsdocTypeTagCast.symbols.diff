--- old.jsdocTypeTagCast.symbols
+++ new.jsdocTypeTagCast.symbols
@@= skipped -30, +30 lines =@@
 
     constructor() {
         this.p = 42;
->this.p : Symbol(SomeBase.p, Decl(b.js, 15, 19))
 >this : Symbol(SomeBase, Decl(b.js, 12, 33))
->p : Symbol(SomeBase.p, Decl(b.js, 15, 19))
     }
 }
 class SomeDerived extends SomeBase {
@@= skipped -14, +12 lines =@@
 >super : Symbol(SomeBase, Decl(b.js, 12, 33))
 
         this.x = 42;
->this.x : Symbol(SomeDerived.x, Decl(b.js, 21, 16))
 >this : Symbol(SomeDerived, Decl(b.js, 18, 1))
->x : Symbol(SomeDerived.x, Decl(b.js, 21, 16))
     }
 }
 class SomeOther {
@@= skipped -10, +8 lines =@@
 
     constructor() {
         this.q = 42;
->this.q : Symbol(SomeOther.q, Decl(b.js, 26, 19))
 >this : Symbol(SomeOther, Decl(b.js, 24, 1))
->q : Symbol(SomeOther.q, Decl(b.js, 26, 19))
     }
 }
 
@@= skipped -11, +9 lines =@@
 
     /** @type {string|number} */
     this.p = "bar";
->this.p : Symbol(SomeFakeClass.p, Decl(b.js, 31, 26))
->this : Symbol(SomeFakeClass, Decl(b.js, 29, 1))
->p : Symbol(SomeFakeClass.p, Decl(b.js, 31, 26))
 }
 
 // Type assertion should check for assignability in either direction
@@= skipped -24, +21 lines =@@
 
 someBase = /** @type {SomeBase} */(someDerived);
 >someBase : Symbol(someBase, Decl(b.js, 37, 3))
+>SomeBase : Symbol(SomeBase, Decl(b.js, 12, 33))
 >someDerived : Symbol(someDerived, Decl(b.js, 38, 3))
 
 someBase = /** @type {SomeBase} */(someBase);
 >someBase : Symbol(someBase, Decl(b.js, 37, 3))
+>SomeBase : Symbol(SomeBase, Decl(b.js, 12, 33))
 >someBase : Symbol(someBase, Decl(b.js, 37, 3))
 
 someBase = /** @type {SomeBase} */(someOther); // Error
 >someBase : Symbol(someBase, Decl(b.js, 37, 3))
+>SomeBase : Symbol(SomeBase, Decl(b.js, 12, 33))
 >someOther : Symbol(someOther, Decl(b.js, 39, 3))
 
 someDerived = /** @type {SomeDerived} */(someDerived);
 >someDerived : Symbol(someDerived, Decl(b.js, 38, 3))
+>SomeDerived : Symbol(SomeDerived, Decl(b.js, 18, 1))
 >someDerived : Symbol(someDerived, Decl(b.js, 38, 3))
 
 someDerived = /** @type {SomeDerived} */(someBase);
 >someDerived : Symbol(someDerived, Decl(b.js, 38, 3))
+>SomeDerived : Symbol(SomeDerived, Decl(b.js, 18, 1))
 >someBase : Symbol(someBase, Decl(b.js, 37, 3))
 
 someDerived = /** @type {SomeDerived} */(someOther); // Error
 >someDerived : Symbol(someDerived, Decl(b.js, 38, 3))
+>SomeDerived : Symbol(SomeDerived, Decl(b.js, 18, 1))
 >someOther : Symbol(someOther, Decl(b.js, 39, 3))
 
 someOther = /** @type {SomeOther} */(someDerived); // Error
 >someOther : Symbol(someOther, Decl(b.js, 39, 3))
+>SomeOther : Symbol(SomeOther, Decl(b.js, 24, 1))
 >someDerived : Symbol(someDerived, Decl(b.js, 38, 3))
 
 someOther = /** @type {SomeOther} */(someBase); // Error
 >someOther : Symbol(someOther, Decl(b.js, 39, 3))
+>SomeOther : Symbol(SomeOther, Decl(b.js, 24, 1))
 >someBase : Symbol(someBase, Decl(b.js, 37, 3))
 
 someOther = /** @type {SomeOther} */(someOther);
 >someOther : Symbol(someOther, Decl(b.js, 39, 3))
+>SomeOther : Symbol(SomeOther, Decl(b.js, 24, 1))
 >someOther : Symbol(someOther, Decl(b.js, 39, 3))
 
 someFakeClass = someBase;
@@= skipped -48, +57 lines =@@
 
 someBase = /** @type {SomeBase} */(someFakeClass);
 >someBase : Symbol(someBase, Decl(b.js, 37, 3))
+>SomeBase : Symbol(SomeBase, Decl(b.js, 12, 33))
 >someFakeClass : Symbol(someFakeClass, Decl(b.js, 40, 3))
 
 // Type assertion cannot be a type-predicate type
@@= skipped -13, +14 lines =@@
 
 if(/** @type {numOrStr is string} */(numOrStr === undefined)) { // Error
 >numOrStr : Symbol(numOrStr, Decl(b.js, 62, 3))
+>numOrStr : Symbol(numOrStr, Decl(b.js, 62, 3))
 >undefined : Symbol(undefined)
 
 	str = numOrStr; // Error, no narrowing occurred
@@= skipped -10, +11 lines =@@
 
 var asConst1 = /** @type {const} */(1);
 >asConst1 : Symbol(asConst1, Decl(b.js, 70, 3))
+>const : Symbol(const)
 
 var asConst2 = /** @type {const} */({
 >asConst2 : Symbol(asConst2, Decl(b.js, 71, 3))
+>const : Symbol(const)
 
     x: 1
 >x : Symbol(x, Decl(b.js, 71, 37))
