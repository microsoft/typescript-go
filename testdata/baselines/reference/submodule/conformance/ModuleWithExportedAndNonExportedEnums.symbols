//// [tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedEnums.ts] ////

=== ModuleWithExportedAndNonExportedEnums.ts ===
module A {
>A : Symbol(A, Decl(ModuleWithExportedAndNonExportedEnums.ts, 0, 0))

    export enum Color { Red, Blue }
>Color : Symbol(Color, Decl(ModuleWithExportedAndNonExportedEnums.ts, 0, 10))
>Red : Symbol(Red, Decl(ModuleWithExportedAndNonExportedEnums.ts, 1, 23))
>Blue : Symbol(Blue, Decl(ModuleWithExportedAndNonExportedEnums.ts, 1, 28))

    enum Day { Monday, Tuesday }
>Day : Symbol(Day, Decl(ModuleWithExportedAndNonExportedEnums.ts, 1, 35))
>Monday : Symbol(Monday, Decl(ModuleWithExportedAndNonExportedEnums.ts, 2, 14))
>Tuesday : Symbol(Tuesday, Decl(ModuleWithExportedAndNonExportedEnums.ts, 2, 22))
}

// not an error since exported
var a: A.Color = A.Color.Red;
>a : Symbol(a, Decl(ModuleWithExportedAndNonExportedEnums.ts, 6, 3))
>A : Symbol(A, Decl(ModuleWithExportedAndNonExportedEnums.ts, 0, 0))
>Color : Symbol(Color, Decl(ModuleWithExportedAndNonExportedEnums.ts, 0, 10))
>A.Color.Red : Symbol(Red, Decl(ModuleWithExportedAndNonExportedEnums.ts, 1, 23))
>A.Color : Symbol(Color, Decl(ModuleWithExportedAndNonExportedEnums.ts, 0, 10))
>A : Symbol(A, Decl(ModuleWithExportedAndNonExportedEnums.ts, 0, 0))
>Color : Symbol(Color, Decl(ModuleWithExportedAndNonExportedEnums.ts, 0, 10))
>Red : Symbol(Red, Decl(ModuleWithExportedAndNonExportedEnums.ts, 1, 23))

// error not exported
var b = A.Day.Monday;
>b : Symbol(b, Decl(ModuleWithExportedAndNonExportedEnums.ts, 9, 3))
>A : Symbol(A, Decl(ModuleWithExportedAndNonExportedEnums.ts, 0, 0))

