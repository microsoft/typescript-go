--- old.templateLiteralTypes6.types
+++ new.templateLiteralTypes6.types
@@= skipped -4, +4 lines =@@
 
 type Registry = {
 >Registry : Registry
->         : ^^^^^^^^
 
   a: { a1: {} };
 >a : { a1: {}; }
->  : ^^^^^^  ^^^
 >a1 : {}
->   : ^^
 
   b: { b1: {} };
 >b : { b1: {}; }
->  : ^^^^^^  ^^^
 >b1 : {}
->   : ^^
 
 };
 
 type Keyof<T> = keyof T & string;
 >Keyof : Keyof<T>
->      : ^^^^^^^^
+>T : T
 
 declare function f1<
 >f1 : <Scope extends Keyof<Registry>, Event extends Keyof<Registry[Scope]>>(eventPath: `${Scope}:${Event}`) => void
->   : ^     ^^^^^^^^^               ^^     ^^^^^^^^^                      ^^         ^^                   ^^^^^    
 
   Scope extends Keyof<Registry>,
+>Scope : Scope
+
   Event extends Keyof<Registry[Scope]>,
+>Event : Event
+
 >(eventPath: `${Scope}:${Event}`): void;
 >eventPath : `${Scope}:${Event}`
->          : ^^^^^^^^^^^^^^^^^^^
 
 function f2<
 >f2 : <Scope extends Keyof<Registry>, Event extends Keyof<Registry[Scope]>>(scope: Scope, event: Event) => void
->   : ^     ^^^^^^^^^               ^^     ^^^^^^^^^                      ^^     ^^     ^^     ^^     ^^^^^^^^^
 
   Scope extends Keyof<Registry>,
+>Scope : Scope
+
   Event extends Keyof<Registry[Scope]>,
+>Event : Event
+
 >(scope: Scope, event: Event) {
 >scope : Scope
->      : ^^^^^
 >event : Event
->      : ^^^^^
 
   f1(`${scope}:${event}`);
 >f1(`${scope}:${event}`) : void
->                        : ^^^^
->f1 : <Scope_1 extends Keyof<Registry>, Event_1 extends Keyof<Registry[Scope_1]>>(eventPath: `${Scope_1}:${Event_1}`) => void
->   : ^^^^^^^^^^^^^^^^^               ^^^^^^^^^^^^^^^^^^                        ^^         ^^                       ^^^^^    
+>f1 : <Scope extends Keyof<Registry>, Event extends Keyof<Registry[Scope]>>(eventPath: `${Scope}:${Event}`) => void
 >`${scope}:${event}` : `${Scope}:${Event}`
->                    : ^^^^^^^^^^^^^^^^^^^
 >scope : Scope
->      : ^^^^^
 >event : Event
->      : ^^^^^
 }
 
