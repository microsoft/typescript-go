--- old.importCallExpression4ES2020.symbols
+++ new.importCallExpression4ES2020.symbols
@@ -5,7 +5,7 @@
 >B : Symbol(B, Decl(0.ts, 0, 0))
 
     print() { return "I am B"}
->print : Symbol(B.print, Decl(0.ts, 0, 16))
+>print : Symbol(print, Decl(0.ts, 0, 16))
 }
 
 export function foo() { return "foo" }
@@ -23,29 +23,23 @@
 >C : Symbol(C, Decl(2.ts, 0, 25))
 
     private myModule = import("./0");
->myModule : Symbol(C.myModule, Decl(2.ts, 1, 9))
->"./0" : Symbol("0", Decl(0.ts, 0, 0))
+>myModule : Symbol(myModule, Decl(2.ts, 1, 9))
 
     method() {
->method : Symbol(C.method, Decl(2.ts, 2, 37))
+>method : Symbol(method, Decl(2.ts, 2, 37))
 
         const loadAsync = import ("./0");
 >loadAsync : Symbol(loadAsync, Decl(2.ts, 4, 13))
->"./0" : Symbol("0", Decl(0.ts, 0, 0))
 
         this.myModule.then(Zero => {
->this.myModule.then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
->this.myModule : Symbol(C.myModule, Decl(2.ts, 1, 9))
+>this.myModule : Symbol(myModule, Decl(2.ts, 1, 9))
 >this : Symbol(C, Decl(2.ts, 0, 25))
->myModule : Symbol(C.myModule, Decl(2.ts, 1, 9))
->then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
+>myModule : Symbol(myModule, Decl(2.ts, 1, 9))
 >Zero : Symbol(Zero, Decl(2.ts, 5, 27))
 
             console.log(Zero.foo());
 >console : Symbol(console, Decl(2.ts, 0, 11))
->Zero.foo : Symbol(foo, Decl(0.ts, 2, 1))
 >Zero : Symbol(Zero, Decl(2.ts, 5, 27))
->foo : Symbol(foo, Decl(0.ts, 2, 1))
 
         }, async err => {
 >err : Symbol(err, Decl(2.ts, 7, 16))
@@ -56,13 +50,10 @@
 
             let one = await import("./1");
 >one : Symbol(one, Decl(2.ts, 9, 15))
->"./1" : Symbol("1", Decl(1.ts, 0, 0))
 
             console.log(one.backup());
 >console : Symbol(console, Decl(2.ts, 0, 11))
->one.backup : Symbol(backup, Decl(1.ts, 0, 0))
 >one : Symbol(one, Decl(2.ts, 9, 15))
->backup : Symbol(backup, Decl(1.ts, 0, 0))
 
         });
     }
