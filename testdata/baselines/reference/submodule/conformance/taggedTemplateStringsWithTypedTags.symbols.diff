--- old.taggedTemplateStringsWithTypedTags.symbols
+++ new.taggedTemplateStringsWithTypedTags.symbols
@@= skipped -10, +10 lines =@@
 >I : Symbol(I, Decl(taggedTemplateStringsWithTypedTags.ts, 0, 0))
 
     g: I;
->g : Symbol(I.g, Decl(taggedTemplateStringsWithTypedTags.ts, 1, 62))
+>g : Symbol(g, Decl(taggedTemplateStringsWithTypedTags.ts, 1, 62))
 >I : Symbol(I, Decl(taggedTemplateStringsWithTypedTags.ts, 0, 0))
 
     h: I;
->h : Symbol(I.h, Decl(taggedTemplateStringsWithTypedTags.ts, 2, 9))
+>h : Symbol(h, Decl(taggedTemplateStringsWithTypedTags.ts, 2, 9))
 >I : Symbol(I, Decl(taggedTemplateStringsWithTypedTags.ts, 0, 0))
 
     member: I;
->member : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
+>member : Symbol(member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
 >I : Symbol(I, Decl(taggedTemplateStringsWithTypedTags.ts, 0, 0))
 
     thisIsNotATag(x: string): void
->thisIsNotATag : Symbol(I.thisIsNotATag, Decl(taggedTemplateStringsWithTypedTags.ts, 4, 14))
+>thisIsNotATag : Symbol(thisIsNotATag, Decl(taggedTemplateStringsWithTypedTags.ts, 4, 14))
 >x : Symbol(x, Decl(taggedTemplateStringsWithTypedTags.ts, 5, 18))
 
     [x: number]: I;
@@= skipped -31, +31 lines =@@
 >f : Symbol(f, Decl(taggedTemplateStringsWithTypedTags.ts, 9, 3))
 
 f `abc`.member
->f `abc`.member : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
 >f : Symbol(f, Decl(taggedTemplateStringsWithTypedTags.ts, 9, 3))
->member : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
 
 f `abc${1}def${2}ghi`.member;
->f `abc${1}def${2}ghi`.member : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
 >f : Symbol(f, Decl(taggedTemplateStringsWithTypedTags.ts, 9, 3))
->member : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
 
 f `abc`["member"];
 >f : Symbol(f, Decl(taggedTemplateStringsWithTypedTags.ts, 9, 3))
->"member" : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
 
 f `abc${1}def${2}ghi`["member"];
 >f : Symbol(f, Decl(taggedTemplateStringsWithTypedTags.ts, 9, 3))
->"member" : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
 
 f `abc`[0].member `abc${1}def${2}ghi`;
->f `abc`[0].member : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
 >f : Symbol(f, Decl(taggedTemplateStringsWithTypedTags.ts, 9, 3))
->member : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
 
 f `abc${1}def${2}ghi`["member"].member `abc${1}def${2}ghi`;
->f `abc${1}def${2}ghi`["member"].member : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
 >f : Symbol(f, Decl(taggedTemplateStringsWithTypedTags.ts, 9, 3))
->"member" : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
->member : Symbol(I.member, Decl(taggedTemplateStringsWithTypedTags.ts, 3, 9))
 
 f.thisIsNotATag(`abc`);
->f.thisIsNotATag : Symbol(I.thisIsNotATag, Decl(taggedTemplateStringsWithTypedTags.ts, 4, 14))
+>f.thisIsNotATag : Symbol(thisIsNotATag, Decl(taggedTemplateStringsWithTypedTags.ts, 4, 14))
 >f : Symbol(f, Decl(taggedTemplateStringsWithTypedTags.ts, 9, 3))
->thisIsNotATag : Symbol(I.thisIsNotATag, Decl(taggedTemplateStringsWithTypedTags.ts, 4, 14))
+>thisIsNotATag : Symbol(thisIsNotATag, Decl(taggedTemplateStringsWithTypedTags.ts, 4, 14))
 
 f.thisIsNotATag(`abc${1}def${2}ghi`);
->f.thisIsNotATag : Symbol(I.thisIsNotATag, Decl(taggedTemplateStringsWithTypedTags.ts, 4, 14))
+>f.thisIsNotATag : Symbol(thisIsNotATag, Decl(taggedTemplateStringsWithTypedTags.ts, 4, 14))
 >f : Symbol(f, Decl(taggedTemplateStringsWithTypedTags.ts, 9, 3))
->thisIsNotATag : Symbol(I.thisIsNotATag, Decl(taggedTemplateStringsWithTypedTags.ts, 4, 14))
+>thisIsNotATag : Symbol(thisIsNotATag, Decl(taggedTemplateStringsWithTypedTags.ts, 4, 14))
 
