--- old.noInfer.js
+++ new.noInfer.js
@@= skipped -84, +84 lines =@@


 //// [noInfer.js]
-"use strict";
-// NoInfer<T> is erased for primitives
 foo1('foo', 'foo'); // ok
 foo1('foo', 'bar'); // error
 foo2('foo', ['bar']); // error
 foo3('foo', ['bar']); // error
 foo4('foo', { x: 'bar' }); // error
 foo5('foo', { x: 'bar' }); // error
-doSomething(new Animal(), function () { return new Animal(); }); // ok
-doSomething(new Animal(), function () { return new Dog(); }); // ok
-doSomething(new Dog(), function () { return new Animal(); }); // error
+doSomething(new Animal(), () => new Animal()); // ok
+doSomething(new Animal(), () => new Dog()); // ok
+doSomething(new Dog(), () => new Animal()); // error
 assertEqual({ x: 1 }, { x: 3 }); // ok
-var g = { x: 3, y: 2 };
+const g = { x: 3, y: 2 };
 assertEqual(g, { x: 3 }); // error
 invoke(test, { x: 1, y: 2 }); // error
 test({ x: 1, y: 2 }); // error
 doWork(comp, { foo: 42 }); // ok
 doWork(comp, {}); // error
-var mutate1 = mutate(function (a, b) { return b; });
-var OkClass = /** @class */ (function () {
-    function OkClass(clazz, _value) {
-        this.clazz = clazz;
-        this._value = _value;
-    }
-    Object.defineProperty(OkClass.prototype, "value", {
-        get: function () {
-            return this._value; // ok
-        },
-        enumerable: false,
-        configurable: true
-    });
-    return OkClass;
-}());
-var OkClass2 = /** @class */ (function () {
-    function OkClass2(clazz, _value) {
-        this.clazz = clazz;
-        this._value = _value;
-    }
-    return OkClass2;
-}());
+const mutate1 = mutate((a, b) => b);
+class OkClass {
+    clazz;
+    _value;
+    constructor(clazz, _value) {
+        this.clazz = clazz;
+        this._value = _value;
+    }
+    get value() {
+        return this._value; // ok
+    }
+}
+class OkClass2 {
+    clazz;
+    _value;
+    constructor(clazz, _value) {
+        this.clazz = clazz;
+        this._value = _value;
+    }
+}


 //// [noInfer.d.ts]
+// NoInfer<T> is erased for primitives
 type T00 = NoInfer<string>;
 type T01 = NoInfer<string | number | boolean>;
 type T02 = NoInfer<undefined>;
@@= skipped -50, +47 lines =@@
 type T04 = NoInfer<`foo${string}`>;
 type T05 = NoInfer<`foo${string}` & `${string}bar`>;
 type T06 = NoInfer<{}>;
+// NoInfer<T> is preserved for object types
 type T10 = NoInfer<string[]>;
 type T11 = NoInfer<{
     x: string;
 }>;
+// NoInfer<T> is erased if it has no effect
 type T20<T> = NoInfer<NoInfer<T>>;
 type T21<T> = NoInfer<NoInfer<T> & string>;
 type T22<T> = NoInfer<NoInfer<T> & string[]>;
+// keyof NoInfer<T> is transformed into NoInfer<keyof T>
 type T30 = keyof NoInfer<{
     a: string;
     b: string;