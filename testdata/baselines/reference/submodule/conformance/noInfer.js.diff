--- old.noInfer.js
+++ new.noInfer.js
@@= skipped -84, +84 lines =@@


 //// [noInfer.js]
-"use strict";
-// NoInfer<T> is erased for primitives
 foo1('foo', 'foo'); // ok
 foo1('foo', 'bar'); // error
 foo2('foo', ['bar']); // error
@@= skipped -20, +18 lines =@@
 doWork(comp, {}); // error
 const mutate1 = mutate((a, b) => b);
 class OkClass {
+    clazz;
+    _value;
     constructor(clazz, _value) {
         this.clazz = clazz;
         this._value = _value;
@@= skipped -9, +11 lines =@@
     }
 }
 class OkClass2 {
+    clazz;
+    _value;
     constructor(clazz, _value) {
         this.clazz = clazz;
         this._value = _value;
@@= skipped -8, +10 lines =@@


 //// [noInfer.d.ts]
+// NoInfer<T> is erased for primitives
 type T00 = NoInfer<string>;
 type T01 = NoInfer<string | number | boolean>;
 type T02 = NoInfer<undefined>;
@@= skipped -7, +8 lines =@@
 type T04 = NoInfer<`foo${string}`>;
 type T05 = NoInfer<`foo${string}` & `${string}bar`>;
 type T06 = NoInfer<{}>;
+// NoInfer<T> is preserved for object types
 type T10 = NoInfer<string[]>;
 type T11 = NoInfer<{
     x: string;
 }>;
+// NoInfer<T> is erased if it has no effect
 type T20<T> = NoInfer<NoInfer<T>>;
 type T21<T> = NoInfer<NoInfer<T> & string>;
 type T22<T> = NoInfer<NoInfer<T> & string[]>;
+// keyof NoInfer<T> is transformed into NoInfer<keyof T>
 type T30 = keyof NoInfer<{
     a: string;
     b: string;