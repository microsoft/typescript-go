--- old.unknownControlFlow.types
+++ new.unknownControlFlow.types
@@= skipped -53, +53 lines =@@
 >u : unknown
 
     let x3: {} | { x: string } | null | undefined = u;
->x3 : {} | { x: string; } | null | undefined
+>x3 : { x: string; } | {} | null | undefined
 >x : string
 >u : unknown
 
@@= skipped -38, +38 lines =@@
 
 function f11<T>(x: T) {
 >f11 : <T>(x: T) => void
+>T : T
 >x : T
 
     if (x) {
@@= skipped -27, +28 lines =@@
 
 function f12<T extends {}>(x: T) {
 >f12 : <T extends {}>(x: T) => void
+>T : T
 >x : T
 
     if (x) {
@@= skipped -83, +84 lines =@@
 
 function f21<T>(x: T) {
 >f21 : <T>(x: T) => void
+>T : T
 >x : T
 
     if (x !== undefined) {
@@= skipped -67, +68 lines =@@
 
 function f22<T extends {} | undefined>(x: T) {
 >f22 : <T extends {} | undefined>(x: T) => void
+>T : T
 >x : T
 
     if (x !== undefined) {
@@= skipped -66, +67 lines =@@
 }
 
 function f23<T>(x: T | undefined | null) {
->f23 : <T>(x: T | undefined | null) => void
+>f23 : <T>(x: T | null | undefined) => void
+>T : T
 >x : T | null | undefined
 
     if (x !== undefined) {
@@= skipped -9, +10 lines =@@
 >undefined : undefined
 
         x;  // T & {} | null
->x : (T & {}) | null
+>x : T & {} | null
     }
     if (x !== null) {
 >x !== null : boolean
 >x : T | null | undefined
 
         x;  // T & {} | undefined
->x : (T & {}) | undefined
+>x : T & {} | undefined
     }
     if (x != undefined) {
 >x != undefined : boolean
@@= skipped -32, +32 lines =@@
 
     if (typeof x === "object") {
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : {}
 >"object" : "object"
 
@@= skipped -11, +11 lines =@@
 
 function f31<T>(x: T) {
 >f31 : <T>(x: T) => void
+>T : T
 >x : T
 
     if (typeof x === "object") {
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : T
 >"object" : "object"
 
         x;  // T & object | T & null
->x : (T & object) | (T & null)
+>x : T & null | T & object
     }
     if (x && typeof x === "object") {
 >x && typeof x === "object" : boolean
 >x : T
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : NonNullable<T>
 >"object" : "object"
 
@@= skipped -23, +24 lines =@@
 >x : T & object
     }
     if (typeof x === "object" && x) {
->typeof x === "object" && x : false | (T & object) | (T & null)
+>typeof x === "object" && x : false | T & null | T & object
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : T
 >"object" : "object"
->x : (T & object) | (T & null)
+>x : T & null | T & object
 
         x;  // T & object
 >x : T & object
@@= skipped -14, +14 lines =@@
 
 function f32<T extends {} | undefined>(x: T) {
 >f32 : <T extends {} | undefined>(x: T) => void
+>T : T
 >x : T
 
     if (typeof x === "object") {
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : T
 >"object" : "object"
 
@@= skipped -15, +16 lines =@@
 
 function possiblyNull<T>(x: T) {
 >possiblyNull : <T>(x: T) => T | null
+>T : T
 >x : T
 
     return !!true ? x : null;  // T | null
@@= skipped -12, +13 lines =@@
 
 function possiblyUndefined<T>(x: T) {
 >possiblyUndefined : <T>(x: T) => T | undefined
+>T : T
 >x : T
 
     return !!true ? x : undefined;  // T | undefined
@@= skipped -13, +14 lines =@@
 
 function possiblyNullOrUndefined<T>(x: T) {
 >possiblyNullOrUndefined : <T>(x: T) => T | null | undefined
+>T : T
 >x : T
 
     return possiblyUndefined(possiblyNull(x));  // T | null | undefined
 >possiblyUndefined(possiblyNull(x)) : T | null | undefined
->possiblyUndefined : <T_1>(x: T_1) => T_1 | undefined
+>possiblyUndefined : <T>(x: T) => T | undefined
 >possiblyNull(x) : T | null
->possiblyNull : <T_1>(x: T_1) => T_1 | null
+>possiblyNull : <T>(x: T) => T | null
 >x : T
 }
 
 function ensureNotNull<T>(x: T) {
 >ensureNotNull : <T>(x: T) => T & ({} | undefined)
+>T : T
 >x : T
 
     if (x === null) throw Error();
@@= skipped -26, +28 lines =@@
 
 function ensureNotUndefined<T>(x: T) {
 >ensureNotUndefined : <T>(x: T) => T & ({} | null)
+>T : T
 >x : T
 
     if (x === undefined) throw Error();
@@= skipped -15, +16 lines =@@
 
 function ensureNotNullOrUndefined<T>(x: T) {
 >ensureNotNullOrUndefined : <T>(x: T) => T & {}
+>T : T
 >x : T
 
     return ensureNotUndefined(ensureNotNull(x));  // T & {}
 >ensureNotUndefined(ensureNotNull(x)) : T & {}
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >ensureNotNull(x) : T & ({} | undefined)
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >x : T
 }
 
@@= skipped -30, +31 lines =@@
 
 type QQ<T> = NonNullable<NonNullable<NonNullable<T>>>;
 >QQ : QQ<T>
+>T : T
 
 function f41<T>(a: T) {
 >f41 : <T>(a: T) => void
+>T : T
 >a : T
 
     let a1 = ensureNotUndefined(ensureNotNull(a));  // T & {}
 >a1 : T & {}
 >ensureNotUndefined(ensureNotNull(a)) : T & {}
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >ensureNotNull(a) : T & ({} | undefined)
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >a : T
 
     let a2 = ensureNotNull(ensureNotUndefined(a));  // T & {}
 >a2 : T & {}
 >ensureNotNull(ensureNotUndefined(a)) : T & {}
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >ensureNotUndefined(a) : T & ({} | null)
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >a : T
 
     let a3 = ensureNotNull(ensureNotNull(a));  // T & {} | T & undefined
->a3 : (T & undefined) | (T & {})
->ensureNotNull(ensureNotNull(a)) : (T & undefined) | (T & {})
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>a3 : T & undefined | T & {}
+>ensureNotNull(ensureNotNull(a)) : T & undefined | T & {}
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >ensureNotNull(a) : T & ({} | undefined)
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >a : T
 
     let a4 = ensureNotUndefined(ensureNotUndefined(a));  // T & {} | T & null
->a4 : (T & {}) | (T & null)
->ensureNotUndefined(ensureNotUndefined(a)) : (T & {}) | (T & null)
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>a4 : T & null | T & {}
+>ensureNotUndefined(ensureNotUndefined(a)) : T & null | T & {}
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >ensureNotUndefined(a) : T & ({} | null)
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >a : T
 
     let a5 = ensureNotNullOrUndefined(ensureNotNullOrUndefined(a));  // T & {}
 >a5 : T & {}
 >ensureNotNullOrUndefined(ensureNotNullOrUndefined(a)) : T & {}
->ensureNotNullOrUndefined : <T_1>(x: T_1) => T_1 & {}
+>ensureNotNullOrUndefined : <T>(x: T) => T & {}
 >ensureNotNullOrUndefined(a) : T & {}
->ensureNotNullOrUndefined : <T_1>(x: T_1) => T_1 & {}
+>ensureNotNullOrUndefined : <T>(x: T) => T & {}
 >a : T
 
     let a6 = ensureNotNull(possiblyNullOrUndefined(a));  // T & {} | undefined
->a6 : (T & {}) | undefined
->ensureNotNull(possiblyNullOrUndefined(a)) : (T & {}) | undefined
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>a6 : T & {} | undefined
+>ensureNotNull(possiblyNullOrUndefined(a)) : T & {} | undefined
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >possiblyNullOrUndefined(a) : T | null | undefined
->possiblyNullOrUndefined : <T_1>(x: T_1) => T_1 | null | undefined
+>possiblyNullOrUndefined : <T>(x: T) => T | null | undefined
 >a : T
 
     let a7 = ensureNotUndefined(possiblyNullOrUndefined(a));  // T & {} | null
->a7 : (T & {}) | null
->ensureNotUndefined(possiblyNullOrUndefined(a)) : (T & {}) | null
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>a7 : T & {} | null
+>ensureNotUndefined(possiblyNullOrUndefined(a)) : T & {} | null
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >possiblyNullOrUndefined(a) : T | null | undefined
->possiblyNullOrUndefined : <T_1>(x: T_1) => T_1 | null | undefined
+>possiblyNullOrUndefined : <T>(x: T) => T | null | undefined
 >a : T
 
     let a8 = ensureNotNull(possiblyUndefined(a));  // T & {} | undefined
->a8 : (T & {}) | undefined
->ensureNotNull(possiblyUndefined(a)) : (T & {}) | undefined
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>a8 : T & {} | undefined
+>ensureNotNull(possiblyUndefined(a)) : T & {} | undefined
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >possiblyUndefined(a) : T | undefined
->possiblyUndefined : <T_1>(x: T_1) => T_1 | undefined
+>possiblyUndefined : <T>(x: T) => T | undefined
 >a : T
 
     let a9 = ensureNotUndefined(possiblyNull(a));  // T & {} | null
->a9 : (T & {}) | null
->ensureNotUndefined(possiblyNull(a)) : (T & {}) | null
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>a9 : T & {} | null
+>ensureNotUndefined(possiblyNull(a)) : T & {} | null
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >possiblyNull(a) : T | null
->possiblyNull : <T_1>(x: T_1) => T_1 | null
+>possiblyNull : <T>(x: T) => T | null
 >a : T
 }
 
@@= skipped -82, +84 lines =@@
 
 function deepEquals<T>(a: T, b: T): boolean {
 >deepEquals : <T>(a: T, b: T) => boolean
+>T : T
 >a : T
 >b : T
 
@@= skipped -8, +9 lines =@@
 >typeof a !== 'object' || typeof b !== 'object' || !a : boolean
 >typeof a !== 'object' || typeof b !== 'object' : boolean
 >typeof a !== 'object' : boolean
->typeof a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >a : T
 >'object' : "object"
 >typeof b !== 'object' : boolean
->typeof b : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof b : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >b : T
 >'object' : "object"
 >!a : boolean
->a : (T & object) | (T & null)
+>a : T & null | T & object
 >!b : boolean
->b : (T & object) | (T & null)
+>b : T & null | T & object
 
         return false;
 >false : false
@@= skipped -59, +59 lines =@@
 
 function foo<T>(x: T | null) {
 >foo : <T>(x: T | null) => void
+>T : T
 >x : T | null
 
     let y = x;
@@= skipped -21, +22 lines =@@
 
 function ff1<T>(t: T, k: keyof T) {
 >ff1 : <T>(t: T, k: keyof T) => void
+>T : T
 >t : T
 >k : keyof T
 
@@= skipped -11, +12 lines =@@
 
 function ff2<T>(t: T & {}, k: keyof T) {
 >ff2 : <T>(t: T & {}, k: keyof T) => void
+>T : T
 >t : T & {}
 >k : keyof T
 
     t[k];
->t[k] : (T & {})[keyof T]
+>t[k] : T & {}[keyof T]
 >t : T & {}
 >k : keyof T
 }
 
 function ff3<T>(t: T, k: keyof (T & {})) {
 >ff3 : <T>(t: T, k: keyof (T & {})) => void
+>T : T
 >t : T
 >k : keyof (T & {})
 
@@= skipped -22, +24 lines =@@
 
 function ff4<T>(t: T & {}, k: keyof (T & {})) {
 >ff4 : <T>(t: T & {}, k: keyof (T & {})) => void
+>T : T
 >t : T & {}
 >k : keyof (T & {})
 
     t[k];
->t[k] : (T & {})[keyof (T & {})]
+>t[k] : T & {}[keyof (T & {})]
 >t : T & {}
 >k : keyof (T & {})
 }
@@= skipped -40, +41 lines =@@
 
 type Bar<T extends NullableFoo> = NonNullable<T>[string];
 >Bar : Bar<T>
+>T : T
 
 // Generics and intersections with {}
 
 function fx0<T>(value: T & ({} | null)) {
 >fx0 : <T>(value: T & ({} | null)) => void
+>T : T
 >value : T & ({} | null)
 
     if (value === 42) {
@@= skipped -23, +25 lines =@@
 
 function fx1<T extends unknown>(value: T & ({} | null)) {
 >fx1 : <T extends unknown>(value: T & ({} | null)) => void
+>T : T
 >value : T & ({} | null)
 
     if (value === 42) {
@@= skipped -17, +18 lines =@@
 }
 
 function fx2<T extends {}>(value: T & ({} | null)) {
->fx2 : <T extends {}>(value: T & ({} | null)) => void
+>fx2 : <T extends {}>(value: T) => void
+>T : T
 >value : T
 
     if (value === 42) {
@@= skipped -18, +19 lines =@@
 }
 
 function fx3<T extends {} | undefined>(value: T & ({} | null)) {
->fx3 : <T extends {} | undefined>(value: T & ({} | null)) => void
+>fx3 : <T extends {} | undefined>(value: T & {}) => void
+>T : T
 >value : T & {}
 
     if (value === 42) {
@@= skipped -18, +19 lines =@@
 }
 
 function fx4<T extends {} | null>(value: T & ({} | null)) {
->fx4 : <T extends {} | null>(value: T & ({} | null)) => void
+>fx4 : <T extends {} | null>(value: T) => void
+>T : T
 >value : T
 
     if (value === 42) {
@@= skipped -19, +20 lines =@@
 
 function fx5<T extends {} | null | undefined>(value: T & ({} | null)) {
 >fx5 : <T extends {} | null | undefined>(value: T & ({} | null)) => void
+>T : T
 >value : T & ({} | null)
 
     if (value === 42) {
@@= skipped -76, +77 lines =@@
 
 function doSomething1<T extends unknown>(value: T): T {
 >doSomething1 : <T extends unknown>(value: T) => T
+>T : T
 >value : T
 
     if (value === undefined) {
@@= skipped -72, +73 lines =@@
 
 type R<T extends keyof TypeA> =
 >R : R<T>
+>T : T
 
     T extends keyof TypeB ? [TypeA[T], TypeB[T]] : never;
 
 type R2<T extends PropertyKey> =
 >R2 : R2<T>
+>T : T
 
     T extends keyof TypeA ? T extends keyof TypeB ? [TypeA[T], TypeB[T]] : never : never;
 
@@= skipped -14, +16 lines =@@
 >AB : AB
 
 function x<T_AB extends AB>(x: T_AB & undefined, y: any) {
->x : <T_AB extends AB>(x: T_AB & undefined, y: any) => void
+>x : <T_AB extends AB>(x: never, y: any) => void
+>T_AB : T_AB
 >x : never
 >y : any
 
