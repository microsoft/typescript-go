--- old.unknownControlFlow.types
+++ new.unknownControlFlow.types
@@= skipped -334, +334 lines =@@
 }

 function f23<T>(x: T | undefined | null) {
->f23 : <T>(x: T | undefined | null) => void
+>f23 : <T>(x: T | null | undefined) => void
 >x : T | null | undefined

     if (x !== undefined) {
@@= skipped -9, +9 lines =@@
 >undefined : undefined

         x;  // T & {} | null
->x : (T & {}) | null
+>x : T & {} | null
     }
     if (x !== null) {
 >x !== null : boolean
 >x : T | null | undefined

         x;  // T & {} | undefined
->x : (T & {}) | undefined
+>x : T & {} | undefined
     }
     if (x != undefined) {
 >x != undefined : boolean
@@= skipped -52, +52 lines =@@
 >"object" : "object"

         x;  // T & object | T & null
->x : (T & null) | (T & object)
+>x : T & null | T & object
     }
     if (x && typeof x === "object") {
 >x && typeof x === "object" : boolean
@@= skipped -14, +14 lines =@@
 >x : T & object
     }
     if (typeof x === "object" && x) {
->typeof x === "object" && x : false | (T & null) | (T & object)
+>typeof x === "object" && x : false | T & null | T & object
 >typeof x === "object" : boolean
 >typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : T
 >"object" : "object"
->x : (T & null) | (T & object)
+>x : T & null | T & object

         x;  // T & object
 >x : T & object
@@= skipped -147, +147 lines =@@
 >a : T

     let a3 = ensureNotNull(ensureNotNull(a));  // T & {} | T & undefined
->a3 : (T & undefined) | (T & {})
->ensureNotNull(ensureNotNull(a)) : (T & undefined) | (T & {})
+>a3 : T & undefined | T & {}
+>ensureNotNull(ensureNotNull(a)) : T & undefined | T & {}
 >ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
 >ensureNotNull(a) : T & ({} | undefined)
 >ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
 >a : T

     let a4 = ensureNotUndefined(ensureNotUndefined(a));  // T & {} | T & null
->a4 : (T & null) | (T & {})
->ensureNotUndefined(ensureNotUndefined(a)) : (T & null) | (T & {})
+>a4 : T & null | T & {}
+>ensureNotUndefined(ensureNotUndefined(a)) : T & null | T & {}
 >ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
 >ensureNotUndefined(a) : T & ({} | null)
 >ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
@@= skipped -24, +24 lines =@@
 >a : T

     let a6 = ensureNotNull(possiblyNullOrUndefined(a));  // T & {} | undefined
->a6 : (T & {}) | undefined
->ensureNotNull(possiblyNullOrUndefined(a)) : (T & {}) | undefined
+>a6 : T & {} | undefined
+>ensureNotNull(possiblyNullOrUndefined(a)) : T & {} | undefined
 >ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
 >possiblyNullOrUndefined(a) : T | null | undefined
 >possiblyNullOrUndefined : <T_1>(x: T_1) => T_1 | null | undefined
 >a : T

     let a7 = ensureNotUndefined(possiblyNullOrUndefined(a));  // T & {} | null
->a7 : (T & {}) | null
->ensureNotUndefined(possiblyNullOrUndefined(a)) : (T & {}) | null
+>a7 : T & {} | null
+>ensureNotUndefined(possiblyNullOrUndefined(a)) : T & {} | null
 >ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
 >possiblyNullOrUndefined(a) : T | null | undefined
 >possiblyNullOrUndefined : <T_1>(x: T_1) => T_1 | null | undefined
 >a : T

     let a8 = ensureNotNull(possiblyUndefined(a));  // T & {} | undefined
->a8 : (T & {}) | undefined
->ensureNotNull(possiblyUndefined(a)) : (T & {}) | undefined
+>a8 : T & {} | undefined
+>ensureNotNull(possiblyUndefined(a)) : T & {} | undefined
 >ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
 >possiblyUndefined(a) : T | undefined
 >possiblyUndefined : <T_1>(x: T_1) => T_1 | undefined
 >a : T

     let a9 = ensureNotUndefined(possiblyNull(a));  // T & {} | null
->a9 : (T & {}) | null
->ensureNotUndefined(possiblyNull(a)) : (T & {}) | null
+>a9 : T & {} | null
+>ensureNotUndefined(possiblyNull(a)) : T & {} | null
 >ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
 >possiblyNull(a) : T | null
 >possiblyNull : <T_1>(x: T_1) => T_1 | null
@@= skipped -52, +52 lines =@@
 >b : T
 >'object' : "object"
 >!a : boolean
->a : (T & null) | (T & object)
+>a : T & null | T & object
 >!b : boolean
->b : (T & null) | (T & object)
+>b : T & null | T & object

         return false;
 >false : false
@@= skipped -185, +185 lines =@@
 }

 function fx2<T extends {}>(value: T & ({} | null)) {
->fx2 : <T extends {}>(value: T & ({} | null)) => void
+>fx2 : <T extends {}>(value: T) => void
 >value : T

     if (value === 42) {
@@= skipped -18, +18 lines =@@
 }

 function fx3<T extends {} | undefined>(value: T & ({} | null)) {
->fx3 : <T extends {} | undefined>(value: T & ({} | null)) => void
+>fx3 : <T extends {} | undefined>(value: T & {}) => void
 >value : T & {}

     if (value === 42) {
@@= skipped -18, +18 lines =@@
 }

 function fx4<T extends {} | null>(value: T & ({} | null)) {
->fx4 : <T extends {} | null>(value: T & ({} | null)) => void
+>fx4 : <T extends {} | null>(value: T) => void
 >value : T

     if (value === 42) {
@@= skipped -181, +181 lines =@@
 >AB : AB

 function x<T_AB extends AB>(x: T_AB & undefined, y: any) {
->x : <T_AB extends AB>(x: T_AB & undefined, y: any) => void
+>x : <T_AB extends AB>(x: never, y: any) => void
 >x : never
 >y : any
