--- old.typeArgumentInference.types
+++ new.typeArgumentInference.types
@@= skipped -3, +3 lines =@@
 // Generic call with no parameters
 function noParams<T>() { }
 >noParams : <T>() => void
+>T : T
 
 noParams();
 >noParams() : void
@@= skipped -16, +17 lines =@@
 // Generic call with parameters but none use type parameter type
 function noGenericParams<T>(n: string) { }
 >noGenericParams : <T>(n: string) => void
+>T : T
 >n : string
 
 noGenericParams('');
@@= skipped -20, +21 lines =@@
 // Generic call with multiple type parameters and only one used in parameter type annotation
 function someGenerics1<T, U>(n: T, m: number) { }
 >someGenerics1 : <T, U>(n: T, m: number) => void
+>T : T
+>U : U
 >n : T
 >m : number
 
@@= skipped -18, +20 lines =@@
 // Generic call with argument of function type whose parameter is of type parameter type
 function someGenerics2a<T>(n: (x: T) => void) { }
 >someGenerics2a : <T>(n: (x: T) => void) => void
+>T : T
 >n : (x: T) => void
 >x : T
 
@@= skipped -30, +31 lines =@@
 
 function someGenerics2b<T, U>(n: (x: T, y: U) => void) { }
 >someGenerics2b : <T, U>(n: (x: T, y: U) => void) => void
+>T : T
+>U : U
 >n : (x: T, y: U) => void
 >x : T
 >y : U
@@= skipped -37, +39 lines =@@
 // Generic call with argument of function type whose parameter is not of type parameter type but body/return type uses type parameter
 function someGenerics3<T>(producer: () => T) { }
 >someGenerics3 : <T>(producer: () => T) => void
+>T : T
 >producer : () => T
 
 someGenerics3(() => '');
@@= skipped -23, +24 lines =@@
 // 2 parameter generic call with argument 1 of type parameter type and argument 2 of function type whose parameter is of type parameter type
 function someGenerics4<T, U>(n: T, f: (x: U) => void) { }
 >someGenerics4 : <T, U>(n: T, f: (x: U) => void) => void
+>T : T
+>U : U
 >n : T
 >f : (x: U) => void
 >x : U
@@= skipped -24, +26 lines =@@
 // 2 parameter generic call with argument 2 of type parameter type and argument 1 of function type whose parameter is of type parameter type
 function someGenerics5<U, T>(n: T, f: (x: U) => void) { }
 >someGenerics5 : <U, T>(n: T, f: (x: U) => void) => void
+>U : U
+>T : T
 >n : T
 >f : (x: U) => void
 >x : U
@@= skipped -24, +26 lines =@@
 // Generic call with multiple arguments of function types that each have parameters of the same generic type
 function someGenerics6<A>(a: (a: A) => A, b: (b: A) => A, c: (c: A) => A) { }
 >someGenerics6 : <A>(a: (a: A) => A, b: (b: A) => A, c: (c: A) => A) => void
+>A : A
 >a : (a: A) => A
 >a : A
 >b : (b: A) => A
@@= skipped -49, +50 lines =@@
 // Generic call with multiple arguments of function types that each have parameters of different generic type
 function someGenerics7<A, B, C>(a: (a: A) => A, b: (b: B) => B, c: (c: C) => C) { }
 >someGenerics7 : <A, B, C>(a: (a: A) => A, b: (b: B) => B, c: (c: C) => C) => void
+>A : A
+>B : B
+>C : C
 >a : (a: A) => A
 >a : A
 >b : (b: B) => B
@@= skipped -49, +52 lines =@@
 // Generic call with argument of generic function type
 function someGenerics8<T>(n: T): T { return n; }
 >someGenerics8 : <T>(n: T) => T
+>T : T
 >n : T
 >n : T
 
@@= skipped -16, +17 lines =@@
 // Generic call with multiple parameters of generic type passed arguments with no best common type
 function someGenerics9<T>(a: T, b: T, c: T): T {
 >someGenerics9 : <T>(a: T, b: T, c: T) => T
+>T : T
 >a : T
 >b : T
 >c : T
@@= skipped -37, +38 lines =@@
 
 // Generic call with multiple parameters of generic type passed arguments with multiple best common types
 interface A91 {
+>A91 : A91
+
     x: number;
 >x : number
 
@@= skipped -7, +9 lines =@@
 >y : string
 }
 interface A92 {
+>A92 : A92
+
     x: number;
 >x : number
 
@@= skipped -7, +9 lines =@@
 >z : Date
 }
 var a9e = someGenerics9(undefined, { x: 6, z: new Date() }, { x: 6, y: '' });
->a9e : { x: number; z: Date; y?: undefined; } | { x: number; y: string; z?: undefined; }
->someGenerics9(undefined, { x: 6, z: new Date() }, { x: 6, y: '' }) : { x: number; z: Date; y?: undefined; } | { x: number; y: string; z?: undefined; }
+>a9e : { x: number; z: Date; y?: undefined; } | { z?: undefined; x: number; y: string; }
+>someGenerics9(undefined, { x: 6, z: new Date() }, { x: 6, y: '' }) : { x: number; z: Date; y?: undefined; } | { z?: undefined; x: number; y: string; }
 >someGenerics9 : <T>(a: T, b: T, c: T) => T
 >undefined : undefined
 >{ x: 6, z: new Date() } : { x: number; z: Date; }
@@= skipped -17, +17 lines =@@
 >'' : ""
 
 var a9e: {};
->a9e : { x: number; z: Date; y?: undefined; } | { x: number; y: string; z?: undefined; }
+>a9e : { x: number; z: Date; y?: undefined; } | { z?: undefined; x: number; y: string; }
 
 var a9f = someGenerics9<A92>(undefined, { x: 6, z: new Date() }, { x: 6, y: '' });
 >a9f : A92
