//// [tests/cases/conformance/classes/members/privateNames/privateNameComputedPropertyName2.ts] ////

=== privateNameComputedPropertyName2.ts ===
let getX: (a: A) => number;
>getX : Symbol(getX, Decl(privateNameComputedPropertyName2.ts, 0, 3))
>a : Symbol(a, Decl(privateNameComputedPropertyName2.ts, 0, 11))
>A : Symbol(A, Decl(privateNameComputedPropertyName2.ts, 0, 27))

class A {
>A : Symbol(A, Decl(privateNameComputedPropertyName2.ts, 0, 27))

    #x = 100;
>#x : Symbol(#x, Decl(privateNameComputedPropertyName2.ts, 2, 9))

    [(getX = (a: A) => a.#x, "_")]() {}
>[(getX = (a: A) => a.#x, "_")] : Symbol([(getX = (a: A) => a.#x, "_")], Decl(privateNameComputedPropertyName2.ts, 3, 13))
>getX : Symbol(getX, Decl(privateNameComputedPropertyName2.ts, 0, 3))
>a : Symbol(a, Decl(privateNameComputedPropertyName2.ts, 4, 14))
>A : Symbol(A, Decl(privateNameComputedPropertyName2.ts, 0, 27))
>a.#x : Symbol(#x, Decl(privateNameComputedPropertyName2.ts, 2, 9))
>a : Symbol(a, Decl(privateNameComputedPropertyName2.ts, 4, 14))
}

console.log(getX(new A));
>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
>getX : Symbol(getX, Decl(privateNameComputedPropertyName2.ts, 0, 3))
>A : Symbol(A, Decl(privateNameComputedPropertyName2.ts, 0, 27))

