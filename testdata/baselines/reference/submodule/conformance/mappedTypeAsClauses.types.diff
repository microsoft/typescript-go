--- old.mappedTypeAsClauses.types
+++ new.mappedTypeAsClauses.types
@@= skipped -45, +45 lines =@@
 >Methods : Methods<T>
 
 type TM1 = Methods<{ foo(): number, bar(x: string): boolean, baz: string | number }>;
->TM1 : Methods<{ foo(): number; bar(x: string): boolean; baz: string | number; }>
+>TM1 : Methods<{ foo: () => number; bar: (x: string) => boolean; baz: string | number; }>
 >foo : () => number
 >bar : (x: string) => boolean
 >x : string
@@= skipped -17, +17 lines =@@
 >b : number
 
 type TD2 = keyof TD1;  // 'a1' | 'a2' | 'b1' | 'b2'
->TD2 : "a1" | "b1" | "a2" | "b2"
+>TD2 : "a1" | "a2" | "b1" | "b2"
 
 type TD3<U> = keyof DoubleProp<U>; // keyof DoubleProp<U>
 >TD3 : keyof DoubleProp<U>
 
 type TD4 = TD3<{ a: string, b: number }>;  // 'a1' | 'a2' | 'b1' | 'b2'
->TD4 : "a1" | "b1" | "a2" | "b2"
+>TD4 : "a1" | "a2" | "b1" | "b2"
 >a : string
 >b : number
 
@@= skipped -183, +183 lines =@@
 }
 
 function f(x: KeysExtendedBy<M, number>) {
->f : (x: KeysExtendedBy<M, number>) => "b"
+>f : (x: "b") => "b"
 >x : "b"
 
     return x;
@@= skipped -9, +9 lines =@@
 
 f("a");  // Error, should allow only "b"
 >f("a") : "b"
->f : (x: KeysExtendedBy<M, number>) => "b"
+>f : (x: "b") => "b"
 >"a" : "a"
 
 type NameMap = { 'a': 'x', 'b': 'y', 'c': 'z' };
@@= skipped -24, +24 lines =@@
 >TS3 : keyof { [P in keyof T as Exclude<P, "a" | "b" | "c">]: string; }
 
 type TS4<T> = keyof { [P in keyof T as NameMap[P & keyof NameMap]]: string };
->TS4 : keyof { [P in keyof T as NameMap[P & keyof NameMap]]: string; }
+>TS4 : keyof { [P in keyof T as NameMap[P & (keyof NameMap)]]: string; }
 
 type TS5<T> = keyof { [P in keyof T & keyof NameMap as NameMap[P]]: string };
->TS5 : keyof { [P in keyof T & keyof NameMap as NameMap[P]]: string; }
+>TS5 : keyof { [P in keyof T & (keyof NameMap) as NameMap[P]]: string; }
 
 type TS6<T, U, V> = keyof { [ K in keyof T as V & (K extends U ? K : never)]: string };
 >TS6 : keyof { [K in keyof T as V & (K extends U ? K : never)]: string; }
@@= skipped -23, +23 lines =@@
 >TN3 : keyof { [P in keyof T as Exclude<Exclude<Exclude<P, "c">, "b">, "a">]: string; }
 
 type TN4<T, U> = keyof { [K in keyof T as (K extends U ? T[K] : never) extends T[K] ? K : never]: string };
->TN4 : keyof { [K in keyof T as (K extends U ? T[K] : never) extends T[K] ? K : never]: string; }
+>TN4 : keyof { [K in keyof T as K extends U ? T[K] : never extends T[K] ? K : never]: string; }
 
 type TN5<T, U> = keyof { [K in keyof T as keyof { [P in K as T[P] extends U ? K : never]: true }]: string };
 >TN5 : keyof { [K in keyof T as keyof { [P in K as T[P] extends U ? K : never]: true; }]: string; }
