--- old.classAbstractOverrideWithAbstract.symbols
+++ new.classAbstractOverrideWithAbstract.symbols
@@= skipped -4, +4 lines =@@
 >A : Symbol(A, Decl(classAbstractOverrideWithAbstract.ts, 0, 0))
 
     foo() {}
->foo : Symbol(A.foo, Decl(classAbstractOverrideWithAbstract.ts, 0, 9))
+>foo : Symbol(foo, Decl(classAbstractOverrideWithAbstract.ts, 0, 9))
 }
 
 abstract class B extends A {
@@= skipped -8, +8 lines =@@
 >A : Symbol(A, Decl(classAbstractOverrideWithAbstract.ts, 0, 0))
 
     abstract foo();
->foo : Symbol(B.foo, Decl(classAbstractOverrideWithAbstract.ts, 4, 28))
+>foo : Symbol(foo, Decl(classAbstractOverrideWithAbstract.ts, 4, 28))
 }
 
 abstract class AA {
 >AA : Symbol(AA, Decl(classAbstractOverrideWithAbstract.ts, 6, 1))
 
     foo() {}
->foo : Symbol(AA.foo, Decl(classAbstractOverrideWithAbstract.ts, 8, 19))
+>foo : Symbol(foo, Decl(classAbstractOverrideWithAbstract.ts, 8, 19))
 
     abstract bar();
->bar : Symbol(AA.bar, Decl(classAbstractOverrideWithAbstract.ts, 9, 12))
+>bar : Symbol(bar, Decl(classAbstractOverrideWithAbstract.ts, 9, 12))
 }
 
 abstract class BB extends AA {
@@= skipped -18, +18 lines =@@
 >AA : Symbol(AA, Decl(classAbstractOverrideWithAbstract.ts, 6, 1))
 
     abstract foo();
->foo : Symbol(BB.foo, Decl(classAbstractOverrideWithAbstract.ts, 13, 30))
+>foo : Symbol(foo, Decl(classAbstractOverrideWithAbstract.ts, 13, 30))
 
     bar () {}
->bar : Symbol(BB.bar, Decl(classAbstractOverrideWithAbstract.ts, 14, 19))
+>bar : Symbol(bar, Decl(classAbstractOverrideWithAbstract.ts, 14, 19))
 }
 
 class CC extends BB {} // error
@@= skipped -15, +15 lines =@@
 >BB : Symbol(BB, Decl(classAbstractOverrideWithAbstract.ts, 11, 1))
 
     foo() {}
->foo : Symbol(DD.foo, Decl(classAbstractOverrideWithAbstract.ts, 20, 21))
+>foo : Symbol(foo, Decl(classAbstractOverrideWithAbstract.ts, 20, 21))
 }
