--- old.functionConstraintSatisfaction.types
+++ new.functionConstraintSatisfaction.types
@@= skipped -4, +4 lines =@@
 
 function foo<T extends Function>(x: T): T { return x; }
 >foo : <T extends Function>(x: T) => T
+>T : T
 >x : T
 >x : T
 
 interface I {
+>I : I
+
     (): string;
 }
 var i: I;
@@= skipped -90, +93 lines =@@
 >c : { (): string; (x: any): string; }
 
 interface I2<T> {
+>I2 : I2<T>
+>T : T
+
     (x: T): T;
 >x : T
 }
@@= skipped -8, +11 lines =@@
 
 class C2<T> {
 >C2 : C2<T>
+>T : T
 
     foo: T;
 >foo : T
@@= skipped -7, +8 lines =@@
 
 var a2: { <T>(x: T): T };
 >a2 : <T>(x: T) => T
+>T : T
 >x : T
 
 var b2: { new <T>(x: T): T };
 >b2 : new <T>(x: T) => T
+>T : T
 >x : T
 
 var c2: { <T>(x: T): T; <T>(x: T, y: T): T };
 >c2 : { <T>(x: T): T; <T>(x: T, y: T): T; }
+>T : T
 >x : T
+>T : T
 >x : T
 >y : T
 
@@= skipped -17, +21 lines =@@
 >foo(<U>(x: U) => x) : <U>(x: U) => U
 >foo : <T extends Function>(x: T) => T
 ><U>(x: U) => x : <U>(x: U) => U
+>U : U
 >x : U
 >x : U
 
@@= skipped -8, +9 lines =@@
 >foo(function <U>(x: U) { return x; }) : <U>(x: U) => U
 >foo : <T extends Function>(x: T) => T
 >function <U>(x: U) { return x; } : <U>(x: U) => U
+>U : U
 >x : U
 >x : U
 
@@= skipped -8, +9 lines =@@
 >foo(<U extends Date>(x: U) => x) : <U extends Date>(x: U) => U
 >foo : <T extends Function>(x: T) => T
 ><U extends Date>(x: U) => x : <U extends Date>(x: U) => U
+>U : U
 >x : U
 >x : U
 
@@= skipped -8, +9 lines =@@
 >foo(<U, V>(x: U, y: V) => x) : <U, V>(x: U, y: V) => U
 >foo : <T extends Function>(x: T) => T
 ><U, V>(x: U, y: V) => x : <U, V>(x: U, y: V) => U
+>U : U
+>V : V
 >x : U
 >y : V
 >x : U
@@= skipped -29, +31 lines =@@
 >c2 : { <T>(x: T): T; <T>(x: T, y: T): T; }
 
 interface F2 extends Function { foo: string; }
+>F2 : F2
 >foo : string
 
 var f2: F2;
@@= skipped -12, +13 lines =@@
 >f2 : F2
 
 function foo2<T extends { (): void }, U extends { (): void }>(x: T, y: U) {
->foo2 : <T extends { (): void; }, U extends { (): void; }>(x: T, y: U) => void
+>foo2 : <T extends () => void, U extends () => void>(x: T, y: U) => void
+>T : T
+>U : U
 >x : T
 >y : U
 
     foo(x);
 >foo(x) : T
->foo : <T_1 extends Function>(x: T_1) => T_1
+>foo : <T extends Function>(x: T) => T
 >x : T
 
     foo(y);
 >foo(y) : U
->foo : <T_1 extends Function>(x: T_1) => T_1
+>foo : <T extends Function>(x: T) => T
 >y : U
 }
 //function foo2<T extends { (): void }, U extends T>(x: T, y: U) {
