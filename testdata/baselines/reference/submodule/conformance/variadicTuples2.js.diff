--- old.variadicTuples2.js
+++ new.variadicTuples2.js
@@= skipped -142, +142 lines =@@


 //// [variadicTuples2.js]
-"use strict";
-// Declarations
 tt1 = [5];
 tt1 = ['abc', 5];
 tt1 = ['abc', 'def', 5];
@@= skipped -73, +71 lines =@@


 //// [variadicTuples2.d.ts]
+// Declarations
 type V00 = [number, ...string[]];
 type V01 = [...string[], number];
 type V03 = [number, ...string[], number];
-type V10 = [number, ...string[], ...boolean[]];
-type V11 = [number, ...string[], boolean?];
-type V12 = [number, string?, boolean];
-type V15 = [...string[], ...number[]];
-type V16 = [...string[], ...Array<number>];
-type V17 = [...Array<string>, ...number[]];
-type V18 = [...Array<string>, ...Array<number>];
+type V10 = [number, ...string[], ...boolean[]]; // Error
+type V11 = [number, ...string[], boolean?]; // Error
+type V12 = [number, string?, boolean]; // Error
+type V15 = [...string[], ...number[]]; // Error
+type V16 = [...string[], ...Array<number>]; // Error
+type V17 = [...Array<string>, ...number[]]; // Error
+type V18 = [...Array<string>, ...Array<number>]; // Error
+// Normalization
 type Tup3<T extends unknown[], U extends unknown[], V extends unknown[]> = [...T, ...U, ...V];
-type V20 = Tup3<[number], string[], [number]>;
-type V21 = Tup3<[number], [string?], [boolean]>;
-type V22 = Tup3<[number], string[], boolean[]>;
-type V23 = Tup3<[number], string[], [boolean?]>;
-type V24 = Tup3<[number], [boolean?], string[]>;
-type V25 = Tup3<string[], number[], boolean[]>;
-type V26 = Tup3<string[], number[], [boolean]>;
-type V27 = Tup3<[number?], [string], [boolean?]>;
-type V30<A extends unknown[]> = Tup3<A, string[], number[]>;
-type V31<A extends unknown[]> = Tup3<string[], A, number[]>;
-type V32<A extends unknown[]> = Tup3<string[], number[], A>;
-type V40<A extends unknown[]> = Tup3<A, [string?], number[]>;
-type V41<A extends unknown[]> = Tup3<[string?], A, number[]>;
-type V42<A extends unknown[]> = Tup3<[string?], number[], A>;
-type V50<A extends unknown[]> = Tup3<A, string[], [number?]>;
-type V51<A extends unknown[]> = Tup3<string[], A, [number?]>;
-type V52<A extends unknown[]> = Tup3<string[], [number?], A>;
+type V20 = Tup3<[number], string[], [number]>; // [number, ...string[], number]
+type V21 = Tup3<[number], [string?], [boolean]>; // [number, string | undefined, boolean]
+type V22 = Tup3<[number], string[], boolean[]>; // [number, (string | boolean)[]]
+type V23 = Tup3<[number], string[], [boolean?]>; // [number, (string | boolean | undefined)[]]
+type V24 = Tup3<[number], [boolean?], string[]>; // [number, boolean?, ...string[]]
+type V25 = Tup3<string[], number[], boolean[]>; // (string | number | boolean)[]
+type V26 = Tup3<string[], number[], [boolean]>; // [...(string | number)[], boolean]
+type V27 = Tup3<[number?], [string], [boolean?]>; // [number | undefined, string, boolean?]
+type V30<A extends unknown[]> = Tup3<A, string[], number[]>; // [...A, ...(string | number)[]]
+type V31<A extends unknown[]> = Tup3<string[], A, number[]>; // (string | number | A[number])[]
+type V32<A extends unknown[]> = Tup3<string[], number[], A>; // [...(string | number)[], ...A]
+type V40<A extends unknown[]> = Tup3<A, [string?], number[]>; // [...A, string?, ...number[]]
+type V41<A extends unknown[]> = Tup3<[string?], A, number[]>; // [string?, ...A, ...number[]]
+type V42<A extends unknown[]> = Tup3<[string?], number[], A>; // [string?, ...number[], ...A]
+type V50<A extends unknown[]> = Tup3<A, string[], [number?]>; // [...A, ...(string | number | undefined)[]]
+type V51<A extends unknown[]> = Tup3<string[], A, [number?]>; // (string | number | A[number] | undefined)[]
+type V52<A extends unknown[]> = Tup3<string[], [number?], A>; // [...(string | number | undefined)[], ...A]
+// Assignability
 declare let tt1: [...string[], number];
 declare function ft1(...args: [...strs: string[], num: number]): void;
 declare let tt2: [number, ...string[], number];
 declare function ft2(n1: number, ...rest: [...strs: string[], n2: number]): void;
 declare function ft3<T extends unknown[]>(x: [number, ...T], y: [number, number], z: [number, ...number[]]): void;
+// repro #50216
 declare let tt3: [number, string, ...any[]];
-declare let tt4: [number, ...number[]];
+declare let tt4: [number, ...number[]]; // Error
+// Inference
 declare function pipe<T extends readonly unknown[]>(...args: [...T, (...values: T) => void]): void;
 declare const sa: string[];
 declare function fn1<T, U>(t: [...unknown[], T, U]): [T, U];
 declare function fn2<T, U>(t: [T, ...unknown[], U]): [T, U];
+// Repro from #39595
 declare function foo<S extends readonly [string, ...string[]]>(...stringsAndNumber: readonly [...S, number]): [...S, number];
 declare const a1: ["blah1", number];
 declare const b1: ["blah1", "blah2", number];
-declare const c1: [string, ...string[], number];
-declare const d1: [string, ...string[], number];
-declare const e1: [string, ...string[], number];
+declare const c1: [string, ...string[], number]; // Error
+declare const d1: [string, ...string[], number]; // Error
+declare const e1: [string, ...string[], number]; // Error