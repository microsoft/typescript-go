--- old.intersectionReduction.symbols
+++ new.intersectionReduction.symbols
@@= skipped -380, +380 lines =@@
 >A2 : Symbol(A2, Decl(intersectionReduction.ts, 107, 93))
 
     kind: "A";
->kind : Symbol(A2.kind, Decl(intersectionReduction.ts, 111, 14))
+>kind : Symbol(kind, Decl(intersectionReduction.ts, 111, 14))
 
     a: number;
->a : Symbol(A2.a, Decl(intersectionReduction.ts, 112, 14))
+>a : Symbol(a, Decl(intersectionReduction.ts, 112, 14))
 }
 
 interface B2 {
 >B2 : Symbol(B2, Decl(intersectionReduction.ts, 114, 1))
 
     kind: "B";
->kind : Symbol(B2.kind, Decl(intersectionReduction.ts, 116, 14))
+>kind : Symbol(kind, Decl(intersectionReduction.ts, 116, 14))
 
     b: number;
->b : Symbol(B2.b, Decl(intersectionReduction.ts, 117, 14))
+>b : Symbol(b, Decl(intersectionReduction.ts, 117, 14))
 }
 
 declare const shouldBeB: (A2 | B2) & B2;
@@= skipped -48, +48 lines =@@
 >ABI : Symbol(ABI, Decl(intersectionReduction.ts, 126, 1))
 
     kind: 'a' | 'b';
->kind : Symbol(ABI.kind, Decl(intersectionReduction.ts, 130, 15))
+>kind : Symbol(kind, Decl(intersectionReduction.ts, 130, 15))
 }
 
 declare class CA { kind: 'a'; a: string; x: number };
 >CA : Symbol(CA, Decl(intersectionReduction.ts, 132, 1))
->kind : Symbol(CA.kind, Decl(intersectionReduction.ts, 134, 18))
->a : Symbol(CA.a, Decl(intersectionReduction.ts, 134, 29))
->x : Symbol(CA.x, Decl(intersectionReduction.ts, 134, 40))
+>kind : Symbol(kind, Decl(intersectionReduction.ts, 134, 18))
+>a : Symbol(a, Decl(intersectionReduction.ts, 134, 29))
+>x : Symbol(x, Decl(intersectionReduction.ts, 134, 40))
 
 declare class CB { kind: 'b'; b: string; y: number };
 >CB : Symbol(CB, Decl(intersectionReduction.ts, 134, 53))
->kind : Symbol(CB.kind, Decl(intersectionReduction.ts, 135, 18))
->b : Symbol(CB.b, Decl(intersectionReduction.ts, 135, 29))
->y : Symbol(CB.y, Decl(intersectionReduction.ts, 135, 40))
+>kind : Symbol(kind, Decl(intersectionReduction.ts, 135, 18))
+>b : Symbol(b, Decl(intersectionReduction.ts, 135, 29))
+>y : Symbol(y, Decl(intersectionReduction.ts, 135, 40))
 
 function bar<T extends CA | CB>(x: T & CA) {
 >bar : Symbol(bar, Decl(intersectionReduction.ts, 135, 53))
