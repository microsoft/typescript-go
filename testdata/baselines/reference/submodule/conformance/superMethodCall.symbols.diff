--- old.superMethodCall.symbols
+++ new.superMethodCall.symbols
@@ -5,7 +5,7 @@
 >Base : Symbol(Base, Decl(superMethodCall.ts, 0, 0))
 
     method?() { }
->method : Symbol(Base.method, Decl(superMethodCall.ts, 0, 12))
+>method : Symbol(method, Decl(superMethodCall.ts, 0, 12))
 }
 
 class Derived extends Base {
@@ -13,20 +13,20 @@
 >Base : Symbol(Base, Decl(superMethodCall.ts, 0, 0))
 
     method() {
->method : Symbol(Derived.method, Decl(superMethodCall.ts, 4, 28))
+>method : Symbol(method, Decl(superMethodCall.ts, 4, 28))
 
         return super.method?.();
->super.method : Symbol(Base.method, Decl(superMethodCall.ts, 0, 12))
+>super.method : Symbol(method, Decl(superMethodCall.ts, 0, 12))
 >super : Symbol(Base, Decl(superMethodCall.ts, 0, 0))
->method : Symbol(Base.method, Decl(superMethodCall.ts, 0, 12))
+>method : Symbol(method, Decl(superMethodCall.ts, 0, 12))
     }
 
     async asyncMethod() {
->asyncMethod : Symbol(Derived.asyncMethod, Decl(superMethodCall.ts, 7, 5))
+>asyncMethod : Symbol(asyncMethod, Decl(superMethodCall.ts, 7, 5))
 
         return super.method?.();
->super.method : Symbol(Base.method, Decl(superMethodCall.ts, 0, 12))
+>super.method : Symbol(method, Decl(superMethodCall.ts, 0, 12))
 >super : Symbol(Base, Decl(superMethodCall.ts, 0, 0))
->method : Symbol(Base.method, Decl(superMethodCall.ts, 0, 12))
+>method : Symbol(method, Decl(superMethodCall.ts, 0, 12))
     }
 }
