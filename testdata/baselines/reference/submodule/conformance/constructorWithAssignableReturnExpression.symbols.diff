--- old.constructorWithAssignableReturnExpression.symbols
+++ new.constructorWithAssignableReturnExpression.symbols
@@= skipped -14, +14 lines =@@
 >D : Symbol(D, Decl(constructorWithAssignableReturnExpression.ts, 6, 1))
 
     x: number;
->x : Symbol(D.x, Decl(constructorWithAssignableReturnExpression.ts, 8, 9))
+>x : Symbol(x, Decl(constructorWithAssignableReturnExpression.ts, 8, 9))
 
     constructor() {
         return 1; // error
@@= skipped -11, +11 lines =@@
 >E : Symbol(E, Decl(constructorWithAssignableReturnExpression.ts, 13, 1))
 
     x: number;
->x : Symbol(E.x, Decl(constructorWithAssignableReturnExpression.ts, 15, 9))
+>x : Symbol(x, Decl(constructorWithAssignableReturnExpression.ts, 15, 9))
 
     constructor() {
         return { x: 1 };
@@= skipped -13, +13 lines =@@
 >T : Symbol(T, Decl(constructorWithAssignableReturnExpression.ts, 22, 8))
 
     x: T;
->x : Symbol(F.x, Decl(constructorWithAssignableReturnExpression.ts, 22, 12))
+>x : Symbol(x, Decl(constructorWithAssignableReturnExpression.ts, 22, 12))
 >T : Symbol(T, Decl(constructorWithAssignableReturnExpression.ts, 22, 8))
 
     constructor() {
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(constructorWithAssignableReturnExpression.ts, 29, 8))
 
     x: T;
->x : Symbol(G.x, Decl(constructorWithAssignableReturnExpression.ts, 29, 12))
+>x : Symbol(x, Decl(constructorWithAssignableReturnExpression.ts, 29, 12))
 >T : Symbol(T, Decl(constructorWithAssignableReturnExpression.ts, 29, 8))
 
     constructor() {
