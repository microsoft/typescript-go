--- old.subtypingWithConstructSignatures5.types
+++ new.subtypingWithConstructSignatures5.types
@@= skipped -23, +23 lines =@@
 >bing : string
 
 interface A { // T
+>A : A
+
     // M's
     a: new (x: number) => number[];
 >a : new (x: number) => number[]
@@= skipped -63, +65 lines =@@
 >bar : string
 
     a12: new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
->a12 : new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
+>a12 : new (x: Base[], y: Derived2[]) => Derived[]
 >x : Base[]
 >y : Derived2[]
 
     a13: new (x: Array<Base>, y: Array<Derived>) => Array<Derived>;
->a13 : new (x: Array<Base>, y: Array<Derived>) => Array<Derived>
+>a13 : new (x: Base[], y: Derived[]) => Derived[]
 >x : Base[]
 >y : Derived[]
 
@@= skipped -17, +17 lines =@@
 }
 
 interface B extends A {
+>B : B
+
     a: new <T>(x: T) => T[];
 >a : new <T>(x: T) => T[]
+>T : T
 >x : T
 }
 
 // S's
 interface I extends B {
+>I : I
+
     // N's
     a: new <T>(x: T) => T[]; // ok, instantiation of N is a subtype of M, T is number
 >a : new <T>(x: T) => T[]
+>T : T
 >x : T
 
     a2: new <T>(x: T) => string[]; // ok
 >a2 : new <T>(x: T) => string[]
+>T : T
 >x : T
 
     a3: new <T>(x: T) => T; // ok since Base returns void
 >a3 : new <T>(x: T) => T
+>T : T
 >x : T
 
     a4: new <T, U>(x: T, y: U) => T; // ok, instantiation of N is a subtype of M, T is string, U is number
 >a4 : new <T, U>(x: T, y: U) => T
+>T : T
+>U : U
 >x : T
 >y : U
 
     a5: new <T, U>(x: (arg: T) => U) => T; // ok, U is in a parameter position so inferences can be made
 >a5 : new <T, U>(x: (arg: T) => U) => T
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 
     a6: new <T extends Base, U extends Derived>(x: (arg: T) => U) => T; // ok, same as a5 but with object type hierarchy
 >a6 : new <T extends Base, U extends Derived>(x: (arg: T) => U) => T
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 
     a7: new <T extends Base, U extends Derived>(x: (arg: T) => U) => (r: T) => U; // ok
 >a7 : new <T extends Base, U extends Derived>(x: (arg: T) => U) => (r: T) => U
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 >r : T
 
     a8: new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U; // ok
 >a8 : new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: T) => U) => (r: T) => U
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 >y : (arg2: T) => U
@@= skipped -51, +69 lines =@@
 
     a9: new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: string; bing: number }) => U) => (r: T) => U; // ok, same as a8 with compatible object literal
 >a9 : new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: string; bing: number; }) => U) => (r: T) => U
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 >y : (arg2: { foo: string; bing: number; }) => U
@@= skipped -10, +12 lines =@@
 
     a10: new <T extends Derived>(...x: T[]) => T; // ok
 >a10 : new <T extends Derived>(...x: T[]) => T
+>T : T
 >x : T[]
 
     a11: new <T extends Base>(x: T, y: T) => T; // ok
 >a11 : new <T extends Base>(x: T, y: T) => T
+>T : T
 >x : T
 >y : T
 
     a12: new <T extends Array<Base>>(x: Array<Base>, y: T) => Array<Derived>; // ok, less specific parameter type
->a12 : new <T extends Array<Base>>(x: Array<Base>, y: T) => Array<Derived>
+>a12 : new <T extends Base[]>(x: Base[], y: T) => Derived[]
+>T : T
 >x : Base[]
 >y : T
 
     a13: new <T extends Array<Derived>>(x: Array<Base>, y: T) => T; // ok, T = Array<Derived>, satisfies constraint, contextual signature instantiation succeeds
->a13 : new <T extends Array<Derived>>(x: Array<Base>, y: T) => T
+>a13 : new <T extends Derived[]>(x: Base[], y: T) => T
+>T : T
 >x : Base[]
 >y : T
 
     a14: new <T, U>(x: { a: T; b: U }) => T; // ok
 >a14 : new <T, U>(x: { a: T; b: U; }) => T
+>T : T
+>U : U
 >x : { a: T; b: U; }
 >a : T
 >b : U
