--- old.mappedTypeRelationships.types
+++ new.mappedTypeRelationships.types
@@= skipped -2, +2 lines =@@
 === mappedTypeRelationships.ts ===
 function f1<T>(x: T, k: keyof T) {
 >f1 : <T>(x: T, k: keyof T) => T[keyof T]
+>T : T
 >x : T
 >k : keyof T
 
@@= skipped -11, +12 lines =@@
 
 function f2<T, K extends keyof T>(x: T, k: K) {
 >f2 : <T, K extends keyof T>(x: T, k: K) => T[K]
+>T : T
+>K : K
 >x : T
 >k : K
 
@@= skipped -11, +13 lines =@@
 
 function f3<T, U extends T>(x: T, y: U, k: keyof T) {
 >f3 : <T, U extends T>(x: T, y: U, k: keyof T) => void
+>T : T
+>U : U
 >x : T
 >y : U
 >k : keyof T
@@= skipped -25, +27 lines =@@
 
 function f4<T, U extends T, K extends keyof T>(x: T, y: U, k: K) {
 >f4 : <T, U extends T, K extends keyof T>(x: T, y: U, k: K) => void
+>T : T
+>U : U
+>K : K
 >x : T
 >y : U
 >k : K
@@= skipped -25, +28 lines =@@
 
 function f5<T, U extends T>(x: T, y: U, k: keyof U) {
 >f5 : <T, U extends T>(x: T, y: U, k: keyof U) => void
+>T : T
+>U : U
 >x : T
 >y : U
 >k : keyof U
@@= skipped -25, +27 lines =@@
 
 function f6<T, U extends T, K extends keyof U>(x: T, y: U, k: K) {
 >f6 : <T, U extends T, K extends keyof U>(x: T, y: U, k: K) => void
+>T : T
+>U : U
+>K : K
 >x : T
 >y : U
 >k : K
@@= skipped -25, +28 lines =@@
 
 function f10<T>(x: T, y: Partial<T>, k: keyof T) {
 >f10 : <T>(x: T, y: Partial<T>, k: keyof T) => void
+>T : T
 >x : T
 >y : Partial<T>
 >k : keyof T
@@= skipped -25, +26 lines =@@
 
 function f11<T, K extends keyof T>(x: T, y: Partial<T>, k: K) {
 >f11 : <T, K extends keyof T>(x: T, y: Partial<T>, k: K) => void
+>T : T
+>K : K
 >x : T
 >y : Partial<T>
 >k : K
@@= skipped -25, +27 lines =@@
 
 function f12<T, U extends T>(x: T, y: Partial<U>, k: keyof T) {
 >f12 : <T, U extends T>(x: T, y: Partial<U>, k: keyof T) => void
+>T : T
+>U : U
 >x : T
 >y : Partial<U>
 >k : keyof T
@@= skipped -25, +27 lines =@@
 
 function f13<T, U extends T, K extends keyof T>(x: T, y: Partial<U>, k: K) {
 >f13 : <T, U extends T, K extends keyof T>(x: T, y: Partial<U>, k: K) => void
+>T : T
+>U : U
+>K : K
 >x : T
 >y : Partial<U>
 >k : K
@@= skipped -25, +28 lines =@@
 
 function f20<T>(x: T, y: Readonly<T>, k: keyof T) {
 >f20 : <T>(x: T, y: Readonly<T>, k: keyof T) => void
+>T : T
 >x : T
 >y : Readonly<T>
 >k : keyof T
@@= skipped -25, +26 lines =@@
 
 function f21<T, K extends keyof T>(x: T, y: Readonly<T>, k: K) {
 >f21 : <T, K extends keyof T>(x: T, y: Readonly<T>, k: K) => void
+>T : T
+>K : K
 >x : T
 >y : Readonly<T>
 >k : K
@@= skipped -25, +27 lines =@@
 
 function f22<T, U extends T>(x: T, y: Readonly<U>, k: keyof T) {
 >f22 : <T, U extends T>(x: T, y: Readonly<U>, k: keyof T) => void
+>T : T
+>U : U
 >x : T
 >y : Readonly<U>
 >k : keyof T
@@= skipped -25, +27 lines =@@
 
 function f23<T, U extends T, K extends keyof T>(x: T, y: Readonly<U>, k: K) {
 >f23 : <T, U extends T, K extends keyof T>(x: T, y: Readonly<U>, k: K) => void
+>T : T
+>U : U
+>K : K
 >x : T
 >y : Readonly<U>
 >k : K
@@= skipped -30, +33 lines =@@
 
 function f30<T>(x: T, y: Partial<T>) {
 >f30 : <T>(x: T, y: Partial<T>) => void
+>T : T
 >x : T
 >y : Partial<T>
 
@@= skipped -16, +17 lines =@@
 
 function f31<T extends Thing>(x: Partial<Thing>, y: Partial<T>) {
 >f31 : <T extends Thing>(x: Partial<Thing>, y: Partial<T>) => void
+>T : T
 >x : Partial<Thing>
 >y : Partial<T>
 
@@= skipped -16, +17 lines =@@
 
 function f40<T>(x: T, y: Readonly<T>) {
 >f40 : <T>(x: T, y: Readonly<T>) => void
+>T : T
 >x : T
 >y : Readonly<T>
 
@@= skipped -16, +17 lines =@@
 
 function f41<T extends Thing>(x: Readonly<Thing>, y: Readonly<T>) {
 >f41 : <T extends Thing>(x: Readonly<Thing>, y: Readonly<T>) => void
+>T : T
 >x : Readonly<Thing>
 >y : Readonly<T>
 
@@= skipped -30, +31 lines =@@
 
 function f50<T extends ItemMap>(obj: T, key: keyof T) {
 >f50 : <T extends ItemMap>(obj: T, key: keyof T) => string
+>T : T
 >obj : T
 >key : keyof T
 
@@= skipped -19, +20 lines =@@
 
 function f51<T extends ItemMap, K extends keyof T>(obj: T, key: K) {
 >f51 : <T extends ItemMap, K extends keyof T>(obj: T, key: K) => string
+>T : T
+>K : K
 >obj : T
 >key : K
 
@@= skipped -19, +21 lines =@@
 
 type T1<T> = {
 >T1 : T1<T>
+>T : T
 
     [P in keyof T]: T[P];
+>P : P
 }
 
 type T2<T> = {
 >T2 : T2<T>
+>T : T
 
     [P in keyof T]: T[P];
+>P : P
 }
 
 function f60<U>(x: T1<U>, y: T2<U>) {
 >f60 : <U>(x: T1<U>, y: T2<U>) => void
+>U : U
 >x : T1<U>
 >y : T2<U>
 
@@= skipped -28, +33 lines =@@
 
 type Identity<T> = {
 >Identity : Identity<T>
+>T : T
 
     [P in keyof T]: T[P];
+>P : P
 }
 
 function f61<U>(x: Identity<U>, y: Partial<U>) {
 >f61 : <U>(x: Identity<U>, y: Partial<U>) => void
+>U : U
 >x : Identity<U>
 >y : Partial<U>
 
@@= skipped -22, +25 lines =@@
 
 function f62<U>(x: Identity<U>, y: Readonly<U>) {
 >f62 : <U>(x: Identity<U>, y: Readonly<U>) => void
+>U : U
 >x : Identity<U>
 >y : Readonly<U>
 
@@= skipped -15, +16 lines =@@
 }
 
 function f70<T>(x: { [P in keyof T]: T[P] }, y: { [P in keyof T]: T[P] }) {
->f70 : <T>(x: { [P in keyof T]: T[P]; }, y: { [P in keyof T]: T[P]; }) => void
->x : { [P in keyof T]: T[P]; }
->y : { [P in keyof T]: T[P]; }
+>f70 : <T>(x: { [P in keyof T]: T[P] }, y: { [P in keyof T]: T[P] }) => void
+>T : T
+>x : { [P in keyof T]: T[P] }
+>P : P
+>y : { [P in keyof T]: T[P] }
+>P : P
 
     x = y;
->x = y : { [P in keyof T]: T[P]; }
->x : { [P in keyof T]: T[P]; }
->y : { [P in keyof T]: T[P]; }
+>x = y : { [P in keyof T]: T[P] }
+>x : { [P in keyof T]: T[P] }
+>y : { [P in keyof T]: T[P] }
 
     y = x;
->y = x : { [P in keyof T]: T[P]; }
->y : { [P in keyof T]: T[P]; }
->x : { [P in keyof T]: T[P]; }
+>y = x : { [P in keyof T]: T[P] }
+>y : { [P in keyof T]: T[P] }
+>x : { [P in keyof T]: T[P] }
 }
 
 function f71<T, U extends T>(x: { [P in keyof T]: T[P] }, y: { [P in keyof T]: U[P] }) {
->f71 : <T, U extends T>(x: { [P in keyof T]: T[P]; }, y: { [P in keyof T]: U[P]; }) => void
->x : { [P in keyof T]: T[P]; }
->y : { [P in keyof T]: U[P]; }
+>f71 : <T, U extends T>(x: { [P in keyof T]: T[P] }, y: { [P in keyof T]: U[P] }) => void
+>T : T
+>U : U
+>x : { [P in keyof T]: T[P] }
+>P : P
+>y : { [P in keyof T]: U[P] }
+>P : P
 
     x = y;
->x = y : { [P in keyof T]: U[P]; }
->x : { [P in keyof T]: T[P]; }
->y : { [P in keyof T]: U[P]; }
+>x = y : { [P in keyof T]: U[P] }
+>x : { [P in keyof T]: T[P] }
+>y : { [P in keyof T]: U[P] }
 
     y = x;  // Error
->y = x : { [P in keyof T]: T[P]; }
->y : { [P in keyof T]: U[P]; }
->x : { [P in keyof T]: T[P]; }
+>y = x : { [P in keyof T]: T[P] }
+>y : { [P in keyof T]: U[P] }
+>x : { [P in keyof T]: T[P] }
 }
 
 function f72<T, U extends T>(x: { [P in keyof T]: T[P] }, y: { [P in keyof U]: U[P] }) {
->f72 : <T, U extends T>(x: { [P in keyof T]: T[P]; }, y: { [P in keyof U]: U[P]; }) => void
->x : { [P in keyof T]: T[P]; }
->y : { [P in keyof U]: U[P]; }
+>f72 : <T, U extends T>(x: { [P in keyof T]: T[P] }, y: { [P in keyof U]: U[P] }) => void
+>T : T
+>U : U
+>x : { [P in keyof T]: T[P] }
+>P : P
+>y : { [P in keyof U]: U[P] }
+>P : P
 
     x = y;
->x = y : { [P in keyof U]: U[P]; }
->x : { [P in keyof T]: T[P]; }
->y : { [P in keyof U]: U[P]; }
+>x = y : { [P in keyof U]: U[P] }
+>x : { [P in keyof T]: T[P] }
+>y : { [P in keyof U]: U[P] }
 
     y = x;  // Error
->y = x : { [P in keyof T]: T[P]; }
->y : { [P in keyof U]: U[P]; }
->x : { [P in keyof T]: T[P]; }
+>y = x : { [P in keyof T]: T[P] }
+>y : { [P in keyof U]: U[P] }
+>x : { [P in keyof T]: T[P] }
 }
 
 function f73<T, K extends keyof T>(x: { [P in K]: T[P] }, y: { [P in keyof T]: T[P] }) {
->f73 : <T, K extends keyof T>(x: { [P in K]: T[P]; }, y: { [P in keyof T]: T[P]; }) => void
->x : { [P in K]: T[P]; }
->y : { [P in keyof T]: T[P]; }
+>f73 : <T, K extends keyof T>(x: { [P in K]: T[P] }, y: { [P in keyof T]: T[P] }) => void
+>T : T
+>K : K
+>x : { [P in K]: T[P] }
+>P : P
+>y : { [P in keyof T]: T[P] }
+>P : P
 
     x = y;
->x = y : { [P in keyof T]: T[P]; }
->x : { [P in K]: T[P]; }
->y : { [P in keyof T]: T[P]; }
+>x = y : { [P in keyof T]: T[P] }
+>x : { [P in K]: T[P] }
+>y : { [P in keyof T]: T[P] }
 
     y = x;  // Error
->y = x : { [P in K]: T[P]; }
->y : { [P in keyof T]: T[P]; }
->x : { [P in K]: T[P]; }
+>y = x : { [P in K]: T[P] }
+>y : { [P in keyof T]: T[P] }
+>x : { [P in K]: T[P] }
 }
 
 function f74<T, U extends T, K extends keyof T>(x: { [P in K]: T[P] }, y: { [P in keyof U]: U[P] }) {
->f74 : <T, U extends T, K extends keyof T>(x: { [P in K]: T[P]; }, y: { [P in keyof U]: U[P]; }) => void
->x : { [P in K]: T[P]; }
->y : { [P in keyof U]: U[P]; }
+>f74 : <T, U extends T, K extends keyof T>(x: { [P in K]: T[P] }, y: { [P in keyof U]: U[P] }) => void
+>T : T
+>U : U
+>K : K
+>x : { [P in K]: T[P] }
+>P : P
+>y : { [P in keyof U]: U[P] }
+>P : P
 
     x = y;
->x = y : { [P in keyof U]: U[P]; }
->x : { [P in K]: T[P]; }
->y : { [P in keyof U]: U[P]; }
+>x = y : { [P in keyof U]: U[P] }
+>x : { [P in K]: T[P] }
+>y : { [P in keyof U]: U[P] }
 
     y = x;  // Error
->y = x : { [P in K]: T[P]; }
->y : { [P in keyof U]: U[P]; }
->x : { [P in K]: T[P]; }
+>y = x : { [P in K]: T[P] }
+>y : { [P in keyof U]: U[P] }
+>x : { [P in K]: T[P] }
 }
 
 function f75<T, U extends T, K extends keyof T>(x: { [P in K]: T[P] }, y: { [P in keyof T]: U[P] }) {
->f75 : <T, U extends T, K extends keyof T>(x: { [P in K]: T[P]; }, y: { [P in keyof T]: U[P]; }) => void
->x : { [P in K]: T[P]; }
->y : { [P in keyof T]: U[P]; }
+>f75 : <T, U extends T, K extends keyof T>(x: { [P in K]: T[P] }, y: { [P in keyof T]: U[P] }) => void
+>T : T
+>U : U
+>K : K
+>x : { [P in K]: T[P] }
+>P : P
+>y : { [P in keyof T]: U[P] }
+>P : P
 
     x = y;
->x = y : { [P in keyof T]: U[P]; }
->x : { [P in K]: T[P]; }
->y : { [P in keyof T]: U[P]; }
+>x = y : { [P in keyof T]: U[P] }
+>x : { [P in K]: T[P] }
+>y : { [P in keyof T]: U[P] }
 
     y = x;  // Error
->y = x : { [P in K]: T[P]; }
->y : { [P in keyof T]: U[P]; }
->x : { [P in K]: T[P]; }
+>y = x : { [P in K]: T[P] }
+>y : { [P in keyof T]: U[P] }
+>x : { [P in K]: T[P] }
 }
 
 function f76<T, U extends T, K extends keyof T>(x: { [P in K]: T[P] }, y: { [P in K]: U[P] }) {
->f76 : <T, U extends T, K extends keyof T>(x: { [P in K]: T[P]; }, y: { [P in K]: U[P]; }) => void
->x : { [P in K]: T[P]; }
->y : { [P in K]: U[P]; }
+>f76 : <T, U extends T, K extends keyof T>(x: { [P in K]: T[P] }, y: { [P in K]: U[P] }) => void
+>T : T
+>U : U
+>K : K
+>x : { [P in K]: T[P] }
+>P : P
+>y : { [P in K]: U[P] }
+>P : P
 
     x = y;
->x = y : { [P in K]: U[P]; }
->x : { [P in K]: T[P]; }
->y : { [P in K]: U[P]; }
+>x = y : { [P in K]: U[P] }
+>x : { [P in K]: T[P] }
+>y : { [P in K]: U[P] }
 
     y = x;  // Error
->y = x : { [P in K]: T[P]; }
->y : { [P in K]: U[P]; }
->x : { [P in K]: T[P]; }
+>y = x : { [P in K]: T[P] }
+>y : { [P in K]: U[P] }
+>x : { [P in K]: T[P] }
 }
 
 function f80<T>(t: T): Partial<T> {
 >f80 : <T>(t: T) => Partial<T>
+>T : T
 >t : T
 
     return t;
@@= skipped -121, +152 lines =@@
 
 function f81<T, K extends keyof T>(t: T, k: K): Partial<T[K]> {
 >f81 : <T, K extends keyof T>(t: T, k: K) => Partial<T[K]>
+>T : T
+>K : K
 >t : T
 >k : K
 
@@= skipped -11, +13 lines =@@
 
 function f82<T, K1 extends keyof T, K2 extends keyof T[K1]>(t: T, k1: K1, k2: K2): Partial<T[K1][K2]> {
 >f82 : <T, K1 extends keyof T, K2 extends keyof T[K1]>(t: T, k1: K1, k2: K2) => Partial<T[K1][K2]>
+>T : T
+>K1 : K1
+>K2 : K2
 >t : T
 >k1 : K1
 >k2 : K2
@@= skipped -15, +18 lines =@@
 // #31070
 type Numeric<T> = { [K in keyof T]?: number };
 >Numeric : Numeric<T>
+>T : T
+>K : K
 
 function f90<T extends { x: number }>() {
 >f90 : <T extends { x: number; }>() => void
+>T : T
 >x : number
 
     const n: Numeric<T> = { x: 1 };
@@= skipped -14, +17 lines =@@
 
 function f<T extends { x: {} }>(): Partial<T> {
 >f : <T extends { x: {}; }>() => Partial<T>
+>T : T
 >x : {}
 
     return undefined! as T;
@@= skipped -10, +11 lines =@@
 
 // #32365
 interface SettingsTypes {
+>SettingsTypes : SettingsTypes
+
   audio: {
 >audio : { volume: string; }
 
@@= skipped -16, +18 lines =@@
   };
 }
 interface Settings<Params extends { [K in keyof Params]?: string }> {
+>Settings : Settings<Params>
+>Params : Params
+>K : K
+
   config: Params;
 >config : Params
 }
@@= skipped -11, +15 lines =@@
 
 type GenericSettingsAccess<T extends keyof SettingsTypes> = Settings<SettingsTypes[T]>;
 >GenericSettingsAccess : GenericSettingsAccess<T>
+>T : T
 
 type GenericSettingsResult1 = GenericSettingsAccess<"audio">;
 >GenericSettingsResult1 : GenericSettingsResult1
