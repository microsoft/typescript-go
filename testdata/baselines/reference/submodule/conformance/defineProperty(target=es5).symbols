//// [tests/cases/conformance/classes/propertyMemberDeclarations/defineProperty.ts] ////

=== defineProperty.ts ===
var x: "p" = "p"
>x : Symbol(x, Decl(defineProperty.ts, 0, 3))

class A {
>A : Symbol(A, Decl(defineProperty.ts, 0, 16))

    a = this.y
>a : Symbol(a, Decl(defineProperty.ts, 1, 9))
>this.y : Symbol(y, Decl(defineProperty.ts, 8, 16))
>this : Symbol(A, Decl(defineProperty.ts, 0, 16))
>y : Symbol(y, Decl(defineProperty.ts, 8, 16))

    b
>b : Symbol(b, Decl(defineProperty.ts, 2, 14))

    public c;
>c : Symbol(c, Decl(defineProperty.ts, 3, 5))

    ["computed"] = 13
>["computed"] : Symbol(computed, Decl(defineProperty.ts, 4, 13))
>"computed" : Symbol(computed, Decl(defineProperty.ts, 4, 13))

    ;[x] = 14
>[x] : Symbol(p, Decl(defineProperty.ts, 6, 5))
>x : Symbol(x, Decl(defineProperty.ts, 0, 3))

    m() { }
>m : Symbol(m, Decl(defineProperty.ts, 6, 13))

    constructor(public readonly y: number) { }
>y : Symbol(y, Decl(defineProperty.ts, 8, 16))

    z = this.y
>z : Symbol(z, Decl(defineProperty.ts, 8, 46))
>this.y : Symbol(y, Decl(defineProperty.ts, 8, 16))
>this : Symbol(A, Decl(defineProperty.ts, 0, 16))
>y : Symbol(y, Decl(defineProperty.ts, 8, 16))

    declare notEmitted;
>notEmitted : Symbol(notEmitted, Decl(defineProperty.ts, 9, 14))
}
class B {
>B : Symbol(B, Decl(defineProperty.ts, 11, 1))

    public a;
>a : Symbol(a, Decl(defineProperty.ts, 12, 9))
}
class C extends B {
>C : Symbol(C, Decl(defineProperty.ts, 14, 1))
>B : Symbol(B, Decl(defineProperty.ts, 11, 1))

    declare public a;
>a : Symbol(a, Decl(defineProperty.ts, 15, 19))

    z = this.ka
>z : Symbol(z, Decl(defineProperty.ts, 16, 21))
>this.ka : Symbol(ka, Decl(defineProperty.ts, 18, 16))
>this : Symbol(C, Decl(defineProperty.ts, 14, 1))
>ka : Symbol(ka, Decl(defineProperty.ts, 18, 16))

    constructor(public ka: number) {
>ka : Symbol(ka, Decl(defineProperty.ts, 18, 16))

        super()
>super : Symbol(B, Decl(defineProperty.ts, 11, 1))
    }
    ki = this.ka
>ki : Symbol(ki, Decl(defineProperty.ts, 20, 5))
>this.ka : Symbol(ka, Decl(defineProperty.ts, 18, 16))
>this : Symbol(C, Decl(defineProperty.ts, 14, 1))
>ka : Symbol(ka, Decl(defineProperty.ts, 18, 16))
}

