--- old.conditionalTypes2.types
+++ new.conditionalTypes2.types
@@= skipped -1, +1 lines =@@
 
 === conditionalTypes2.ts ===
 interface Covariant<T> {
+>Covariant : Covariant<T>
+>T : T
+
     foo: T extends string ? T : number;
 >foo : T extends string ? T : number
 }
 
 interface Contravariant<T> {
+>Contravariant : Contravariant<T>
+>T : T
+
     foo: T extends string ? keyof T : number;
 >foo : T extends string ? keyof T : number
 }
 
 interface Invariant<T> {
+>Invariant : Invariant<T>
+>T : T
+
     foo: T extends string ? keyof T : T;
 >foo : T extends string ? keyof T : T
 }
 
 function f1<A, B extends A>(a: Covariant<A>, b: Covariant<B>) {
 >f1 : <A, B extends A>(a: Covariant<A>, b: Covariant<B>) => void
+>A : A
+>B : B
 >a : Covariant<A>
 >b : Covariant<B>
 
@@= skipped -32, +43 lines =@@
 
 function f2<A, B extends A>(a: Contravariant<A>, b: Contravariant<B>) {
 >f2 : <A, B extends A>(a: Contravariant<A>, b: Contravariant<B>) => void
+>A : A
+>B : B
 >a : Contravariant<A>
 >b : Contravariant<B>
 
@@= skipped -16, +18 lines =@@
 
 function f3<A, B extends A>(a: Invariant<A>, b: Invariant<B>) {
 >f3 : <A, B extends A>(a: Invariant<A>, b: Invariant<B>) => void
+>A : A
+>B : B
 >a : Invariant<A>
 >b : Invariant<B>
 
@@= skipped -17, +19 lines =@@
 // Extract<T, Function> is a T that is known to be a Function
 function isFunction<T>(value: T): value is Extract<T, Function> {
 >isFunction : <T>(value: T) => value is Extract<T, Function>
+>T : T
 >value : T
 
     return typeof value === "function";
 >typeof value === "function" : boolean
->typeof value : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof value : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >value : T
 >"function" : "function"
 }
 
 function getFunction<T>(item: T) {
 >getFunction : <T>(item: T) => Extract<T, Function>
+>T : T
 >item : T
 
     if (isFunction(item)) {
 >isFunction(item) : boolean
->isFunction : <T_1>(value: T_1) => value is Extract<T_1, Function>
+>isFunction : <T>(value: T) => value is Extract<T, Function>
 >item : T
 
         return item;
@@= skipped -28, +30 lines =@@
 
 function f10<T>(x: T) {
 >f10 : <T>(x: T) => void
+>T : T
 >x : T
 
     if (isFunction(x)) {
 >isFunction(x) : boolean
->isFunction : <T_1>(value: T_1) => value is Extract<T_1, Function>
+>isFunction : <T>(value: T) => value is Extract<T, Function>
 >x : T
 
         const f: Function = x;
@@= skipped -18, +19 lines =@@
 }
 
 function f11(x: string | (() => string) | undefined) {
->f11 : (x: string | (() => string) | undefined) => void
->x : string | (() => string) | undefined
+>f11 : (x: string | () => string | undefined) => void
+>x : string | () => string | undefined
 
     if (isFunction(x)) {
 >isFunction(x) : boolean
 >isFunction : <T>(value: T) => value is Extract<T, Function>
->x : string | (() => string) | undefined
+>x : string | () => string | undefined
 
         x();
 >x() : string
@@= skipped -15, +15 lines =@@
 }
 
 function f12(x: string | (() => string) | undefined) {
->f12 : (x: string | (() => string) | undefined) => void
->x : string | (() => string) | undefined
+>f12 : (x: string | () => string | undefined) => void
+>x : string | () => string | undefined
 
     const f = getFunction(x);  // () => string
 >f : () => string
 >getFunction(x) : () => string
 >getFunction : <T>(item: T) => Extract<T, Function>
->x : string | (() => string) | undefined
+>x : string | () => string | undefined
 
     f();
 >f() : string
@@= skipped -36, +36 lines =@@
 
 type Extract2<T, U, V> = T extends U ? T extends V ? T : never : never;
 >Extract2 : Extract2<T, U, V>
+>T : T
+>U : U
+>V : V
 
 function f20<T>(x: Extract<Extract<T, Foo>, Bar>, y: Extract<T, Foo & Bar>, z: Extract2<T, Foo, Bar>) {
 >f20 : <T>(x: Extract<Extract<T, Foo>, Bar>, y: Extract<T, Foo & Bar>, z: Extract2<T, Foo, Bar>) => void
+>T : T
 >x : Extract<Extract<T, Foo>, Bar>
 >y : Extract<T, Foo & Bar>
 >z : Extract2<T, Foo, Bar>
@@= skipped -25, +29 lines =@@
 
 function f21<T>(x: Extract<Extract<T, Foo>, Bar>, y: Extract<T, Foo & Bar>, z: Extract2<T, Foo, Bar>) {
 >f21 : <T>(x: Extract<Extract<T, Foo>, Bar>, y: Extract<T, Foo & Bar>, z: Extract2<T, Foo, Bar>) => void
+>T : T
 >x : Extract<Extract<T, Foo>, Bar>
 >y : Extract<T, Foo & Bar>
 >z : Extract2<T, Foo, Bar>
@@= skipped -24, +25 lines =@@
 
 class Opt<T> {
 >Opt : Opt<T>
+>T : T
 
     toVector(): Vector<T> {
 >toVector : () => Vector<T>
@@= skipped -11, +12 lines =@@
 }
 
 interface Seq<T> {
+>Seq : Seq<T>
+>T : T
+
     tail(): Opt<Seq<T>>;
 >tail : () => Opt<Seq<T>>
 }
 
 class Vector<T> implements Seq<T> {
 >Vector : Vector<T>
+>T : T
 
     tail(): Opt<Vector<T>> {
 >tail : () => Opt<Vector<T>>
@@= skipped -16, +20 lines =@@
     }
     partition2<U extends T>(predicate:(v:T)=>v is U): [Vector<U>,Vector<Exclude<T, U>>];
 >partition2 : { <U extends T>(predicate: (v: T) => v is U): [Vector<U>, Vector<Exclude<T, U>>]; (predicate: (x: T) => boolean): [Vector<T>, Vector<T>]; }
+>U : U
 >predicate : (v: T) => v is U
 >v : T
 
@@= skipped -9, +10 lines =@@
 >x : T
 
     partition2<U extends T>(predicate:(v:T)=>boolean): [Vector<U>,Vector<any>] {
->partition2 : { <U_1 extends T>(predicate: (v: T) => v is U_1): [Vector<U_1>, Vector<Exclude<T, U_1>>]; (predicate: (x: T) => boolean): [Vector<T>, Vector<T>]; }
+>partition2 : { <U extends T>(predicate: (v: T) => v is U): [Vector<U>, Vector<Exclude<T, U>>]; (predicate: (x: T) => boolean): [Vector<T>, Vector<T>]; }
+>U : U
 >predicate : (v: T) => boolean
 >v : T
 
@@= skipped -11, +12 lines =@@
 }
 
 interface A1<T> {
+>A1 : A1<T>
+>T : T
+
     bat: B1<A1<T>>;
 >bat : B1<A1<T>>
 }
 
 interface B1<T> extends A1<T> {
+>B1 : B1<T>
+>T : T
+
     bat: B1<B1<T>>;
 >bat : B1<B1<T>>
 
@@= skipped -17, +23 lines =@@
 // Repro from #22899
 
 declare function toString1(value: object | Function): string ;
->toString1 : (value: object | Function) => string
->value : object | Function
+>toString1 : (value: Function | object) => string
+>value : Function | object
 
 declare function toString2(value: Function): string ;
 >toString2 : (value: Function) => string
@@= skipped -9, +9 lines =@@
 
 function foo<T>(value: T) {
 >foo : <T>(value: T) => void
+>T : T
 >value : T
 
     if (isFunction(value)) {
 >isFunction(value) : boolean
->isFunction : <T_1>(value: T_1) => value is Extract<T_1, Function>
+>isFunction : <T>(value: T) => value is Extract<T, Function>
 >value : T
 
         toString1(value);
 >toString1(value) : string
->toString1 : (value: object | Function) => string
+>toString1 : (value: Function | object) => string
 >value : Extract<T, Function>
 
         toString2(value);
@@= skipped -23, +24 lines =@@
 
 type A<T, V, E> =
 >A : A<T, V, E>
+>T : T
+>V : V
+>E : E
 
   T extends object
     ? { [Q in { [P in keyof T]: T[P] extends V ? P : P; }[keyof T]]: A<T[Q], V, E>; }
+>Q : Q
+>P : P
+
     : T extends V ? T : never;
 
 type B<T, V> =
 >B : B<T, V>
+>T : T
+>V : V
 
   T extends object
     ? { [Q in { [P in keyof T]: T[P] extends V ? P : P; }[keyof T]]: B<T[Q], V>; }
+>Q : Q
+>P : P
+
     : T extends V ? T : never;
 
 type C<T, V, E> =
 >C : C<T, V, E>
+>T : T
+>V : V
+>E : E
 
   { [Q in { [P in keyof T]: T[P] extends V ? P : P; }[keyof T]]: C<T[Q], V, E>; };
+>Q : Q
+>P : P
 
 // Repro from #23100
 
 type A2<T, V, E> =
 >A2 : A2<T, V, E>
+>T : T
+>V : V
+>E : E
 
     T extends object ? T extends any[] ? T : { [Q in keyof T]: A2<T[Q], V, E>; } : T;
+>Q : Q
 
 type B2<T, V> =
 >B2 : B2<T, V>
+>T : T
+>V : V
 
     T extends object ? T extends any[] ? T : { [Q in keyof T]: B2<T[Q], V>; } : T;
+>Q : Q
 
 type C2<T, V, E> =
 >C2 : C2<T, V, E>
+>T : T
+>V : V
+>E : E
 
     T extends object ? { [Q in keyof T]: C2<T[Q], V, E>; } : T;
+>Q : Q
 
 // Repro from #28654
 
 type MaybeTrue<T extends { b: boolean }> = true extends T["b"] ? "yes" : "no";
 >MaybeTrue : MaybeTrue<T>
+>T : T
 >b : boolean
 >true : true
 
@@= skipped -66, +94 lines =@@
 
 type Product<A extends Union, B> = { f1: A, f2: B};
 >Product : Product<A, B>
+>A : A
+>B : B
 >f1 : A
 >f2 : B
 
@@= skipped -11, +13 lines =@@
 >UnionComplement : UnionComplement
 
   [K in Union]: Exclude<Union, K>
+>K : K
+
 };
 type UCA = UnionComplement['a'];
 >UCA : "b"
@@= skipped -12, +14 lines =@@
 >UnionComplementComplement : UnionComplementComplement
 
   [K in Union]: Exclude<Union, Exclude<Union, K>>
+>K : K
+
 };
 type UCCA = UnionComplementComplement['a'];
 >UCCA : "a"
@@= skipped -12, +14 lines =@@
 >ProductComplement : ProductComplement
 
   [K in Union]: Exclude<ProductUnion, { f1: K }>
+>K : K
 >f1 : K
 
 };
@@= skipped -14, +15 lines =@@
 >ProductComplementComplement : ProductComplementComplement
 
   [K in Union]: Exclude<ProductUnion, Exclude<ProductUnion, { f1: K }>>
+>K : K
 >f1 : K
 
 };
@@= skipped -13, +14 lines =@@
 
 type Hmm<T, U extends T> = U extends T ? { [K in keyof U]: number } : never;
 >Hmm : Hmm<T, U>
+>T : T
+>U : U
+>K : K
 
 type What = Hmm<{}, { a: string }>
 >What : { a: number; }
@@= skipped -14, +17 lines =@@
 // Repro from #33568
 
 declare function save(_response: IRootResponse<string>): void;
->save : (_response: IRootResponse<string>) => void
+>save : (_response: IResponse<string>) => void
 >_response : IResponse<string>
 
 exportCommand(save);
 >exportCommand(save) : void
 >exportCommand : <TResponse>(functionToCall: IExportCallback<TResponse>) => void
->save : (_response: IRootResponse<string>) => void
+>save : (_response: IResponse<string>) => void
 
 declare function exportCommand<TResponse>(functionToCall: IExportCallback<TResponse>): void;
 >exportCommand : <TResponse>(functionToCall: IExportCallback<TResponse>) => void
+>TResponse : TResponse
 >functionToCall : IExportCallback<TResponse>
 
 interface IExportCallback<TResponse> {
+>IExportCallback : IExportCallback<TResponse>
+>TResponse : TResponse
+
 	(response: IRootResponse<TResponse>): void;
 >response : IRootResponse<TResponse>
 }
 
 type IRootResponse<TResponse> =
 >IRootResponse : IRootResponse<TResponse>
+>TResponse : TResponse
 
 	TResponse extends IRecord ? IRecordResponse<TResponse> : IResponse<TResponse>;
 
 interface IRecord {
+>IRecord : IRecord
+
 	readonly Id: string;
 >Id : string
 }
 
 declare type IRecordResponse<T extends IRecord> = IResponse<T> & {
 >IRecordResponse : IRecordResponse<T>
+>T : T
 
 	sendRecord(): void;
 >sendRecord : () => void
@@= skipped -37, +45 lines =@@
 
 declare type IResponse<T> = {
 >IResponse : IResponse<T>
+>T : T
 
 	sendValue(name: keyof GetAllPropertiesOfType<T, string>): void;
->sendValue : (name: keyof GetAllPropertiesOfType<T, string>) => void
+>sendValue : (name: GetPropertyNamesOfType<Required<T>, string>) => void
 >name : GetPropertyNamesOfType<Required<T>, string>
 
 };
 
 declare type GetPropertyNamesOfType<T, RestrictToType> = {
 >GetPropertyNamesOfType : GetPropertyNamesOfType<T, RestrictToType>
+>T : T
+>RestrictToType : RestrictToType
 
 	[PropertyName in Extract<keyof T, string>]: T[PropertyName] extends RestrictToType ? PropertyName : never
+>PropertyName : PropertyName
+
 }[Extract<keyof T, string>];
 
 declare type GetAllPropertiesOfType<T, RestrictToType> = Pick<
 >GetAllPropertiesOfType : GetAllPropertiesOfType<T, RestrictToType>
+>T : T
+>RestrictToType : RestrictToType
 
 	T,
 	GetPropertyNamesOfType<Required<T>, RestrictToType>
@@= skipped -23, +30 lines =@@
 // Repro from #33568
 
 declare function ff(x: Foo3<string>): void;
->ff : (x: Foo3<string>) => void
+>ff : (x: { x: string; }) => void
 >x : { x: string; }
 
 declare function gg<T>(f: (x: Foo3<T>) => void): void;
 >gg : <T>(f: (x: Foo3<T>) => void) => void
+>T : T
 >f : (x: Foo3<T>) => void
 >x : Foo3<T>
 
 type Foo3<T> = T extends number ? { n: T } : { x: T };
 >Foo3 : Foo3<T>
+>T : T
 >n : T
 >x : T
 
 gg(ff);
 >gg(ff) : void
 >gg : <T>(f: (x: Foo3<T>) => void) => void
->ff : (x: Foo3<string>) => void
+>ff : (x: { x: string; }) => void
 
 // Repro from #41613
 
 type Wat<K extends string> = { x: { y: 0, z: 1 } } extends { x: { [P in K]: 0 } } ? true : false;
 >Wat : Wat<K>
+>K : K
 >x : { y: 0; z: 1; }
 >y : 0
 >z : 1
->x : { [P in K]: 0; }
+>x : { [P in K]: 0 }
+>P : P
 >true : true
 >false : false
  
