//// [tests/cases/conformance/es6/spread/iteratorSpreadInCall12.ts] ////

=== iteratorSpreadInCall12.ts ===
class Foo<T> {
>Foo : Symbol(Foo, Decl(iteratorSpreadInCall12.ts, 0, 0))
>T : Symbol(T, Decl(iteratorSpreadInCall12.ts, 0, 10))

    constructor(...s: T[]) { }
>s : Symbol(s, Decl(iteratorSpreadInCall12.ts, 1, 16))
>T : Symbol(T, Decl(iteratorSpreadInCall12.ts, 0, 10))
}

class SymbolIterator {
>SymbolIterator : Symbol(SymbolIterator, Decl(iteratorSpreadInCall12.ts, 2, 1))

    next() {
>next : Symbol(next, Decl(iteratorSpreadInCall12.ts, 4, 22))

        return {
            value: Symbol(),
>value : Symbol(value, Decl(iteratorSpreadInCall12.ts, 6, 16))

            done: false
>done : Symbol(done, Decl(iteratorSpreadInCall12.ts, 7, 28))

        };
    }

    [Symbol.iterator]() {
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(iteratorSpreadInCall12.ts, 10, 5))

        return this;
>this : Symbol(SymbolIterator, Decl(iteratorSpreadInCall12.ts, 2, 1))
    }
}

class _StringIterator {
>_StringIterator : Symbol(_StringIterator, Decl(iteratorSpreadInCall12.ts, 15, 1))

    next() {
>next : Symbol(next, Decl(iteratorSpreadInCall12.ts, 17, 23))

        return {
            value: "",
>value : Symbol(value, Decl(iteratorSpreadInCall12.ts, 19, 16))

            done: false
>done : Symbol(done, Decl(iteratorSpreadInCall12.ts, 20, 22))

        };
    }

    [Symbol.iterator]() {
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(iteratorSpreadInCall12.ts, 23, 5))

        return this;
>this : Symbol(_StringIterator, Decl(iteratorSpreadInCall12.ts, 15, 1))
    }
}

new Foo(...[...new SymbolIterator, ...[...new _StringIterator]]);
>Foo : Symbol(Foo, Decl(iteratorSpreadInCall12.ts, 0, 0))
>SymbolIterator : Symbol(SymbolIterator, Decl(iteratorSpreadInCall12.ts, 2, 1))
>_StringIterator : Symbol(_StringIterator, Decl(iteratorSpreadInCall12.ts, 15, 1))

