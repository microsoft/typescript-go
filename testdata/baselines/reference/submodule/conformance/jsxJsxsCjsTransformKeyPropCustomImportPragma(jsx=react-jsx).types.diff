--- old.jsxJsxsCjsTransformKeyPropCustomImportPragma(jsx=react-jsx).types
+++ new.jsxJsxsCjsTransformKeyPropCustomImportPragma(jsx=react-jsx).types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/conformance/jsx/jsxs/jsxJsxsCjsTransformKeyPropCustomImportPragma.tsx] ////
 
-=== Performance Stats ===
-Assignability cache: 2,500
-Type Count: 10,000
-Instantiation count: 100,000
-Symbol count: 50,000
-
 === react.tsx ===
 /// <reference path="react16.d.ts" />
 /* @jsxImportSource react */
 import "./preact";
 const props2 = { answer: 42 }
 >props2 : { answer: number; }
->       : ^^^^^^^^^^^^^^^^^^^
 >{ answer: 42 } : { answer: number; }
->               : ^^^^^^^^^^^^^^^^^^^
 >answer : number
->       : ^^^^^^
 >42 : 42
->   : ^^
 
 const a2 = <div key="foo" {...props2}>text</div>;
->a2 : JSX.Element
->   : ^^^^^^^^^^^
-><div key="foo" {...props2}>text</div> : JSX.Element
->                                      : ^^^^^^^^^^^
+>a2 : any
+><div key="foo" {...props2}>text</div> : any
 >div : any
->    : ^^^
->key : string
->    : ^^^^^^
+>key : any
 >props2 : { answer: number; }
->       : ^^^^^^^^^^^^^^^^^^^
 >div : any
->    : ^^^
 
 const b2 = <div {...props2} key="bar">text</div>;
->b2 : JSX.Element
->   : ^^^^^^^^^^^
-><div {...props2} key="bar">text</div> : JSX.Element
->                                      : ^^^^^^^^^^^
+>b2 : any
+><div {...props2} key="bar">text</div> : any
 >div : any
->    : ^^^
 >props2 : { answer: number; }
->       : ^^^^^^^^^^^^^^^^^^^
->key : string
->    : ^^^^^^
+>key : any
 >div : any
->    : ^^^
 
 export {};
 
@@= skipped -54, +32 lines =@@
 /* @jsxImportSource preact */
 const props = { answer: 42 }
 >props : { answer: number; }
->      : ^^^^^^^^^^^^^^^^^^^
 >{ answer: 42 } : { answer: number; }
->               : ^^^^^^^^^^^^^^^^^^^
 >answer : number
->       : ^^^^^^
 >42 : 42
->   : ^^
 
 const a = <div key="foo" {...props}>text</div>;
->a : JSX.Element
->  : ^^^^^^^^^^^
-><div key="foo" {...props}>text</div> : JSX.Element
->                                     : ^^^^^^^^^^^
+>a : any
+><div key="foo" {...props}>text</div> : any
 >div : any
->    : ^^^
->key : string
->    : ^^^^^^
+>key : any
 >props : { answer: number; }
->      : ^^^^^^^^^^^^^^^^^^^
 >div : any
->    : ^^^
 
 const b = <div {...props} key="bar">text</div>;
->b : JSX.Element
->  : ^^^^^^^^^^^
-><div {...props} key="bar">text</div> : JSX.Element
->                                     : ^^^^^^^^^^^
+>b : any
+><div {...props} key="bar">text</div> : any
 >div : any
->    : ^^^
 >props : { answer: number; }
->      : ^^^^^^^^^^^^^^^^^^^
->key : string
->    : ^^^^^^
+>key : any
 >div : any
->    : ^^^
 
 export {};
 
