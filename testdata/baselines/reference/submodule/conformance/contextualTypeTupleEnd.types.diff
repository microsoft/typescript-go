--- old.contextualTypeTupleEnd.types
+++ new.contextualTypeTupleEnd.types
@@= skipped -14, +14 lines =@@
 >x : string
 
 declare function f1(...args: Funcs): void;
->f1 : (...args: Funcs) => void
+>f1 : (...args: ((arg: number) => void)[], args_1?: (arg: string) => void) => void
 >args : Funcs
 
 f1();  // Error
 >f1() : void
->f1 : (...args: Funcs) => void
+>f1 : (...args: ((arg: number) => void)[], args_1?: (arg: string) => void) => void
 
 f1(x => str(x));
 >f1(x => str(x)) : void
->f1 : (...args: Funcs) => void
+>f1 : (...args: ((arg: number) => void)[], args_1?: (arg: string) => void) => void
 >x => str(x) : (x: string) => void
 >x : string
 >str(x) : void
@@= skipped -18, +18 lines =@@
 
 f1(x => num(x), x => str(x));
 >f1(x => num(x), x => str(x)) : void
->f1 : (...args: Funcs) => void
+>f1 : (...args: ((arg: number) => void)[], args_1?: (arg: string) => void) => void
 >x => num(x) : (x: number) => void
 >x : number
 >num(x) : void
@@= skipped -14, +14 lines =@@
 
 f1(x => num(x), x => num(x), x => str(x));
 >f1(x => num(x), x => num(x), x => str(x)) : void
->f1 : (...args: Funcs) => void
+>f1 : (...args: ((arg: number) => void)[], args_1?: (arg: string) => void) => void
 >x => num(x) : (x: number) => void
 >x : number
 >num(x) : void
@@= skipped -84, +84 lines =@@
 };
 
 export function createSelector<S extends SelectorTuple<ExampleState>>(...selectors: [...selectors: S, f: (x: any) => any]) {
->createSelector : <S extends SelectorTuple<ExampleState>>(...selectors: [...selectors: S, f: (x: any) => any]) => void
+>createSelector : <S extends SelectorTuple<ExampleState>>(...selectors: S, f?: (x: any) => any) => void
 >selectors : [...selectors: S, f: (x: any) => any]
 >x : any
 
@@= skipped -14, +14 lines =@@
 
 createSelector(
 >createSelector(    x => x.foo,    x => x.bar,    () => 42) : void
->createSelector : <S extends SelectorTuple<ExampleState>>(...selectors: [...selectors: S, f: (x: any) => any]) => void
+>createSelector : <S extends SelectorTuple<ExampleState>>(...selectors: S, f?: (x: any) => any) => void
 
     x => x.foo,
 >x => x.foo : (x: ExampleState) => "foo"
@@= skipped -25, +25 lines =@@
 // Repro from #43122
 
 declare function example(...args: [...((n: number) => void)[], (x: any) => void]): void
->example : (...args: [...((n: number) => void)[], (x: any) => void]) => void
+>example : (...args: ((n: number) => void)[], args_1?: (x: any) => void) => void
 >args : [...((n: number) => void)[], (x: any) => void]
 >n : number
 >x : any
 
 example(
 >example(    x => x.foo,  // Error    x => x.bar,  // Error    x => x.baz,) : void
->example : (...args: [...((n: number) => void)[], (x: any) => void]) => void
+>example : (...args: ((n: number) => void)[], args_1?: (x: any) => void) => void
 
     x => x.foo,  // Error
 >x => x.foo : (x: number) => any
@@= skipped -35, +35 lines =@@
 // Repro from #52846
 
 declare function test(...args: [...((arg: number) => void)[], (arg: string) => void]): void;
->test : (...args: [...((arg: number) => void)[], (arg: string) => void]) => void
+>test : (...args: ((arg: number) => void)[], args_1?: (arg: string) => void) => void
 >args : [...((arg: number) => void)[], (arg: string) => void]
 >arg : number
 >arg : string
   
 test(a => a, b => b, c => c);
 >test(a => a, b => b, c => c) : void
->test : (...args: [...((arg: number) => void)[], (arg: string) => void]) => void
+>test : (...args: ((arg: number) => void)[], args_1?: (arg: string) => void) => void
 >a => a : (a: number) => number
 >a : number
 >a : number
