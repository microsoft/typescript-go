--- old.exportAssignNonIdentifier.types
+++ new.exportAssignNonIdentifier.types
@@= skipped -2, +2 lines =@@
 === foo1.ts ===
 var x = 10;
 >x : number
->  : ^^^^^^
 >10 : 10
->   : ^^
 
 export = typeof x; // Ok
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number
->  : ^^^^^^
 
 === foo2.ts ===
 
@@= skipped -17, +13 lines =@@
 === foo3.ts ===
 export = class Foo3 {}; // Error, not an expression
 >class Foo3 {} : typeof Foo3
->              : ^^^^^^^^^^^
 >Foo3 : typeof Foo3
->     : ^^^^^^^^^^^
 
 === foo4.ts ===
 export = true; // Ok
 >true : true
->     : ^^^^
 
 === foo5.ts ===
 export = undefined; // Valid.  undefined is an identifier in JavaScript/TypeScript
 >undefined : undefined
->          : ^^^^^^^^^
 
 === foo6.ts ===
 export = void; // Error, void operator requires an argument
 >void : undefined
->     : ^^^^^^^^^
 > : any
-> : ^^^
 
 === foo7.ts ===
 export = Date || String; // Ok
 >Date || String : DateConstructor | StringConstructor
->               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >Date : DateConstructor
->     : ^^^^^^^^^^^^^^^
 >String : StringConstructor
->       : ^^^^^^^^^^^^^^^^^
 
 === foo8.ts ===
 
