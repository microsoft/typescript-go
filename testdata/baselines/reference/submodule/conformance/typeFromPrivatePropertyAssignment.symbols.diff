--- old.typeFromPrivatePropertyAssignment.symbols
+++ new.typeFromPrivatePropertyAssignment.symbols
@@= skipped -8, +8 lines =@@
 >C : Symbol(C, Decl(typeFromPrivatePropertyAssignment.ts, 0, 28))
 
     #a?: Foo;
->#a : Symbol(C.#a, Decl(typeFromPrivatePropertyAssignment.ts, 2, 9))
+>#a : Symbol(#a, Decl(typeFromPrivatePropertyAssignment.ts, 2, 9))
 >Foo : Symbol(Foo, Decl(typeFromPrivatePropertyAssignment.ts, 0, 0))
 
     #b?: Foo;
->#b : Symbol(C.#b, Decl(typeFromPrivatePropertyAssignment.ts, 3, 13))
+>#b : Symbol(#b, Decl(typeFromPrivatePropertyAssignment.ts, 3, 13))
 >Foo : Symbol(Foo, Decl(typeFromPrivatePropertyAssignment.ts, 0, 0))
 
     m() {
->m : Symbol(C.m, Decl(typeFromPrivatePropertyAssignment.ts, 4, 13))
+>m : Symbol(m, Decl(typeFromPrivatePropertyAssignment.ts, 4, 13))
 
         const a = this.#a || {};
 >a : Symbol(a, Decl(typeFromPrivatePropertyAssignment.ts, 7, 13))
->this.#a : Symbol(C.#a, Decl(typeFromPrivatePropertyAssignment.ts, 2, 9))
+>this.#a : Symbol(#a, Decl(typeFromPrivatePropertyAssignment.ts, 2, 9))
 >this : Symbol(C, Decl(typeFromPrivatePropertyAssignment.ts, 0, 28))
 
         this.#b = this.#b || {};
->this.#b : Symbol(C.#b, Decl(typeFromPrivatePropertyAssignment.ts, 3, 13))
+>this.#b : Symbol(#b, Decl(typeFromPrivatePropertyAssignment.ts, 3, 13))
 >this : Symbol(C, Decl(typeFromPrivatePropertyAssignment.ts, 0, 28))
->this.#b : Symbol(C.#b, Decl(typeFromPrivatePropertyAssignment.ts, 3, 13))
+>this.#b : Symbol(#b, Decl(typeFromPrivatePropertyAssignment.ts, 3, 13))
 >this : Symbol(C, Decl(typeFromPrivatePropertyAssignment.ts, 0, 28))
     }
 }
