--- old.umd-augmentation-3.symbols
+++ new.umd-augmentation-3.symbols
@@= skipped -6, +6 lines =@@
 
 let v = new m.Vector(3, 2);
 >v : Symbol(v, Decl(b.ts, 2, 3))
->m.Vector : Symbol(m.Vector, Decl(index.d.ts, 8, 2), Decl(math2d-augment.d.ts, 2, 25))
+>m.Vector : Symbol(Vector, Decl(index.d.ts, 8, 2), Decl(math2d-augment.d.ts, 2, 25))
 >m : Symbol(m, Decl(b.ts, 1, 6))
->Vector : Symbol(m.Vector, Decl(index.d.ts, 8, 2), Decl(math2d-augment.d.ts, 2, 25))
+>Vector : Symbol(Vector, Decl(index.d.ts, 8, 2), Decl(math2d-augment.d.ts, 2, 25))
 
 let magnitude = m.getLength(v);
 >magnitude : Symbol(magnitude, Decl(b.ts, 3, 3))
->m.getLength : Symbol(m.getLength, Decl(index.d.ts, 16, 2))
+>m.getLength : Symbol(getLength, Decl(index.d.ts, 16, 2))
 >m : Symbol(m, Decl(b.ts, 1, 6))
->getLength : Symbol(m.getLength, Decl(index.d.ts, 16, 2))
+>getLength : Symbol(getLength, Decl(index.d.ts, 16, 2))
 >v : Symbol(v, Decl(b.ts, 2, 3))
 
 let p: m.Point = v.translate(5, 5);
 >p : Symbol(p, Decl(b.ts, 4, 3))
 >m : Symbol(m, Decl(b.ts, 1, 6))
->Point : Symbol(m.Point, Decl(index.d.ts, 4, 23))
->v.translate : Symbol(m.Vector.translate, Decl(index.d.ts, 13, 36))
+>Point : Symbol(Point, Decl(index.d.ts, 4, 23))
+>v.translate : Symbol(translate, Decl(index.d.ts, 13, 36))
 >v : Symbol(v, Decl(b.ts, 2, 3))
->translate : Symbol(m.Vector.translate, Decl(index.d.ts, 13, 36))
+>translate : Symbol(translate, Decl(index.d.ts, 13, 36))
 
 p = v.reverse();
 >p : Symbol(p, Decl(b.ts, 4, 3))
->v.reverse : Symbol(m.Vector.reverse, Decl(math2d-augment.d.ts, 4, 19))
+>v.reverse : Symbol(reverse, Decl(math2d-augment.d.ts, 4, 19))
 >v : Symbol(v, Decl(b.ts, 2, 3))
->reverse : Symbol(m.Vector.reverse, Decl(math2d-augment.d.ts, 4, 19))
+>reverse : Symbol(reverse, Decl(math2d-augment.d.ts, 4, 19))
 
 var t = p.x;
 >t : Symbol(t, Decl(b.ts, 6, 3))
->p.x : Symbol(m.Point.x, Decl(index.d.ts, 5, 18))
+>p.x : Symbol(x, Decl(index.d.ts, 5, 18))
 >p : Symbol(p, Decl(b.ts, 4, 3))
->x : Symbol(m.Point.x, Decl(index.d.ts, 5, 18))
+>x : Symbol(x, Decl(index.d.ts, 5, 18))
 
 === node_modules/math2d/index.d.ts ===
 export as namespace Math2d;
@@= skipped -45, +45 lines =@@
 >Point : Symbol(Point, Decl(index.d.ts, 4, 23))
 
 		x: number;
->x : Symbol(Point.x, Decl(index.d.ts, 5, 18))
+>x : Symbol(x, Decl(index.d.ts, 5, 18))
 
 		y: number;
->y : Symbol(Point.y, Decl(index.d.ts, 6, 12))
+>y : Symbol(y, Decl(index.d.ts, 6, 12))
 	}
 
 	class Vector implements Point {
@@= skipped -11, +11 lines =@@
 >Point : Symbol(Point, Decl(index.d.ts, 4, 23))
 
 		x: number;
->x : Symbol(Vector.x, Decl(index.d.ts, 10, 32))
+>x : Symbol(x, Decl(index.d.ts, 10, 32))
 
 		y: number;
->y : Symbol(Vector.y, Decl(index.d.ts, 11, 12))
+>y : Symbol(y, Decl(index.d.ts, 11, 12))
 
 		constructor(x: number, y: number);
 >x : Symbol(x, Decl(index.d.ts, 13, 14))
 >y : Symbol(y, Decl(index.d.ts, 13, 24))
 
 		translate(dx: number, dy: number): Vector;
->translate : Symbol(Vector.translate, Decl(index.d.ts, 13, 36))
+>translate : Symbol(translate, Decl(index.d.ts, 13, 36))
 >dx : Symbol(dx, Decl(index.d.ts, 15, 12))
 >dy : Symbol(dy, Decl(index.d.ts, 15, 23))
 >Vector : Symbol(Vector, Decl(index.d.ts, 8, 2), Decl(math2d-augment.d.ts, 2, 25))
@@= skipped -30, +30 lines =@@
 
 // Augment the module
 declare module 'math2d' {
->'math2d' : Symbol(Math2d, Decl(index.d.ts, 2, 13), Decl(math2d-augment.d.ts, 0, 33))
+>'math2d' : Symbol(M2D, Decl(index.d.ts, 2, 13), Decl(math2d-augment.d.ts, 0, 33))
 
 	// Add a method to the class
 	interface Vector {
 >Vector : Symbol(Vector, Decl(index.d.ts, 8, 2), Decl(math2d-augment.d.ts, 2, 25))
 
 		reverse(): Math2d.Point;
->reverse : Symbol(Vector.reverse, Decl(math2d-augment.d.ts, 4, 19))
+>reverse : Symbol(reverse, Decl(math2d-augment.d.ts, 4, 19))
 >Math2d : Symbol(Math2d, Decl(math2d-augment.d.ts, 0, 6))
 >Point : Symbol(Point, Decl(index.d.ts, 4, 23))
 	}
