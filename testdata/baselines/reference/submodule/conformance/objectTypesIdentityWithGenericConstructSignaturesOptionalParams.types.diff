--- old.objectTypesIdentityWithGenericConstructSignaturesOptionalParams.types
+++ new.objectTypesIdentityWithGenericConstructSignaturesOptionalParams.types
@@= skipped -6, +6 lines =@@
 
 class B<T> {
 >B : B<T>
+>T : T
 
     constructor(x: T, y?: T) { return null; }
 >x : T
@@= skipped -8, +9 lines =@@
 
 class C<T> {
 >C : C<T>
+>T : T
 
     constructor(x: T, y?: T) { return null; }
 >x : T
@@= skipped -7, +8 lines =@@
 }
 
 interface I<T> {
+>I : I<T>
+>T : T
+
     new(x: T, y?: T): B<T>;
 >x : T
 >y : T
 }
 
 interface I2 {
+>I2 : I2
+
     new<T>(x: T, y?: T): C<T>;
+>T : T
 >x : T
 >y : T
 }
 
 var a: { new<T>(x: T, y?: T): B<T> }
 >a : new <T>(x: T, y?: T) => B<T>
+>T : T
 >x : T
 >y : T
 
 var b = { new<T>(x: T, y?: T) { return new C<T>(x, y); } }; // not a construct signature, function called new
->b : { "new"<T>(x: T, y?: T): C<T>; }
->{ new<T>(x: T, y?: T) { return new C<T>(x, y); } } : { "new"<T>(x: T, y?: T): C<T>; }
+>b : { new: <T>(x: T, y?: T) => C<T>; }
+>{ new<T>(x: T, y?: T) { return new C<T>(x, y); } } : { new: <T>(x: T, y?: T) => C<T>; }
 >new : <T>(x: T, y?: T) => C<T>
+>T : T
 >x : T
 >y : T
 >new C<T>(x, y) : C<T>
@@= skipped -64, +72 lines =@@
 >x : any
 
 function foo3(x: typeof a);
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <T>(x: T, y?: T) => B<T>): any; (x: new <T>(x: T, y?: T) => B<T>): any; }
 >x : new <T>(x: T, y?: T) => B<T>
->a : new <T>(x: T, y?: T) => B<T>
 
 function foo3(x: typeof a); // error
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <T>(x: T, y?: T) => B<T>): any; (x: new <T>(x: T, y?: T) => B<T>): any; }
 >x : new <T>(x: T, y?: T) => B<T>
->a : new <T>(x: T, y?: T) => B<T>
 
 function foo3(x: any) { }
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <T>(x: T, y?: T) => B<T>): any; (x: new <T>(x: T, y?: T) => B<T>): any; }
 >x : any
 
 function foo4(x: typeof b);
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"<T>(x: T, y?: T): C<T>; }
->b : { "new"<T>(x: T, y?: T): C<T>; }
+>foo4 : { (x: { new: <T>(x: T, y?: T) => C<T>; }): any; (x: { new: <T>(x: T, y?: T) => C<T>; }): any; }
+>x : { new: <T>(x: T, y?: T) => C<T>; }
 
 function foo4(x: typeof b); // error
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"<T>(x: T, y?: T): C<T>; }
->b : { "new"<T>(x: T, y?: T): C<T>; }
+>foo4 : { (x: { new: <T>(x: T, y?: T) => C<T>; }): any; (x: { new: <T>(x: T, y?: T) => C<T>; }): any; }
+>x : { new: <T>(x: T, y?: T) => C<T>; }
 
 function foo4(x: any) { }
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
+>foo4 : { (x: { new: <T>(x: T, y?: T) => C<T>; }): any; (x: { new: <T>(x: T, y?: T) => C<T>; }): any; }
 >x : any
 
 function foo8(x: B<string>): string;
@@= skipped -52, +48 lines =@@
 >x : any
 
 function foo10(x: B<string>);
->foo10 : { (x: B<string>): any; (x: typeof a): any; }
+>foo10 : { (x: B<string>): any; (x: new <T>(x: T, y?: T) => B<T>): any; }
 >x : B<string>
 
 function foo10(x: typeof a); // BUG 832086
->foo10 : { (x: B<string>): any; (x: typeof a): any; }
+>foo10 : { (x: B<string>): any; (x: new <T>(x: T, y?: T) => B<T>): any; }
 >x : new <T>(x: T, y?: T) => B<T>
->a : new <T>(x: T, y?: T) => B<T>
 
 function foo10(x: any) { }
->foo10 : { (x: B<string>): any; (x: typeof a): any; }
+>foo10 : { (x: B<string>): any; (x: new <T>(x: T, y?: T) => B<T>): any; }
 >x : any
 
 function foo11(x: B<string>);
->foo11 : { (x: B<string>): any; (x: typeof b): any; }
+>foo11 : { (x: B<string>): any; (x: { new: <T>(x: T, y?: T) => C<T>; }): any; }
 >x : B<string>
 
 function foo11(x: typeof b); // ok
->foo11 : { (x: B<string>): any; (x: typeof b): any; }
->x : { "new"<T>(x: T, y?: T): C<T>; }
->b : { "new"<T>(x: T, y?: T): C<T>; }
+>foo11 : { (x: B<string>): any; (x: { new: <T>(x: T, y?: T) => C<T>; }): any; }
+>x : { new: <T>(x: T, y?: T) => C<T>; }
 
 function foo11(x: any) { }
->foo11 : { (x: B<string>): any; (x: typeof b): any; }
+>foo11 : { (x: B<string>): any; (x: { new: <T>(x: T, y?: T) => C<T>; }): any; }
 >x : any
 
 function foo12(x: I<string>);
@@= skipped -50, +48 lines =@@
 >x : any
 
 function foo13(x: I<string>);
->foo13 : { (x: I<string>): any; (x: typeof a): any; }
+>foo13 : { (x: I<string>): any; (x: new <T>(x: T, y?: T) => B<T>): any; }
 >x : I<string>
 
 function foo13(x: typeof a); // BUG 832086
->foo13 : { (x: I<string>): any; (x: typeof a): any; }
+>foo13 : { (x: I<string>): any; (x: new <T>(x: T, y?: T) => B<T>): any; }
 >x : new <T>(x: T, y?: T) => B<T>
->a : new <T>(x: T, y?: T) => B<T>
 
 function foo13(x: any) { }
->foo13 : { (x: I<string>): any; (x: typeof a): any; }
+>foo13 : { (x: I<string>): any; (x: new <T>(x: T, y?: T) => B<T>): any; }
 >x : any
 
 function foo14(x: I<string>);
->foo14 : { (x: I<string>): any; (x: typeof b): any; }
+>foo14 : { (x: I<string>): any; (x: { new: <T>(x: T, y?: T) => C<T>; }): any; }
 >x : I<string>
 
 function foo14(x: typeof b); // ok
->foo14 : { (x: I<string>): any; (x: typeof b): any; }
->x : { "new"<T>(x: T, y?: T): C<T>; }
->b : { "new"<T>(x: T, y?: T): C<T>; }
+>foo14 : { (x: I<string>): any; (x: { new: <T>(x: T, y?: T) => C<T>; }): any; }
+>x : { new: <T>(x: T, y?: T) => C<T>; }
 
 function foo14(x: any) { }
->foo14 : { (x: I<string>): any; (x: typeof b): any; }
+>foo14 : { (x: I<string>): any; (x: { new: <T>(x: T, y?: T) => C<T>; }): any; }
 >x : any
 
