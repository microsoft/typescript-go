--- old.typeParameterAsTypeArgument.types
+++ new.typeParameterAsTypeArgument.types
@@= skipped -4, +4 lines =@@
 
 function foo<T, U>(x: T, y: U) {
 >foo : <T, U>(x: T, y: U) => C<U, T>
->    : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^^^^^^
+>T : T
+>U : U
 >x : T
->  : ^
 >y : U
->  : ^
 
     foo<U, U>(y, y);
 >foo<U, U>(y, y) : C<U, U>
->                : ^^^^^^^
 >foo : <T, U>(x: T, y: U) => C<U, T>
->    : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^^^^^^
 >y : U
->  : ^
 >y : U
->  : ^
 
     return new C<U,T>();
 >new C<U,T>() : C<U, T>
->             : ^^^^^^^
 >C : typeof C
->  : ^^^^^^^^
 }
 
 class C<T, U> {
 >C : C<T, U>
->  : ^^^^^^^
+>T : T
+>U : U
 
     x: T;
 >x : T
->  : ^
 }
 
 interface I<T, U> {
+>I : I<T, U>
+>T : T
+>U : U
+
     x: C<U, T>;
 >x : C<U, T>
->  : ^^^^^^^
 }
 
 //function foo<T, U extends T>(x: T, y: U) {
