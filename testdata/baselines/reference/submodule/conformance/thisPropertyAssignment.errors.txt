a.js(8,6): error TS7017: Element implicitly has an 'any' type because type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }' has no index signature.
a.js(9,6): error TS7017: Element implicitly has an 'any' type because type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }' has no index signature.
a.js(10,1): error TS7053: Element implicitly has an 'any' type because expression of type '"y"' can't be used to index type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }'.
  Property 'y' does not exist on type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }'.
a.js(11,1): error TS7053: Element implicitly has an 'any' type because expression of type '"y"' can't be used to index type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }'.
  Property 'y' does not exist on type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }'.
a.js(15,3): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
a.js(16,3): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
a.js(17,3): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
a.js(18,3): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
a.js(21,11): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.


==== a.js (9 errors) ====
    // This test is asserting that a single property/element access
    // on `this` is a special assignment declaration, but chaining
    // off that does not create additional declarations. I’m not sure
    // if it needs to be that way in JavaScript; the test simply
    // ensures no accidental changes were introduced while allowing
    // element access assignments to create declarations.
    
    this.x = {};
         ~
!!! error TS7017: Element implicitly has an 'any' type because type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }' has no index signature.
    this.x.y = {};
         ~
!!! error TS7017: Element implicitly has an 'any' type because type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }' has no index signature.
    this["y"] = {};
    ~~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type '"y"' can't be used to index type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }'.
!!! error TS7053:   Property 'y' does not exist on type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }'.
    this["y"]["z"] = {};
    ~~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type '"y"' can't be used to index type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }'.
!!! error TS7053:   Property 'y' does not exist on type '{ NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number | undefined) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions | undefined): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect | null | undefined, timeline?: AnimationTimeline | null | undefined): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit | undefined): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit | undefined): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions | undefined): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions | undefined): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions | undefined): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[] | undefined, options?: BlobPropertyBag | undefined): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions | undefined): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish | undefined): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit | undefined): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue | undefined): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue | null | undefined): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions | undefined): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions | undefined): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit | undefined): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions | undefined): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit | undefined): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string | undefined): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit | undefined): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions | undefined): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit | undefined): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions | undefined): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string | undefined, name?: string | undefined): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[] | undefined): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[] | undefined): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit | undefined) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; SVGPoint: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit | undefined) => DOMPoint; }; DOMPointReadOnly: { new (x?: number | undefined, y?: number | undefined, z?: number | undefined, w?: number | undefined): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit | undefined) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit | undefined, p2?: DOMPointInit | undefined, p3?: DOMPointInit | undefined, p4?: DOMPointInit | undefined): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit | undefined) => DOMQuad; fromRect: (other?: DOMRectInit | undefined) => DOMQuad; }; DOMRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; SVGRect: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit | undefined) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit | undefined) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions | undefined): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit | undefined): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit | undefined): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions | undefined): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit | undefined): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions | undefined): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit | undefined): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit | undefined): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit | undefined): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag | undefined): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit | undefined): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors | undefined): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit | undefined): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement | undefined, submitter?: HTMLElement | null | undefined): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions | undefined): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit | undefined): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean | undefined, upperOpen?: boolean | undefined) => IDBKeyRange; lowerBound: (lower: any, open?: boolean | undefined) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean | undefined) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit | undefined): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit | undefined): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit | undefined): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions | undefined): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit | undefined): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit | undefined): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit | undefined): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit | undefined): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit | undefined): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions | undefined): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions | undefined): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T> | undefined): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit | undefined): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions | undefined): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback | undefined) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions | undefined): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string | undefined): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit | undefined): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions | undefined): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D | undefined): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit | undefined): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit | undefined): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions | undefined): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions | undefined): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit | undefined): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit | undefined): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit | undefined): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit | undefined): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string | undefined): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit | undefined): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration | undefined): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit | undefined): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[] | undefined): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities | null; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number | undefined; } | undefined): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R> | undefined, strategy?: QueuingStrategy<R> | undefined): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions | undefined): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit | undefined): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit | null | undefined, init?: ResponseInit | undefined): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit | undefined) => Response; redirect: (url: string | URL, status?: number | undefined) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit | undefined): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions | undefined): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string | undefined): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions | undefined): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit | undefined): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit | undefined): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string | undefined): Text; prototype: Text; }; TextDecoder: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string | undefined, options?: TextDecoderOptions | undefined): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit | undefined): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit | undefined): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit | undefined): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O> | undefined, writableStrategy?: QueuingStrategy<I> | undefined, readableStrategy?: QueuingStrategy<O> | undefined): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit | undefined): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit | undefined): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL | undefined): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL | undefined) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL | undefined) => URL | null; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams | undefined): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit | undefined): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit | undefined): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions | undefined): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit | undefined): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[] | undefined): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions | undefined): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string | undefined, options?: WebTransportErrorOptions | undefined): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit | undefined): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions | undefined): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W> | undefined, strategy?: QueuingStrategy<W> | undefined): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string | undefined): CompileError; new (message?: string | undefined): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T] | undefined): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports | undefined): Instance; prototype: Instance; }; LinkError: { (message?: string | undefined): LinkError; new (message?: string | undefined): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string | undefined): RuntimeError; new (message?: string | undefined): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports | undefined): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports | undefined): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports | undefined) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string | undefined) => HTMLAudioElement; Image: new (width?: number | undefined, height?: number | undefined) => HTMLImageElement; Option: new (text?: string | undefined, value?: string | undefined, defaultSelected?: boolean | undefined, selected?: boolean | undefined) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event | undefined; external: External; frameElement: Element | null; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any | null; ondeviceorientation: (ev: DeviceOrientationEvent) => any | null; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any | null; onorientationchange: (ev: Event) => any | null; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window | null; visualViewport: VisualViewport | null; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string | undefined) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string | null | undefined) => CSSStyleDeclaration; getSelection: () => Selection | null; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL | undefined, target?: string | undefined, features?: string | undefined) => Window | null; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[] | undefined): void; (message: any, options?: WindowPostMessageOptions | undefined): void; }; print: () => void; prompt: (message?: string | undefined, _default?: string | undefined) => string | null; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any | null; onanimationcancel: (ev: AnimationEvent) => any | null; onanimationend: (ev: AnimationEvent) => any | null; onanimationiteration: (ev: AnimationEvent) => any | null; onanimationstart: (ev: AnimationEvent) => any | null; onauxclick: (ev: MouseEvent) => any | null; onbeforeinput: (ev: InputEvent) => any | null; onbeforetoggle: (ev: Event) => any | null; onblur: (ev: FocusEvent) => any | null; oncancel: (ev: Event) => any | null; oncanplay: (ev: Event) => any | null; oncanplaythrough: (ev: Event) => any | null; onchange: (ev: Event) => any | null; onclick: (ev: MouseEvent) => any | null; onclose: (ev: Event) => any | null; oncontextlost: (ev: Event) => any | null; oncontextmenu: (ev: MouseEvent) => any | null; oncontextrestored: (ev: Event) => any | null; oncopy: (ev: ClipboardEvent) => any | null; oncuechange: (ev: Event) => any | null; oncut: (ev: ClipboardEvent) => any | null; ondblclick: (ev: MouseEvent) => any | null; ondrag: (ev: DragEvent) => any | null; ondragend: (ev: DragEvent) => any | null; ondragenter: (ev: DragEvent) => any | null; ondragleave: (ev: DragEvent) => any | null; ondragover: (ev: DragEvent) => any | null; ondragstart: (ev: DragEvent) => any | null; ondrop: (ev: DragEvent) => any | null; ondurationchange: (ev: Event) => any | null; onemptied: (ev: Event) => any | null; onended: (ev: Event) => any | null; onerror: OnErrorEventHandler; onfocus: (ev: FocusEvent) => any | null; onformdata: (ev: FormDataEvent) => any | null; ongotpointercapture: (ev: PointerEvent) => any | null; oninput: (ev: Event) => any | null; oninvalid: (ev: Event) => any | null; onkeydown: (ev: KeyboardEvent) => any | null; onkeypress: (ev: KeyboardEvent) => any | null; onkeyup: (ev: KeyboardEvent) => any | null; onload: (ev: Event) => any | null; onloadeddata: (ev: Event) => any | null; onloadedmetadata: (ev: Event) => any | null; onloadstart: (ev: Event) => any | null; onlostpointercapture: (ev: PointerEvent) => any | null; onmousedown: (ev: MouseEvent) => any | null; onmouseenter: (ev: MouseEvent) => any | null; onmouseleave: (ev: MouseEvent) => any | null; onmousemove: (ev: MouseEvent) => any | null; onmouseout: (ev: MouseEvent) => any | null; onmouseover: (ev: MouseEvent) => any | null; onmouseup: (ev: MouseEvent) => any | null; onpaste: (ev: ClipboardEvent) => any | null; onpause: (ev: Event) => any | null; onplay: (ev: Event) => any | null; onplaying: (ev: Event) => any | null; onpointercancel: (ev: PointerEvent) => any | null; onpointerdown: (ev: PointerEvent) => any | null; onpointerenter: (ev: PointerEvent) => any | null; onpointerleave: (ev: PointerEvent) => any | null; onpointermove: (ev: PointerEvent) => any | null; onpointerout: (ev: PointerEvent) => any | null; onpointerover: (ev: PointerEvent) => any | null; onpointerup: (ev: PointerEvent) => any | null; onprogress: (ev: ProgressEvent<EventTarget>) => any | null; onratechange: (ev: Event) => any | null; onreset: (ev: Event) => any | null; onresize: (ev: UIEvent) => any | null; onscroll: (ev: Event) => any | null; onscrollend: (ev: Event) => any | null; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any | null; onseeked: (ev: Event) => any | null; onseeking: (ev: Event) => any | null; onselect: (ev: Event) => any | null; onselectionchange: (ev: Event) => any | null; onselectstart: (ev: Event) => any | null; onslotchange: (ev: Event) => any | null; onstalled: (ev: Event) => any | null; onsubmit: (ev: SubmitEvent) => any | null; onsuspend: (ev: Event) => any | null; ontimeupdate: (ev: Event) => any | null; ontoggle: (ev: Event) => any | null; ontouchcancel: (ev: TouchEvent) => any | null | undefined; ontouchend: (ev: TouchEvent) => any | null | undefined; ontouchmove: (ev: TouchEvent) => any | null | undefined; ontouchstart: (ev: TouchEvent) => any | null | undefined; ontransitioncancel: (ev: TransitionEvent) => any | null; ontransitionend: (ev: TransitionEvent) => any | null; ontransitionrun: (ev: TransitionEvent) => any | null; ontransitionstart: (ev: TransitionEvent) => any | null; onvolumechange: (ev: Event) => any | null; onwaiting: (ev: Event) => any | null; onwebkitanimationend: (ev: Event) => any | null; onwebkitanimationiteration: (ev: Event) => any | null; onwebkitanimationstart: (ev: Event) => any | null; onwebkittransitionend: (ev: Event) => any | null; onwheel: (ev: WheelEvent) => any | null; onafterprint: (ev: Event) => any | null; onbeforeprint: (ev: Event) => any | null; onbeforeunload: (ev: BeforeUnloadEvent) => any | null; ongamepadconnected: (ev: GamepadEvent) => any | null; ongamepaddisconnected: (ev: GamepadEvent) => any | null; onhashchange: (ev: HashChangeEvent) => any | null; onlanguagechange: (ev: Event) => any | null; onmessage: (ev: MessageEvent<any>) => any | null; onmessageerror: (ev: MessageEvent<any>) => any | null; onoffline: (ev: Event) => any | null; ononline: (ev: Event) => any | null; onpagehide: (ev: PageTransitionEvent) => any | null; onpageshow: (ev: PageTransitionEvent) => any | null; onpopstate: (ev: PopStateEvent) => any | null; onrejectionhandled: (ev: PromiseRejectionEvent) => any | null; onstorage: (ev: StorageEvent) => any | null; onunhandledrejection: (ev: PromiseRejectionEvent) => any | null; onunload: (ev: Event) => any | null; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number | undefined) => void; clearTimeout: (id: number | undefined) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions | undefined): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions | undefined) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number | undefined) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string | undefined) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string | undefined, strPrefix?: string | undefined) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; F: () => void; readonly globalThis: ???; undefined: undefined; }'.
    
    /** @constructor */
    function F() {
      this.a = {};
      ~~~~
!!! error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
      this.a.b = {};
      ~~~~
!!! error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
      this["b"] = {};
      ~~~~
!!! error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
      this["b"]["c"] = {};
      ~~~~
!!! error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
    }
    
    const f = new F();
              ~~~~~~~
!!! error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
    f.a;
    f.b;
    