--- old.intersectionsAndEmptyObjects.errors.txt
+++ new.intersectionsAndEmptyObjects.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+error TS2318: Cannot find global type 'Array'.
+error TS2318: Cannot find global type 'Function'.
+error TS2318: Cannot find global type 'IArguments'.
+error TS2318: Cannot find global type 'Promise'.
+error TS2318: Cannot find global type 'RegExp'.
+error TS2318: Cannot find global type 'String'.
+error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+intersectionsAndEmptyObjects.ts(34,15): error TS2304: Cannot find name 'Object'.
+intersectionsAndEmptyObjects.ts(85,29): error TS2583: Cannot find name 'Promise'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
+intersectionsAndEmptyObjects.ts(86,6): error TS2711: A dynamic import call returns a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.
+
+
+!!! error TS2318: Cannot find global type 'Array'.
+!!! error TS2318: Cannot find global type 'Function'.
+!!! error TS2318: Cannot find global type 'IArguments'.
+!!! error TS2318: Cannot find global type 'Promise'.
+!!! error TS2318: Cannot find global type 'RegExp'.
+!!! error TS2318: Cannot find global type 'String'.
+!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+==== intersectionsAndEmptyObjects.ts (3 errors) ====
+    // Empty object type literals are removed from intersections types
+    // that contain other object types
+    
+    type A = { a: number };
+    type B = { b: string };
+    type C = {};
+    
+    let x01: A & B;
+    let x02: A & C;
+    let x03: B & C;
+    let x04: A & B & C;
+    let x05: string & C;
+    let x06: C & string;
+    let x07: C;
+    let x08: C & {};
+    let x09: {} & A & {} & B & {} & C & {};
+    
+    interface D {}
+    interface E {}
+    
+    let x10: A & D;
+    let x11: C & D;
+    let x12: A & B & C & D;
+    let x13: D & E;
+    let x14: A & B & C & D & E;
+    
+    // Repro from #20225
+    
+    type Dictionary = { [name: string]: string };
+    
+    const intersectDictionaries = <F1 extends Dictionary, F2 extends Dictionary>(
+      d1: F1,
+      d2: F2,
+    ): F1 & F2 => Object.assign({}, d1, d2);
+                  ~~~~~~
+!!! error TS2304: Cannot find name 'Object'.
+    
+    const testDictionary = <T extends Dictionary>(_value: T) => { };
+    
+    const d1 = {};
+    testDictionary(d1);
+    const d2 = intersectDictionaries(d1, d1);
+    testDictionary(d2);
+    
+    const d3 = {
+      s: '',
+    };
+    testDictionary(d3);
+    const d4 = intersectDictionaries(d1, d3);
+    testDictionary(d4);
+    const d5 = intersectDictionaries(d3, d1);
+    testDictionary(d5);
+    const d6 = intersectDictionaries(d3, d3);
+    testDictionary(d6);
+    
+    // Repro from #27044
+    
+    type choices<IChoiceList extends {
+        [key: string]: boolean;
+    }> = IChoiceList & {
+        shoes:boolean;
+        food:boolean;
+    };
+    
+    type IMyChoiceList = {
+        car: true
+    };
+    
+    type IUnknownChoiceList = {};
+    
+    var defaultChoices: choices<{}>;
+    var defaultChoicesAndEmpty: choices<{} & {}>;
+    
+    var myChoices: choices<IMyChoiceList>;
+    var myChoicesAndEmpty: choices<IMyChoiceList & {}>;
+    
+    var unknownChoices: choices<IUnknownChoiceList>;
+    var unknownChoicesAndEmpty: choices<IUnknownChoiceList & {}>;
+    
+    // Repro from #38672
+    
+    type Foo1 = { x: string } & { [x: number]: Foo1 };
+    type Foo2 = { x: string } & { [K in number]: Foo2 };
+    
+    // Repro from #40239
+    
+    declare function mock<M>(_: Promise<M>): {} & M;
+                                ~~~~~~~
+!!! error TS2583: Cannot find name 'Promise'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
+    mock(import('./ex'))
+         ~~~~~~~~~~~~~~
+!!! error TS2711: A dynamic import call returns a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.
+    
+==== ex.d.ts (0 errors) ====
+    export {}
+    
