//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsTypeAliases.ts] ////

=== index.js ===

export {}; // flag file as module
/**
 * @typedef {string | number | symbol} PropName 
 */

/**
 * Callback
 *
 * @callback NumberToStringCb
 * @param {number} a
 * @returns {string}
 */

/**
 * @template T
 * @typedef {T & {name: string}} MixinName 
 */

/**
 * Identity function
 *
 * @template T
 * @callback Identity
 * @param {T} x
 * @returns {T}
 */

=== mixed.js ===
/**
 * @typedef {{x: string} | number | LocalThing | ExportedThing} SomeType
 */
/**
 * @param {number} x
 * @returns {SomeType}
 */
function doTheThing(x) {
>doTheThing : (x: number) => number | ExportedThing | LocalThing | { x: string; }
>x : number

    return {x: ""+x};
>{x: ""+x} : { x: string; }
>x : string
>""+x : string
>"" : ""
>x : number
}
class ExportedThing {
>ExportedThing : ExportedThing

    z = "ok"
>z : string
>"ok" : "ok"
}
module.exports = {
>module.exports = {    doTheThing,    ExportedThing,} : { doTheThing: (x: number) => number | ExportedThing | LocalThing | { x: string; }; ExportedThing: typeof ExportedThing; }
>module.exports : { doTheThing: (x: number) => number | ExportedThing | LocalThing | { x: string; }; ExportedThing: typeof ExportedThing; }
>module : { "export=": { doTheThing: (x: number) => number | ExportedThing | LocalThing | { x: string; }; ExportedThing: typeof ExportedThing; }; }
>exports : { doTheThing: (x: number) => number | ExportedThing | LocalThing | { x: string; }; ExportedThing: typeof ExportedThing; }
>{    doTheThing,    ExportedThing,} : { doTheThing: (x: number) => number | ExportedThing | LocalThing | { x: string; }; ExportedThing: typeof ExportedThing; }

    doTheThing,
>doTheThing : (x: number) => number | ExportedThing | LocalThing | { x: string; }

    ExportedThing,
>ExportedThing : typeof ExportedThing

};
class LocalThing {
>LocalThing : LocalThing

    y = "ok"
>y : string
>"ok" : "ok"
}

