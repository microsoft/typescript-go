--- old.covariantCallbacks.types
+++ new.covariantCallbacks.types
@@= skipped -3, +3 lines =@@
 // Test that callback parameters are related covariantly
 
 interface P<T> {
+>P : P<T>
+>T : T
+
     then(cb: (value: T) => void): void;
 >then : (cb: (value: T) => void) => void
 >cb : (value: T) => void
@@= skipped -8, +11 lines =@@
 };
 
 interface A { a: string }
+>A : A
 >a : string
 
 interface B extends A { b: string }
+>B : B
 >b : string
 
 function f1(a: P<A>, b: P<B>) {
@@= skipped -38, +40 lines =@@
 }
 
 interface AList1 {
+>AList1 : AList1
+
     forEach(cb: (item: A) => void): void;
 >forEach : (cb: (item: A) => void) => void
 >cb : (item: A) => void
@@= skipped -7, +9 lines =@@
 }
 
 interface BList1 {
+>BList1 : BList1
+
     forEach(cb: (item: B) => void): void;
 >forEach : (cb: (item: B) => void) => void
 >cb : (item: B) => void
@@= skipped -23, +25 lines =@@
 }
 
 interface AList2 {
+>AList2 : AList2
+
     forEach(cb: (item: A) => boolean): void;
 >forEach : (cb: (item: A) => boolean) => void
 >cb : (item: A) => boolean
@@= skipped -7, +9 lines =@@
 }
 
 interface BList2 {
+>BList2 : BList2
+
     forEach(cb: (item: A) => void): void;
 >forEach : (cb: (item: A) => void) => void
 >cb : (item: A) => void
@@= skipped -23, +25 lines =@@
 }
 
 interface AList3 {
+>AList3 : AList3
+
     forEach(cb: (item: A) => void): void;
 >forEach : (cb: (item: A) => void) => void
 >cb : (item: A) => void
@@= skipped -7, +9 lines =@@
 }
 
 interface BList3 {
+>BList3 : BList3
+
     forEach(cb: (item: A, context: any) => void): void;
 >forEach : (cb: (item: A, context: any) => void) => void
 >cb : (item: A, context: any) => void
@@= skipped -24, +26 lines =@@
 }
 
 interface AList4 {
+>AList4 : AList4
+
     forEach(cb: (item: A) => A): void;
 >forEach : (cb: (item: A) => A) => void
 >cb : (item: A) => A
@@= skipped -7, +9 lines =@@
 }
 
 interface BList4 {
+>BList4 : BList4
+
     forEach(cb: (item: B) => B): void;
 >forEach : (cb: (item: B) => B) => void
 >cb : (item: B) => B
@@= skipped -26, +28 lines =@@
 
 type Bivar<T> = { set(value: T): void }
 >Bivar : Bivar<T>
+>T : T
 >set : (value: T) => void
 >value : T
 
@@= skipped -39, +40 lines =@@
 
 type Bivar1<T> = { set(value: T): void }
 >Bivar1 : Bivar1<T>
+>T : T
 >set : (value: T) => void
 >value : T
 
 type Bivar2<T> = { set(value: T): void }
 >Bivar2 : Bivar2<T>
+>T : T
 >set : (value: T) => void
 >value : T
 
@@= skipped -28, +30 lines =@@
 
 type SetLike<T> = { set(value: T): void, get(): T }
 >SetLike : SetLike<T>
+>T : T
 >set : (value: T) => void
 >value : T
 >get : () => T
@@= skipped -24, +25 lines =@@
 
 type SetLike1<T> = { set(value: T): void, get(): T }
 >SetLike1 : SetLike1<T>
+>T : T
 >set : (value: T) => void
 >value : T
 >get : () => T
 
 type SetLike2<T> = { set(value: T): void, get(): T }
 >SetLike2 : SetLike2<T>
+>T : T
 >set : (value: T) => void
 >value : T
 >get : () => T
