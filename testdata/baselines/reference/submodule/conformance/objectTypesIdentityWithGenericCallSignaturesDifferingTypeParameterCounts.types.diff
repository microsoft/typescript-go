--- old.objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterCounts.types
+++ new.objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterCounts.types
@@= skipped -7, +7 lines =@@
 
     foo<T>(x: T): T { return null; }
 >foo : <T>(x: T) => T
+>T : T
 >x : T
 }
 
 class B<U, V> {
 >B : B<U, V>
+>U : U
+>V : V
 
     foo(x: U): U { return null; }
 >foo : (x: U) => U
@@= skipped -13, +16 lines =@@
 
 class C<V, W, X> {
 >C : C<V, W, X>
+>V : V
+>W : W
+>X : X
 
     foo(x: V): V { return null; }
 >foo : (x: V) => V
@@= skipped -7, +10 lines =@@
 }
 
 interface I<X, Y, Z, A> {
+>I : I<X, Y, Z, A>
+>X : X
+>Y : Y
+>Z : Z
+>A : A
+
     foo(x: X): X;
 >foo : (x: X) => X
 >x : X
 }
 
 interface I2 {
+>I2 : I2
+
     foo<Y, Z, A, B>(x: Y): Y;
 >foo : <Y, Z, A, B>(x: Y) => Y
+>Y : Y
+>Z : Z
+>A : A
+>B : B
 >x : Y
 }
 
 var a: { foo<Z, A, B, C, D>(x: Z): Z }
->a : { foo<Z, A, B, C, D>(x: Z): Z; }
+>a : { foo: <Z, A, B, C, D>(x: Z) => Z; }
 >foo : <Z, A, B, C, D>(x: Z) => Z
+>Z : Z
+>A : A
+>B : B
+>C : C
+>D : D
 >x : Z
 
 var b = { foo<A, B, C, D, E, F>(x: A) { return x; } };
->b : { foo<A, B, C, D, E, F>(x: A): A; }
->{ foo<A, B, C, D, E, F>(x: A) { return x; } } : { foo<A, B, C, D, E, F>(x: A): A; }
+>b : { foo: <A, B, C, D, E, F>(x: A) => A; }
+>{ foo<A, B, C, D, E, F>(x: A) { return x; } } : { foo: <A, B, C, D, E, F>(x: A) => A; }
 >foo : <A, B, C, D, E, F>(x: A) => A
+>A : A
+>B : B
+>C : C
+>D : D
+>E : E
+>F : F
 >x : A
 >x : A
 
@@= skipped -72, +95 lines =@@
 >x : any
 
 function foo3(x: typeof a);
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
->x : { foo<Z, A, B, C, D>(x: Z): Z; }
->a : { foo<Z, A, B, C, D>(x: Z): Z; }
+>foo3 : { (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
+>x : { foo: <Z, A, B, C, D>(x: Z) => Z; }
 
 function foo3(x: typeof a); // error
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
->x : { foo<Z, A, B, C, D>(x: Z): Z; }
->a : { foo<Z, A, B, C, D>(x: Z): Z; }
+>foo3 : { (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
+>x : { foo: <Z, A, B, C, D>(x: Z) => Z; }
 
 function foo3(x: any) { }
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
 >x : any
 
 function foo4(x: typeof b);
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { foo<A, B, C, D, E, F>(x: A): A; }
->b : { foo<A, B, C, D, E, F>(x: A): A; }
+>foo4 : { (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; }
+>x : { foo: <A, B, C, D, E, F>(x: A) => A; }
 
 function foo4(x: typeof b); // error
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { foo<A, B, C, D, E, F>(x: A): A; }
->b : { foo<A, B, C, D, E, F>(x: A): A; }
+>foo4 : { (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; }
+>x : { foo: <A, B, C, D, E, F>(x: A) => A; }
 
 function foo4(x: any) { }
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
+>foo4 : { (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; }
 >x : any
 
 function foo5(x: A);
@@= skipped -64, +60 lines =@@
 >x : any
 
 function foo7(x: A);
->foo7 : { (x: A): any; (x: typeof a): any; }
+>foo7 : { (x: A): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
 >x : A
 
 function foo7(x: typeof a); // no error, bug?
->foo7 : { (x: A): any; (x: typeof a): any; }
->x : { foo<Z, A, B, C, D>(x: Z): Z; }
->a : { foo<Z, A, B, C, D>(x: Z): Z; }
+>foo7 : { (x: A): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
+>x : { foo: <Z, A, B, C, D>(x: Z) => Z; }
 
 function foo7(x: any) { }
->foo7 : { (x: A): any; (x: typeof a): any; }
+>foo7 : { (x: A): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
 >x : any
 
 function foo8(x: B<string, string>);
@@= skipped -37, +36 lines =@@
 >x : any
 
 function foo10(x: B<string, boolean>);
->foo10 : { (x: B<string, boolean>): any; (x: typeof a): any; }
+>foo10 : { (x: B<string, boolean>): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
 >x : B<string, boolean>
 
 function foo10(x: typeof a); // ok
->foo10 : { (x: B<string, boolean>): any; (x: typeof a): any; }
->x : { foo<Z, A, B, C, D>(x: Z): Z; }
->a : { foo<Z, A, B, C, D>(x: Z): Z; }
+>foo10 : { (x: B<string, boolean>): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
+>x : { foo: <Z, A, B, C, D>(x: Z) => Z; }
 
 function foo10(x: any) { }
->foo10 : { (x: B<string, boolean>): any; (x: typeof a): any; }
+>foo10 : { (x: B<string, boolean>): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
 >x : any
 
 function foo11(x: B<string, boolean>);
->foo11 : { (x: B<string, boolean>): any; (x: typeof b): any; }
+>foo11 : { (x: B<string, boolean>): any; (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; }
 >x : B<string, boolean>
 
 function foo11(x: typeof b); // ok
->foo11 : { (x: B<string, boolean>): any; (x: typeof b): any; }
->x : { foo<A, B, C, D, E, F>(x: A): A; }
->b : { foo<A, B, C, D, E, F>(x: A): A; }
+>foo11 : { (x: B<string, boolean>): any; (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; }
+>x : { foo: <A, B, C, D, E, F>(x: A) => A; }
 
 function foo11(x: any) { }
->foo11 : { (x: B<string, boolean>): any; (x: typeof b): any; }
+>foo11 : { (x: B<string, boolean>): any; (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; }
 >x : any
 
 function foo12(x: I<B<string, number>, number, Date, string>);
@@= skipped -50, +48 lines =@@
 >x : any
 
 function foo13(x: I<string, Date, RegExp, Date>);
->foo13 : { (x: I<string, Date, RegExp, Date>): any; (x: typeof a): any; }
+>foo13 : { (x: I<string, Date, RegExp, Date>): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
 >x : I<string, Date, RegExp, Date>
 
 function foo13(x: typeof a); // ok
->foo13 : { (x: I<string, Date, RegExp, Date>): any; (x: typeof a): any; }
->x : { foo<Z, A, B, C, D>(x: Z): Z; }
->a : { foo<Z, A, B, C, D>(x: Z): Z; }
+>foo13 : { (x: I<string, Date, RegExp, Date>): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
+>x : { foo: <Z, A, B, C, D>(x: Z) => Z; }
 
 function foo13(x: any) { }
->foo13 : { (x: I<string, Date, RegExp, Date>): any; (x: typeof a): any; }
+>foo13 : { (x: I<string, Date, RegExp, Date>): any; (x: { foo: <Z, A, B, C, D>(x: Z) => Z; }): any; }
 >x : any
 
 function foo14(x: I<string, Date, RegExp, boolean>);
->foo14 : { (x: I<string, Date, RegExp, boolean>): any; (x: typeof b): any; }
+>foo14 : { (x: I<string, Date, RegExp, boolean>): any; (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; }
 >x : I<string, Date, RegExp, boolean>
 
 function foo14(x: typeof b); // ok
->foo14 : { (x: I<string, Date, RegExp, boolean>): any; (x: typeof b): any; }
->x : { foo<A, B, C, D, E, F>(x: A): A; }
->b : { foo<A, B, C, D, E, F>(x: A): A; }
+>foo14 : { (x: I<string, Date, RegExp, boolean>): any; (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; }
+>x : { foo: <A, B, C, D, E, F>(x: A) => A; }
 
 function foo14(x: any) { }
->foo14 : { (x: I<string, Date, RegExp, boolean>): any; (x: typeof b): any; }
+>foo14 : { (x: I<string, Date, RegExp, boolean>): any; (x: { foo: <A, B, C, D, E, F>(x: A) => A; }): any; }
 >x : any
 
 function foo15(x: I2);
