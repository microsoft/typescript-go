--- old.classExpression3.symbols
+++ new.classExpression3.symbols
@@= skipped -2, +2 lines =@@
 === classExpression3.ts ===
 let C = class extends class extends class { a = 1 } { b = 2 } { c = 3 };
 >C : Symbol(C, Decl(classExpression3.ts, 0, 3))
->a : Symbol((Anonymous class).a, Decl(classExpression3.ts, 0, 43))
->b : Symbol((Anonymous class).b, Decl(classExpression3.ts, 0, 53))
->c : Symbol(C.c, Decl(classExpression3.ts, 0, 63))
+>a : Symbol(a, Decl(classExpression3.ts, 0, 43))
+>b : Symbol(b, Decl(classExpression3.ts, 0, 53))
+>c : Symbol(c, Decl(classExpression3.ts, 0, 63))
 
 let c = new C();
 >c : Symbol(c, Decl(classExpression3.ts, 1, 3))
 >C : Symbol(C, Decl(classExpression3.ts, 0, 3))
 
 c.a;
->c.a : Symbol((Anonymous class).a, Decl(classExpression3.ts, 0, 43))
+>c.a : Symbol(a, Decl(classExpression3.ts, 0, 43))
 >c : Symbol(c, Decl(classExpression3.ts, 1, 3))
->a : Symbol((Anonymous class).a, Decl(classExpression3.ts, 0, 43))
+>a : Symbol(a, Decl(classExpression3.ts, 0, 43))
 
 c.b;
->c.b : Symbol((Anonymous class).b, Decl(classExpression3.ts, 0, 53))
+>c.b : Symbol(b, Decl(classExpression3.ts, 0, 53))
 >c : Symbol(c, Decl(classExpression3.ts, 1, 3))
->b : Symbol((Anonymous class).b, Decl(classExpression3.ts, 0, 53))
+>b : Symbol(b, Decl(classExpression3.ts, 0, 53))
 
 c.c;
->c.c : Symbol(C.c, Decl(classExpression3.ts, 0, 63))
+>c.c : Symbol(c, Decl(classExpression3.ts, 0, 63))
 >c : Symbol(c, Decl(classExpression3.ts, 1, 3))
->c : Symbol(C.c, Decl(classExpression3.ts, 0, 63))
+>c : Symbol(c, Decl(classExpression3.ts, 0, 63))
 
