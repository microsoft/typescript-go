--- old.privateProtectedMembersAreNotAccessibleDestructuring.symbols
+++ new.privateProtectedMembersAreNotAccessibleDestructuring.symbols
@@= skipped -4, +4 lines =@@
 >K : Symbol(K, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 0, 0))
 
     private priv;
->priv : Symbol(K.priv, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 0, 9))
+>priv : Symbol(priv, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 0, 9))
 
     protected prot;
->prot : Symbol(K.prot, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 1, 17))
+>prot : Symbol(prot, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 1, 17))
 
     private privateMethod() { }
->privateMethod : Symbol(K.privateMethod, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 2, 19))
+>privateMethod : Symbol(privateMethod, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 2, 19))
 
     m() {
->m : Symbol(K.m, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 3, 31))
+>m : Symbol(m, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 3, 31))
 
         let { priv: a, prot: b } = this; // ok
->priv : Symbol(K.priv, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 0, 9))
+>priv : Symbol(priv, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 0, 9))
 >a : Symbol(a, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 5, 13))
->prot : Symbol(K.prot, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 1, 17))
+>prot : Symbol(prot, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 1, 17))
 >b : Symbol(b, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 5, 22))
 >this : Symbol(K, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 0, 0))
 
@@= skipped -29, +29 lines =@@
 >K : Symbol(K, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 0, 0))
 
     m2() {
->m2 : Symbol(C.m2, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 9, 19))
+>m2 : Symbol(m2, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 9, 19))
 
         let { priv: a } = this; // error
->priv : Symbol(K.priv, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 0, 9))
+>priv : Symbol(priv, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 0, 9))
 >a : Symbol(a, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 11, 13))
 >this : Symbol(C, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 8, 1))
 
         let { prot: b } = this; // ok
->prot : Symbol(K.prot, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 1, 17))
+>prot : Symbol(prot, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 1, 17))
 >b : Symbol(b, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 12, 13))
 >this : Symbol(C, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 8, 1))
     }
@@= skipped -30, +30 lines =@@
 >k : Symbol(k, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 15, 3))
 
 let { priv: a, prot: b, privateMethod: pm } = k; // error
->priv : Symbol(K.priv, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 0, 9))
+>priv : Symbol(priv, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 0, 9))
 >a : Symbol(a, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 19, 5))
->prot : Symbol(K.prot, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 1, 17))
+>prot : Symbol(prot, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 1, 17))
 >b : Symbol(b, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 19, 14))
->privateMethod : Symbol(K.privateMethod, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 2, 19))
+>privateMethod : Symbol(privateMethod, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 2, 19))
 >pm : Symbol(pm, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 19, 23))
 >k : Symbol(k, Decl(privateProtectedMembersAreNotAccessibleDestructuring.ts, 15, 3))
 
