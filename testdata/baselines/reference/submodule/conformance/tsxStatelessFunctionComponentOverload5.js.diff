--- old.tsxStatelessFunctionComponentOverload5.js
+++ new.tsxStatelessFunctionComponentOverload5.js
@@= skipped -58, +58 lines =@@
 const b8 = <MainButton data-format />;  // incorrect type for specified hyphanated name

 //// [file.jsx]
-define(["require", "exports", "react"], function (require, exports, React) {
-    "use strict";
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.MainButton = MainButton;
-    let obj0 = {
-        to: "world"
-    };
-    let obj1 = {
-        children: "hi",
-        to: "boo"
-    };
-    let obj2 = {
-        onClick: () => { }
-    };
-    let obj3;
-    function MainButton(props) {
-        const linkProps = props;
-        if (linkProps.to) {
-            return this._buildMainLink(props);
-        }
-        return this._buildMainButton(props);
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.MainButton = MainButton;
+const React = require("react");
+let obj0 = {
+    to: "world"
+};
+let obj1 = {
+    children: "hi",
+    to: "boo"
+};
+let obj2 = {
+    onClick: () => { }
+};
+let obj3;
+function MainButton(props) {
+    const linkProps = props;
+    if (linkProps.to) {
+        return this._buildMainLink(props);
     }
-    // Error
-    const b0 = <MainButton to='/some/path' onClick={(e) => { }}>GO</MainButton>; // extra property;
-    const b1 = <MainButton onClick={(e) => { }} {...obj0}>Hello world</MainButton>; // extra property;
-    const b2 = <MainButton {...{ to: "10000" }} {...obj2}/>; // extra property
-    const b3 = <MainButton {...{ to: "10000" }} {...{ onClick: (k) => { } }}/>; // extra property
-    const b4 = <MainButton {...obj3} to/>; // Should error because Incorrect type; but attributes are any so everything is allowed
-    const b5 = <MainButton {...{ onClick(e) { } }} {...obj0}/>; // Spread retain method declaration (see GitHub #13365), so now there is an extra attributes
-    const b6 = <MainButton {...{ onClick(e) { } }} children={10}/>; // incorrect type for optional attribute
-    const b7 = <MainButton {...{ onClick(e) { } }} children="hello" className/>; // incorrect type for optional attribute
-    const b8 = <MainButton data-format/>; // incorrect type for specified hyphanated name
-});
+    return this._buildMainButton(props);
+}
+// Error
+const b0 = <MainButton to='/some/path' onClick={(e) => { }}>GO</MainButton>; // extra property;
+const b1 = <MainButton onClick={(e) => { }} {...obj0}>Hello world</MainButton>; // extra property;
+const b2 = <MainButton {...{ to: "10000" }} {...obj2}/>; // extra property
+const b3 = <MainButton {...{ to: "10000" }} {...{ onClick: (k) => { } }}/>; // extra property
+const b4 = <MainButton {...obj3} to/>; // Should error because Incorrect type; but attributes are any so everything is allowed
+const b5 = <MainButton {...{ onClick(e) { } }} {...obj0}/>; // Spread retain method declaration (see GitHub #13365), so now there is an extra attributes
+const b6 = <MainButton {...{ onClick(e) { } }} children={10}/>; // incorrect type for optional attribute
+const b7 = <MainButton {...{ onClick(e) { } }} children="hello" className/>; // incorrect type for optional attribute
+const b8 = <MainButton data-format/>; // incorrect type for specified hyphanated name