--- old.typeGuardsInConditionalExpression.types
+++ new.typeGuardsInConditionalExpression.types
@@= skipped -8, +8 lines =@@
 // provided the false expression contains no assignments to the variable or parameter.
 
 function foo(x: number | string) {
->foo : (x: number | string) => number
+>foo : (x: string | number) => number
 >x : string | number
 
     return typeof x === "string"
 >typeof x === "string"        ? x.length // string        : x++ : number
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number
 >"string" : "string"
 
@@= skipped -20, +20 lines =@@
 >x : number
 }
 function foo2(x: number | string) {
->foo2 : (x: number | string) => string | number
+>foo2 : (x: string | number) => string | number
 >x : string | number
 
     return typeof x === "string"
 >typeof x === "string"        ? ((x = "hello") && x) // string        : x : string | number
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number
 >"string" : "string"
 
@@= skipped -23, +23 lines =@@
 >x : number
 }
 function foo3(x: number | string) {
->foo3 : (x: number | string) => number
+>foo3 : (x: string | number) => number
 >x : string | number
 
     return typeof x === "string"
 >typeof x === "string"        ? ((x = 10) && x) // number        : x : number
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number
 >"string" : "string"
 
@@= skipped -23, +23 lines =@@
 >x : number
 }
 function foo4(x: number | string) {
->foo4 : (x: number | string) => string | number
+>foo4 : (x: string | number) => string | number
 >x : string | number
 
     return typeof x === "string"
 >typeof x === "string"        ? x // string        : ((x = 10) && x) : string | number
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number
 >"string" : "string"
 
@@= skipped -23, +23 lines =@@
 >x : number
 }
 function foo5(x: number | string) {
->foo5 : (x: number | string) => string
+>foo5 : (x: string | number) => string
 >x : string | number
 
     return typeof x === "string"
 >typeof x === "string"        ? x // string        : ((x = "hello") && x) : string
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number
 >"string" : "string"
 
@@= skipped -23, +23 lines =@@
 >x : string
 }
 function foo6(x: number | string) {
->foo6 : (x: number | string) => string | number
+>foo6 : (x: string | number) => string | number
 >x : string | number
 
     // Modify in both branches
     return typeof x === "string"
 >typeof x === "string"        ? ((x = 10) && x) // number        : ((x = "hello") && x) : string | number
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number
 >"string" : "string"
 
@@= skipped -30, +30 lines =@@
 >x : string
 }
 function foo7(x: number | string | boolean) {
->foo7 : (x: number | string | boolean) => boolean
+>foo7 : (x: string | number | boolean) => boolean
 >x : string | number | boolean
 
     return typeof x === "string"
 >typeof x === "string"        ? x === "hello" // boolean        : typeof x === "boolean"        ? x // boolean        : x == 10 : boolean
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -18, +18 lines =@@
         : typeof x === "boolean"
 >typeof x === "boolean"        ? x // boolean        : x == 10 : boolean
 >typeof x === "boolean" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number | boolean
 >"boolean" : "boolean"
 
@@= skipped -13, +13 lines =@@
 >10 : 10
 }
 function foo8(x: number | string | boolean) {
->foo8 : (x: number | string | boolean) => boolean
+>foo8 : (x: string | number | boolean) => boolean
 >x : string | number | boolean
 
     var b: number | boolean;
@@= skipped -9, +9 lines =@@
     return typeof x === "string"
 >typeof x === "string"        ? x === "hello"        : ((b = x) && //  number | boolean        (typeof x === "boolean"        ? x // boolean        : x == 10)) : boolean
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -21, +21 lines =@@
 >(typeof x === "boolean"        ? x // boolean        : x == 10) : boolean
 >typeof x === "boolean"        ? x // boolean        : x == 10 : boolean
 >typeof x === "boolean" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number | true
 >"boolean" : "boolean"
 
@@= skipped -13, +13 lines =@@
 >10 : 10
 }
 function foo9(x: number | string) {
->foo9 : (x: number | string) => boolean
+>foo9 : (x: string | number) => boolean
 >x : string | number
 
     var y = 10;
@@= skipped -11, +11 lines =@@
     return typeof x === "string"
 >typeof x === "string"        ? ((y = x.length) && x === "hello") // boolean        : x === 10 : boolean
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number
 >"string" : "string"
 
@@= skipped -23, +23 lines =@@
 >10 : 10
 }
 function foo10(x: number | string | boolean) {
->foo10 : (x: number | string | boolean) => string
+>foo10 : (x: string | number | boolean) => string
 >x : string | number | boolean
 
     // Mixing typeguards
@@= skipped -10, +10 lines =@@
     return typeof x === "string"
 >typeof x === "string"        ? x // string        : ((b = x) // x is number | boolean        && typeof x === "number"        && x.toString()) : string
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -18, +18 lines =@@
 
         && typeof x === "number"
 >typeof x === "number" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number | true
 >"number" : "number"
 
@@= skipped -11, +11 lines =@@
 >toString : (radix?: number) => string
 }
 function foo11(x: number | string | boolean) {
->foo11 : (x: number | string | boolean) => string | number
+>foo11 : (x: string | number | boolean) => string | number
 >x : string | number | boolean
 
     // Mixing typeguards
@@= skipped -10, +10 lines =@@
     return typeof x === "string"
 >typeof x === "string"        ? x // string        : ((b = x) // x is number | boolean        && typeof x === "number"        && (x = 10) // assignment to x        && x) : string | number
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -19, +19 lines =@@
 
         && typeof x === "number"
 >typeof x === "number" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number | true
 >"number" : "number"
 
@@= skipped -14, +14 lines =@@
 >x : number
 }
 function foo12(x: number | string | boolean) {
->foo12 : (x: number | string | boolean) => number
+>foo12 : (x: string | number | boolean) => number
 >x : string | number | boolean
 
     // Mixing typeguards
@@= skipped -10, +10 lines =@@
     return typeof x === "string"
 >typeof x === "string"        ? ((x = 10) && x.toString().length) // number        : ((b = x) // x is number | boolean        && typeof x === "number"        && x) : number
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -29, +29 lines =@@
 
         && typeof x === "number"
 >typeof x === "number" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number | true
 >"number" : "number"
 
