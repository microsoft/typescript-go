//// [tests/cases/conformance/jsdoc/typedefOnStatements.ts] ////

=== typedefOnStatements.js ===
/** @typedef {{a: string}} A */
>A : any
>a : string

;
/** @typedef {{ b: string }} B */
>B : any
>b : string

debugger;
/** @typedef {{ c: string }} C */
>C : any
>c : string
{
}
/** @typedef {{ d: string }} D */
>D : any
>d : string

1 + 1;
>1 + 1 : number
>1 : 1
>1 : 1

/** @typedef {{ e: string }} E */
>E : any
>e : string

if (false) {
>false : false
}
/** @typedef {{ f: string }} F */
>F : any
>f : string

do {
} while (false);
>false : false

/** @typedef {{ g: string }} G */
>G : any
>g : string

while (false) {
>false : false
}
/** @typedef {{ h: string }} H */
>H : any
>h : string

for (;; false) {
>false : false
}
/** @typedef {{ i: string }} I */
>I : any
>i : string

for (let i in []) {
>i : string
>[] : never[]
}
/** @typedef {{ j: string }} J */
>J : any
>j : string

break;
/** @typedef {{ k: string }} K */
>K : any
>k : string

for (let k of []) {
>k : never
>[] : never[]
}
/** @typedef {{ l: string }} L */
>L : any
>l : string

continue;
/** @typedef {{ m: string }} M */
>M : any
>m : string

with (name) {
>name : void
}
/** @typedef {{ n: string }} N */
>N : any
>n : string

switch (name) {
>name : void
}

/** @typedef {{ o: string }} O */
>O : any
>o : string

fork: while (false) {
>fork : any
>false : false
}

/** @typedef {{ p: string }} P */
>P : any
>p : string

throw new Error('Unreachable')
>new Error('Unreachable') : Error
>Error : ErrorConstructor
>'Unreachable' : "Unreachable"

/** @typedef {{ q: string }} Q */
>Q : any
>q : string

try {
}
catch (e) {
>e : unknown
}

/**
 * @param {A} a
 * @param {B} b
 * @param {C} c
 * @param {D} d
 * @param {E} e
 * @param {F} f
 * @param {G} g
 * @param {H} h
 * @param {I} i
 * @param {J} j
 * @param {K} k
 * @param {L} l
 * @param {M} m
 * @param {N} n
 * @param {O} o
 * @param {P} p
 * @param {Q} q
 */
function proof (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) {
>proof : (a: { a: string; }, b: { b: string; }, c: { c: string; }, d: { d: string; }, e: { e: string; }, f: { f: string; }, g: { g: string; }, h: { h: string; }, i: { i: string; }, j: { j: string; }, k: { k: string; }, l: { l: string; }, m: { m: string; }, n: { n: string; }, o: { o: string; }, p: { p: string; }, q: { q: string; }) => void
>a : { a: string; }
>b : { b: string; }
>c : { c: string; }
>d : { d: string; }
>e : { e: string; }
>f : { f: string; }
>g : { g: string; }
>h : { h: string; }
>i : { i: string; }
>j : { j: string; }
>k : { k: string; }
>l : { l: string; }
>m : { m: string; }
>n : { n: string; }
>o : { o: string; }
>p : { p: string; }
>q : { q: string; }

    console.log(a.a, b.b, c.c, d.d, e.e, f.f, g.g, h.h, i.i, j.j, k.k, l.l, m.m, n.n, o.o, p.p, q.q)
>console.log(a.a, b.b, c.c, d.d, e.e, f.f, g.g, h.h, i.i, j.j, k.k, l.l, m.m, n.n, o.o, p.p, q.q) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>a.a : string
>a : { a: string; }
>a : string
>b.b : string
>b : { b: string; }
>b : string
>c.c : string
>c : { c: string; }
>c : string
>d.d : string
>d : { d: string; }
>d : string
>e.e : string
>e : { e: string; }
>e : string
>f.f : string
>f : { f: string; }
>f : string
>g.g : string
>g : { g: string; }
>g : string
>h.h : string
>h : { h: string; }
>h : string
>i.i : string
>i : { i: string; }
>i : string
>j.j : string
>j : { j: string; }
>j : string
>k.k : string
>k : { k: string; }
>k : string
>l.l : string
>l : { l: string; }
>l : string
>m.m : string
>m : { m: string; }
>m : string
>n.n : string
>n : { n: string; }
>n : string
>o.o : string
>o : { o: string; }
>o : string
>p.p : string
>p : { p: string; }
>p : string
>q.q : string
>q : { q: string; }
>q : string

    /** @type {Alpha} */
    var alpha = { alpha: "aleph" }
>alpha : { alpha: string; }
>{ alpha: "aleph" } : { alpha: string; }
>alpha : string
>"aleph" : "aleph"

    /** @typedef {{ alpha: string }} Alpha */
>Alpha : any
>alpha : string

    return
}


