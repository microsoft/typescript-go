//// [tests/cases/conformance/types/any/assignEveryTypeToAny.ts] ////

=== assignEveryTypeToAny.ts ===
// all of these are valid

var x: any;
>x : any

x = 1;
>x = 1 : 1
>x : any
>1 : 1

var a = 2;
>a : number
>2 : 2

x = a;
>x = a : number
>x : any
>a : number

x = true;
>x = true : true
>x : any
>true : true

var b = true;
>b : boolean
>true : true

x = b;
>x = b : true
>x : any
>b : true

x = "";
>x = "" : ""
>x : any
>"" : ""

var c = "";
>c : string
>"" : ""

x = c;
>x = c : string
>x : any
>c : string

var d: void;
>d : void

x = d;
>x = d : void
>x : any
>d : void

var e = undefined;
>e : any
>undefined : undefined

x = e;
>x = e : any
>x : any
>e : any

var e2: typeof undefined;
>e2 : any

x = e2;
>x = e2 : any
>x : any
>e2 : any

enum E {
>E : E.A

    A
>A : E.A
}

x = E.A;
>x = E.A : E.A
>x : any
>E.A : E.A
>E : typeof E
>A : E.A

var f = E.A;
>f : E.A
>E.A : E.A
>E : typeof E
>A : E.A

x = f;
>x = f : E.A
>x : any
>f : E.A

interface I {
>I : I

    foo: string;
>foo : string
}

var g: I;
>g : I

x = g;
>x = g : I
>x : any
>g : I

class C {
>C : C

    bar: string;
>bar : string
}

var h: C;
>h : C

x = h;
>x = h : C
>x : any
>h : C

var i: { (): string };
>i : () => string

x = i;
>x = i : () => string
>x : any
>i : () => string

x = { f() { return 1; } }
>x = { f() { return 1; } } : { f: () => number; }
>x : any
>{ f() { return 1; } } : { f: () => number; }
>f : () => number
>1 : 1

x = { f<T>(x: T) { return x; } }
>x = { f<T>(x: T) { return x; } } : { f: <T>(x: T) => T; }
>x : any
>{ f<T>(x: T) { return x; } } : { f: <T>(x: T) => T; }
>f : <T>(x: T) => T
>T : T
>x : T
>x : T

function j<T>(a: T) {
>j : <T>(a: T) => void
>T : T
>a : T

    x = a;
>x = a : T
>x : any
>a : T
}
