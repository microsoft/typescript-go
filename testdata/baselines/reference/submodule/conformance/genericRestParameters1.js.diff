--- old.genericRestParameters1.js
+++ new.genericRestParameters1.js
@@= skipped -167, +167 lines =@@


 //// [genericRestParameters1.js]
-"use strict";
 f1 = f2;
 f2 = f1;
 f1(42, "hello", true);
@@= skipped -140, +139 lines =@@
 declare let x32: string | number;
 declare function bind<T, U extends unknown[], V>(f: (x: T, ...rest: U) => V, x: T): (...rest: U) => V;
 declare const f20: (x: number, y: string, z: boolean) => string[];
-declare const f21: (y: string, z: boolean) => string[];
-declare const f22: (z: boolean) => string[];
-declare const f23: () => string[];
+declare const f21: (...rest: [y: string, z: boolean]) => string[];
+declare const f22: (...rest: [z: boolean]) => string[];
+declare const f23: (...rest: []) => string[];
 declare const g20: (x: number, y?: string, z?: boolean) => string[];
-declare const g21: (y?: string | undefined, z?: boolean | undefined) => string[];
-declare const g22: (z?: boolean | undefined) => string[];
-declare const g23: () => string[];
+declare const g21: (...rest: [y?: string | undefined, z?: boolean | undefined]) => string[];
+declare const g22: (...rest: [z?: boolean | undefined]) => string[];
+declare const g23: (...rest: []) => string[];
 declare function f30<T, U extends ((x: T) => any)[]>(x: T, ...args: U): U;
 declare const c30: [(x: number) => string, (x: number) => number];
 type T01 = Parameters<(x: number, y: string, z: boolean) => void>;