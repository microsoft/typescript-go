--- old.genericRestParameters1.js
+++ new.genericRestParameters1.js
@@= skipped -167, +167 lines =@@


 //// [genericRestParameters1.js]
-"use strict";
 f1 = f2;
 f2 = f1;
 f1(42, "hello", true);
@@= skipped -105, +104 lines =@@
 declare const ns: [number, string];
 declare const sn: [string, number];
 declare function f10<T extends unknown[]>(...args: T): T;
-declare const x10: [number, string, boolean];
-declare const x11: [number, string];
-declare const x12: [number];
-declare const x13: [];
-declare const x14: [number, string, boolean];
-declare const x15: [number, string, boolean];
-declare const x16: [number, string, boolean];
-declare const x17: [number, string, boolean];
-declare const x18: [number, string, boolean];
+declare const x10: [number, string, boolean]; // [number, string, boolean]
+declare const x11: [number, string]; // [number, string]
+declare const x12: [number]; // [number]
+declare const x13: []; // []
+declare const x14: [number, string, boolean]; // [number, string, boolean]
+declare const x15: [number, string, boolean]; // [number, string, boolean]
+declare const x16: [number, string, boolean]; // [number, string, boolean]
+declare const x17: [number, string, boolean]; // [number, string, boolean]
+declare const x18: [number, string, boolean]; // (string | number | boolean)[]
 declare function g10<U extends string[], V extends [number, number]>(u: U, v: V): void;
 declare function f11<T extends (string | number | boolean)[]>(...args: T): T;
-declare const z10: [42, "hello", true];
-declare const z11: [42, "hello"];
-declare const z12: [42];
-declare const z13: [];
-declare const z14: [number, string, boolean];
-declare const z15: [42, string, boolean];
-declare const z16: [42, "hello", boolean];
-declare const z17: [42, "hello", true];
-declare const z18: [number, string, true];
+declare const z10: [42, "hello", true]; // [42, "hello", true]
+declare const z11: [42, "hello"]; // [42, "hello"]
+declare const z12: [42]; // [42]
+declare const z13: []; // []
+declare const z14: [number, string, boolean]; // [number, string, boolean]
+declare const z15: [42, string, boolean]; // [42, string, boolean]
+declare const z16: [42, "hello", boolean]; // [42, "hello", boolean]
+declare const z17: [42, "hello", true]; // [42, "hello", true]
+declare const z18: [number, string, true]; // (string | number | true)[]
 declare function g11<U extends string[], V extends [number, number]>(u: U, v: V): void;
 declare function call<T extends unknown[], U>(f: (...args: T) => U, ...args: T): U;
 declare function callr<T extends unknown[], U>(args: T, f: (...args: T) => U): U;
 declare function f15(a: string, b: number): string | number;
 declare function f16<A, B>(a: A, b: B): A | B;
-declare let x20: number;
-declare let x21: string;
-declare let x22: string | number;
-declare let x23: string | number;
-declare let x24: string | number;
-declare let x30: string;
-declare let x31: string | number;
-declare let x32: string | number;
+declare let x20: number; // number
+declare let x21: string; // string
+declare let x22: string | number; // string | number
+declare let x23: string | number; // unknown
+declare let x24: string | number; // string | number
+declare let x30: string; // string
+declare let x31: string | number; // string | number
+declare let x32: string | number; // string | number
 declare function bind<T, U extends unknown[], V>(f: (x: T, ...rest: U) => V, x: T): (...rest: U) => V;
 declare const f20: (x: number, y: string, z: boolean) => string[];
-declare const f21: (y: string, z: boolean) => string[];
-declare const f22: (z: boolean) => string[];
-declare const f23: () => string[];
+declare const f21: (y: string, z: boolean) => string[]; // (y: string, z: boolean) => string[]
+declare const f22: (z: boolean) => string[]; // (z: boolean) => string[]
+declare const f23: () => string[]; // () => string[]
 declare const g20: (x: number, y?: string, z?: boolean) => string[];
-declare const g21: (y?: string | undefined, z?: boolean | undefined) => string[];
-declare const g22: (z?: boolean | undefined) => string[];
-declare const g23: () => string[];
+declare const g21: (y?: string | undefined, z?: boolean | undefined) => string[]; // (y: string, z: boolean) => string[]
+declare const g22: (z?: boolean | undefined) => string[]; // (z: boolean) => string[]
+declare const g23: () => string[]; // () => string[]
 declare function f30<T, U extends ((x: T) => any)[]>(x: T, ...args: U): U;
-declare const c30: [(x: number) => string, (x: number) => number];
+declare const c30: [(x: number) => string, (x: number) => number]; // [(x: number) => string, (x: number) => number]
 type T01 = Parameters<(x: number, y: string, z: boolean) => void>;
 type T02 = Parameters<(...args: [number, string, boolean]) => void>;
 type T03 = ConstructorParameters<new (x: number, y: string, z: boolean) => void>;
@@= skipped -63, +63 lines =@@
     emit<K extends keyof T = keyof T>(e: K, ...payload: T[K] extends any[] ? T[K] : [T[K]]): void;
 };
 declare var events: EventType<Record1>;
+// Repro from #25871
 declare var ff1: (...args: any[]) => void;
 declare var ff2: () => void;
 declare var ff3: (...args: []) => void;