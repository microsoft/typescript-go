--- old.indexSignatures1.errors.txt
+++ new.indexSignatures1.errors.txt
@@= skipped -0, +0 lines =@@
-indexSignatures1.ts(7,5): error TS2322: Type '{ [sym]: number; }' is not assignable to type '{ [key: symbol]: string; }'.
+indexSignatures1.ts(7,5): error TS2322: Type '{ [sym]: number }' is not assignable to type '{ [key: symbol]: string }'.
   Property '[sym]' is incompatible with index signature.
     Type 'number' is not assignable to type 'string'.
 indexSignatures1.ts(21,5): error TS2322: Type 'IY' is not assignable to type 'IX'.
   Index signature for type '`a${string}`' is missing in type 'IY'.
-indexSignatures1.ts(42,12): error TS7053: Element implicitly has an 'any' type because expression of type '"axxxbbbyc"' can't be used to index type '{ [x: `${string}xxx${string}` & `${string}yyy${string}`]: string; }'.
-  Property 'axxxbbbyc' does not exist on type '{ [x: `${string}xxx${string}` & `${string}yyy${string}`]: string; }'.
-indexSignatures1.ts(53,9): error TS2353: Object literal may only specify known properties, and 'date123' does not exist in type '{ [x: `data${string}`]: string; }'.
+indexSignatures1.ts(42,12): error TS7053: Element implicitly has an 'any' type because expression of type '"axxxbbbyc"' can't be used to index type '{ [x: `${string}xxx${string}` & `${string}yyy${string}`]: string }'.
+  Property 'axxxbbbyc' does not exist on type '{ [x: `${string}xxx${string}` & `${string}yyy${string}`]: string }'.
+indexSignatures1.ts(53,9): error TS2353: Object literal may only specify known properties, and 'date123' does not exist in type '{ [x: `data${string}`]: string }'.
 indexSignatures1.ts(70,5): error TS2374: Duplicate index signature for type 'number'.
 indexSignatures1.ts(71,5): error TS2374: Duplicate index signature for type 'number'.
 indexSignatures1.ts(71,5): error TS2374: Duplicate index signature for type 'symbol'.
@@= skipped -48, +48 lines =@@
   Index signature for type 'TaggedString1' is missing in type 'I2'.
 indexSignatures1.ts(151,1): error TS2322: Type 'I4' is not assignable to type 'I3'.
   Index signature for type 'TaggedString1' is missing in type 'I4'.
-indexSignatures1.ts(162,1): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString1]: string; }'.
-  No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString1]: string; }'.
-indexSignatures1.ts(164,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString2' can't be used to index type '{ [key: TaggedString1]: string; }'.
-indexSignatures1.ts(165,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: TaggedString1]: string; }'.
-indexSignatures1.ts(168,1): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString2]: string; }'.
-  No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString2]: string; }'.
-indexSignatures1.ts(169,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1' can't be used to index type '{ [key: TaggedString2]: string; }'.
-indexSignatures1.ts(171,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: TaggedString2]: string; }'.
-indexSignatures1.ts(174,1): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString1]: string; [key: TaggedString2]: string; }'.
-  No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString1]: string; [key: TaggedString2]: string; }'.
-indexSignatures1.ts(180,1): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: string & Tag1 & Tag2]: string; }'.
-  No index signature with a parameter of type 'string' was found on type '{ [key: string & Tag1 & Tag2]: string; }'.
-indexSignatures1.ts(181,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1' can't be used to index type '{ [key: string & Tag1 & Tag2]: string; }'.
-indexSignatures1.ts(182,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString2' can't be used to index type '{ [key: string & Tag1 & Tag2]: string; }'.
-indexSignatures1.ts(183,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: string & Tag1 & Tag2]: string; }'.
+indexSignatures1.ts(162,1): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString1]: string }'.
+  No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString1]: string }'.
+indexSignatures1.ts(164,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString2' can't be used to index type '{ [key: TaggedString1]: string }'.
+indexSignatures1.ts(165,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: TaggedString1]: string }'.
+indexSignatures1.ts(168,1): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString2]: string }'.
+  No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString2]: string }'.
+indexSignatures1.ts(169,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1' can't be used to index type '{ [key: TaggedString2]: string }'.
+indexSignatures1.ts(171,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: TaggedString2]: string }'.
+indexSignatures1.ts(174,1): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString1]: string, [key: TaggedString2]: string }'.
+  No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString1]: string, [key: TaggedString2]: string }'.
+indexSignatures1.ts(180,1): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: string & Tag1 & Tag2]: string }'.
+  No index signature with a parameter of type 'string' was found on type '{ [key: string & Tag1 & Tag2]: string }'.
+indexSignatures1.ts(181,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1' can't be used to index type '{ [key: string & Tag1 & Tag2]: string }'.
+indexSignatures1.ts(182,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString2' can't be used to index type '{ [key: string & Tag1 & Tag2]: string }'.
+indexSignatures1.ts(183,1): error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: string & Tag1 & Tag2]: string }'.
 indexSignatures1.ts(277,7): error TS2322: Type '"&"' is not assignable to type '`&:${string}`'.
-indexSignatures1.ts(281,35): error TS2353: Object literal may only specify known properties, and ''someKey'' does not exist in type 'PseudoDeclaration'.
+indexSignatures1.ts(281,35): error TS2353: Object literal may only specify known properties, and 'someKey' does not exist in type 'PseudoDeclaration'.
 indexSignatures1.ts(286,7): error TS2322: Type '"two"' is not assignable to type '`/${string}`'.
-indexSignatures1.ts(289,7): error TS2322: Type 'number' is not assignable to type 'PathsObject'.
-indexSignatures1.ts(312,43): error TS2353: Object literal may only specify known properties, and '[sym]' does not exist in type '{ [key: number]: string; }'.
+indexSignatures1.ts(289,7): error TS2322: Type '123' is not assignable to type 'PathsObject'.
+indexSignatures1.ts(312,43): error TS2353: Object literal may only specify known properties, and '[sym]' does not exist in type '{ [key: number]: string }'.
 
 
 ==== indexSignatures1.ts (52 errors) ====
@@= skipped -31, +31 lines =@@
         x = z;
         y = z;  // Error
         ~
-!!! error TS2322: Type '{ [sym]: number; }' is not assignable to type '{ [key: symbol]: string; }'.
+!!! error TS2322: Type '{ [sym]: number }' is not assignable to type '{ [key: symbol]: string }'.
 !!! error TS2322:   Property '[sym]' is incompatible with index signature.
 !!! error TS2322:     Type 'number' is not assignable to type 'string'.
     }
@@= skipped -42, +42 lines =@@
     const x8 = combo2['ayyyxxxbc'];
     const x9 = combo2['axxxbbbyc'];  // Error
                ~~~~~~~~~~~~~~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type '"axxxbbbyc"' can't be used to index type '{ [x: `${string}xxx${string}` & `${string}yyy${string}`]: string; }'.
-!!! error TS7053:   Property 'axxxbbbyc' does not exist on type '{ [x: `${string}xxx${string}` & `${string}yyy${string}`]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type '"axxxbbbyc"' can't be used to index type '{ [x: `${string}xxx${string}` & `${string}yyy${string}`]: string }'.
+!!! error TS7053:   Property 'axxxbbbyc' does not exist on type '{ [x: `${string}xxx${string}` & `${string}yyy${string}`]: string }'.
     
     // Property access on template pattern index signature
     
@@= skipped -14, +14 lines =@@
     dom = { data123: 'hello' };
     dom = { date123: 'hello' };  // Error
             ~~~~~~~
-!!! error TS2353: Object literal may only specify known properties, and 'date123' does not exist in type '{ [x: `data${string}`]: string; }'.
+!!! error TS2353: Object literal may only specify known properties, and 'date123' does not exist in type '{ [x: `data${string}`]: string }'.
     
     // Contextual typing by index signature with template literal pattern
     
@@= skipped -186, +186 lines =@@
     
     o1[s0];  // Error
     ~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString1]: string; }'.
-!!! error TS7053:   No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString1]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString1]: string }'.
+!!! error TS7053:   No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString1]: string }'.
     o1[s1];
     o1[s2];  // Error
     ~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString2' can't be used to index type '{ [key: TaggedString1]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString2' can't be used to index type '{ [key: TaggedString1]: string }'.
     o1[s3];  // Error
     ~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: TaggedString1]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: TaggedString1]: string }'.
     o1[s4];
     
     o2[s0];  // Error
     ~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString2]: string; }'.
-!!! error TS7053:   No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString2]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString2]: string }'.
+!!! error TS7053:   No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString2]: string }'.
     o2[s1];  // Error
     ~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1' can't be used to index type '{ [key: TaggedString2]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1' can't be used to index type '{ [key: TaggedString2]: string }'.
     o2[s2];
     o2[s3];  // Error
     ~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: TaggedString2]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: TaggedString2]: string }'.
     o2[s4];
     
     o3[s0];  // Error
     ~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString1]: string; [key: TaggedString2]: string; }'.
-!!! error TS7053:   No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString1]: string; [key: TaggedString2]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString1]: string, [key: TaggedString2]: string }'.
+!!! error TS7053:   No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString1]: string, [key: TaggedString2]: string }'.
     o3[s1];
     o3[s2];
     o3[s3];
@@= skipped -35, +35 lines =@@
     
     o4[s0];  // Error
     ~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: string & Tag1 & Tag2]: string; }'.
-!!! error TS7053:   No index signature with a parameter of type 'string' was found on type '{ [key: string & Tag1 & Tag2]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: string & Tag1 & Tag2]: string }'.
+!!! error TS7053:   No index signature with a parameter of type 'string' was found on type '{ [key: string & Tag1 & Tag2]: string }'.
     o4[s1];  // Error
     ~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1' can't be used to index type '{ [key: string & Tag1 & Tag2]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1' can't be used to index type '{ [key: string & Tag1 & Tag2]: string }'.
     o4[s2];  // Error
     ~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString2' can't be used to index type '{ [key: string & Tag1 & Tag2]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString2' can't be used to index type '{ [key: string & Tag1 & Tag2]: string }'.
     o4[s3];  // Error
     ~~~~~~
-!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: string & Tag1 & Tag2]: string; }'.
+!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: string & Tag1 & Tag2]: string }'.
     o4[s4];
     
     o1 = o2;
@@= skipped -112, +112 lines =@@
     
     const test: PseudoDeclaration = { 'someKey' : 'someValue' };  // Error
                                       ~~~~~~~~~
-!!! error TS2353: Object literal may only specify known properties, and ''someKey'' does not exist in type 'PseudoDeclaration'.
+!!! error TS2353: Object literal may only specify known properties, and 'someKey' does not exist in type 'PseudoDeclaration'.
     
     type FieldPattern = `/${string}`;
     
@@= skipped -12, +12 lines =@@
     type PathsObject = { [P in FieldPattern]: object; };
     const pathObject: PathsObject = 123;  // Error
           ~~~~~~~~~~
-!!! error TS2322: Type 'number' is not assignable to type 'PathsObject'.
+!!! error TS2322: Type '123' is not assignable to type 'PathsObject'.
     
     type IdType = `${number}-${number}-${number}-${number}`
     const id: IdType = '0000-0000-0000-0001';
@@= skipped -25, +25 lines =@@
     const obj2: { [key: string]: string } = { [sym]: 'hello '};  // Permitted for backwards compatibility
     const obj3: { [key: number]: string } = { [sym]: 'hello '};  // Error
                                               ~~~~~
-!!! error TS2353: Object literal may only specify known properties, and '[sym]' does not exist in type '{ [key: number]: string; }'.
+!!! error TS2353: Object literal may only specify known properties, and '[sym]' does not exist in type '{ [key: number]: string }'.
     
     // Repro from #45772
     
