--- old.subtypingWithCallSignaturesWithSpecializedSignatures.types
+++ new.subtypingWithCallSignaturesWithSpecializedSignatures.types
@@= skipped -3, +3 lines =@@
 // same as subtypingWithCallSignatures but with additional specialized signatures that should not affect the results
 
 module CallSignature {
+>CallSignature : any
+
     interface Base { // T
+>Base : Base
+
         // M's
         (x: 'a'): void;
 >x : "a"
@@= skipped -12, +16 lines =@@
 
     // S's
     interface I extends Base {
+>I : I
+
         // N's
         (x: 'a'): number; // ok because base returns void
 >x : "a"
@@= skipped -9, +11 lines =@@
 >y : number
 
         <T>(x: T): string; // ok because base returns void
+>T : T
 >x : T
     }
 
     interface Base2 { // T
+>Base2 : Base2
+
         // M's
         (x: 'a'): number;
 >x : "a"
@@= skipped -14, +17 lines =@@
 
     // S's
     interface I2 extends Base2 {
+>I2 : I2
+
         // N's
         (x: 'a'): string;
 >x : "a"
@@= skipped -10, +12 lines =@@
 
     // S's
     interface I3 extends Base2 {
+>I3 : I3
+
         // N's
         <T>(x: T): string; // ok, adds a new call signature
+>T : T
 >x : T
     }
 }
 
 module MemberWithCallSignature {
+>MemberWithCallSignature : any
+
     interface Base { // T
+>Base : Base
+
         // M's
         a: {
 >a : { (x: "a"): void; (x: string): void; }
@@= skipped -31, +38 lines =@@
         }
         a3: <T>(x: T) => void;
 >a3 : <T>(x: T) => void
+>T : T
 >x : T
     }
 
     // S's
     interface I extends Base {
+>I : I
+
         // N's
         a: (x: string) => number; // ok because base returns void
 >a : (x: string) => number
@@= skipped -17, +20 lines =@@
 
         a3: <T>(x: T) => string; // ok because base returns void
 >a3 : <T>(x: T) => string
+>T : T
 >x : T
     }
 
     interface Base2 { // T
+>Base2 : Base2
+
         // M's
         a: {
 >a : { (x: "a"): number; (x: string): number; }
@@= skipped -16, +19 lines =@@
         }
         a2: <T>(x: T) => T;
 >a2 : <T>(x: T) => T
+>T : T
 >x : T
     }
 
     // S's
     interface I2 extends Base2 {
+>I2 : I2
+
         // N's
         a: (x: string) => string; // error because base returns non-void;
 >a : (x: string) => string
@@= skipped -13, +16 lines =@@
 
     // S's
     interface I3 extends Base2 {
+>I3 : I3
+
         // N's
         a2: <T>(x: T) => string; // error because base returns non-void;
 >a2 : <T>(x: T) => string
+>T : T
 >x : T
     }
 }
