--- old.typeGuardIntersectionTypes.symbols
+++ new.typeGuardIntersectionTypes.symbols
@@= skipped -4, +4 lines =@@
 >X : Symbol(X, Decl(typeGuardIntersectionTypes.ts, 0, 0))
 
     x: string;
->x : Symbol(X.x, Decl(typeGuardIntersectionTypes.ts, 0, 13))
+>x : Symbol(x, Decl(typeGuardIntersectionTypes.ts, 0, 13))
 }
 
 interface Y {
 >Y : Symbol(Y, Decl(typeGuardIntersectionTypes.ts, 2, 1))
 
     y: string;
->y : Symbol(Y.y, Decl(typeGuardIntersectionTypes.ts, 4, 13))
+>y : Symbol(y, Decl(typeGuardIntersectionTypes.ts, 4, 13))
 }
 
 interface Z {
 >Z : Symbol(Z, Decl(typeGuardIntersectionTypes.ts, 6, 1))
 
     z: string;
->z : Symbol(Z.z, Decl(typeGuardIntersectionTypes.ts, 8, 13))
+>z : Symbol(z, Decl(typeGuardIntersectionTypes.ts, 8, 13))
 }
 
 declare function isX(obj: any): obj is X;
@@= skipped -71, +71 lines =@@
 >A : Symbol(A, Decl(typeGuardIntersectionTypes.ts, 23, 1))
 
   a: string;
->a : Symbol(A.a, Decl(typeGuardIntersectionTypes.ts, 28, 13))
+>a : Symbol(a, Decl(typeGuardIntersectionTypes.ts, 28, 13))
 }
 
 interface B {
 >B : Symbol(B, Decl(typeGuardIntersectionTypes.ts, 30, 1))
 
   b: string;
->b : Symbol(B.b, Decl(typeGuardIntersectionTypes.ts, 32, 13))
+>b : Symbol(b, Decl(typeGuardIntersectionTypes.ts, 32, 13))
 }
 
 // a type guard for B
@@= skipped -51, +51 lines =@@
 // Supported beast features
 interface Beast     { wings?: boolean; legs?: number }
 >Beast : Symbol(Beast, Decl(typeGuardIntersectionTypes.ts, 52, 38))
->wings : Symbol(Beast.wings, Decl(typeGuardIntersectionTypes.ts, 55, 21))
->legs : Symbol(Beast.legs, Decl(typeGuardIntersectionTypes.ts, 55, 38))
+>wings : Symbol(wings, Decl(typeGuardIntersectionTypes.ts, 55, 21))
+>legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 55, 38))
 
 interface Legged    { legs: number; }
 >Legged : Symbol(Legged, Decl(typeGuardIntersectionTypes.ts, 55, 54))
->legs : Symbol(Legged.legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
+>legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
 
 interface Winged    { wings: boolean; }
 >Winged : Symbol(Winged, Decl(typeGuardIntersectionTypes.ts, 56, 37))
->wings : Symbol(Winged.wings, Decl(typeGuardIntersectionTypes.ts, 57, 21))
+>wings : Symbol(wings, Decl(typeGuardIntersectionTypes.ts, 57, 21))
 
 // Beast feature detection via user-defined type guards
 function hasLegs(x: Beast): x is Legged { return x && typeof x.legs === 'number'; }
@@= skipped -19, +19 lines =@@
 >x : Symbol(x, Decl(typeGuardIntersectionTypes.ts, 60, 17))
 >Legged : Symbol(Legged, Decl(typeGuardIntersectionTypes.ts, 55, 54))
 >x : Symbol(x, Decl(typeGuardIntersectionTypes.ts, 60, 17))
->x.legs : Symbol(Beast.legs, Decl(typeGuardIntersectionTypes.ts, 55, 38))
+>x.legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 55, 38))
 >x : Symbol(x, Decl(typeGuardIntersectionTypes.ts, 60, 17))
->legs : Symbol(Beast.legs, Decl(typeGuardIntersectionTypes.ts, 55, 38))
+>legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 55, 38))
 
 function hasWings(x: Beast): x is Winged { return x && !!x.wings; }
 >hasWings : Symbol(hasWings, Decl(typeGuardIntersectionTypes.ts, 60, 83))
@@= skipped -11, +11 lines =@@
 >x : Symbol(x, Decl(typeGuardIntersectionTypes.ts, 61, 18))
 >Winged : Symbol(Winged, Decl(typeGuardIntersectionTypes.ts, 56, 37))
 >x : Symbol(x, Decl(typeGuardIntersectionTypes.ts, 61, 18))
->x.wings : Symbol(Beast.wings, Decl(typeGuardIntersectionTypes.ts, 55, 21))
+>x.wings : Symbol(wings, Decl(typeGuardIntersectionTypes.ts, 55, 21))
 >x : Symbol(x, Decl(typeGuardIntersectionTypes.ts, 61, 18))
->wings : Symbol(Beast.wings, Decl(typeGuardIntersectionTypes.ts, 55, 21))
+>wings : Symbol(wings, Decl(typeGuardIntersectionTypes.ts, 55, 21))
 
 // Function to identify a given beast by detecting its features
 function identifyBeast(beast: Beast) {
@@= skipped -21, +21 lines =@@
 >beast : Symbol(beast, Decl(typeGuardIntersectionTypes.ts, 64, 23))
 
             if (beast.legs === 4) {
->beast.legs : Symbol(Legged.legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
+>beast.legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
 >beast : Symbol(beast, Decl(typeGuardIntersectionTypes.ts, 64, 23))
->legs : Symbol(Legged.legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
+>legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
 
                 log(`pegasus - 4 legs, wings`);
 >log : Symbol(log, Decl(typeGuardIntersectionTypes.ts, 48, 1))
             }
             else if (beast.legs === 2) {
->beast.legs : Symbol(Legged.legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
+>beast.legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
 >beast : Symbol(beast, Decl(typeGuardIntersectionTypes.ts, 64, 23))
->legs : Symbol(Legged.legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
+>legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
 
                 log(`bird - 2 legs, wings`);
 >log : Symbol(log, Decl(typeGuardIntersectionTypes.ts, 48, 1))
@@= skipped -18, +18 lines =@@
             else {
                 log(`unknown - ${beast.legs} legs, wings`);
 >log : Symbol(log, Decl(typeGuardIntersectionTypes.ts, 48, 1))
->beast.legs : Symbol(Legged.legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
+>beast.legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
 >beast : Symbol(beast, Decl(typeGuardIntersectionTypes.ts, 64, 23))
->legs : Symbol(Legged.legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
+>legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
             }
         }
 
@@= skipped -10, +10 lines =@@
         else {
             log(`manbearpig - ${beast.legs} legs, no wings`);
 >log : Symbol(log, Decl(typeGuardIntersectionTypes.ts, 48, 1))
->beast.legs : Symbol(Legged.legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
+>beast.legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
 >beast : Symbol(beast, Decl(typeGuardIntersectionTypes.ts, 64, 23))
->legs : Symbol(Legged.legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
+>legs : Symbol(legs, Decl(typeGuardIntersectionTypes.ts, 56, 21))
         }
     }
 
