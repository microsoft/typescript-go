--- old.typeInferenceWithTupleType.symbols
+++ new.typeInferenceWithTupleType.symbols
@@= skipped -23, +23 lines =@@
 var combineEle1 = combineResult[0]; // string
 >combineEle1 : Symbol(combineEle1, Decl(typeInferenceWithTupleType.ts, 5, 3))
 >combineResult : Symbol(combineResult, Decl(typeInferenceWithTupleType.ts, 4, 3))
->0 : Symbol(0)
+>0 : Symbol("0")
 
 var combineEle2 = combineResult[1]; // number
 >combineEle2 : Symbol(combineEle2, Decl(typeInferenceWithTupleType.ts, 6, 3))
 >combineResult : Symbol(combineResult, Decl(typeInferenceWithTupleType.ts, 4, 3))
->1 : Symbol(1)
+>1 : Symbol("1")
 
 function zip<T, U>(array1: T[], array2: U[]): [[T, U]] {
 >zip : Symbol(zip, Decl(typeInferenceWithTupleType.ts, 6, 35))
@@= skipped -19, +19 lines =@@
 >U : Symbol(U, Decl(typeInferenceWithTupleType.ts, 8, 15))
 
     if (array1.length != array2.length) {
->array1.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>array1.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >array1 : Symbol(array1, Decl(typeInferenceWithTupleType.ts, 8, 19))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->array2.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>array2.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >array2 : Symbol(array2, Decl(typeInferenceWithTupleType.ts, 8, 31))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
         return [[undefined, undefined]];
 >undefined : Symbol(undefined)
@@= skipped -13, +13 lines =@@
     }
     var length = array1.length;
 >length : Symbol(length, Decl(typeInferenceWithTupleType.ts, 12, 7))
->array1.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>array1.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >array1 : Symbol(array1, Decl(typeInferenceWithTupleType.ts, 8, 19))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
     var zipResult: [[T, U]];
 >zipResult : Symbol(zipResult, Decl(typeInferenceWithTupleType.ts, 13, 7))
@@= skipped -16, +16 lines =@@
 >i : Symbol(i, Decl(typeInferenceWithTupleType.ts, 14, 12))
 
         zipResult.push([array1[i], array2[i]]);
->zipResult.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>zipResult.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >zipResult : Symbol(zipResult, Decl(typeInferenceWithTupleType.ts, 13, 7))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >array1 : Symbol(array1, Decl(typeInferenceWithTupleType.ts, 8, 19))
 >i : Symbol(i, Decl(typeInferenceWithTupleType.ts, 14, 12))
 >array2 : Symbol(array2, Decl(typeInferenceWithTupleType.ts, 8, 31))
@@= skipped -19, +19 lines =@@
 var zipResultEle = zipResult[0]; // [string, number]
 >zipResultEle : Symbol(zipResultEle, Decl(typeInferenceWithTupleType.ts, 21, 3))
 >zipResult : Symbol(zipResult, Decl(typeInferenceWithTupleType.ts, 20, 3))
->0 : Symbol(0)
+>0 : Symbol("0")
 
 var zipResultEleEle = zipResult[0][0]; // string
 >zipResultEleEle : Symbol(zipResultEleEle, Decl(typeInferenceWithTupleType.ts, 22, 3))
 >zipResult : Symbol(zipResult, Decl(typeInferenceWithTupleType.ts, 20, 3))
->0 : Symbol(0)
->0 : Symbol(0)
+>0 : Symbol("0")
+>0 : Symbol("0")
 
 // #33559 and #33752
 
