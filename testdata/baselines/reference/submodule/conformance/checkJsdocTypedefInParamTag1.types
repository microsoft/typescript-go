//// [tests/cases/conformance/jsdoc/checkJsdocTypedefInParamTag1.ts] ////

=== 0.js ===
// @ts-check
/**
 * @typedef {Object} Opts
>Opts : Opts

 * @property {string} x
>x : any

 * @property {string=} y
>y : any

 * @property {string} [z]
>z : any

 * @property {string} [w="hi"]
>w : any

 *
 * @param {Opts} opts
 */
function foo(opts) {
>foo : (opts: Opts) => void
>opts : Opts

    opts.x;
>opts.x : any
>opts : Opts
>x : any
}

foo({x: 'abc'});
>foo({x: 'abc'}) : void
>foo : (opts: Opts) => void
>{x: 'abc'} : { x: string; }
>x : string
>'abc' : "abc"

/**
 * @typedef {Object} AnotherOpts
>AnotherOpts : AnotherOpts

 * @property anotherX {string}
>anotherX : any

 * @property anotherY {string=}
>anotherY : any

 * 
 * @param {AnotherOpts} opts
 */
function foo1(opts) {
>foo1 : (opts: AnotherOpts) => void
>opts : AnotherOpts

    opts.anotherX;
>opts.anotherX : any
>opts : AnotherOpts
>anotherX : any
}

foo1({anotherX: "world"});
>foo1({anotherX: "world"}) : void
>foo1 : (opts: AnotherOpts) => void
>{anotherX: "world"} : { anotherX: string; }
>anotherX : string
>"world" : "world"

/**
 * @typedef {object} Opts1
>Opts1 : Opts1

 * @property {string} x
>x : any

 * @property {string=} y
>y : any

 * @property {string} [z]
>z : any

 * @property {string} [w="hi"]
>w : any

 *
 * @param {Opts1} opts
 */
function foo2(opts) {
>foo2 : (opts: Opts1) => void
>opts : Opts1

    opts.x;
>opts.x : any
>opts : Opts1
>x : any
}
foo2({x: 'abc'});
>foo2({x: 'abc'}) : void
>foo2 : (opts: Opts1) => void
>{x: 'abc'} : { x: string; }
>x : string
>'abc' : "abc"

