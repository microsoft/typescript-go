--- old.ifDoWhileStatements.symbols
+++ new.ifDoWhileStatements.symbols
@@= skipped -4, +4 lines =@@
 >I : Symbol(I, Decl(ifDoWhileStatements.ts, 0, 0))
 
     id: number;
->id : Symbol(I.id, Decl(ifDoWhileStatements.ts, 0, 13))
+>id : Symbol(id, Decl(ifDoWhileStatements.ts, 0, 13))
 }
 
 class C implements I {
@@= skipped -8, +8 lines =@@
 >I : Symbol(I, Decl(ifDoWhileStatements.ts, 0, 0))
 
     id: number;
->id : Symbol(C.id, Decl(ifDoWhileStatements.ts, 4, 22))
+>id : Symbol(id, Decl(ifDoWhileStatements.ts, 4, 22))
 
     name: string;
->name : Symbol(C.name, Decl(ifDoWhileStatements.ts, 5, 15))
+>name : Symbol(name, Decl(ifDoWhileStatements.ts, 5, 15))
 }
 
 class C2 extends C {
@@= skipped -11, +11 lines =@@
 >C : Symbol(C, Decl(ifDoWhileStatements.ts, 2, 1))
 
     valid: boolean;
->valid : Symbol(C2.valid, Decl(ifDoWhileStatements.ts, 9, 20))
+>valid : Symbol(valid, Decl(ifDoWhileStatements.ts, 9, 20))
 }
 
 class D<T>{
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(ifDoWhileStatements.ts, 13, 8))
 
     source: T;
->source : Symbol(D.source, Decl(ifDoWhileStatements.ts, 13, 11))
+>source : Symbol(source, Decl(ifDoWhileStatements.ts, 13, 11))
 >T : Symbol(T, Decl(ifDoWhileStatements.ts, 13, 8))
 
     recurse: D<T>;
->recurse : Symbol(D.recurse, Decl(ifDoWhileStatements.ts, 14, 14))
+>recurse : Symbol(recurse, Decl(ifDoWhileStatements.ts, 14, 14))
 >D : Symbol(D, Decl(ifDoWhileStatements.ts, 11, 1))
 >T : Symbol(T, Decl(ifDoWhileStatements.ts, 13, 8))
 
     wrapped: D<D<T>>
->wrapped : Symbol(D.wrapped, Decl(ifDoWhileStatements.ts, 15, 18))
+>wrapped : Symbol(wrapped, Decl(ifDoWhileStatements.ts, 15, 18))
 >D : Symbol(D, Decl(ifDoWhileStatements.ts, 11, 1))
 >D : Symbol(D, Decl(ifDoWhileStatements.ts, 11, 1))
 >T : Symbol(T, Decl(ifDoWhileStatements.ts, 13, 8))
@@= skipped -31, +31 lines =@@
 >A : Symbol(A, Decl(ifDoWhileStatements.ts, 22, 10))
 
         name: string;
->name : Symbol(A.name, Decl(ifDoWhileStatements.ts, 23, 20))
+>name : Symbol(name, Decl(ifDoWhileStatements.ts, 23, 20))
     }
 
     export function F2(x: number): string { return x.toString(); }
 >F2 : Symbol(F2, Decl(ifDoWhileStatements.ts, 25, 5))
 >x : Symbol(x, Decl(ifDoWhileStatements.ts, 27, 23))
->x.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>x.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(ifDoWhileStatements.ts, 27, 23))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 }
 
 module N {
@@= skipped -18, +18 lines =@@
 >A : Symbol(A, Decl(ifDoWhileStatements.ts, 30, 10))
 
         id: number;
->id : Symbol(A.id, Decl(ifDoWhileStatements.ts, 31, 20))
+>id : Symbol(id, Decl(ifDoWhileStatements.ts, 31, 20))
     }
 
     export function F2(x: number): string { return x.toString(); }
 >F2 : Symbol(F2, Decl(ifDoWhileStatements.ts, 33, 5))
 >x : Symbol(x, Decl(ifDoWhileStatements.ts, 35, 23))
->x.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>x.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(ifDoWhileStatements.ts, 35, 23))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 }
 
 // literals
