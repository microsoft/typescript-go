--- old.builtinIteratorReturn(strictbuiltiniteratorreturn=true).symbols
+++ new.builtinIteratorReturn(strictbuiltiniteratorreturn=true).symbols
@@= skipped -14, +14 lines =@@
 const i0 = array[Symbol.iterator]();
 >i0 : Symbol(i0, Decl(builtinIteratorReturn.ts, 4, 5))
 >array : Symbol(array, Decl(builtinIteratorReturn.ts, 0, 13))
->Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>Symbol.iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2019.symbol.d.ts, --, --))
->iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 
 const i1 = array.values();
 >i1 : Symbol(i1, Decl(builtinIteratorReturn.ts, 5, 5))
->array.values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --))
+>array.values : Symbol(values, Decl(lib.es2015.iterable.d.ts, --, --))
 >array : Symbol(array, Decl(builtinIteratorReturn.ts, 0, 13))
->values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --))
+>values : Symbol(values, Decl(lib.es2015.iterable.d.ts, --, --))
 
 const i2 = array.keys();
 >i2 : Symbol(i2, Decl(builtinIteratorReturn.ts, 6, 5))
->array.keys : Symbol(Array.keys, Decl(lib.es2015.iterable.d.ts, --, --))
+>array.keys : Symbol(keys, Decl(lib.es2015.iterable.d.ts, --, --))
 >array : Symbol(array, Decl(builtinIteratorReturn.ts, 0, 13))
->keys : Symbol(Array.keys, Decl(lib.es2015.iterable.d.ts, --, --))
+>keys : Symbol(keys, Decl(lib.es2015.iterable.d.ts, --, --))
 
 const i3 = array.entries();
 >i3 : Symbol(i3, Decl(builtinIteratorReturn.ts, 7, 5))
->array.entries : Symbol(Array.entries, Decl(lib.es2015.iterable.d.ts, --, --))
+>array.entries : Symbol(entries, Decl(lib.es2015.iterable.d.ts, --, --))
 >array : Symbol(array, Decl(builtinIteratorReturn.ts, 0, 13))
->entries : Symbol(Array.entries, Decl(lib.es2015.iterable.d.ts, --, --))
+>entries : Symbol(entries, Decl(lib.es2015.iterable.d.ts, --, --))
 
 for (const x of array);
 >x : Symbol(x, Decl(builtinIteratorReturn.ts, 8, 10))
@@= skipped -29, +29 lines =@@
 const i4 = map[Symbol.iterator]();
 >i4 : Symbol(i4, Decl(builtinIteratorReturn.ts, 10, 5))
 >map : Symbol(map, Decl(builtinIteratorReturn.ts, 1, 13))
->Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>Symbol.iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2019.symbol.d.ts, --, --))
->iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 
 const i5 = map.values();
 >i5 : Symbol(i5, Decl(builtinIteratorReturn.ts, 11, 5))
->map.values : Symbol(Map.values, Decl(lib.es2015.iterable.d.ts, --, --))
+>map.values : Symbol(values, Decl(lib.es2015.iterable.d.ts, --, --))
 >map : Symbol(map, Decl(builtinIteratorReturn.ts, 1, 13))
->values : Symbol(Map.values, Decl(lib.es2015.iterable.d.ts, --, --))
+>values : Symbol(values, Decl(lib.es2015.iterable.d.ts, --, --))
 
 const i6 = map.keys();
 >i6 : Symbol(i6, Decl(builtinIteratorReturn.ts, 12, 5))
->map.keys : Symbol(Map.keys, Decl(lib.es2015.iterable.d.ts, --, --))
+>map.keys : Symbol(keys, Decl(lib.es2015.iterable.d.ts, --, --))
 >map : Symbol(map, Decl(builtinIteratorReturn.ts, 1, 13))
->keys : Symbol(Map.keys, Decl(lib.es2015.iterable.d.ts, --, --))
+>keys : Symbol(keys, Decl(lib.es2015.iterable.d.ts, --, --))
 
 const i7 = map.entries();
 >i7 : Symbol(i7, Decl(builtinIteratorReturn.ts, 13, 5))
->map.entries : Symbol(Map.entries, Decl(lib.es2015.iterable.d.ts, --, --))
+>map.entries : Symbol(entries, Decl(lib.es2015.iterable.d.ts, --, --))
 >map : Symbol(map, Decl(builtinIteratorReturn.ts, 1, 13))
->entries : Symbol(Map.entries, Decl(lib.es2015.iterable.d.ts, --, --))
+>entries : Symbol(entries, Decl(lib.es2015.iterable.d.ts, --, --))
 
 for (const x of map);
 >x : Symbol(x, Decl(builtinIteratorReturn.ts, 14, 10))
@@= skipped -29, +29 lines =@@
 const i8 = set[Symbol.iterator]();
 >i8 : Symbol(i8, Decl(builtinIteratorReturn.ts, 16, 5))
 >set : Symbol(set, Decl(builtinIteratorReturn.ts, 2, 13))
->Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>Symbol.iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2019.symbol.d.ts, --, --))
->iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 
 const i9 = set.values();
 >i9 : Symbol(i9, Decl(builtinIteratorReturn.ts, 17, 5))
->set.values : Symbol(Set.values, Decl(lib.es2015.iterable.d.ts, --, --))
+>set.values : Symbol(values, Decl(lib.es2015.iterable.d.ts, --, --))
 >set : Symbol(set, Decl(builtinIteratorReturn.ts, 2, 13))
->values : Symbol(Set.values, Decl(lib.es2015.iterable.d.ts, --, --))
+>values : Symbol(values, Decl(lib.es2015.iterable.d.ts, --, --))
 
 const i10 = set.keys();
 >i10 : Symbol(i10, Decl(builtinIteratorReturn.ts, 18, 5))
->set.keys : Symbol(Set.keys, Decl(lib.es2015.iterable.d.ts, --, --))
+>set.keys : Symbol(keys, Decl(lib.es2015.iterable.d.ts, --, --))
 >set : Symbol(set, Decl(builtinIteratorReturn.ts, 2, 13))
->keys : Symbol(Set.keys, Decl(lib.es2015.iterable.d.ts, --, --))
+>keys : Symbol(keys, Decl(lib.es2015.iterable.d.ts, --, --))
 
 const i11 = set.entries();
 >i11 : Symbol(i11, Decl(builtinIteratorReturn.ts, 19, 5))
->set.entries : Symbol(Set.entries, Decl(lib.es2015.iterable.d.ts, --, --))
+>set.entries : Symbol(entries, Decl(lib.es2015.iterable.d.ts, --, --))
 >set : Symbol(set, Decl(builtinIteratorReturn.ts, 2, 13))
->entries : Symbol(Set.entries, Decl(lib.es2015.iterable.d.ts, --, --))
+>entries : Symbol(entries, Decl(lib.es2015.iterable.d.ts, --, --))
 
 for (const x of set);
 >x : Symbol(x, Decl(builtinIteratorReturn.ts, 20, 10))
