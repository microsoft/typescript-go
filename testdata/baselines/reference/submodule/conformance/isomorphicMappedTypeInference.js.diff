--- old.isomorphicMappedTypeInference.js
+++ new.isomorphicMappedTypeInference.js
@@= skipped -188, +188 lines =@@
     return x.value;
 }
 function boxify(obj) {
-    var result = {};
-    for (var k in obj) {
+    let result = {};
+    for (let k in obj) {
         result[k] = box(obj[k]);
     }
     return result;
 }
 function unboxify(obj) {
-    var result = {};
-    for (var k in obj) {
+    let result = {};
+    for (let k in obj) {
         result[k] = unbox(obj[k]);
     }
     return result;
 }
 function assignBoxified(obj, values) {
-    for (var k in values) {
+    for (let k in values) {
         obj[k].value = values[k];
     }
 }
 function f1() {
-    var v = {
+    let v = {
         a: 42,
         b: "hello",
         c: true
     };
-    var b = boxify(v);
-    var x = b.a.value;
+    let b = boxify(v);
+    let x = b.a.value;
 }
 function f2() {
-    var b = {
+    let b = {
         a: box(42),
         b: box("hello"),
         c: box(true)
     };
-    var v = unboxify(b);
-    var x = v.a;
+    let v = unboxify(b);
+    let x = v.a;
 }
 function f3() {
-    var b = {
+    let b = {
         a: box(42),
         b: box("hello"),
         c: box(true)
@@= skipped -45, +45 lines =@@
     assignBoxified(b, { c: false });
 }
 function f4() {
-    var b = {
+    let b = {
         a: box(42),
         b: box("hello"),
         c: box(true)
@@= skipped -12, +12 lines =@@
     return obj;
 }
 function f5(s) {
-    var b = makeRecord({
+    let b = makeRecord({
         a: box(42),
         b: box("hello"),
         c: box(true)
     });
-    var v = unboxify(b);
-    var x = v.a;
+    let v = unboxify(b);
+    let x = v.a;
 }
 function makeDictionary(obj) {
     return obj;
 }
 function f6(s) {
-    var b = makeDictionary({
+    let b = makeDictionary({
         a: box(42),
         b: box("hello"),
         c: box(true)
     });
-    var v = unboxify(b);
-    var x = v[s];
+    let v = unboxify(b);
+    let x = v[s];
 }
 function f10(foo) {
-    var x = validate(foo); // { a: number, readonly b: string }
-    var y = clone(foo); // { a?: number, b: string }
-    var z = validateAndClone(foo); // { a: number, b: string }
+    let x = validate(foo); // { a: number, readonly b: string }
+    let y = clone(foo); // { a?: number, b: string }
+    let z = validateAndClone(foo); // { a: number, b: string }
 }
 // Infers g1: (...args: any[]) => { sum: number, nested: { mul: string } }
 var g1 = applySpec({
-    sum: function (a) { return 3; },
+    sum: (a) => 3,
     nested: {
-        mul: function (b) { return "n"; }
+        mul: (b) => "n"
     }
 });
 // Infers g2: (...args: any[]) => { foo: { bar: { baz: boolean } } }
-var g2 = applySpec({ foo: { bar: { baz: function (x) { return true; } } } });
+var g2 = applySpec({ foo: { bar: { baz: (x) => true } } });
 // Repro from #12633
-var foo = function (object, partial) { return object; };
-var o = { a: 5, b: 7 };
+const foo = (object, partial) => object;
+let o = { a: 5, b: 7 };
 foo(o, { b: 9 });
 o = foo(o, { b: 9 });
-var x0 = f20({ foo: 42, bar: "hello" });
-var x1 = f21({ foo: 42, bar: "hello" });
-var x2 = f22({ foo: { value: 42 }, bar: { value: "hello" } });
-var x3 = f23({ foo: 42, bar: "hello" });
-var x4 = f24({ foo: 42, bar: "hello" });
+let x0 = f20({ foo: 42, bar: "hello" });
+let x1 = f21({ foo: 42, bar: "hello" });
+let x2 = f22({ foo: { value: 42 }, bar: { value: "hello" } });
+let x3 = f23({ foo: 42, bar: "hello" });
+let x4 = f24({ foo: 42, bar: "hello" });
 // Repro from #29765
 function getProps(obj, list) {
     return {};
 }
-var myAny = {};
-var o1 = getProps(myAny, ['foo', 'bar']);
-var o2 = getProps(myAny, ['foo', 'bar']);
+const myAny = {};
+const o1 = getProps(myAny, ['foo', 'bar']);
+const o2 = getProps(myAny, ['foo', 'bar']);


 //// [isomorphicMappedTypeInference.d.ts]
@@= skipped -93, +93 lines =@@
     readonly b: string;
 };
 declare function f10(foo: Foo): void;
+// Repro from #12606
 type Func<T> = (...args: any[]) => T;
 type Spec<T> = {
     [P in keyof T]: Func<T[P]> | Spec<T[P]>;
@@= skipped -10, +11 lines =@@
  * of calling its associated function with the supplied arguments.
  */
 declare function applySpec<T>(obj: Spec<T>): (...args: any[]) => T;
+// Infers g1: (...args: any[]) => { sum: number, nested: { mul: string } }
 declare var g1: (...args: any[]) => {
     sum: number;
     nested: {
         mul: string;
     };
 };
+// Infers g2: (...args: any[]) => { foo: { bar: { baz: boolean } } }
 declare var g2: (...args: any[]) => {
     foo: {
         bar: {
@@= skipped -13, +15 lines =@@
         };
     };
 };
+// Repro from #12633
 declare const foo: <T>(object: T, partial: Partial<T>) => T;
 declare let o: {
     a: number;
     b: number;
 };
+// Inferring to { [P in K]: X }, where K extends keyof T, produces same inferences as
+// inferring to { [P in keyof T]: X }.
 declare function f20<T, K extends keyof T>(obj: Pick<T, K>): T;
 declare function f21<T, K extends keyof T>(obj: Pick<T, K>): K;
 declare function f22<T, K extends keyof T>(obj: Boxified<Pick<T, K>>): T;
@@= skipped -30, +33 lines =@@
     foo: number;
     bar: string;
 };
+// Repro from #29765
 declare function getProps<T, K extends keyof T>(obj: T, list: K[]): Pick<T, K>;
 declare const myAny: any;
 declare const o1: Pick<any, "bar" | "foo">;