--- old.templateLiteralTypes2.types
+++ new.templateLiteralTypes2.types
@@= skipped -1, +1 lines =@@

 === templateLiteralTypes2.ts ===
 function ft1<T extends string>(s: string, n: number, u: 'foo' | 'bar' | 'baz', t: T) {
->ft1 : <T extends string>(s: string, n: number, u: "foo" | "bar" | "baz", t: T) => void
+>ft1 : <T extends string>(s: string, n: number, u: "bar" | "baz" | "foo", t: T) => void
 >s : string
 >n : number
->u : "foo" | "bar" | "baz"
+>u : "bar" | "baz" | "foo"
 >t : T

     const c1 = `abc${s}`;
@@= skipped -19, +19 lines =@@
     const c3 = `abc${u}`;
 >c3 : string
 >`abc${u}` : string
->u : "foo" | "bar" | "baz"
+>u : "bar" | "baz" | "foo"

     const c4 = `abc${t}`;
 >c4 : string
@@= skipped -18, +18 lines =@@
 >n : number

     const d3: `abc${'foo' | 'bar' | 'baz'}` = `abc${u}`;
->d3 : "abcfoo" | "abcbar" | "abcbaz"
->`abc${u}` : "abcfoo" | "abcbar" | "abcbaz"
->u : "foo" | "bar" | "baz"
+>d3 : "abcbar" | "abcbaz" | "abcfoo"
+>`abc${u}` : "abcbar" | "abcbaz" | "abcfoo"
+>u : "bar" | "baz" | "foo"

     const d4: `abc${T}` = `abc${t}`;
 >d4 : `abc${T}`
@@= skipped -73, +73 lines =@@
 >s : string

     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
->c2 : `foo${string}` | `bar${string}`
+>c2 : `bar${string}` | `foo${string}`
 >c1 : string

     const c3 = cond ? c1 : c2;  // string
@@= skipped -8, +8 lines =@@
 >cond ? c1 : c2 : string
 >cond : boolean
 >c1 : string
->c2 : `foo${string}` | `bar${string}`
+>c2 : `bar${string}` | `foo${string}`

     const c4 = cond ? c3 : `baz${s}`;  // string
 >c4 : string
@@= skipped -11, +11 lines =@@
 >s : string

     const c5: `foo${string}` | `bar${string}` | `baz${string}` = c4; // `foo${string}` | `bar${string}` | `baz${string}`
->c5 : `foo${string}` | `bar${string}` | `baz${string}`
+>c5 : `bar${string}` | `baz${string}` | `foo${string}`
 >c4 : string

     let v1 = c1;  // string
@@= skipped -8, +8 lines =@@
 >c1 : string

     let v2 = c2;  // `foo${string}` | `bar${string}`
->v2 : `foo${string}` | `bar${string}`
->c2 : `foo${string}` | `bar${string}`
+>v2 : `bar${string}` | `foo${string}`
+>c2 : `bar${string}` | `foo${string}`

     let v3 = c3;  // string
 >v3 : string
@@= skipped -12, +12 lines =@@
 >c4 : string

     let v5 = c5;  // `foo${string}` | `bar${string}` | `baz${string}`
->v5 : `foo${string}` | `bar${string}` | `baz${string}`
->c5 : `foo${string}` | `bar${string}` | `baz${string}`
+>v5 : `bar${string}` | `baz${string}` | `foo${string}`
+>c5 : `bar${string}` | `baz${string}` | `foo${string}`
 }

 function ft12(s: string) {
@@= skipped -95, +95 lines =@@
 >s : string

     let y2 = nonWidening(cond ? 'a' : `foo${s}`);
->y2 : `foo${string}` | "a"
->nonWidening(cond ? 'a' : `foo${s}`) : `foo${string}` | "a"
+>y2 : "a" | `foo${string}`
+>nonWidening(cond ? 'a' : `foo${s}`) : "a" | `foo${string}`
 >nonWidening : <T extends string | number | symbol>(x: T) => T
->cond ? 'a' : `foo${s}` : `foo${string}` | "a"
+>cond ? 'a' : `foo${s}` : "a" | `foo${string}`
 >cond : boolean
 >'a' : "a"
 >`foo${s}` : `foo${string}`
@@= skipped -158, +158 lines =@@

 function C2(transform: "-moz-initial" | (string & {})) { return 12; }
 >C2 : (transform: "-moz-initial" | (string & {})) => number
->transform : (string & {}) | "-moz-initial"
+>transform : "-moz-initial" | (string & {})
 >12 : 12

 C2(`rotate(${interpolatedStyle.rotate}dig)`);