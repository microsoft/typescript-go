--- old.taggedTemplatesWithTypeArguments2.errors.txt
+++ new.taggedTemplatesWithTypeArguments2.errors.txt
@@= skipped -0, +0 lines =@@
-taggedTemplatesWithTypeArguments2.ts(13,30): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
-taggedTemplatesWithTypeArguments2.ts(17,30): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
-taggedTemplatesWithTypeArguments2.ts(17,59): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
 taggedTemplatesWithTypeArguments2.ts(35,5): error TS2377: Constructors for derived classes must contain a 'super' call.
 taggedTemplatesWithTypeArguments2.ts(36,9): error TS17011: 'super' must be called before accessing a property of 'super' in the constructor of a derived class.
 taggedTemplatesWithTypeArguments2.ts(36,14): error TS2754: 'super' may not use type arguments.
 taggedTemplatesWithTypeArguments2.ts(36,34): error TS1034: 'super' must be followed by an argument list or member access.
 
 
-==== taggedTemplatesWithTypeArguments2.ts (7 errors) ====
+==== taggedTemplatesWithTypeArguments2.ts (4 errors) ====
     export interface SomethingTaggable {
         <T>(t: TemplateStringsArray, ...args: T[]): SomethingNewable;
     }
@@= skipped -20, +17 lines =@@
     const a = new tag `${100} ${200}`<string>("hello", "world");
     
     const b = new tag<number> `${"hello"} ${"world"}`(100, 200);
-                                 ~~~~~~~
-!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
     
     const c = new tag<number> `${100} ${200}`<string>("hello", "world");
     
     const d = new tag<number> `${"hello"} ${"world"}`<string>(100, 200);
-                                 ~~~~~~~
-!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
-                                                              ~~~
-!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
     
     /**
      * Testing ASI. This should never parse as
