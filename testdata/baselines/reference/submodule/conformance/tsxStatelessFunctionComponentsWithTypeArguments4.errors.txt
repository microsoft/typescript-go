error TS2318: Cannot find global type 'Array'.
error TS2318: Cannot find global type 'Boolean'.
error TS2318: Cannot find global type 'Function'.
error TS2318: Cannot find global type 'IArguments'.
error TS2318: Cannot find global type 'Number'.
error TS2318: Cannot find global type 'Object'.
error TS2318: Cannot find global type 'RegExp'.
error TS2318: Cannot find global type 'String'.
file.tsx(1,24): error TS2307: Cannot find module 'react' or its corresponding type declarations.
file.tsx(3,42): error TS2503: Cannot find namespace 'JSX'.
file.tsx(4,89): error TS2503: Cannot find namespace 'JSX'.
file.tsx(5,63): error TS2503: Cannot find namespace 'JSX'.


!!! error TS2318: Cannot find global type 'Array'.
!!! error TS2318: Cannot find global type 'Boolean'.
!!! error TS2318: Cannot find global type 'Function'.
!!! error TS2318: Cannot find global type 'IArguments'.
!!! error TS2318: Cannot find global type 'Number'.
!!! error TS2318: Cannot find global type 'Object'.
!!! error TS2318: Cannot find global type 'RegExp'.
!!! error TS2318: Cannot find global type 'String'.
==== file.tsx (4 errors) ====
    import React = require('react')
                           ~~~~~~~
!!! error TS2307: Cannot find module 'react' or its corresponding type declarations.
    
    declare function OverloadComponent<U>(): JSX.Element;
                                             ~~~
!!! error TS2503: Cannot find namespace 'JSX'.
    declare function OverloadComponent<U>(attr: {b: U, a: string, "ignore-prop": boolean}): JSX.Element;
                                                                                            ~~~
!!! error TS2503: Cannot find namespace 'JSX'.
    declare function OverloadComponent<T, U>(attr: {b: U, a: T}): JSX.Element;
                                                                  ~~~
!!! error TS2503: Cannot find namespace 'JSX'.
    
    // Error
    function Baz<T extends {b: number}, U extends {a: boolean, b:string}>(arg1: T, arg2: U) {
        let a0 = <OverloadComponent a={arg1.b}/>
        let a2 = <OverloadComponent {...arg1} ignore-prop />  // missing a
    }