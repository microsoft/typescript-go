error TS2318: Cannot find global type 'Array'.
error TS2318: Cannot find global type 'Function'.
error TS2318: Cannot find global type 'IArguments'.
error TS2318: Cannot find global type 'IterableIterator'.
error TS2318: Cannot find global type 'RegExp'.
error TS2318: Cannot find global type 'String'.
error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
error TS2552: Cannot find name 'Number'. Did you mean 'number'?
error TS2552: Cannot find name 'Object'. Did you mean 'object'?
generatorTypeCheck46.ts(1,45): error TS2304: Cannot find name 'Iterable'.
generatorTypeCheck46.ts(4,12): error TS2488: Type '{ [x: number]: () => {}; }' must have a '[Symbol.iterator]()' method that returns an iterator.
generatorTypeCheck46.ts(5,11): error TS2304: Cannot find name 'Symbol'.


!!! error TS2318: Cannot find global type 'Array'.
!!! error TS2318: Cannot find global type 'Function'.
!!! error TS2318: Cannot find global type 'IArguments'.
!!! error TS2318: Cannot find global type 'IterableIterator'.
!!! error TS2318: Cannot find global type 'RegExp'.
!!! error TS2318: Cannot find global type 'String'.
!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
==== generatorTypeCheck46.ts (3 errors) ====
    declare function foo<T, U>(x: T, fun: () => Iterable<(x: T) => U>, fun2: (y: U) => T): T;
                                                ~~~~~~~~
!!! error TS2304: Cannot find name 'Iterable'.
    
    foo("", function* () {
        yield* {
               ~
            *[Symbol.iterator]() {
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              ~~~~~~
!!! error TS2304: Cannot find name 'Symbol'.
                yield x => x.length
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
    ~~~~~~~~~
        }
    ~~~~~
!!! error TS2488: Type '{ [x: number]: () => {}; }' must have a '[Symbol.iterator]()' method that returns an iterator.
    }, p => undefined); // T is fixed, should be string