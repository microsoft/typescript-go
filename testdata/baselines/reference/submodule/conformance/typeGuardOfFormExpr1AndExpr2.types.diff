--- old.typeGuardOfFormExpr1AndExpr2.types
+++ new.typeGuardOfFormExpr1AndExpr2.types
@@= skipped -40, +40 lines =@@
 if (typeof strOrNumOrBool !== "string" && typeof strOrNumOrBool !== "number") {
 >typeof strOrNumOrBool !== "string" && typeof strOrNumOrBool !== "number" : boolean
 >typeof strOrNumOrBool !== "string" : boolean
->typeof strOrNumOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBool : string | number | boolean
 >"string" : "string"
 >typeof strOrNumOrBool !== "number" : boolean
->typeof strOrNumOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBool : number | boolean
 >"number" : "number"
 
@@= skipped -24, +24 lines =@@
 >typeof strOrNumOrBoolOrC !== "string" && typeof strOrNumOrBoolOrC !== "number" && typeof strOrNumOrBoolOrC !== "boolean" : boolean
 >typeof strOrNumOrBoolOrC !== "string" && typeof strOrNumOrBoolOrC !== "number" : boolean
 >typeof strOrNumOrBoolOrC !== "string" : boolean
->typeof strOrNumOrBoolOrC : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBoolOrC : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBoolOrC : string | number | boolean | C
 >"string" : "string"
 >typeof strOrNumOrBoolOrC !== "number" : boolean
->typeof strOrNumOrBoolOrC : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBoolOrC : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBoolOrC : number | boolean | C
 >"number" : "number"
 >typeof strOrNumOrBoolOrC !== "boolean" : boolean
->typeof strOrNumOrBoolOrC : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBoolOrC : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBoolOrC : boolean | C
 >"boolean" : "boolean"
 
@@= skipped -28, +28 lines =@@
 >typeof strOrNumOrBoolOrC !== "string" && typeof strOrNumOrBoolOrC !== "number" && typeof strOrNumOrBool === "boolean" : boolean
 >typeof strOrNumOrBoolOrC !== "string" && typeof strOrNumOrBoolOrC !== "number" : boolean
 >typeof strOrNumOrBoolOrC !== "string" : boolean
->typeof strOrNumOrBoolOrC : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBoolOrC : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBoolOrC : string | number | boolean | C
 >"string" : "string"
 >typeof strOrNumOrBoolOrC !== "number" : boolean
->typeof strOrNumOrBoolOrC : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBoolOrC : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBoolOrC : number | boolean | C
 >"number" : "number"
 >typeof strOrNumOrBool === "boolean" : boolean
->typeof strOrNumOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBool : string | number | boolean
 >"boolean" : "boolean"
 
@@= skipped -35, +35 lines =@@
 if (typeof strOrNumOrBool !== "string" && numOrBool !== strOrNumOrBool) {
 >typeof strOrNumOrBool !== "string" && numOrBool !== strOrNumOrBool : boolean
 >typeof strOrNumOrBool !== "string" : boolean
->typeof strOrNumOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBool : string | number | boolean
 >"string" : "string"
 >numOrBool !== strOrNumOrBool : boolean
