--- old.typeGuardsInFunctionAndModuleBlock.types
+++ new.typeGuardsInFunctionAndModuleBlock.types
@@= skipped -3, +3 lines =@@
 // typeguards are scoped in function/module block
 
 function foo(x: number | string | boolean) {
->foo : (x: number | string | boolean) => string
+>foo : (x: string | number | boolean) => string
 >x : string | number | boolean
 
     return typeof x === "string"
 >typeof x === "string"        ? x        : function f() {            var b = x; // number | boolean            return typeof x === "boolean"                ? x.toString() // boolean                : x.toString(); // number        } () : string
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -25, +25 lines =@@
             return typeof x === "boolean"
 >typeof x === "boolean"                ? x.toString() // boolean                : x.toString() : string
 >typeof x === "boolean" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number | boolean
 >"boolean" : "boolean"
 
@@= skipped -19, +19 lines =@@
         } ();
 }
 function foo2(x: number | string | boolean) {
->foo2 : (x: number | string | boolean) => string
+>foo2 : (x: string | number | boolean) => string
 >x : string | number | boolean
 
     return typeof x === "string"
 >typeof x === "string"        ? x        : function f(a: number | boolean) {            var b = x; // new scope - number | boolean            return typeof x === "boolean"                ? x.toString() // boolean                : x.toString(); // number        } (x) : string
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -26, +26 lines =@@
             return typeof x === "boolean"
 >typeof x === "boolean"                ? x.toString() // boolean                : x.toString() : string
 >typeof x === "boolean" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number | boolean
 >"boolean" : "boolean"
 
@@= skipped -20, +20 lines =@@
 >x : number | boolean
 }
 function foo3(x: number | string | boolean) {
->foo3 : (x: number | string | boolean) => string
+>foo3 : (x: string | number | boolean) => string
 >x : string | number | boolean
 
     return typeof x === "string"
 >typeof x === "string"        ? x        : (() => {            var b = x; // new scope - number | boolean            return typeof x === "boolean"                ? x.toString() // boolean                : x.toString(); // number        })() : string
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -25, +25 lines =@@
             return typeof x === "boolean"
 >typeof x === "boolean"                ? x.toString() // boolean                : x.toString() : string
 >typeof x === "boolean" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number | boolean
 >"boolean" : "boolean"
 
@@= skipped -19, +19 lines =@@
         })();
 }
 function foo4(x: number | string | boolean) {
->foo4 : (x: number | string | boolean) => string
+>foo4 : (x: string | number | boolean) => string
 >x : string | number | boolean
 
     return typeof x === "string"
 >typeof x === "string"        ? x        : ((a: number | boolean) => {            var b = x; // new scope - number | boolean            return typeof x === "boolean"                ? x.toString() // boolean                : x.toString(); // number        })(x) : string
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -26, +26 lines =@@
             return typeof x === "boolean"
 >typeof x === "boolean"                ? x.toString() // boolean                : x.toString() : string
 >typeof x === "boolean" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number | boolean
 >"boolean" : "boolean"
 
@@= skipped -21, +21 lines =@@
 }
 // Type guards do not affect nested function declarations
 function foo5(x: number | string | boolean) {
->foo5 : (x: number | string | boolean) => void
+>foo5 : (x: string | number | boolean) => void
 >x : string | number | boolean
 
     if (typeof x === "string") {
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -40, +40 lines =@@
 
         if (typeof x === "string") {
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -15, +15 lines =@@
 >y : string
 >typeof x === "boolean"            ? x.toString() // boolean            : x.toString() : string
 >typeof x === "boolean" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number | boolean
 >"boolean" : "boolean"
 
@@= skipped -37, +37 lines =@@
 
         if (typeof x === "string") {
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | boolean
 >"string" : "string"
 
@@= skipped -15, +15 lines =@@
 >y : string
 >typeof x === "boolean"            ? x.toString() // boolean            : x.toString() : string
 >typeof x === "boolean" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : number | boolean
 >"boolean" : "boolean"
 
