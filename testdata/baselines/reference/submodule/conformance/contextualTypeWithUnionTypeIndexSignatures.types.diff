--- old.contextualTypeWithUnionTypeIndexSignatures.types
+++ new.contextualTypeWithUnionTypeIndexSignatures.types
@@= skipped -3, +3 lines =@@
 //When used as a contextual type, a union type U has those members that are present in any of 
 // its constituent types, with types that are unions of the respective members in the constituent types. 
 interface SomeType {
+>SomeType : SomeType
+
     (a: number): number;
 >a : number
->  : ^^^^^^
 }
 interface SomeType2 {
+>SomeType2 : SomeType2
+
     (a: number): string;
 >a : number
->  : ^^^^^^
 }
 
 interface IWithNoStringIndexSignature {
+>IWithNoStringIndexSignature : IWithNoStringIndexSignature
+
     foo: string;
 >foo : string
->    : ^^^^^^
 }
 interface IWithNoNumberIndexSignature {
+>IWithNoNumberIndexSignature : IWithNoNumberIndexSignature
+
     0: string;
 >0 : string
->  : ^^^^^^
 }
 interface IWithStringIndexSignature1 {
+>IWithStringIndexSignature1 : IWithStringIndexSignature1
+
     [a: string]: SomeType;
 >a : string
->  : ^^^^^^
 }
 interface IWithStringIndexSignature2 {
+>IWithStringIndexSignature2 : IWithStringIndexSignature2
+
     [a: string]: SomeType2;
 >a : string
->  : ^^^^^^
 }
 interface IWithNumberIndexSignature1 {
+>IWithNumberIndexSignature1 : IWithNumberIndexSignature1
+
     [a: number]: SomeType;
 >a : number
->  : ^^^^^^
 }
 interface IWithNumberIndexSignature2 {
+>IWithNumberIndexSignature2 : IWithNumberIndexSignature2
+
     [a: number]: SomeType2;
 >a : number
->  : ^^^^^^
 }
 
 // When an object literal is contextually typed by a type that includes a string index signature, 
@@= skipped -54, +62 lines =@@
 // the types of the string index signatures from each type in S.
 var x: IWithNoStringIndexSignature | IWithStringIndexSignature1 = { z: a => a }; // a should be number
 >x : IWithNoStringIndexSignature | IWithStringIndexSignature1
->  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >{ z: a => a } : { z: (a: number) => number; }
->              : ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
 >z : (a: number) => number
->  : ^ ^^^^^^^^^^^^^^^^^^^
 >a => a : (a: number) => number
->       : ^ ^^^^^^^^^^^^^^^^^^^
 >a : number
->  : ^^^^^^
 >a : number
->  : ^^^^^^
 
 var x: IWithNoStringIndexSignature | IWithStringIndexSignature1 = { foo: a => a }; // a should be number (because of index signature of IWithStringIndexSignature1)
 >x : IWithNoStringIndexSignature | IWithStringIndexSignature1
->  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >{ foo: a => a } : { foo: (a: number) => number; }
->                : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
 >foo : (a: number) => number
->    : ^ ^^^^^^^^^^^^^^^^^^^
 >a => a : (a: number) => number
->       : ^ ^^^^^^^^^^^^^^^^^^^
 >a : number
->  : ^^^^^^
 >a : number
->  : ^^^^^^
 
 var x: IWithNoStringIndexSignature | IWithStringIndexSignature1 = { foo: "hello" }; 
 >x : IWithNoStringIndexSignature | IWithStringIndexSignature1
->  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >{ foo: "hello" } : { foo: string; }
->                 : ^^^^^^^^^^^^^^^^
 >foo : string
->    : ^^^^^^
 >"hello" : "hello"
->        : ^^^^^^^
 
 var x2: IWithStringIndexSignature1 | IWithStringIndexSignature2 = { z: a => a.toString() }; // a should be number
 >x2 : IWithStringIndexSignature1 | IWithStringIndexSignature2
->   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >{ z: a => a.toString() } : { z: (a: number) => string; }
->                         : ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
 >z : (a: number) => string
->  : ^ ^^^^^^^^^^^^^^^^^^^
 >a => a.toString() : (a: number) => string
->                  : ^ ^^^^^^^^^^^^^^^^^^^
 >a : number
->  : ^^^^^^
 >a.toString() : string
->             : ^^^^^^
 >a.toString : (radix?: number) => string
->           : ^     ^^^      ^^^^^      
 >a : number
->  : ^^^^^^
 >toString : (radix?: number) => string
->         : ^     ^^^      ^^^^^      
 
 var x2: IWithStringIndexSignature1 | IWithStringIndexSignature2 = { z: a => a }; // a should be number
 >x2 : IWithStringIndexSignature1 | IWithStringIndexSignature2
->   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >{ z: a => a } : { z: (a: number) => number; }
->              : ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
 >z : (a: number) => number
->  : ^ ^^^^^^^^^^^^^^^^^^^
 >a => a : (a: number) => number
->       : ^ ^^^^^^^^^^^^^^^^^^^
 >a : number
->  : ^^^^^^
 >a : number
->  : ^^^^^^
 
 
 // Let S be the set of types in U that has a numeric index signature.
@@= skipped -76, +45 lines =@@
 // the types of the numeric index signatures from each type in S.
 var x3: IWithNoNumberIndexSignature | IWithNumberIndexSignature1 = { 1: a => a }; // a should be number
 >x3 : IWithNoNumberIndexSignature | IWithNumberIndexSignature1
->   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >{ 1: a => a } : { 1: (a: number) => number; }
->              : ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
 >1 : (a: number) => number
->  : ^ ^^^^^^^^^^^^^^^^^^^
 >a => a : (a: number) => number
->       : ^ ^^^^^^^^^^^^^^^^^^^
 >a : number
->  : ^^^^^^
 >a : number
->  : ^^^^^^
 
 var x3: IWithNoNumberIndexSignature | IWithNumberIndexSignature1 = { 0: a => a }; // a should be number (because of index signature of IWithNumberIndexSignature1)
 >x3 : IWithNoNumberIndexSignature | IWithNumberIndexSignature1
->   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >{ 0: a => a } : { 0: (a: number) => number; }
->              : ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
 >0 : (a: number) => number
->  : ^ ^^^^^^^^^^^^^^^^^^^
 >a => a : (a: number) => number
->       : ^ ^^^^^^^^^^^^^^^^^^^
 >a : number
->  : ^^^^^^
 >a : number
->  : ^^^^^^
 
 var x3: IWithNoNumberIndexSignature | IWithNumberIndexSignature1 = { 0: "hello" };
 >x3 : IWithNoNumberIndexSignature | IWithNumberIndexSignature1
->   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >{ 0: "hello" } : { 0: string; }
->               : ^^^^^^^^^^^^^^
 >0 : string
->  : ^^^^^^
 >"hello" : "hello"
->        : ^^^^^^^
 
 var x4: IWithNumberIndexSignature1 | IWithNumberIndexSignature2 = { 1: a => a.toString() }; // a should be number
 >x4 : IWithNumberIndexSignature1 | IWithNumberIndexSignature2
->   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >{ 1: a => a.toString() } : { 1: (a: number) => string; }
->                         : ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
 >1 : (a: number) => string
->  : ^ ^^^^^^^^^^^^^^^^^^^
 >a => a.toString() : (a: number) => string
->                  : ^ ^^^^^^^^^^^^^^^^^^^
 >a : number
->  : ^^^^^^
 >a.toString() : string
->             : ^^^^^^
 >a.toString : (radix?: number) => string
->           : ^     ^^^      ^^^^^      
 >a : number
->  : ^^^^^^
 >toString : (radix?: number) => string
->         : ^     ^^^      ^^^^^      
 
 var x4: IWithNumberIndexSignature1 | IWithNumberIndexSignature2 = { 1: a => a }; // a should be number
 >x4 : IWithNumberIndexSignature1 | IWithNumberIndexSignature2
->   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >{ 1: a => a } : { 1: (a: number) => number; }
->              : ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
 >1 : (a: number) => number
->  : ^ ^^^^^^^^^^^^^^^^^^^
 >a => a : (a: number) => number
->       : ^ ^^^^^^^^^^^^^^^^^^^
 >a : number
->  : ^^^^^^
 >a : number
->  : ^^^^^^
 
