--- old.noInfer.types
+++ new.noInfer.types
@@= skipped -26, +26 lines =@@
 // NoInfer<T> is preserved for object types
 
 type T10 = NoInfer<string[]>;
->T10 : NoInfer<string[]>
+>T10 : string[]
 
 type T11 = NoInfer<{ x: string }>;
->T11 : NoInfer<{ x: string; }>
+>T11 : { x: string; }
 >x : string
 
 // NoInfer<T> is erased if it has no effect
 
 type T20<T> = NoInfer<NoInfer<T>>;
->T20 : NoInfer<T>
+>T20 : T
+>T : T
 
 type T21<T> = NoInfer<NoInfer<T> & string>;
->T21 : NoInfer<T> & string
+>T21 : T & string
+>T : T
 
 type T22<T> = NoInfer<NoInfer<T> & string[]>;
->T22 : NoInfer<NoInfer<T> & string[]>
+>T22 : T & string[]
+>T : T
 
 // keyof NoInfer<T> is transformed into NoInfer<keyof T>
 
@@= skipped -25, +28 lines =@@
 >b : string
 
 type T31<T> = keyof NoInfer<T>;
->T31 : NoInfer<keyof T>
+>T31 : keyof T
+>T : T
 
 type T32 = { [K in keyof NoInfer<{ a: string, b: string }>]: K };
 >T32 : T32
+>K : K
 >a : string
 >b : string
 
 declare function foo1<T extends string>(a: T, b: NoInfer<T>): void
->foo1 : <T extends string>(a: T, b: NoInfer<T>) => void
+>foo1 : <T extends string>(a: T, b: T) => void
+>T : T
 >a : T
->b : NoInfer<T>
+>b : T
 
 declare function foo2<T extends string>(a: T, b: NoInfer<T>[]): void
->foo2 : <T extends string>(a: T, b: NoInfer<T>[]) => void
+>foo2 : <T extends string>(a: T, b: T[]) => void
+>T : T
 >a : T
->b : NoInfer<T>[]
+>b : T[]
 
 declare function foo3<T extends string>(a: T, b: NoInfer<T[]>): void
->foo3 : <T extends string>(a: T, b: NoInfer<T[]>) => void
+>foo3 : <T extends string>(a: T, b: T[]) => void
+>T : T
 >a : T
->b : NoInfer<T[]>
+>b : T[]
 
 declare function foo4<T extends string>(a: T, b: { x: NoInfer<T> }): void
->foo4 : <T extends string>(a: T, b: { x: NoInfer<T>; }) => void
+>foo4 : <T extends string>(a: T, b: { x: T; }) => void
+>T : T
 >a : T
->b : { x: NoInfer<T>; }
->x : NoInfer<T>
+>b : { x: T; }
+>x : T
 
 declare function foo5<T extends string>(a: T, b: NoInfer<{ x: T }>): void
->foo5 : <T extends string>(a: T, b: NoInfer<{ x: T; }>) => void
+>foo5 : <T extends string>(a: T, b: { x: T; }) => void
+>T : T
 >a : T
->b : NoInfer<{ x: T; }>
+>b : { x: T; }
 >x : T
 
 foo1('foo', 'foo') // ok
 >foo1('foo', 'foo') : void
->foo1 : <T extends string>(a: T, b: NoInfer<T>) => void
+>foo1 : <T extends string>(a: T, b: T) => void
 >'foo' : "foo"
 >'foo' : "foo"
 
 foo1('foo', 'bar') // error
 >foo1('foo', 'bar') : void
->foo1 : <T extends string>(a: T, b: NoInfer<T>) => void
+>foo1 : <T extends string>(a: T, b: T) => void
 >'foo' : "foo"
 >'bar' : "bar"
 
 foo2('foo', ['bar']) // error
 >foo2('foo', ['bar']) : void
->foo2 : <T extends string>(a: T, b: NoInfer<T>[]) => void
+>foo2 : <T extends string>(a: T, b: T[]) => void
 >'foo' : "foo"
 >['bar'] : "bar"[]
 >'bar' : "bar"
 
 foo3('foo', ['bar']) // error
 >foo3('foo', ['bar']) : void
->foo3 : <T extends string>(a: T, b: NoInfer<T[]>) => void
+>foo3 : <T extends string>(a: T, b: T[]) => void
 >'foo' : "foo"
 >['bar'] : "bar"[]
 >'bar' : "bar"
 
 foo4('foo', { x: 'bar' }) // error
 >foo4('foo', { x: 'bar' }) : void
->foo4 : <T extends string>(a: T, b: { x: NoInfer<T>; }) => void
+>foo4 : <T extends string>(a: T, b: { x: T; }) => void
 >'foo' : "foo"
 >{ x: 'bar' } : { x: "bar"; }
 >x : "bar"
@@= skipped -70, +77 lines =@@
 
 foo5('foo', { x: 'bar' }) // error
 >foo5('foo', { x: 'bar' }) : void
->foo5 : <T extends string>(a: T, b: NoInfer<{ x: T; }>) => void
+>foo5 : <T extends string>(a: T, b: { x: T; }) => void
 >'foo' : "foo"
 >{ x: 'bar' } : { x: "bar"; }
 >x : "bar"
@@= skipped -16, +16 lines =@@
 >woof : () => void
 
 declare function doSomething<T>(value: T, getDefault: () => NoInfer<T>): void;
->doSomething : <T>(value: T, getDefault: () => NoInfer<T>) => void
+>doSomething : <T>(value: T, getDefault: () => T) => void
+>T : T
 >value : T
->getDefault : () => NoInfer<T>
+>getDefault : () => T
 
 doSomething(new Animal(), () => new Animal()); // ok
 >doSomething(new Animal(), () => new Animal()) : void
->doSomething : <T>(value: T, getDefault: () => NoInfer<T>) => void
+>doSomething : <T>(value: T, getDefault: () => T) => void
 >new Animal() : Animal
 >Animal : typeof Animal
 >() => new Animal() : () => Animal
@@= skipped -15, +16 lines =@@
 
 doSomething(new Animal(), () => new Dog()); // ok
 >doSomething(new Animal(), () => new Dog()) : void
->doSomething : <T>(value: T, getDefault: () => NoInfer<T>) => void
+>doSomething : <T>(value: T, getDefault: () => T) => void
 >new Animal() : Animal
 >Animal : typeof Animal
 >() => new Dog() : () => Dog
@@= skipped -9, +9 lines =@@
 
 doSomething(new Dog(), () => new Animal()); // error
 >doSomething(new Dog(), () => new Animal()) : void
->doSomething : <T>(value: T, getDefault: () => NoInfer<T>) => void
+>doSomething : <T>(value: T, getDefault: () => T) => void
 >new Dog() : Dog
 >Dog : typeof Dog
 >() => new Animal() : () => Animal
@@= skipped -8, +8 lines =@@
 >Animal : typeof Animal
 
 declare function assertEqual<T>(actual: T, expected: NoInfer<T>): boolean;
->assertEqual : <T>(actual: T, expected: NoInfer<T>) => boolean
+>assertEqual : <T>(actual: T, expected: T) => boolean
+>T : T
 >actual : T
->expected : NoInfer<T>
+>expected : T
 
 assertEqual({ x: 1 }, { x: 3 }); // ok
 >assertEqual({ x: 1 }, { x: 3 }) : boolean
->assertEqual : <T>(actual: T, expected: NoInfer<T>) => boolean
+>assertEqual : <T>(actual: T, expected: T) => boolean
 >{ x: 1 } : { x: number; }
 >x : number
 >1 : 1
@@= skipped -24, +25 lines =@@
 
 assertEqual(g, { x: 3 }); // error
 >assertEqual(g, { x: 3 }) : boolean
->assertEqual : <T>(actual: T, expected: NoInfer<T>) => boolean
+>assertEqual : <T>(actual: T, expected: T) => boolean
 >g : { x: number; y: number; }
 >{ x: 3 } : { x: number; }
 >x : number
 >3 : 3
 
 declare function invoke<T, R>(func: (value: T) => R, value: NoInfer<T>): R;
->invoke : <T, R>(func: (value: T) => R, value: NoInfer<T>) => R
+>invoke : <T, R>(func: (value: T) => R, value: T) => R
+>T : T
+>R : R
 >func : (value: T) => R
 >value : T
->value : NoInfer<T>
+>value : T
 
 declare function test(value: { x: number; }): number;
 >test : (value: { x: number; }) => number
@@= skipped -19, +21 lines =@@
 
 invoke(test, { x: 1, y: 2 }); // error
 >invoke(test, { x: 1, y: 2 }) : number
->invoke : <T, R>(func: (value: T) => R, value: NoInfer<T>) => R
+>invoke : <T, R>(func: (value: T) => R, value: T) => R
 >test : (value: { x: number; }) => number
 >{ x: 1, y: 2 } : { x: number; y: number; }
 >x : number
@@= skipped -19, +19 lines =@@
 
 type Component<Props> = { props: Props; };
 >Component : Component<Props>
+>Props : Props
 >props : Props
 
 declare function doWork<Props>(Component: Component<Props>, props: NoInfer<Props>): void;
->doWork : <Props>(Component: Component<Props>, props: NoInfer<Props>) => void
+>doWork : <Props>(Component: Component<Props>, props: Props) => void
+>Props : Props
 >Component : Component<Props>
->props : NoInfer<Props>
+>props : Props
 
 declare const comp: Component<{ foo: number }>;
 >comp : Component<{ foo: number; }>
@@= skipped -13, +15 lines =@@
 
 doWork(comp, { foo: 42 }); // ok
 >doWork(comp, { foo: 42 }) : void
->doWork : <Props>(Component: Component<Props>, props: NoInfer<Props>) => void
+>doWork : <Props>(Component: Component<Props>, props: Props) => void
 >comp : Component<{ foo: number; }>
 >{ foo: 42 } : { foo: number; }
 >foo : number
@@= skipped -8, +8 lines =@@
 
 doWork(comp, {}); // error
 >doWork(comp, {}) : void
->doWork : <Props>(Component: Component<Props>, props: NoInfer<Props>) => void
+>doWork : <Props>(Component: Component<Props>, props: Props) => void
 >comp : Component<{ foo: number; }>
 >{} : {}
 
 declare function mutate<T>(callback: (a: NoInfer<T>, b: number) => T): T;
->mutate : <T>(callback: (a: NoInfer<T>, b: number) => T) => T
->callback : (a: NoInfer<T>, b: number) => T
->a : NoInfer<T>
+>mutate : <T>(callback: (a: T, b: number) => T) => T
+>T : T
+>callback : (a: T, b: number) => T
+>a : T
 >b : number
 
 const mutate1 = mutate((a, b) => b);
 >mutate1 : unknown
 >mutate((a, b) => b) : unknown
->mutate : <T>(callback: (a: NoInfer<T>, b: number) => T) => T
+>mutate : <T>(callback: (a: T, b: number) => T) => T
 >(a, b) => b : (a: unknown, b: number) => number
 >a : unknown
 >b : number
@@= skipped -21, +22 lines =@@
 
 declare class ExampleClass<T> {}
 >ExampleClass : ExampleClass<T>
+>T : T
 
 class OkClass<T> {
 >OkClass : OkClass<T>
+>T : T
 
     constructor(private clazz: ExampleClass<T>, private _value: NoInfer<T>) {}
 >clazz : ExampleClass<T>
->_value : NoInfer<T>
+>_value : T
 
     get value(): T {
 >value : T
@@= skipped -19, +21 lines =@@
 }
 class OkClass2<T> {
 >OkClass2 : OkClass2<T>
+>T : T
 
     constructor(private clazz: ExampleClass<T>, public _value: NoInfer<T>) {}
 >clazz : ExampleClass<T>
->_value : NoInfer<T>
+>_value : T
 }
 
