--- old.intersectionOfUnionOfUnitTypes.symbols
+++ new.intersectionOfUnionOfUnitTypes.symbols
@@= skipped -4, +4 lines =@@
 
 const enum E { A, B, C, D, E, F }
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->A : Symbol(E.A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
->B : Symbol(E.B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
->D : Symbol(E.D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
->E : Symbol(E.E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
->F : Symbol(E.F, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 29))
+>A : Symbol(A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
+>B : Symbol(B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>D : Symbol(D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
+>E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
+>F : Symbol(F, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 29))
 
 let x0: ('a' | 'b' | 'c') & ('a' | 'b' | 'c');  // 'a' | 'b' | 'c'
 >x0 : Symbol(x0, Decl(intersectionOfUnionOfUnitTypes.ts, 4, 3))
@@= skipped -46, +46 lines =@@
 let z0: (E.A | E.B | E.C) & (E.A | E.B | E.C);  // E.A | E.B | E.C
 >z0 : Symbol(z0, Decl(intersectionOfUnionOfUnitTypes.ts, 18, 3))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->A : Symbol(E.A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
+>A : Symbol(A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->B : Symbol(E.B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
+>B : Symbol(B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->A : Symbol(E.A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
+>A : Symbol(A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->B : Symbol(E.B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
+>B : Symbol(B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 
 let z1: (E.A | E.B | E.C) & (E.B | E.C | E.D);  // E.B | E.C
 >z1 : Symbol(z1, Decl(intersectionOfUnionOfUnitTypes.ts, 19, 3))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->A : Symbol(E.A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
+>A : Symbol(A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->B : Symbol(E.B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
+>B : Symbol(B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->B : Symbol(E.B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
+>B : Symbol(B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->D : Symbol(E.D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
+>D : Symbol(D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
 
 let z2: (E.A | E.B | E.C) & (E.C | E.D | E.E);  // E.C
 >z2 : Symbol(z2, Decl(intersectionOfUnionOfUnitTypes.ts, 20, 3))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->A : Symbol(E.A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
+>A : Symbol(A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->B : Symbol(E.B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
+>B : Symbol(B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->D : Symbol(E.D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
+>D : Symbol(D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->E : Symbol(E.E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
+>E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
 
 let z3: (E.A | E.B | E.C) & (E.D | E.E | E.F);  // never
 >z3 : Symbol(z3, Decl(intersectionOfUnionOfUnitTypes.ts, 21, 3))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->A : Symbol(E.A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
+>A : Symbol(A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->B : Symbol(E.B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
+>B : Symbol(B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->D : Symbol(E.D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
+>D : Symbol(D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->E : Symbol(E.E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
+>E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->F : Symbol(E.F, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 29))
+>F : Symbol(F, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 29))
 
 let z4: (E.A | E.B | E.C) & (E.B | E.C | E.D) & (E.C | E.D | E.E);  // E.C
 >z4 : Symbol(z4, Decl(intersectionOfUnionOfUnitTypes.ts, 22, 3))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->A : Symbol(E.A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
+>A : Symbol(A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->B : Symbol(E.B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
+>B : Symbol(B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->B : Symbol(E.B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
+>B : Symbol(B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->D : Symbol(E.D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
+>D : Symbol(D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->D : Symbol(E.D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
+>D : Symbol(D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->E : Symbol(E.E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
+>E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
 
 let z5: (E.A | E.B | E.C) & (E.B | E.C | E.D) & (E.C | E.D | E.E) & (E.D | E.E | E.F);  // never
 >z5 : Symbol(z5, Decl(intersectionOfUnionOfUnitTypes.ts, 23, 3))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->A : Symbol(E.A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
+>A : Symbol(A, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 14))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->B : Symbol(E.B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
+>B : Symbol(B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->B : Symbol(E.B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
+>B : Symbol(B, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 17))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->D : Symbol(E.D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
+>D : Symbol(D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->C : Symbol(E.C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
+>C : Symbol(C, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 20))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->D : Symbol(E.D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
+>D : Symbol(D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->E : Symbol(E.E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
+>E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->D : Symbol(E.D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
+>D : Symbol(D, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 23))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->E : Symbol(E.E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
+>E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 26))
 >E : Symbol(E, Decl(intersectionOfUnionOfUnitTypes.ts, 0, 0))
->F : Symbol(E.F, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 29))
+>F : Symbol(F, Decl(intersectionOfUnionOfUnitTypes.ts, 2, 29))
 
