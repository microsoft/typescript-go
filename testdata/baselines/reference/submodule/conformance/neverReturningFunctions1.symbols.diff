--- old.neverReturningFunctions1.symbols
+++ new.neverReturningFunctions1.symbols
@@= skipped -19, +19 lines =@@
 >fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 0, 0))
 
     x.length;  // string
->x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 4, 13))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 }
 
 function f02(x: number): number {
@@= skipped -46, +46 lines =@@
 >fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 21, 35))
 
     x.length;  // string
->x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 21, 13))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 }
 
 function f12(x: number, fail: (message?: string) => never): number {
@@= skipped -53, +53 lines =@@
     if (x === undefined) Debug.fail("undefined argument");
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 42, 13))
 >undefined : Symbol(undefined)
->Debug.fail : Symbol(Debug.fail, Decl(neverReturningFunctions1.ts, 38, 17))
+>Debug.fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 38, 17))
 >Debug : Symbol(Debug, Decl(neverReturningFunctions1.ts, 36, 1))
->fail : Symbol(Debug.fail, Decl(neverReturningFunctions1.ts, 38, 17))
+>fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 38, 17))
 
     x.length;  // string
->x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 42, 13))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 }
 
 function f22(x: number): number {
@@= skipped -19, +19 lines =@@
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 47, 13))
 
     Debug.fail("negative number");
->Debug.fail : Symbol(Debug.fail, Decl(neverReturningFunctions1.ts, 38, 17))
+>Debug.fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 38, 17))
 >Debug : Symbol(Debug, Decl(neverReturningFunctions1.ts, 36, 1))
->fail : Symbol(Debug.fail, Decl(neverReturningFunctions1.ts, 38, 17))
+>fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 38, 17))
 
     x;  // Unreachable
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 47, 13))
@@= skipped -16, +16 lines =@@
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 53, 13))
 
     Debug.fail();
->Debug.fail : Symbol(Debug.fail, Decl(neverReturningFunctions1.ts, 38, 17))
+>Debug.fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 38, 17))
 >Debug : Symbol(Debug, Decl(neverReturningFunctions1.ts, 36, 1))
->fail : Symbol(Debug.fail, Decl(neverReturningFunctions1.ts, 38, 17))
+>fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 38, 17))
 
     x;  // Unreachable
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 53, 13))
@@= skipped -16, +16 lines =@@
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 59, 13))
 
     ((Debug).fail)();
->(Debug).fail : Symbol(Debug.fail, Decl(neverReturningFunctions1.ts, 38, 17))
+>(Debug).fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 38, 17))
 >Debug : Symbol(Debug, Decl(neverReturningFunctions1.ts, 36, 1))
->fail : Symbol(Debug.fail, Decl(neverReturningFunctions1.ts, 38, 17))
+>fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 38, 17))
 
     x;  // Unreachable
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 59, 13))
@@= skipped -12, +12 lines =@@
 >Test : Symbol(Test, Decl(neverReturningFunctions1.ts, 63, 1))
 
     fail(message?: string): never {
->fail : Symbol(Test.fail, Decl(neverReturningFunctions1.ts, 65, 12))
+>fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 65, 12))
 >message : Symbol(message, Decl(neverReturningFunctions1.ts, 66, 9))
 
         throw new Error(message);
@@= skipped -8, +8 lines =@@
 >message : Symbol(message, Decl(neverReturningFunctions1.ts, 66, 9))
     }
     f1(x: string | undefined) {
->f1 : Symbol(Test.f1, Decl(neverReturningFunctions1.ts, 68, 5))
+>f1 : Symbol(f1, Decl(neverReturningFunctions1.ts, 68, 5))
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 69, 7))
 
         if (x === undefined) this.fail("undefined argument");
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 69, 7))
 >undefined : Symbol(undefined)
->this.fail : Symbol(Test.fail, Decl(neverReturningFunctions1.ts, 65, 12))
+>this.fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 65, 12))
 >this : Symbol(Test, Decl(neverReturningFunctions1.ts, 63, 1))
->fail : Symbol(Test.fail, Decl(neverReturningFunctions1.ts, 65, 12))
+>fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 65, 12))
 
         x.length;  // string
->x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 69, 7))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
     }
     f2(x: number): number {
->f2 : Symbol(Test.f2, Decl(neverReturningFunctions1.ts, 72, 5))
+>f2 : Symbol(f2, Decl(neverReturningFunctions1.ts, 72, 5))
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 73, 7))
 
         if (x >= 0) return x;
@@= skipped -24, +24 lines =@@
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 73, 7))
 
         this.fail("negative number");
->this.fail : Symbol(Test.fail, Decl(neverReturningFunctions1.ts, 65, 12))
+>this.fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 65, 12))
 >this : Symbol(Test, Decl(neverReturningFunctions1.ts, 63, 1))
->fail : Symbol(Test.fail, Decl(neverReturningFunctions1.ts, 65, 12))
+>fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 65, 12))
 
         x;  // Unreachable
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 73, 7))
     }
     f3(x: string) {
->f3 : Symbol(Test.f3, Decl(neverReturningFunctions1.ts, 77, 5))
+>f3 : Symbol(f3, Decl(neverReturningFunctions1.ts, 77, 5))
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 78, 7))
 
         x;  // string
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 78, 7))
 
         this.fail();
->this.fail : Symbol(Test.fail, Decl(neverReturningFunctions1.ts, 65, 12))
+>this.fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 65, 12))
 >this : Symbol(Test, Decl(neverReturningFunctions1.ts, 63, 1))
->fail : Symbol(Test.fail, Decl(neverReturningFunctions1.ts, 65, 12))
+>fail : Symbol(fail, Decl(neverReturningFunctions1.ts, 65, 12))
 
         x;  // Unreachable
 >x : Symbol(x, Decl(neverReturningFunctions1.ts, 78, 7))
@@= skipped -201, +201 lines =@@
 >T : Symbol(T, Decl(neverReturningFunctions1.ts, 165, 27))
 
 	attrName?: string;
->attrName : Symbol(Component.attrName, Decl(neverReturningFunctions1.ts, 165, 52))
+>attrName : Symbol(attrName, Decl(neverReturningFunctions1.ts, 165, 52))
 
 	data: T;
->data : Symbol(Component.data, Decl(neverReturningFunctions1.ts, 166, 19))
+>data : Symbol(data, Decl(neverReturningFunctions1.ts, 166, 19))
 >T : Symbol(T, Decl(neverReturningFunctions1.ts, 165, 27))
 
 	dependencies?: string[];
->dependencies : Symbol(Component.dependencies, Decl(neverReturningFunctions1.ts, 167, 9))
+>dependencies : Symbol(dependencies, Decl(neverReturningFunctions1.ts, 167, 9))
 
 	el: any;
->el : Symbol(Component.el, Decl(neverReturningFunctions1.ts, 168, 25))
+>el : Symbol(el, Decl(neverReturningFunctions1.ts, 168, 25))
 
 	id: string;
->id : Symbol(Component.id, Decl(neverReturningFunctions1.ts, 169, 9))
+>id : Symbol(id, Decl(neverReturningFunctions1.ts, 169, 9))
 
 	multiple?: boolean;
->multiple : Symbol(Component.multiple, Decl(neverReturningFunctions1.ts, 170, 12))
+>multiple : Symbol(multiple, Decl(neverReturningFunctions1.ts, 170, 12))
 
 	name: string;
->name : Symbol(Component.name, Decl(neverReturningFunctions1.ts, 171, 20))
+>name : Symbol(name, Decl(neverReturningFunctions1.ts, 171, 20))
 
 	schema: unknown;
->schema : Symbol(Component.schema, Decl(neverReturningFunctions1.ts, 172, 14))
+>schema : Symbol(schema, Decl(neverReturningFunctions1.ts, 172, 14))
 
 	system: any;
->system : Symbol(Component.system, Decl(neverReturningFunctions1.ts, 173, 17))
+>system : Symbol(system, Decl(neverReturningFunctions1.ts, 173, 17))
 
 	init(data?: T): void;
->init : Symbol(Component.init, Decl(neverReturningFunctions1.ts, 174, 13))
+>init : Symbol(init, Decl(neverReturningFunctions1.ts, 174, 13))
 >data : Symbol(data, Decl(neverReturningFunctions1.ts, 176, 6))
 >T : Symbol(T, Decl(neverReturningFunctions1.ts, 165, 27))
 
 	pause(): void;
->pause : Symbol(Component.pause, Decl(neverReturningFunctions1.ts, 176, 22))
+>pause : Symbol(pause, Decl(neverReturningFunctions1.ts, 176, 22))
 
 	play(): void;
->play : Symbol(Component.play, Decl(neverReturningFunctions1.ts, 177, 15))
+>play : Symbol(play, Decl(neverReturningFunctions1.ts, 177, 15))
 
 	remove(): void;
->remove : Symbol(Component.remove, Decl(neverReturningFunctions1.ts, 178, 14))
+>remove : Symbol(remove, Decl(neverReturningFunctions1.ts, 178, 14))
 
 	tick?(time: number, timeDelta: number): void;
->tick : Symbol(Component.tick, Decl(neverReturningFunctions1.ts, 179, 16))
+>tick : Symbol(tick, Decl(neverReturningFunctions1.ts, 179, 16))
 >time : Symbol(time, Decl(neverReturningFunctions1.ts, 180, 7))
 >timeDelta : Symbol(timeDelta, Decl(neverReturningFunctions1.ts, 180, 20))
 
 	update(oldData: T): void;
->update : Symbol(Component.update, Decl(neverReturningFunctions1.ts, 180, 46))
+>update : Symbol(update, Decl(neverReturningFunctions1.ts, 180, 46))
 >oldData : Symbol(oldData, Decl(neverReturningFunctions1.ts, 181, 8))
 >T : Symbol(T, Decl(neverReturningFunctions1.ts, 165, 27))
 
 	updateSchema?(): void;
->updateSchema : Symbol(Component.updateSchema, Decl(neverReturningFunctions1.ts, 181, 26))
+>updateSchema : Symbol(updateSchema, Decl(neverReturningFunctions1.ts, 181, 26))
 
 	extendSchema(update: unknown): void;
->extendSchema : Symbol(Component.extendSchema, Decl(neverReturningFunctions1.ts, 182, 23))
+>extendSchema : Symbol(extendSchema, Decl(neverReturningFunctions1.ts, 182, 23))
 >update : Symbol(update, Decl(neverReturningFunctions1.ts, 184, 14))
 
 	flushToDOM(): void;
->flushToDOM : Symbol(Component.flushToDOM, Decl(neverReturningFunctions1.ts, 184, 37))
+>flushToDOM : Symbol(flushToDOM, Decl(neverReturningFunctions1.ts, 184, 37))
 }
 
 export interface ComponentConstructor<T extends object> {
@@= skipped -74, +74 lines =@@
 >Component : Symbol(Component, Decl(neverReturningFunctions1.ts, 161, 1))
 
 	prototype: T & {
->prototype : Symbol(ComponentConstructor.prototype, Decl(neverReturningFunctions1.ts, 189, 65))
+>prototype : Symbol(prototype, Decl(neverReturningFunctions1.ts, 189, 65))
 >T : Symbol(T, Decl(neverReturningFunctions1.ts, 188, 38))
 
 		name: string;
@@= skipped -75, +75 lines =@@
 >init : Symbol(init, Decl(neverReturningFunctions1.ts, 215, 3))
 
 		this.data.num = 0;
->this.data : Symbol(Component.data, Decl(neverReturningFunctions1.ts, 166, 19))
->data : Symbol(Component.data, Decl(neverReturningFunctions1.ts, 166, 19))
+>this.data : Symbol(data, Decl(neverReturningFunctions1.ts, 166, 19))
+>data : Symbol(data, Decl(neverReturningFunctions1.ts, 166, 19))
 
 		this.el.setAttribute('custom-attribute', 'custom-value');
->this.el : Symbol(Component.el, Decl(neverReturningFunctions1.ts, 168, 25))
->el : Symbol(Component.el, Decl(neverReturningFunctions1.ts, 168, 25))
+>this.el : Symbol(el, Decl(neverReturningFunctions1.ts, 168, 25))
+>el : Symbol(el, Decl(neverReturningFunctions1.ts, 168, 25))
 
 	},
 	update() {},
@@= skipped -30, +30 lines =@@
 		// Reference to system because both were registered with the same name.
 		return f * this.data.num * this.system!.data.counter;
 >f : Symbol(f, Decl(neverReturningFunctions1.ts, 226, 10))
->this.data : Symbol(Component.data, Decl(neverReturningFunctions1.ts, 166, 19))
->data : Symbol(Component.data, Decl(neverReturningFunctions1.ts, 166, 19))
->this.system : Symbol(Component.system, Decl(neverReturningFunctions1.ts, 173, 17))
->system : Symbol(Component.system, Decl(neverReturningFunctions1.ts, 173, 17))
+>this.data : Symbol(data, Decl(neverReturningFunctions1.ts, 166, 19))
+>data : Symbol(data, Decl(neverReturningFunctions1.ts, 166, 19))
+>this.system : Symbol(system, Decl(neverReturningFunctions1.ts, 173, 17))
+>system : Symbol(system, Decl(neverReturningFunctions1.ts, 173, 17))
 	}
 });
 
@@= skipped -13, +13 lines =@@
 >MyThrowable : Symbol(MyThrowable, Decl(neverReturningFunctions1.ts, 230, 3))
 
     throw(): never {
->throw : Symbol(MyThrowable.throw, Decl(neverReturningFunctions1.ts, 234, 19))
+>throw : Symbol(throw, Decl(neverReturningFunctions1.ts, 234, 19))
 
         throw new Error();
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
@@= skipped -12, +12 lines =@@
 >MyThrowable : Symbol(MyThrowable, Decl(neverReturningFunctions1.ts, 230, 3))
 
     err(msg: string): never {
->err : Symbol(SuperThrowable.err, Decl(neverReturningFunctions1.ts, 240, 42))
+>err : Symbol(err, Decl(neverReturningFunctions1.ts, 240, 42))
 >msg : Symbol(msg, Decl(neverReturningFunctions1.ts, 241, 8))
 
         super.throw()
->super.throw : Symbol(MyThrowable.throw, Decl(neverReturningFunctions1.ts, 234, 19))
+>super.throw : Symbol(throw, Decl(neverReturningFunctions1.ts, 234, 19))
 >super : Symbol(MyThrowable, Decl(neverReturningFunctions1.ts, 230, 3))
->throw : Symbol(MyThrowable.throw, Decl(neverReturningFunctions1.ts, 234, 19))
+>throw : Symbol(throw, Decl(neverReturningFunctions1.ts, 234, 19))
     }
     ok(): never {
->ok : Symbol(SuperThrowable.ok, Decl(neverReturningFunctions1.ts, 243, 5))
+>ok : Symbol(ok, Decl(neverReturningFunctions1.ts, 243, 5))
 
         this.throw()
->this.throw : Symbol(MyThrowable.throw, Decl(neverReturningFunctions1.ts, 234, 19))
+>this.throw : Symbol(throw, Decl(neverReturningFunctions1.ts, 234, 19))
 >this : Symbol(SuperThrowable, Decl(neverReturningFunctions1.ts, 238, 1))
->throw : Symbol(MyThrowable.throw, Decl(neverReturningFunctions1.ts, 234, 19))
+>throw : Symbol(throw, Decl(neverReturningFunctions1.ts, 234, 19))
     }
 }
 
@@= skipped -24, +24 lines =@@
 >Services : Symbol(Services, Decl(neverReturningFunctions1.ts, 247, 1))
 
     panic(message: string): never;
->panic : Symbol(Services.panic, Decl(neverReturningFunctions1.ts, 251, 20))
+>panic : Symbol(panic, Decl(neverReturningFunctions1.ts, 251, 20))
 >message : Symbol(message, Decl(neverReturningFunctions1.ts, 252, 10))
 }
 
