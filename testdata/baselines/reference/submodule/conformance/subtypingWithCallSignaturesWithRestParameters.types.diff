--- old.subtypingWithCallSignaturesWithRestParameters.types
+++ new.subtypingWithCallSignaturesWithRestParameters.types
@@= skipped -3, +3 lines =@@
 // call signatures in derived types must have the same or fewer optional parameters as the base type
 
 interface Base { 
+>Base : Base
+
     a: (...args: number[]) => number;
 >a : (...args: number[]) => number
 >args : number[]
@@= skipped -23, +25 lines =@@
 }
 
 interface I1 extends Base {
+>I1 : I1
+
     a: () => number; // ok, same number of required params
 >a : () => number
 }
 
 interface I1B extends Base {
+>I1B : I1B
+
     a: (...args: number[]) => number; // ok, same number of required params
 >a : (...args: number[]) => number
 >args : number[]
 }
 
 interface I1C extends Base {
+>I1C : I1C
+
     a: (...args: string[]) => number; // error, type mismatch
 >a : (...args: string[]) => number
 >args : string[]
 }
 
 interface I2 extends Base {
+>I2 : I2
+
     a: (x?: number) => number; // ok, same number of required params
 >a : (x?: number) => number
 >x : number
 }
 
 interface I2B extends Base {
+>I2B : I2B
+
     a: (x?: number, y?: number, z?: number) => number; // ok, same number of required params
 >a : (x?: number, y?: number, z?: number) => number
 >x : number
@@= skipped -31, +41 lines =@@
 }
 
 interface I3 extends Base {
+>I3 : I3
+
     a: (x: number) => number; // ok, all present params match
 >a : (x: number) => number
 >x : number
 }
 
 interface I3B extends Base {
+>I3B : I3B
+
     a: (x?: string) => number; // error, incompatible type
 >a : (x?: string) => number
 >x : string
@@= skipped -14, +18 lines =@@
 
 
 interface I4 extends Base {
+>I4 : I4
+
     a2: () => number; // ok, fewer required params
 >a2 : () => number
 }
 
 interface I4B extends Base {
+>I4B : I4B
+
     a2: (...args: number[]) => number; // ok, fewer required params
 >a2 : (...args: number[]) => number
 >args : number[]
 }
 
 interface I5 extends Base {
+>I5 : I5
+
     a2: (x?: number) => number; // ok, fewer required params
 >a2 : (x?: number) => number
 >x : number
 }
 
 interface I6 extends Base {
+>I6 : I6
+
     a2: (x: number) => number; // ok, same number of required params
 >a2 : (x: number) => number
 >x : number
 }
 
 interface I6B extends Base {
+>I6B : I6B
+
     a2: (x: number, ...args: number[]) => number; // ok, same number of required params
 >a2 : (x: number, ...args: number[]) => number
 >x : number
@@= skipped -30, +40 lines =@@
 }
 
 interface I6C extends Base {
+>I6C : I6C
+
     a2: (x: number, ...args: string[]) => number; // error
 >a2 : (x: number, ...args: string[]) => number
 >x : number
@@= skipped -7, +9 lines =@@
 }
 
 interface I6D extends Base {
+>I6D : I6D
+
     a2: (x: number, y: number) => number; // ok, all present params match
 >a2 : (x: number, y: number) => number
 >x : number
@@= skipped -7, +9 lines =@@
 }
 
 interface I6E extends Base {
+>I6E : I6E
+
     a2: (x: number, y?: number) => number; // ok, same number of required params
 >a2 : (x: number, y?: number) => number
 >x : number
@@= skipped -9, +11 lines =@@
 
 
 interface I7 extends Base {
+>I7 : I7
+
     a3: () => number; // ok, fewer required params
 >a3 : () => number
 }
 
 interface I8 extends Base {
+>I8 : I8
+
     a3: (x?: number) => number; // ok, fewer required params
 >a3 : (x?: number) => number
 >x : number
 }
 
 interface I9 extends Base {
+>I9 : I9
+
     a3: (x: number) => number; // ok, same number of required params
 >a3 : (x: number) => number
 >x : number
 }
 
 interface I10 extends Base {
+>I10 : I10
+
     a3: (x: number, y: string) => number;  // ok, all present params match
 >a3 : (x: number, y: string) => number
 >x : number
@@= skipped -24, +32 lines =@@
 }
 
 interface I10B extends Base {
+>I10B : I10B
+
     a3: (x: number, y?: number, z?: number) => number;  // error
 >a3 : (x: number, y?: number, z?: number) => number
 >x : number
@@= skipped -8, +10 lines =@@
 }
 
 interface I10C extends Base {
+>I10C : I10C
+
     a3: (x: number, ...z: number[]) => number;  // error
 >a3 : (x: number, ...z: number[]) => number
 >x : number
@@= skipped -7, +9 lines =@@
 }
 
 interface I10D extends Base {
+>I10D : I10D
+
     a3: (x: string, y?: string, z?: string) => number;  // error, incompatible types
 >a3 : (x: string, y?: string, z?: string) => number
 >x : string
@@= skipped -8, +10 lines =@@
 }
 
 interface I10E extends Base {
+>I10E : I10E
+
     a3: (x: number, ...z: string[]) => number;  // error
 >a3 : (x: number, ...z: string[]) => number
 >x : number
@@= skipped -7, +9 lines =@@
 }
 
 interface I11 extends Base {
+>I11 : I11
+
     a4: () => number; // ok, fewer required params
 >a4 : () => number
 }
 
 interface I12 extends Base {
+>I12 : I12
+
     a4: (x?: number, y?: number) => number; // error, type mismatch
 >a4 : (x?: number, y?: number) => number
 >x : number
@@= skipped -12, +16 lines =@@
 }
 
 interface I13 extends Base {
+>I13 : I13
+
     a4: (x: number) => number; // ok, all present params match
 >a4 : (x: number) => number
 >x : number
 }
 
 interface I14 extends Base {
+>I14 : I14
+
     a4: (x: number, y?: number) => number;  // error, second param has type mismatch
 >a4 : (x: number, y?: number) => number
 >x : number
@@= skipped -13, +17 lines =@@
 }
 
 interface I15 extends Base {
+>I15 : I15
+
     a4: (x?: number, y?: string) => number;  // ok, same number of required params with matching types
 >a4 : (x?: number, y?: string) => number
 >x : number
@@= skipped -7, +9 lines =@@
 }
 
 interface I16 extends Base {
+>I16 : I16
+
     a4: (x: number, ...args: string[]) => number;  // error, rest param has type mismatch
 >a4 : (x: number, ...args: string[]) => number
 >x : number
@@= skipped -7, +9 lines =@@
 }
 
 interface I17 extends Base {
+>I17 : I17
+
     a4: (...args: number[]) => number; // error
 >a4 : (...args: number[]) => number
 >args : number[]
