--- old.mappedTypeIndexSignatureModifiers.types
+++ new.mappedTypeIndexSignatureModifiers.types
@@= skipped -3, +3 lines =@@
 // https://github.com/microsoft/TypeScript/issues/14295
 
 interface Obj1 {
+>Obj1 : Obj1
+
     readonly [key: string]: string;
 >key : string
 }
@@= skipped -7, +9 lines =@@
 >Res1 : Res1
 
 interface Obj2 {
+>Obj2 : Obj2
+
     concreteProp: 'hello';
 >concreteProp : "hello"
 
@@= skipped -10, +12 lines =@@
 >Res2 : Res2
 
 interface Obj3 {
+>Obj3 : Obj3
+
     readonly [key: string]: string;
 >key : string
 
@@= skipped -10, +12 lines =@@
 >Res3 : Res3
 
 interface Obj4 {
+>Obj4 : Obj4
+
     [key: string]: string;
 >key : string
 
@@= skipped -10, +12 lines =@@
 >Res4 : Res4
 
 interface Obj5 {
+>Obj5 : Obj5
+
     readonly [key: string]: string;
 >key : string
 
@@= skipped -11, +13 lines =@@
 
 type Identity<T> = { [P in keyof T]: T[P]; }
 >Identity : Identity<T>
+>T : T
+>P : P
 
 interface Obj6 {
+>Obj6 : Obj6
+
     readonly [key: `wow${string}`]: 'foo';
 >key : `wow${string}`
 }
@@= skipped -9, +13 lines =@@
 >Res6 : Identity<Obj6>
 
 interface Obj7 {
+>Obj7 : Obj7
+
     [key: string]: string;
 >key : string
 
@@= skipped -10, +12 lines =@@
 >Res7 : Identity<Obj7>
 
 interface Obj8 {
+>Obj8 : Obj8
+
     readonly [key: string]: string;
 >key : string
 
@@= skipped -11, +13 lines =@@
 
 type StrippingPick<T, K extends keyof T> = { -readonly [P in K]: T[P]; }
 >StrippingPick : StrippingPick<T, K>
+>T : T
+>K : K
+>P : P
 
 interface Obj9 {
+>Obj9 : Obj9
+
     readonly [key: string]: string;
 >key : string
 }
@@= skipped -9, +14 lines =@@
 >Res9 : Res9
 
 interface Obj10 {
+>Obj10 : Obj10
+
     readonly [key: string]: string;
 >key : string
 
@@= skipped -10, +12 lines =@@
 >Res10 : Res10
 
 interface Obj11 {
+>Obj11 : Obj11
+
     [key: string]: string;
 >key : string
 
@@= skipped -10, +12 lines =@@
 >Res11 : Res11
 
 interface Obj12 {
+>Obj12 : Obj12
+
     readonly [key: string]: string;
 >key : string
 
@@= skipped -11, +13 lines =@@
 
 type StrippingIdentity<T> = { -readonly [P in keyof T]: T[P]; }
 >StrippingIdentity : StrippingIdentity<T>
+>T : T
+>P : P
 
 interface Obj13 {
+>Obj13 : Obj13
+
     readonly [key: `wow${string}`]: 'foo';
 >key : `wow${string}`
 }
