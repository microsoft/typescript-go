--- old.exportAssignmentCircularModules.symbols
+++ new.exportAssignmentCircularModules.symbols
@@= skipped -8, +8 lines =@@
 
 	export var x = foo0.x;
 >x : Symbol(x, Decl(foo_2.ts, 2, 11))
->foo0.x : Symbol(foo0.x, Decl(foo_0.ts, 2, 11))
+>foo0.x : Symbol(x, Decl(foo_0.ts, 2, 11))
 >foo0 : Symbol(foo0, Decl(foo_2.ts, 0, 0))
->x : Symbol(foo0.x, Decl(foo_0.ts, 2, 11))
+>x : Symbol(x, Decl(foo_0.ts, 2, 11))
 }
 export = Foo;
 >Foo : Symbol(Foo, Decl(foo_2.ts, 0, 33))
@@= skipped -16, +16 lines =@@
 
 	export var x = foo1.x;
 >x : Symbol(x, Decl(foo_0.ts, 2, 11))
->foo1.x : Symbol(foo1.x, Decl(foo_1.ts, 2, 11))
+>foo1.x : Symbol(x, Decl(foo_1.ts, 2, 11))
 >foo1 : Symbol(foo1, Decl(foo_0.ts, 0, 0))
->x : Symbol(foo1.x, Decl(foo_1.ts, 2, 11))
+>x : Symbol(x, Decl(foo_1.ts, 2, 11))
 }
 export = Foo;
 >Foo : Symbol(Foo, Decl(foo_0.ts, 0, 33))
@@= skipped -16, +16 lines =@@
 
 	export var x = foo2.x;
 >x : Symbol(x, Decl(foo_1.ts, 2, 11))
->foo2.x : Symbol(foo2.x, Decl(foo_2.ts, 2, 11))
+>foo2.x : Symbol(x, Decl(foo_2.ts, 2, 11))
 >foo2 : Symbol(foo2, Decl(foo_1.ts, 0, 0))
->x : Symbol(foo2.x, Decl(foo_2.ts, 2, 11))
+>x : Symbol(x, Decl(foo_2.ts, 2, 11))
 }
 export = Foo;
 >Foo : Symbol(Foo, Decl(foo_1.ts, 0, 33))
