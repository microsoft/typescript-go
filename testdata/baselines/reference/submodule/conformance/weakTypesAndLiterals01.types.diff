--- old.weakTypesAndLiterals01.types
+++ new.weakTypesAndLiterals01.types
@@= skipped -8, +8 lines =@@
 >true : true
 
     | { toLowerCase?(): string }
->toLowerCase : (() => string) | undefined
+>toLowerCase : () => string | undefined
 
     | { toUpperCase?(): string, otherOptionalProp?: number };
->toUpperCase : (() => string) | undefined
+>toUpperCase : () => string | undefined
 >otherOptionalProp : number | undefined
 
 type LiteralsOrWeakTypes =
@@= skipped -17, +17 lines =@@
 >aOrB : "A" | "B"
 
 const f = (arg: LiteralsOrWeakTypes) => {
->f : (arg: LiteralsOrWeakTypes) => WeakTypes | "A" | "B"
->(arg: LiteralsOrWeakTypes) => {    if (arg === "A") {        return arg;    }    else {        return arg;    }} : (arg: LiteralsOrWeakTypes) => WeakTypes | "A" | "B"
+>f : (arg: LiteralsOrWeakTypes) => "A" | "B" | WeakTypes
+>(arg: LiteralsOrWeakTypes) => {    if (arg === "A") {        return arg;    }    else {        return arg;    }} : (arg: LiteralsOrWeakTypes) => "A" | "B" | WeakTypes
 >arg : LiteralsOrWeakTypes
 
     if (arg === "A") {
@@= skipped -10, +10 lines =@@
 >"A" : "A"
 
         return arg;
->arg : { toLowerCase?(): string; } | { toUpperCase?(): string; otherOptionalProp?: number; } | "A"
+>arg : "A" | { toLowerCase?: () => string | undefined; } | { toUpperCase?: () => string | undefined; otherOptionalProp?: number | undefined; }
     }
     else {
         return arg;
->arg : WeakTypes | "B"
+>arg : "B" | WeakTypes
     }
 }
 
@@= skipped -19, +19 lines =@@
 >"A" : "A"
 
         return arg;
->arg : { toLowerCase?(): string; } | { toUpperCase?(): string; otherOptionalProp?: number; }
+>arg : { toLowerCase?: () => string | undefined; } | { toUpperCase?: () => string | undefined; otherOptionalProp?: number | undefined; }
     }
     else {
         return arg;
@@= skipped -19, +19 lines =@@
 >aOrB : "A" | "B"
 
         return arg;
->arg : { toLowerCase?(): string; } | { toUpperCase?(): string; otherOptionalProp?: number; } | "A" | "B"
+>arg : "A" | "B" | { toLowerCase?: () => string | undefined; } | { toUpperCase?: () => string | undefined; otherOptionalProp?: number | undefined; }
     }
     else {
         return arg;
@@= skipped -19, +19 lines =@@
 >aOrB : "A" | "B"
 
         return arg;
->arg : { toLowerCase?(): string; } | { toUpperCase?(): string; otherOptionalProp?: number; }
+>arg : { toLowerCase?: () => string | undefined; } | { toUpperCase?: () => string | undefined; otherOptionalProp?: number | undefined; }
     }
     else {
         return arg;
