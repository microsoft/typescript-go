--- old.typeParametersAvailableInNestedScope3.types
+++ new.typeParametersAvailableInNestedScope3.types
@@= skipped -1, +1 lines =@@
 
 === typeParametersAvailableInNestedScope3.ts ===
 function foo<T>(v: T) {
->foo : <T>(v: T) => { a: <T_1>(a: T_1) => T_1; b: () => T; c: <T_1>(v: T_1) => { a: <T_2>(a: T_2) => T_2; b: () => T_1; }; }
+>foo : <T>(v: T) => { a: <T>(a: T) => T; b: () => T; c: <T>(v: T) => { a: <T>(a: T) => T; b: () => T; }; }
+>T : T
 >v : T
 
     function a<T>(a: T) { return a; }
 >a : <T>(a: T) => T
+>T : T
 >a : T
 >a : T
 
@@= skipped -13, +15 lines =@@
 >v : T
 
     function c<T>(v: T) {
->c : <T>(v: T) => { a: <T_1>(a: T_1) => T_1; b: () => T; }
+>c : <T>(v: T) => { a: <T>(a: T) => T; b: () => T; }
+>T : T
 >v : T
 
         function a<T>(a: T) { return a; }
 >a : <T>(a: T) => T
+>T : T
 >a : T
 >a : T
 
@@= skipped -13, +15 lines =@@
 >v : T
 
         return { a, b };
->{ a, b } : { a: <T_1>(a: T_1) => T_1; b: () => T; }
->a : <T_1>(a: T_1) => T_1
->b : () => T
+>{ a, b } : { a: <T>(a: T) => T; b: () => T; }
+>a : any
+>b : any
     }
 
     return { a, b, c };
->{ a, b, c } : { a: <T_1>(a: T_1) => T_1; b: () => T; c: <T_1>(v: T_1) => { a: <T_2>(a: T_2) => T_2; b: () => T_1; }; }
->a : <T_1>(a: T_1) => T_1
->b : () => T
->c : <T_1>(v: T_1) => { a: <T_2>(a: T_2) => T_2; b: () => T_1; }
+>{ a, b, c } : { a: <T>(a: T) => T; b: () => T; c: <T>(v: T) => { a: <T>(a: T) => T; b: () => T; }; }
+>a : any
+>b : any
+>c : any
 }
 
