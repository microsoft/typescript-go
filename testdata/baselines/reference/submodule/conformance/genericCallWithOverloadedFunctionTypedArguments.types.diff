--- old.genericCallWithOverloadedFunctionTypedArguments.types
+++ new.genericCallWithOverloadedFunctionTypedArguments.types
@@= skipped -17, +17 lines =@@
     }
 
     function foo4(cb: typeof a) {
->foo4 : (cb: typeof a) => { (x: boolean): boolean; (x: string): string; }
+>foo4 : (cb: { (x: boolean): boolean; (x: string): string; }) => { (x: boolean): boolean; (x: string): string; }
 >cb : { (x: boolean): boolean; (x: string): string; }
->a : { (x: boolean): boolean; (x: string): string; }
 
         return cb;
 >cb : { (x: boolean): boolean; (x: string): string; }
@@= skipped -11, +10 lines =@@
     var r = foo4(a);
 >r : { (x: boolean): boolean; (x: string): string; }
 >foo4(a) : { (x: boolean): boolean; (x: string): string; }
->foo4 : (cb: typeof a) => { (x: boolean): boolean; (x: string): string; }
+>foo4 : (cb: { (x: boolean): boolean; (x: string): string; }) => { (x: boolean): boolean; (x: string): string; }
 >a : { (x: boolean): boolean; (x: string): string; }
 
     var r2 = foo4(<T>(x: T) => x);
 >r2 : { (x: boolean): boolean; (x: string): string; }
 >foo4(<T>(x: T) => x) : { (x: boolean): boolean; (x: string): string; }
->foo4 : (cb: typeof a) => { (x: boolean): boolean; (x: string): string; }
+>foo4 : (cb: { (x: boolean): boolean; (x: string): string; }) => { (x: boolean): boolean; (x: string): string; }
 ><T>(x: T) => x : <T>(x: T) => T
+>T : T
 >x : T
 >x : T
 
     var r4 = foo4(x => x);    
 >r4 : { (x: boolean): boolean; (x: string): string; }
 >foo4(x => x) : { (x: boolean): boolean; (x: string): string; }
->foo4 : (cb: typeof a) => { (x: boolean): boolean; (x: string): string; }
+>foo4 : (cb: { (x: boolean): boolean; (x: string): string; }) => { (x: boolean): boolean; (x: string): string; }
 >x => x : (x: any) => any
 >x : any
 >x : any
@@= skipped -25, +26 lines =@@
 
     function foo5<T>(cb: { (x: T): string; (x: number): T }) {
 >foo5 : <T>(cb: { (x: T): string; (x: number): T; }) => { (x: T): string; (x: number): T; }
+>T : T
 >cb : { (x: T): string; (x: number): T; }
 >x : T
 >x : number
@@= skipped -18, +19 lines =@@
 
     var a: { <T>(x: T): string; <T>(x: number): T; }
 >a : { <T>(x: T): string; <T>(x: number): T; }
+>T : T
 >x : T
+>T : T
 >x : number
 
     var r7 = foo5(a); // any => string (+1 overload)
@@= skipped -11, +13 lines =@@
 
     function foo6<T>(cb: { (x: T): string; (x: T, y?: T): string }) {
 >foo6 : <T>(cb: { (x: T): string; (x: T, y?: T): string; }) => { (x: T): string; (x: T, y?: T): string; }
+>T : T
 >cb : { (x: T): string; (x: T, y?: T): string; }
 >x : T
 >x : T
@@= skipped -22, +23 lines =@@
 >foo6(<T>(x: T) => '') : { (x: unknown): string; (x: unknown, y?: unknown): string; }
 >foo6 : <T>(cb: { (x: T): string; (x: T, y?: T): string; }) => { (x: T): string; (x: T, y?: T): string; }
 ><T>(x: T) => '' : <T>(x: T) => string
+>T : T
 >x : T
 >'' : ""
 
@@= skipped -8, +9 lines =@@
 >foo6(<T>(x: T, y?: T) => '') : { (x: unknown): string; (x: unknown, y?: unknown): string; }
 >foo6 : <T>(cb: { (x: T): string; (x: T, y?: T): string; }) => { (x: T): string; (x: T, y?: T): string; }
 ><T>(x: T, y?: T) => '' : <T>(x: T, y?: T) => string
+>T : T
 >x : T
 >y : T
 >'' : ""
 
     function foo7<T>(x:T, cb: { (x: T): string; (x: T, y?: T): string }) {
 >foo7 : <T>(x: T, cb: { (x: T): string; (x: T, y?: T): string; }) => { (x: T): string; (x: T, y?: T): string; }
+>T : T
 >x : T
 >cb : { (x: T): string; (x: T, y?: T): string; }
 >x : T
@@= skipped -31, +33 lines =@@
 >foo7 : <T>(x: T, cb: { (x: T): string; (x: T, y?: T): string; }) => { (x: T): string; (x: T, y?: T): string; }
 >1 : 1
 ><T>(x: T) => '' : <T>(x: T) => string
+>T : T
 >x : T
 >'' : ""
 
     var a: { <T>(x: T): string; <T>(x: number): T; }
 >a : { <T>(x: T): string; <T>(x: number): T; }
+>T : T
 >x : T
+>T : T
 >x : number
 
     var r14 = foo7(1, a); // any => string (+1 overload) [inferences are made for T, but lambda not contextually typed]
