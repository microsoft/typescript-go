--- old.subtypingWithObjectMembersOptionality.types
+++ new.subtypingWithObjectMembersOptionality.types
@@= skipped -3, +3 lines =@@
 // Derived member is not optional but base member is, should be ok
 
 interface Base { foo: string; }
+>Base : Base
 >foo : string
 
 interface Derived extends Base { bar: string; }
+>Derived : Derived
 >bar : string
 
 interface Derived2 extends Derived { baz: string; }
+>Derived2 : Derived2
 >baz : string
 
 // S is a subtype of a type T, and T is a supertype of S, if one of the following is true, where S' denotes the apparent type (section 3.8.1) of S:
@@= skipped -17, +20 lines =@@
 //          if M is a required property, N is also a required property.
 //      - M is an optional property and S' contains no property of the same name as M.
 interface T {
+>T : T
+
     Foo?: Base;
 >Foo : Base
 }
 
 interface S extends T {
+>S : S
+
     Foo: Derived
 >Foo : Derived
 }
 
 interface T2 {
+>T2 : T2
+
     1?: Base; 
 >1 : Base
 }
 
 interface S2 extends T2 {
+>S2 : S2
+
     1: Derived;
 >1 : Derived
 }
 
 interface T3 {
+>T3 : T3
+
     '1'?: Base;
 >'1' : Base
 }
 
 interface S3 extends T3 {
+>S3 : S3
+
     '1.': Derived;
 >'1.' : Derived
 }
@@= skipped -51, +63 lines =@@
 >TwoLevels : typeof TwoLevels
 
     interface T {
+>T : T
+
         Foo?: Base;
 >Foo : Base
     }
 
     interface S extends T {
+>S : S
+
         Foo: Derived2 
 >Foo : Derived2
     }
 
     interface T2 {
+>T2 : T2
+
         1?: Base;
 >1 : Base
     }
 
     interface S2 extends T2 {
+>S2 : S2
+
         1: Derived2;
 >1 : Derived2
     }
 
     interface T3 {
+>T3 : T3
+
         '1'?: Base;
 >'1' : Base
     }
 
     interface S3 extends T3 {
+>S3 : S3
+
         '1.': Derived2;
 >'1.' : Derived2
     }
