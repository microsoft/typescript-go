--- old.namedTupleMembers.js
+++ new.namedTupleMembers.js
@@= skipped -101, +101 lines =@@
 function useState(initial) {
     return null;
 }
-function readSegment(_a) {
-    var length = _a[0], count = _a[1];
-}
+function readSegment([length, count]) { }
 // documenting binding pattern behavior (currently does _not_ generate tuple names)
 exports.val = null;
 q = r;
@@= skipped -10, +8 lines =@@
 x = y;
 y = x;
 exports.argumentsOfGAsFirstArgument = f(getArgsForInjection(g)); // one tuple with captures arguments as first member
-exports.argumentsOfG = f.apply(void 0, getArgsForInjection(g)); // captured arguments list re-spread
+exports.argumentsOfG = f(...getArgsForInjection(g)); // captured arguments list re-spread


 //// [namedTupleMembers.d.ts]
@@= skipped -21, +21 lines =@@
 export declare function useState<T>(initial: T): [value: T, setter: (T: any) => void];
 export type Iter = Func<[step: number, iterations: number]>;
 export declare function readSegment([length, count]: [number, number]): void;
-export declare const val: Parameters<typeof readSegment>[0];
+// documenting binding pattern behavior (currently does _not_ generate tuple names)
+export declare const val: [number, number];
 export type RecursiveTupleA = [initial: string, next: RecursiveTupleA];
 export type RecursiveTupleB = [first: string, ptr: RecursiveTupleB];
 export type RecusiveRest = [first: string, ...rest: RecusiveRest[]];
 export type RecusiveRest2 = [string, ...RecusiveRest2[]];
-export declare const argumentsOfGAsFirstArgument: [[elem: object, index: number]];
-export declare const argumentsOfG: [elem: object, index: number];
+export declare const argumentsOfGAsFirstArgument: [[elem: object, index: number]]; // one tuple with captures arguments as first member
+export declare const argumentsOfG: [elem: object, index: number]; // captured arguments list re-spread