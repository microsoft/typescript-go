--- old.contextuallyTypedIife.types
+++ new.contextuallyTypedIife.types
@@= skipped -102, +102 lines =@@
 // rest parameters
 ((...numbers) => numbers.every(n => n > 0))(5,6,7);
 >((...numbers) => numbers.every(n => n > 0))(5,6,7) : boolean
->((...numbers) => numbers.every(n => n > 0)) : (numbers_0: number, numbers_1: number, numbers_2: number) => boolean
->(...numbers) => numbers.every(n => n > 0) : (numbers_0: number, numbers_1: number, numbers_2: number) => boolean
+>((...numbers) => numbers.every(n => n > 0)) : (...numbers: [number, number, number]) => boolean
+>(...numbers) => numbers.every(n => n > 0) : (...numbers: [number, number, number]) => boolean
 >numbers : [number, number, number]
 >numbers.every(n => n > 0) : boolean
 >numbers.every : { <S extends number>(predicate: (value: number, index: number, array: number[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): boolean; }
@@= skipped -18, +18 lines =@@

 ((...mixed) => mixed.every(n => !!n))(5,'oops','oh no');
 >((...mixed) => mixed.every(n => !!n))(5,'oops','oh no') : boolean
->((...mixed) => mixed.every(n => !!n)) : (mixed_0: number, mixed_1: string, mixed_2: string) => boolean
->(...mixed) => mixed.every(n => !!n) : (mixed_0: number, mixed_1: string, mixed_2: string) => boolean
+>((...mixed) => mixed.every(n => !!n)) : (...mixed: [number, string, string]) => boolean
+>(...mixed) => mixed.every(n => !!n) : (...mixed: [number, string, string]) => boolean
 >mixed : [number, string, string]
 >mixed.every(n => !!n) : boolean
 >mixed.every : { <S extends string | number>(predicate: (value: string | number, index: number, array: (string | number)[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: string | number, index: number, array: (string | number)[]) => unknown, thisArg?: any): boolean; }
@@= skipped -18, +18 lines =@@

 ((...noNumbers) => noNumbers.some(n => n > 0))();
 >((...noNumbers) => noNumbers.some(n => n > 0))() : boolean
->((...noNumbers) => noNumbers.some(n => n > 0)) : () => boolean
->(...noNumbers) => noNumbers.some(n => n > 0) : () => boolean
+>((...noNumbers) => noNumbers.some(n => n > 0)) : (...noNumbers: []) => boolean
+>(...noNumbers) => noNumbers.some(n => n > 0) : (...noNumbers: []) => boolean
 >noNumbers : []
 >noNumbers.some(n => n > 0) : boolean
 >noNumbers.some : (predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any) => boolean
@@= skipped -15, +15 lines =@@

 ((first, ...rest) => first ? [] : rest.map(n => n > 0))(8,9,10);
 >((first, ...rest) => first ? [] : rest.map(n => n > 0))(8,9,10) : boolean[]
->((first, ...rest) => first ? [] : rest.map(n => n > 0)) : (first: number, rest_0: number, rest_1: number) => boolean[]
->(first, ...rest) => first ? [] : rest.map(n => n > 0) : (first: number, rest_0: number, rest_1: number) => boolean[]
+>((first, ...rest) => first ? [] : rest.map(n => n > 0)) : (first: number, ...rest: [number, number]) => boolean[]
+>(first, ...rest) => first ? [] : rest.map(n => n > 0) : (first: number, ...rest: [number, number]) => boolean[]
 >first : number
 >rest : [number, number]
 >first ? [] : rest.map(n => n > 0) : boolean[]