--- old.jsDeclarationsTypeAliases.js
+++ new.jsDeclarationsTypeAliases.js
@@= skipped -53, +53 lines =@@
 //// [index.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-/**
- * @typedef {string | number | symbol} PropName
- */
-/**
- * Callback
- *
- * @callback NumberToStringCb
- * @param {number} a
- * @returns {string}
- */
-/**
- * @template T
- * @typedef {T & {name: string}} MixinName
- */
-/**
- * Identity function
- *
- * @template T
- * @callback Identity
- * @param {T} x
- * @returns {T}
- */
 //// [mixed.js]
-/**
- * @typedef {{x: string} | number | LocalThing | ExportedThing} SomeType
- */
-/**
- * @param {number} x
- * @returns {SomeType}
- */
 function doTheThing(x) {
     return { x: "" + x };
 }
-var ExportedThing = /** @class */ (function () {
-    function ExportedThing() {
-        this.z = "ok";
-    }
-    return ExportedThing;
-}());
+class ExportedThing {
+    z = "ok";
+}
 module.exports = {
-    doTheThing: doTheThing,
-    ExportedThing: ExportedThing,
+    doTheThing,
+    ExportedThing,
 };
-var LocalThing = /** @class */ (function () {
-    function LocalThing() {
-        this.y = "ok";
-    }
-    return LocalThing;
-}());
-
-
-//// [index.d.ts]
-export type PropName = string | number | symbol;
-/**
- * Callback
- */
-export type NumberToStringCb = (a: number) => string;
-export type MixinName<T> = T & {
-    name: string;
-};
-/**
- * Identity function
- */
-export type Identity<T> = (x: T) => T;
-//// [mixed.d.ts]
-export type SomeType = {
-    x: string;
-} | number | LocalThing | ExportedThing;
-/**
- * @typedef {{x: string} | number | LocalThing | ExportedThing} SomeType
- */
-/**
- * @param {number} x
- * @returns {SomeType}
- */
-export function doTheThing(x: number): SomeType;
-export class ExportedThing {
-    z: string;
+class LocalThing {
+    y = "ok";
 }
-declare class LocalThing {
-    y: string;
-}
-export {};
