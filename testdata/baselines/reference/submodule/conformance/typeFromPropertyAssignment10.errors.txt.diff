--- old.typeFromPropertyAssignment10.errors.txt
+++ new.typeFromPropertyAssignment10.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+error TS2318: Cannot find global type 'Array'.
+error TS2318: Cannot find global type 'Function'.
+error TS2318: Cannot find global type 'IArguments'.
+error TS2318: Cannot find global type 'RegExp'.
+error TS2318: Cannot find global type 'String'.
+error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+someview.js(10,14): error TS2339: Property 'y' does not exist on type 'Inner'.
+
+
+!!! error TS2318: Cannot find global type 'Array'.
+!!! error TS2318: Cannot find global type 'Function'.
+!!! error TS2318: Cannot find global type 'IArguments'.
+!!! error TS2318: Cannot find global type 'RegExp'.
+!!! error TS2318: Cannot find global type 'String'.
+!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+==== module.js (0 errors) ====
+    var Outer = Outer || {};
+    Outer.app = Outer.app || {};
+    
+==== someview.js (1 errors) ====
+    Outer.app.SomeView = (function () {
+        var SomeView = function() {
+            var me = this;
+        }
+        return SomeView;
+    })();
+    Outer.app.Inner = class {
+        constructor() {
+            /** @type {number} */
+            this.y = 12;
+                 ~
+!!! error TS2339: Property 'y' does not exist on type 'Inner'.
+        }
+    }
+    var example = new Outer.app.Inner();
+    example.y;
+    /** @param {number} k */
+    Outer.app.statische = function (k) {
+        return k ** k;
+    }
+==== application.js (0 errors) ====
+    Outer.app.Application = (function () {
+    
+        /**
+         * Application main class.
+         * Will be instantiated & initialized by HTML page
+         */
+        var Application = function () {
+            var me = this;
+            me.view = new Outer.app.SomeView();
+        };
+        return Application;
+    })();
+==== main.js (0 errors) ====
+    var app = new Outer.app.Application();
+    var inner = new Outer.app.Inner();
+    inner.y;
+    /** @type {Outer.app.Inner} */
+    var x;
+    x.y;
+    Outer.app.statische(101); // Infinity, duh
+    
