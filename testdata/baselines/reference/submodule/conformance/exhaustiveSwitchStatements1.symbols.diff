--- old.exhaustiveSwitchStatements1.symbols
+++ new.exhaustiveSwitchStatements1.symbols
@@= skipped -143, +143 lines =@@
 >area : Symbol(area, Decl(exhaustiveSwitchStatements1.ts, 65, 7))

     switch (s.kind) {
->s.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 54, 18), Decl(exhaustiveSwitchStatements1.ts, 56, 21), Decl(exhaustiveSwitchStatements1.ts, 58, 18), Decl(exhaustiveSwitchStatements1.ts, 60, 20))
+>s.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 58, 18), Decl(exhaustiveSwitchStatements1.ts, 56, 21), Decl(exhaustiveSwitchStatements1.ts, 54, 18), Decl(exhaustiveSwitchStatements1.ts, 60, 20))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 64, 14))
->kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 54, 18), Decl(exhaustiveSwitchStatements1.ts, 56, 21), Decl(exhaustiveSwitchStatements1.ts, 58, 18), Decl(exhaustiveSwitchStatements1.ts, 60, 20))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 58, 18), Decl(exhaustiveSwitchStatements1.ts, 56, 21), Decl(exhaustiveSwitchStatements1.ts, 54, 18), Decl(exhaustiveSwitchStatements1.ts, 60, 20))

         case "square": area = s.size * s.size; break;
 >area : Symbol(area, Decl(exhaustiveSwitchStatements1.ts, 65, 7))
@@= skipped -25, +25 lines =@@
         case "circle": area = Math.PI * s.radius * s.radius; break;
 >area : Symbol(area, Decl(exhaustiveSwitchStatements1.ts, 65, 7))
 >Math.PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
->Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
 >s.radius : Symbol(Circle.radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 64, 14))
@@= skipped -12, +12 lines =@@
         case "triangle": area = Math.sqrt(3) / 4 * s.side * s.side; break;
 >area : Symbol(area, Decl(exhaustiveSwitchStatements1.ts, 65, 7))
 >Math.sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
->Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
 >s.side : Symbol(Triangle.side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 64, 14))
@@= skipped -25, +25 lines =@@
 >area : Symbol(area, Decl(exhaustiveSwitchStatements1.ts, 76, 7))

         switch (s.kind) {
->s.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 54, 18), Decl(exhaustiveSwitchStatements1.ts, 56, 21), Decl(exhaustiveSwitchStatements1.ts, 58, 18), Decl(exhaustiveSwitchStatements1.ts, 60, 20))
+>s.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 58, 18), Decl(exhaustiveSwitchStatements1.ts, 56, 21), Decl(exhaustiveSwitchStatements1.ts, 54, 18), Decl(exhaustiveSwitchStatements1.ts, 60, 20))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 75, 21))
->kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 54, 18), Decl(exhaustiveSwitchStatements1.ts, 56, 21), Decl(exhaustiveSwitchStatements1.ts, 58, 18), Decl(exhaustiveSwitchStatements1.ts, 60, 20))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 58, 18), Decl(exhaustiveSwitchStatements1.ts, 56, 21), Decl(exhaustiveSwitchStatements1.ts, 54, 18), Decl(exhaustiveSwitchStatements1.ts, 60, 20))

             case "square": return s.size * s.size;
 >s.size : Symbol(Square.size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
@@= skipped -22, +22 lines =@@

             case "circle": return Math.PI * s.radius * s.radius;
 >Math.PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
->Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
 >s.radius : Symbol(Circle.radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 75, 21))
@@= skipped -11, +11 lines =@@

             case "triangle": return Math.sqrt(3) / 4 * s.side * s.side;
 >Math.sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
->Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
 >s.side : Symbol(Triangle.side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 75, 21))
@@= skipped -192, +192 lines =@@
 >Shape2 : Symbol(Shape2, Decl(exhaustiveSwitchStatements1.ts, 151, 1))

     switch (s1.kind) {
->s1.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 143, 19), Decl(exhaustiveSwitchStatements1.ts, 148, 19))
+>s1.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 148, 19), Decl(exhaustiveSwitchStatements1.ts, 143, 19))
 >s1 : Symbol(s1, Decl(exhaustiveSwitchStatements1.ts, 155, 21))
->kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 143, 19), Decl(exhaustiveSwitchStatements1.ts, 148, 19))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 148, 19), Decl(exhaustiveSwitchStatements1.ts, 143, 19))

         case "square":
             return "1";
         case "circle":
             switch (s2.kind) {
->s2.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 143, 19), Decl(exhaustiveSwitchStatements1.ts, 148, 19))
+>s2.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 148, 19), Decl(exhaustiveSwitchStatements1.ts, 143, 19))
 >s2 : Symbol(s2, Decl(exhaustiveSwitchStatements1.ts, 155, 32))
->kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 143, 19), Decl(exhaustiveSwitchStatements1.ts, 148, 19))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 148, 19), Decl(exhaustiveSwitchStatements1.ts, 143, 19))

                 case "square":
                     return "2";
@@= skipped -30, +30 lines =@@
 >Shape2 : Symbol(Shape2, Decl(exhaustiveSwitchStatements1.ts, 151, 1))

     switch (s1.kind) {
->s1.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 143, 19), Decl(exhaustiveSwitchStatements1.ts, 148, 19))
+>s1.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 148, 19), Decl(exhaustiveSwitchStatements1.ts, 143, 19))
 >s1 : Symbol(s1, Decl(exhaustiveSwitchStatements1.ts, 171, 24))
->kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 143, 19), Decl(exhaustiveSwitchStatements1.ts, 148, 19))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 148, 19), Decl(exhaustiveSwitchStatements1.ts, 143, 19))

         case "square":
             return "1";
         case "circle":
             switch (s2.kind) {
->s2.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 143, 19), Decl(exhaustiveSwitchStatements1.ts, 148, 19))
+>s2.kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 148, 19), Decl(exhaustiveSwitchStatements1.ts, 143, 19))
 >s2 : Symbol(s2, Decl(exhaustiveSwitchStatements1.ts, 171, 35))
->kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 143, 19), Decl(exhaustiveSwitchStatements1.ts, 148, 19))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 148, 19), Decl(exhaustiveSwitchStatements1.ts, 143, 19))

                 case "square":
                     return "2";