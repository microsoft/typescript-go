--- old.readonlyArraysAndTuples.types
+++ new.readonlyArraysAndTuples.types
@@= skipped -31, +31 lines =@@
 >T33 : T33
 
 function f1(ma: string[], ra: readonly string[], mt: [string, string], rt: readonly [string, string]) {
->f1 : (ma: string[], ra: readonly string[], mt: [string, string], rt: readonly [string, string]) => void
+>f1 : (ma: string[], ra: readonly string[], mt: [string, string], rt: [string, string]) => void
 >ma : string[]
 >ra : readonly string[]
 >mt : [string, string]
->rt : readonly [string, string]
+>rt : [string, string]
 
     ma = ra;  // Error
 >ma = ra : readonly string[]
@@= skipped -17, +17 lines =@@
 >mt : [string, string]
 
     ma = rt;  // Error
->ma = rt : readonly [string, string]
+>ma = rt : [string, string]
 >ma : string[]
->rt : readonly [string, string]
+>rt : [string, string]
 
     ra = ma;
 >ra = ma : string[]
@@= skipped -15, +15 lines =@@
 >mt : [string, string]
 
     ra = rt;
->ra = rt : readonly [string, string]
+>ra = rt : [string, string]
 >ra : readonly string[]
->rt : readonly [string, string]
+>rt : [string, string]
 
     mt = ma;  // Error
 >mt = ma : string[]
@@= skipped -15, +15 lines =@@
 >ra : readonly string[]
 
     mt = rt;  // Error
->mt = rt : readonly [string, string]
+>mt = rt : [string, string]
 >mt : [string, string]
->rt : readonly [string, string]
+>rt : [string, string]
 
     rt = ma;  // Error
 >rt = ma : string[]
->rt : readonly [string, string]
+>rt : [string, string]
 >ma : string[]
 
     rt = ra;  // Error
 >rt = ra : readonly string[]
->rt : readonly [string, string]
+>rt : [string, string]
 >ra : readonly string[]
 
     rt = mt;
 >rt = mt : [string, string]
->rt : readonly [string, string]
+>rt : [string, string]
 >mt : [string, string]
 }
 
 declare var v: readonly[number, number, ...number[]];
->v : readonly [number, number, ...number[]]
+>v : [number, number, ...number[]]
 
 v[0] = 1;        // Error
 >v[0] = 1 : 1
 >v[0] : any
->v : readonly [number, number, ...number[]]
+>v : [number, number, ...number[]]
 >0 : 0
 >1 : 1
 
 v[1] = 1;        // Error
 >v[1] = 1 : 1
 >v[1] : any
->v : readonly [number, number, ...number[]]
+>v : [number, number, ...number[]]
 >1 : 1
 >1 : 1
 
 v[2] = 1;        // Error
 >v[2] = 1 : 1
 >v[2] : number
->v : readonly [number, number, ...number[]]
+>v : [number, number, ...number[]]
 >2 : 2
 >1 : 1
 
 delete v[2];     // Error
 >delete v[2] : boolean
 >v[2] : number
->v : readonly [number, number, ...number[]]
+>v : [number, number, ...number[]]
 >2 : 2
 
 v[0 + 1] = 1;    // Error
 >v[0 + 1] = 1 : 1
 >v[0 + 1] : number
->v : readonly [number, number, ...number[]]
+>v : [number, number, ...number[]]
 >0 + 1 : number
 >0 : 0
 >1 : 1
@@= skipped -62, +62 lines =@@
 v[0 + 2] = 1;    // Error
 >v[0 + 2] = 1 : 1
 >v[0 + 2] : number
->v : readonly [number, number, ...number[]]
+>v : [number, number, ...number[]]
 >0 + 2 : number
 >0 : 0
 >2 : 2
@@= skipped -9, +9 lines =@@
 delete v[0 + 1]; // Error
 >delete v[0 + 1] : boolean
 >v[0 + 1] : number
->v : readonly [number, number, ...number[]]
+>v : [number, number, ...number[]]
 >0 + 1 : number
 >0 : 0
 >1 : 1
