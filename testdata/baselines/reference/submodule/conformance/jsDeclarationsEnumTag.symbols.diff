--- old.jsDeclarationsEnumTag.symbols
+++ new.jsDeclarationsEnumTag.symbols
@@ -3,7 +3,7 @@
 === index.js ===
 /** @enum {string} */
 export const Target = {
->Target : Symbol(Target, Decl(index.js, 1, 12), Decl(index.js, 0, 4))
+>Target : Symbol(Target, Decl(index.js, 1, 12))
 
     START: "start",
 >START : Symbol(START, Decl(index.js, 1, 23))
@@ -20,7 +20,7 @@
 }
 /** @enum number */
 export const Second = {
->Second : Symbol(Second, Decl(index.js, 9, 12), Decl(index.js, 8, 4))
+>Second : Symbol(Second, Decl(index.js, 9, 12))
 
     OK: 1,
 >OK : Symbol(OK, Decl(index.js, 9, 23))
@@ -31,7 +31,7 @@
 }
 /** @enum {function(number): number} */
 export const Fs = {
->Fs : Symbol(Fs, Decl(index.js, 15, 12), Decl(index.js, 14, 4))
+>Fs : Symbol(Fs, Decl(index.js, 15, 12))
 
     ADD1: n => n + 1,
 >ADD1 : Symbol(ADD1, Decl(index.js, 15, 19))
@@ -79,7 +79,7 @@
     var v = Target.START
 >v : Symbol(v, Decl(index.js, 34, 7))
 >Target.START : Symbol(START, Decl(index.js, 1, 23))
->Target : Symbol(Target, Decl(index.js, 1, 12), Decl(index.js, 0, 4))
+>Target : Symbol(Target, Decl(index.js, 1, 12))
 >START : Symbol(START, Decl(index.js, 1, 23))
 
     v = 'something else' // allowed, like Typescript's classic enums and unlike its string enums
@@ -92,14 +92,14 @@
 
     // element access with arbitrary string is an error only with noImplicitAny
     if (!Target[s]) {
->Target : Symbol(Target, Decl(index.js, 1, 12), Decl(index.js, 0, 4))
+>Target : Symbol(Target, Decl(index.js, 1, 12))
 >s : Symbol(s, Decl(index.js, 38, 19))
 
         return null
     }
     else {
         return Target[s]
->Target : Symbol(Target, Decl(index.js, 1, 12), Decl(index.js, 0, 4))
+>Target : Symbol(Target, Decl(index.js, 1, 12))
 >s : Symbol(s, Decl(index.js, 38, 19))
     }
 }
