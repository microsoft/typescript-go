--- old.objectTypesIdentityWithGenericConstructSignaturesDifferingByReturnType2.types
+++ new.objectTypesIdentityWithGenericConstructSignaturesDifferingByReturnType2.types
@@= skipped -6, +6 lines =@@
 
 class B<T extends Date> {
 >B : B<T>
->  : ^^^^
+>T : T
 
     constructor(x: T) { return null; }
 >x : T
->  : ^
 }
 
 class C<T extends Date> {
 >C : C<T>
->  : ^^^^
+>T : T
 
     constructor(x: T) { return null; }
 >x : T
->  : ^
 }
 
 interface I<T extends Date> {
+>I : I<T>
+>T : T
+
     new(x: T): Date;
 >x : T
->  : ^
 }
 
 interface I2 {
+>I2 : I2
+
     new<T extends Date>(x: T): RegExp;
+>T : T
 >x : T
->  : ^
 }
 
 var a: { new<T extends Date>(x: T): T }
 >a : new <T extends Date>(x: T) => T
->  : ^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^ 
+>T : T
 >x : T
->  : ^
 
 var b = { new<T extends Date>(x: T) { return null; } }; // not a construct signature, function called new
->b : { "new"<T extends Date>(x: T): any; }
->  : ^^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^^^^^
->{ new<T extends Date>(x: T) { return null; } } : { "new"<T extends Date>(x: T): any; }
->                                               : ^^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^^^^^
+>b : { new: <T extends Date>(x: T) => any; }
+>{ new<T extends Date>(x: T) { return null; } } : { new: <T extends Date>(x: T) => any; }
 >new : <T extends Date>(x: T) => any
->    : ^ ^^^^^^^^^    ^^ ^^ ^^^^^^^^
+>T : T
 >x : T
->  : ^
 
 function foo1b(x: B<Date>);
 >foo1b : { (x: B<Date>): any; (x: B<Date>): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : B<Date>
->  : ^^^^^^^
 
 function foo1b(x: B<Date>); // error
 >foo1b : { (x: B<Date>): any; (x: B<Date>): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : B<Date>
->  : ^^^^^^^
 
 function foo1b(x: any) { }
 >foo1b : { (x: B<Date>): any; (x: B<Date>): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : any
 
 function foo1c(x: C<Date>);
 >foo1c : { (x: C<Date>): any; (x: C<Date>): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : C<Date>
->  : ^^^^^^^
 
 function foo1c(x: C<Date>); // error
 >foo1c : { (x: C<Date>): any; (x: C<Date>): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : C<Date>
->  : ^^^^^^^
 
 function foo1c(x: any) { }
 >foo1c : { (x: C<Date>): any; (x: C<Date>): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : any
 
 function foo2(x: I<Date>);
 >foo2 : { (x: I<Date>): any; (x: I<Date>): any; }
->     : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : I<Date>
->  : ^^^^^^^
 
 function foo2(x: I<Date>); // error
 >foo2 : { (x: I<Date>): any; (x: I<Date>): any; }
->     : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : I<Date>
->  : ^^^^^^^
 
 function foo2(x: any) { }
 >foo2 : { (x: I<Date>): any; (x: I<Date>): any; }
->     : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : any
 
 function foo3(x: typeof a);
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
->     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo3 : { (x: new <T extends Date>(x: T) => T): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : new <T extends Date>(x: T) => T
->  : ^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^ 
->a : new <T extends Date>(x: T) => T
->  : ^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^ 
 
 function foo3(x: typeof a); // error
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
->     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo3 : { (x: new <T extends Date>(x: T) => T): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : new <T extends Date>(x: T) => T
->  : ^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^ 
->a : new <T extends Date>(x: T) => T
->  : ^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^ 
 
 function foo3(x: any) { }
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
->     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo3 : { (x: new <T extends Date>(x: T) => T): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : any
 
 function foo4(x: typeof b);
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
->x : { "new"<T extends Date>(x: T): any; }
->  : ^^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^^^^^
->b : { "new"<T extends Date>(x: T): any; }
->  : ^^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^^^^^
+>foo4 : { (x: { new: <T extends Date>(x: T) => any; }): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
+>x : { new: <T extends Date>(x: T) => any; }
 
 function foo4(x: typeof b); // error
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
->x : { "new"<T extends Date>(x: T): any; }
->  : ^^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^^^^^
->b : { "new"<T extends Date>(x: T): any; }
->  : ^^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^^^^^
+>foo4 : { (x: { new: <T extends Date>(x: T) => any; }): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
+>x : { new: <T extends Date>(x: T) => any; }
 
 function foo4(x: any) { }
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo4 : { (x: { new: <T extends Date>(x: T) => any; }): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
 >x : any
 
 function foo8(x: B<Date>);
 >foo8 : { (x: B<Date>): any; (x: I<Date>): any; }
->     : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : B<Date>
->  : ^^^^^^^
 
 function foo8(x: I<Date>); // ok
 >foo8 : { (x: B<Date>): any; (x: I<Date>): any; }
->     : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : I<Date>
->  : ^^^^^^^
 
 function foo8(x: any) { }
 >foo8 : { (x: B<Date>): any; (x: I<Date>): any; }
->     : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : any
 
 function foo9(x: B<Date>);
 >foo9 : { (x: B<Date>): any; (x: C<Date>): any; }
->     : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : B<Date>
->  : ^^^^^^^
 
 function foo9(x: C<Date>); // error since types are structurally equal
 >foo9 : { (x: B<Date>): any; (x: C<Date>): any; }
->     : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : C<Date>
->  : ^^^^^^^
 
 function foo9(x: any) { }
 >foo9 : { (x: B<Date>): any; (x: C<Date>): any; }
->     : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : any
 
 function foo10(x: B<Date>);
->foo10 : { (x: B<Date>): any; (x: typeof a): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo10 : { (x: B<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : B<Date>
->  : ^^^^^^^
 
 function foo10(x: typeof a); // ok
->foo10 : { (x: B<Date>): any; (x: typeof a): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo10 : { (x: B<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : new <T extends Date>(x: T) => T
->  : ^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^ 
->a : new <T extends Date>(x: T) => T
->  : ^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^ 
 
 function foo10(x: any) { }
->foo10 : { (x: B<Date>): any; (x: typeof a): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo10 : { (x: B<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : any
 
 function foo11(x: B<Date>);
->foo11 : { (x: B<Date>): any; (x: typeof b): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo11 : { (x: B<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
 >x : B<Date>
->  : ^^^^^^^
 
 function foo11(x: typeof b); // ok
->foo11 : { (x: B<Date>): any; (x: typeof b): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
->x : { "new"<T extends Date>(x: T): any; }
->  : ^^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^^^^^
->b : { "new"<T extends Date>(x: T): any; }
->  : ^^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^^^^^
+>foo11 : { (x: B<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
+>x : { new: <T extends Date>(x: T) => any; }
 
 function foo11(x: any) { }
->foo11 : { (x: B<Date>): any; (x: typeof b): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo11 : { (x: B<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
 >x : any
 
 function foo12(x: I<Date>);
 >foo12 : { (x: I<Date>): any; (x: C<Date>): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : I<Date>
->  : ^^^^^^^
 
 function foo12(x: C<Date>); // ok
 >foo12 : { (x: I<Date>): any; (x: C<Date>): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : C<Date>
->  : ^^^^^^^
 
 function foo12(x: any) { }
 >foo12 : { (x: I<Date>): any; (x: C<Date>): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : any
 
 function foo12b(x: I2);
 >foo12b : { (x: I2): any; (x: C<Date>): any; }
->       : ^^^ ^^  ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : I2
->  : ^^
 
 function foo12b(x: C<Date>); // ok
 >foo12b : { (x: I2): any; (x: C<Date>): any; }
->       : ^^^ ^^  ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : C<Date>
->  : ^^^^^^^
 
 function foo12b(x: any) { }
 >foo12b : { (x: I2): any; (x: C<Date>): any; }
->       : ^^^ ^^  ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : any
 
 function foo13(x: I<Date>);
->foo13 : { (x: I<Date>): any; (x: typeof a): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo13 : { (x: I<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : I<Date>
->  : ^^^^^^^
 
 function foo13(x: typeof a); // ok
->foo13 : { (x: I<Date>): any; (x: typeof a): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo13 : { (x: I<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : new <T extends Date>(x: T) => T
->  : ^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^ 
->a : new <T extends Date>(x: T) => T
->  : ^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^ 
 
 function foo13(x: any) { }
->foo13 : { (x: I<Date>): any; (x: typeof a): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo13 : { (x: I<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : any
 
 function foo14(x: I<Date>);
->foo14 : { (x: I<Date>): any; (x: typeof b): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo14 : { (x: I<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
 >x : I<Date>
->  : ^^^^^^^
 
 function foo14(x: typeof b); // ok
->foo14 : { (x: I<Date>): any; (x: typeof b): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
->x : { "new"<T extends Date>(x: T): any; }
->  : ^^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^^^^^
->b : { "new"<T extends Date>(x: T): any; }
->  : ^^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^^^^^^^
+>foo14 : { (x: I<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
+>x : { new: <T extends Date>(x: T) => any; }
 
 function foo14(x: any) { }
->foo14 : { (x: I<Date>): any; (x: typeof b): any; }
->      : ^^^ ^^       ^^^^^^^^^ ^^        ^^^^^^^^^
+>foo14 : { (x: I<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
 >x : any
 
 function foo15(x: I2);
 >foo15 : { (x: I2): any; (x: C<Date>): any; }
->      : ^^^ ^^  ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : I2
->  : ^^
 
 function foo15(x: C<Date>); // ok
 >foo15 : { (x: I2): any; (x: C<Date>): any; }
->      : ^^^ ^^  ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : C<Date>
->  : ^^^^^^^
 
 function foo15(x: any) { }
 >foo15 : { (x: I2): any; (x: C<Date>): any; }
->      : ^^^ ^^  ^^^^^^^^^ ^^       ^^^^^^^^^
 >x : any
 
