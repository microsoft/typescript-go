--- old.intraExpressionInferences.symbols
+++ new.intraExpressionInferences.symbols
@@= skipped -28, +28 lines =@@
     consume: n => n.toFixed()
 >consume : Symbol(consume, Decl(intraExpressionInferences.ts, 8, 21))
 >n : Symbol(n, Decl(intraExpressionInferences.ts, 9, 12))
->n.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>n.toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 >n : Symbol(n, Decl(intraExpressionInferences.ts, 9, 12))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 
 });
 
@@= skipped -16, +16 lines =@@
     consume: n => n.toFixed(),
 >consume : Symbol(consume, Decl(intraExpressionInferences.ts, 13, 21))
 >n : Symbol(n, Decl(intraExpressionInferences.ts, 14, 12))
->n.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>n.toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 >n : Symbol(n, Decl(intraExpressionInferences.ts, 14, 12))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 
 });
 
@@= skipped -17, +17 lines =@@
     consume: n => n.toFixed()
 >consume : Symbol(consume, Decl(intraExpressionInferences.ts, 20, 6))
 >n : Symbol(n, Decl(intraExpressionInferences.ts, 21, 12))
->n.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>n.toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 >n : Symbol(n, Decl(intraExpressionInferences.ts, 21, 12))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 
 });
 
@@= skipped -18, +18 lines =@@
 callItT([() => 0, n => n.toFixed()]);
 >callItT : Symbol(callItT, Decl(intraExpressionInferences.ts, 22, 3))
 >n : Symbol(n, Decl(intraExpressionInferences.ts, 26, 17))
->n.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>n.toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 >n : Symbol(n, Decl(intraExpressionInferences.ts, 26, 17))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 
 callItT([_a => 0, n => n.toFixed()]);
 >callItT : Symbol(callItT, Decl(intraExpressionInferences.ts, 22, 3))
 >_a : Symbol(_a, Decl(intraExpressionInferences.ts, 27, 9))
 >n : Symbol(n, Decl(intraExpressionInferences.ts, 27, 17))
->n.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>n.toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 >n : Symbol(n, Decl(intraExpressionInferences.ts, 27, 17))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 
 // Repro from #25092
 
@@= skipped -19, +19 lines =@@
 >T : Symbol(T, Decl(intraExpressionInferences.ts, 31, 22))
 
     retrieveGeneric: (parameter: string) => T,
->retrieveGeneric : Symbol(MyInterface.retrieveGeneric, Decl(intraExpressionInferences.ts, 31, 26))
+>retrieveGeneric : Symbol(retrieveGeneric, Decl(intraExpressionInferences.ts, 31, 26))
 >parameter : Symbol(parameter, Decl(intraExpressionInferences.ts, 32, 22))
 >T : Symbol(T, Decl(intraExpressionInferences.ts, 31, 22))
 
     operateWithGeneric: (generic: T) => string
->operateWithGeneric : Symbol(MyInterface.operateWithGeneric, Decl(intraExpressionInferences.ts, 32, 46))
+>operateWithGeneric : Symbol(operateWithGeneric, Decl(intraExpressionInferences.ts, 32, 46))
 >generic : Symbol(generic, Decl(intraExpressionInferences.ts, 33, 25))
 >T : Symbol(T, Decl(intraExpressionInferences.ts, 31, 22))
 }
@@= skipped -29, +29 lines =@@
     operateWithGeneric: generic => generic.toFixed()
 >operateWithGeneric : Symbol(operateWithGeneric, Decl(intraExpressionInferences.ts, 39, 36))
 >generic : Symbol(generic, Decl(intraExpressionInferences.ts, 40, 23))
->generic.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>generic.toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 >generic : Symbol(generic, Decl(intraExpressionInferences.ts, 40, 23))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 
 });
 
@@= skipped -166, +166 lines =@@
 >T : Symbol(T, Decl(intraExpressionInferences.ts, 101, 14))
 
     public value?: T;
->value : Symbol(Wrapper.value, Decl(intraExpressionInferences.ts, 101, 24))
+>value : Symbol(value, Decl(intraExpressionInferences.ts, 101, 24))
 >T : Symbol(T, Decl(intraExpressionInferences.ts, 101, 14))
 }
 
@@= skipped -148, +148 lines =@@
 >generator : Symbol(generator, Decl(intraExpressionInferences.ts, 146, 12))
 >receiver : Symbol(receiver, Decl(intraExpressionInferences.ts, 146, 34))
 >t : Symbol(t, Decl(intraExpressionInferences.ts, 146, 46))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >t : Symbol(t, Decl(intraExpressionInferences.ts, 146, 46))
 
 whatIWant({ generator: (bob) => bob ? 1 : 2, receiver: (t) => console.log(t + 2) })
@@= skipped -12, +12 lines =@@
 >bob : Symbol(bob, Decl(intraExpressionInferences.ts, 147, 24))
 >receiver : Symbol(receiver, Decl(intraExpressionInferences.ts, 147, 44))
 >t : Symbol(t, Decl(intraExpressionInferences.ts, 147, 56))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >t : Symbol(t, Decl(intraExpressionInferences.ts, 147, 56))
 
 nonObject((bob) => bob ? 1 : 2, (t) => console.log(t + 2))
@@= skipped -10, +10 lines =@@
 >bob : Symbol(bob, Decl(intraExpressionInferences.ts, 148, 11))
 >bob : Symbol(bob, Decl(intraExpressionInferences.ts, 148, 11))
 >t : Symbol(t, Decl(intraExpressionInferences.ts, 148, 33))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >t : Symbol(t, Decl(intraExpressionInferences.ts, 148, 33))
 
 // Repro from #48466
@@= skipped -14, +14 lines =@@
 >TMapped : Symbol(TMapped, Decl(intraExpressionInferences.ts, 152, 30))
 
     fetch: (params: TParams, foo: number) => TDone,
->fetch : Symbol(Opts.fetch, Decl(intraExpressionInferences.ts, 152, 41))
+>fetch : Symbol(fetch, Decl(intraExpressionInferences.ts, 152, 41))
 >params : Symbol(params, Decl(intraExpressionInferences.ts, 153, 12))
 >TParams : Symbol(TParams, Decl(intraExpressionInferences.ts, 152, 15))
 >foo : Symbol(foo, Decl(intraExpressionInferences.ts, 153, 28))
 >TDone : Symbol(TDone, Decl(intraExpressionInferences.ts, 152, 23))
 
     map: (data: TDone) => TMapped
->map : Symbol(Opts.map, Decl(intraExpressionInferences.ts, 153, 51))
+>map : Symbol(map, Decl(intraExpressionInferences.ts, 153, 51))
 >data : Symbol(data, Decl(intraExpressionInferences.ts, 154, 10))
 >TDone : Symbol(TDone, Decl(intraExpressionInferences.ts, 152, 23))
 >TMapped : Symbol(TMapped, Decl(intraExpressionInferences.ts, 152, 30))
@@= skipped -30, +30 lines =@@
 
         const data = options.fetch(params, 123)
 >data : Symbol(data, Decl(intraExpressionInferences.ts, 159, 13))
->options.fetch : Symbol(Opts.fetch, Decl(intraExpressionInferences.ts, 152, 41))
+>options.fetch : Symbol(fetch, Decl(intraExpressionInferences.ts, 152, 41))
 >options : Symbol(options, Decl(intraExpressionInferences.ts, 157, 42))
->fetch : Symbol(Opts.fetch, Decl(intraExpressionInferences.ts, 152, 41))
+>fetch : Symbol(fetch, Decl(intraExpressionInferences.ts, 152, 41))
 >params : Symbol(params, Decl(intraExpressionInferences.ts, 158, 12))
 
         return options.map(data)
->options.map : Symbol(Opts.map, Decl(intraExpressionInferences.ts, 153, 51))
+>options.map : Symbol(map, Decl(intraExpressionInferences.ts, 153, 51))
 >options : Symbol(options, Decl(intraExpressionInferences.ts, 157, 42))
->map : Symbol(Opts.map, Decl(intraExpressionInferences.ts, 153, 51))
+>map : Symbol(map, Decl(intraExpressionInferences.ts, 153, 51))
 >data : Symbol(data, Decl(intraExpressionInferences.ts, 159, 13))
     }
 }
@@= skipped -17, +17 lines =@@
 >Params : Symbol(Params, Decl(intraExpressionInferences.ts, 162, 1))
 
     one: number
->one : Symbol(Params.one, Decl(intraExpressionInferences.ts, 164, 18))
+>one : Symbol(one, Decl(intraExpressionInferences.ts, 164, 18))
 
     two: string
->two : Symbol(Params.two, Decl(intraExpressionInferences.ts, 165, 15))
+>two : Symbol(two, Decl(intraExpressionInferences.ts, 165, 15))
 }
 
 example({
@@= skipped -108, +108 lines =@@
 >T : Symbol(T, Decl(intraExpressionInferences.ts, 199, 16))
 
   a: (x: string) => T;
->a : Symbol(Props.a, Decl(intraExpressionInferences.ts, 199, 20))
+>a : Symbol(a, Decl(intraExpressionInferences.ts, 199, 20))
 >x : Symbol(x, Decl(intraExpressionInferences.ts, 200, 6))
 >T : Symbol(T, Decl(intraExpressionInferences.ts, 199, 16))
 
   b: (arg: T) => void;
->b : Symbol(Props.b, Decl(intraExpressionInferences.ts, 200, 22))
+>b : Symbol(b, Decl(intraExpressionInferences.ts, 200, 22))
 >arg : Symbol(arg, Decl(intraExpressionInferences.ts, 201, 6))
 >T : Symbol(T, Decl(intraExpressionInferences.ts, 199, 16))
 }
@@= skipped -30, +30 lines =@@
 >arg : Symbol(arg, Decl(intraExpressionInferences.ts, 209, 8))
 
       arg.toString();
->arg.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>arg.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >arg : Symbol(arg, Decl(intraExpressionInferences.ts, 209, 8))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 
     },
   },
@@= skipped -45, +45 lines =@@
     consume: (arg) => arg.join(","),
 >consume : Symbol(consume, Decl(intraExpressionInferences.ts, 224, 24))
 >arg : Symbol(arg, Decl(intraExpressionInferences.ts, 225, 14))
->arg.join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>arg.join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 >arg : Symbol(arg, Decl(intraExpressionInferences.ts, 225, 14))
->join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 
   },
 });
@@= skipped -144, +144 lines =@@
 
   b: Math.random() ? (arg) => "first" as const : (arg) => "two" as const,
 >b : Symbol(b, Decl(intraExpressionInferences.ts, 262, 20))
->Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>Math.random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 >arg : Symbol(arg, Decl(intraExpressionInferences.ts, 263, 22))
 >const : Symbol(const)
 >arg : Symbol(arg, Decl(intraExpressionInferences.ts, 263, 50))
@@= skipped -68, +68 lines =@@
     b: (arg) => arg.join(","),
 >b : Symbol(b, Decl(intraExpressionInferences.ts, 279, 11))
 >arg : Symbol(arg, Decl(intraExpressionInferences.ts, 280, 8))
->arg.join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>arg.join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 >arg : Symbol(arg, Decl(intraExpressionInferences.ts, 280, 8))
->join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 
     nested2: {
 >nested2 : Symbol(nested2, Decl(intraExpressionInferences.ts, 280, 30))
@@= skipped -77, +77 lines =@@
     b: (arg) => arg.join(","),
 >b : Symbol(b, Decl(intraExpressionInferences.ts, 300, 11))
 >arg : Symbol(arg, Decl(intraExpressionInferences.ts, 301, 8))
->arg.join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>arg.join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 >arg : Symbol(arg, Decl(intraExpressionInferences.ts, 301, 8))
->join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --))
+>join : Symbol(join, Decl(lib.es5.d.ts, --, --))
 
     c: (arg) => Number(arg),
 >c : Symbol(c, Decl(intraExpressionInferences.ts, 301, 30))
