--- old.for-of20.symbols
+++ new.for-of20.symbols
@@= skipped -7, +7 lines =@@
 >FooIterator : Symbol(FooIterator, Decl(for-of20.ts, 0, 13))
 
     next() {
->next : Symbol(FooIterator.next, Decl(for-of20.ts, 1, 19))
+>next : Symbol(next, Decl(for-of20.ts, 1, 19))
 
         return {
             value: new Foo,
@@= skipped -13, +13 lines =@@
         };
     }
     [Symbol.iterator]() {
->[Symbol.iterator] : Symbol(FooIterator[Symbol.iterator], Decl(for-of20.ts, 7, 5))
->Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
->Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(for-of20.ts, 7, 5))
 
         return this;
 >this : Symbol(FooIterator, Decl(for-of20.ts, 0, 13))
