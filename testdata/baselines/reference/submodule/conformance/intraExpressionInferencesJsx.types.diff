--- old.intraExpressionInferencesJsx.types
+++ new.intraExpressionInferencesJsx.types
@@= skipped -66, +66 lines =@@
 };

 const Component = <T extends Animations>({
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
-><T extends Animations>({  animations,  style,}: AnimatedViewProps<T>) => <></> : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+>Component : <T extends Animations>({ animations, style }: AnimatedViewProps<T>) => JSX.Element
+><T extends Animations>({  animations,  style,}: AnimatedViewProps<T>) => <></> : <T extends Animations>({ animations, style }: AnimatedViewProps<T>) => JSX.Element

   animations,
 >animations : T
@@= skipped -14, +14 lines =@@

 <Component
 ><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,    },  }}  style={(anim) => {    return "";  }}/> : JSX.Element
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+>Component : <T extends Animations>({ animations, style }: AnimatedViewProps<T>) => JSX.Element

   animations={{
 >animations : { test: { kind: "a"; value: number; a: true; }; }
@@= skipped -36, +36 lines =@@
 />;
 <Component
 ><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    },  }}  style={(anim) => {    return "";  }}/> : JSX.Element
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+>Component : <T extends Animations>({ animations, style }: AnimatedViewProps<T>) => JSX.Element

   animations={{
 >animations : { test: { kind: "a"; value: number; a: true; func(): { a: true; }; }; }
@@= skipped -48, +48 lines =@@
 />;
 <Component
 ><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,      func: () => {        return {          a: true,        };      },    },  }}  style={(anim) => {    return "";  }}/> : JSX.Element
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+>Component : <T extends Animations>({ animations, style }: AnimatedViewProps<T>) => JSX.Element

   animations={{
 >animations : { test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }
@@= skipped -83, +83 lines =@@
 >(arg) => { arg.toString(); } : (arg: number) => void
 >arg : number
 >arg.toString() : string
->arg.toString : (radix?: number) => string
+>arg.toString : (radix?: number | undefined) => string
 >arg : number
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string

 />;

@@= skipped -21, +21 lines =@@
 >(arg) => { arg.toString(); } : (arg: number) => void
 >arg : number
 >arg.toString() : string
->arg.toString : (radix?: number) => string
+>arg.toString : (radix?: number | undefined) => string
 >arg : number
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string

 />;

@@= skipped -22, +22 lines =@@
 >(arg) => { arg.toString(); } : (arg: number) => void
 >arg : number
 >arg.toString() : string
->arg.toString : (radix?: number) => string
+>arg.toString : (radix?: number | undefined) => string
 >arg : number
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string

 }} />;
