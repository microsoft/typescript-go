--- old.nodeModulesDeclarationEmitDynamicImportWithPackageExports(module=nodenext).js
+++ new.nodeModulesDeclarationEmitDynamicImportWithPackageExports(module=nodenext).js
@@= skipped -115, +115 lines =@@


 //// [index.d.ts]
+// esm format file
 export {};
 //// [index.d.mts]
+// esm format file
 export {};
 //// [index.d.cts]
+// cjs format file
 export {};
 //// [other.d.ts]
-export declare const a: {
-    default: typeof import("package/cjs");
-};
+// esm format file
+export declare const a: typeof import("package/cjs");
 export declare const b: typeof import("package/mjs");
 export declare const c: typeof import("package");
 export declare const f: {
@@= skipped -16, +18 lines =@@
     default: typeof import("inner");
 };
 //// [other2.d.ts]
+// esm format file
 export declare const d: {
     cjsNonmain: true;
     default: typeof import("inner/cjs");
 };
-export declare const e: typeof import("inner/mjs");
+export declare const e: {
+    esm: true;
+    default: typeof import("inner/mjs");
+};
 //// [other.d.mts]
-export declare const a: {
-    default: typeof import("package/cjs");
-};
+// esm format file
+export declare const a: typeof import("package/cjs");
 export declare const b: typeof import("package/mjs");
 export declare const c: typeof import("package");
 export declare const f: {
@@= skipped -16, +19 lines =@@
     default: typeof import("inner");
 };
 //// [other2.d.mts]
+// esm format file
 export declare const d: {
     cjsNonmain: true;
     default: typeof import("inner/cjs");
 };
-export declare const e: typeof import("inner/mjs");
+export declare const e: {
+    esm: true;
+    default: typeof import("inner/mjs");
+};
 //// [other.d.cts]
-export declare const a: Promise<{
-    default: typeof import("./index.cjs");
-}>;
+// cjs format file, no TLA
+export declare const a: Promise<typeof import("./index.cts")>;
 export declare const b: Promise<typeof import("package/mjs", { with: { "resolution-mode": "import" } })>;
 export declare const c: Promise<typeof import("package", { with: { "resolution-mode": "import" } })>;
 export declare const f: Promise<{
     cjsMain: true;
-    default: typeof import("inner");
+    default: typeof import("inner", { with: { "resolution-mode": "import" } });
 }>;
 //// [other2.d.cts]
+// cjs format file, no TLA
 export declare const d: Promise<{
     cjsNonmain: true;
-    default: typeof import("inner/cjs");
-}>;
-export declare const e: Promise<typeof import("inner/mjs", { with: { "resolution-mode": "import" } })>;
+    default: typeof import("inner/cjs", { with: { "resolution-mode": "import" } });
+}>;
+export declare const e: Promise<{
+    esm: true;
+    default: typeof import("inner/mjs", { with: { "resolution-mode": "import" } });
+}>;