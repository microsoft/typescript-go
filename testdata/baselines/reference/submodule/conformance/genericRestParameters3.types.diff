--- old.genericRestParameters3.types
+++ new.genericRestParameters3.types
@@= skipped -24, +24 lines =@@
 >t1 : [string] | [number, boolean]
 
 declare const t2: readonly [string] | [number, boolean];
->t2 : [number, boolean] | readonly [string]
+>t2 : [number, boolean] | [string]
 
 declare const t3: [string] | readonly [number, boolean];
->t3 : [string] | readonly [number, boolean]
+>t3 : [string] | [number, boolean]
 
 declare const t4: readonly [string] | readonly [number, boolean];
->t4 : readonly [string] | readonly [number, boolean]
+>t4 : [string] | [number, boolean]
 
 f1("foo", "abc");
 >f1("foo", "abc") : void
@@= skipped -33, +33 lines =@@
 >f1 : (x: string, ...args: [string] | [number, boolean]) => void
 >"foo" : "foo"
 >...t2 : string | number | boolean
->t2 : [number, boolean] | readonly [string]
+>t2 : [number, boolean] | [string]
 
 f1("foo", ...t3);
 >f1("foo", ...t3) : void
 >f1 : (x: string, ...args: [string] | [number, boolean]) => void
 >"foo" : "foo"
 >...t3 : string | number | boolean
->t3 : [string] | readonly [number, boolean]
+>t3 : [string] | [number, boolean]
 
 f1("foo", ...t4);
 >f1("foo", ...t4) : void
 >f1 : (x: string, ...args: [string] | [number, boolean]) => void
 >"foo" : "foo"
 >...t4 : string | number | boolean
->t4 : readonly [string] | readonly [number, boolean]
+>t4 : [string] | [number, boolean]
 
 f1("foo", 10);  // Error
 >f1("foo", 10) : void
@@= skipped -60, +60 lines =@@
 // Repro from #26110
 
 interface CoolArray<E> extends Array<E> { 
+>CoolArray : CoolArray<E>
+>E : E
+
     hello: number;
 >hello : number
 }
 
 declare function foo<T extends any[]>(cb: (...args: T) => void): void;
 >foo : <T extends any[]>(cb: (...args: T) => void) => void
+>T : T
 >cb : (...args: T) => void
 >args : T
 
@@= skipped -25, +29 lines =@@
 
 function bar<T extends any[]>(...args: T): T {
 >bar : <T extends any[]>(...args: T) => T
+>T : T
 >args : T
 
     return args;
@@= skipped -22, +23 lines =@@
 
 declare function baz<T>(...args: CoolArray<T>): void;
 >baz : <T>(...args: CoolArray<T>) => void
+>T : T
 >args : CoolArray<T>
 
 declare const ca: CoolArray<number>;
@@= skipped -30, +31 lines =@@
 
 declare function hmm<A extends [] | [number, string]>(...args: A): void;
 >hmm : <A extends [] | [number, string]>(...args: A) => void
+>A : A
 >args : A
 
 hmm(); // okay, A = []
@@= skipped -67, +68 lines =@@
 >ff1 : (...rest: [string, string] | [string, number]) => void
 
 function ff3<A extends unknown[]>(s1: (...args: [x: string, ...rest: A | [number]]) => void, s2: (x: string, ...rest: A | [number]) => void) {
->ff3 : <A extends unknown[]>(s1: (...args: [x: string, ...rest: A | [number]]) => void, s2: (x: string, ...rest: A | [number]) => void) => void
->s1 : (...args: [x: string, ...rest: A | [number]]) => void
+>ff3 : <A extends unknown[]>(s1: (...args: [x: string, number] | [x: string, ...rest: A]) => void, s2: (x: string, ...rest: A | [number]) => void) => void
+>A : A
+>s1 : (...args: [x: string, number] | [x: string, ...rest: A]) => void
 >args : [x: string, number] | [x: string, ...rest: A]
 >s2 : (x: string, ...rest: A | [number]) => void
 >x : string
->rest : [number] | A
+>rest : A | [number]
 
     s1 = s2;
 >s1 = s2 : (x: string, ...rest: A | [number]) => void
->s1 : (...args: [x: string, ...rest: A | [number]]) => void
+>s1 : (...args: [x: string, number] | [x: string, ...rest: A]) => void
 >s2 : (x: string, ...rest: A | [number]) => void
 
     s2 = s1;
->s2 = s1 : (...args: [x: string, ...rest: A | [number]]) => void
+>s2 = s1 : (...args: [x: string, number] | [x: string, ...rest: A]) => void
 >s2 : (x: string, ...rest: A | [number]) => void
->s1 : (...args: [x: string, ...rest: A | [number]]) => void
+>s1 : (...args: [x: string, number] | [x: string, ...rest: A]) => void
 }
 
