--- old.typeParameterUsedAsTypeParameterConstraint4.types
+++ new.typeParameterUsedAsTypeParameterConstraint4.types
@@= skipped -5, +5 lines =@@
 
 class C<T, U extends T, V extends U> {
 >C : C<T, U, V>
+>T : T
+>U : U
+>V : V
 
     z: W; // error
 >z : W
 
     foo<W extends V>(x: W): T {
 >foo : <W extends V>(x: W) => T
+>W : W
 >x : W
 
         var r: T;
@@= skipped -17, +21 lines =@@
 }
 
 interface I<T, U extends T, V extends U> {
+>I : I<T, U, V>
+>T : T
+>U : U
+>V : V
+
     x: T;
 >x : T
 
@@= skipped -11, +16 lines =@@
 
     foo<W extends V>(x: W): T;
 >foo : <W extends V>(x: W) => T
+>W : W
 >x : W
 }
 
 function foo<T, U extends T>(x: T, y: U): V { // error
 >foo : <T, U extends T>(x: T, y: U) => V
+>T : T
+>U : U
 >x : T
 >y : U
 
     function bar<V extends T, W extends U>(): X { // error
 >bar : <V extends T, W extends U>() => X
+>V : V
+>W : W
 
         function baz<X extends W, Y extends V>(a: X, b: Y): T {
 >baz : <X extends W, Y extends V>(a: X, b: Y) => T
+>X : X
+>Y : Y
 >a : X
 >b : Y
 
@@= skipped -29, +36 lines =@@
 
 function foo2<U extends T, T>(x: T, y: U): W { // error
 >foo2 : <U extends T, T>(x: T, y: U) => W
+>U : U
+>T : T
 >x : T
 >y : U
 
     function bar<V extends T, W extends U>(): Y { // error
 >bar : <V extends T, W extends U>() => Y
+>V : V
+>W : W
 
         function baz<X extends W, Y extends V>(a: X, b: Y): T {
 >baz : <X extends W, Y extends V>(a: X, b: Y) => T
+>X : X
+>Y : Y
 >a : X
 >b : Y
 
@@= skipped -25, +31 lines =@@
 var f3 = <T, U extends T>(x: T, y: U) => {
 >f3 : <T, U extends T>(x: T, y: U) => void
 ><T, U extends T>(x: T, y: U) => {    function bar<V extends T, W extends U>(r: X, s: Y) { // error        var g = <X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        }    }} : <T, U extends T>(x: T, y: U) => void
+>T : T
+>U : U
 >x : T
 >y : U
 
     function bar<V extends T, W extends U>(r: X, s: Y) { // error
 >bar : <V extends T, W extends U>(r: X, s: Y) => void
+>V : V
+>W : W
 >r : X
 >s : Y
 
         var g = <X extends W, Y extends V>(a: X, b: Y): T => {
 >g : <X extends W, Y extends V>(a: X, b: Y) => T
 ><X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        } : <X extends W, Y extends V>(a: X, b: Y) => T
+>X : X
+>Y : Y
 >a : X
 >b : Y
 
@@= skipped -28, +34 lines =@@
 var f4 = <U extends T, T>(x: V, y: X) => { // error
 >f4 : <U extends T, T>(x: V, y: X) => void
 ><U extends T, T>(x: V, y: X) => { // error    function bar<V extends T, W extends U>() {        var g = <X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        }    }} : <U extends T, T>(x: V, y: X) => void
+>U : U
+>T : T
 >x : V
 >y : X
 
     function bar<V extends T, W extends U>() {
 >bar : <V extends T, W extends U>() => void
+>V : V
+>W : W
 
         var g = <X extends W, Y extends V>(a: X, b: Y): T => {
 >g : <X extends W, Y extends V>(a: X, b: Y) => T
 ><X extends W, Y extends V>(a: X, b: Y): T => {            x = y;            return y;        } : <X extends W, Y extends V>(a: X, b: Y) => T
+>X : X
+>Y : Y
 >a : X
 >b : Y
 
