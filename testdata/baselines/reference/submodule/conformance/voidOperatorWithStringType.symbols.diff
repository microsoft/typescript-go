--- old.voidOperatorWithStringType.symbols
+++ new.voidOperatorWithStringType.symbols
@@ -15,10 +15,10 @@
 >A : Symbol(A, Decl(voidOperatorWithStringType.ts, 4, 40))
 
     public a: string;
->a : Symbol(A.a, Decl(voidOperatorWithStringType.ts, 6, 9))
+>a : Symbol(a, Decl(voidOperatorWithStringType.ts, 6, 9))
 
     static foo() { return ""; }
->foo : Symbol(A.foo, Decl(voidOperatorWithStringType.ts, 7, 21))
+>foo : Symbol(foo, Decl(voidOperatorWithStringType.ts, 7, 21))
 }
 module M {
 >M : Symbol(M, Decl(voidOperatorWithStringType.ts, 9, 1))
@@ -59,15 +59,15 @@
 // string type expressions
 var ResultIsAny6 = void objA.a;
 >ResultIsAny6 : Symbol(ResultIsAny6, Decl(voidOperatorWithStringType.ts, 26, 3))
->objA.a : Symbol(A.a, Decl(voidOperatorWithStringType.ts, 6, 9))
+>objA.a : Symbol(a, Decl(voidOperatorWithStringType.ts, 6, 9))
 >objA : Symbol(objA, Decl(voidOperatorWithStringType.ts, 14, 3))
->a : Symbol(A.a, Decl(voidOperatorWithStringType.ts, 6, 9))
+>a : Symbol(a, Decl(voidOperatorWithStringType.ts, 6, 9))
 
 var ResultIsAny7 = void M.n;
 >ResultIsAny7 : Symbol(ResultIsAny7, Decl(voidOperatorWithStringType.ts, 27, 3))
->M.n : Symbol(M.n, Decl(voidOperatorWithStringType.ts, 11, 14))
+>M.n : Symbol(n, Decl(voidOperatorWithStringType.ts, 11, 14))
 >M : Symbol(M, Decl(voidOperatorWithStringType.ts, 9, 1))
->n : Symbol(M.n, Decl(voidOperatorWithStringType.ts, 11, 14))
+>n : Symbol(n, Decl(voidOperatorWithStringType.ts, 11, 14))
 
 var ResultIsAny8 = void STRING1[0];
 >ResultIsAny8 : Symbol(ResultIsAny8, Decl(voidOperatorWithStringType.ts, 28, 3))
@@ -79,9 +79,9 @@
 
 var ResultIsAny10 = void A.foo();
 >ResultIsAny10 : Symbol(ResultIsAny10, Decl(voidOperatorWithStringType.ts, 30, 3))
->A.foo : Symbol(A.foo, Decl(voidOperatorWithStringType.ts, 7, 21))
+>A.foo : Symbol(foo, Decl(voidOperatorWithStringType.ts, 7, 21))
 >A : Symbol(A, Decl(voidOperatorWithStringType.ts, 4, 40))
->foo : Symbol(A.foo, Decl(voidOperatorWithStringType.ts, 7, 21))
+>foo : Symbol(foo, Decl(voidOperatorWithStringType.ts, 7, 21))
 
 var ResultIsAny11 = void (STRING + STRING);
 >ResultIsAny11 : Symbol(ResultIsAny11, Decl(voidOperatorWithStringType.ts, 31, 3))
@@ -90,9 +90,9 @@
 
 var ResultIsAny12 = void STRING.charAt(0);
 >ResultIsAny12 : Symbol(ResultIsAny12, Decl(voidOperatorWithStringType.ts, 32, 3))
->STRING.charAt : Symbol(String.charAt, Decl(lib.es5.d.ts, --, --))
+>STRING.charAt : Symbol(charAt, Decl(lib.es5.d.ts, --, --))
 >STRING : Symbol(STRING, Decl(voidOperatorWithStringType.ts, 1, 3))
->charAt : Symbol(String.charAt, Decl(lib.es5.d.ts, --, --))
+>charAt : Symbol(charAt, Decl(lib.es5.d.ts, --, --))
 
 // multiple void  operators
 var ResultIsAny13 = void void STRING;
@@ -116,10 +116,10 @@
 >foo : Symbol(foo, Decl(voidOperatorWithStringType.ts, 2, 36))
 
 void objA.a,M.n;
->objA.a : Symbol(A.a, Decl(voidOperatorWithStringType.ts, 6, 9))
+>objA.a : Symbol(a, Decl(voidOperatorWithStringType.ts, 6, 9))
 >objA : Symbol(objA, Decl(voidOperatorWithStringType.ts, 14, 3))
->a : Symbol(A.a, Decl(voidOperatorWithStringType.ts, 6, 9))
->M.n : Symbol(M.n, Decl(voidOperatorWithStringType.ts, 11, 14))
+>a : Symbol(a, Decl(voidOperatorWithStringType.ts, 6, 9))
+>M.n : Symbol(n, Decl(voidOperatorWithStringType.ts, 11, 14))
 >M : Symbol(M, Decl(voidOperatorWithStringType.ts, 9, 1))
->n : Symbol(M.n, Decl(voidOperatorWithStringType.ts, 11, 14))
+>n : Symbol(n, Decl(voidOperatorWithStringType.ts, 11, 14))
 
