--- old.privateNamesAndStaticFields.symbols
+++ new.privateNamesAndStaticFields.symbols
@@= skipped -4, +4 lines =@@
 >A : Symbol(A, Decl(privateNamesAndStaticFields.ts, 0, 0))
 
     static #foo: number;
->#foo : Symbol(A.#foo, Decl(privateNamesAndStaticFields.ts, 0, 9))
+>#foo : Symbol(#foo, Decl(privateNamesAndStaticFields.ts, 0, 9))
 
     static #bar: number;
->#bar : Symbol(A.#bar, Decl(privateNamesAndStaticFields.ts, 1, 24))
+>#bar : Symbol(#bar, Decl(privateNamesAndStaticFields.ts, 1, 24))
 
     constructor () {
         A.#foo = 3;
->A.#foo : Symbol(A.#foo, Decl(privateNamesAndStaticFields.ts, 0, 9))
+>A.#foo : Symbol(#foo, Decl(privateNamesAndStaticFields.ts, 0, 9))
 >A : Symbol(A, Decl(privateNamesAndStaticFields.ts, 0, 0))
 
         B.#foo; // Error
@@= skipped -23, +23 lines =@@
 >A : Symbol(A, Decl(privateNamesAndStaticFields.ts, 0, 0))
 
     static #foo: string;
->#foo : Symbol(B.#foo, Decl(privateNamesAndStaticFields.ts, 10, 19))
+>#foo : Symbol(#foo, Decl(privateNamesAndStaticFields.ts, 10, 19))
 
     constructor () {
         super();
 >super : Symbol(A, Decl(privateNamesAndStaticFields.ts, 0, 0))
 
         B.#foo = "some string";
->B.#foo : Symbol(B.#foo, Decl(privateNamesAndStaticFields.ts, 10, 19))
+>B.#foo : Symbol(#foo, Decl(privateNamesAndStaticFields.ts, 10, 19))
 >B : Symbol(B, Decl(privateNamesAndStaticFields.ts, 8, 1))
     }
 }
