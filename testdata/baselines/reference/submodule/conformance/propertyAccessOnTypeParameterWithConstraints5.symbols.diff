--- old.propertyAccessOnTypeParameterWithConstraints5.symbols
+++ new.propertyAccessOnTypeParameterWithConstraints5.symbols
@@= skipped -4, +4 lines =@@
 >A : Symbol(A, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 0))
 
     foo(): string { return ''; }
->foo : Symbol(A.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
+>foo : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
 }
 
 class B extends A {
@@= skipped -8, +8 lines =@@
 >A : Symbol(A, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 0))
 
     bar(): string {
->bar : Symbol(B.bar, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 4, 19))
+>bar : Symbol(bar, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 4, 19))
 
         return '';
     }
@@= skipped -14, +14 lines =@@
 >A : Symbol(A, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 0))
 
     f() {
->f : Symbol(C.f, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 10, 35))
+>f : Symbol(f, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 10, 35))
 
         var x: U;
 >x : Symbol(x, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 12, 11))
@@= skipped -9, +9 lines =@@
         var a = x['foo'](); // should be string
 >a : Symbol(a, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 13, 11))
 >x : Symbol(x, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 12, 11))
->'foo' : Symbol(A.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
+>'foo' : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
 
         return a + x.foo() + x.notHere();
 >a : Symbol(a, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 13, 11))
->x.foo : Symbol(A.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
+>x.foo : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
 >x : Symbol(x, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 12, 11))
->foo : Symbol(A.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
+>foo : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
 >x : Symbol(x, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 12, 11))
     }
 }
 
 var r = (new C<B, A>()).f();
 >r : Symbol(r, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 18, 3))
->(new C<B, A>()).f : Symbol(C.f, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 10, 35))
+>(new C<B, A>()).f : Symbol(f, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 10, 35))
 >C : Symbol(C, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 8, 1))
 >B : Symbol(B, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 2, 1))
 >A : Symbol(A, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 0))
->f : Symbol(C.f, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 10, 35))
+>f : Symbol(f, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 10, 35))
 
 interface I<U extends T, T extends A> {
 >I : Symbol(I, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 18, 28))
@@= skipped -27, +27 lines =@@
 >A : Symbol(A, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 0))
 
     foo: U;
->foo : Symbol(I.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 20, 39))
+>foo : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 20, 39))
 >U : Symbol(U, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 20, 12))
 }
 var i: I<B, A>;
@@= skipped -11, +11 lines =@@
 
 var r2 = i.foo.notHere();
 >r2 : Symbol(r2, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 24, 3))
->i.foo : Symbol(I.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 20, 39))
+>i.foo : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 20, 39))
 >i : Symbol(i, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 23, 3))
->foo : Symbol(I.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 20, 39))
+>foo : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 20, 39))
 
 var r2b = i.foo['foo']();
 >r2b : Symbol(r2b, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 25, 3))
->i.foo : Symbol(I.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 20, 39))
+>i.foo : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 20, 39))
 >i : Symbol(i, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 23, 3))
->foo : Symbol(I.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 20, 39))
->'foo' : Symbol(A.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
+>foo : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 20, 39))
+>'foo' : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
 
 var a: {
 >a : Symbol(a, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 27, 3))
@@= skipped -29, +29 lines =@@
 var r3b: string = a()['foo']();
 >r3b : Symbol(r3b, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 32, 3))
 >a : Symbol(a, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 27, 3))
->'foo' : Symbol(A.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
+>'foo' : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
 
 var b = {
 >b : Symbol(b, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 34, 3))
@@= skipped -18, +18 lines =@@
         var a = x['foo'](); // should be string
 >a : Symbol(a, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 36, 11))
 >x : Symbol(x, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 35, 36))
->'foo' : Symbol(A.foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
+>'foo' : Symbol(foo, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 0, 9))
 
         return a + x.notHere();
 >a : Symbol(a, Decl(propertyAccessOnTypeParameterWithConstraints5.ts, 36, 11))
