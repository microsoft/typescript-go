--- old.typeofOperatorWithStringType.types
+++ new.typeofOperatorWithStringType.types
@@= skipped -38, +38 lines =@@
 
 // string type var
 var ResultIsString1 = typeof STRING;
->ResultIsString1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof STRING : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof STRING : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >STRING : string
 
 var ResultIsString2 = typeof STRING1;
->ResultIsString2 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof STRING1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString2 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof STRING1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >STRING1 : string[]
 
 // string type literal
 var ResultIsString3 = typeof "";
->ResultIsString3 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof "" : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString3 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof "" : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >"" : ""
 
 var ResultIsString4 = typeof { x: "", y: "" };
->ResultIsString4 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof { x: "", y: "" } : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString4 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof { x: "", y: "" } : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >{ x: "", y: "" } : { x: string; y: string; }
 >x : string
 >"" : ""
@@= skipped -25, +25 lines =@@
 >"" : ""
 
 var ResultIsString5 = typeof { x: "", y: (s: string) => { return s; } };
->ResultIsString5 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof { x: "", y: (s: string) => { return s; } } : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString5 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof { x: "", y: (s: string) => { return s; } } : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >{ x: "", y: (s: string) => { return s; } } : { x: string; y: (s: string) => string; }
 >x : string
 >"" : ""
@@= skipped -12, +12 lines =@@
 
 // string type expressions
 var ResultIsString6 = typeof objA.a;
->ResultIsString6 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof objA.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString6 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof objA.a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >objA.a : string
 >objA : A
 >a : string
 
 var ResultIsString7 = typeof M.n;
->ResultIsString7 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof M.n : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString7 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof M.n : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >M.n : string
 >M : typeof M
 >n : string
 
 var ResultIsString8 = typeof STRING1[0];
->ResultIsString8 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof STRING1[0] : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString8 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof STRING1[0] : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >STRING1[0] : string
 >STRING1 : string[]
 >0 : 0
 
 var ResultIsString9 = typeof foo();
->ResultIsString9 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof foo() : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString9 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof foo() : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >foo() : string
 >foo : () => string
 
 var ResultIsString10 = typeof A.foo();
->ResultIsString10 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof A.foo() : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString10 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof A.foo() : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >A.foo() : string
 >A.foo : () => string
 >A : typeof A
 >foo : () => string
 
 var ResultIsString11 = typeof (STRING + STRING);
->ResultIsString11 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof (STRING + STRING) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString11 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof (STRING + STRING) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(STRING + STRING) : string
 >STRING + STRING : string
 >STRING : string
 >STRING : string
 
 var ResultIsString12 = typeof STRING.charAt(0);
->ResultIsString12 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof STRING.charAt(0) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString12 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof STRING.charAt(0) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >STRING.charAt(0) : string
 >STRING.charAt : (pos: number) => string
 >STRING : string
@@= skipped -53, +53 lines =@@
 
 // multiple typeof  operators
 var ResultIsString13 = typeof typeof STRING;
->ResultIsString13 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof typeof STRING : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof STRING : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString13 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof typeof STRING : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof STRING : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >STRING : string
 
 var ResultIsString14 = typeof typeof typeof (STRING + STRING);
->ResultIsString14 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof typeof typeof (STRING + STRING) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof typeof (STRING + STRING) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof (STRING + STRING) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString14 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof typeof typeof (STRING + STRING) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof typeof (STRING + STRING) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof (STRING + STRING) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(STRING + STRING) : string
 >STRING + STRING : string
 >STRING : string
@@= skipped -17, +17 lines =@@
 
 // miss assignment operators
 typeof "";
->typeof "" : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof "" : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >"" : ""
 
 typeof STRING;
->typeof STRING : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof STRING : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >STRING : string
 
 typeof STRING1;
->typeof STRING1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof STRING1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >STRING1 : string[]
 
 typeof foo();
->typeof foo() : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof foo() : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >foo() : string
 >foo : () => string
 
 typeof objA.a, M.n;
 >typeof objA.a, M.n : string
->typeof objA.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof objA.a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >objA.a : string
 >objA : A
 >a : string
@@= skipped -38, +38 lines =@@
 
 z: typeof STRING;
 >z : any
->typeof STRING : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof STRING : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >STRING : string
 
 x: typeof STRING1;
 >x : any
->typeof STRING1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof STRING1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >STRING1 : string[]
 
 r: typeof foo;
 >r : any
->typeof foo : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof foo : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >foo : () => string
 
 var y = { a: "", b: "" };
@@= skipped -23, +23 lines =@@
 
 z: typeof y.a;
 >z : any
->typeof y.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof y.a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >y.a : string
 >y : { a: string; b: string; }
 >a : string
 
 z: typeof objA.a;
 >z : any
->typeof objA.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof objA.a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >objA.a : string
 >objA : A
 >a : string
 
 z: typeof A.foo;
 >z : any
->typeof A.foo : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof A.foo : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >A.foo : () => string
 >A : typeof A
 >foo : () => string
 
 z: typeof M.n;
 >z : any
->typeof M.n : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof M.n : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >M.n : string
 >M : typeof M
 >n : string
