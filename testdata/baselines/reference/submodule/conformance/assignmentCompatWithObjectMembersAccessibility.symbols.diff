--- old.assignmentCompatWithObjectMembersAccessibility.symbols
+++ new.assignmentCompatWithObjectMembersAccessibility.symbols
@@= skipped -10, +10 lines =@@
 >Base : Symbol(Base, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 2, 23))
 
         public foo: string;
->foo : Symbol(Base.foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 4, 16))
+>foo : Symbol(foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 4, 16))
     }
 
     interface I {
 >I : Symbol(I, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 6, 5))
 
         foo: string;
->foo : Symbol(I.foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 8, 17))
+>foo : Symbol(foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 8, 17))
     }
 
     var a: { foo: string; }
@@= skipped -27, +27 lines =@@
 >D : Symbol(D, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 14, 13))
 
         public foo: string;
->foo : Symbol(D.foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 17, 13))
+>foo : Symbol(foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 17, 13))
     }
 
     class E {
 >E : Symbol(E, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 19, 5))
 
         private foo: string;
->foo : Symbol(E.foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 21, 13))
+>foo : Symbol(foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 21, 13))
     }
     var d: D;
 >d : Symbol(d, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 24, 7))
@@= skipped -111, +111 lines =@@
 >Base : Symbol(Base, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 55, 23))
 
         private foo: string;
->foo : Symbol(Base.foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 57, 16))
+>foo : Symbol(foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 57, 16))
     }
 
     interface I extends Base {
@@= skipped -25, +25 lines =@@
 >D : Symbol(D, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 66, 13))
 
         public foo: string;
->foo : Symbol(D.foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 69, 13))
+>foo : Symbol(foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 69, 13))
     }
 
     class E {
 >E : Symbol(E, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 71, 5))
 
         private foo: string;
->foo : Symbol(E.foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 73, 13))
+>foo : Symbol(foo, Decl(assignmentCompatWithObjectMembersAccessibility.ts, 73, 13))
     }
 
     var d: D;
