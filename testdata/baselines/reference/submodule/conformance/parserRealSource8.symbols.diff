--- old.parserRealSource8.symbols
+++ new.parserRealSource8.symbols
@@= skipped -12, +12 lines =@@
 >AssignScopeContext : Symbol(AssignScopeContext, Decl(parserRealSource8.ts, 5, 19))
 
         constructor (public scopeChain: ScopeChain,
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >ScopeChain : Symbol(ScopeChain)
 
                      public typeFlow: TypeFlow,
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >TypeFlow : Symbol(TypeFlow)
 
                      public modDeclChain: ModuleDeclaration[]) {
->modDeclChain : Symbol(AssignScopeContext.modDeclChain, Decl(parserRealSource8.ts, 9, 47))
+>modDeclChain : Symbol(modDeclChain, Decl(parserRealSource8.ts, 9, 47))
 >ModuleDeclaration : Symbol(ModuleDeclaration)
         }
     }
@@= skipped -36, +36 lines =@@
 
         var chain = new ScopeChain(null, context.scopeChain, scope);
 >chain : Symbol(chain, Decl(parserRealSource8.ts, 20, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 14, 55))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >scope : Symbol(scope, Decl(parserRealSource8.ts, 14, 36))
 
         chain.thisType = type;
@@= skipped -18, +18 lines =@@
 >fnc : Symbol(fnc, Decl(parserRealSource8.ts, 17, 24))
 
         context.scopeChain = chain;
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 14, 55))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >chain : Symbol(chain, Decl(parserRealSource8.ts, 20, 11))
     }
 
@@= skipped -12, +12 lines =@@
 >AssignScopeContext : Symbol(AssignScopeContext, Decl(parserRealSource8.ts, 5, 19))
 
         context.scopeChain = context.scopeChain.previous;
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 27, 35))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 27, 35))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
     }
 
     export function instanceCompare(a: Symbol, b: Symbol) {
@@= skipped -41, +41 lines =@@
 >ScopeSearchFilter : Symbol(ScopeSearchFilter, Decl(parserRealSource8.ts, 42, 5))
 
         constructor (public select: (a: Symbol, b: Symbol) =>Symbol,
->select : Symbol(ScopeSearchFilter.select, Decl(parserRealSource8.ts, 46, 21))
+>select : Symbol(select, Decl(parserRealSource8.ts, 46, 21))
 >a : Symbol(a, Decl(parserRealSource8.ts, 46, 37))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --))
 >b : Symbol(b, Decl(parserRealSource8.ts, 46, 47))
@@= skipped -8, +8 lines =@@
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --))
 
                             public stop: (s: Symbol) =>boolean) { }
->stop : Symbol(ScopeSearchFilter.stop, Decl(parserRealSource8.ts, 46, 68))
+>stop : Symbol(stop, Decl(parserRealSource8.ts, 46, 68))
 >s : Symbol(s, Decl(parserRealSource8.ts, 47, 42))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --))
 
         public result: Symbol = null;
->result : Symbol(ScopeSearchFilter.result, Decl(parserRealSource8.ts, 47, 67))
+>result : Symbol(result, Decl(parserRealSource8.ts, 47, 67))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --))
 
         public reset() {
->reset : Symbol(ScopeSearchFilter.reset, Decl(parserRealSource8.ts, 49, 37))
+>reset : Symbol(reset, Decl(parserRealSource8.ts, 49, 37))
 
             this.result = null;
->this.result : Symbol(ScopeSearchFilter.result, Decl(parserRealSource8.ts, 47, 67))
+>this.result : Symbol(result, Decl(parserRealSource8.ts, 47, 67))
 >this : Symbol(ScopeSearchFilter, Decl(parserRealSource8.ts, 42, 5))
->result : Symbol(ScopeSearchFilter.result, Decl(parserRealSource8.ts, 47, 67))
+>result : Symbol(result, Decl(parserRealSource8.ts, 47, 67))
         }
 
         public update(b: Symbol): boolean {
->update : Symbol(ScopeSearchFilter.update, Decl(parserRealSource8.ts, 53, 9))
+>update : Symbol(update, Decl(parserRealSource8.ts, 53, 9))
 >b : Symbol(b, Decl(parserRealSource8.ts, 55, 22))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --))
 
             this.result = this.select(this.result, b);
->this.result : Symbol(ScopeSearchFilter.result, Decl(parserRealSource8.ts, 47, 67))
+>this.result : Symbol(result, Decl(parserRealSource8.ts, 47, 67))
 >this : Symbol(ScopeSearchFilter, Decl(parserRealSource8.ts, 42, 5))
->result : Symbol(ScopeSearchFilter.result, Decl(parserRealSource8.ts, 47, 67))
->this.select : Symbol(ScopeSearchFilter.select, Decl(parserRealSource8.ts, 46, 21))
+>result : Symbol(result, Decl(parserRealSource8.ts, 47, 67))
+>this.select : Symbol(select, Decl(parserRealSource8.ts, 46, 21))
 >this : Symbol(ScopeSearchFilter, Decl(parserRealSource8.ts, 42, 5))
->select : Symbol(ScopeSearchFilter.select, Decl(parserRealSource8.ts, 46, 21))
->this.result : Symbol(ScopeSearchFilter.result, Decl(parserRealSource8.ts, 47, 67))
+>select : Symbol(select, Decl(parserRealSource8.ts, 46, 21))
+>this.result : Symbol(result, Decl(parserRealSource8.ts, 47, 67))
 >this : Symbol(ScopeSearchFilter, Decl(parserRealSource8.ts, 42, 5))
->result : Symbol(ScopeSearchFilter.result, Decl(parserRealSource8.ts, 47, 67))
+>result : Symbol(result, Decl(parserRealSource8.ts, 47, 67))
 >b : Symbol(b, Decl(parserRealSource8.ts, 55, 22))
 
             if (this.result) {
->this.result : Symbol(ScopeSearchFilter.result, Decl(parserRealSource8.ts, 47, 67))
+>this.result : Symbol(result, Decl(parserRealSource8.ts, 47, 67))
 >this : Symbol(ScopeSearchFilter, Decl(parserRealSource8.ts, 42, 5))
->result : Symbol(ScopeSearchFilter.result, Decl(parserRealSource8.ts, 47, 67))
+>result : Symbol(result, Decl(parserRealSource8.ts, 47, 67))
 
                 return this.stop(this.result);
->this.stop : Symbol(ScopeSearchFilter.stop, Decl(parserRealSource8.ts, 46, 68))
+>this.stop : Symbol(stop, Decl(parserRealSource8.ts, 46, 68))
 >this : Symbol(ScopeSearchFilter, Decl(parserRealSource8.ts, 42, 5))
->stop : Symbol(ScopeSearchFilter.stop, Decl(parserRealSource8.ts, 46, 68))
->this.result : Symbol(ScopeSearchFilter.result, Decl(parserRealSource8.ts, 47, 67))
+>stop : Symbol(stop, Decl(parserRealSource8.ts, 46, 68))
+>this.result : Symbol(result, Decl(parserRealSource8.ts, 47, 67))
 >this : Symbol(ScopeSearchFilter, Decl(parserRealSource8.ts, 42, 5))
->result : Symbol(ScopeSearchFilter.result, Decl(parserRealSource8.ts, 47, 67))
+>result : Symbol(result, Decl(parserRealSource8.ts, 47, 67))
             }
             else {
                 return false;
@@= skipped -112, +112 lines =@@
 >memberScope : Symbol(memberScope, Decl(parserRealSource8.ts, 70, 11))
 
         context.modDeclChain.push(moduleDecl);
->context.modDeclChain.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
->context.modDeclChain : Symbol(AssignScopeContext.modDeclChain, Decl(parserRealSource8.ts, 9, 47))
+>context.modDeclChain.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
+>context.modDeclChain : Symbol(modDeclChain, Decl(parserRealSource8.ts, 9, 47))
 >context : Symbol(context, Decl(parserRealSource8.ts, 68, 51))
->modDeclChain : Symbol(AssignScopeContext.modDeclChain, Decl(parserRealSource8.ts, 9, 47))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>modDeclChain : Symbol(modDeclChain, Decl(parserRealSource8.ts, 9, 47))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >moduleDecl : Symbol(moduleDecl, Decl(parserRealSource8.ts, 69, 11))
 
         context.typeFlow.checker.currentModDecl = moduleDecl;
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 68, 51))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >moduleDecl : Symbol(moduleDecl, Decl(parserRealSource8.ts, 69, 11))
 
         aggScope = new SymbolAggregateScope(mod.symbol);
@@= skipped -23, +23 lines =@@
 
         aggScope.addParentScope(context.scopeChain.scope);
 >aggScope : Symbol(aggScope, Decl(parserRealSource8.ts, 71, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 68, 51))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
         pushAssignScope(aggScope, context, null, null, null);
 >pushAssignScope : Symbol(pushAssignScope, Decl(parserRealSource8.ts, 12, 5))
@@= skipped -17, +17 lines =@@
 >mod : Symbol(mod, Decl(parserRealSource8.ts, 77, 11))
 
             context.typeFlow.addLocalsFromScope(mod.containedScope, mod.symbol, moduleDecl.vars, mod.members.privateMembers, true);
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 68, 51))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >mod : Symbol(mod, Decl(parserRealSource8.ts, 77, 11))
 >mod : Symbol(mod, Decl(parserRealSource8.ts, 77, 11))
 >moduleDecl : Symbol(moduleDecl, Decl(parserRealSource8.ts, 69, 11))
@@= skipped -53, +53 lines =@@
             memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(classType);
 >memberScope : Symbol(memberScope, Decl(parserRealSource8.ts, 100, 11))
 >SymbolTableScope : Symbol(SymbolTableScope)
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 98, 50))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >classType : Symbol(classType, Decl(parserRealSource8.ts, 107, 11))
 
             aggScope = new SymbolAggregateScope(classType.symbol);
@@= skipped -15, +15 lines =@@
 
             aggScope.addParentScope(context.scopeChain.scope);
 >aggScope : Symbol(aggScope, Decl(parserRealSource8.ts, 101, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 98, 50))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
             classType.containedScope = aggScope;
 >classType : Symbol(classType, Decl(parserRealSource8.ts, 107, 11))
@@= skipped -19, +19 lines =@@
             memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(instanceType);
 >memberScope : Symbol(memberScope, Decl(parserRealSource8.ts, 100, 11))
 >SymbolTableScope : Symbol(SymbolTableScope)
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 98, 50))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >instanceType : Symbol(instanceType, Decl(parserRealSource8.ts, 120, 15))
 
             instanceType.memberScope = memberScope;
@@= skipped -15, +15 lines =@@
 
             aggScope.addParentScope(context.scopeChain.scope);
 >aggScope : Symbol(aggScope, Decl(parserRealSource8.ts, 101, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 98, 50))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
             pushAssignScope(aggScope, context, instanceType, classType, null);
 >pushAssignScope : Symbol(pushAssignScope, Decl(parserRealSource8.ts, 12, 5))
@@= skipped -18, +18 lines =@@
         else {
             ast.type = context.typeFlow.anyType;
 >ast : Symbol(ast, Decl(parserRealSource8.ts, 98, 41))
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 98, 50))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
         }
     }
 
@@= skipped -42, +42 lines =@@
         memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(interfaceType);
 >memberScope : Symbol(memberScope, Decl(parserRealSource8.ts, 137, 11))
 >SymbolTableScope : Symbol(SymbolTableScope)
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 135, 54))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >interfaceType : Symbol(interfaceType, Decl(parserRealSource8.ts, 144, 11))
 
         interfaceType.memberScope = memberScope;
@@= skipped -19, +19 lines =@@
 
         aggScope.addParentScope(context.scopeChain.scope);
 >aggScope : Symbol(aggScope, Decl(parserRealSource8.ts, 138, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 135, 54))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
         pushAssignScope(aggScope, context, null, null, null);
 >pushAssignScope : Symbol(pushAssignScope, Decl(parserRealSource8.ts, 12, 5))
@@= skipped -42, +42 lines =@@
         var withSymbol = new WithSymbol(withStmt.minChar, context.typeFlow.checker.locationInfo.unitIndex, withType);
 >withSymbol : Symbol(withSymbol, Decl(parserRealSource8.ts, 162, 11))
 >withStmt : Symbol(withStmt, Decl(parserRealSource8.ts, 155, 11))
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 154, 49))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >withType : Symbol(withType, Decl(parserRealSource8.ts, 156, 11), Decl(parserRealSource8.ts, 161, 11))
 
         withType.members = members;
@@= skipped -29, +29 lines =@@
 >TypeScript : Symbol(TypeScript, Decl(parserRealSource8.ts, 0, 0))
 >withType : Symbol(withType, Decl(parserRealSource8.ts, 156, 11), Decl(parserRealSource8.ts, 161, 11))
 >withType : Symbol(withType, Decl(parserRealSource8.ts, 156, 11), Decl(parserRealSource8.ts, 161, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 154, 49))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >withType : Symbol(withType, Decl(parserRealSource8.ts, 156, 11), Decl(parserRealSource8.ts, 161, 11))
 
         pushAssignScope(withScope, context, null, null, null);
@@= skipped -50, +50 lines =@@
         var isInnerStatic = isStatic && context.scopeChain.fnc != null;
 >isInnerStatic : Symbol(isInnerStatic, Decl(parserRealSource8.ts, 185, 11))
 >isStatic : Symbol(isStatic, Decl(parserRealSource8.ts, 184, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
         // for inner static functions, use the parent's member scope, so local vars cannot be captured
         var parentScope = isInnerStatic ? context.scopeChain.fnc.type.memberScope : context.scopeChain.scope;
 >parentScope : Symbol(parentScope, Decl(parserRealSource8.ts, 187, 11))
 >isInnerStatic : Symbol(isInnerStatic, Decl(parserRealSource8.ts, 185, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
         // if this is not a method, but enclosed by class, use constructor as
         // the enclosing scope
         // REVIEW: Some twisted logic here - this needs to be cleaned up once old classes are removed
         //  - if it's a new class, always use the contained scope, since we initialize the constructor scope below
         if (context.scopeChain.thisType &&
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
             (!funcDecl.isConstructor || hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod))) {
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
@@= skipped -30, +30 lines =@@
 
             var instType = context.scopeChain.thisType;
 >instType : Symbol(instType, Decl(parserRealSource8.ts, 195, 15))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
             if (!(instType.typeFlags & TypeFlags.IsClass) && !hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {
 >instType : Symbol(instType, Decl(parserRealSource8.ts, 195, 15))
@@= skipped -25, +25 lines =@@
             }
             else {
                 if (context.scopeChain.previous.scope.container &&
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
                     context.scopeChain.previous.scope.container.declAST &&
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
                     context.scopeChain.previous.scope.container.declAST.nodeType == NodeType.FuncDecl &&
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
                     (<FuncDecl>context.scopeChain.previous.scope.container.declAST).isConstructor) {
 >FuncDecl : Symbol(FuncDecl)
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
                         // if the parent is the class constructor, use the constructor scope
                     parentScope = instType.constructorScope;
@@= skipped -27, +27 lines =@@
                 }
                 else if (isStatic && context.scopeChain.classType) {
 >isStatic : Symbol(isStatic, Decl(parserRealSource8.ts, 184, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
                     parentScope = context.scopeChain.classType.containedScope;
 >parentScope : Symbol(parentScope, Decl(parserRealSource8.ts, 187, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
                 }
                 else {
                     // else, use the contained scope
@@= skipped -23, +23 lines =@@
         }
         else if (funcDecl.isConstructor && context.scopeChain.thisType) {
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
             // sets the container to the class type's symbol (which is shared by the instance type)
             container = context.scopeChain.thisType.symbol;
 >container : Symbol(container, Decl(parserRealSource8.ts, 178, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
         }
 
         if (funcDecl.type == null || hasFlag(funcDecl.type.symbol.flags, SymbolFlags.TypeSetDuringScopeAssignment)) {
@@= skipped -17, +17 lines =@@
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
 
             if (context.scopeChain.fnc && context.scopeChain.fnc.type) {
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
                 container = context.scopeChain.fnc.type.symbol;
 >container : Symbol(container, Decl(parserRealSource8.ts, 178, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
             }
 
             var funcScope = null;
@@= skipped -20, +20 lines =@@
             var outerFnc: FuncDecl = context.scopeChain.fnc;
 >outerFnc : Symbol(outerFnc, Decl(parserRealSource8.ts, 236, 15))
 >FuncDecl : Symbol(FuncDecl)
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
             var nameText = funcDecl.name ? funcDecl.name.actualText : null;
 >nameText : Symbol(nameText, Decl(parserRealSource8.ts, 237, 15))
@@= skipped -31, +31 lines =@@
                 }
                 funcScope = context.scopeChain.fnc.type.memberScope;
 >funcScope : Symbol(funcScope, Decl(parserRealSource8.ts, 235, 15))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
                 outerFnc.innerStaticFuncs[outerFnc.innerStaticFuncs.length] = funcDecl;
 >outerFnc : Symbol(outerFnc, Decl(parserRealSource8.ts, 236, 15))
@@= skipped -32, +32 lines =@@
 
                     funcScope = context.scopeChain.thisType.constructorScope;//locals;
 >funcScope : Symbol(funcScope, Decl(parserRealSource8.ts, 235, 15))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
                 }
                 else {
                     funcScope = context.scopeChain.scope;
 >funcScope : Symbol(funcScope, Decl(parserRealSource8.ts, 235, 15))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
                 }
             }
 
@@= skipped -39, +39 lines =@@
             }
 
             context.typeFlow.checker.createFunctionSignature(funcDecl, container,
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
 >container : Symbol(container, Decl(parserRealSource8.ts, 178, 11))
 
@@= skipped -32, +32 lines =@@
             {
                 funcDecl.accessorSymbol = context.typeFlow.checker.createAccessorSymbol(funcDecl, fgSym, container.getType(), (funcDecl.isMethod() && isStatic), true, funcScope, container);
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
 >fgSym : Symbol(fgSym, Decl(parserRealSource8.ts, 238, 15), Decl(parserRealSource8.ts, 352, 15))
 >container : Symbol(container, Decl(parserRealSource8.ts, 178, 11))
@@= skipped -70, +70 lines =@@
         // REVIEW: Is it a problem that this is being set twice for properties and constructors?
         funcDecl.unitIndex = context.typeFlow.checker.locationInfo.unitIndex;
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 
         var locals = new SymbolScopeBuilder(funcMembers, ambientFuncMembers, null, null, parentScope, localContainer);
 >locals : Symbol(locals, Decl(parserRealSource8.ts, 320, 11))
@@= skipped -19, +19 lines =@@
 
         if (funcDecl.isConstructor && context.scopeChain.thisType) {
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
             context.scopeChain.thisType.constructorScope = locals;
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >locals : Symbol(locals, Decl(parserRealSource8.ts, 320, 11))
         }
 
@@= skipped -56, +56 lines =@@
             }
             funcDecl.enclosingFnc = context.scopeChain.fnc;
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
             group.enclosingType = isStatic ? context.scopeChain.classType : context.scopeChain.thisType;
 >group : Symbol(group, Decl(parserRealSource8.ts, 339, 15))
 >isStatic : Symbol(isStatic, Decl(parserRealSource8.ts, 184, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
             // for mapping when type checking
             var fgSym = <TypeSymbol>ast.type.symbol;
@@= skipped -25, +25 lines =@@
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
 
                 context.typeFlow.addLocalsFromScope(locals, fgSym, funcDecl.vars,
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >locals : Symbol(locals, Decl(parserRealSource8.ts, 320, 11))
 >fgSym : Symbol(fgSym, Decl(parserRealSource8.ts, 238, 15), Decl(parserRealSource8.ts, 352, 15))
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
@@= skipped -11, +11 lines =@@
 >funcTable : Symbol(funcTable, Decl(parserRealSource8.ts, 308, 11))
 
                 context.typeFlow.addLocalsFromScope(statics, fgSym, funcDecl.statics,
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >statics : Symbol(statics, Decl(parserRealSource8.ts, 321, 11))
 >fgSym : Symbol(fgSym, Decl(parserRealSource8.ts, 238, 15), Decl(parserRealSource8.ts, 352, 15))
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
@@= skipped -30, +30 lines =@@
 >i : Symbol(i, Decl(parserRealSource8.ts, 361, 24))
 
                     context.typeFlow.checker.resolveTypeLink(locals,
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >locals : Symbol(locals, Decl(parserRealSource8.ts, 320, 11))
 
                                                                 paramSym.parameter.typeLink, true);
@@= skipped -10, +10 lines =@@
                 }
             }
             context.typeFlow.checker.resolveTypeLink(locals, signature.returnType,
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >locals : Symbol(locals, Decl(parserRealSource8.ts, 320, 11))
 >signature : Symbol(signature, Decl(parserRealSource8.ts, 340, 15))
 
@@= skipped -18, +18 lines =@@
 >thisType : Symbol(thisType, Decl(parserRealSource8.ts, 372, 15))
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
 >funcDecl : Symbol(funcDecl, Decl(parserRealSource8.ts, 176, 11))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 175, 53))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
             pushAssignScope(locals, context, thisType, null, funcDecl);
 >pushAssignScope : Symbol(pushAssignScope, Decl(parserRealSource8.ts, 12, 5))
@@= skipped -34, +34 lines =@@
             var catchLocals = new SymbolScopeBuilder(catchTable, null, null, null, context.scopeChain.scope,
 >catchLocals : Symbol(catchLocals, Decl(parserRealSource8.ts, 381, 15))
 >catchTable : Symbol(catchTable, Decl(parserRealSource8.ts, 380, 15))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 377, 50))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
                                                    context.scopeChain.scope.container);
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 377, 50))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 
             catchBlock.containedScope = catchLocals;
 >catchBlock : Symbol(catchBlock, Decl(parserRealSource8.ts, 378, 11))
@@= skipped -17, +17 lines =@@
 >pushAssignScope : Symbol(pushAssignScope, Decl(parserRealSource8.ts, 12, 5))
 >catchLocals : Symbol(catchLocals, Decl(parserRealSource8.ts, 381, 15))
 >context : Symbol(context, Decl(parserRealSource8.ts, 377, 50))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 377, 50))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 377, 50))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 377, 50))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
         }
     }
 
@@= skipped -42, +42 lines =@@
 
                 list.enclosingScope = context.scopeChain.scope;
 >list : Symbol(list, Decl(parserRealSource8.ts, 394, 19))
->context.scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>context.scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
 >context : Symbol(context, Decl(parserRealSource8.ts, 389, 11))
->scopeChain : Symbol(AssignScopeContext.scopeChain, Decl(parserRealSource8.ts, 8, 21))
+>scopeChain : Symbol(scopeChain, Decl(parserRealSource8.ts, 8, 21))
             }
             else if (ast.nodeType == NodeType.ModuleDeclaration) {
 >ast : Symbol(ast, Decl(parserRealSource8.ts, 388, 36))
@@= skipped -100, +100 lines =@@
 >context : Symbol(context, Decl(parserRealSource8.ts, 424, 11))
 
                 context.modDeclChain.pop();
->context.modDeclChain.pop : Symbol(Array.pop, Decl(lib.es5.d.ts, --, --))
->context.modDeclChain : Symbol(AssignScopeContext.modDeclChain, Decl(parserRealSource8.ts, 9, 47))
+>context.modDeclChain.pop : Symbol(pop, Decl(lib.es5.d.ts, --, --))
+>context.modDeclChain : Symbol(modDeclChain, Decl(parserRealSource8.ts, 9, 47))
 >context : Symbol(context, Decl(parserRealSource8.ts, 424, 11))
->modDeclChain : Symbol(AssignScopeContext.modDeclChain, Decl(parserRealSource8.ts, 9, 47))
->pop : Symbol(Array.pop, Decl(lib.es5.d.ts, --, --))
+>modDeclChain : Symbol(modDeclChain, Decl(parserRealSource8.ts, 9, 47))
+>pop : Symbol(pop, Decl(lib.es5.d.ts, --, --))
 
                 if (context.modDeclChain.length >= 1) {
->context.modDeclChain.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->context.modDeclChain : Symbol(AssignScopeContext.modDeclChain, Decl(parserRealSource8.ts, 9, 47))
+>context.modDeclChain.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>context.modDeclChain : Symbol(modDeclChain, Decl(parserRealSource8.ts, 9, 47))
 >context : Symbol(context, Decl(parserRealSource8.ts, 424, 11))
->modDeclChain : Symbol(AssignScopeContext.modDeclChain, Decl(parserRealSource8.ts, 9, 47))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>modDeclChain : Symbol(modDeclChain, Decl(parserRealSource8.ts, 9, 47))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
                     context.typeFlow.checker.currentModDecl = context.modDeclChain[context.modDeclChain.length - 1];
->context.typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
 >context : Symbol(context, Decl(parserRealSource8.ts, 424, 11))
->typeFlow : Symbol(AssignScopeContext.typeFlow, Decl(parserRealSource8.ts, 8, 51))
->context.modDeclChain : Symbol(AssignScopeContext.modDeclChain, Decl(parserRealSource8.ts, 9, 47))
+>typeFlow : Symbol(typeFlow, Decl(parserRealSource8.ts, 8, 51))
+>context.modDeclChain : Symbol(modDeclChain, Decl(parserRealSource8.ts, 9, 47))
 >context : Symbol(context, Decl(parserRealSource8.ts, 424, 11))
->modDeclChain : Symbol(AssignScopeContext.modDeclChain, Decl(parserRealSource8.ts, 9, 47))
->context.modDeclChain.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->context.modDeclChain : Symbol(AssignScopeContext.modDeclChain, Decl(parserRealSource8.ts, 9, 47))
+>modDeclChain : Symbol(modDeclChain, Decl(parserRealSource8.ts, 9, 47))
+>context.modDeclChain.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>context.modDeclChain : Symbol(modDeclChain, Decl(parserRealSource8.ts, 9, 47))
 >context : Symbol(context, Decl(parserRealSource8.ts, 424, 11))
->modDeclChain : Symbol(AssignScopeContext.modDeclChain, Decl(parserRealSource8.ts, 9, 47))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>modDeclChain : Symbol(modDeclChain, Decl(parserRealSource8.ts, 9, 47))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
                 }
             }
             else if (ast.nodeType == NodeType.ClassDeclaration) {
