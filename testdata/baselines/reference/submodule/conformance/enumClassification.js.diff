--- old.enumClassification.js
+++ new.enumClassification.js
@@= skipped -152, +152 lines =@@
 // Examples of numeric enum types with constant and computed members
 var E20;
 (function (E20) {
-    E20[E20["A"] = "foo".length] = "A";
-    E20[E20["B"] = E20.A + 1] = "B";
-    E20[E20["C"] = +"123"] = "C";
-    E20[E20["D"] = Math.sin(1)] = "D";
+    E20["A"] = "foo".length;
+    if (typeof E20.A !== "string") E20[E20.A] = "A";
+    E20["B"] = E20.A + 1;
+    if (typeof E20.B !== "string") E20[E20.B] = "B";
+    E20["C"] = +"123";
+    if (typeof E20.C !== "string") E20[E20.C] = "C";
+    E20["D"] = Math.sin(1);
+    if (typeof E20.D !== "string") E20[E20.D] = "D";
 })(E20 || (E20 = {}));


 //// [enumClassification.d.ts]
+// An enum type where each member has no initializer or an initializer that specififes
+// a numeric literal, a string literal, or a single identifier naming another member in
+// the enum type is classified as a literal enum type. An enum type that doesn't adhere
+// to this pattern is classified as a numeric enum type.
+// Examples of literal enum types
 declare enum E01 {
     A = 0
 }
@@= skipped -47, +56 lines =@@
     D = "hello",
     E = 10
 }
+// Examples of numeric enum types with only constant members
 declare enum E10 {
 }
 declare enum E11 {
@@= skipped -12, +13 lines =@@
     B = 2,
     C = 4
 }
+// Examples of numeric enum types with constant and computed members
 declare enum E20 {
     A,
     B,