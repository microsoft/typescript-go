--- old.constructorHasPrototypeProperty.symbols
+++ new.constructorHasPrototypeProperty.symbols
@@= skipped -7, +7 lines =@@
 >C : Symbol(C, Decl(constructorHasPrototypeProperty.ts, 0, 19))
 
         foo: string;
->foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 1, 13))
+>foo : Symbol(foo, Decl(constructorHasPrototypeProperty.ts, 1, 13))
     }
 
     class D extends C {
@@= skipped -8, +8 lines =@@
 >C : Symbol(C, Decl(constructorHasPrototypeProperty.ts, 0, 19))
 
         bar: string;
->bar : Symbol(D.bar, Decl(constructorHasPrototypeProperty.ts, 5, 23))
+>bar : Symbol(bar, Decl(constructorHasPrototypeProperty.ts, 5, 23))
     }
 
     var r = C.prototype;
 >r : Symbol(r, Decl(constructorHasPrototypeProperty.ts, 9, 7))
->C.prototype : Symbol(C.prototype)
+>C.prototype : Symbol(prototype)
 >C : Symbol(C, Decl(constructorHasPrototypeProperty.ts, 0, 19))
->prototype : Symbol(C.prototype)
+>prototype : Symbol(prototype)
 
     r.foo;
->r.foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 1, 13))
+>r.foo : Symbol(foo, Decl(constructorHasPrototypeProperty.ts, 1, 13))
 >r : Symbol(r, Decl(constructorHasPrototypeProperty.ts, 9, 7))
->foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 1, 13))
+>foo : Symbol(foo, Decl(constructorHasPrototypeProperty.ts, 1, 13))
 
     var r2 = D.prototype;
 >r2 : Symbol(r2, Decl(constructorHasPrototypeProperty.ts, 11, 7))
->D.prototype : Symbol(D.prototype)
+>D.prototype : Symbol(prototype)
 >D : Symbol(D, Decl(constructorHasPrototypeProperty.ts, 3, 5))
->prototype : Symbol(D.prototype)
+>prototype : Symbol(prototype)
 
     r2.bar;
->r2.bar : Symbol(D.bar, Decl(constructorHasPrototypeProperty.ts, 5, 23))
+>r2.bar : Symbol(bar, Decl(constructorHasPrototypeProperty.ts, 5, 23))
 >r2 : Symbol(r2, Decl(constructorHasPrototypeProperty.ts, 11, 7))
->bar : Symbol(D.bar, Decl(constructorHasPrototypeProperty.ts, 5, 23))
+>bar : Symbol(bar, Decl(constructorHasPrototypeProperty.ts, 5, 23))
 }
 
 module Generic {
@@= skipped -35, +35 lines =@@
 >U : Symbol(U, Decl(constructorHasPrototypeProperty.ts, 16, 14))
 
         foo: T;
->foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 16, 18))
+>foo : Symbol(foo, Decl(constructorHasPrototypeProperty.ts, 16, 18))
 >T : Symbol(T, Decl(constructorHasPrototypeProperty.ts, 16, 12))
 
         bar: U;
->bar : Symbol(C.bar, Decl(constructorHasPrototypeProperty.ts, 17, 15))
+>bar : Symbol(bar, Decl(constructorHasPrototypeProperty.ts, 17, 15))
 >U : Symbol(U, Decl(constructorHasPrototypeProperty.ts, 16, 14))
     }
 
@@= skipped -17, +17 lines =@@
 >U : Symbol(U, Decl(constructorHasPrototypeProperty.ts, 21, 14))
 
         baz: T;
->baz : Symbol(D.baz, Decl(constructorHasPrototypeProperty.ts, 21, 33))
+>baz : Symbol(baz, Decl(constructorHasPrototypeProperty.ts, 21, 33))
 >T : Symbol(T, Decl(constructorHasPrototypeProperty.ts, 21, 12))
 
         bing: U;
->bing : Symbol(D.bing, Decl(constructorHasPrototypeProperty.ts, 22, 15))
+>bing : Symbol(bing, Decl(constructorHasPrototypeProperty.ts, 22, 15))
 >U : Symbol(U, Decl(constructorHasPrototypeProperty.ts, 21, 14))
     }
 
     var r = C.prototype; // C<any, any>
 >r : Symbol(r, Decl(constructorHasPrototypeProperty.ts, 26, 7))
->C.prototype : Symbol(C.prototype)
+>C.prototype : Symbol(prototype)
 >C : Symbol(C, Decl(constructorHasPrototypeProperty.ts, 15, 16))
->prototype : Symbol(C.prototype)
+>prototype : Symbol(prototype)
 
     var ra = r.foo; // any
 >ra : Symbol(ra, Decl(constructorHasPrototypeProperty.ts, 27, 7))
->r.foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 16, 18))
+>r.foo : Symbol(foo, Decl(constructorHasPrototypeProperty.ts, 16, 18))
 >r : Symbol(r, Decl(constructorHasPrototypeProperty.ts, 26, 7))
->foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 16, 18))
+>foo : Symbol(foo, Decl(constructorHasPrototypeProperty.ts, 16, 18))
 
     var r2 = D.prototype; // D<any, any>
 >r2 : Symbol(r2, Decl(constructorHasPrototypeProperty.ts, 28, 7))
->D.prototype : Symbol(D.prototype)
+>D.prototype : Symbol(prototype)
 >D : Symbol(D, Decl(constructorHasPrototypeProperty.ts, 19, 5))
->prototype : Symbol(D.prototype)
+>prototype : Symbol(prototype)
 
     var rb = r2.baz; // any
 >rb : Symbol(rb, Decl(constructorHasPrototypeProperty.ts, 29, 7))
->r2.baz : Symbol(D.baz, Decl(constructorHasPrototypeProperty.ts, 21, 33))
+>r2.baz : Symbol(baz, Decl(constructorHasPrototypeProperty.ts, 21, 33))
 >r2 : Symbol(r2, Decl(constructorHasPrototypeProperty.ts, 28, 7))
->baz : Symbol(D.baz, Decl(constructorHasPrototypeProperty.ts, 21, 33))
+>baz : Symbol(baz, Decl(constructorHasPrototypeProperty.ts, 21, 33))
 }
