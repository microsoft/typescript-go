--- old.typeParameterUsedAsTypeParameterConstraint.types
+++ new.typeParameterUsedAsTypeParameterConstraint.types
@@= skipped -4, +4 lines =@@
 
 function foo<T, U extends T>(x: T, y: U): T {
 >foo : <T, U extends T>(x: T, y: U) => T
+>T : T
+>U : U
 >x : T
 >y : U
 
@@= skipped -14, +16 lines =@@
 
 function foo2<U extends T, T>(x: T, y: U): T {
 >foo2 : <U extends T, T>(x: T, y: U) => T
+>U : U
+>T : T
 >x : T
 >y : U
 
@@= skipped -15, +17 lines =@@
 var f = function <T, U extends T>(x: T, y: U): T {
 >f : <T, U extends T>(x: T, y: U) => T
 >function <T, U extends T>(x: T, y: U): T {    x = y;    return y;} : <T, U extends T>(x: T, y: U) => T
+>T : T
+>U : U
 >x : T
 >y : U
 
@@= skipped -15, +17 lines =@@
 var f2 = function <U extends T, T>(x: T, y: U): T {
 >f2 : <U extends T, T>(x: T, y: U) => T
 >function <U extends T, T>(x: T, y: U): T {    x = y;    return y;} : <U extends T, T>(x: T, y: U) => T
+>U : U
+>T : T
 >x : T
 >y : U
 
@@= skipped -15, +17 lines =@@
 var f3 = <T, U extends T>(x: T, y: U): T => {
 >f3 : <T, U extends T>(x: T, y: U) => T
 ><T, U extends T>(x: T, y: U): T => {    x = y;    return y;} : <T, U extends T>(x: T, y: U) => T
+>T : T
+>U : U
 >x : T
 >y : U
 
@@= skipped -15, +17 lines =@@
 var f4 = <U extends T, T>(x: T, y: U): T => {
 >f4 : <U extends T, T>(x: T, y: U) => T
 ><U extends T, T>(x: T, y: U): T => {    x = y;    return y;} : <U extends T, T>(x: T, y: U) => T
+>U : U
+>T : T
 >x : T
 >y : U
 
