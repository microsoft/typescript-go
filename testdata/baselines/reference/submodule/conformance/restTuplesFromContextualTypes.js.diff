--- old.restTuplesFromContextualTypes.js
+++ new.restTuplesFromContextualTypes.js
@@= skipped -101, +101 lines =@@


 //// [restTuplesFromContextualTypes.js]
-"use strict";
 (function (a, b, c) { })(...t1);
 (function (...x) { })(...t1);
 (function (a, ...x) { })(...t1);
@@= skipped -70, +69 lines =@@
 declare function f3(cb: (x: number, ...args: typeof t3) => void): void;
 declare function f4<T extends any[]>(t: T): void;
 declare function f5<T extends any[], U>(f: (...args: T) => U): (...args: T) => U;
-declare let g0: () => string;
-declare let g1: (x: any, y: any) => number;
-declare let g2: (x: number, y: any) => number;
-declare let g3: (x: number, y: number) => number;
+declare let g0: (...args: []) => string;
+declare let g1: (...args: [x: any, y: any]) => number;
+declare let g2: (...args: [x: number, y: any]) => number;
+declare let g3: (...args: [x: number, y: number]) => number;
 declare let g4: (...args: any[]) => boolean;
 declare function pipe<A extends any[], B, C>(f: (...args: A) => B, g: (x: B) => C): (...args: A) => C;
-declare let g5: () => number;
-declare let g6: (x: any) => number;
-declare let g7: (x: any, y: any) => string;
-declare let g8: (x: number, y: string) => string;
+declare let g5: (...args: []) => number;
+declare let g6: (...args: [x: any]) => number;
+declare let g7: (...args: [x: any, y: any]) => string;
+declare let g8: (...args: [x: number, y: string]) => string;
 declare var tuple: [number, string];
 declare function take(cb: (a: number, b: string) => void): void;
 type ArgsUnion = [number, string] | [number, Error];