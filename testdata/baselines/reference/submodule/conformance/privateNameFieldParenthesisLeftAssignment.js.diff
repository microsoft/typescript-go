--- old.privateNameFieldParenthesisLeftAssignment.js
+++ new.privateNameFieldParenthesisLeftAssignment.js
@@= skipped -32, +32 lines =@@
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
     return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
 };
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
 var _Foo_p;
 class Foo {
     constructor(value) {
@@= skipped -7, +12 lines =@@
         __classPrivateFieldSet(this, _Foo_p, value, "f");
     }
     t1(p) {
-        __classPrivateFieldSet(this, _Foo_p, p, "f");
+        __classPrivateFieldGet(this, _Foo_p, "f") = p;
     }
     t2(p) {
-        __classPrivateFieldSet(this, _Foo_p, p, "f");
+        __classPrivateFieldGet(this, _Foo_p, "f") = p;
     }
     t3(p) {
         __classPrivateFieldSet(this, _Foo_p, p, "f");