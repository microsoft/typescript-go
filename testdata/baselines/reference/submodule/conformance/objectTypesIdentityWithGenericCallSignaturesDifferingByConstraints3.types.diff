--- old.objectTypesIdentityWithGenericCallSignaturesDifferingByConstraints3.types
+++ new.objectTypesIdentityWithGenericCallSignaturesDifferingByConstraints3.types
@@= skipped -13, +13 lines =@@
 >foo : string
 
 interface Three { foo: string }
+>Three : Three
 >foo : string
 
 interface Four<T> { foo: T }
+>Four : Four<T>
+>T : T
 >foo : T
 
 interface Five<T> extends Four<T> { }
+>Five : Five<T>
+>T : T
+
 interface Six<T, U> {
+>Six : Six<T, U>
+>T : T
+>U : U
+
     foo: T;
 >foo : T
 }
@@= skipped -16, +26 lines =@@
 
     foo<T extends U, U extends One>(x: T, y: U): string { return null; }
 >foo : <T extends U, U extends One>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 }
 
 class B<T extends U, U extends Two> {
 >B : B<T, U>
+>T : T
+>U : U
 
     foo(x: T, y: U): string { return null; }
 >foo : (x: T, y: U) => string
@@= skipped -15, +19 lines =@@
 
 class C<T extends U, U extends Three> {
 >C : C<T, U>
+>T : T
+>U : U
 
     foo(x: T, y: U): string { return null; }
 >foo : (x: T, y: U) => string
@@= skipped -9, +11 lines =@@
 
 class D<T extends U, U extends Four<string>> {
 >D : D<T, U>
+>T : T
+>U : U
 
     foo(x: T, y: U): string { return null; }
 >foo : (x: T, y: U) => string
@@= skipped -8, +10 lines =@@
 }
 
 interface I<T extends U, U extends Five<string>> {
+>I : I<T, U>
+>T : T
+>U : U
+
     foo(x: T, y: U): string;
 >foo : (x: T, y: U) => string
 >x : T
@@= skipped -7, +11 lines =@@
 }
 
 interface I2 {
+>I2 : I2
+
     foo<T extends U, U extends Six<string, string>>(x: T, y: U): string;
 >foo : <T extends U, U extends Six<string, string>>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 }
 
 var a: { foo<T extends U, U extends One>(x: T, y: U): string }
->a : { foo<T extends U, U extends One>(x: T, y: U): string; }
+>a : { foo: <T extends U, U extends One>(x: T, y: U) => string; }
 >foo : <T extends U, U extends One>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 
 var b = { foo<T extends U, U extends Two>(x: T, y: U) { return ''; } };
->b : { foo<T extends U, U extends Two>(x: T, y: U): string; }
->{ foo<T extends U, U extends Two>(x: T, y: U) { return ''; } } : { foo<T extends U, U extends Two>(x: T, y: U): string; }
+>b : { foo: <T extends U, U extends Two>(x: T, y: U) => string; }
+>{ foo<T extends U, U extends Two>(x: T, y: U) { return ''; } } : { foo: <T extends U, U extends Two>(x: T, y: U) => string; }
 >foo : <T extends U, U extends Two>(x: T, y: U) => string
+>T : T
+>U : U
 >x : T
 >y : U
 >'' : ""
@@= skipped -69, +77 lines =@@
 >x : any
 
 function foo3(x: typeof a);
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
->x : { foo<T extends U, U extends One>(x: T, y: U): string; }
->a : { foo<T extends U, U extends One>(x: T, y: U): string; }
+>foo3 : { (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
+>x : { foo: <T extends U, U extends One>(x: T, y: U) => string; }
 
 function foo3(x: typeof a); // error
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
->x : { foo<T extends U, U extends One>(x: T, y: U): string; }
->a : { foo<T extends U, U extends One>(x: T, y: U): string; }
+>foo3 : { (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
+>x : { foo: <T extends U, U extends One>(x: T, y: U) => string; }
 
 function foo3(x: any) { }
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
 >x : any
 
 function foo4(x: typeof b);
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { foo<T extends U, U extends Two>(x: T, y: U): string; }
->b : { foo<T extends U, U extends Two>(x: T, y: U): string; }
+>foo4 : { (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
+>x : { foo: <T extends U, U extends Two>(x: T, y: U) => string; }
 
 function foo4(x: typeof b); // error
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { foo<T extends U, U extends Two>(x: T, y: U): string; }
->b : { foo<T extends U, U extends Two>(x: T, y: U): string; }
+>foo4 : { (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
+>x : { foo: <T extends U, U extends Two>(x: T, y: U) => string; }
 
 function foo4(x: any) { }
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
+>foo4 : { (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
 >x : any
 
 function foo5(x: A);
@@= skipped -88, +84 lines =@@
 >x : any
 
 function foo7(x: A);
->foo7 : { (x: A): any; (x: typeof a): any; }
+>foo7 : { (x: A): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
 >x : A
 
 function foo7(x: typeof a); // error
->foo7 : { (x: A): any; (x: typeof a): any; }
->x : { foo<T extends U, U extends One>(x: T, y: U): string; }
->a : { foo<T extends U, U extends One>(x: T, y: U): string; }
+>foo7 : { (x: A): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
+>x : { foo: <T extends U, U extends One>(x: T, y: U) => string; }
 
 function foo7(x: any) { }
->foo7 : { (x: A): any; (x: typeof a): any; }
+>foo7 : { (x: A): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
 >x : any
 
 function foo8(x: B<Two, Two>);
@@= skipped -37, +36 lines =@@
 >x : any
 
 function foo10(x: B<Two, Two>);
->foo10 : { (x: B<Two, Two>): any; (x: typeof a): any; }
+>foo10 : { (x: B<Two, Two>): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
 >x : B<Two, Two>
 
 function foo10(x: typeof a); // ok
->foo10 : { (x: B<Two, Two>): any; (x: typeof a): any; }
->x : { foo<T extends U, U extends One>(x: T, y: U): string; }
->a : { foo<T extends U, U extends One>(x: T, y: U): string; }
+>foo10 : { (x: B<Two, Two>): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
+>x : { foo: <T extends U, U extends One>(x: T, y: U) => string; }
 
 function foo10(x: any) { }
->foo10 : { (x: B<Two, Two>): any; (x: typeof a): any; }
+>foo10 : { (x: B<Two, Two>): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
 >x : any
 
 function foo11(x: B<Two, Two>);
->foo11 : { (x: B<Two, Two>): any; (x: typeof b): any; }
+>foo11 : { (x: B<Two, Two>): any; (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
 >x : B<Two, Two>
 
 function foo11(x: typeof b); // ok
->foo11 : { (x: B<Two, Two>): any; (x: typeof b): any; }
->x : { foo<T extends U, U extends Two>(x: T, y: U): string; }
->b : { foo<T extends U, U extends Two>(x: T, y: U): string; }
+>foo11 : { (x: B<Two, Two>): any; (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
+>x : { foo: <T extends U, U extends Two>(x: T, y: U) => string; }
 
 function foo11(x: any) { }
->foo11 : { (x: B<Two, Two>): any; (x: typeof b): any; }
+>foo11 : { (x: B<Two, Two>): any; (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
 >x : any
 
 function foo12(x: I<Five<string>, Five<string>>);
@@= skipped -50, +48 lines =@@
 >x : any
 
 function foo13(x: I<Five<string>, Five<string>>);
->foo13 : { (x: I<Five<string>, Five<string>>): any; (x: typeof a): any; }
+>foo13 : { (x: I<Five<string>, Five<string>>): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
 >x : I<Five<string>, Five<string>>
 
 function foo13(x: typeof a); // ok
->foo13 : { (x: I<Five<string>, Five<string>>): any; (x: typeof a): any; }
->x : { foo<T extends U, U extends One>(x: T, y: U): string; }
->a : { foo<T extends U, U extends One>(x: T, y: U): string; }
+>foo13 : { (x: I<Five<string>, Five<string>>): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
+>x : { foo: <T extends U, U extends One>(x: T, y: U) => string; }
 
 function foo13(x: any) { }
->foo13 : { (x: I<Five<string>, Five<string>>): any; (x: typeof a): any; }
+>foo13 : { (x: I<Five<string>, Five<string>>): any; (x: { foo: <T extends U, U extends One>(x: T, y: U) => string; }): any; }
 >x : any
 
 function foo14(x: I<Five<string>, Five<string>>);
->foo14 : { (x: I<Five<string>, Five<string>>): any; (x: typeof b): any; }
+>foo14 : { (x: I<Five<string>, Five<string>>): any; (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
 >x : I<Five<string>, Five<string>>
 
 function foo14(x: typeof b); // ok
->foo14 : { (x: I<Five<string>, Five<string>>): any; (x: typeof b): any; }
->x : { foo<T extends U, U extends Two>(x: T, y: U): string; }
->b : { foo<T extends U, U extends Two>(x: T, y: U): string; }
+>foo14 : { (x: I<Five<string>, Five<string>>): any; (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
+>x : { foo: <T extends U, U extends Two>(x: T, y: U) => string; }
 
 function foo14(x: any) { }
->foo14 : { (x: I<Five<string>, Five<string>>): any; (x: typeof b): any; }
+>foo14 : { (x: I<Five<string>, Five<string>>): any; (x: { foo: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
 >x : any
 
 function foo15(x: I2);
