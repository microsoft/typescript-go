--- old.exportsAndImports3.symbols
+++ new.exportsAndImports3.symbols
@@= skipped -16, +16 lines =@@
 >E : Symbol(E, Decl(t1.ts, 5, 1))
 
     A, B, C
->A : Symbol(E.A, Decl(t1.ts, 6, 15))
->B : Symbol(E.B, Decl(t1.ts, 7, 6))
->C : Symbol(E.C, Decl(t1.ts, 7, 9))
+>A : Symbol(A, Decl(t1.ts, 6, 15))
+>B : Symbol(B, Decl(t1.ts, 7, 6))
+>C : Symbol(C, Decl(t1.ts, 7, 9))
 }
 export const enum D {
 >D : Symbol(D, Decl(t1.ts, 8, 1))
 
     A, B, C
->A : Symbol(D.A, Decl(t1.ts, 9, 21))
->B : Symbol(D.B, Decl(t1.ts, 10, 6))
->C : Symbol(D.C, Decl(t1.ts, 10, 9))
+>A : Symbol(A, Decl(t1.ts, 9, 21))
+>B : Symbol(B, Decl(t1.ts, 10, 6))
+>C : Symbol(C, Decl(t1.ts, 10, 9))
 }
 export module M {
 >M : Symbol(M, Decl(t1.ts, 11, 1))
@@= skipped -31, +31 lines =@@
 export import a = M.x;
 >a : Symbol(a, Decl(t1.ts, 19, 23))
 >M : Symbol(M, Decl(t1.ts, 11, 1))
->x : Symbol(a, Decl(t1.ts, 13, 14))
+>x : Symbol(x, Decl(t1.ts, 13, 14))
 
 export { v as v1, f as f1, C as C1, I as I1, E as E1, D as D1, M as M1, N as N1, T as T1, a as a1 };
 >v : Symbol(v, Decl(t1.ts, 0, 10))
