--- old.destructuringParameterProperties3.types
+++ new.destructuringParameterProperties3.types
@@= skipped -34, +34 lines =@@
 
             this.a = a || k;
 >this.a = a || k : T
->this.a : any
+>this.a : T
 >this : this
->a : any
+>a : T
 >a || k : T
 >a : T
 >k : T
@@= skipped -10, +10 lines =@@
     }
 
     public getA() {
->getA : () => any
+>getA : () => T
 
         return this.a
->this.a : any
+>this.a : T
 >this : this
->a : any
+>a : T
     }
 
     public getB() {
@@= skipped -38, +38 lines =@@
 >"" : ""
 
 var [x_a, x_b, x_c] = [x.getA(), x.getB(), x.getC()];
->x_a : any
+>x_a : number
 >x_b : any
 >x_c : any
->[x.getA(), x.getB(), x.getC()] : [any, any, any]
->x.getA() : any
->x.getA : () => any
+>[x.getA(), x.getB(), x.getC()] : [number, any, any]
+>x.getA() : number
+>x.getA : () => number
 >x : C1<number, boolean, string>
->getA : () => any
+>getA : () => number
 >x.getB() : any
 >x.getB : () => any
 >x : C1<number, boolean, string>
@@= skipped -28, +28 lines =@@
 >true : true
 
 var [y_a, y_b, y_c] = [y.getA(), y.getB(), y.getC()];
->y_a : any
+>y_a : number
 >y_b : any
 >y_c : any
->[y.getA(), y.getB(), y.getC()] : [any, any, any]
->y.getA() : any
->y.getA : () => any
+>[y.getA(), y.getB(), y.getC()] : [number, any, any]
+>y.getA() : number
+>y.getA : () => number
 >y : C1<number, boolean, boolean>
->getA : () => any
+>getA : () => number
 >y.getB() : any
 >y.getB : () => any
 >y : C1<number, boolean, boolean>
@@= skipped -28, +28 lines =@@
 >"" : ""
 
 var [z_a, z_b, z_c] = [z.getA(), z.getB(), z.getC()];
->z_a : any
+>z_a : number
 >z_b : any
 >z_c : any
->[z.getA(), z.getB(), z.getC()] : [any, any, any]
->z.getA() : any
->z.getA : () => any
+>[z.getA(), z.getB(), z.getC()] : [number, any, any]
+>z.getA() : 10
+>z.getA : () => 10
 >z : C1<10, string, string>
->getA : () => any
+>getA : () => 10
 >z.getB() : any
 >z.getB : () => any
 >z : C1<10, string, string>
@@= skipped -28, +28 lines =@@
 >undefined : undefined
 
 var [z_a, z_b, z_c] = [z.getA(), z.getB(), z.getC()];
->z_a : any
+>z_a : number
 >z_b : any
 >z_c : any
->[z.getA(), z.getB(), z.getC()] : [any, any, any]
->z.getA() : any
->z.getA : () => any
+>[z.getA(), z.getB(), z.getC()] : [number, any, any]
+>z.getA() : 10
+>z.getA : () => 10
 >z : C1<10, string, string>
->getA : () => any
+>getA : () => 10
 >z.getB() : any
 >z.getB : () => any
 >z : C1<10, string, string>
