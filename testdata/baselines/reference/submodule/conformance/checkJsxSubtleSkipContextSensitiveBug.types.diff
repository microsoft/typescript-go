--- old.checkJsxSubtleSkipContextSensitiveBug.types
+++ new.checkJsxSubtleSkipContextSensitiveBug.types
@@= skipped -2, +2 lines =@@
 === checkJsxSubtleSkipContextSensitiveBug.tsx ===
 /// <reference path="react16.d.ts" />
 import * as React from "react";
->React : typeof React
+>React : any
 
 interface ErrorResult { error: true }
+>ErrorResult : ErrorResult
 >error : true
 >true : true
 
 interface AsyncLoaderProps<TResult> {
+>AsyncLoaderProps : AsyncLoaderProps<TResult>
+>TResult : TResult
+
     readonly prop1: () => Promise<TResult>;
 >prop1 : () => Promise<TResult>
 
@@= skipped -17, +21 lines =@@
 
 class AsyncLoader<TResult> extends React.Component<AsyncLoaderProps<TResult>> {
 >AsyncLoader : AsyncLoader<TResult>
->React.Component : React.Component<AsyncLoaderProps<TResult>, {}, any>
->React : typeof React
->Component : typeof React.Component
+>TResult : TResult
+>React.Component : any
+>React : any
+>Component : any
 
     render() { return null; }
 >render : () => null
 }
 
 async function load(): Promise<{ success: true } | ErrorResult> {
->load : () => Promise<{ success: true; } | ErrorResult>
+>load : () => Promise<ErrorResult | { success: true; }>
 >success : true
 >true : true
 
@@= skipped -20, +21 lines =@@
 }
 
 const loader = <AsyncLoader
->loader : JSX.Element
-><AsyncLoader    prop1={load}    prop2={result => result}/> : JSX.Element
+>loader : any
+><AsyncLoader    prop1={load}    prop2={result => result}/> : any
 >AsyncLoader : typeof AsyncLoader
 
     prop1={load}
->prop1 : () => Promise<{ success: true; } | ErrorResult>
->load : () => Promise<{ success: true; } | ErrorResult>
+>prop1 : any
+>load : () => Promise<ErrorResult | { success: true; }>
 
     prop2={result => result}
->prop2 : (result: { success: true; }) => { success: true; }
->result => result : (result: { success: true; }) => { success: true; }
->result : { success: true; }
->result : { success: true; }
+>prop2 : any
+>result => result : (result: any) => any
+>result : any
+>result : any
 
 />;
 
