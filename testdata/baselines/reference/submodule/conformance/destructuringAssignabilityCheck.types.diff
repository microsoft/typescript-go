--- old.destructuringAssignabilityCheck.types
+++ new.destructuringAssignabilityCheck.types
@@= skipped -2, +2 lines =@@
 === destructuringAssignabilityCheck.ts ===
 const [] = {}; // should be error
 >{} : {}
->   : ^^
 
 const {} = undefined; // error correctly
 >undefined : undefined
->          : ^^^^^^^^^
 
 (([]) => 0)({}); // should be error
 >(([]) => 0)({}) : number
->                : ^^^^^^
->(([]) => 0) : ([]: {}) => number
->            : ^  ^^^^^^^^^^^^^^^
->([]) => 0 : ([]: {}) => number
->          : ^  ^^^^^^^^^^^^^^^
+>(([]) => 0) : (__0: {}) => number
+>([]) => 0 : (__0: {}) => number
 >0 : 0
->  : ^
 >{} : {}
->   : ^^
 
 (({}) => 0)(undefined); // should be error
 >(({}) => 0)(undefined) : number
->                       : ^^^^^^
->(({}) => 0) : ({}: undefined) => number
->            : ^  ^^^^^^^^^^^^^^^^^^^^^^
->({}) => 0 : ({}: undefined) => number
->          : ^  ^^^^^^^^^^^^^^^^^^^^^^
+>(({}) => 0) : (__0: undefined) => number
+>({}) => 0 : (__0: undefined) => number
 >0 : 0
->  : ^
 >undefined : undefined
->          : ^^^^^^^^^
 
 function foo({}: undefined) {
->foo : ({}: undefined) => number
->    : ^  ^^         ^^^^^^^^^^^
+>foo : (__0: undefined) => number
 
     return 0
 >0 : 0
->  : ^
 }
 function bar([]: {}) {
->bar : ([]: {}) => number
->    : ^  ^^  ^^^^^^^^^^^
+>bar : (__0: {}) => number
 
     return 0
 >0 : 0
->  : ^
 }
 
 const { }: undefined = 1
 >1 : 1
->  : ^
 
 const []: {} = {}
 >{} : {}
->   : ^^
 
