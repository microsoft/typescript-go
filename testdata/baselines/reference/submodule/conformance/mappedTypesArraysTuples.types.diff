--- old.mappedTypesArraysTuples.types
+++ new.mappedTypesArraysTuples.types
@@= skipped -76, +76 lines =@@
 >T50 : readonly string[]
 
 type T51 = Readonly<[number, number]>;
->T51 : readonly [number, number]
+>T51 : [number, number]
 
 type T52 = Partial<Readonly<string[]>>;
 >T52 : readonly (string | undefined)[]
@@= skipped -67, +67 lines =@@
 >x21 : (number | undefined)[]
 
 declare let x22: { a: number | undefined, b?: string[] };
->x22 : { a: number | undefined; b?: string[]; }
+>x22 : { a: number | undefined; b?: string[] | undefined; }
 >a : number | undefined
 >b : string[] | undefined
 
@@= skipped -8, +8 lines =@@
 >y22 : { a: number; b: string[]; }
 >nonpartial(x22) : { a: number; b: string[]; }
 >nonpartial : <T>(x: Partial<T>) => T
->x22 : { a: number | undefined; b?: string[]; }
+>x22 : { a: number | undefined; b?: string[] | undefined; }
 
 type __Awaited<T> = T extends PromiseLike<infer U> ? U : T;
 >__Awaited : __Awaited<T>
@@= skipped -105, +105 lines =@@
 >acceptArray(mapArray(arr)) : void
 >acceptArray : (arr: any[]) => void
 >mapArray(arr) : Mapped<T>
->mapArray : <T_1 extends any[]>(arr: T_1) => Mapped<T_1>
+>mapArray : <T extends any[]>(arr: T) => Mapped<T>
 >arr : T
 }
 
