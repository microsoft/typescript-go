--- old.nullIsSubtypeOfEverythingButUndefined.types
+++ new.nullIsSubtypeOfEverythingButUndefined.types
@@= skipped -14, +14 lines =@@
 
 var u: typeof undefined;
 >u : any
->undefined : undefined
 
 var r0b = true ? u : null;
 >r0b : any
@@= skipped -109, +108 lines =@@
 >true ? <T>(x: T) => { return x } : null : <T>(x: T) => T
 >true : true
 ><T>(x: T) => { return x } : <T>(x: T) => T
+>T : T
 >x : T
 >x : T
 
@@= skipped -8, +9 lines =@@
 >true ? null : <T>(x: T) => { return x } : <T>(x: T) => T
 >true : true
 ><T>(x: T) => { return x } : <T>(x: T) => T
+>T : T
 >x : T
 >x : T
 
 interface I1 { foo: number; }
+>I1 : I1
 >foo : number
 
 var i1: I1;
@@= skipped -42, +44 lines =@@
 
 class C2<T> { foo: T; }
 >C2 : C2<T>
+>T : T
 >foo : T
 
 var c2: C2<number>;
@@= skipped -18, +19 lines =@@
 >c2 : C2<number>
 
 enum E { A }
->E : E
+>E : E.A
 >A : E.A
 
 var r13 = true ? E : null;
@@= skipped -16, +16 lines =@@
 >E : typeof E
 
 var r14 = true ? E.A : null;
->r14 : E
->true ? E.A : null : E
+>r14 : E.A
+>true ? E.A : null : E.A
 >true : true
->E.A : E
+>E.A : E.A
 >E : typeof E
->A : E
+>A : E.A
 
 var r14 = true ? null : E.A;
->r14 : E
->true ? null : E.A : E
+>r14 : E.A
+>true ? null : E.A : E.A
 >true : true
->E.A : E
+>E.A : E.A
 >E : typeof E
->A : E
+>A : E.A
 
 function f() { }
 >f : typeof f
@@= skipped -27, +27 lines =@@
 }
 var af: typeof f;
 >af : typeof f
->f : typeof f
 
 var r15 = true ? af : null;
 >r15 : typeof f
@@= skipped -27, +26 lines =@@
 }
 var ac: typeof c;
 >ac : typeof c
->c : typeof c
 
 var r16 = true ? ac : null;
 >r16 : typeof c
@@= skipped -16, +15 lines =@@
 
 function f17<T>(x: T) {
 >f17 : <T>(x: T) => void
+>T : T
 >x : T
 
     var r17 = true ? x : null;
@@= skipped -17, +18 lines =@@
 
 function f18<T, U>(x: U) {
 >f18 : <T, U>(x: U) => void
+>T : T
+>U : U
 >x : U
 
     var r18 = true ? x : null;
