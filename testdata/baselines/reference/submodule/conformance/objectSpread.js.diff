--- old.objectSpread.js
+++ new.objectSpread.js
@@= skipped -145, +145 lines =@@


 //// [objectSpread.js]
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
 let o = { a: 1, b: 'no' };
 let o2 = { b: 'yes', c: true };
 let swap = { a: 'yes', b: -1 };
-let addAfter = Object.assign(Object.assign({}, o), { c: false });
-let addBefore = Object.assign({ c: false }, o);
-let override = Object.assign(Object.assign({}, o), { b: 'override' });
-let nested = Object.assign(Object.assign({}, Object.assign({ a: 3 }, { b: false, c: 'overriden' })), { c: 'whatever' });
-let combined = Object.assign(Object.assign({}, o), o2);
-let combinedAfter = Object.assign(Object.assign(Object.assign({}, o), o2), { b: 'ok' });
-let combinedNestedChangeType = Object.assign(Object.assign({}, Object.assign({ a: 1 }, { b: false, c: 'overriden' })), { c: -1 });
-let propertyNested = { a: Object.assign({}, o) };
+let addAfter = __assign(__assign({}, o), { c: false });
+let addBefore = __assign({ c: false }, o);
+let override = __assign(__assign({}, o), { b: 'override' });
+let nested = __assign(__assign({}, __assign({ a: 3 }, { b: false, c: 'overriden' })), { c: 'whatever' });
+let combined = __assign(__assign({}, o), o2);
+let combinedAfter = __assign(__assign(__assign({}, o), o2), { b: 'ok' });
+let combinedNestedChangeType = __assign(__assign({}, __assign({ a: 1 }, { b: false, c: 'overriden' })), { c: -1 });
+let propertyNested = { a: __assign({}, o) };
 // accessors don't copy the descriptor
 // (which means that readonly getters become read/write properties)
 let op = { get a() { return 6; } };
-let getter = Object.assign(Object.assign({}, op), { c: 7 });
+let getter = __assign(__assign({}, op), { c: 7 });
 getter.a = 12;
 // functions result in { }
-let spreadFunc = Object.assign({}, (function () { }));
+let spreadFunc = __assign({}, (function () { }));
 function from16326(header, authToken) {
-    return Object.assign(Object.assign(Object.assign({}, this.header), header), authToken && { authToken });
+    return __assign(__assign(__assign({}, this.header), header), authToken && { authToken });
 }
 // boolean && T results in Partial<T>
 function conditionalSpreadBoolean(b) {
     let o = { x: 12, y: 13 };
-    o = Object.assign(Object.assign({}, o), b && { x: 14 });
-    let o2 = Object.assign({}, b && { x: 21 });
+    o = __assign(__assign({}, o), b && { x: 14 });
+    let o2 = __assign({}, b && { x: 21 });
     return o;
 }
 function conditionalSpreadNumber(nt) {
     let o = { x: 15, y: 16 };
-    o = Object.assign(Object.assign({}, o), nt && { x: nt });
-    let o2 = Object.assign({}, nt && { x: nt });
+    o = __assign(__assign({}, o), nt && { x: nt });
+    let o2 = __assign({}, nt && { x: nt });
     return o;
 }
 function conditionalSpreadString(st) {
     let o = { x: 'hi', y: 17 };
-    o = Object.assign(Object.assign({}, o), st && { x: st });
-    let o2 = Object.assign({}, st && { x: st });
+    o = __assign(__assign({}, o), st && { x: st });
+    let o2 = __assign({}, st && { x: st });
     return o;
 }
 // any results in any
 let anything;
-let spreadAny = Object.assign({}, anything);
+let spreadAny = __assign({}, anything);
 // methods are not enumerable
 class C {
-    constructor() {
-        this.p = 1;
-    }
+    p = 1;
     m() { }
 }
 let c = new C();
-let spreadC = Object.assign({}, c);
+let spreadC = __assign({}, c);
 // own methods are enumerable
-let cplus = Object.assign(Object.assign({}, c), { plus() { return this.p + 1; } });
+let cplus = __assign(__assign({}, c), { plus() { return this.p + 1; } });
 cplus.plus();
 // new field's type conflicting with existing field is OK
-let changeTypeAfter = Object.assign(Object.assign({}, o), { a: 'wrong type?' });
-let changeTypeBoth = Object.assign(Object.assign({}, o), swap);
+let changeTypeAfter = __assign(__assign({}, o), { a: 'wrong type?' });
+let changeTypeBoth = __assign(__assign({}, o), swap);
 // optional
 function container(definiteBoolean, definiteString, optionalString, optionalNumber) {
-    let optionalUnionStops = Object.assign(Object.assign(Object.assign({}, definiteBoolean), definiteString), optionalNumber);
-    let optionalUnionDuplicates = Object.assign(Object.assign(Object.assign(Object.assign({}, definiteBoolean), definiteString), optionalString), optionalNumber);
-    let allOptional = Object.assign(Object.assign({}, optionalString), optionalNumber);
+    let optionalUnionStops = __assign(__assign(__assign({}, definiteBoolean), definiteString), optionalNumber);
+    let optionalUnionDuplicates = __assign(__assign(__assign(__assign({}, definiteBoolean), definiteString), optionalString), optionalNumber);
+    let allOptional = __assign(__assign({}, optionalString), optionalNumber);
     // computed property
-    let computedFirst = Object.assign(Object.assign({ ['before everything']: 12 }, o), { b: 'yes' });
-    let computedAfter = Object.assign(Object.assign({}, o), { b: 'yeah', ['at the end']: 14 });
+    let computedFirst = __assign(__assign({ ['before everything']: 12 }, o), { b: 'yes' });
+    let computedAfter = __assign(__assign({}, o), { b: 'yeah', ['at the end']: 14 });
 }
 // shortcut syntax
 let a = 12;
-let shortCutted = Object.assign(Object.assign({}, o), { a });
+let shortCutted = __assign(__assign({}, o), { a });
 // non primitive
-let spreadNonPrimitive = Object.assign({}, {});
+let spreadNonPrimitive = __assign({}, {});
 // generic spreads
 function f(t, u) {
-    return Object.assign(Object.assign(Object.assign({}, t), u), { id: 'id' });
+    return __assign(__assign(__assign({}, t), u), { id: 'id' });
 }
 let exclusive = f({ a: 1, b: 'yes' }, { c: 'no', d: false });
 let overlap = f({ a: 1 }, { a: 2, b: 'extra' });
 let overlapConflict = f({ a: 1 }, { a: 'mismatch' });
 let overwriteId = f({ a: 1, id: true }, { c: 1, d: 'no' });
 function genericSpread(t, u, v, w, obj) {
-    let x01 = Object.assign({}, t);
-    let x02 = Object.assign(Object.assign({}, t), t);
-    let x03 = Object.assign(Object.assign({}, t), u);
-    let x04 = Object.assign(Object.assign({}, u), t);
-    let x05 = Object.assign({ a: 5, b: 'hi' }, t);
-    let x06 = Object.assign(Object.assign({}, t), { a: 5, b: 'hi' });
-    let x07 = Object.assign(Object.assign(Object.assign({ a: 5, b: 'hi' }, t), { c: true }), obj);
-    let x09 = Object.assign(Object.assign(Object.assign({ a: 5 }, t), { b: 'hi', c: true }), obj);
-    let x10 = Object.assign(Object.assign(Object.assign(Object.assign({ a: 5 }, t), { b: 'hi' }), u), obj);
-    let x11 = Object.assign({}, v);
-    let x12 = Object.assign(Object.assign({}, v), obj);
-    let x13 = Object.assign({}, w);
-    let x14 = Object.assign(Object.assign({}, w), obj);
-    let x15 = Object.assign(Object.assign({}, t), v);
-    let x16 = Object.assign(Object.assign({}, t), w);
-    let x17 = Object.assign(Object.assign(Object.assign({}, t), w), obj);
-    let x18 = Object.assign(Object.assign(Object.assign({}, t), v), w);
+    let x01 = __assign({}, t);
+    let x02 = __assign(__assign({}, t), t);
+    let x03 = __assign(__assign({}, t), u);
+    let x04 = __assign(__assign({}, u), t);
+    let x05 = __assign({ a: 5, b: 'hi' }, t);
+    let x06 = __assign(__assign({}, t), { a: 5, b: 'hi' });
+    let x07 = __assign(__assign(__assign({ a: 5, b: 'hi' }, t), { c: true }), obj);
+    let x09 = __assign(__assign(__assign({ a: 5 }, t), { b: 'hi', c: true }), obj);
+    let x10 = __assign(__assign(__assign(__assign({ a: 5 }, t), { b: 'hi' }), u), obj);
+    let x11 = __assign({}, v);
+    let x12 = __assign(__assign({}, v), obj);
+    let x13 = __assign({}, w);
+    let x14 = __assign(__assign({}, w), obj);
+    let x15 = __assign(__assign({}, t), v);
+    let x16 = __assign(__assign({}, t), w);
+    let x17 = __assign(__assign(__assign({}, t), w), obj);
+    let x18 = __assign(__assign(__assign({}, t), v), w);
 }