--- old.stringEnumInElementAccess01.symbols
+++ new.stringEnumInElementAccess01.symbols
@@= skipped -4, +4 lines =@@
 >E : Symbol(E, Decl(stringEnumInElementAccess01.ts, 0, 0))
 
     A = "a",
->A : Symbol(E.A, Decl(stringEnumInElementAccess01.ts, 0, 8))
+>A : Symbol(A, Decl(stringEnumInElementAccess01.ts, 0, 8))
 
     B = "b",
->B : Symbol(E.B, Decl(stringEnumInElementAccess01.ts, 1, 12))
+>B : Symbol(B, Decl(stringEnumInElementAccess01.ts, 1, 12))
 
     C = "c",
->C : Symbol(E.C, Decl(stringEnumInElementAccess01.ts, 2, 12))
+>C : Symbol(C, Decl(stringEnumInElementAccess01.ts, 2, 12))
 }
 
 interface Item {
 >Item : Symbol(Item, Decl(stringEnumInElementAccess01.ts, 4, 1))
 
     a: string;
->a : Symbol(Item.a, Decl(stringEnumInElementAccess01.ts, 6, 16))
+>a : Symbol(a, Decl(stringEnumInElementAccess01.ts, 6, 16))
 
     b: number;
->b : Symbol(Item.b, Decl(stringEnumInElementAccess01.ts, 7, 14))
+>b : Symbol(b, Decl(stringEnumInElementAccess01.ts, 7, 14))
 
     c: boolean;
->c : Symbol(Item.c, Decl(stringEnumInElementAccess01.ts, 8, 14))
+>c : Symbol(c, Decl(stringEnumInElementAccess01.ts, 8, 14))
 }
 
 declare const item: Item;
