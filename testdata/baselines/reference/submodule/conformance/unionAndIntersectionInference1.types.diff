--- old.unionAndIntersectionInference1.types
+++ new.unionAndIntersectionInference1.types
@@= skipped -14, +14 lines =@@
 >destructure : <a, r>(something: a | Y, haveValue: (value: a) => r, haveY: (value: Y) => r) => r

     something: a | Y,
->something : Y | a
+>something : a | Y

     haveValue: (value: a) => r,
 >haveValue : (value: a) => r
@@= skipped -14, +14 lines =@@
     return something === y ? haveY(y) : haveValue(<a>something);
 >something === y ? haveY(y) : haveValue(<a>something) : r
 >something === y : boolean
->something : Y | a
+>something : a | Y
 >y : Y
 >haveY(y) : r
 >haveY : (value: Y) => r
@@= skipped -8, +8 lines =@@
 >haveValue(<a>something) : r
 >haveValue : (value: a) => r
 ><a>something : a
->something : Y | a
+>something : a | Y
 }

 var value = Math.random() > 0.5 ? 'hey!' : <Y>undefined;
 >value : string | Y
->Math.random() > 0.5 ? 'hey!' : <Y>undefined : Y | "hey!"
+>Math.random() > 0.5 ? 'hey!' : <Y>undefined : "hey!" | Y
 >Math.random() > 0.5 : boolean
 >Math.random() : number
 >Math.random : () => number
@@= skipped -88, +88 lines =@@
 >Maybe : Maybe<T>

 function get<U>(x: U | void): U {
->get : <U>(x: U | void) => U
+>get : <U>(x: void | U) => U
 >x : void | U

    return null; // just an example
@@= skipped -13, +13 lines =@@
 >get(foo).toUpperCase() : string
 >get(foo).toUpperCase : () => string
 >get(foo) : string
->get : <U>(x: U | void) => U
+>get : <U>(x: void | U) => U
 >foo : Maybe<string>
 >toUpperCase : () => string
