--- old.unionAndIntersectionInference1.types
+++ new.unionAndIntersectionInference1.types
@@= skipped -3, +3 lines =@@
 // Repro from #2264
 
 interface Y { 'i am a very certain type': Y }
+>Y : Y
 >'i am a very certain type' : Y
 
 var y: Y = <Y>undefined;
@@= skipped -9, +10 lines =@@
 
 function destructure<a, r>(
 >destructure : <a, r>(something: a | Y, haveValue: (value: a) => r, haveY: (value: Y) => r) => r
+>a : a
+>r : r
 
     something: a | Y,
->something : Y | a
+>something : a | Y
 
     haveValue: (value: a) => r,
 >haveValue : (value: a) => r
@@= skipped -16, +18 lines =@@
     return something === y ? haveY(y) : haveValue(<a>something);
 >something === y ? haveY(y) : haveValue(<a>something) : r
 >something === y : boolean
->something : Y | a
+>something : a | Y
 >y : Y
 >haveY(y) : r
 >haveY : (value: Y) => r
@@= skipped -8, +8 lines =@@
 >haveValue(<a>something) : r
 >haveValue : (value: a) => r
 ><a>something : a
->something : Y | a
+>something : a | Y
 }
 
 var value = Math.random() > 0.5 ? 'hey!' : <Y>undefined;
 >value : string | Y
->Math.random() > 0.5 ? 'hey!' : <Y>undefined : Y | "hey!"
+>Math.random() > 0.5 ? 'hey!' : <Y>undefined : "hey!" | Y
 >Math.random() > 0.5 : boolean
 >Math.random() : number
 >Math.random : () => number
@@= skipped -32, +32 lines =@@
 
 function isVoid<a>(value: void | a): value is void {
 >isVoid : <a>(value: void | a) => value is void
+>a : a
 >value : void | a
 
     return undefined;
@@= skipped -8, +9 lines =@@
 
 function isNonVoid<a>(value: void | a) : value is a {
 >isNonVoid : <a>(value: void | a) => value is a
+>a : a
 >value : void | a
 
     return undefined;
@@= skipped -8, +9 lines =@@
 
 function foo1<a>(value: void|a): void {
 >foo1 : <a>(value: void | a) => void
+>a : a
 >value : void | a
 
     if (isVoid(value)) {
 >isVoid(value) : boolean
->isVoid : <a_1>(value: void | a_1) => value is void
+>isVoid : <a>(value: void | a) => value is void
 >value : void | a
 
         value; // value is void
@@= skipped -18, +19 lines =@@
 
 function baz1<a>(value: void|a): void {
 >baz1 : <a>(value: void | a) => void
+>a : a
 >value : void | a
 
       if (isNonVoid(value)) {
 >isNonVoid(value) : boolean
->isNonVoid : <a_1>(value: void | a_1) => value is a_1
+>isNonVoid : <a>(value: void | a) => value is a
 >value : void | a
 
           value; // value is a
@@= skipped -20, +21 lines =@@
 
 type Maybe<T> = T | void;
 >Maybe : Maybe<T>
+>T : T
 
 function get<U>(x: U | void): U {
->get : <U>(x: U | void) => U
+>get : <U>(x: void | U) => U
+>U : U
 >x : void | U
 
    return null; // just an example
@@= skipped -15, +17 lines =@@
 >get(foo).toUpperCase() : string
 >get(foo).toUpperCase : () => string
 >get(foo) : string
->get : <U>(x: U | void) => U
+>get : <U>(x: void | U) => U
 >foo : Maybe<string>
 >toUpperCase : () => string
 
 // Repro from #5456
 
 interface Man {
+>Man : Man
+
     walks: boolean;
 >walks : boolean
 }
 
 interface Bear {
+>Bear : Bear
+
     roars: boolean;
 >roars : boolean
 }
 
 interface Pig {
+>Pig : Pig
+
     oinks: boolean;
 >oinks : boolean
 }
 
 declare function pigify<T>(y: T & Bear): T & Pig;
 >pigify : <T>(y: T & Bear) => T & Pig
+>T : T
 >y : T & Bear
 
 declare var mbp: Man & Bear;
@@= skipped -45, +52 lines =@@
 // Repros from #29815
 
 interface ITest {
+>ITest : ITest
+
   name: 'test'
 >name : "test"
 }
@@= skipped -8, +10 lines =@@
 >createTestAsync : () => Promise<ITest>
 >(): Promise<ITest> => Promise.resolve().then(() => ({ name: 'test' })) : () => Promise<ITest>
 >Promise.resolve().then(() => ({ name: 'test' })) : Promise<ITest | { name: "test"; }>
->Promise.resolve().then : <TResult1 = void, TResult2 = never>(onfulfilled?: (value: void) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
+>Promise.resolve().then : <TResult1, TResult2>(onfulfilled?: (value: void) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
 >Promise.resolve() : Promise<void>
 >Promise.resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
 >Promise : PromiseConstructor
 >resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
->then : <TResult1 = void, TResult2 = never>(onfulfilled?: (value: void) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
+>then : <TResult1, TResult2>(onfulfilled?: (value: void) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
 >() => ({ name: 'test' }) : () => { name: "test"; }
 >({ name: 'test' }) : { name: "test"; }
 >{ name: 'test' } : { name: "test"; }
@@= skipped -24, +24 lines =@@
 
 declare function f1<T, U>(x: T | U): T | U;
 >f1 : <T, U>(x: T | U) => T | U
+>T : T
+>U : U
 >x : T | U
 
 declare function f2<T, U>(x: T, y: U): T | U;
 >f2 : <T, U>(x: T, y: U) => T | U
+>T : T
+>U : U
 >x : T
 >y : U
 
@@= skipped -25, +29 lines =@@
 const func = <T>() => {};
 >func : <T>() => void
 ><T>() => {} : <T>() => void
+>T : T
 
 const assign = <T, U>(a: T, b: U) => Object.assign(a, b);
 >assign : <T, U>(a: T, b: U) => T & U
 ><T, U>(a: T, b: U) => Object.assign(a, b) : <T, U>(a: T, b: U) => T & U
+>T : T
+>U : U
 >a : T
 >b : U
 >Object.assign(a, b) : T & U
->Object.assign : { <T_1 extends {}, U_1>(target: T_1, source: U_1): T_1 & U_1; <T_1 extends {}, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V; <T_1 extends {}, U_1, V, W>(target: T_1, source1: U_1, source2: V, source3: W): T_1 & U_1 & V & W; (target: object, ...sources: any[]): any; }
+>Object.assign : { <T extends {}, U>(target: T, source: U): T & U; <T extends {}, U, V>(target: T, source1: U, source2: V): T & U & V; <T extends {}, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W; (target: object, ...sources: any[]): any; }
 >Object : ObjectConstructor
->assign : { <T_1 extends {}, U_1>(target: T_1, source: U_1): T_1 & U_1; <T_1 extends {}, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V; <T_1 extends {}, U_1, V, W>(target: T_1, source1: U_1, source2: V, source3: W): T_1 & U_1 & V & W; (target: object, ...sources: any[]): any; }
+>assign : { <T extends {}, U>(target: T, source: U): T & U; <T extends {}, U, V>(target: T, source1: U, source2: V): T & U & V; <T extends {}, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W; (target: object, ...sources: any[]): any; }
 >a : T
 >b : U
 
 const res: (() => void) & { func: any } = assign(() => {}, { func });
->res : (() => void) & { func: any; }
+>res : () => void & { func: any; }
 >func : any
->assign(() => {}, { func }) : (() => void) & { func: <T>() => void; }
+>assign(() => {}, { func }) : () => void & { func: <T>() => void; }
 >assign : <T, U>(a: T, b: U) => T & U
 >() => {} : () => void
 >{ func } : { func: <T>() => void; }
->func : <T>() => void
+>func : any
 
