--- old.infiniteExpansionThroughInstantiation.symbols
+++ new.infiniteExpansionThroughInstantiation.symbols
@@= skipped -7, +7 lines =@@
 >T : Symbol(T, Decl(infiniteExpansionThroughInstantiation.ts, 2, 15))
 
     data: T;
->data : Symbol(List.data, Decl(infiniteExpansionThroughInstantiation.ts, 2, 19))
+>data : Symbol(data, Decl(infiniteExpansionThroughInstantiation.ts, 2, 19))
 >T : Symbol(T, Decl(infiniteExpansionThroughInstantiation.ts, 2, 15))
 
     next: List<T>;
->next : Symbol(List.next, Decl(infiniteExpansionThroughInstantiation.ts, 3, 12))
+>next : Symbol(next, Decl(infiniteExpansionThroughInstantiation.ts, 3, 12))
 >List : Symbol(List, Decl(infiniteExpansionThroughInstantiation.ts, 0, 0))
 >T : Symbol(T, Decl(infiniteExpansionThroughInstantiation.ts, 2, 15))
 
     owner: OwnerList<T>;
->owner : Symbol(List.owner, Decl(infiniteExpansionThroughInstantiation.ts, 4, 18))
+>owner : Symbol(owner, Decl(infiniteExpansionThroughInstantiation.ts, 4, 18))
 >OwnerList : Symbol(OwnerList, Decl(infiniteExpansionThroughInstantiation.ts, 6, 1))
 >T : Symbol(T, Decl(infiniteExpansionThroughInstantiation.ts, 2, 15))
 }
@@= skipped -23, +23 lines =@@
 >U : Symbol(U, Decl(infiniteExpansionThroughInstantiation.ts, 9, 20))
 
     name: string;
->name : Symbol(OwnerList.name, Decl(infiniteExpansionThroughInstantiation.ts, 9, 46))
+>name : Symbol(name, Decl(infiniteExpansionThroughInstantiation.ts, 9, 46))
 }
 
 var list: List<string>;
