--- old.jsdocCatchClauseWithTypeAnnotation.js
+++ new.jsdocCatchClauseWithTypeAnnotation.js
@@= skipped -53, +53 lines =@@
 
 
 //// [foo.js]
-/**
- * @typedef {any} Any
- */
-/**
- * @typedef {unknown} Unknown
- */
 function fn() {
     try { }
-    catch (x) { } // should be OK
+    catch (x) { }
     try { }
-    catch ( /** @type {any} */err) { } // should be OK
+    catch (err) { }
     try { }
-    catch ( /** @type {Any} */err) { } // should be OK
+    catch (err) { }
     try { }
-    catch ( /** @type {unknown} */err) { } // should be OK
+    catch (err) { }
     try { }
-    catch ( /** @type {Unknown} */err) { } // should be OK
+    catch (err) { }
     try { }
     catch (err) {
         err.foo;
-    } // should be OK
+    }
     try { }
-    catch ( /** @type {any} */err) {
+    catch (err) {
         err.foo;
-    } // should be OK
+    }
     try { }
-    catch ( /** @type {Any} */err) {
+    catch (err) {
         err.foo;
-    } // should be OK
+    }
     try { }
-    catch ( /** @type {unknown} */err) {
+    catch (err) {
         console.log(err);
-    } // should be OK
+    }
     try { }
-    catch ( /** @type {Unknown} */err) {
+    catch (err) {
         console.log(err);
-    } // should be OK
+    }
     try { }
-    catch ( /** @type {unknown} */err) {
+    catch (err) {
         err.foo;
-    } // error in the body
+    }
     try { }
-    catch ( /** @type {Unknown} */err) {
+    catch (err) {
         err.foo;
-    } // error in the body
+    }
     try { }
-    catch ( /** @type {Error} */err) { } // error in the type
+    catch (err) { }
     try { }
-    catch ( /** @type {object} */err) { } // error in the type
+    catch (err) { }
     try {
         console.log();
     }
-    // @ts-ignore
-    catch ( /** @type {number} */err) { // e should not be a `number`
+    catch (err) {
         console.log(err.toLowerCase());
     }
-    // minor bug: shows that the `catch` argument is skipped when checking scope
     try { }
     catch (err) {
-        /** @type {string} */
         let err;
     }
     try { }
     catch (err) {
-        /** @type {boolean} */
         var err;
     }
     try { }
-    catch ({ x }) { } // should be OK
+    catch ({ x }) { }
     try { }
-    catch ( /** @type {any} */{ x }) {
+    catch ({ x }) {
         x.foo;
-    } // should be OK
+    }
     try { }
-    catch ( /** @type {Any} */{ x }) {
+    catch ({ x }) {
         x.foo;
-    } // should be OK
+    }
     try { }
-    catch ( /** @type {unknown} */{ x }) {
+    catch ({ x }) {
         console.log(x);
-    } // error in the destructure
+    }
     try { }
-    catch ( /** @type {Unknown} */{ x }) {
+    catch ({ x }) {
         console.log(x);
-    } // error in the destructure
+    }
     try { }
-    catch ( /** @type {Error} */{ x }) { } // error in the type
+    catch ({ x }) { }
     try { }
-    catch ( /** @type {object} */{ x }) { } // error in the type
+    catch ({ x }) { }
 }
