--- old.numericStringNamedPropertyEquivalence.symbols
+++ new.numericStringNamedPropertyEquivalence.symbols
@@= skipped -6, +6 lines =@@
 >C : Symbol(C, Decl(numericStringNamedPropertyEquivalence.ts, 0, 0))
 
     "1": number;
->"1" : Symbol(C["1"], Decl(numericStringNamedPropertyEquivalence.ts, 2, 9), Decl(numericStringNamedPropertyEquivalence.ts, 4, 18))
+>"1" : Symbol("1", Decl(numericStringNamedPropertyEquivalence.ts, 2, 9), Decl(numericStringNamedPropertyEquivalence.ts, 4, 18))
 
     "1.0": number; // not a duplicate
->"1.0" : Symbol(C["1.0"], Decl(numericStringNamedPropertyEquivalence.ts, 3, 16))
+>"1.0" : Symbol("1.0", Decl(numericStringNamedPropertyEquivalence.ts, 3, 16))
 
     1.0: number;
->1.0 : Symbol(C["1"], Decl(numericStringNamedPropertyEquivalence.ts, 2, 9), Decl(numericStringNamedPropertyEquivalence.ts, 4, 18))
+>1.0 : Symbol("1", Decl(numericStringNamedPropertyEquivalence.ts, 2, 9), Decl(numericStringNamedPropertyEquivalence.ts, 4, 18))
 }
 
 interface I {
 >I : Symbol(I, Decl(numericStringNamedPropertyEquivalence.ts, 6, 1))
 
     "1": number;
->"1" : Symbol(I["1"], Decl(numericStringNamedPropertyEquivalence.ts, 8, 13), Decl(numericStringNamedPropertyEquivalence.ts, 10, 17))
+>"1" : Symbol("1", Decl(numericStringNamedPropertyEquivalence.ts, 8, 13), Decl(numericStringNamedPropertyEquivalence.ts, 10, 17))
 
     "1.": number; // not a duplicate
->"1." : Symbol(I["1."], Decl(numericStringNamedPropertyEquivalence.ts, 9, 16))
+>"1." : Symbol("1.", Decl(numericStringNamedPropertyEquivalence.ts, 9, 16))
 
     1: number;
->1 : Symbol(I["1"], Decl(numericStringNamedPropertyEquivalence.ts, 8, 13), Decl(numericStringNamedPropertyEquivalence.ts, 10, 17))
+>1 : Symbol("1", Decl(numericStringNamedPropertyEquivalence.ts, 8, 13), Decl(numericStringNamedPropertyEquivalence.ts, 10, 17))
 }
 
 var a: {
