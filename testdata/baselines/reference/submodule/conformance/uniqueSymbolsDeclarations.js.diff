--- old.uniqueSymbolsDeclarations.js
+++ new.uniqueSymbolsDeclarations.js
@@= skipped -284, +284 lines =@@
 async function* asyncGenFuncYieldVarCall() { yield varCall; }
 // classes
 class C {
-    constructor() {
-        this.readonlyCall = Symbol();
-        this.readwriteCall = Symbol();
-    }
-    static { this.readonlyStaticCall = Symbol(); }
-    static { this.readonlyStaticTypeAndCall = Symbol(); }
-    static { this.readwriteStaticCall = Symbol(); }
+    static readonlyStaticCall = Symbol();
+    static readonlyStaticType;
+    static readonlyStaticTypeAndCall = Symbol();
+    static readwriteStaticCall = Symbol();
+    readonlyCall = Symbol();
+    readwriteCall = Symbol();
 }
 const constInitToCReadonlyStaticCall = C.readonlyStaticCall;
 const constInitToCReadonlyStaticType = C.readonlyStaticType;
@@= skipped -56, +55 lines =@@
 };
 // property initializers
 class C0 {
-    constructor() {
-        this.a = s;
-        this.b = N.s;
-        this.c = N["s"];
-        this.d = s;
-        this.e = N.s;
-        this.f = N["s"];
-    }
-    static { this.a = s; }
-    static { this.b = N.s; }
-    static { this.c = N["s"]; }
-    static { this.d = s; }
-    static { this.e = N.s; }
-    static { this.f = N["s"]; }
+    static a = s;
+    static b = N.s;
+    static c = N["s"];
+    static d = s;
+    static e = N.s;
+    static f = N["s"];
+    a = s;
+    b = N.s;
+    c = N["s"];
+    d = s;
+    e = N.s;
+    f = N["s"];
     method1() { return s; }
     async method2() { return s; }
     async *method3() { yield s; }
@@= skipped -46, +44 lines =@@
     [N.s]: "b",
 });
 class C1 {
-    static { N.s, N.s; }
+    static [s];
+    static [N.s];
+    [s];
+    [N.s];
 }
 const o4 = {
     method1() {
@@= skipped -22, +25 lines =@@


 //// [uniqueSymbolsDeclarations.d.ts]
+// declarations with call initializer
 declare const constCall: unique symbol;
 declare let letCall: symbol;
 declare var varCall: symbol;
+// ambient declaration with type
 declare const constType: unique symbol;
+// declaration with type and call initializer
 declare const constTypeAndCall: unique symbol;
+// declaration from initializer
 declare const constInitToConstCall: symbol;
 declare const constInitToLetCall: symbol;
 declare const constInitToVarCall: symbol;
@@= skipped -17, +21 lines =@@
 declare var varInitToLetCall: symbol;
 declare var varInitToVarCall: symbol;
 declare var varInitToConstDeclAmbient: symbol;
+// declaration from initializer with type query
 declare const constInitToConstCallWithTypeQuery: typeof constCall;
 declare const constInitToConstDeclAmbientWithTypeQuery: typeof constType;
+// function return inference
 declare function funcReturnConstCall(): symbol;
 declare function funcReturnLetCall(): symbol;
 declare function funcReturnVarCall(): symbol;
+// function return value with type query
 declare function funcReturnConstCallWithTypeQuery(): typeof constCall;
+// generator function yield inference
 declare function genFuncYieldConstCall(): Generator<symbol, void, unknown>;
 declare function genFuncYieldLetCall(): Generator<symbol, void, unknown>;
 declare function genFuncYieldVarCall(): Generator<symbol, void, unknown>;
+// generator function yield with return type query
 declare function genFuncYieldConstCallWithTypeQuery(): IterableIterator<typeof constCall>;
+// async function return inference
 declare function asyncFuncReturnConstCall(): Promise<symbol>;
 declare function asyncFuncReturnLetCall(): Promise<symbol>;
 declare function asyncFuncReturnVarCall(): Promise<symbol>;
+// async generator function yield inference
 declare function asyncGenFuncYieldConstCall(): AsyncGenerator<symbol, void, unknown>;
 declare function asyncGenFuncYieldLetCall(): AsyncGenerator<symbol, void, unknown>;
 declare function asyncGenFuncYieldVarCall(): AsyncGenerator<symbol, void, unknown>;
+// classes
 declare class C {
     static readonly readonlyStaticCall: unique symbol;
     static readonly readonlyStaticType: unique symbol;
@@= skipped -39, +47 lines =@@
 declare const constInitToCReadwriteCallWithTypeQuery: typeof c.readwriteCall;
 declare const constInitToCReadonlyCallWithIndexedAccess: C["readonlyCall"];
 declare const constInitToCReadwriteCallWithIndexedAccess: C["readwriteCall"];
+// interfaces
 interface I {
     readonly readonlyType: unique symbol;
 }
@@= skipped -7, +8 lines =@@
 declare const constInitToIReadonlyType: symbol;
 declare const constInitToIReadonlyTypeWithTypeQuery: typeof i.readonlyType;
 declare const constInitToIReadonlyTypeWithIndexedAccess: I["readonlyType"];
+// type literals
 type L = {
     readonly readonlyType: unique symbol;
     nested: {
@@= skipped -13, +14 lines =@@
 declare const constInitToLReadonlyNestedTypeWithTypeQuery: typeof l.nested.readonlyNestedType;
 declare const constInitToLReadonlyTypeWithIndexedAccess: L["readonlyType"];
 declare const constInitToLReadonlyNestedTypeWithIndexedAccess: L["nested"]["readonlyNestedType"];
+// type argument inference
 declare const promiseForConstCall: Promise<typeof constCall>;
 declare const arrayOfConstCall: symbol[];
+// unique symbol widening in expressions
 declare const s: unique symbol;
 declare namespace N {
     const s: unique symbol;
@@= skipped -13, +15 lines =@@
 declare function f<T>(x: T): T;
 declare function g(x: typeof s): void;
 declare function g(x: typeof N.s): void;
+// property assignments/methods
 declare const o2: {
     a: symbol;
     b: symbol;
@@= skipped -10, +11 lines =@@
     method4(): Generator<symbol, void, unknown>;
     method5(p?: symbol): symbol;
 };
+// property initializers
 declare class C0 {
     static readonly a: symbol;
     static readonly b: symbol;
@@= skipped -25, +26 lines =@@
     [s]: "a";
     [N.s]: "b";
 }
+// contextual types
 interface Context {
     method1(): typeof s;
     method2(): Promise<typeof s>;