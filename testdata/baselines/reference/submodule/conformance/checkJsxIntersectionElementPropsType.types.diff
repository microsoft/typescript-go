--- old.checkJsxIntersectionElementPropsType.types
+++ new.checkJsxIntersectionElementPropsType.types
@@= skipped -1, +1 lines =@@
 
 === checkJsxIntersectionElementPropsType.tsx ===
 declare namespace JSX {
+>JSX : any
+
     interface ElementAttributesProperty { props: {}; }
+>ElementAttributesProperty : ElementAttributesProperty
 >props : {}
->      : ^^
 }
 
 declare class Component<P> {
 >Component : Component<P>
->          : ^^^^^^^^^^^^
+>P : P
 
   constructor(props: Readonly<P>);
 >props : Readonly<P>
->      : ^^^^^^^^^^^
 
   readonly props: Readonly<P>;
 >props : Readonly<P>
->      : ^^^^^^^^^^^
 }
 
 class C<T> extends Component<{ x?: boolean; } & T> {}
 >C : C<T>
->  : ^^^^
->Component : Component<{ x?: boolean; } & T>
->          : ^^^^^^^^^^^^^^^^       ^^^^^^^^
+>T : T
+>Component : Component<{ x?: boolean | undefined; } & T>
 >x : boolean | undefined
->  : ^^^^^^^^^^^^^^^^^^^
 
 const y = new C({foobar: "example"});
 >y : C<{ foobar: string; }>
->  : ^^^^^^^^^^^^^^^^^^^^^^
 >new C({foobar: "example"}) : C<{ foobar: string; }>
->                           : ^^^^^^^^^^^^^^^^^^^^^^
 >C : typeof C
->  : ^^^^^^^^
 >{foobar: "example"} : { foobar: string; }
->                    : ^^^^^^^^^^^^^^^^^^^
 >foobar : string
->       : ^^^^^^
 >"example" : "example"
->          : ^^^^^^^^^
 
 const x = <C foobar="example" />
->x : error
-><C foobar="example" /> : error
+>x : any
+><C foobar="example" /> : any
 >C : typeof C
->  : ^^^^^^^^
->foobar : string
->       : ^^^^^^
+>foobar : any
 
