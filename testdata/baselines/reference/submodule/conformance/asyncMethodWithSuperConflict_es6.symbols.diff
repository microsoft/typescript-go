--- old.asyncMethodWithSuperConflict_es6.symbols
+++ new.asyncMethodWithSuperConflict_es6.symbols
@@= skipped -4, +4 lines =@@
 >A : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
 
     x() {
->x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
     }
     y() {
->y : Symbol(A.y, Decl(asyncMethodWithSuperConflict_es6.ts, 2, 5))
+>y : Symbol(y, Decl(asyncMethodWithSuperConflict_es6.ts, 2, 5))
     }
 }
 
@@= skipped -13, +13 lines =@@
 
     // async method with only call/get on 'super' does not require a binding
     async simple() {
->simple : Symbol(B.simple, Decl(asyncMethodWithSuperConflict_es6.ts, 7, 19))
+>simple : Symbol(simple, Decl(asyncMethodWithSuperConflict_es6.ts, 7, 19))
 
         const _super = null;
 >_super : Symbol(_super, Decl(asyncMethodWithSuperConflict_es6.ts, 10, 13))
@@= skipped -10, +10 lines =@@
 
         // call with property access
         super.x();
->super.x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>super.x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 
         // call additional property.
         super.y();
->super.y : Symbol(A.y, Decl(asyncMethodWithSuperConflict_es6.ts, 2, 5))
+>super.y : Symbol(y, Decl(asyncMethodWithSuperConflict_es6.ts, 2, 5))
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->y : Symbol(A.y, Decl(asyncMethodWithSuperConflict_es6.ts, 2, 5))
+>y : Symbol(y, Decl(asyncMethodWithSuperConflict_es6.ts, 2, 5))
 
         // call with element access
         super["x"]();
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->"x" : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>"x" : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 
         // property access (read)
         const a = super.x;
 >a : Symbol(a, Decl(asyncMethodWithSuperConflict_es6.ts, 21, 13))
->super.x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>super.x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 
         // element access (read)
         const b = super["x"];
 >b : Symbol(b, Decl(asyncMethodWithSuperConflict_es6.ts, 24, 13))
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->"x" : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>"x" : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
     }
 
     // async method with assignment/destructuring on 'super' requires a binding
     async advanced() {
->advanced : Symbol(B.advanced, Decl(asyncMethodWithSuperConflict_es6.ts, 25, 5))
+>advanced : Symbol(advanced, Decl(asyncMethodWithSuperConflict_es6.ts, 25, 5))
 
         const _super = null;
 >_super : Symbol(_super, Decl(asyncMethodWithSuperConflict_es6.ts, 29, 13))
@@= skipped -44, +44 lines =@@
 
         // call with property access
         super.x();
->super.x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>super.x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 
         // call with element access
         super["x"]();
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->"x" : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>"x" : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 
         // property access (read)
         const a = super.x;
 >a : Symbol(a, Decl(asyncMethodWithSuperConflict_es6.ts, 40, 13))
->super.x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>super.x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 
         // element access (read)
         const b = super["x"];
 >b : Symbol(b, Decl(asyncMethodWithSuperConflict_es6.ts, 43, 13))
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->"x" : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>"x" : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 
         // property access (assign)
         super.x = f;
->super.x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>super.x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 >f : Symbol(f, Decl(asyncMethodWithSuperConflict_es6.ts, 31, 13))
 
         // element access (assign)
         super["x"] = f;
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->"x" : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>"x" : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 >f : Symbol(f, Decl(asyncMethodWithSuperConflict_es6.ts, 31, 13))
 
         // destructuring assign with property access
         ({ f: super.x } = { f });
 >f : Symbol(f, Decl(asyncMethodWithSuperConflict_es6.ts, 52, 10))
->super.x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>super.x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->x : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>x : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 >f : Symbol(f, Decl(asyncMethodWithSuperConflict_es6.ts, 52, 27))
 
         // destructuring assign with element access
         ({ f: super["x"] } = { f });
 >f : Symbol(f, Decl(asyncMethodWithSuperConflict_es6.ts, 55, 10))
 >super : Symbol(A, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 0))
->"x" : Symbol(A.x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
+>"x" : Symbol(x, Decl(asyncMethodWithSuperConflict_es6.ts, 0, 9))
 >f : Symbol(f, Decl(asyncMethodWithSuperConflict_es6.ts, 55, 30))
     }
 }
