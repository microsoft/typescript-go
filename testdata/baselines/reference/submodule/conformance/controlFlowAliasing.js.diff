--- old.controlFlowAliasing.js
+++ new.controlFlowAliasing.js
@@= skipped -303, +303 lines =@@
 }

 //// [controlFlowAliasing.js]
-"use strict";
 // Narrowing by aliased conditional expressions
 function f10(x) {
     const isString = typeof x === "string";
@@= skipped -193, +192 lines =@@
     }
 }
 class C10 {
+    x;
     constructor(x) {
         this.x = x;
         const thisX_isString = typeof this.x === 'string';
@@= skipped -12, +13 lines =@@
     }
 }
 class C11 {
+    x;
     constructor(x) {
         this.x = x;
         const thisX_isString = typeof this.x === 'string';
@@= skipped -53, +54 lines =@@
     }
 }
 class A53267 {
+    testNumber;
     foo() {
         const isNumber = Utils.isDefined(this.testNumber);
         if (isNumber) {
@@= skipped -10, +11 lines =@@


 //// [controlFlowAliasing.d.ts]
+// Narrowing by aliased conditional expressions
 declare function f10(x: string | number): void;
 declare function f11(x: unknown): void;
 declare function f12(x: string | number | boolean): void;
@@= skipped -80, +81 lines =@@
     kind: 'bar';
     bar: number;
 }): void;
+// Narrowing by aliased discriminant property access
 declare function f30(obj: {
     kind: 'foo';
     foo: string;
@@= skipped -36, +37 lines =@@
     readonly x: string | number;
     constructor(x: string | number);
 }
+// Mixing of aliased discriminants and conditionals
 declare function f40(obj: {
     kind: 'foo';
     foo?: string;
@@= skipped -7, +8 lines =@@
     kind: 'bar';
     bar?: number;
 }): void;
+// Unsupported narrowing of destructured payload by destructured discriminant
 type Data = {
     kind: 'str';
     payload: string;
@@= skipped -9, +10 lines =@@
 };
 declare function gg2(obj: Data): void;
 declare function foo({ kind, payload }: Data): void;
+// Repro from #45830
 declare const obj: {
     fn: () => boolean;
 };
 declare const a: boolean;
+// repro from https://github.com/microsoft/TypeScript/issues/53267
 declare class Utils {
     static isDefined<T>(value: T): value is NonNullable<T>;
 }