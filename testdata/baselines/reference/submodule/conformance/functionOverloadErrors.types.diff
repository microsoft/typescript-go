--- old.functionOverloadErrors.types
+++ new.functionOverloadErrors.types
@@= skipped -21, +21 lines =@@
 
 }
 function fn2b(n: number[]);
->fn2b : { (n: number[]): any; (n: Array<number>): any; }
+>fn2b : { (n: number[]): any; (n: number[]): any; }
 >n : number[]
 
 function fn2b(n: Array<number>);
->fn2b : { (n: number[]): any; (n: Array<number>): any; }
+>fn2b : { (n: number[]): any; (n: number[]): any; }
 >n : number[]
 
 function fn2b() {
->fn2b : { (n: number[]): any; (n: Array<number>): any; }
+>fn2b : { (n: number[]): any; (n: number[]): any; }
 }
 
 //Multiple function overload signatures that differ only by return type
@@= skipped -55, +55 lines =@@
 //Function overloads that differ only by type parameter name
 function fn8<T>(n: string);
 >fn8 : { <T>(n: string): any; <S>(n: string): any; }
+>T : T
 >n : string
 
 function fn8<S>(n: string);
 >fn8 : { <T>(n: string): any; <S>(n: string): any; }
+>S : S
 >n : string
 
 function fn8() { }
@@= skipped -12, +14 lines =@@
 //Function overloads that differ only by type parameter name when used in parameter type annotations
 function fn9<T>(n: T);
 >fn9 : { <T>(n: T): any; <S>(n: S): any; }
+>T : T
 >n : T
 
 function fn9<S>(n: S);
 >fn9 : { <T>(n: T): any; <S>(n: S): any; }
+>S : S
 >n : S
 
 function fn9() { }
@@= skipped -12, +14 lines =@@
 //Function overloads that differ only by type parameter constraints
 function fn10<T extends Window>();
 >fn10 : { <T extends Window>(): any; <S extends Date>(): any; }
+>T : T
 
 function fn10<S extends Date>();
 >fn10 : { <T extends Window>(): any; <S extends Date>(): any; }
+>S : S
 
 function fn10() { }
 >fn10 : { <T extends Window>(): any; <S extends Date>(): any; }
@@= skipped -11, +13 lines =@@
 
 //Function overloads that differ only by type parameter constraints where constraints are structually identical
 function fn11<T extends Window>();
->fn11 : { <T extends Window>(): any; <S extends typeof window>(): any; }
+>fn11 : { <T extends Window>(): any; <S extends Window & typeof globalThis>(): any; }
+>T : T
 
 function fn11<S extends typeof window>();
->fn11 : { <T extends Window>(): any; <S extends typeof window>(): any; }
->window : Window & typeof globalThis
+>fn11 : { <T extends Window>(): any; <S extends Window & typeof globalThis>(): any; }
+>S : S
 
 function fn11() { }
->fn11 : { <T extends Window>(): any; <S extends typeof window>(): any; }
+>fn11 : { <T extends Window>(): any; <S extends Window & typeof globalThis>(): any; }
 
 //Function overloads that differ only by type parameter constraints where constraints include infinitely recursive type reference
 interface List<T> {
+>List : List<T>
+>T : T
+
     parents: List<List<T>>;
 >parents : List<List<T>>
 }
 function fn12<T extends List<List<any>>>();
->fn12 : { <T extends List<List<any>>>(): any; <T_1 extends List<any>>(): any; }
+>fn12 : { <T extends List<List<any>>>(): any; <T extends List<any>>(): any; }
+>T : T
 
 function fn12<T extends List<any>>();
->fn12 : { <T_1 extends List<List<any>>>(): any; <T extends List<any>>(): any; }
+>fn12 : { <T extends List<List<any>>>(): any; <T extends List<any>>(): any; }
+>T : T
 
 function fn12() { }
 >fn12 : { <T extends List<List<any>>>(): any; <T extends List<any>>(): any; }
@@= skipped -126, +132 lines =@@
 
 //Function overloads where return types are different infinitely recursive type reference
 function fn15<T extends List<List<any>>>(): T;
->fn15 : { <T extends List<List<any>>>(): T; <T_1 extends List<any>>(): T_1; }
+>fn15 : { <T extends List<List<any>>>(): T; <T extends List<any>>(): T; }
+>T : T
 
 function fn15<T extends List<any>>(): T;
->fn15 : { <T_1 extends List<List<any>>>(): T_1; <T extends List<any>>(): T; }
+>fn15 : { <T extends List<List<any>>>(): T; <T extends List<any>>(): T; }
+>T : T
 
 function fn15() {
 >fn15 : { <T extends List<List<any>>>(): T; <T extends List<any>>(): T; }
