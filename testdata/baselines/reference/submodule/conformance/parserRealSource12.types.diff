--- old.parserRealSource12.types
+++ new.parserRealSource12.types
@@= skipped -78, +78 lines =@@
 
         constructor (
             private childrenWalkers: IAstWalkChildren[],
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 
             private pre: IAstWalkCallback,
 >pre : IAstWalkCallback
@@= skipped -68, +68 lines =@@
                 this.childrenWalkers[ast.nodeType](ast, parent, this);
 >this.childrenWalkers[ast.nodeType](ast, parent, this) : void
 >this.childrenWalkers[ast.nodeType] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >ast.nodeType : any
 >ast : AST
 >nodeType : any
@@= skipped -69, +69 lines =@@
 >AstWalkerFactory : AstWalkerFactory
 
         private childrenWalkers: IAstWalkChildren[] = [];
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >[] : undefined[]
 
         constructor () {
@@= skipped -73, +73 lines =@@
             return new AstWalker(this.childrenWalkers, pre, post, options, state);
 >new AstWalker(this.childrenWalkers, pre, post, options, state) : AstWalker
 >AstWalker : typeof AstWalker
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >pre : IAstWalkCallback
 >post : IAstWalkCallback
 >options : AstWalkOptions
@@= skipped -15, +15 lines =@@
             this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.None] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.None : any
 >NodeType : any
 >None : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Empty] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.Empty] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Empty] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Empty : any
 >NodeType : any
 >Empty : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.EmptyExpr] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.EmptyExpr] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.EmptyExpr] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.EmptyExpr : any
 >NodeType : any
 >EmptyExpr : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.True] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.True] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.True] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.True : any
 >NodeType : any
 >True : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.False] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.False] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.False] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.False : any
 >NodeType : any
 >False : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.This] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.This] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.This] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.This : any
 >NodeType : any
 >This : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Super] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.Super] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Super] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Super : any
 >NodeType : any
 >Super : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.QString] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.QString] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.QString] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.QString : any
 >NodeType : any
 >QString : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Regex] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.Regex] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Regex] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Regex : any
 >NodeType : any
 >Regex : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Null] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.Null] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Null] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Null : any
 >NodeType : any
 >Null : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.ArrayLit] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.ArrayLit : any
 >NodeType : any
 >ArrayLit : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.ObjectLit] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.ObjectLit : any
 >NodeType : any
 >ObjectLit : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Void] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Void : any
 >NodeType : any
 >Void : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Comma] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Comma : any
 >NodeType : any
 >Comma : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Pos] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Pos : any
 >NodeType : any
 >Pos : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Neg] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Neg : any
 >NodeType : any
 >Neg : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Delete] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Delete : any
 >NodeType : any
 >Delete : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Await] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.Await] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Await] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Await : any
 >NodeType : any
 >Await : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.In] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.In : any
 >NodeType : any
 >In : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Dot] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Dot : any
 >NodeType : any
 >Dot : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.From] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.From] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.From] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.From : any
 >NodeType : any
 >From : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Is] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Is : any
 >NodeType : any
 >Is : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.InstOf] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.InstOf : any
 >NodeType : any
 >InstOf : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Typeof] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Typeof : any
 >NodeType : any
 >Typeof : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.NumberLit] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.NumberLit] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.NumberLit] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.NumberLit : any
 >NodeType : any
 >NumberLit : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Name] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Name : any
 >NodeType : any
 >Name : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren;
 >this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren : (preAst: TypeReference, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.TypeRef] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.TypeRef : any
 >NodeType : any
 >TypeRef : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Index] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Index : any
 >NodeType : any
 >Index : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren;
 >this.childrenWalkers[NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren : (preAst: CallExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Call] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Call : any
 >NodeType : any
 >Call : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.New] = ChildrenWalkers.walkCallExpressionChildren;
 >this.childrenWalkers[NodeType.New] = ChildrenWalkers.walkCallExpressionChildren : (preAst: CallExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.New] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.New : any
 >NodeType : any
 >New : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Asg] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Asg : any
 >NodeType : any
 >Asg : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.AsgAdd] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.AsgAdd : any
 >NodeType : any
 >AsgAdd : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.AsgSub] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.AsgSub : any
 >NodeType : any
 >AsgSub : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.AsgDiv] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.AsgDiv : any
 >NodeType : any
 >AsgDiv : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.AsgMul] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.AsgMul : any
 >NodeType : any
 >AsgMul : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.AsgMod] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.AsgMod : any
 >NodeType : any
 >AsgMod : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.AsgAnd] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.AsgAnd : any
 >NodeType : any
 >AsgAnd : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.AsgXor] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.AsgXor : any
 >NodeType : any
 >AsgXor : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.AsgOr] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.AsgOr : any
 >NodeType : any
 >AsgOr : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.AsgLsh] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.AsgLsh : any
 >NodeType : any
 >AsgLsh : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.AsgRsh] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.AsgRsh : any
 >NodeType : any
 >AsgRsh : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.AsgRs2] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.AsgRs2 : any
 >NodeType : any
 >AsgRs2 : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren;
 >this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren : (preAst: ConditionalExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.ConditionalExpression] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.ConditionalExpression : any
 >NodeType : any
 >ConditionalExpression : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.LogOr] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.LogOr : any
 >NodeType : any
 >LogOr : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.LogAnd] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.LogAnd : any
 >NodeType : any
 >LogAnd : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Or] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Or : any
 >NodeType : any
 >Or : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Xor] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Xor : any
 >NodeType : any
 >Xor : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.And] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.And : any
 >NodeType : any
 >And : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Eq] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Eq : any
 >NodeType : any
 >Eq : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Ne] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Ne : any
 >NodeType : any
 >Ne : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Eqv] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Eqv : any
 >NodeType : any
 >Eqv : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.NEqv] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.NEqv : any
 >NodeType : any
 >NEqv : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Lt] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Lt : any
 >NodeType : any
 >Lt : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Le] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Le : any
 >NodeType : any
 >Le : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Gt] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Gt : any
 >NodeType : any
 >Gt : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Ge] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Ge : any
 >NodeType : any
 >Ge : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Add] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Add : any
 >NodeType : any
 >Add : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Sub] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Sub : any
 >NodeType : any
 >Sub : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Mul] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Mul : any
 >NodeType : any
 >Mul : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Div] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Div : any
 >NodeType : any
 >Div : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Mod] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Mod : any
 >NodeType : any
 >Mod : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Lsh] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Lsh : any
 >NodeType : any
 >Lsh : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Rsh] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Rsh : any
 >NodeType : any
 >Rsh : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Rs2] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Rs2 : any
 >NodeType : any
 >Rs2 : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Not] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Not : any
 >NodeType : any
 >Not : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.LogNot] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.LogNot : any
 >NodeType : any
 >LogNot : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.IncPre] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.IncPre : any
 >NodeType : any
 >IncPre : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.DecPre] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.DecPre : any
 >NodeType : any
 >DecPre : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.IncPost] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.IncPost : any
 >NodeType : any
 >IncPost : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.DecPost] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.DecPost : any
 >NodeType : any
 >DecPost : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.TypeAssertion] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.TypeAssertion] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.TypeAssertion] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.TypeAssertion : any
 >NodeType : any
 >TypeAssertion : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren;
 >this.childrenWalkers[NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren : (preAst: FuncDecl, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.FuncDecl] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.FuncDecl : any
 >NodeType : any
 >FuncDecl : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren;
 >this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: BinaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Member] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Member : any
 >NodeType : any
 >Member : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren;
 >this.childrenWalkers[NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren : (preAst: BoundDecl, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.VarDecl] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.VarDecl : any
 >NodeType : any
 >VarDecl : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren;
 >this.childrenWalkers[NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren : (preAst: BoundDecl, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.ArgDecl] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.ArgDecl : any
 >NodeType : any
 >ArgDecl : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Return] = ChildrenWalkers.walkReturnStatementChildren;
 >this.childrenWalkers[NodeType.Return] = ChildrenWalkers.walkReturnStatementChildren : (preAst: ReturnStatement, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Return] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Return : any
 >NodeType : any
 >Return : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Break] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.Break] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Break] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Break : any
 >NodeType : any
 >Break : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Continue] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.Continue] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Continue] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Continue : any
 >NodeType : any
 >Continue : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Throw] = ChildrenWalkers.walkUnaryExpressionChildren;
 >this.childrenWalkers[NodeType.Throw] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: UnaryExpression, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Throw] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Throw : any
 >NodeType : any
 >Throw : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.For] = ChildrenWalkers.walkForStatementChildren;
 >this.childrenWalkers[NodeType.For] = ChildrenWalkers.walkForStatementChildren : (preAst: ForStatement, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.For] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.For : any
 >NodeType : any
 >For : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.ForIn] = ChildrenWalkers.walkForInStatementChildren;
 >this.childrenWalkers[NodeType.ForIn] = ChildrenWalkers.walkForInStatementChildren : (preAst: ForInStatement, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.ForIn] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.ForIn : any
 >NodeType : any
 >ForIn : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.If] = ChildrenWalkers.walkIfStatementChildren;
 >this.childrenWalkers[NodeType.If] = ChildrenWalkers.walkIfStatementChildren : (preAst: IfStatement, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.If] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.If : any
 >NodeType : any
 >If : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.While] = ChildrenWalkers.walkWhileStatementChildren;
 >this.childrenWalkers[NodeType.While] = ChildrenWalkers.walkWhileStatementChildren : (preAst: WhileStatement, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.While] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.While : any
 >NodeType : any
 >While : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.DoWhile] = ChildrenWalkers.walkDoWhileStatementChildren;
 >this.childrenWalkers[NodeType.DoWhile] = ChildrenWalkers.walkDoWhileStatementChildren : (preAst: DoWhileStatement, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.DoWhile] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.DoWhile : any
 >NodeType : any
 >DoWhile : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren;
 >this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren : (preAst: Block, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Block] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Block : any
 >NodeType : any
 >Block : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Case] = ChildrenWalkers.walkCaseStatementChildren;
 >this.childrenWalkers[NodeType.Case] = ChildrenWalkers.walkCaseStatementChildren : (preAst: CaseStatement, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Case] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Case : any
 >NodeType : any
 >Case : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Switch] = ChildrenWalkers.walkSwitchStatementChildren;
 >this.childrenWalkers[NodeType.Switch] = ChildrenWalkers.walkSwitchStatementChildren : (preAst: SwitchStatement, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Switch] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Switch : any
 >NodeType : any
 >Switch : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Try] = ChildrenWalkers.walkTryChildren;
 >this.childrenWalkers[NodeType.Try] = ChildrenWalkers.walkTryChildren : (preAst: Try, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Try] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Try : any
 >NodeType : any
 >Try : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.TryCatch] = ChildrenWalkers.walkTryCatchChildren;
 >this.childrenWalkers[NodeType.TryCatch] = ChildrenWalkers.walkTryCatchChildren : (preAst: TryCatch, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.TryCatch] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.TryCatch : any
 >NodeType : any
 >TryCatch : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.TryFinally] = ChildrenWalkers.walkTryFinallyChildren;
 >this.childrenWalkers[NodeType.TryFinally] = ChildrenWalkers.walkTryFinallyChildren : (preAst: TryFinally, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.TryFinally] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.TryFinally : any
 >NodeType : any
 >TryFinally : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Finally] = ChildrenWalkers.walkFinallyChildren;
 >this.childrenWalkers[NodeType.Finally] = ChildrenWalkers.walkFinallyChildren : (preAst: Finally, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Finally] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Finally : any
 >NodeType : any
 >Finally : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Catch] = ChildrenWalkers.walkCatchChildren;
 >this.childrenWalkers[NodeType.Catch] = ChildrenWalkers.walkCatchChildren : (preAst: Catch, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Catch] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Catch : any
 >NodeType : any
 >Catch : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren;
 >this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.List] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.List : any
 >NodeType : any
 >List : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren;
 >this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren : (preAst: Script, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Script] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Script : any
 >NodeType : any
 >Script : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren;
 >this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren : (preAst: ClassDeclaration, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.ClassDeclaration] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.ClassDeclaration : any
 >NodeType : any
 >ClassDeclaration : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren;
 >this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren : (preAst: InterfaceDeclaration, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.InterfaceDeclaration] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.InterfaceDeclaration : any
 >NodeType : any
 >InterfaceDeclaration : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren;
 >this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren : (preAst: ModuleDeclaration, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.ModuleDeclaration] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.ModuleDeclaration : any
 >NodeType : any
 >ModuleDeclaration : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren;
 >this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren : (preAst: ImportDeclaration, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.ImportDeclaration] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.ImportDeclaration : any
 >NodeType : any
 >ImportDeclaration : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.With] = ChildrenWalkers.walkWithStatementChildren;
 >this.childrenWalkers[NodeType.With] = ChildrenWalkers.walkWithStatementChildren : (preAst: WithStatement, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.With] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.With : any
 >NodeType : any
 >With : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Label] = ChildrenWalkers.walkLabelChildren;
 >this.childrenWalkers[NodeType.Label] = ChildrenWalkers.walkLabelChildren : (preAst: Label, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Label] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Label : any
 >NodeType : any
 >Label : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren;
 >this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren : (preAst: LabeledStatement, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.LabeledStatement] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.LabeledStatement : any
 >NodeType : any
 >LabeledStatement : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.EBStart] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.EBStart] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.EBStart] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.EBStart : any
 >NodeType : any
 >EBStart : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.GotoEB] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.GotoEB] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.GotoEB] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.GotoEB : any
 >NodeType : any
 >GotoEB : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.EndCode] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.EndCode] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.EndCode] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.EndCode : any
 >NodeType : any
 >EndCode : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Error] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.Error] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Error] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Error : any
 >NodeType : any
 >Error : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Comment] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Comment : any
 >NodeType : any
 >Comment : any
@@= skipped -13, +13 lines =@@
             this.childrenWalkers[NodeType.Debugger] = ChildrenWalkers.walkNone;
 >this.childrenWalkers[NodeType.Debugger] = ChildrenWalkers.walkNone : (preAst: ASTList, parent: AST, walker: IAstWalker) => void
 >this.childrenWalkers[NodeType.Debugger] : IAstWalkChildren
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >NodeType.Debugger : any
 >NodeType : any
 >Debugger : any
@@= skipped -24, +24 lines =@@
 >(<any>this.childrenWalkers)[e] : any
 >(<any>this.childrenWalkers) : any
 ><any>this.childrenWalkers : any
->this.childrenWalkers : IAstWalkChildren[]
+>this.childrenWalkers : (IAstWalkChildren)[]
 >this : this
->childrenWalkers : IAstWalkChildren[]
+>childrenWalkers : (IAstWalkChildren)[]
 >e : string
 >undefined : undefined
 
