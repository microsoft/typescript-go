--- old.variadicTuples2.types
+++ new.variadicTuples2.types
@@= skipped -341, +341 lines =@@
 >values : T
 >args.slice(0, -1) as unknown as T : T
 >args.slice(0, -1) as unknown : unknown
->args.slice(0, -1) : (((...values: T) => void) | T[number])[]
->args.slice : (start?: number, end?: number) => (((...values: T) => void) | T[number])[]
+>args.slice(0, -1) : ((...values: T) => void | T[number])[]
+>args.slice : (start?: number | undefined, end?: number | undefined) => ((...values: T) => void | T[number])[]
 >args : [...T, (...values: T) => void]
->slice : (start?: number, end?: number) => (((...values: T) => void) | T[number])[]
+>slice : (start?: number | undefined, end?: number | undefined) => ((...values: T) => void | T[number])[]
 >0 : 0
 >-1 : -1
 >1 : 1
@@= skipped -43, +43 lines =@@
 >"foo" : "foo"
 >123 : 123
 >true : true
->(...x) => {    x;  // [string, number, boolean]} : (x_0: string, x_1: number, x_2: boolean) => void
+>(...x) => {    x;  // [string, number, boolean]} : (...x: [string, number, boolean]) => void
 >x : [string, number, boolean]
 
     x;  // [string, number, boolean]
@@= skipped -132, +132 lines =@@
 // Repro from #39595
 
 declare function foo<S extends readonly [string, ...string[]]>(...stringsAndNumber: readonly [...S, number]): [...S, number];
->foo : <S extends readonly [string, ...string[]]>(...stringsAndNumber: readonly [...S, number]) => [...S, number]
->stringsAndNumber : readonly [...S, number]
+>foo : <S extends [string, ...string[]]>(...stringsAndNumber: [...S, number]) => [...S, number]
+>stringsAndNumber : [...S, number]
 
 const a1 = foo('blah1', 1);
 >a1 : ["blah1", number]
 >foo('blah1', 1) : ["blah1", number]
->foo : <S extends readonly [string, ...string[]]>(...stringsAndNumber: readonly [...S, number]) => [...S, number]
+>foo : <S extends [string, ...string[]]>(...stringsAndNumber: [...S, number]) => [...S, number]
 >'blah1' : "blah1"
 >1 : 1
 
 const b1 = foo('blah1', 'blah2', 1);
 >b1 : ["blah1", "blah2", number]
 >foo('blah1', 'blah2', 1) : ["blah1", "blah2", number]
->foo : <S extends readonly [string, ...string[]]>(...stringsAndNumber: readonly [...S, number]) => [...S, number]
+>foo : <S extends [string, ...string[]]>(...stringsAndNumber: [...S, number]) => [...S, number]
 >'blah1' : "blah1"
 >'blah2' : "blah2"
 >1 : 1
@@= skipped -21, +21 lines =@@
 const c1 = foo(1);  // Error
 >c1 : [string, ...string[], number]
 >foo(1) : [string, ...string[], number]
->foo : <S extends readonly [string, ...string[]]>(...stringsAndNumber: readonly [...S, number]) => [...S, number]
+>foo : <S extends [string, ...string[]]>(...stringsAndNumber: [...S, number]) => [...S, number]
 >1 : 1
 
 const d1 = foo(1, 2);  // Error
 >d1 : [string, ...string[], number]
 >foo(1, 2) : [string, ...string[], number]
->foo : <S extends readonly [string, ...string[]]>(...stringsAndNumber: readonly [...S, number]) => [...S, number]
+>foo : <S extends [string, ...string[]]>(...stringsAndNumber: [...S, number]) => [...S, number]
 >1 : 1
 >2 : 2
 
 const e1 = foo('blah1', 'blah2', 1, 2, 3);  // Error
 >e1 : [string, ...string[], number]
 >foo('blah1', 'blah2', 1, 2, 3) : [string, ...string[], number]
->foo : <S extends readonly [string, ...string[]]>(...stringsAndNumber: readonly [...S, number]) => [...S, number]
+>foo : <S extends [string, ...string[]]>(...stringsAndNumber: [...S, number]) => [...S, number]
 >'blah1' : "blah1"
 >'blah2' : "blah2"
 >1 : 1
