--- old.mixinClassesAnnotated.types
+++ new.mixinClassesAnnotated.types
@@= skipped -2, +2 lines =@@
 === mixinClassesAnnotated.ts ===
 type Constructor<T> = new(...args: any[]) => T;
 >Constructor : Constructor<T>
+>T : T
 >args : any[]
 
 class Base {
@@= skipped -28, +29 lines =@@
 }
 
 interface Printable {
+>Printable : Printable
+
     print(): void;
 >print : () => void
 }
@@= skipped -7, +9 lines =@@
 const Printable = <T extends Constructor<Base>>(superClass: T): Constructor<Printable> & { message: string } & T =>
 >Printable : <T extends Constructor<Base>>(superClass: T) => Constructor<Printable> & { message: string; } & T
 ><T extends Constructor<Base>>(superClass: T): Constructor<Printable> & { message: string } & T =>    class extends superClass {        static message = "hello";        print() {            const output = this.x + "," + this.y;        }    } : <T extends Constructor<Base>>(superClass: T) => Constructor<Printable> & { message: string; } & T
+>T : T
 >superClass : T
 >message : string
 
     class extends superClass {
->class extends superClass {        static message = "hello";        print() {            const output = this.x + "," + this.y;        }    } : { new (...args: any[]): (Anonymous class); prototype: Printable<any>.(Anonymous class); message: string; } & T
+>class extends superClass {        static message = "hello";        print() {            const output = this.x + "," + this.y;        }    } : { new (...args: any[]): (Anonymous class)<T>; message: string; prototype: (Anonymous class)<any>; } & T
 >superClass : Base
 
         static message = "hello";
@@= skipped -29, +30 lines =@@
     }
 
 interface Tagged {
+>Tagged : Tagged
+
     _tag: string;
 >_tag : string
 }
 
 function Tagged<T extends Constructor<{}>>(superClass: T): Constructor<Tagged> & T {
 >Tagged : <T extends Constructor<{}>>(superClass: T) => Constructor<Tagged> & T
+>T : T
 >superClass : T
 
     class C extends superClass {
->C : C
+>C : C<T>
 >superClass : {}
 
         _tag: string;
@@= skipped -33, +36 lines =@@
         }
     }
     return C;
->C : { new (...args: any[]): C; prototype: Tagged<any>.C; } & T
+>C : { new (...args: any[]): C<T>; prototype: C<any>; } & T
 }
 
 const Thing1 = Tagged(Derived);
