--- old.strictBindCallApply1.types
+++ new.strictBindCallApply1.types
@@= skipped -26, +26 lines =@@
 >undefined : undefined

 let f01 = foo.bind(undefined, 10);
->f01 : (b: string) => string
->foo.bind(undefined, 10) : (b: string) => string
+>f01 : (...args: [b: string]) => string
+>foo.bind(undefined, 10) : (...args: [b: string]) => string
 >foo.bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
 >foo : (a: number, b: string) => string
 >bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
@@= skipped -9, +9 lines =@@
 >10 : 10

 let f02 = foo.bind(undefined, 10, "hello");
->f02 : () => string
->foo.bind(undefined, 10, "hello") : () => string
+>f02 : (...args: []) => string
+>foo.bind(undefined, 10, "hello") : (...args: []) => string
 >foo.bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
 >foo : (a: number, b: string) => string
 >bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
@@= skipped -10, +10 lines =@@
 >"hello" : "hello"

 let f03 = foo.bind(undefined, 10, 20);  // Error
->f03 : () => string
->foo.bind(undefined, 10, 20) : () => string
+>f03 : (...args: []) => string
+>foo.bind(undefined, 10, 20) : (...args: []) => string
 >foo.bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
 >foo : (a: number, b: string) => string
 >bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
@@= skipped -150, +150 lines =@@
 >obj : {}

 let f10 = c.foo.bind(c);
->f10 : (a: number, b: string) => string
->c.foo.bind(c) : (a: number, b: string) => string
+>f10 : (...args: [a: number, b: string]) => string
+>c.foo.bind(c) : (...args: [a: number, b: string]) => string
 >c.foo.bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
 >c.foo : (this: C, a: number, b: string) => string
 >c : C
@@= skipped -10, +10 lines =@@
 >c : C

 let f11 = c.foo.bind(c, 10);
->f11 : (b: string) => string
->c.foo.bind(c, 10) : (b: string) => string
+>f11 : (...args: [b: string]) => string
+>c.foo.bind(c, 10) : (...args: [b: string]) => string
 >c.foo.bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
 >c.foo : (this: C, a: number, b: string) => string
 >c : C
@@= skipped -11, +11 lines =@@
 >10 : 10

 let f12 = c.foo.bind(c, 10, "hello");
->f12 : () => string
->c.foo.bind(c, 10, "hello") : () => string
+>f12 : (...args: []) => string
+>c.foo.bind(c, 10, "hello") : (...args: []) => string
 >c.foo.bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
 >c.foo : (this: C, a: number, b: string) => string
 >c : C
@@= skipped -12, +12 lines =@@
 >"hello" : "hello"

 let f13 = c.foo.bind(c, 10, 20);  // Error
->f13 : () => string
->c.foo.bind(c, 10, 20) : () => string
+>f13 : (...args: []) => string
+>c.foo.bind(c, 10, 20) : (...args: []) => string
 >c.foo.bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
 >c.foo : (this: C, a: number, b: string) => string
 >c : C
@@= skipped -12, +12 lines =@@
 >20 : 20

 let f14 = c.foo.bind(undefined);  // Error
->f14 : (a: number, b: string) => string
->c.foo.bind(undefined) : (a: number, b: string) => string
+>f14 : (...args: [a: number, b: string]) => string
+>c.foo.bind(undefined) : (...args: [a: number, b: string]) => string
 >c.foo.bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
 >c.foo : (this: C, a: number, b: string) => string
 >c : C
@@= skipped -163, +163 lines =@@
 >undefined : undefined

 let f21 = C.bind(undefined, 10);
->f21 : new (b: string) => C
->C.bind(undefined, 10) : new (b: string) => C
+>f21 : new (...args: [b: string]) => C
+>C.bind(undefined, 10) : new (...args: [b: string]) => C
 >C.bind : { <T>(this: T, thisArg: any): T; <A extends any[], B extends any[], R>(this: new (...args: [...A, ...B]) => R, thisArg: any, ...args: A): new (...args: B) => R; }
 >C : typeof C
 >bind : { <T>(this: T, thisArg: any): T; <A extends any[], B extends any[], R>(this: new (...args: [...A, ...B]) => R, thisArg: any, ...args: A): new (...args: B) => R; }
@@= skipped -9, +9 lines =@@
 >10 : 10

 let f22 = C.bind(undefined, 10, "hello");
->f22 : new () => C
->C.bind(undefined, 10, "hello") : new () => C
+>f22 : new (...args: []) => C
+>C.bind(undefined, 10, "hello") : new (...args: []) => C
 >C.bind : { <T>(this: T, thisArg: any): T; <A extends any[], B extends any[], R>(this: new (...args: [...A, ...B]) => R, thisArg: any, ...args: A): new (...args: B) => R; }
 >C : typeof C
 >bind : { <T>(this: T, thisArg: any): T; <A extends any[], B extends any[], R>(this: new (...args: [...A, ...B]) => R, thisArg: any, ...args: A): new (...args: B) => R; }
@@= skipped -10, +10 lines =@@
 >"hello" : "hello"

 let f23 = C.bind(undefined, 10, 20);  // Error
->f23 : new () => C
->C.bind(undefined, 10, 20) : new () => C
+>f23 : new (...args: []) => C
+>C.bind(undefined, 10, 20) : new (...args: []) => C
 >C.bind : { <T>(this: T, thisArg: any): T; <A extends any[], B extends any[], R>(this: new (...args: [...A, ...B]) => R, thisArg: any, ...args: A): new (...args: B) => R; }
 >C : typeof C
 >bind : { <T>(this: T, thisArg: any): T; <A extends any[], B extends any[], R>(this: new (...args: [...A, ...B]) => R, thisArg: any, ...args: A): new (...args: B) => R; }