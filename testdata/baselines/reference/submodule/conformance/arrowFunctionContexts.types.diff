--- old.arrowFunctionContexts.types
+++ new.arrowFunctionContexts.types
@@= skipped -34, +34 lines =@@
 // Arrow function as function argument
 window.setTimeout(() => null, 100);
 >window.setTimeout(() => null, 100) : number
->window.setTimeout : ((handler: TimerHandler, timeout?: number, ...arguments: any[]) => number) & ((handler: TimerHandler, timeout?: number, ...arguments: any[]) => number)
+>window.setTimeout : (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number & (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number
 >window : Window & typeof globalThis
->setTimeout : ((handler: TimerHandler, timeout?: number, ...arguments: any[]) => number) & ((handler: TimerHandler, timeout?: number, ...arguments: any[]) => number)
+>setTimeout : (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number & (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number
 >() => null : () => any
 >100 : 100
 
@@= skipped -19, +19 lines =@@
 >n : number
 
 var arr = [(n: number) => ''];
->arr : ((n: number) => string)[]
->[(n: number) => ''] : ((n: number) => string)[]
+>arr : (n: number) => string[]
+>[(n: number) => ''] : (n: number) => string[]
 >(n: number) => '' : (n: number) => string
 >n : number
 >'' : ""
 
 var arr: { (n: number): string; }[]; // Incorrect error here (bug 829597)
->arr : ((n: number) => string)[]
+>arr : (n: number) => string[]
 >n : number
 
 // Arrow function as enum value
@@= skipped -83, +83 lines =@@
     // Arrow function as function argument
     window.setTimeout(() => null, 100);
 >window.setTimeout(() => null, 100) : number
->window.setTimeout : ((handler: TimerHandler, timeout?: number, ...arguments: any[]) => number) & ((handler: TimerHandler, timeout?: number, ...arguments: any[]) => number)
+>window.setTimeout : (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number & (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number
 >window : Window & typeof globalThis
->setTimeout : ((handler: TimerHandler, timeout?: number, ...arguments: any[]) => number) & ((handler: TimerHandler, timeout?: number, ...arguments: any[]) => number)
+>setTimeout : (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number & (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number
 >() => null : () => any
 >100 : 100
 
@@= skipped -19, +19 lines =@@
 >n : number
 
     var arr = [(n: number) => ''];
->arr : ((n: number) => string)[]
->[(n: number) => ''] : ((n: number) => string)[]
+>arr : (n: number) => string[]
+>[(n: number) => ''] : (n: number) => string[]
 >(n: number) => '' : (n: number) => string
 >n : number
 >'' : ""
 
     var arr: { (n: number): string; }[]; // Incorrect error here (bug 829597)
->arr : ((n: number) => string)[]
+>arr : (n: number) => string[]
 >n : number
 
     // Arrow function as enum value
@@= skipped -51, +51 lines =@@
 var generic1 = <T>(n: T) => [n];
 >generic1 : <T>(n: T) => T[]
 ><T>(n: T) => [n] : <T>(n: T) => T[]
+>T : T
 >n : T
 >[n] : T[]
 >n : T
 
 var generic1: { <T>(n: T): T[] }; // Incorrect error, Bug 829597
 >generic1 : <T>(n: T) => T[]
+>T : T
 >n : T
 
 var generic2 = <T>(n: T) => { return [n]; };
 >generic2 : <T>(n: T) => T[]
 ><T>(n: T) => { return [n]; } : <T>(n: T) => T[]
+>T : T
 >n : T
 >[n] : T[]
 >n : T
 
 var generic2: { <T>(n: T): T[] };
 >generic2 : <T>(n: T) => T[]
+>T : T
 >n : T
 
 // <Identifier> ((ParamList) => { ... } ) is a type assertion to an arrow function
