--- old.thisTypeInTuples.symbols
+++ new.thisTypeInTuples.symbols
@@= skipped -5, +5 lines =@@
 >T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 16))
 
     slice(): this;
->slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
+>slice : Symbol(slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
 }
 
 let t: [number, string] = [42, "hello"];
@@= skipped -8, +8 lines =@@
 
 let a = t.slice();
 >a : Symbol(a, Decl(thisTypeInTuples.ts, 5, 3))
->t.slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
+>t.slice : Symbol(slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
 >t : Symbol(t, Decl(thisTypeInTuples.ts, 4, 3))
->slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
+>slice : Symbol(slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
 
 let b = t.slice(1);
 >b : Symbol(b, Decl(thisTypeInTuples.ts, 6, 3))
->t.slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
+>t.slice : Symbol(slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
 >t : Symbol(t, Decl(thisTypeInTuples.ts, 4, 3))
->slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
+>slice : Symbol(slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
 
 let c = t.slice(0, 1);
 >c : Symbol(c, Decl(thisTypeInTuples.ts, 7, 3))
->t.slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
+>t.slice : Symbol(slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
 >t : Symbol(t, Decl(thisTypeInTuples.ts, 4, 3))
->slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
+>slice : Symbol(slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 20))
 
