--- old.typeAliasesForObjectTypes.symbols
+++ new.typeAliasesForObjectTypes.symbols
@@= skipped -8, +8 lines =@@
 interface I1 extends T1 { y: string }
 >I1 : Symbol(I1, Decl(typeAliasesForObjectTypes.ts, 0, 23))
 >T1 : Symbol(T1, Decl(typeAliasesForObjectTypes.ts, 0, 0))
->y : Symbol(I1.y, Decl(typeAliasesForObjectTypes.ts, 3, 25))
+>y : Symbol(y, Decl(typeAliasesForObjectTypes.ts, 3, 25))
 
 class C1 implements T1 {
 >C1 : Symbol(C1, Decl(typeAliasesForObjectTypes.ts, 3, 37))
 >T1 : Symbol(T1, Decl(typeAliasesForObjectTypes.ts, 0, 0))
 
     x: string;
->x : Symbol(C1.x, Decl(typeAliasesForObjectTypes.ts, 4, 24))
+>x : Symbol(x, Decl(typeAliasesForObjectTypes.ts, 4, 24))
 }
 
 // An interface can have multiple merged declarations, but a type alias for an object type literal cannot.
