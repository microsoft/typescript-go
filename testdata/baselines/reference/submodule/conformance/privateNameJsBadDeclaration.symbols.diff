--- old.privateNameJsBadDeclaration.symbols
+++ new.privateNameJsBadDeclaration.symbols
@@= skipped -1, +1 lines =@@
 
 === privateNameJsPrototype.js ===
 function A() { }
->A : Symbol(A, Decl(privateNameJsPrototype.js, 0, 0), Decl(privateNameJsPrototype.js, 0, 16))
+>A : Symbol(A, Decl(privateNameJsPrototype.js, 0, 0))
 
 A.prototype = {
->A.prototype : Symbol(A.prototype, Decl(privateNameJsPrototype.js, 0, 16))
->A : Symbol(A, Decl(privateNameJsPrototype.js, 0, 0), Decl(privateNameJsPrototype.js, 0, 16))
->prototype : Symbol(A.prototype, Decl(privateNameJsPrototype.js, 0, 16))
+>A.prototype : Symbol(prototype, Decl(privateNameJsPrototype.js, 0, 16))
+>A : Symbol(A, Decl(privateNameJsPrototype.js, 0, 0))
+>prototype : Symbol(prototype, Decl(privateNameJsPrototype.js, 0, 16))
 
   #x: 1,         // Error
 >#x : Symbol(#x, Decl(privateNameJsPrototype.js, 1, 15))
@@= skipped -17, +17 lines =@@
 >#p : Symbol(#p, Decl(privateNameJsPrototype.js, 3, 10))
 }
 class B { }
->B : Symbol(B, Decl(privateNameJsPrototype.js, 5, 1), Decl(privateNameJsPrototype.js, 6, 11))
+>B : Symbol(B, Decl(privateNameJsPrototype.js, 5, 1))
 
 B.prototype = {
->B.prototype : Symbol(B.prototype, Decl(privateNameJsPrototype.js, 6, 11))
->B : Symbol(B, Decl(privateNameJsPrototype.js, 5, 1), Decl(privateNameJsPrototype.js, 6, 11))
->prototype : Symbol(B.prototype, Decl(privateNameJsPrototype.js, 6, 11))
+>B.prototype : Symbol(prototype)
+>B : Symbol(B, Decl(privateNameJsPrototype.js, 5, 1))
+>prototype : Symbol(prototype)
 
   #y: 2,         // Error
 >#y : Symbol(#y, Decl(privateNameJsPrototype.js, 7, 15))
