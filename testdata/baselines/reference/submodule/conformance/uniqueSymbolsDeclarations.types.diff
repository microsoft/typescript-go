--- old.uniqueSymbolsDeclarations.types
+++ new.uniqueSymbolsDeclarations.types
@@= skipped -79, +79 lines =@@
 const constInitToConstCallWithTypeQuery: typeof constCall = constCall;
 >constInitToConstCallWithTypeQuery : unique symbol
 >constCall : unique symbol
->constCall : unique symbol
 
 const constInitToConstDeclAmbientWithTypeQuery: typeof constType = constType;
 >constInitToConstDeclAmbientWithTypeQuery : unique symbol
 >constType : unique symbol
->constType : unique symbol
 
 // function return inference
 function funcReturnConstCall() { return constCall; }
@@= skipped -22, +20 lines =@@
 
 // function return value with type query
 function funcReturnConstCallWithTypeQuery(): typeof constCall { return constCall; }
->funcReturnConstCallWithTypeQuery : () => typeof constCall
+>funcReturnConstCallWithTypeQuery : () => unique symbol
 >constCall : unique symbol
->constCall : unique symbol
 
 // generator function yield inference
 function* genFuncYieldConstCall() { yield constCall; }
@@= skipped -22, +21 lines =@@
 
 // generator function yield with return type query
 function* genFuncYieldConstCallWithTypeQuery(): IterableIterator<typeof constCall> { yield constCall; }
->genFuncYieldConstCallWithTypeQuery : () => IterableIterator<typeof constCall>
->constCall : unique symbol
+>genFuncYieldConstCallWithTypeQuery : () => IterableIterator<unique symbol, any, any>
 >yield constCall : any
 >constCall : unique symbol
 
@@= skipped -95, +94 lines =@@
 
 const constInitToCReadonlyStaticCallWithTypeQuery: typeof C.readonlyStaticCall = C.readonlyStaticCall;
 >constInitToCReadonlyStaticCallWithTypeQuery : unique symbol
->C.readonlyStaticCall : unique symbol
 >C : typeof C
->readonlyStaticCall : unique symbol
 >C.readonlyStaticCall : unique symbol
 >C : typeof C
 >readonlyStaticCall : unique symbol
 
 const constInitToCReadonlyStaticTypeWithTypeQuery: typeof C.readonlyStaticType = C.readonlyStaticType;
 >constInitToCReadonlyStaticTypeWithTypeQuery : unique symbol
->C.readonlyStaticType : unique symbol
 >C : typeof C
->readonlyStaticType : unique symbol
 >C.readonlyStaticType : unique symbol
 >C : typeof C
 >readonlyStaticType : unique symbol
 
 const constInitToCReadonlyStaticTypeAndCallWithTypeQuery: typeof C.readonlyStaticTypeAndCall = C.readonlyStaticTypeAndCall;
 >constInitToCReadonlyStaticTypeAndCallWithTypeQuery : unique symbol
->C.readonlyStaticTypeAndCall : unique symbol
 >C : typeof C
->readonlyStaticTypeAndCall : unique symbol
 >C.readonlyStaticTypeAndCall : unique symbol
 >C : typeof C
 >readonlyStaticTypeAndCall : unique symbol
 
 const constInitToCReadwriteStaticCallWithTypeQuery: typeof C.readwriteStaticCall = C.readwriteStaticCall;
 >constInitToCReadwriteStaticCallWithTypeQuery : symbol
->C.readwriteStaticCall : symbol
 >C : typeof C
->readwriteStaticCall : symbol
 >C.readwriteStaticCall : symbol
 >C : typeof C
 >readwriteStaticCall : symbol
@@= skipped -48, +40 lines =@@
 
 const constInitToCReadonlyCallWithTypeQuery: typeof c.readonlyCall = c.readonlyCall;
 >constInitToCReadonlyCallWithTypeQuery : symbol
->c.readonlyCall : symbol
 >c : C
->readonlyCall : symbol
 >c.readonlyCall : symbol
 >c : C
 >readonlyCall : symbol
 
 const constInitToCReadwriteCallWithTypeQuery: typeof c.readwriteCall = c.readwriteCall;
 >constInitToCReadwriteCallWithTypeQuery : symbol
->c.readwriteCall : symbol
 >c : C
->readwriteCall : symbol
 >c.readwriteCall : symbol
 >c : C
 >readwriteCall : symbol
@@= skipped -30, +26 lines =@@
 
 // interfaces
 interface I {
+>I : I
+
     readonly readonlyType: unique symbol;
 >readonlyType : unique symbol
 }
@@= skipped -14, +16 lines =@@
 
 const constInitToIReadonlyTypeWithTypeQuery: typeof i.readonlyType = i.readonlyType;
 >constInitToIReadonlyTypeWithTypeQuery : unique symbol
->i.readonlyType : unique symbol
 >i : I
->readonlyType : unique symbol
 >i.readonlyType : unique symbol
 >i : I
 >readonlyType : unique symbol
@@= skipped -46, +44 lines =@@
 
 const constInitToLReadonlyTypeWithTypeQuery: typeof l.readonlyType = l.readonlyType;
 >constInitToLReadonlyTypeWithTypeQuery : unique symbol
->l.readonlyType : unique symbol
 >l : L
->readonlyType : unique symbol
 >l.readonlyType : unique symbol
 >l : L
 >readonlyType : unique symbol
 
 const constInitToLReadonlyNestedTypeWithTypeQuery: typeof l.nested.readonlyNestedType = l.nested.readonlyNestedType;
 >constInitToLReadonlyNestedTypeWithTypeQuery : unique symbol
->l.nested.readonlyNestedType : unique symbol
 >l.nested : { readonly readonlyNestedType: unique symbol; }
 >l : L
 >nested : { readonly readonlyNestedType: unique symbol; }
->readonlyNestedType : unique symbol
 >l.nested.readonlyNestedType : unique symbol
 >l.nested : { readonly readonlyNestedType: unique symbol; }
 >l : L
@@= skipped -67, +63 lines =@@
 
 declare function f<T>(x: T): T;
 >f : <T>(x: T) => T
+>T : T
 >x : T
 
 declare function g(x: typeof s): void;
->g : { (x: typeof s): void; (x: typeof N.s): void; }
+>g : { (x: unique symbol): void; (x: unique symbol): void; }
 >x : unique symbol
->s : unique symbol
 
 declare function g(x: typeof N.s): void;
->g : { (x: typeof s): void; (x: typeof N.s): void; }
+>g : { (x: unique symbol): void; (x: unique symbol): void; }
 >x : unique symbol
->N.s : unique symbol
 >N : typeof N
->s : unique symbol
 
 // widening positions
 
@@= skipped -55, +53 lines =@@
 
 // property assignments/methods
 const o2 = {
->o2 : { a: symbol; b: symbol; c: symbol; method1(): symbol; method2(): Promise<symbol>; method3(): AsyncGenerator<symbol, void, unknown>; method4(): Generator<symbol, void, unknown>; method5(p?: symbol): symbol; }
->{    a: s,    b: N.s,    c: N["s"],    method1() { return s; },    async method2() { return s; },    async * method3() { yield s; },    * method4() { yield s; },    method5(p = s) { return p; }} : { a: symbol; b: symbol; c: symbol; method1(): symbol; method2(): Promise<symbol>; method3(): AsyncGenerator<symbol, void, unknown>; method4(): Generator<symbol, void, unknown>; method5(p?: symbol): symbol; }
+>o2 : { a: symbol; b: symbol; c: symbol; method1: () => symbol; method2: () => Promise<symbol>; method3: () => AsyncGenerator<symbol, void, unknown>; method4: () => Generator<symbol, void, unknown>; method5: (p?: symbol) => symbol; }
+>{    a: s,    b: N.s,    c: N["s"],    method1() { return s; },    async method2() { return s; },    async * method3() { yield s; },    * method4() { yield s; },    method5(p = s) { return p; }} : { a: symbol; b: symbol; c: symbol; method1: () => symbol; method2: () => Promise<symbol>; method3: () => AsyncGenerator<symbol, void, unknown>; method4: () => Generator<symbol, void, unknown>; method5: (p?: symbol) => symbol; }
 
     a: s,
 >a : symbol
@@= skipped -165, +165 lines =@@
 >f<typeof s>(s) : unique symbol
 >f : <T>(x: T) => T
 >s : unique symbol
->s : unique symbol
 
 f<typeof N.s>(N.s);
 >f<typeof N.s>(N.s) : unique symbol
 >f : <T>(x: T) => T
->N.s : unique symbol
 >N : typeof N
->s : unique symbol
 >N.s : unique symbol
 >N : typeof N
 >s : unique symbol
@@= skipped -15, +12 lines =@@
 f<typeof N.s>(N["s"]);
 >f<typeof N.s>(N["s"]) : unique symbol
 >f : <T>(x: T) => T
->N.s : unique symbol
 >N : typeof N
->s : unique symbol
 >N["s"] : unique symbol
 >N : typeof N
 >"s" : "s"
 
 g(s);
 >g(s) : void
->g : { (x: typeof s): void; (x: typeof N.s): void; }
+>g : { (x: unique symbol): void; (x: unique symbol): void; }
 >s : unique symbol
 
 g(N.s);
 >g(N.s) : void
->g : { (x: typeof s): void; (x: typeof N.s): void; }
+>g : { (x: unique symbol): void; (x: unique symbol): void; }
 >N.s : unique symbol
 >N : typeof N
 >s : unique symbol
 
 g(N["s"]);
 >g(N["s"]) : void
->g : { (x: typeof s): void; (x: typeof N.s): void; }
+>g : { (x: unique symbol): void; (x: unique symbol): void; }
 >N["s"] : unique symbol
 >N : typeof N
 >"s" : "s"
@@= skipped -48, +46 lines =@@
 
 // conditionals
 Math.random() * 2 ? s : "a";
->Math.random() * 2 ? s : "a" : unique symbol | "a"
+>Math.random() * 2 ? s : "a" : "a" | unique symbol
 >Math.random() * 2 : number
 >Math.random() : number
 >Math.random : () => number
@@= skipped -11, +11 lines =@@
 >"a" : "a"
 
 Math.random() * 2 ? N.s : "a";
->Math.random() * 2 ? N.s : "a" : unique symbol | "a"
+>Math.random() * 2 ? N.s : "a" : "a" | unique symbol
 >Math.random() * 2 : number
 >Math.random() : number
 >Math.random : () => number
@@= skipped -13, +13 lines =@@
 >"a" : "a"
 
 Math.random() * 2 ? N["s"] : "a";
->Math.random() * 2 ? N["s"] : "a" : unique symbol | "a"
+>Math.random() * 2 ? N["s"] : "a" : "a" | unique symbol
 >Math.random() * 2 : number
 >Math.random() : number
 >Math.random : () => number
@@= skipped -58, +58 lines =@@
 // contextual types
 
 interface Context {
+>Context : Context
+
     method1(): typeof s;
->method1 : () => typeof s
->s : unique symbol
+>method1 : () => unique symbol
 
     method2(): Promise<typeof s>;
->method2 : () => Promise<typeof s>
->s : unique symbol
+>method2 : () => Promise<unique symbol>
 
     method3(): AsyncIterableIterator<typeof s>;
->method3 : () => AsyncIterableIterator<typeof s>
->s : unique symbol
+>method3 : () => AsyncIterableIterator<unique symbol, any, any>
 
     method4(): IterableIterator<typeof s>;
->method4 : () => IterableIterator<typeof s>
->s : unique symbol
+>method4 : () => IterableIterator<unique symbol, any, any>
 
     method5(p?: typeof s): typeof s;
->method5 : (p?: typeof s) => typeof s
+>method5 : (p?: unique symbol) => unique symbol
 >p : unique symbol
->s : unique symbol
->s : unique symbol
 }
 
 const o4: Context = {
 >o4 : Context
->{    method1() {        return s; // return type should not widen due to contextual type    },    async method2() {        return s; // return type should not widen due to contextual type    },    async * method3() {        yield s; // yield type should not widen due to contextual type    },    * method4() {        yield s; // yield type should not widen due to contextual type    },    method5(p = s) { // parameter should not widen due to contextual type        return p;    }} : { method1(): unique symbol; method2(): Promise<unique symbol>; method3(): AsyncGenerator<unique symbol, void, any>; method4(): Generator<unique symbol, void, any>; method5(p?: unique symbol): unique symbol; }
+>{    method1() {        return s; // return type should not widen due to contextual type    },    async method2() {        return s; // return type should not widen due to contextual type    },    async * method3() {        yield s; // yield type should not widen due to contextual type    },    * method4() {        yield s; // yield type should not widen due to contextual type    },    method5(p = s) { // parameter should not widen due to contextual type        return p;    }} : { method1: () => unique symbol; method2: () => Promise<unique symbol>; method3: () => AsyncGenerator<unique symbol, void, any>; method4: () => Generator<unique symbol, void, any>; method5: (p?: unique symbol) => unique symbol; }
 
     method1() {
 >method1 : () => unique symbol
