--- old.intersectionAsWeakTypeSource.symbols
+++ new.intersectionAsWeakTypeSource.symbols
@@= skipped -2, +2 lines =@@
 === intersectionAsWeakTypeSource.ts ===
 interface X { x: string }
 >X : Symbol(X, Decl(intersectionAsWeakTypeSource.ts, 0, 0))
->x : Symbol(X.x, Decl(intersectionAsWeakTypeSource.ts, 0, 13))
+>x : Symbol(x, Decl(intersectionAsWeakTypeSource.ts, 0, 13))
 
 interface Y { y: number }
 >Y : Symbol(Y, Decl(intersectionAsWeakTypeSource.ts, 0, 25))
->y : Symbol(Y.y, Decl(intersectionAsWeakTypeSource.ts, 1, 13))
+>y : Symbol(y, Decl(intersectionAsWeakTypeSource.ts, 1, 13))
 
 interface Z { z?: boolean }
 >Z : Symbol(Z, Decl(intersectionAsWeakTypeSource.ts, 1, 25))
->z : Symbol(Z.z, Decl(intersectionAsWeakTypeSource.ts, 2, 13))
+>z : Symbol(z, Decl(intersectionAsWeakTypeSource.ts, 2, 13))
 
 type XY = X & Y;
 >XY : Symbol(XY, Decl(intersectionAsWeakTypeSource.ts, 2, 27))
@@= skipped -31, +31 lines =@@
 >ViewStyle : Symbol(ViewStyle, Decl(intersectionAsWeakTypeSource.ts, 7, 17))
 
     view: number
->view : Symbol(ViewStyle.view, Decl(intersectionAsWeakTypeSource.ts, 10, 21))
+>view : Symbol(view, Decl(intersectionAsWeakTypeSource.ts, 10, 21))
 
     styleMedia: string
->styleMedia : Symbol(ViewStyle.styleMedia, Decl(intersectionAsWeakTypeSource.ts, 11, 16))
+>styleMedia : Symbol(styleMedia, Decl(intersectionAsWeakTypeSource.ts, 11, 16))
 }
 type Brand<T> = number & { __brand: T }
 >Brand : Symbol(Brand, Decl(intersectionAsWeakTypeSource.ts, 13, 1))
