--- old.controlFlowOptionalChain.symbols
+++ new.controlFlowOptionalChain.symbols
@@= skipped -23, +23 lines =@@
 >a : Symbol(a, Decl(controlFlowOptionalChain.ts, 7, 3))
 
 a.toString();
->a.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>a.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(controlFlowOptionalChain.ts, 7, 3))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 
 let b: number;
 >b : Symbol(b, Decl(controlFlowOptionalChain.ts, 11, 3))
@@= skipped -12, +12 lines =@@
 >b : Symbol(b, Decl(controlFlowOptionalChain.ts, 11, 3))
 
 b.toString();
->b.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>b.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >b : Symbol(b, Decl(controlFlowOptionalChain.ts, 11, 3))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 
 let c: number;
 >c : Symbol(c, Decl(controlFlowOptionalChain.ts, 15, 3))
@@= skipped -12, +12 lines =@@
 >c : Symbol(c, Decl(controlFlowOptionalChain.ts, 15, 3))
 
 c.toString();
->c.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>c.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >c : Symbol(c, Decl(controlFlowOptionalChain.ts, 15, 3))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 
 let d: number;
 >d : Symbol(d, Decl(controlFlowOptionalChain.ts, 19, 3))
@@= skipped -12, +12 lines =@@
 >d : Symbol(d, Decl(controlFlowOptionalChain.ts, 19, 3))
 
 d.toString();
->d.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>d.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >d : Symbol(d, Decl(controlFlowOptionalChain.ts, 19, 3))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 
 // type predicates
 declare const f: undefined | ((x: any) => x is number);
@@= skipped -92, +92 lines =@@
 >f : Symbol(f, Decl(controlFlowOptionalChain.ts, 40, 19))
 
     o2.f;
->o2.f : Symbol(f, Decl(controlFlowOptionalChain.ts, 40, 19))
 >o2 : Symbol(o2, Decl(controlFlowOptionalChain.ts, 40, 13))
->f : Symbol(f, Decl(controlFlowOptionalChain.ts, 40, 19))
 }
 x;
 >x : Symbol(x, Decl(controlFlowOptionalChain.ts, 25, 13))
@@= skipped -16, +14 lines =@@
 >f : Symbol(f, Decl(controlFlowOptionalChain.ts, 40, 19))
 
 o2.f;
->o2.f : Symbol(f, Decl(controlFlowOptionalChain.ts, 40, 19))
 >o2 : Symbol(o2, Decl(controlFlowOptionalChain.ts, 40, 13))
->f : Symbol(f, Decl(controlFlowOptionalChain.ts, 40, 19))
 
 declare const o3: { x: 1, y: string } | { x: 2, y: number } | undefined;
 >o3 : Symbol(o3, Decl(controlFlowOptionalChain.ts, 58, 13))
@@= skipped -39, +37 lines =@@
 >x : Symbol(x, Decl(controlFlowOptionalChain.ts, 58, 41))
 
     o3.x;
->o3.x : Symbol(x, Decl(controlFlowOptionalChain.ts, 58, 41))
 >o3 : Symbol(o3, Decl(controlFlowOptionalChain.ts, 58, 13))
->x : Symbol(x, Decl(controlFlowOptionalChain.ts, 58, 41))
 }
 o3;
 >o3 : Symbol(o3, Decl(controlFlowOptionalChain.ts, 58, 13))
@@= skipped -13, +11 lines =@@
 >x : Symbol(x, Decl(controlFlowOptionalChain.ts, 58, 19), Decl(controlFlowOptionalChain.ts, 58, 41))
 
 o3.x;
->o3.x : Symbol(x, Decl(controlFlowOptionalChain.ts, 58, 19), Decl(controlFlowOptionalChain.ts, 58, 41))
 >o3 : Symbol(o3, Decl(controlFlowOptionalChain.ts, 58, 13))
->x : Symbol(x, Decl(controlFlowOptionalChain.ts, 58, 19), Decl(controlFlowOptionalChain.ts, 58, 41))
 
 declare const o4: { x?: { y: boolean } };
 >o4 : Symbol(o4, Decl(controlFlowOptionalChain.ts, 73, 13))
@@= skipped -49, +47 lines =@@
 >y : Symbol(y, Decl(controlFlowOptionalChain.ts, 73, 25))
 
     o4.x.y;
->o4.x.y : Symbol(y, Decl(controlFlowOptionalChain.ts, 73, 25))
 >o4.x : Symbol(x, Decl(controlFlowOptionalChain.ts, 73, 19))
 >o4 : Symbol(o4, Decl(controlFlowOptionalChain.ts, 73, 13))
 >x : Symbol(x, Decl(controlFlowOptionalChain.ts, 73, 19))
->y : Symbol(y, Decl(controlFlowOptionalChain.ts, 73, 25))
 }
 o4.x;
 >o4.x : Symbol(x, Decl(controlFlowOptionalChain.ts, 73, 19))
@@= skipped -19, +17 lines =@@
 >y : Symbol(y, Decl(controlFlowOptionalChain.ts, 73, 25))
 
 o4.x.y;
->o4.x.y : Symbol(y, Decl(controlFlowOptionalChain.ts, 73, 25))
 >o4.x : Symbol(x, Decl(controlFlowOptionalChain.ts, 73, 19))
 >o4 : Symbol(o4, Decl(controlFlowOptionalChain.ts, 73, 13))
 >x : Symbol(x, Decl(controlFlowOptionalChain.ts, 73, 19))
->y : Symbol(y, Decl(controlFlowOptionalChain.ts, 73, 25))
 
 declare const o5: { x?: { y: { z?: { w: boolean } } } };
 >o5 : Symbol(o5, Decl(controlFlowOptionalChain.ts, 88, 13))
@@= skipped -123, +121 lines =@@
 >w : Symbol(w, Decl(controlFlowOptionalChain.ts, 88, 36))
 
     o5.x.y;
->o5.x.y : Symbol(y, Decl(controlFlowOptionalChain.ts, 88, 25))
 >o5.x : Symbol(x, Decl(controlFlowOptionalChain.ts, 88, 19))
 >o5 : Symbol(o5, Decl(controlFlowOptionalChain.ts, 88, 13))
 >x : Symbol(x, Decl(controlFlowOptionalChain.ts, 88, 19))
->y : Symbol(y, Decl(controlFlowOptionalChain.ts, 88, 25))
 
     o5.x.y.z.w;
->o5.x.y.z.w : Symbol(w, Decl(controlFlowOptionalChain.ts, 88, 36))
->o5.x.y.z : Symbol(z, Decl(controlFlowOptionalChain.ts, 88, 30))
->o5.x.y : Symbol(y, Decl(controlFlowOptionalChain.ts, 88, 25))
 >o5.x : Symbol(x, Decl(controlFlowOptionalChain.ts, 88, 19))
 >o5 : Symbol(o5, Decl(controlFlowOptionalChain.ts, 88, 13))
 >x : Symbol(x, Decl(controlFlowOptionalChain.ts, 88, 19))
->y : Symbol(y, Decl(controlFlowOptionalChain.ts, 88, 25))
->z : Symbol(z, Decl(controlFlowOptionalChain.ts, 88, 30))
->w : Symbol(w, Decl(controlFlowOptionalChain.ts, 88, 36))
 }
 o5.x;
 >o5.x : Symbol(x, Decl(controlFlowOptionalChain.ts, 88, 19))
@@= skipped -50, +42 lines =@@
 >w : Symbol(w, Decl(controlFlowOptionalChain.ts, 88, 36))
 
 o5.x.y;
->o5.x.y : Symbol(y, Decl(controlFlowOptionalChain.ts, 88, 25))
 >o5.x : Symbol(x, Decl(controlFlowOptionalChain.ts, 88, 19))
 >o5 : Symbol(o5, Decl(controlFlowOptionalChain.ts, 88, 13))
 >x : Symbol(x, Decl(controlFlowOptionalChain.ts, 88, 19))
->y : Symbol(y, Decl(controlFlowOptionalChain.ts, 88, 25))
 
 o5.x.y.z.w;
->o5.x.y.z.w : Symbol(w, Decl(controlFlowOptionalChain.ts, 88, 36))
->o5.x.y.z : Symbol(z, Decl(controlFlowOptionalChain.ts, 88, 30))
->o5.x.y : Symbol(y, Decl(controlFlowOptionalChain.ts, 88, 25))
 >o5.x : Symbol(x, Decl(controlFlowOptionalChain.ts, 88, 19))
 >o5 : Symbol(o5, Decl(controlFlowOptionalChain.ts, 88, 13))
 >x : Symbol(x, Decl(controlFlowOptionalChain.ts, 88, 19))
->y : Symbol(y, Decl(controlFlowOptionalChain.ts, 88, 25))
->z : Symbol(z, Decl(controlFlowOptionalChain.ts, 88, 30))
->w : Symbol(w, Decl(controlFlowOptionalChain.ts, 88, 36))
 
 interface Base {
 >Base : Symbol(Base, Decl(controlFlowOptionalChain.ts, 111, 11))
 
     f(): this is Derived;
->f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
+>f : Symbol(f, Decl(controlFlowOptionalChain.ts, 113, 16))
 >Derived : Symbol(Derived, Decl(controlFlowOptionalChain.ts, 115, 1))
 }
 
@@= skipped -30, +22 lines =@@
 >Base : Symbol(Base, Decl(controlFlowOptionalChain.ts, 111, 11))
 
     x: number;
->x : Symbol(Derived.x, Decl(controlFlowOptionalChain.ts, 117, 32))
+>x : Symbol(x, Decl(controlFlowOptionalChain.ts, 117, 32))
 }
 
 declare const o6: Base | undefined;
@@= skipped -8, +8 lines =@@
 >Base : Symbol(Base, Decl(controlFlowOptionalChain.ts, 111, 11))
 
 if (o6?.f()) {
->o6?.f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
+>o6?.f : Symbol(f, Decl(controlFlowOptionalChain.ts, 113, 16))
 >o6 : Symbol(o6, Decl(controlFlowOptionalChain.ts, 121, 13))
->f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
+>f : Symbol(f, Decl(controlFlowOptionalChain.ts, 113, 16))
 
     o6; // Derived
 >o6 : Symbol(o6, Decl(controlFlowOptionalChain.ts, 121, 13))
 
     o6.f;
->o6.f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
+>o6.f : Symbol(f, Decl(controlFlowOptionalChain.ts, 113, 16))
 >o6 : Symbol(o6, Decl(controlFlowOptionalChain.ts, 121, 13))
->f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
+>f : Symbol(f, Decl(controlFlowOptionalChain.ts, 113, 16))
 }
 else {
     o6;
 >o6 : Symbol(o6, Decl(controlFlowOptionalChain.ts, 121, 13))
 
     o6?.f;
->o6?.f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
+>o6?.f : Symbol(f, Decl(controlFlowOptionalChain.ts, 113, 16))
 >o6 : Symbol(o6, Decl(controlFlowOptionalChain.ts, 121, 13))
->f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
+>f : Symbol(f, Decl(controlFlowOptionalChain.ts, 113, 16))
 
     o6.f;
->o6.f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
 >o6 : Symbol(o6, Decl(controlFlowOptionalChain.ts, 121, 13))
->f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
 }
 o6;
 >o6 : Symbol(o6, Decl(controlFlowOptionalChain.ts, 121, 13))
 
 o6?.f;
->o6?.f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
+>o6?.f : Symbol(f, Decl(controlFlowOptionalChain.ts, 113, 16))
 >o6 : Symbol(o6, Decl(controlFlowOptionalChain.ts, 121, 13))
->f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
+>f : Symbol(f, Decl(controlFlowOptionalChain.ts, 113, 16))
 
 o6.f;
->o6.f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
 >o6 : Symbol(o6, Decl(controlFlowOptionalChain.ts, 121, 13))
->f : Symbol(Base.f, Decl(controlFlowOptionalChain.ts, 113, 16))
 
 // asserts
 declare const isDefined: <T>(value: T) => asserts value is NonNullable<T>;
@@= skipped -258, +254 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 205, 34))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 205, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (o?.["foo"] === value) {
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 205, 13))
@@= skipped -18, +16 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 205, 34))
 
         o.bar;  // Error
->o.bar : Symbol(bar, Decl(controlFlowOptionalChain.ts, 161, 36))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 205, 13))
->bar : Symbol(bar, Decl(controlFlowOptionalChain.ts, 161, 36))
     }
     if (o?.foo == value) {
 >o?.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
@@= skipped -11, +9 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 205, 34))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 205, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (o?.["foo"] == value) {
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 205, 13))
@@= skipped -18, +16 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 205, 34))
 
         o.bar;  // Error
->o.bar : Symbol(bar, Decl(controlFlowOptionalChain.ts, 161, 36))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 205, 13))
->bar : Symbol(bar, Decl(controlFlowOptionalChain.ts, 161, 36))
     }
 }
 
@@= skipped -49, +47 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 226, 35))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 226, 14))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (o?.["foo"] == value) {
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 226, 14))
@@= skipped -18, +16 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 226, 35))
 
         o.bar;  // Error
->o.bar : Symbol(bar, Decl(controlFlowOptionalChain.ts, 161, 36))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 226, 14))
->bar : Symbol(bar, Decl(controlFlowOptionalChain.ts, 161, 36))
     }
 }
 
@@= skipped -84, +82 lines =@@
 >foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 268, 14))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (o?.["foo"] !== null) {
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 268, 14))
@@= skipped -16, +14 lines =@@
 >bar : Symbol(bar, Decl(controlFlowOptionalChain.ts, 161, 36))
 
         o.bar;  // Error
->o.bar : Symbol(bar, Decl(controlFlowOptionalChain.ts, 161, 36))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 268, 14))
->bar : Symbol(bar, Decl(controlFlowOptionalChain.ts, 161, 36))
     }
     if (o?.foo != null) {
 >o?.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
@@= skipped -89, +87 lines =@@
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 301, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (o?.foo !== value) {
 >o?.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
@@= skipped -11, +9 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 301, 34))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 301, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;
@@= skipped -23, +21 lines =@@
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 301, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (o?.foo != value) {
 >o?.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
@@= skipped -11, +9 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 301, 34))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 301, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;
@@= skipped -25, +23 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 328, 35))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 328, 14))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 328, 14))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (o?.foo !== value) {
 >o?.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
@@= skipped -17, +13 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 328, 35))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 328, 14))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 328, 14))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (o?.foo == value) {
 >o?.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
@@= skipped -17, +13 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 328, 35))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 328, 14))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 328, 14))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (o?.foo != value) {
 >o?.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
@@= skipped -17, +13 lines =@@
 >value : Symbol(value, Decl(controlFlowOptionalChain.ts, 328, 35))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 328, 14))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 328, 14))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
 }
 
@@= skipped -24, +20 lines =@@
 >undefined : Symbol(undefined)
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 355, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;
@@= skipped -23, +21 lines =@@
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 355, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (o?.foo == undefined) {
 >o?.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
@@= skipped -11, +9 lines =@@
 >undefined : Symbol(undefined)
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 355, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;
@@= skipped -23, +21 lines =@@
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 355, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
 }
 
@@= skipped -113, +111 lines =@@
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 412, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (typeof o?.foo !== "number") {
 >o?.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
@@= skipped -10, +8 lines =@@
 >foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 412, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;
@@= skipped -22, +20 lines =@@
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 412, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (typeof o?.foo != "number") {
 >o?.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
@@= skipped -10, +8 lines =@@
 >foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 412, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;
@@= skipped -23, +21 lines =@@
 >foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 439, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;
@@= skipped -22, +20 lines =@@
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 439, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     if (typeof o?.foo == "undefined") {
 >o?.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
@@= skipped -10, +8 lines =@@
 >foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 439, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
     else {
         o.foo;
@@= skipped -22, +20 lines =@@
     }
     else {
         o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 439, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
     }
 }
 
@@= skipped -103, +101 lines =@@
 >undefined : Symbol(undefined)
 
             o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 488, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 
             break;
         default:
             o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 488, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 
             break;
     }
@@= skipped -41, +37 lines =@@
             break;
         case "undefined":
             o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 505, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 
             break;
         default:
             o.foo;  // Error
->o.foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 >o : Symbol(o, Decl(controlFlowOptionalChain.ts, 505, 13))
->foo : Symbol(foo, Decl(controlFlowOptionalChain.ts, 161, 14))
 
             break;
     }
@@= skipped -41, +37 lines =@@
 
         case 'circle':
             return Math.PI * shape.radius ** 2
->Math.PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
+>Math.PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
+>PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
 >shape.radius : Symbol(radius, Decl(controlFlowOptionalChain.ts, 526, 23))
 >shape : Symbol(shape, Decl(controlFlowOptionalChain.ts, 528, 17))
 >radius : Symbol(radius, Decl(controlFlowOptionalChain.ts, 526, 23))
@@= skipped -68, +68 lines =@@
 >SomeObject : Symbol(SomeObject, Decl(controlFlowOptionalChain.ts, 553, 1))
 
     someProperty: unknown;
->someProperty : Symbol(SomeObject.someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
+>someProperty : Symbol(someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
 }
 
 let lastSomeProperty: unknown | undefined;
@@= skipped -12, +12 lines =@@
 >SomeObject : Symbol(SomeObject, Decl(controlFlowOptionalChain.ts, 553, 1))
 
     if (someOptionalObject?.someProperty !== lastSomeProperty) {
->someOptionalObject?.someProperty : Symbol(SomeObject.someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
+>someOptionalObject?.someProperty : Symbol(someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
 >someOptionalObject : Symbol(someOptionalObject, Decl(controlFlowOptionalChain.ts, 563, 22))
->someProperty : Symbol(SomeObject.someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
+>someProperty : Symbol(someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
 >lastSomeProperty : Symbol(lastSomeProperty, Decl(controlFlowOptionalChain.ts, 561, 3))
 
         console.log(someOptionalObject);
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >someOptionalObject : Symbol(someOptionalObject, Decl(controlFlowOptionalChain.ts, 563, 22))
 
         console.log(someOptionalObject.someProperty);  // Error
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->someOptionalObject.someProperty : Symbol(SomeObject.someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >someOptionalObject : Symbol(someOptionalObject, Decl(controlFlowOptionalChain.ts, 563, 22))
->someProperty : Symbol(SomeObject.someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
 
         lastSomeProperty = someOptionalObject?.someProperty;
 >lastSomeProperty : Symbol(lastSomeProperty, Decl(controlFlowOptionalChain.ts, 561, 3))
->someOptionalObject?.someProperty : Symbol(SomeObject.someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
+>someOptionalObject?.someProperty : Symbol(someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
 >someOptionalObject : Symbol(someOptionalObject, Decl(controlFlowOptionalChain.ts, 563, 22))
->someProperty : Symbol(SomeObject.someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
+>someProperty : Symbol(someProperty, Decl(controlFlowOptionalChain.ts, 557, 22))
     }
 }
 
@@= skipped -69, +67 lines =@@
 >tag : Symbol(tag, Decl(controlFlowOptionalChain.ts, 581, 20))
 
         console.log("I should ALSO be reachable");
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
     }
 }
 
