--- old.wrappedAndRecursiveConstraints.symbols
+++ new.wrappedAndRecursiveConstraints.symbols
@@= skipped -5, +5 lines =@@
 class C<T extends Date> {
 >C : Symbol(C, Decl(wrappedAndRecursiveConstraints.ts, 0, 0))
 >T : Symbol(T, Decl(wrappedAndRecursiveConstraints.ts, 2, 8))
->Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))

     constructor(public data: T) { }
 >data : Symbol(C.data, Decl(wrappedAndRecursiveConstraints.ts, 3, 16))
@@= skipped -20, +20 lines =@@

 interface Foo extends Date {
 >Foo : Symbol(Foo, Decl(wrappedAndRecursiveConstraints.ts, 7, 1))
->Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))

     foo: string;
 >foo : Symbol(Foo.foo, Decl(wrappedAndRecursiveConstraints.ts, 9, 28))