--- old.symbolProperty23.symbols
+++ new.symbolProperty23.symbols
@@= skipped -4, +4 lines =@@
 >I : Symbol(I, Decl(symbolProperty23.ts, 0, 0))
 
     [Symbol.toPrimitive]: () => boolean;
->[Symbol.toPrimitive] : Symbol(I[Symbol.toPrimitive], Decl(symbolProperty23.ts, 0, 13))
->Symbol.toPrimitive : Symbol(SymbolConstructor.toPrimitive, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->toPrimitive : Symbol(SymbolConstructor.toPrimitive, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>[Symbol.toPrimitive] : Symbol([Symbol.toPrimitive], Decl(symbolProperty23.ts, 0, 13))
 }
 
 class C implements I {
@@= skipped -11, +8 lines =@@
 >I : Symbol(I, Decl(symbolProperty23.ts, 0, 0))
 
     [Symbol.toPrimitive]() {
->[Symbol.toPrimitive] : Symbol(C[Symbol.toPrimitive], Decl(symbolProperty23.ts, 4, 22))
->Symbol.toPrimitive : Symbol(SymbolConstructor.toPrimitive, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->toPrimitive : Symbol(SymbolConstructor.toPrimitive, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>[Symbol.toPrimitive] : Symbol([Symbol.toPrimitive], Decl(symbolProperty23.ts, 4, 22))
 
         return true;
     }
