//// [tests/cases/conformance/classes/members/privateNames/privateNameAccessorssDerivedClasses.ts] ////

=== privateNameAccessorssDerivedClasses.ts ===
class Base {
>Base : Symbol(Base, Decl(privateNameAccessorssDerivedClasses.ts, 0, 0))

    get #prop(): number { return  123; }
>#prop : Symbol(#prop, Decl(privateNameAccessorssDerivedClasses.ts, 0, 12))

    static method(x: Derived) {
>method : Symbol(method, Decl(privateNameAccessorssDerivedClasses.ts, 1, 40))
>x : Symbol(x, Decl(privateNameAccessorssDerivedClasses.ts, 2, 18))
>Derived : Symbol(Derived, Decl(privateNameAccessorssDerivedClasses.ts, 5, 1))

        console.log(x.#prop);
>x.#prop : Symbol(#prop, Decl(privateNameAccessorssDerivedClasses.ts, 0, 12))
>x : Symbol(x, Decl(privateNameAccessorssDerivedClasses.ts, 2, 18))
    }
}
class Derived extends Base {
>Derived : Symbol(Derived, Decl(privateNameAccessorssDerivedClasses.ts, 5, 1))
>Base : Symbol(Base, Decl(privateNameAccessorssDerivedClasses.ts, 0, 0))

    static method(x: Derived) {
>method : Symbol(method, Decl(privateNameAccessorssDerivedClasses.ts, 6, 28))
>x : Symbol(x, Decl(privateNameAccessorssDerivedClasses.ts, 7, 18))
>Derived : Symbol(Derived, Decl(privateNameAccessorssDerivedClasses.ts, 5, 1))

        console.log(x.#prop);
>x : Symbol(x, Decl(privateNameAccessorssDerivedClasses.ts, 7, 18))
    }
}

