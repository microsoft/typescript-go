--- old.iterableArrayPattern17.symbols
+++ new.iterableArrayPattern17.symbols
@@= skipped -2, +2 lines =@@
 === iterableArrayPattern17.ts ===
 class Bar { x }
 >Bar : Symbol(Bar, Decl(iterableArrayPattern17.ts, 0, 0))
->x : Symbol(Bar.x, Decl(iterableArrayPattern17.ts, 0, 11))
+>x : Symbol(x, Decl(iterableArrayPattern17.ts, 0, 11))
 
 class Foo extends Bar { y }
 >Foo : Symbol(Foo, Decl(iterableArrayPattern17.ts, 0, 15))
 >Bar : Symbol(Bar, Decl(iterableArrayPattern17.ts, 0, 0))
->y : Symbol(Foo.y, Decl(iterableArrayPattern17.ts, 1, 23))
+>y : Symbol(y, Decl(iterableArrayPattern17.ts, 1, 23))
 
 class FooIterator {
 >FooIterator : Symbol(FooIterator, Decl(iterableArrayPattern17.ts, 1, 27))
 
     next() {
->next : Symbol(FooIterator.next, Decl(iterableArrayPattern17.ts, 2, 19))
+>next : Symbol(next, Decl(iterableArrayPattern17.ts, 2, 19))
 
         return {
             value: new Foo,
@@= skipped -25, +25 lines =@@
     }
 
     [Symbol.iterator]() {
->[Symbol.iterator] : Symbol(FooIterator[Symbol.iterator], Decl(iterableArrayPattern17.ts, 8, 5))
->Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(iterableArrayPattern17.ts, 8, 5))
+>Symbol.iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 
         return this;
 >this : Symbol(FooIterator, Decl(iterableArrayPattern17.ts, 1, 27))
