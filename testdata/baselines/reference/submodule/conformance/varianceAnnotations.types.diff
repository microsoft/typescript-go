--- old.varianceAnnotations.types
+++ new.varianceAnnotations.types
@@= skipped -2, +2 lines =@@
 === varianceAnnotations.ts ===
 type Covariant<out T> = {
 >Covariant : Covariant<T>
+>T : T
 
     x: T;
 >x : T
@@= skipped -23, +24 lines =@@
 
 type Contravariant<in T> = {
 >Contravariant : Contravariant<T>
+>T : T
 
     f: (x: T) => void;
 >f : (x: T) => void
@@= skipped -24, +25 lines =@@
 
 type Invariant<in out T> = {
 >Invariant : Invariant<T>
+>T : T
 
     f: (x: T) => T;
 >f : (x: T) => T
@@= skipped -26, +27 lines =@@
 
 type T10<out T> = T;
 >T10 : T
+>T : T
 
 type T11<in T> = keyof T;
 >T11 : keyof T
+>T : T
 
 type T12<out T, out K extends keyof T> = T[K];
 >T12 : T12<T, K>
+>T : T
+>K : K
 
 type T13<in out T> = T[keyof T];
 >T13 : T13<T>
+>T : T
 
 // Variance annotation errors
 
 type Covariant1<in T> = {  // Error
 >Covariant1 : Covariant1<T>
+>T : T
 
     x: T;
 >x : T
@@= skipped -21, +27 lines =@@
 
 type Contravariant1<out T> = keyof T;  // Error
 >Contravariant1 : keyof T
+>T : T
 
 type Contravariant2<out T> = {  // Error
 >Contravariant2 : Contravariant2<T>
+>T : T
 
     f: (x: T) => void;
 >f : (x: T) => void
@@= skipped -11, +13 lines =@@
 
 type Invariant1<in T> = {  // Error
 >Invariant1 : Invariant1<T>
+>T : T
 
     f: (x: T) => T;
 >f : (x: T) => T
@@= skipped -8, +9 lines =@@
 
 type Invariant2<out T> = {  // Error
 >Invariant2 : Invariant2<T>
+>T : T
 
     f: (x: T) => T;
 >f : (x: T) => T
@@= skipped -10, +11 lines =@@
 
 type Foo1<in T> = {  // Error
 >Foo1 : Foo1<T>
+>T : T
 
     x: T;
 >x : T
@@= skipped -10, +11 lines =@@
 
 type FooFn1<T> = (foo: Bar1<T[]>) => void;
 >FooFn1 : FooFn1<T>
+>T : T
 >foo : Bar1<T[]>
 
 type Bar1<T> = {
 >Bar1 : Bar1<T>
+>T : T
 
     value: Foo1<T[]>;
 >value : Foo1<T[]>
@@= skipped -11, +13 lines =@@
 
 type Foo2<out T> = {  // Error
 >Foo2 : Foo2<T>
+>T : T
 
     x: T;
 >x : T
@@= skipped -10, +11 lines =@@
 
 type FooFn2<T> = (foo: Bar2<T[]>) => void;
 >FooFn2 : FooFn2<T>
+>T : T
 >foo : Bar2<T[]>
 
 type Bar2<T> = {
 >Bar2 : Bar2<T>
+>T : T
 
     value: Foo2<T[]>;
 >value : Foo2<T[]>
@@= skipped -11, +13 lines =@@
 
 type Foo3<in out T> = {
 >Foo3 : Foo3<T>
+>T : T
 
     x: T;
 >x : T
@@= skipped -10, +11 lines =@@
 
 type FooFn3<T> = (foo: Bar3<T[]>) => void;
 >FooFn3 : FooFn3<T>
+>T : T
 >foo : Bar3<T[]>
 
 type Bar3<T> = {
 >Bar3 : Bar3<T>
+>T : T
 
     value: Foo3<T[]>;
 >value : Foo3<T[]>
@@= skipped -13, +15 lines =@@
 
 type T20<public T> = T;  // Error
 >T20 : T
+>T : T
 
 type T21<in out in T> = T;  // Error
 >T21 : T
+>T : T
 
 type T22<in out out T> = T;  // Error
 >T22 : T
+>T : T
 
 type T23<out in T> = T;  // Error
 >T23 : T
+>T : T
 
 declare function f1<in T>(x: T): void;  // Error
->f1 : <in T>(x: T) => void
+>f1 : <T>(x: T) => void
+>T : T
 >x : T
 
 declare function f2<out T>(): T;  // Error
->f2 : <out T>() => T
+>f2 : <T>() => T
+>T : T
 
 class C {
 >C : C
@@= skipped -32, +38 lines =@@
 // Interface merging
 
 interface Baz<out T> {}
+>Baz : Baz<T>
+>T : T
+
 interface Baz<in T> {}
+>Baz : Baz<T>
+>T : T
 
 declare let baz1: Baz<unknown>;
 >baz1 : Baz<unknown>
@@= skipped -21, +26 lines =@@
 // Repro from #44572
 
 interface Parent<out A> {
+>Parent : Parent<A>
+>A : A
+
     child: Child<A> | null;
 >child : Child<A, unknown> | null
 
@@= skipped -8, +11 lines =@@
 }
 
 interface Child<A, B = unknown> extends Parent<A> {
+>Child : Child<A, B>
+>A : A
+>B : B
+
     readonly a: A;
 >a : A
 
@@= skipped -8, +12 lines =@@
 }
 
 function fn<A>(inp: Child<A>) {
->fn : <A>(inp: Child<A>) => void
+>fn : <A>(inp: Child<A, unknown>) => void
+>A : A
 >inp : Child<A, unknown>
 
     const a: Child<unknown> = inp;
@@= skipped -29, +30 lines =@@
 
 declare class StateNode<TContext, in out TEvent extends { type: string }> {
 >StateNode : StateNode<TContext, TEvent>
+>TContext : TContext
+>TEvent : TEvent
 >type : string
 
     _storedEvent: TEvent;
@@= skipped -13, +15 lines =@@
 }
 
 interface ActionObject<TEvent extends { type: string }> {
+>ActionObject : ActionObject<TEvent>
+>TEvent : TEvent
 >type : string
 
     exec: (meta: StateNode<any, TEvent>) => void;
@@= skipped -9, +11 lines =@@
 
 declare function createMachine<TEvent extends { type: string }>(action: ActionObject<TEvent>): StateNode<any, any>;
 >createMachine : <TEvent extends { type: string; }>(action: ActionObject<TEvent>) => StateNode<any, any>
+>TEvent : TEvent
 >type : string
 >action : ActionObject<TEvent>
 
 declare function interpret<TContext>(machine: StateNode<TContext, any>): void;
 >interpret : <TContext>(machine: StateNode<TContext, any>) => void
+>TContext : TContext
 >machine : StateNode<TContext, any>
 
 const machine = createMachine({} as any);
@@= skipped -37, +39 lines =@@
 let Anon = class <out T> {
 >Anon : typeof Anon
 >class <out T> {    foo(): InstanceType<(typeof Anon<T>)> {        return this;    }} : typeof Anon
+>T : T
 
     foo(): InstanceType<(typeof Anon<T>)> {
->foo : () => InstanceType<(typeof Anon<T>)>
->Anon : typeof Anon
+>foo : () => Anon<T>
 
         return this;
 >this : this
@@= skipped -14, +14 lines =@@
 >OuterC : typeof C
 >class C<out T> {    foo(): C<T> {        return this;    }} : typeof C
 >C : typeof C
+>T : T
 
     foo(): C<T> {
 >foo : () => C<T>
