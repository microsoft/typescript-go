--- old.variadicTuples1.js
+++ new.variadicTuples1.js
@@= skipped -425, +425 lines =@@


 //// [variadicTuples1.js]
-"use strict";
-// Variadics in tuple types
 // Variadics in array literals
 function tup2(t, u) {
     return [1, ...t, 2, ...u, 3];
@@= skipped -318, +316 lines =@@
 type R36 = DropLast<readonly []>;
 declare function curry<T extends unknown[], U extends unknown[], R>(f: (...args: [...T, ...U]) => R, ...a: T): (...b: U) => R;
 declare const fn1: (a: number, b: string, c: boolean, d: string[]) => number;
-declare const c0: (a: number, b: string, c: boolean, d: string[]) => number;
-declare const c1: (b: string, c: boolean, d: string[]) => number;
-declare const c2: (c: boolean, d: string[]) => number;
-declare const c3: (d: string[]) => number;
-declare const c4: () => number;
+declare const c0: (...b: [a: number, b: string, c: boolean, d: string[]]) => number;
+declare const c1: (...b: [b: string, c: boolean, d: string[]]) => number;
+declare const c2: (...b: [c: boolean, d: string[]]) => number;
+declare const c3: (...b: [d: string[]]) => number;
+declare const c4: (...b: []) => number;
 declare const fn2: (x: number, b: boolean, ...args: string[]) => number;
-declare const c10: (x: number, b: boolean, ...args: string[]) => number;
-declare const c11: (b: boolean, ...args: string[]) => number;
+declare const c10: (...b: [x: number, b: boolean, ...args: string[]]) => number;
+declare const c11: (...b: [b: boolean, ...args: string[]]) => number;
 declare const c12: (...b: string[]) => number;
 declare const c13: (...b: string[]) => number;
 declare const fn3: (...args: string[]) => number;