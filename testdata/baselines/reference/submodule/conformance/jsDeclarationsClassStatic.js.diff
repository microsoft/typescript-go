--- old.jsDeclarationsClassStatic.js
+++ new.jsDeclarationsClassStatic.js
@@= skipped -25, +25 lines =@@


 //// [source.js]
-var Handler = /** @class */ (function () {
-    function Handler() {
-    }
-    Object.defineProperty(Handler, "OPTIONS", {
-        get: function () {
-            return 1;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    Handler.prototype.process = function () {
-    };
-    return Handler;
-}());
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+class Handler {
+    static get OPTIONS() {
+        return 1;
+    }
+    process() {
+    }
+}
 Handler.statische = function () { };
-var Strings = {
+const Strings = {
     a: "A",
     b: "B"
 };
+export = Handler;
 module.exports = Handler;
+export var Strings = Strings;
 module.exports.Strings = Strings;
 /**
  * @typedef {Object} HandlerOptions
@@= skipped -30, +27 lines =@@

 //// [source.d.ts]
 export = Handler;
-declare class Handler {
-    static get OPTIONS(): number;
-    process(): void;
-}
-declare namespace Handler {
-    export { statische, Strings, HandlerOptions };
-}
-declare function statische(): void;
-declare namespace Strings {
-    let a: string;
-    let b: string;
-}
-type HandlerOptions = {
-    /**
-     * Should be able to export a type alias at the same time.
-     */
-    name: string;
+export var Strings = Strings;
+export type HandlerOptions = {
+    name: String;
 };
+/**
+ * @typedef {Object} HandlerOptions
+ * @property {String} name
+ * Should be able to export a type alias at the same time.
+ */