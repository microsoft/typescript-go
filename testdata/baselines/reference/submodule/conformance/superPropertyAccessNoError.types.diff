--- old.superPropertyAccessNoError.types
+++ new.superPropertyAccessNoError.types
@@= skipped -10, +10 lines =@@
 
 class SomeBaseClass {
 >SomeBaseClass : SomeBaseClass
->              : ^^^^^^^^^^^^^
 
     public func() {
 >func : () => string
->     : ^^^^^^^^^^^^
 
         return '';
 >'' : ""
->   : ^^
     }
 
     static func() {
 >func : () => number
->     : ^^^^^^^^^^^^
 
         return 3;
 >3 : 3
->  : ^
     }
 
     returnThis() {
 >returnThis : () => this
->           : ^^^^^^^^^^
 
         return this;
 >this : this
->     : ^^^^
     }
 }
 
 class SomeDerivedClass extends SomeBaseClass {
 >SomeDerivedClass : SomeDerivedClass
->                 : ^^^^^^^^^^^^^^^^
 >SomeBaseClass : SomeBaseClass
->              : ^^^^^^^^^^^^^
 
     constructor() {
         super();
 >super() : void
->        : ^^^^
 >super : typeof SomeBaseClass
->      : ^^^^^^^^^^^^^^^^^^^^
 
         var x = super.func();
 >x : string
->  : ^^^^^^
 >super.func() : string
->             : ^^^^^^
 >super.func : () => string
->           : ^^^^^^^^^^^^
 >super : SomeBaseClass
->      : ^^^^^^^^^^^^^
 >func : () => string
->     : ^^^^^^^^^^^^
 
         var x: string;
 >x : string
->  : ^^^^^^
     }
 
     fn() {
 >fn : () => void
->   : ^^^^^^^^^^
 
         var x = super.func();
 >x : string
->  : ^^^^^^
 >super.func() : string
->             : ^^^^^^
 >super.func : () => string
->           : ^^^^^^^^^^^^
 >super : SomeBaseClass
->      : ^^^^^^^^^^^^^
 >func : () => string
->     : ^^^^^^^^^^^^
 
         var x: string;
 >x : string
->  : ^^^^^^
 
         var y = () => super.func();
 >y : () => string
->  : ^^^^^^^^^^^^
 >() => super.func() : () => string
->                   : ^^^^^^^^^^^^
 >super.func() : string
->             : ^^^^^^
 >super.func : () => string
->           : ^^^^^^^^^^^^
 >super : SomeBaseClass
->      : ^^^^^^^^^^^^^
 >func : () => string
->     : ^^^^^^^^^^^^
     }
 
     get a() {
@@= skipped -100, +70 lines =@@
 
         var x = super.func();
 >x : string
->  : ^^^^^^
 >super.func() : string
->             : ^^^^^^
 >super.func : () => string
->           : ^^^^^^^^^^^^
 >super : SomeBaseClass
->      : ^^^^^^^^^^^^^
 >func : () => string
->     : ^^^^^^^^^^^^
 
         var x: string;
 >x : string
->  : ^^^^^^
 
         return null;
     }
@@= skipped -23, +17 lines =@@
 
         var x = super.func();
 >x : string
->  : ^^^^^^
 >super.func() : string
->             : ^^^^^^
 >super.func : () => string
->           : ^^^^^^^^^^^^
 >super : SomeBaseClass
->      : ^^^^^^^^^^^^^
 >func : () => string
->     : ^^^^^^^^^^^^
 
         var x: string;
 >x : string
->  : ^^^^^^
     }
 
     static fn() {
 >fn : () => void
->   : ^^^^^^^^^^
 
         var x = super.func();
 >x : number
->  : ^^^^^^
 >super.func() : number
->             : ^^^^^^
 >super.func : () => number
->           : ^^^^^^^^^^^^
 >super : typeof SomeBaseClass
->      : ^^^^^^^^^^^^^^^^^^^^
 >func : () => number
->     : ^^^^^^^^^^^^
 
         var x: number;
 >x : number
->  : ^^^^^^
     }
 
     static get a() {
@@= skipped -41, +28 lines =@@
 
         var x = super.func();
 >x : number
->  : ^^^^^^
 >super.func() : number
->             : ^^^^^^
 >super.func : () => number
->           : ^^^^^^^^^^^^
 >super : typeof SomeBaseClass
->      : ^^^^^^^^^^^^^^^^^^^^
 >func : () => number
->     : ^^^^^^^^^^^^
 
         var x: number;
 >x : number
->  : ^^^^^^
 
         return null;
     }
@@= skipped -23, +17 lines =@@
 
         var x = super.func();
 >x : number
->  : ^^^^^^
 >super.func() : number
->             : ^^^^^^
 >super.func : () => number
->           : ^^^^^^^^^^^^
 >super : typeof SomeBaseClass
->      : ^^^^^^^^^^^^^^^^^^^^
 >func : () => number
->     : ^^^^^^^^^^^^
 
         var x: number;
 >x : number
->  : ^^^^^^
     }
 
     returnThis() {
 >returnThis : () => this
->           : ^^^^^^^^^^
 
         return super.returnThis();
 >super.returnThis() : this
->                   : ^^^^
 >super.returnThis : () => this
->                 : ^^^^^^^^^^
 >super : SomeBaseClass
->      : ^^^^^^^^^^^^^
 >returnThis : () => this
->           : ^^^^^^^^^^
     }
 }
 
 let instance = new SomeDerivedClass();
 >instance : SomeDerivedClass
->         : ^^^^^^^^^^^^^^^^
 >new SomeDerivedClass() : SomeDerivedClass
->                       : ^^^^^^^^^^^^^^^^
 >SomeDerivedClass : typeof SomeDerivedClass
->                 : ^^^^^^^^^^^^^^^^^^^^^^^
 
 instance.returnThis().fn();
 >instance.returnThis().fn() : void
->                           : ^^^^
 >instance.returnThis().fn : () => void
->                         : ^^^^^^^^^^
 >instance.returnThis() : SomeDerivedClass
->                      : ^^^^^^^^^^^^^^^^
 >instance.returnThis : () => SomeDerivedClass
->                    : ^^^^^^^^^^^^^^^^^^^^^^
 >instance : SomeDerivedClass
->         : ^^^^^^^^^^^^^^^^
 >returnThis : () => SomeDerivedClass
->           : ^^^^^^^^^^^^^^^^^^^^^^
 >fn : () => void
->   : ^^^^^^^^^^
 
