--- old.templateLiteralTypes3.types
+++ new.templateLiteralTypes3.types
@@= skipped -4, +4 lines =@@
 
 type Foo1<T> = T extends `*${infer U}*` ? U : never;
 >Foo1 : Foo1<T>
+>T : T
+>U : U
 
 type T01 = Foo1<'hello'>;
 >T01 : never
@@= skipped -36, +38 lines =@@
 
 declare function foo1<V extends string>(arg: `*${V}*`): V;
 >foo1 : <V extends string>(arg: `*${V}*`) => V
+>V : V
 >arg : `*${V}*`
 
 function f1<T extends string>(s: string, n: number, b: boolean, t: T) {
 >f1 : <T extends string>(s: string, n: number, b: boolean, t: T) => void
+>T : T
 >s : string
 >n : number
 >b : boolean
@@= skipped -73, +75 lines =@@
 
 type Parts<T> =
 >Parts : Parts<T>
+>T : T
 
     T extends '' ? [] :
     T extends `${infer Head}${infer Tail}` ? [Head, ...Parts<Tail>] :
+>Head : Head
+>Tail : Tail
+
     never;
 
 type T20 = Parts<`abc`>;
@@= skipped -73, +77 lines =@@
 
 function f3<T extends string>(s: string, n: number, b: boolean, t: T) {
 >f3 : <T extends string>(s: string, n: number, b: boolean, t: T) => void
+>T : T
 >s : string
 >n : number
 >b : boolean
@@= skipped -61, +62 lines =@@
 
 function f4<T extends number>(s: string, n: number, b: boolean, t: T) {
 >f4 : <T extends number>(s: string, n: number, b: boolean, t: T) => void
+>T : T
 >s : string
 >n : number
 >b : boolean
@@= skipped -56, +57 lines =@@
 
 type A<T> = T extends `${infer U}.${infer V}` ? U | V : never
 >A : A<T>
+>T : T
+>U : U
+>V : V
 
 type B = A<`test.1024`>;  // "test" | "1024"
->B : "test" | "1024"
+>B : "1024" | "test"
 
 type C = A<`test.${number}`>;  // "test" | `${number}`
->C : `${number}` | "test"
+>C : "test" | `${number}`
 
 type D<T> = T extends `${infer U}.${number}` ? U : never
 >D : D<T>
+>T : T
+>U : U
 
 type E = D<`test.1024`>;  // "test"
 >E : "test"
@@= skipped -18, +23 lines =@@
 
 type G<T> = T extends `${infer U}.${infer V}` ? U | V : never
 >G : G<T>
+>T : T
+>U : U
+>V : V
 
 type H = G<`test.hoge`>;  // "test" | "hoge"
->H : "test" | "hoge"
+>H : "hoge" | "test"
 
 type I = G<`test.${string}`>;  // string ("test" | string reduces to string)
 >I : string
 
 type J<T> = T extends `${infer U}.${string}` ? U : never
 >J : J<T>
+>T : T
+>U : U
 
 type K = J<`test.hoge`>;  // "test"
 >K : "test"
@@= skipped -53, +58 lines =@@
 
 type PrefixData<P extends Prefixes> = `${P}:baz`;
 >PrefixData : `${P}:baz`
+>P : P
 
 interface ITest<P extends Prefixes, E extends AllPrefixData = PrefixData<P>> {
+>ITest : ITest<P, E>
+>P : P
+>E : E
+
     blah: string;
 >blah : string
 }
@@= skipped -15, +20 lines =@@
 >c : number
 
 declare function chain<F extends keyof Schema>(field: F | `${F}.${F}`): void;
->chain : <F extends keyof Schema>(field: F | `${F}.${F}`) => void
+>chain : <F extends "a">(field: F | `${F}.${F}`) => void
+>F : F
 >field : F | `${F}.${F}`
 
 chain("a");
 >chain("a") : void
->chain : <F extends keyof Schema>(field: F | `${F}.${F}`) => void
+>chain : <F extends "a">(field: F | `${F}.${F}`) => void
 >"a" : "a"
 
 // Repro from #46125
@@= skipped -33, +34 lines =@@
 
 function ff2<T extends string>(x: `foo-${T}`, y: `${T}-bar`, z: `baz-${T}`) {
 >ff2 : <T extends string>(x: `foo-${T}`, y: `${T}-bar`, z: `baz-${T}`) => void
+>T : T
 >x : `foo-${T}`
 >y : `${T}-bar`
 >z : `baz-${T}`
@@= skipped -20, +21 lines =@@
 }
 
 function ff3(x: string, y: `foo-${string}` | 'bar') {
->ff3 : (x: string, y: `foo-${string}` | "bar") => void
+>ff3 : (x: string, y: "bar" | `foo-${string}`) => void
 >x : string
 >y : "bar" | `foo-${string}`
 
@@= skipped -78, +78 lines =@@
 >DotString : `${string}.${string}.${string}`
 
 declare function noSpread<P extends DotString>(args: P[]): P;
->noSpread : <P extends DotString>(args: P[]) => P
+>noSpread : <P extends `${string}.${string}.${string}`>(args: P[]) => P
+>P : P
 >args : P[]
 
 declare function spread<P extends DotString>(...args: P[]): P;
->spread : <P extends DotString>(...args: P[]) => P
+>spread : <P extends `${string}.${string}.${string}`>(...args: P[]) => P
+>P : P
 >args : P[]
 
 noSpread([`1.${'2'}.3`, `1.${'2'}.4`]);
 >noSpread([`1.${'2'}.3`, `1.${'2'}.4`]) : "1.2.3" | "1.2.4"
->noSpread : <P extends DotString>(args: P[]) => P
+>noSpread : <P extends `${string}.${string}.${string}`>(args: P[]) => P
 >[`1.${'2'}.3`, `1.${'2'}.4`] : ("1.2.3" | "1.2.4")[]
 >`1.${'2'}.3` : "1.2.3"
 >'2' : "2"
@@= skipped -18, +20 lines =@@
 
 noSpread([`1.${'2' as string}.3`, `1.${'2' as string}.4`]);
 >noSpread([`1.${'2' as string}.3`, `1.${'2' as string}.4`]) : `1.${string}.3` | `1.${string}.4`
->noSpread : <P extends DotString>(args: P[]) => P
+>noSpread : <P extends `${string}.${string}.${string}`>(args: P[]) => P
 >[`1.${'2' as string}.3`, `1.${'2' as string}.4`] : (`1.${string}.3` | `1.${string}.4`)[]
 >`1.${'2' as string}.3` : `1.${string}.3`
 >'2' as string : string
@@= skipped -11, +11 lines =@@
 
 spread(`1.${'2'}.3`, `1.${'2'}.4`);
 >spread(`1.${'2'}.3`, `1.${'2'}.4`) : "1.2.3" | "1.2.4"
->spread : <P extends DotString>(...args: P[]) => P
+>spread : <P extends `${string}.${string}.${string}`>(...args: P[]) => P
 >`1.${'2'}.3` : "1.2.3"
 >'2' : "2"
 >`1.${'2'}.4` : "1.2.4"
@@= skipped -8, +8 lines =@@
 
 spread(`1.${'2' as string}.3`, `1.${'2' as string}.4`);
 >spread(`1.${'2' as string}.3`, `1.${'2' as string}.4`) : `1.${string}.3` | `1.${string}.4`
->spread : <P extends DotString>(...args: P[]) => P
+>spread : <P extends `${string}.${string}.${string}`>(...args: P[]) => P
 >`1.${'2' as string}.3` : `1.${string}.3`
 >'2' as string : string
 >'2' : "2"
@@= skipped -9, +9 lines =@@
 >'2' : "2"
 
 function ft1<T extends string>(t: T, u: Uppercase<T>, u1: Uppercase<`1.${T}.3`>, u2: Uppercase<`1.${T}.4`>) {
->ft1 : <T extends string>(t: T, u: Uppercase<T>, u1: Uppercase<`1.${T}.3`>, u2: Uppercase<`1.${T}.4`>) => void
+>ft1 : <T extends string>(t: T, u: Uppercase<T>, u1: `1.${Uppercase<T>}.3`, u2: `1.${Uppercase<T>}.4`) => void
+>T : T
 >t : T
 >u : Uppercase<T>
 >u1 : `1.${Uppercase<T>}.3`
@@= skipped -8, +9 lines =@@
 
     spread(`1.${t}.3`, `1.${t}.4`);
 >spread(`1.${t}.3`, `1.${t}.4`) : `1.${T}.3` | `1.${T}.4`
->spread : <P extends DotString>(...args: P[]) => P
+>spread : <P extends `${string}.${string}.${string}`>(...args: P[]) => P
 >`1.${t}.3` : `1.${T}.3`
 >t : T
 >`1.${t}.4` : `1.${T}.4`
@@= skipped -8, +8 lines =@@
 
     spread(`1.${u}.3`, `1.${u}.4`);
 >spread(`1.${u}.3`, `1.${u}.4`) : `1.${Uppercase<T>}.3` | `1.${Uppercase<T>}.4`
->spread : <P extends DotString>(...args: P[]) => P
+>spread : <P extends `${string}.${string}.${string}`>(...args: P[]) => P
 >`1.${u}.3` : `1.${Uppercase<T>}.3`
 >u : Uppercase<T>
 >`1.${u}.4` : `1.${Uppercase<T>}.4`
@@= skipped -8, +8 lines =@@
 
     spread(u1, u2);
 >spread(u1, u2) : `1.${Uppercase<T>}.3` | `1.${Uppercase<T>}.4`
->spread : <P extends DotString>(...args: P[]) => P
+>spread : <P extends `${string}.${string}.${string}`>(...args: P[]) => P
 >u1 : `1.${Uppercase<T>}.3`
 >u2 : `1.${Uppercase<T>}.4`
 }
@@= skipped -14, +14 lines =@@
 
 function a<T extends {id: string}>() {
 >a : <T extends { id: string; }>() => void
+>T : T
 >id : string
 
     let x: keyof T & string | `-${keyof T & string}`;
->x : (keyof T & string) | `-${keyof T & string}`
+>x : keyof T & string | `-${keyof T & string}`
 
     x = "id";
 >x = "id" : "id"
->x : (keyof T & string) | `-${keyof T & string}`
+>x : keyof T & string | `-${keyof T & string}`
 >"id" : "id"
 
     x = "-id";
 >x = "-id" : "-id"
->x : (keyof T & string) | `-${keyof T & string}`
+>x : keyof T & string | `-${keyof T & string}`
 >"-id" : "-id"
 }
 
