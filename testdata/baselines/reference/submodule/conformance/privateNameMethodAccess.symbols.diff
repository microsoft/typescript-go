--- old.privateNameMethodAccess.symbols
+++ new.privateNameMethodAccess.symbols
@@= skipped -4, +4 lines =@@
 >A2 : Symbol(A2, Decl(privateNameMethodAccess.ts, 0, 0))
 
     #method() { return "" }
->#method : Symbol(A2.#method, Decl(privateNameMethodAccess.ts, 0, 10))
+>#method : Symbol(#method, Decl(privateNameMethodAccess.ts, 0, 10))
 
     constructor() {
         console.log(this.#method);
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->this.#method : Symbol(A2.#method, Decl(privateNameMethodAccess.ts, 0, 10))
+>this.#method : Symbol(#method, Decl(privateNameMethodAccess.ts, 0, 10))
 >this : Symbol(A2, Decl(privateNameMethodAccess.ts, 0, 0))
 
         let a: A2 = this;
@@= skipped -16, +13 lines =@@
 >this : Symbol(A2, Decl(privateNameMethodAccess.ts, 0, 0))
 
         a.#method();
->a.#method : Symbol(A2.#method, Decl(privateNameMethodAccess.ts, 0, 10))
+>a.#method : Symbol(#method, Decl(privateNameMethodAccess.ts, 0, 10))
 >a : Symbol(a, Decl(privateNameMethodAccess.ts, 4, 11))
 
         function  foo (){
 >foo : Symbol(foo, Decl(privateNameMethodAccess.ts, 5, 20))
 
             a.#method();
->a.#method : Symbol(A2.#method, Decl(privateNameMethodAccess.ts, 0, 10))
+>a.#method : Symbol(#method, Decl(privateNameMethodAccess.ts, 0, 10))
 >a : Symbol(a, Decl(privateNameMethodAccess.ts, 4, 11))
         }
     }
@@= skipped -26, +26 lines =@@
 >B2 : Symbol(B2, Decl(privateNameMethodAccess.ts, 15, 1))
 
     m() {
->m : Symbol(B2.m, Decl(privateNameMethodAccess.ts, 17, 10))
+>m : Symbol(m, Decl(privateNameMethodAccess.ts, 17, 10))
 
         new A2().#method();
 >A2 : Symbol(A2, Decl(privateNameMethodAccess.ts, 0, 0))
