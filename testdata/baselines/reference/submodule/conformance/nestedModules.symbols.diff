--- old.nestedModules.symbols
+++ new.nestedModules.symbols
@@= skipped -2, +2 lines =@@
 === nestedModules.ts ===
 module A.B.C {
 >A : Symbol(A, Decl(nestedModules.ts, 0, 0), Decl(nestedModules.ts, 5, 1))
->B : Symbol(B, Decl(nestedModules.ts, 0, 9), Decl(nestedModules.ts, 7, 10))
+>B : Symbol(B, Decl(nestedModules.ts, 0, 9))
 >C : Symbol(C, Decl(nestedModules.ts, 0, 11))
 
     export interface Point {
 >Point : Symbol(Point, Decl(nestedModules.ts, 0, 14))
 
         x: number;
->x : Symbol(Point.x, Decl(nestedModules.ts, 1, 28))
+>x : Symbol(x, Decl(nestedModules.ts, 1, 28))
 
         y: number;
->y : Symbol(Point.y, Decl(nestedModules.ts, 2, 18))
+>y : Symbol(y, Decl(nestedModules.ts, 2, 18))
     }
 }
 
@@= skipped -18, +18 lines =@@
 >A : Symbol(A, Decl(nestedModules.ts, 0, 0), Decl(nestedModules.ts, 5, 1))
 
     export module B {
->B : Symbol(B, Decl(nestedModules.ts, 0, 9), Decl(nestedModules.ts, 7, 10))
+>B : Symbol(B, Decl(nestedModules.ts, 7, 10))
 
         var Point: C.Point = { x: 0, y: 0 }; // bug 832088: could not find module 'C'
 >Point : Symbol(Point, Decl(nestedModules.ts, 9, 11))
->C : Symbol(C, Decl(nestedModules.ts, 0, 11))
->Point : Symbol(C.Point, Decl(nestedModules.ts, 0, 14))
+>C : Symbol(C)
+>Point : Symbol(Point)
 >x : Symbol(x, Decl(nestedModules.ts, 9, 30))
 >y : Symbol(y, Decl(nestedModules.ts, 9, 36))
     }
@@= skipped -13, +13 lines =@@
 
 module M2.X {
 >M2 : Symbol(M2, Decl(nestedModules.ts, 11, 1), Decl(nestedModules.ts, 17, 1))
->X : Symbol(X, Decl(nestedModules.ts, 13, 10), Decl(nestedModules.ts, 19, 11))
+>X : Symbol(X, Decl(nestedModules.ts, 13, 10))
 
     export interface Point {
->Point : Symbol(Point, Decl(nestedModules.ts, 13, 13), Decl(nestedModules.ts, 21, 18))
+>Point : Symbol(Point, Decl(nestedModules.ts, 13, 13))
 
         x: number; y: number;
->x : Symbol(Point.x, Decl(nestedModules.ts, 14, 28))
->y : Symbol(Point.y, Decl(nestedModules.ts, 15, 18))
+>x : Symbol(x, Decl(nestedModules.ts, 14, 28))
+>y : Symbol(y, Decl(nestedModules.ts, 15, 18))
     }
 }
 
@@= skipped -15, +15 lines =@@
 >M2 : Symbol(M2, Decl(nestedModules.ts, 11, 1), Decl(nestedModules.ts, 17, 1))
 
     export module X {
->X : Symbol(X, Decl(nestedModules.ts, 13, 10), Decl(nestedModules.ts, 19, 11))
+>X : Symbol(X, Decl(nestedModules.ts, 19, 11))
 
         export var Point: number;
->Point : Symbol(Point, Decl(nestedModules.ts, 13, 13), Decl(nestedModules.ts, 21, 18))
+>Point : Symbol(Point, Decl(nestedModules.ts, 21, 18))
     }
 }
 
 var m = M2.X;
 >m : Symbol(m, Decl(nestedModules.ts, 25, 3))
->M2.X : Symbol(M2.X, Decl(nestedModules.ts, 13, 10), Decl(nestedModules.ts, 19, 11))
+>M2.X : Symbol(X, Decl(nestedModules.ts, 19, 11))
 >M2 : Symbol(M2, Decl(nestedModules.ts, 11, 1), Decl(nestedModules.ts, 17, 1))
->X : Symbol(M2.X, Decl(nestedModules.ts, 13, 10), Decl(nestedModules.ts, 19, 11))
+>X : Symbol(X, Decl(nestedModules.ts, 19, 11))
 
 var point: number;
 >point : Symbol(point, Decl(nestedModules.ts, 26, 3), Decl(nestedModules.ts, 27, 3))
 
 var point = m.Point;
 >point : Symbol(point, Decl(nestedModules.ts, 26, 3), Decl(nestedModules.ts, 27, 3))
->m.Point : Symbol(M2.X.Point, Decl(nestedModules.ts, 13, 13), Decl(nestedModules.ts, 21, 18))
+>m.Point : Symbol(Point, Decl(nestedModules.ts, 21, 18))
 >m : Symbol(m, Decl(nestedModules.ts, 25, 3))
->Point : Symbol(M2.X.Point, Decl(nestedModules.ts, 13, 13), Decl(nestedModules.ts, 21, 18))
+>Point : Symbol(Point, Decl(nestedModules.ts, 21, 18))
 
 var p: { x: number; y: number; }
 >p : Symbol(p, Decl(nestedModules.ts, 29, 3), Decl(nestedModules.ts, 30, 3))
@@= skipped -30, +30 lines =@@
 var p: M2.X.Point;
 >p : Symbol(p, Decl(nestedModules.ts, 29, 3), Decl(nestedModules.ts, 30, 3))
 >M2 : Symbol(M2, Decl(nestedModules.ts, 11, 1), Decl(nestedModules.ts, 17, 1))
->X : Symbol(M2.X, Decl(nestedModules.ts, 13, 10), Decl(nestedModules.ts, 19, 11))
->Point : Symbol(M2.X.Point, Decl(nestedModules.ts, 13, 13), Decl(nestedModules.ts, 21, 18))
+>X : Symbol(X, Decl(nestedModules.ts, 19, 11))
+>Point : Symbol(Point)
 
