--- old.tsxStatelessFunctionComponentsWithTypeArguments3.types
+++ new.tsxStatelessFunctionComponentsWithTypeArguments3.types
@@= skipped -4, +4 lines =@@
 >React : typeof React

 declare function OverloadComponent<U>(): JSX.Element;
->OverloadComponent : { <U>(): JSX.Element; <U_1>(attr: { b: U_1; a?: string; "ignore-prop": boolean; }): JSX.Element; <T, U_1>(attr: { b: U_1; a: T; }): JSX.Element; }
+>OverloadComponent : { <U>(): JSX.Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): JSX.Element; <T, U>(attr: { b: U; a: T; }): JSX.Element; }
 >JSX : any

 declare function OverloadComponent<U>(attr: {b: U, a?: string, "ignore-prop": boolean}): JSX.Element;
->OverloadComponent : { <U_1>(): JSX.Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): JSX.Element; <T, U_1>(attr: { b: U_1; a: T; }): JSX.Element; }
+>OverloadComponent : { <U_1>(): JSX.Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): JSX.Element; <T, U>(attr: { b: U; a: T; }): JSX.Element; }
 >attr : { b: U; a?: string; "ignore-prop": boolean; }
 >b : U
 >a : string
@@= skipped -12, +12 lines =@@
 >JSX : any

 declare function OverloadComponent<T, U>(attr: {b: U, a: T}): JSX.Element;
->OverloadComponent : { <U_1>(): JSX.Element; <U_1>(attr: { b: U_1; a?: string; "ignore-prop": boolean; }): JSX.Element; <T, U>(attr: { b: U; a: T; }): JSX.Element; }
+>OverloadComponent : { <U_1>(): JSX.Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): JSX.Element; <T, U>(attr: { b: U; a: T; }): JSX.Element; }
 >attr : { b: U; a: T; }
 >b : U
 >a : T
@@= skipped -66, +66 lines =@@
 }

 declare function Link<U>(l: {func: (arg: U)=>void}): JSX.Element;
->Link : { <U>(l: { func: (arg: U) => void; }): JSX.Element; <U_1>(l: { func: (arg1: U_1, arg2: string) => void; }): JSX.Element; }
+>Link : { <U>(l: { func: (arg: U) => void; }): JSX.Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): JSX.Element; }
 >l : { func: (arg: U) => void; }
 >func : (arg: U) => void
 >arg : U
 >JSX : any

 declare function Link<U>(l: {func: (arg1:U, arg2: string)=>void}): JSX.Element;
->Link : { <U_1>(l: { func: (arg: U_1) => void; }): JSX.Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): JSX.Element; }
+>Link : { <U>(l: { func: (arg: U) => void; }): JSX.Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): JSX.Element; }
 >l : { func: (arg1: U, arg2: string) => void; }
 >func : (arg1: U, arg2: string) => void
 >arg1 : U