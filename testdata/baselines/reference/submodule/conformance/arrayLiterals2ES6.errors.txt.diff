--- old.arrayLiterals2ES6.errors.txt
+++ new.arrayLiterals2ES6.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+error TS2318: Cannot find global type 'Array'.
+error TS2318: Cannot find global type 'Function'.
+error TS2318: Cannot find global type 'IArguments'.
+error TS2318: Cannot find global type 'RegExp'.
+error TS2318: Cannot find global type 'String'.
+error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+arrayLiterals2ES6.ts(33,5): error TS2488: Type '[number, number]' must have a '[Symbol.iterator]()' method that returns an iterator.
+arrayLiterals2ES6.ts(34,5): error TS2488: Type '[number, number, boolean]' must have a '[Symbol.iterator]()' method that returns an iterator.
+arrayLiterals2ES6.ts(43,27): error TS2304: Cannot find name 'Array'.
+arrayLiterals2ES6.ts(43,33): error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+arrayLiterals2ES6.ts(44,28): error TS2304: Cannot find name 'Array'.
+arrayLiterals2ES6.ts(44,34): error TS2304: Cannot find name 'Number'.
+arrayLiterals2ES6.ts(44,41): error TS2304: Cannot find name 'String'.
+
+
+!!! error TS2318: Cannot find global type 'Array'.
+!!! error TS2318: Cannot find global type 'Function'.
+!!! error TS2318: Cannot find global type 'IArguments'.
+!!! error TS2318: Cannot find global type 'RegExp'.
+!!! error TS2318: Cannot find global type 'String'.
+!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+==== arrayLiterals2ES6.ts (7 errors) ====
+    // ElementList:  ( Modified )
+    //      Elisionopt   AssignmentExpression
+    //      Elisionopt   SpreadElement
+    //      ElementList, Elisionopt   AssignmentExpression
+    //      ElementList, Elisionopt   SpreadElement
+    
+    // SpreadElement:
+    //      ...   AssignmentExpression
+    
+    var a0 = [, , 2, 3, 4]
+    var a1 = ["hello", "world"]
+    var a2 = [, , , ...a0, "hello"];
+    var a3 = [, , ...a0]
+    var a4 = [() => 1, ];
+    var a5 = [...a0, , ]
+    
+    // Each element expression in a non-empty array literal is processed as follows:
+    //    - If the array literal contains no spread elements, and if the array literal is contextually typed (section 4.19)
+    //      by a type T and T has a property with the numeric name N, where N is the index of the element expression in the array literal,
+    //      the element expression is contextually typed by the type of that property.
+    
+    // The resulting type an array literal expression is determined as follows:
+    //     - If the array literal contains no spread elements and is contextually typed by a tuple-like type,
+    //       the resulting type is a tuple type constructed from the types of the element expressions.
+    
+    var b0: [any, any, any] = [undefined, null, undefined];
+    var b1: [number[], string[]] = [[1, 2, 3], ["hello", "string"]];
+    
+    // The resulting type an array literal expression is determined as follows:
+    //     - If the array literal contains no spread elements and is an array assignment pattern in a destructuring assignment (section 4.17.1),
+    //       the resulting type is a tuple type constructed from the types of the element expressions.
+    
+    var [c0, c1] = [1, 2];        // tuple type [number, number]
+        ~~~~~~~~
+!!! error TS2488: Type '[number, number]' must have a '[Symbol.iterator]()' method that returns an iterator.
+    var [c2, c3] = [1, 2, true];  // tuple type [number, number, boolean]
+        ~~~~~~~~
+!!! error TS2488: Type '[number, number, boolean]' must have a '[Symbol.iterator]()' method that returns an iterator.
+    
+    // The resulting type an array literal expression is determined as follows:
+    //      - the resulting type is an array type with an element type that is the union of the types of the
+    //        non - spread element expressions and the numeric index signature types of the spread element expressions
+    var temp = ["s", "t", "r"];
+    var temp1 = [1, 2, 3];
+    var temp2: [number[], string[]] = [[1, 2, 3], ["hello", "string"]];
+    
+    interface myArray extends Array<Number> { }
+                              ~~~~~
+!!! error TS2304: Cannot find name 'Array'.
+                                    ~~~~~~
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+    interface myArray2 extends Array<Number|String> { }
+                               ~~~~~
+!!! error TS2304: Cannot find name 'Array'.
+                                     ~~~~~~
+!!! error TS2304: Cannot find name 'Number'.
+                                            ~~~~~~
+!!! error TS2304: Cannot find name 'String'.
+    var d0 = [1, true, ...temp, ];  // has type (string|number|boolean)[]
+    var d1 = [...temp];            // has type string[]
+    var d2: number[] = [...temp1];
+    var d3: myArray = [...temp1];
+    var d4: myArray2 = [...temp, ...temp1];
+    var d5 = [...a2];
+    var d6 = [...a3];
+    var d7 = [...a4];
+    var d8: number[][] = [[...temp1]]
+    var d9 = [[...temp1], ...["hello"]];
