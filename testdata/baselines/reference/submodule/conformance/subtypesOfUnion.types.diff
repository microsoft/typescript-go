--- old.subtypesOfUnion.types
+++ new.subtypesOfUnion.types
@@= skipped -6, +6 lines =@@
 >e2 : E.e2
 
 interface I8 { [x: string]: number[]; }
+>I8 : I8
 >x : string
 
 class A { foo: number; }
@@= skipped -8, +9 lines =@@
 
 class A2<T> { foo: T; }
 >A2 : A2<T>
+>T : T
 >foo : T
 
 function f() { }
@@= skipped -21, +22 lines =@@
 
 // A type T is a subtype of a union type U if T is a subtype of any type in U.
 interface I1<T> {
+>I1 : I1<T>
+>T : T
+
     [x: string]: string | number;
 >x : string
 
@@= skipped -42, +45 lines =@@
 >x : any
 
     foo13: <T>(x: T) => T; // error
->foo13 : <T_1>(x: T_1) => T_1
+>foo13 : <T>(x: T) => T
+>T : T
 >x : T
 
     foo14: typeof f; // error
@@= skipped -21, +22 lines =@@
 >foo18 : {}
 }
 interface I2<T> {
+>I2 : I2<T>
+>T : T
+
     [x: string]: E | number;
 >x : string
 
@@= skipped -42, +45 lines =@@
 >x : any
 
     foo13: <T>(x: T) => T; // error
->foo13 : <T_1>(x: T_1) => T_1
+>foo13 : <T>(x: T) => T
+>T : T
 >x : T
 
     foo14: typeof f; // error
