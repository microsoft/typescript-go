--- old.awaitUsingDeclarationsWithIteratorObject.symbols
+++ new.awaitUsingDeclarationsWithIteratorObject.symbols
@@ -3,22 +3,21 @@
 === awaitUsingDeclarationsWithIteratorObject.ts ===
 declare const i: Iterator<string, undefined>;
 >i : Symbol(i, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 0, 13))
->Iterator : Symbol(Iterator, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
+>Iterator : Symbol(Iterator)
 
 declare const io: IteratorObject<string, undefined, unknown>;
 >io : Symbol(io, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 1, 13))
->IteratorObject : Symbol(IteratorObject, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.disposable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
+>IteratorObject : Symbol(IteratorObject)
 
 declare const g: Generator<string, void>;
 >g : Symbol(g, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 2, 13))
->Generator : Symbol(Generator, Decl(lib.es2015.generator.d.ts, --, --))
+>Generator : Symbol(Generator)
 
 class MyIterator extends Iterator<string> {
 >MyIterator : Symbol(MyIterator, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 2, 41))
->Iterator : Symbol(Iterator, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
 
     next() { return { done: true, value: undefined }; }
->next : Symbol(MyIterator.next, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 4, 43))
+>next : Symbol(next, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 4, 43))
 >done : Symbol(done, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 5, 21))
 >value : Symbol(value, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 5, 33))
 >undefined : Symbol(undefined)
@@ -38,9 +37,6 @@
 
     await using it2 = Iterator.from(i)
 >it2 : Symbol(it2, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 12, 15))
->Iterator.from : Symbol(IteratorConstructor.from, Decl(lib.esnext.iterator.d.ts, --, --))
->Iterator : Symbol(Iterator, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
->from : Symbol(IteratorConstructor.from, Decl(lib.esnext.iterator.d.ts, --, --))
 >i : Symbol(i, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 0, 13))
 
     await using it3 = new MyIterator();
@@ -49,20 +45,12 @@
 
     await using it4 = [].values();
 >it4 : Symbol(it4, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 14, 15))
->[].values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --))
->values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --))
 
     await using it5 = new Map<string, string>().entries();
 >it5 : Symbol(it5, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 15, 15))
->new Map<string, string>().entries : Symbol(Map.entries, Decl(lib.es2015.iterable.d.ts, --, --))
->Map : Symbol(Map, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->entries : Symbol(Map.entries, Decl(lib.es2015.iterable.d.ts, --, --))
 
     await using it6 = new Set<string>().keys();
 >it6 : Symbol(it6, Decl(awaitUsingDeclarationsWithIteratorObject.ts, 16, 15))
->new Set<string>().keys : Symbol(Set.keys, Decl(lib.es2015.iterable.d.ts, --, --))
->Set : Symbol(Set, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.collection.d.ts, --, --))
->keys : Symbol(Set.keys, Decl(lib.es2015.iterable.d.ts, --, --))
 
     // should fail
     await using it7 = i;
