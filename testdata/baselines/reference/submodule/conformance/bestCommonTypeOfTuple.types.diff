--- old.bestCommonTypeOfTuple.types
+++ new.bestCommonTypeOfTuple.types
@@= skipped -16, +16 lines =@@
 >true : true
 
 enum E1 { one }
->E1 : E1
+>E1 : E1.one
 >one : E1.one
 
 enum E2 { two }
->E2 : E2
+>E2 : E2.two
 >two : E2.two
 
 
@@= skipped -14, +14 lines =@@
 >x : number
 
 var t2: [E1, E2];
->t2 : [E1, E2]
+>t2 : [E1.one, E2.two]
 
 var t3: [number, any];
 >t3 : [number, any]
 
 var t4: [E1, E2, number];
->t4 : [E1, E2, number]
+>t4 : [E1.one, E2.two, number]
 
 // no error
 t1 = [f1, f2];
@@= skipped -17, +17 lines =@@
 >f2 : (x: number) => number
 
 t2 = [E1.one, E2.two];
->t2 = [E1.one, E2.two] : [E1, E2]
->t2 : [E1, E2]
->[E1.one, E2.two] : [E1, E2]
->E1.one : E1
+>t2 = [E1.one, E2.two] : [E1.one, E2.two]
+>t2 : [E1.one, E2.two]
+>[E1.one, E2.two] : [E1.one, E2.two]
+>E1.one : E1.one
 >E1 : typeof E1
->one : E1
->E2.two : E2
+>one : E1.one
+>E2.two : E2.two
 >E2 : typeof E2
->two : E2
+>two : E2.two
 
 t3 = [5, undefined];
 >t3 = [5, undefined] : [number, undefined]
@@= skipped -18, +18 lines =@@
 >undefined : undefined
 
 t4 = [E1.one, E2.two, 20];
->t4 = [E1.one, E2.two, 20] : [E1, E2, number]
->t4 : [E1, E2, number]
->[E1.one, E2.two, 20] : [E1, E2, number]
->E1.one : E1
+>t4 = [E1.one, E2.two, 20] : [E1.one, E2.two, number]
+>t4 : [E1.one, E2.two, number]
+>[E1.one, E2.two, 20] : [E1.one, E2.two, number]
+>E1.one : E1.one
 >E1 : typeof E1
->one : E1
->E2.two : E2
+>one : E1.one
+>E2.two : E2.two
 >E2 : typeof E2
->two : E2
+>two : E2.two
 >20 : 20
 
 var e1 = t1[2];  // {}
@@= skipped -20, +20 lines =@@
 var e2 = t2[2];  // {}
 >e2 : undefined
 >t2[2] : undefined
->t2 : [E1, E2]
+>t2 : [E1.one, E2.two]
 >2 : 2
 
 var e3 = t3[2];  // any
@@= skipped -12, +12 lines =@@
 var e4 = t4[3];  // number
 >e4 : undefined
 >t4[3] : undefined
->t4 : [E1, E2, number]
+>t4 : [E1.one, E2.two, number]
 >3 : 3
 
