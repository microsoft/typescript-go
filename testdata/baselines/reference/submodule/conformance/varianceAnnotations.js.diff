--- old.varianceAnnotations.js
+++ new.varianceAnnotations.js
@@= skipped -177, +177 lines =@@


 //// [varianceAnnotations.js]
-"use strict";
 super_covariant = sub_covariant;
 sub_covariant = super_covariant; // Error
 super_contravariant = sub_contravariant; // Error
 sub_contravariant = super_contravariant;
 super_invariant = sub_invariant; // Error
 sub_invariant = super_invariant; // Error
-var C = /** @class */ (function () {
-    function C() {
-        this.a = 0; // Error
-        this.b = 0; // Error
-    }
-    return C;
-}());
+class C {
+    in a = 0; // Error
+    out b = 0; // Error
+}
 baz1 = baz2; // Error
 baz2 = baz1; // Error
 function fn(inp) {
-    var a = inp;
+    const a = inp;
 }
-var pu = { child: { a: 0, b: 0, child: null, parent: null }, parent: null };
-var notString = pu; // Error
-var machine = createMachine({});
+const pu = { child: { a: 0, b: 0, child: null, parent: null }, parent: null };
+const notString = pu; // Error
+const machine = createMachine({});
 interpret(machine);
 createMachine(qq); // Error
 // Repros from #48618
-var Anon = /** @class */ (function () {
-    function class_1() {
-    }
-    class_1.prototype.foo = function () {
-        return this;
-    };
-    return class_1;
-}());
-var OuterC = /** @class */ (function () {
-    function C() {
-    }
-    C.prototype.foo = function () {
-        return this;
-    };
-    return C;
-}());
+let Anon = class {
+    foo() {
+        return this;
+    }
+};
+let OuterC = class C {
+    foo() {
+        return this;
+    }
+};


 //// [varianceAnnotations.d.ts]
@@= skipped -59, +49 lines =@@
 };
 declare let super_invariant: Invariant<unknown>;
 declare let sub_invariant: Invariant<string>;
+// Variance of various type constructors
 type T10<out T> = T;
 type T11<in T> = keyof T;
 type T12<out T, out K extends keyof T> = T[K];
 type T13<in out T> = T[keyof T];
+// Variance annotation errors
 type Covariant1<in T> = {
     x: T;
 };
-type Contravariant1<out T> = keyof T;
+type Contravariant1<out T> = keyof T; // Error
 type Contravariant2<out T> = {
     f: (x: T) => void;
 };
@@= skipped -17, +19 lines =@@
 type Invariant2<out T> = {
     f: (x: T) => T;
 };
+// Variance in circular types
 type Foo1<in T> = {
     x: T;
     f: FooFn1<T>;
@@= skipped -24, +25 lines =@@
 type Bar3<T> = {
     value: Foo3<T[]>;
 };
-type T20<public T> = T;
-type T21<in out in T> = T;
-type T22<in out out T> = T;
-type T23<out in T> = T;
-declare function f1<in T>(x: T): void;
-declare function f2<out T>(): T;
+// Wrong modifier usage
+type T20<public T> = T; // Error
+type T21<in out in T> = T; // Error
+type T22<in out out T> = T; // Error
+type T23<out in T> = T; // Error
+declare function f1<in T>(x: T): void; // Error
+declare function f2<out T>(): T; // Error
 declare class C {
-    in a: number;
-    out b: number;
+    in a: number; // Error
+    out b: number; // Error
 }
+// Interface merging
 interface Baz<out T> {
 }
 interface Baz<in T> {
 }
 declare let baz1: Baz<unknown>;
 declare let baz2: Baz<string>;
+// Repro from #44572
 interface Parent<out A> {
     child: Child<A> | null;
     parent: Parent<A> | null;
@@= skipped -26, +29 lines =@@
 }
 declare function fn<A>(inp: Child<A>): void;
 declare const pu: Parent<unknown>;
-declare const notString: Parent<string>;
+declare const notString: Parent<string>; // Error
+// Repro from comment in #44572
 declare class StateNode<TContext, in out TEvent extends {
     type: string;
 }> {
@@= skipped -22, +23 lines =@@
     type: "PLAY";
     value: number;
 }>;
+// Repros from #48618
 declare let Anon: {
     new <out T>(): {
-        foo(): InstanceType<(typeof Anon<T>)>;
+        foo(): any;
     };
 };
 declare let OuterC: {
     new <out T>(): {
-        foo(): /*elided*/ any;
+        foo(): any;
     };
 };