--- old.jsDeclarationsDefault.symbols
+++ new.jsDeclarationsDefault.symbols
@@= skipped -5, +5 lines =@@
 
 === index2.js ===
 export default function foo() {
->foo : Symbol(foo, Decl(index2.js, 0, 0))
+>foo : Symbol(default, Decl(index2.js, 0, 0))
 
     return foo;
->foo : Symbol(foo, Decl(index2.js, 0, 0))
+>foo : Symbol(default, Decl(index2.js, 0, 0))
 }
 export const x = foo;
 >x : Symbol(x, Decl(index2.js, 3, 12))
->foo : Symbol(foo, Decl(index2.js, 0, 0))
+>foo : Symbol(default, Decl(index2.js, 0, 0))
 
 export { foo as bar };
->foo : Symbol(foo, Decl(index2.js, 0, 0))
+>foo : Symbol(default, Decl(index2.js, 0, 0))
 >bar : Symbol(bar, Decl(index2.js, 4, 8))
 
 === index3.js ===
 export default class Foo {
->Foo : Symbol(Foo, Decl(index3.js, 0, 0))
+>Foo : Symbol(default, Decl(index3.js, 0, 0))
 
     a = /** @type {Foo} */(null);
->a : Symbol(Foo.a, Decl(index3.js, 0, 26))
+>a : Symbol(a, Decl(index3.js, 0, 26))
 
 };
 export const X = Foo;
 >X : Symbol(X, Decl(index3.js, 3, 12))
->Foo : Symbol(Foo, Decl(index3.js, 0, 0))
+>Foo : Symbol(default, Decl(index3.js, 0, 0))
 
 export { Foo as Bar };
->Foo : Symbol(Foo, Decl(index3.js, 0, 0))
+>Foo : Symbol(default, Decl(index3.js, 0, 0))
 >Bar : Symbol(Bar, Decl(index3.js, 4, 8))
 
 === index4.js ===
@@= skipped -38, +38 lines =@@
 >Fab : Symbol(Fab, Decl(index4.js, 0, 6))
 
     x = /** @type {Bar} */(null);
->x : Symbol(Bar.x, Decl(index4.js, 1, 23))
+>x : Symbol(x, Decl(index4.js, 1, 23))
 }
 export default Bar;
 >Bar : Symbol(Bar, Decl(index4.js, 0, 27))
@@= skipped -16, +16 lines =@@
 === index6.js ===
 // merge type alias and function (OK)
 export default function func() {};
->func : Symbol(func, Decl(index6.js, 0, 0), Decl(index6.js, 3, 3))
+>func : Symbol(default, Decl(index6.js, 0, 0))
 
 /**
  * @typedef {string | number} default
