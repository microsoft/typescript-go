--- old.numericStringLiteralTypes.js
+++ new.numericStringLiteralTypes.js
@@= skipped -40, +40 lines =@@


 //// [numericStringLiteralTypes.js]
-"use strict";
 function f1(a, x) {
     let s = a[x]; // boolean
 }
@@= skipped -16, +15 lines =@@


 //// [numericStringLiteralTypes.d.ts]
-type T0 = string & `${string}`;
-type T1 = string & `${number}`;
-type T2 = string & `${bigint}`;
-type T3<T extends string> = string & `${T}`;
-type T4<T extends string> = string & `${Capitalize<`${T}`>}`;
+type T0 = string & `${string}`; // string
+type T1 = string & `${number}`; // `${number}
+type T2 = string & `${bigint}`; // `${bigint}
+type T3<T extends string> = string & `${T}`; // `${T}
+type T4<T extends string> = string & `${Capitalize<`${T}`>}`; // `${Capitalize<T>}`
 declare function f1(a: boolean[], x: `${number}`): void;
 declare function f2(a: boolean[], x: number | `${number}`): void;
-type T10 = boolean[][`${number}`];
-type T11 = boolean[][number | `${number}`];
+type T10 = boolean[][`${number}`]; // boolean
+type T11 = boolean[][number | `${number}`]; // boolean
 type T20<T extends number | `${number}`> = T;
 type T21<T extends unknown[]> = {
     [K in keyof T]: T20<K>;