--- old.invalidNewTarget.es6.symbols
+++ new.invalidNewTarget.es6.symbols
@@= skipped -10, +10 lines =@@
 >C : Symbol(C, Decl(invalidNewTarget.es6.ts, 1, 27))
 
     [new.target]() { }
->[new.target] : Symbol(C[new.target], Decl(invalidNewTarget.es6.ts, 3, 9))
+>[new.target] : Symbol([new.target], Decl(invalidNewTarget.es6.ts, 3, 9))
 
     c() { return new.target; }
->c : Symbol(C.c, Decl(invalidNewTarget.es6.ts, 4, 22))
+>c : Symbol(c, Decl(invalidNewTarget.es6.ts, 4, 22))
 
     get d() { return new.target; }
->d : Symbol(C.d, Decl(invalidNewTarget.es6.ts, 5, 30))
+>d : Symbol(d, Decl(invalidNewTarget.es6.ts, 5, 30))
 
     set e(_) { _ = new.target; }
->e : Symbol(C.e, Decl(invalidNewTarget.es6.ts, 6, 34))
+>e : Symbol(e, Decl(invalidNewTarget.es6.ts, 6, 34))
 >_ : Symbol(_, Decl(invalidNewTarget.es6.ts, 7, 10))
 >_ : Symbol(_, Decl(invalidNewTarget.es6.ts, 7, 10))
 
     f = () => new.target;
->f : Symbol(C.f, Decl(invalidNewTarget.es6.ts, 7, 32))
+>f : Symbol(f, Decl(invalidNewTarget.es6.ts, 7, 32))
 
     static [new.target]() { }
->[new.target] : Symbol(C[new.target], Decl(invalidNewTarget.es6.ts, 8, 25))
+>[new.target] : Symbol([new.target], Decl(invalidNewTarget.es6.ts, 8, 25))
 
     static g() { return new.target; }
->g : Symbol(C.g, Decl(invalidNewTarget.es6.ts, 10, 29))
+>g : Symbol(g, Decl(invalidNewTarget.es6.ts, 10, 29))
 
     static get h() { return new.target; }
->h : Symbol(C.h, Decl(invalidNewTarget.es6.ts, 11, 37))
+>h : Symbol(h, Decl(invalidNewTarget.es6.ts, 11, 37))
 
     static set i(_) { _ = new.target; }
->i : Symbol(C.i, Decl(invalidNewTarget.es6.ts, 12, 41))
+>i : Symbol(i, Decl(invalidNewTarget.es6.ts, 12, 41))
 >_ : Symbol(_, Decl(invalidNewTarget.es6.ts, 13, 17))
 >_ : Symbol(_, Decl(invalidNewTarget.es6.ts, 13, 17))
 
     static j = () => new.target;
->j : Symbol(C.j, Decl(invalidNewTarget.es6.ts, 13, 39))
+>j : Symbol(j, Decl(invalidNewTarget.es6.ts, 13, 39))
 }
 
 const O = {
