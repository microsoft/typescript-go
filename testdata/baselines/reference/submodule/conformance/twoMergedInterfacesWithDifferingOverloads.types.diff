--- old.twoMergedInterfacesWithDifferingOverloads.types
+++ new.twoMergedInterfacesWithDifferingOverloads.types
@@= skipped -3, +3 lines =@@
 // interfaces that merge must not have members that conflict
 
 interface A {
+>A : A
+
     foo(x: number): number;
 >foo : { (x: number): number; (x: string): string; (x: Date): Date; }
 >x : number
@@= skipped -10, +12 lines =@@
 }
 
 interface A {
+>A : A
+
     foo(x: Date): Date;
 >foo : { (x: number): number; (x: string): string; (x: Date): Date; }
 >x : Date
 }
 
 interface B<T> {
+>B : B<T>
+>T : T
+
     foo(x: T): number;
 >foo : { (x: T): number; (x: string): string; (x: T): Date; (x: Date): string; }
 >x : T
@@= skipped -16, +21 lines =@@
 }
 
 interface B<T> {
+>B : B<T>
+>T : T
+
     foo(x: T): Date;
 >foo : { (x: T): number; (x: string): string; (x: T): Date; (x: Date): string; }
 >x : T
@@= skipped -22, +25 lines =@@
 
 // add generic overload
 interface C<T, U> {
+>C : C<T, U>
+>T : T
+>U : U
+
     foo(x: T, y: U): string;
 >foo : { (x: T, y: U): string; (x: string, y: string): number; <W>(x: W, y: W): W; }
 >x : T
@@= skipped -12, +16 lines =@@
 }
 
 interface C<T, U> {
+>C : C<T, U>
+>T : T
+>U : U
+
     foo<W>(x: W, y: W): W;
 >foo : { (x: T, y: U): string; (x: string, y: string): number; <W>(x: W, y: W): W; }
+>W : W
 >x : W
 >y : W
 }
@@= skipped -20, +25 lines =@@
 
 // add generic overload that would be ambiguous
 interface D<T, U> {
+>D : D<T, U>
+>T : T
+>U : U
+
     a: T;
 >a : T
 
@@= skipped -8, +12 lines =@@
 
     foo<A>(x: A, y: A): U;
 >foo : { <A>(x: A, y: A): U; <W>(x: W, y: W): T; }
+>A : A
 >x : A
 >y : A
 }
 
 interface D<T, U> {
+>D : D<T, U>
+>T : T
+>U : U
+
     foo<W>(x: W, y: W): T;
 >foo : { <A>(x: A, y: A): U; <W>(x: W, y: W): T; }
+>W : W
 >x : W
 >y : W
 }
