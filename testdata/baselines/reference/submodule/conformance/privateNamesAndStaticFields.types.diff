--- old.privateNamesAndStaticFields.types
+++ new.privateNamesAndStaticFields.types
@@= skipped -2, +2 lines =@@
 === privateNamesAndStaticFields.ts ===
 class A {
 >A : A
->  : ^
 
     static #foo: number;
 >#foo : number
->     : ^^^^^^
 
     static #bar: number;
 >#bar : number
->     : ^^^^^^
 
     constructor () {
         A.#foo = 3;
 >A.#foo = 3 : 3
->           : ^
 >A.#foo : number
->       : ^^^^^^
 >A : typeof A
->  : ^^^^^^^^
 >3 : 3
->  : ^
 
         B.#foo; // Error
 >B.#foo : any
->       : ^^^
 >B : typeof B
->  : ^^^^^^^^
 
         B.#bar; // Error
 >B.#bar : any
->       : ^^^
 >B : typeof B
->  : ^^^^^^^^
     }
 }
 
 class B extends A {
 >B : B
->  : ^
 >A : A
->  : ^
 
     static #foo: string;
 >#foo : string
->     : ^^^^^^
 
     constructor () {
         super();
 >super() : void
->        : ^^^^
 >super : typeof A
->      : ^^^^^^^^
 
         B.#foo = "some string";
 >B.#foo = "some string" : "some string"
->                       : ^^^^^^^^^^^^^
 >B.#foo : string
->       : ^^^^^^
 >B : typeof B
->  : ^^^^^^^^
 >"some string" : "some string"
->              : ^^^^^^^^^^^^^
     }
 }
 
@@= skipped -68, +48 lines =@@
 // We will need a more robust solution when we support static fields
 const willErrorSomeDay: typeof A = class {}; // OK for now
 >willErrorSomeDay : typeof A
->                 : ^^^^^^^^
->A : typeof A
->  : ^^^^^^^^
 >class {} : typeof willErrorSomeDay
->         : ^^^^^^^^^^^^^^^^^^^^^^^
 
