//// [tests/cases/conformance/es2023/intlNumberFormatES2023.ts] ////

=== intlNumberFormatES2023.ts ===
// New / updated resolved options in ES2023, including type change for useGrouping
const { roundingPriority, roundingMode, roundingIncrement, trailingZeroDisplay, useGrouping } =  new Intl.NumberFormat('en-GB').resolvedOptions();
>roundingPriority : Symbol(roundingPriority, Decl(intlNumberFormatES2023.ts, 1, 7))
>roundingMode : Symbol(roundingMode, Decl(intlNumberFormatES2023.ts, 1, 25))
>roundingIncrement : Symbol(roundingIncrement, Decl(intlNumberFormatES2023.ts, 1, 39))
>trailingZeroDisplay : Symbol(trailingZeroDisplay, Decl(intlNumberFormatES2023.ts, 1, 58))
>useGrouping : Symbol(useGrouping, Decl(intlNumberFormatES2023.ts, 1, 79))

// Empty options
new Intl.NumberFormat('en-GB', {});

// Rounding
new Intl.NumberFormat('en-GB', { roundingPriority: 'lessPrecision', roundingIncrement: 100, roundingMode: 'trunc' });
>roundingPriority : Symbol(roundingPriority, Decl(intlNumberFormatES2023.ts, 7, 32))
>roundingIncrement : Symbol(roundingIncrement, Decl(intlNumberFormatES2023.ts, 7, 67))
>roundingMode : Symbol(roundingMode, Decl(intlNumberFormatES2023.ts, 7, 91))

// Changes to signDisplay
const { signDisplay } = new Intl.NumberFormat('en-GB', { signDisplay: 'negative' }).resolvedOptions();
>signDisplay : Symbol(signDisplay, Decl(intlNumberFormatES2023.ts, 10, 7))
>signDisplay : Symbol(signDisplay, Decl(intlNumberFormatES2023.ts, 10, 56))

// Changes to useGrouping
new Intl.NumberFormat('en-GB', { useGrouping: true });
>useGrouping : Symbol(useGrouping, Decl(intlNumberFormatES2023.ts, 13, 32))

new Intl.NumberFormat('en-GB', { useGrouping: 'true' });
>useGrouping : Symbol(useGrouping, Decl(intlNumberFormatES2023.ts, 14, 32))

new Intl.NumberFormat('en-GB', { useGrouping: 'always' });
>useGrouping : Symbol(useGrouping, Decl(intlNumberFormatES2023.ts, 15, 32))

// formatRange
new Intl.NumberFormat('en-GB').formatRange(10, 100);
new Intl.NumberFormat('en-GB').formatRange(10n, 1000n);
new Intl.NumberFormat('en-GB').formatRangeToParts(10, 1000)[0];
new Intl.NumberFormat('en-GB').formatRangeToParts(10n, 1000n)[0];

// Arbitrary-precision string arguments
new Intl.NumberFormat('en-GB').format('-12.3E-4');
new Intl.NumberFormat('en-GB').formatRange('123.4', '567.8');
new Intl.NumberFormat('en-GB').formatRangeToParts('123E-4', '567E8');
new Intl.NumberFormat('en-GB').format('Infinity');
new Intl.NumberFormat('en-GB').format('-Infinity');
new Intl.NumberFormat('en-GB').format('+Infinity');

