--- old.privateNameStaticMethodCallExpression.errors.txt
+++ new.privateNameStaticMethodCallExpression.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+error TS2318: Cannot find global type 'Array'.
+error TS2318: Cannot find global type 'Function'.
+error TS2318: Cannot find global type 'IArguments'.
+error TS2318: Cannot find global type 'RegExp'.
+error TS2318: Cannot find global type 'String'.
+error TS2318: Cannot find global type 'TemplateStringsArray'.
+error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+privateNameStaticMethodCallExpression.ts(12,27): error TS2488: Type '{}' must have a '[Symbol.iterator]()' method that returns an iterator.
+
+
+!!! error TS2318: Cannot find global type 'Array'.
+!!! error TS2318: Cannot find global type 'Function'.
+!!! error TS2318: Cannot find global type 'IArguments'.
+!!! error TS2318: Cannot find global type 'RegExp'.
+!!! error TS2318: Cannot find global type 'String'.
+!!! error TS2318: Cannot find global type 'TemplateStringsArray'.
+!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+==== privateNameStaticMethodCallExpression.ts (1 errors) ====
+    class AA {
+        static #method() { this.x = 10; };
+        static #method2(a, ...b) {};
+        static x = 1;
+        test() {
+            AA.#method();
+            const func = AA.#method;
+            func();
+            new AA.#method();
+    
+            const arr = [ 1, 2 ];
+            AA.#method2(0, ...arr, 3);
+                              ~~~
+!!! error TS2488: Type '{}' must have a '[Symbol.iterator]()' method that returns an iterator.
+    
+            const b = new AA.#method2(0, ...arr, 3); //Error 
+            const str = AA.#method2`head${1}middle${2}tail`;
+            AA.getClass().#method2`test${1}and${2}`;
+    
+            AA.getClass().#method2(0, ...arr, 3); 
+            const b2 = new (AA.getClass().#method2)(0, ...arr, 3); //Error 
+            const str2 = AA.getClass().#method2`head${1}middle${2}tail`;
+        }
+        static getClass() { return AA; }
+    }
+    
