--- old.genericContextualTypes2.types
+++ new.genericContextualTypes2.types
@@= skipped -2, +2 lines =@@
 === genericContextualTypes2.ts ===
 type LowInfer<T> = T & {};
 >LowInfer : LowInfer<T>
+>T : T
 
 type PartialAssigner<TContext, TKey extends keyof TContext> = (
 >PartialAssigner : PartialAssigner<TContext, TKey>
+>TContext : TContext
+>TKey : TKey
 
   context: TContext
 >context : TContext
@@= skipped -11, +14 lines =@@
 
 type PropertyAssigner<TContext> = {
 >PropertyAssigner : PropertyAssigner<TContext>
+>TContext : TContext
 
   [K in keyof TContext]?: PartialAssigner<TContext, K> | TContext[K];
+>K : K
+
 };
 
 type Meta<TContext> = {
 >Meta : Meta<TContext>
+>TContext : TContext
 
   action: (ctx: TContext) => void
 >action : (ctx: TContext) => void
@@= skipped -13, +17 lines =@@
 }
 
 interface AssignAction<TContext> {
+>AssignAction : AssignAction<TContext>
+>TContext : TContext
+
   type: "xstate.assign";
 >type : "xstate.assign"
 
@@= skipped -11, +14 lines =@@
 
 declare function assign<TContext>(
 >assign : <TContext>(assignment: PropertyAssigner<LowInfer<TContext>>) => AssignAction<TContext>
+>TContext : TContext
 
   assignment: PropertyAssigner<LowInfer<TContext>>
 >assignment : PropertyAssigner<LowInfer<TContext>>
@@= skipped -8, +9 lines =@@
 
 type Config<TContext> = {
 >Config : Config<TContext>
+>TContext : TContext
 
   context: TContext;
 >context : TContext
@@= skipped -11, +12 lines =@@
 
 declare function createMachine<TContext>(config: Config<TContext>): void;
 >createMachine : <TContext>(config: Config<TContext>) => void
+>TContext : TContext
 >config : Config<TContext>
 
 createMachine<{ count: number }>({
