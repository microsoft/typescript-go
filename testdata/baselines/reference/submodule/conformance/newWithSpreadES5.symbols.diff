--- old.newWithSpreadES5.symbols
+++ new.newWithSpreadES5.symbols
@@= skipped -15, +15 lines =@@
 >A : Symbol(A, Decl(newWithSpreadES5.ts, 3, 30))
 
     f: {
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 
         new (x: number, y: number, ...z: string[]);
 >x : Symbol(x, Decl(newWithSpreadES5.ts, 7, 13))
@@= skipped -22, +22 lines =@@
 >C : Symbol(C, Decl(newWithSpreadES5.ts, 13, 1))
 
     "a-b": typeof B;
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 >B : Symbol(B, Decl(newWithSpreadES5.ts, 9, 1))
 }
 
@@= skipped -8, +8 lines =@@
 >D : Symbol(D, Decl(newWithSpreadES5.ts, 17, 1))
 
     1: typeof B;
->1 : Symbol(D[1], Decl(newWithSpreadES5.ts, 19, 13))
+>1 : Symbol(1, Decl(newWithSpreadES5.ts, 19, 13))
 >B : Symbol(B, Decl(newWithSpreadES5.ts, 9, 1))
 }
 
@@= skipped -74, +74 lines =@@
 
 // Property access expression
 new b.f(1, 2, "string");
->b.f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>b.f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >b : Symbol(b, Decl(newWithSpreadES5.ts, 24, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 
 new b.f(1, 2, ...a);
->b.f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>b.f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >b : Symbol(b, Decl(newWithSpreadES5.ts, 24, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 new b.f(1, 2, ...a, "string"); 
->b.f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>b.f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >b : Symbol(b, Decl(newWithSpreadES5.ts, 24, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 // Parenthesised expression
 new (b.f)(1, 2, "string");
->b.f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>b.f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >b : Symbol(b, Decl(newWithSpreadES5.ts, 24, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 
 new (b.f)(1, 2, ...a);
->b.f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>b.f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >b : Symbol(b, Decl(newWithSpreadES5.ts, 24, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 new (b.f)(1, 2, ...a, "string"); 
->b.f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>b.f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >b : Symbol(b, Decl(newWithSpreadES5.ts, 24, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 // Element access expression
 new d[1].f(1, 2, "string");
->d[1].f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>d[1].f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >d : Symbol(d, Decl(newWithSpreadES5.ts, 26, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 
 new d[1].f(1, 2, ...a);
->d[1].f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>d[1].f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >d : Symbol(d, Decl(newWithSpreadES5.ts, 26, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 new d[1].f(1, 2, ...a, "string");
->d[1].f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>d[1].f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >d : Symbol(d, Decl(newWithSpreadES5.ts, 26, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 // Element access expression with a punctuated key
 new e["a-b"].f(1, 2, "string");
->e["a-b"].f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>e["a-b"].f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >e : Symbol(e, Decl(newWithSpreadES5.ts, 27, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 
 new e["a-b"].f(1, 2, ...a);
->e["a-b"].f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>e["a-b"].f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >e : Symbol(e, Decl(newWithSpreadES5.ts, 27, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 new e["a-b"].f(1, 2, ...a, "string");
->e["a-b"].f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>e["a-b"].f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >e : Symbol(e, Decl(newWithSpreadES5.ts, 27, 3))
->f : Symbol(A.f, Decl(newWithSpreadES5.ts, 5, 13))
+>f : Symbol(f, Decl(newWithSpreadES5.ts, 5, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 // Basic expression
@@= skipped -85, +85 lines =@@
 // Property access expression
 new c["a-b"](1, 2, "string");
 >c : Symbol(c, Decl(newWithSpreadES5.ts, 25, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 
 new c["a-b"](1, 2, ...a);
 >c : Symbol(c, Decl(newWithSpreadES5.ts, 25, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 new c["a-b"](1, 2, ...a, "string");
 >c : Symbol(c, Decl(newWithSpreadES5.ts, 25, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 // Parenthesised expression
 new (c["a-b"])(1, 2, "string");
 >c : Symbol(c, Decl(newWithSpreadES5.ts, 25, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 
 new (c["a-b"])(1, 2, ...a);
 >c : Symbol(c, Decl(newWithSpreadES5.ts, 25, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 new (c["a-b"])(1, 2, ...a, "string");
 >c : Symbol(c, Decl(newWithSpreadES5.ts, 25, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 // Element access expression
 new g[1]["a-b"](1, 2, "string");
 >g : Symbol(g, Decl(newWithSpreadES5.ts, 28, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 
 new g[1]["a-b"](1, 2, ...a);
 >g : Symbol(g, Decl(newWithSpreadES5.ts, 28, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 new g[1]["a-b"](1, 2, ...a, "string");
 >g : Symbol(g, Decl(newWithSpreadES5.ts, 28, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 // Element access expression with a punctuated key
 new h["a-b"]["a-b"](1, 2, "string");
 >h : Symbol(h, Decl(newWithSpreadES5.ts, 29, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 
 new h["a-b"]["a-b"](1, 2, ...a);
 >h : Symbol(h, Decl(newWithSpreadES5.ts, 29, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 new h["a-b"]["a-b"](1, 2, ...a, "string");
 >h : Symbol(h, Decl(newWithSpreadES5.ts, 29, 3))
->"a-b" : Symbol(C["a-b"], Decl(newWithSpreadES5.ts, 15, 13))
+>"a-b" : Symbol("a-b", Decl(newWithSpreadES5.ts, 15, 13))
 >a : Symbol(a, Decl(newWithSpreadES5.ts, 23, 3))
 
 // Element access expression with a number
