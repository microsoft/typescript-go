--- old.assertionsAndNonReturningFunctions.symbols
+++ new.assertionsAndNonReturningFunctions.symbols
@@= skipped -1, +1 lines =@@
 
 === assertionsAndNonReturningFunctions.js ===
 /** @typedef {(check: boolean) => asserts check} AssertFunc */
+>check : Symbol(check, Decl(assertionsAndNonReturningFunctions.js, 0, 15))
+>check : Symbol(check, Decl(assertionsAndNonReturningFunctions.js, 0, 15))
 
 /** @type {AssertFunc} */
 const assert = check => {
@@= skipped -57, +59 lines =@@
 >x : Symbol(x, Decl(assertionsAndNonReturningFunctions.js, 30, 12))
 
         x.length;
->x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(assertionsAndNonReturningFunctions.js, 30, 12))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
     }
     if (!!true) {
         assert2(typeof x === "string");
@@= skipped -10, +8 lines =@@
 >x : Symbol(x, Decl(assertionsAndNonReturningFunctions.js, 30, 12))
 
         x.length;
->x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(assertionsAndNonReturningFunctions.js, 30, 12))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
     }
     if (!!true) {
         assertIsString(x);
@@= skipped -10, +8 lines =@@
 >x : Symbol(x, Decl(assertionsAndNonReturningFunctions.js, 30, 12))
 
         x.length;
->x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(assertionsAndNonReturningFunctions.js, 30, 12))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
     }
     if (!!true) {
         fail();
