--- old.callSignatureAssignabilityInInheritance.types
+++ new.callSignatureAssignabilityInInheritance.types
@@= skipped -1, +1 lines =@@
 
 === callSignatureAssignabilityInInheritance.ts ===
 module CallSignature {
+>CallSignature : any
+
     interface Base { // T
+>Base : Base
+
         // M's
         (x: number): void;
 >x : number
@@= skipped -12, +16 lines =@@
 
     // S's
     interface I extends Base {
+>I : I
+
         // N's
         (x: number): number; // ok because base returns void
 >x : number
@@= skipped -9, +11 lines =@@
 >y : number
 
         <T>(x: T): string; // ok because base returns void
+>T : T
 >x : T
     }
 
     interface Base2 { // T
+>Base2 : Base2
+
         // M's
         (x: number): number;
 >x : number
@@= skipped -11, +14 lines =@@
 
     // S's
     interface I2 extends Base2 {
+>I2 : I2
+
         // N's
         (x: number): string; // error because base returns non-void;
 >x : number
@@= skipped -7, +9 lines =@@
 
     // S's
     interface I3 extends Base2 {
+>I3 : I3
+
         // N's
         <T>(x: T): string; // ok, adds a new call signature
+>T : T
 >x : T
     }
 }
 
 module MemberWithCallSignature {
+>MemberWithCallSignature : any
+
     interface Base { // T
+>Base : Base
+
         // M's
         a: (x: number) => void;
 >a : (x: number) => void
@@= skipped -20, +27 lines =@@
 
         a3: <T>(x: T) => void;
 >a3 : <T>(x: T) => void
+>T : T
 >x : T
     }
 
     // S's
     interface I extends Base {
+>I : I
+
         // N's
         a: (x: number) => number; // ok because base returns void
 >a : (x: number) => number
@@= skipped -17, +20 lines =@@
 
         a3: <T>(x: T) => string; // ok because base returns void
 >a3 : <T>(x: T) => string
+>T : T
 >x : T
     }
 
     interface Base2 { // T
+>Base2 : Base2
+
         // M's
         a: (x: number) => number;
 >a : (x: number) => number
@@= skipped -11, +14 lines =@@
 
         a2: <T>(x: T) => T;
 >a2 : <T>(x: T) => T
+>T : T
 >x : T
     }
 
     // S's
     interface I2 extends Base2 {
+>I2 : I2
+
         // N's
         a: (x: number) => string; // error because base returns non-void;
 >a : (x: number) => string
@@= skipped -13, +16 lines =@@
 
     // S's
     interface I3 extends Base2 {
+>I3 : I3
+
         // N's
         a2: <T>(x: T) => string; // error because base returns non-void;
 >a2 : <T>(x: T) => string
+>T : T
 >x : T
     }
 }
