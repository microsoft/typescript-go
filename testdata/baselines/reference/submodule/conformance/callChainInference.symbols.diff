--- old.callChainInference.symbols
+++ new.callChainInference.symbols
@@= skipped -6, +6 lines =@@
 >Y : Symbol(Y, Decl(callChainInference.ts, 0, 0))
 
     foo<T>(this: T, arg: keyof T): void;
->foo : Symbol(Y.foo, Decl(callChainInference.ts, 2, 13))
+>foo : Symbol(foo, Decl(callChainInference.ts, 2, 13))
 >T : Symbol(T, Decl(callChainInference.ts, 3, 8))
 >this : Symbol(this, Decl(callChainInference.ts, 3, 11))
 >T : Symbol(T, Decl(callChainInference.ts, 3, 8))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(callChainInference.ts, 3, 8))
 
     a: number;
->a : Symbol(Y.a, Decl(callChainInference.ts, 3, 40))
+>a : Symbol(a, Decl(callChainInference.ts, 3, 40))
 
     b: string;
->b : Symbol(Y.b, Decl(callChainInference.ts, 4, 14))
+>b : Symbol(b, Decl(callChainInference.ts, 4, 14))
 }
 
 declare const value: Y | undefined;
@@= skipped -14, +14 lines =@@
 >value : Symbol(value, Decl(callChainInference.ts, 8, 13))
 
     value?.foo("a");
->value?.foo : Symbol(Y.foo, Decl(callChainInference.ts, 2, 13))
+>value?.foo : Symbol(foo, Decl(callChainInference.ts, 2, 13))
 >value : Symbol(value, Decl(callChainInference.ts, 8, 13))
->foo : Symbol(Y.foo, Decl(callChainInference.ts, 2, 13))
+>foo : Symbol(foo, Decl(callChainInference.ts, 2, 13))
 }
 
 value?.foo("a");
->value?.foo : Symbol(Y.foo, Decl(callChainInference.ts, 2, 13))
+>value?.foo : Symbol(foo, Decl(callChainInference.ts, 2, 13))
 >value : Symbol(value, Decl(callChainInference.ts, 8, 13))
->foo : Symbol(Y.foo, Decl(callChainInference.ts, 2, 13))
+>foo : Symbol(foo, Decl(callChainInference.ts, 2, 13))
 
