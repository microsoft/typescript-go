--- old.tsxAttributeResolution5.symbols
+++ new.tsxAttributeResolution5.symbols
@@ -11,11 +11,11 @@
 >IntrinsicElements : Symbol(IntrinsicElements, Decl(file.tsx, 1, 22))
 
 		test1: Attribs1;
->test1 : Symbol(IntrinsicElements.test1, Decl(file.tsx, 2, 30))
+>test1 : Symbol(test1, Decl(file.tsx, 2, 30))
 >Attribs1 : Symbol(Attribs1, Decl(file.tsx, 6, 1))
 
 		test2: Attribs2;
->test2 : Symbol(IntrinsicElements.test2, Decl(file.tsx, 3, 18))
+>test2 : Symbol(test2, Decl(file.tsx, 3, 18))
 >Attribs2 : Symbol(Attribs2, Decl(file.tsx, 9, 1))
 	}
 }
@@ -23,14 +23,14 @@
 >Attribs1 : Symbol(Attribs1, Decl(file.tsx, 6, 1))
 
 	x: string;
->x : Symbol(Attribs1.x, Decl(file.tsx, 7, 20))
+>x : Symbol(x, Decl(file.tsx, 7, 20))
 }
 
 interface Attribs2 {
 >Attribs2 : Symbol(Attribs2, Decl(file.tsx, 9, 1))
 
 	toString(): string;
->toString : Symbol(Attribs2.toString, Decl(file.tsx, 11, 20))
+>toString : Symbol(toString, Decl(file.tsx, 11, 20))
 }
 
 function make1<T extends {x: string}> (obj: T) {
@@ -41,7 +41,6 @@
 >T : Symbol(T, Decl(file.tsx, 15, 15))
 
 	return <test1 {...obj} />; // OK
->test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
 >obj : Symbol(obj, Decl(file.tsx, 15, 39))
 }
 
@@ -53,7 +52,6 @@
 >T : Symbol(T, Decl(file.tsx, 19, 15))
 
 	return <test1 {...obj} />; // Error (x is number, not string)
->test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
 >obj : Symbol(obj, Decl(file.tsx, 19, 39))
 }
 
@@ -65,14 +63,10 @@
 >T : Symbol(T, Decl(file.tsx, 23, 15))
 
 	return <test1 {...obj} />; // Error, missing x
->test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
 >obj : Symbol(obj, Decl(file.tsx, 23, 39))
 }
 
 
 <test1 {...{}} />; // Error, missing x
->test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
-
 <test2 {...{}} />; // Error, missing toString
->test2 : Symbol(JSX.IntrinsicElements.test2, Decl(file.tsx, 3, 18))
 
