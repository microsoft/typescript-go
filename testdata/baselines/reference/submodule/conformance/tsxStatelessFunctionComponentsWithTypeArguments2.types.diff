--- old.tsxStatelessFunctionComponentsWithTypeArguments2.types
+++ new.tsxStatelessFunctionComponentsWithTypeArguments2.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react')
->React : typeof React
+>React : any
 
 declare function ComponentSpecific1<U>(l: {prop: U, "ignore-prop": string}): JSX.Element;
->ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": string; }) => JSX.Element
+>ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": string; }) => Element
+>U : U
 >l : { prop: U; "ignore-prop": string; }
 >prop : U
 >"ignore-prop" : string
 >JSX : any
 
 declare function ComponentSpecific2<U>(l: {prop: U}): JSX.Element;
->ComponentSpecific2 : <U>(l: { prop: U; }) => JSX.Element
+>ComponentSpecific2 : <U>(l: { prop: U; }) => Element
+>U : U
 >l : { prop: U; }
 >prop : U
 >JSX : any
@@= skipped -18, +20 lines =@@
 // Error
 function Bar<T extends {prop: number}>(arg: T) {
 >Bar : <T extends { prop: number; }>(arg: T) => void
+>T : T
 >prop : number
 >arg : T
 
     let a1 = <ComponentSpecific1 {...arg} ignore-prop={10} />;
->a1 : JSX.Element
-><ComponentSpecific1 {...arg} ignore-prop={10} /> : JSX.Element
->ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": string; }) => JSX.Element
+>a1 : any
+><ComponentSpecific1 {...arg} ignore-prop={10} /> : any
+>ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": string; }) => Element
 >arg : T
->ignore-prop : number
+>ignore-prop : any
 >10 : 10
  }
 
 // Error
 function Baz<T>(arg: T) {
 >Baz : <T>(arg: T) => void
+>T : T
 >arg : T
 
     let a0 = <ComponentSpecific1 {...arg} />
->a0 : JSX.Element
-><ComponentSpecific1 {...arg} /> : JSX.Element
->ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": string; }) => JSX.Element
+>a0 : any
+><ComponentSpecific1 {...arg} /> : any
+>ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": string; }) => Element
 >arg : T
 }
 
 declare function Link<U>(l: {func: (arg: U)=>void}): JSX.Element;
->Link : <U>(l: { func: (arg: U) => void; }) => JSX.Element
+>Link : <U>(l: { func: (arg: U) => void; }) => Element
+>U : U
 >l : { func: (arg: U) => void; }
 >func : (arg: U) => void
 >arg : U
@@= skipped -39, +42 lines =@@
 >b : string
 
     let o = <Link func={func} />
->o : JSX.Element
-><Link func={func} /> : JSX.Element
->Link : <U>(l: { func: (arg: U) => void; }) => JSX.Element
+>o : any
+><Link func={func} /> : any
+>Link : <U>(l: { func: (arg: U) => void; }) => Element
+>func : any
 >func : (a: number, b: string) => void
->func : (a: number, b: string) => void
 }
 
 interface InferParamProp<T> {
+>InferParamProp : InferParamProp<T>
+>T : T
+
     values: Array<T>;
->values : T[]
+>values : Array<T>
 
     selectHandler: (selectedVal: T) => void;
 >selectHandler : (selectedVal: T) => void
@@= skipped -17, +20 lines =@@
 }
 
 declare function InferParamComponent<T>(attr: InferParamProp<T>): JSX.Element;
->InferParamComponent : <T>(attr: InferParamProp<T>) => JSX.Element
+>InferParamComponent : <T>(attr: InferParamProp<T>) => Element
+>T : T
 >attr : InferParamProp<T>
 >JSX : any
 
 // Error
 let i = <InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val: string) => { }} />;
->i : JSX.Element
-><InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val: string) => { }} /> : JSX.Element
->InferParamComponent : <T>(attr: InferParamProp<T>) => JSX.Element
->values : number[]
->[1, 2, 3, 4] : number[]
+>i : any
+><InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val: string) => { }} /> : any
+>InferParamComponent : <T>(attr: InferParamProp<T>) => Element
+>values : any
+>[1, 2, 3, 4] : {}
 >1 : 1
 >2 : 2
 >3 : 3
 >4 : 4
->selectHandler : (val: string) => void
+>selectHandler : any
 >(val: string) => { } : (val: string) => void
 >val : string
 
