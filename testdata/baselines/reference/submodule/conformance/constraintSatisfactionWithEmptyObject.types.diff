--- old.constraintSatisfactionWithEmptyObject.types
+++ new.constraintSatisfactionWithEmptyObject.types
@@= skipped -5, +5 lines =@@
 // Object constraint
 function foo<T extends Object>(x: T) { }
 >foo : <T extends Object>(x: T) => void
+>T : T
 >x : T
 
 var r = foo({});
@@= skipped -20, +21 lines =@@
 
 class C<T extends Object> {
 >C : C<T>
+>T : T
 
     constructor(public x: T) { }
 >x : T
@@= skipped -12, +13 lines =@@
 >{} : {}
 
 interface I<T extends Object> {
+>I : I<T>
+>T : T
+
     x: T;
 >x : T
 }
@@= skipped -9, +12 lines =@@
 // {} constraint
 function foo2<T extends {}>(x: T) { }
 >foo2 : <T extends {}>(x: T) => void
+>T : T
 >x : T
 
 var r = foo2({});
@@= skipped -20, +21 lines =@@
 
 class C2<T extends {}> {
 >C2 : C2<T>
+>T : T
 
     constructor(public x: T) { }
 >x : T
@@= skipped -12, +13 lines =@@
 >{} : {}
 
 interface I2<T extends {}> {
+>I2 : I2<T>
+>T : T
+
     x: T;
 >x : T
 }
