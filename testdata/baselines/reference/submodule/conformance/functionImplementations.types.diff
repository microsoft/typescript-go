--- old.functionImplementations.types
+++ new.functionImplementations.types
@@= skipped -9, +9 lines =@@
 // FunctionExpression f with no return type annotation and directly references f in its body returns any
 var a: any = function f() {
 >a : any
->function f() {    return f;} : () => any
->f : () => any
+>function f() {    return f;} : () => ???
+>f : () => ???
 
     return f;
->f : () => any
+>f : () => ???
 
 };
 var a: any = function f() {
@@= skipped -21, +21 lines =@@
 // FunctionExpression f with no return type annotation and indirectly references f in its body returns any
 var a: any = function f() {
 >a : any
->function f() {    var x = f;    return x;} : () => any
->f : () => any
+>function f() {    var x = f;    return x;} : () => ???
+>f : () => ???
 
     var x = f;
->x : () => any
->f : () => any
+>x : () => ???
+>f : () => ???
 
     return x;
->x : () => any
+>x : () => ???
 
 };
 
@@= skipped -108, +108 lines =@@
 >n : number
 >function <T>(x: T) {    return x;} (4) : 4
 >function <T>(x: T) {    return x;} : <T>(x: T) => T
+>T : T
 >x : T
 
     return x;
@@= skipped -13, +14 lines =@@
 >n : number
 >function <T extends {}>(x: T) {    return x;} (4) : 4
 >function <T extends {}>(x: T) {    return x;} : <T extends {}>(x: T) => T
+>T : T
 >x : T
 
     return x;
@@= skipped -229, +230 lines =@@
 var f11: (x: number) => any = x => { // should be (x: number) => Base | AnotherClass
 >f11 : (x: number) => any
 >x : number
->x => { // should be (x: number) => Base | AnotherClass    return new Base();    return new AnotherClass();} : (x: number) => Base | AnotherClass
+>x => { // should be (x: number) => Base | AnotherClass    return new Base();    return new AnotherClass();} : (x: number) => AnotherClass | Base
 >x : number
 
     return new Base();
@@= skipped -14, +14 lines =@@
 var f12: (x: number) => any = x => { // should be (x: number) => Base | AnotherClass
 >f12 : (x: number) => any
 >x : number
->x => { // should be (x: number) => Base | AnotherClass    return new Base();    return; // should be ignored    return new AnotherClass();} : (x: number) => Base | AnotherClass
+>x => { // should be (x: number) => Base | AnotherClass    return new Base();    return; // should be ignored    return new AnotherClass();} : (x: number) => AnotherClass | Base
 >x : number
 
     return new Base();
