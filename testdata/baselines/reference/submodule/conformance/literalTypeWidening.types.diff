--- old.literalTypeWidening.types
+++ new.literalTypeWidening.types
@@= skipped -43, +43 lines =@@
 >cond : boolean
 
     const c1 = cond ? "foo" : "bar";  // widening "foo" | widening "bar"
->c1 : "foo" | "bar"
->cond ? "foo" : "bar" : "foo" | "bar"
+>c1 : "bar" | "foo"
+>cond ? "foo" : "bar" : "bar" | "foo"
 >cond : boolean
 >"foo" : "foo"
 >"bar" : "bar"
 
     const c2: "foo" | "bar" = c1;  // "foo" | "bar"
->c2 : "foo" | "bar"
->c1 : "foo" | "bar"
+>c2 : "bar" | "foo"
+>c1 : "bar" | "foo"
 
     const c3 = cond ? c1 : c2;  // "foo" | "bar"
->c3 : "foo" | "bar"
->cond ? c1 : c2 : "foo" | "bar"
+>c3 : "bar" | "foo"
+>cond ? c1 : c2 : "bar" | "foo"
 >cond : boolean
->c1 : "foo" | "bar"
->c2 : "foo" | "bar"
+>c1 : "bar" | "foo"
+>c2 : "bar" | "foo"
 
     const c4 = cond ? c3 : "baz";  // "foo" | "bar" | widening "baz"
->c4 : "foo" | "bar" | "baz"
->cond ? c3 : "baz" : "foo" | "bar" | "baz"
+>c4 : "bar" | "baz" | "foo"
+>cond ? c3 : "baz" : "bar" | "baz" | "foo"
 >cond : boolean
->c3 : "foo" | "bar"
+>c3 : "bar" | "foo"
 >"baz" : "baz"
 
     const c5: "foo" | "bar" | "baz" = c4; // "foo" | "bar" | "baz"
->c5 : "foo" | "bar" | "baz"
->c4 : "foo" | "bar" | "baz"
+>c5 : "bar" | "baz" | "foo"
+>c4 : "bar" | "baz" | "foo"
 
     let v1 = c1;  // string
 >v1 : string
->c1 : "foo" | "bar"
+>c1 : "bar" | "foo"
 
     let v2 = c2;  // "foo" | "bar"
->v2 : "foo" | "bar"
->c2 : "foo" | "bar"
+>v2 : "bar" | "foo"
+>c2 : "bar" | "foo"
 
     let v3 = c3;  // "foo" | "bar"
->v3 : "foo" | "bar"
->c3 : "foo" | "bar"
+>v3 : "bar" | "foo"
+>c3 : "bar" | "foo"
 
     let v4 = c4;  // string
 >v4 : string
->c4 : "foo" | "bar" | "baz"
+>c4 : "bar" | "baz" | "foo"
 
     let v5 = c5;  // "foo" | "bar" | "baz"
->v5 : "foo" | "bar" | "baz"
->c5 : "foo" | "bar" | "baz"
+>v5 : "bar" | "baz" | "foo"
+>c5 : "bar" | "baz" | "foo"
 }
 
 function f3() {
@@= skipped -179, +179 lines =@@
 
 declare function widening<T>(x: T): T;
 >widening : <T>(x: T) => T
+>T : T
 >x : T
 
 declare function nonWidening<T extends string | number | symbol>(x: T): T;
 >nonWidening : <T extends string | number | symbol>(x: T) => T
+>T : T
 >x : T
 
 function f6(cond: boolean) {
@@= skipped -64, +66 lines =@@
 
 type Result<T> = T | FAILURE;
 >Result : Result<T>
+>T : T
 
 function doWork<T>(): Result<T> {
 >doWork : <T>() => Result<T>
+>T : T
 
   return FAILURE;
 >FAILURE : "FAILURE"
@@= skipped -10, +12 lines =@@
 
 function isSuccess<T>(result: Result<T>): result is T {
 >isSuccess : <T>(result: Result<T>) => result is T
+>T : T
 >result : Result<T>
 
   return !isFailure(result);
 >!isFailure(result) : boolean
 >isFailure(result) : boolean
->isFailure : <T_1>(result: Result<T_1>) => result is FAILURE
+>isFailure : <T>(result: Result<T>) => result is "FAILURE"
 >result : Result<T>
 }
 
 function isFailure<T>(result: Result<T>): result is FAILURE {
->isFailure : <T>(result: Result<T>) => result is FAILURE
+>isFailure : <T>(result: Result<T>) => result is "FAILURE"
+>T : T
 >result : Result<T>
 
   return result === FAILURE;
@@= skipped -62, +64 lines =@@
 // Repro from #23649
 
 export function Set<K extends string>(...keys: K[]): Record<K, true | undefined> {
->Set : <K extends string>(...keys: K[]) => Record<K, true | undefined>
+>Set : <K extends string>(...keys: K[]) => Record<K, true>
+>K : K
 >keys : K[]
 >true : true
 
@@= skipped -29, +30 lines =@@
 
 export function keys<K extends string, V>(obj: Record<K, V>): K[] {
 >keys : <K extends string, V>(obj: Record<K, V>) => K[]
+>K : K
+>V : V
 >obj : Record<K, V>
 
   return Object.keys(obj) as K[]
@@= skipped -13, +15 lines =@@
 
 type Obj = { code: LangCode }
 >Obj : Obj
->code : "fr" | "en" | "es" | "it" | "nl"
+>code : "en" | "es" | "fr" | "it" | "nl"
 
 const langCodeSet = Set('fr', 'en', 'es', 'it', 'nl')
->langCodeSet : Record<"fr" | "en" | "es" | "it" | "nl", true>
->Set('fr', 'en', 'es', 'it', 'nl') : Record<"fr" | "en" | "es" | "it" | "nl", true>
->Set : <K extends string>(...keys: K[]) => Record<K, true | undefined>
+>langCodeSet : Record<"en" | "es" | "fr" | "it" | "nl", true>
+>Set('fr', 'en', 'es', 'it', 'nl') : Record<"en" | "es" | "fr" | "it" | "nl", true>
+>Set : <K extends string>(...keys: K[]) => Record<K, true>
 >'fr' : "fr"
 >'en' : "en"
 >'es' : "es"
@@= skipped -13, +13 lines =@@
 >'nl' : "nl"
 
 export type LangCode = keyof typeof langCodeSet
->LangCode : "fr" | "en" | "es" | "it" | "nl"
->langCodeSet : Record<"fr" | "en" | "es" | "it" | "nl", true>
+>LangCode : "en" | "es" | "fr" | "it" | "nl"
 
 export const langCodes = keys(langCodeSet)
->langCodes : ("fr" | "en" | "es" | "it" | "nl")[]
->keys(langCodeSet) : ("fr" | "en" | "es" | "it" | "nl")[]
+>langCodes : ("en" | "es" | "fr" | "it" | "nl")[]
+>keys(langCodeSet) : ("en" | "es" | "fr" | "it" | "nl")[]
 >keys : <K extends string, V>(obj: Record<K, V>) => K[]
->langCodeSet : Record<"fr" | "en" | "es" | "it" | "nl", true>
+>langCodeSet : Record<"en" | "es" | "fr" | "it" | "nl", true>
 
 const arr: Obj[] = langCodes.map(code => ({ code }))
 >arr : Obj[]
->langCodes.map(code => ({ code })) : { code: "fr" | "en" | "es" | "it" | "nl"; }[]
->langCodes.map : <U>(callbackfn: (value: "fr" | "en" | "es" | "it" | "nl", index: number, array: ("fr" | "en" | "es" | "it" | "nl")[]) => U, thisArg?: any) => U[]
->langCodes : ("fr" | "en" | "es" | "it" | "nl")[]
->map : <U>(callbackfn: (value: "fr" | "en" | "es" | "it" | "nl", index: number, array: ("fr" | "en" | "es" | "it" | "nl")[]) => U, thisArg?: any) => U[]
->code => ({ code }) : (code: "fr" | "en" | "es" | "it" | "nl") => { code: "fr" | "en" | "es" | "it" | "nl"; }
->code : "fr" | "en" | "es" | "it" | "nl"
->({ code }) : { code: "fr" | "en" | "es" | "it" | "nl"; }
->{ code } : { code: "fr" | "en" | "es" | "it" | "nl"; }
->code : "fr" | "en" | "es" | "it" | "nl"
+>langCodes.map(code => ({ code })) : { code: "en" | "es" | "fr" | "it" | "nl"; }[]
+>langCodes.map : <U>(callbackfn: (value: "en" | "es" | "fr" | "it" | "nl", index: number, array: ("en" | "es" | "fr" | "it" | "nl")[]) => U, thisArg?: any) => U[]
+>langCodes : ("en" | "es" | "fr" | "it" | "nl")[]
+>map : <U>(callbackfn: (value: "en" | "es" | "fr" | "it" | "nl", index: number, array: ("en" | "es" | "fr" | "it" | "nl")[]) => U, thisArg?: any) => U[]
+>code => ({ code }) : (code: "en" | "es" | "fr" | "it" | "nl") => { code: "en" | "es" | "fr" | "it" | "nl"; }
+>code : "en" | "es" | "fr" | "it" | "nl"
+>({ code }) : { code: "en" | "es" | "fr" | "it" | "nl"; }
+>{ code } : { code: "en" | "es" | "fr" | "it" | "nl"; }
+>code : any
 
 // Repro from #29081
 
 function test<T extends { a: string, b: string }>(obj: T): T {
 >test : <T extends { a: string; b: string; }>(obj: T) => T
+>T : T
 >a : string
 >b : string
 >obj : T
@@= skipped -46, +46 lines =@@
 
 declare function f<T>(x: T): NonNullable<T>;
 >f : <T>(x: T) => NonNullable<T>
+>T : T
 >x : T
 
 enum E { A, B }
