//// [tests/cases/conformance/salsa/typeFromPropertyAssignment23.ts] ////

=== a.js ===
class B {
>B : Symbol(B, Decl(a.js, 0, 0))

    constructor () {
        this.n = 1
>this : Symbol(B, Decl(a.js, 0, 0))
    }
    foo() {
>foo : Symbol(foo, Decl(a.js, 3, 5))
    }
}

class C extends B { }
>C : Symbol(C, Decl(a.js, 6, 1))
>B : Symbol(B, Decl(a.js, 0, 0))

// this override should be fine (even if it's a little odd)
C.prototype.foo = function() {
>C.prototype.foo : Symbol(foo, Decl(a.js, 3, 5))
>C.prototype : Symbol(prototype)
>C : Symbol(C, Decl(a.js, 6, 1))
>prototype : Symbol(prototype)
>foo : Symbol(foo, Decl(a.js, 3, 5))
}

class D extends B { }
>D : Symbol(D, Decl(a.js, 12, 1))
>B : Symbol(B, Decl(a.js, 0, 0))

D.prototype.foo = () =>  {
>D.prototype.foo : Symbol(foo, Decl(a.js, 3, 5))
>D.prototype : Symbol(prototype)
>D : Symbol(D, Decl(a.js, 12, 1))
>prototype : Symbol(prototype)
>foo : Symbol(foo, Decl(a.js, 3, 5))

    this.n = 'not checked, so no error'
>this : Symbol(globalThis)
}

// post-class prototype assignments are trying to show that these properties are abstract
class Module {
>Module : Symbol(Module, Decl(a.js, 17, 1))
}
Module.prototype.identifier = undefined
>Module.prototype : Symbol(prototype)
>Module : Symbol(Module, Decl(a.js, 17, 1))
>prototype : Symbol(prototype)
>undefined : Symbol(undefined)

Module.prototype.size = null
>Module.prototype : Symbol(prototype)
>Module : Symbol(Module, Decl(a.js, 17, 1))
>prototype : Symbol(prototype)

class NormalModule extends Module {
>NormalModule : Symbol(NormalModule, Decl(a.js, 23, 28))
>Module : Symbol(Module, Decl(a.js, 17, 1))

    identifier() {
>identifier : Symbol(identifier, Decl(a.js, 25, 35))

        return 'normal'
    }
    size() {
>size : Symbol(size, Decl(a.js, 28, 5))

        return 0
    }
}

