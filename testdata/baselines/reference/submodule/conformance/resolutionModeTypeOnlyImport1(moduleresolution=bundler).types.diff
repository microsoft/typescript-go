--- old.resolutionModeTypeOnlyImport1(moduleresolution=bundler).types
+++ new.resolutionModeTypeOnlyImport1(moduleresolution=bundler).types
@@= skipped -9, +9 lines =@@
 
 === /app.ts ===
 import type { x as Default } from "foo";
->x : "module"
+>x : "script"
 >Default : any
 
 import type { x as Import } from "foo" assert { "resolution-mode": "import" };
->x : "module"
+>x : "script"
 >Import : any
 
 import type { x as Require } from "foo" assert { "resolution-mode": "require" };
@@= skipped -12, +12 lines =@@
 >Require : any
 
 type _Default = typeof Default;
->_Default : "module"
->Default : "module"
+>_Default : "script"
 
 type _Import = typeof Import;
->_Import : "module"
->Import : "module"
+>_Import : "script"
 
 type _Require = typeof Require;
 >_Require : "script"
->Require : "script"
 
 // resolution-mode does not enforce file extension in `bundler`, just sets conditions
 import type { x as ImportRelative } from "./other" assert { "resolution-mode": "import" };
@@= skipped -22, +19 lines =@@
 
 type _ImportRelative = typeof ImportRelative;
 >_ImportRelative : "other"
->ImportRelative : "other"
 
 type _RequireRelative = typeof RequireRelative;
 >_RequireRelative : "other"
->RequireRelative : "other"
 
 export {
   _Default,
