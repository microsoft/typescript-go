--- old.jsDeclarationsFunctionClassesCjsExportAssignment.symbols
+++ new.jsDeclarationsFunctionClassesCjsExportAssignment.symbols
@@= skipped -8, +8 lines =@@
 >timeout : Symbol(timeout, Decl(timer.js, 3, 15))
 
     this.timeout = timeout;
->this.timeout : Symbol(Timer.timeout, Decl(timer.js, 3, 25))
->this : Symbol(Timer, Decl(timer.js, 0, 0))
->timeout : Symbol(Timer.timeout, Decl(timer.js, 3, 25))
 >timeout : Symbol(timeout, Decl(timer.js, 3, 15))
 }
 module.exports = Timer;
->module.exports : Symbol(module.exports, Decl(timer.js, 0, 0))
->module : Symbol(export=, Decl(timer.js, 5, 1))
->exports : Symbol(export=, Decl(timer.js, 5, 1))
 >Timer : Symbol(Timer, Decl(timer.js, 0, 0))
 
 === hook.js ===
 /**
  * @typedef {(arg: import("./context")) => void} HookHandler
+>HookHandler : Symbol(HookHandler, Decl(hook.js, 1, 3))
+>arg : Symbol(arg, Decl(hook.js, 1, 14))
+
  */
 /**
  * @param {HookHandler} handle
@@= skipped -23, +20 lines =@@
 >handle : Symbol(handle, Decl(hook.js, 6, 14))
 
     this.handle = handle;
->this.handle : Symbol(Hook.handle, Decl(hook.js, 6, 23))
->this : Symbol(Hook, Decl(hook.js, 0, 0))
->handle : Symbol(Hook.handle, Decl(hook.js, 6, 23))
 >handle : Symbol(handle, Decl(hook.js, 6, 14))
 }
 module.exports = Hook;
->module.exports : Symbol(module.exports, Decl(hook.js, 0, 0))
->module : Symbol(export=, Decl(hook.js, 8, 1))
->exports : Symbol(export=, Decl(hook.js, 8, 1))
 >Hook : Symbol(Hook, Decl(hook.js, 0, 0))
 
 === context.js ===
@@= skipped -16, +10 lines =@@
  * Imports
  *
  * @typedef {import("./timer")} Timer
+>Timer : Symbol(Timer, Decl(context.js, 3, 3))
+
  * @typedef {import("./hook")} Hook
+>Hook : Symbol(Hook, Decl(context.js, 4, 3))
+
  * @typedef {import("./hook").HookHandler} HookHandler
+>HookHandler : Symbol(HookHandler, Decl(context.js, 5, 3))
+>HookHandler : Symbol(HookHandler, Decl(hook.js, 1, 3))
+
  */
 
 /**
  * Input type definition
  *
  * @typedef {Object} Input
+>Input : Symbol(Input, Decl(context.js, 11, 3))
+
  * @prop {Timer} timer
+>timer : Symbol(timer, Decl(context.js, 12, 3))
+>Timer : Symbol(Timer, Decl(context.js, 3, 3))
+
  * @prop {Hook} hook
+>hook : Symbol(hook, Decl(context.js, 13, 3))
+>Hook : Symbol(Hook, Decl(context.js, 4, 3))
+
  */
  
 /**
  * State type definition
  *
  * @typedef {Object} State
+>State : Symbol(State, Decl(context.js, 19, 3))
+
  * @prop {Timer} timer
+>timer : Symbol(timer, Decl(context.js, 20, 3))
+>Timer : Symbol(Timer, Decl(context.js, 3, 3))
+
  * @prop {Hook} hook
+>hook : Symbol(hook, Decl(context.js, 21, 3))
+>Hook : Symbol(Hook, Decl(context.js, 4, 3))
+
  */
 
 /**
@@= skipped -28, +51 lines =@@
  */
 
 function Context(input) {
->Context : Symbol(Context, Decl(context.js, 0, 0), Decl(context.js, 36, 1))
+>Context : Symbol(Context, Decl(context.js, 0, 0))
 >input : Symbol(input, Decl(context.js, 31, 17))
 
     if (!(this instanceof Context)) {
->this : Symbol(Context, Decl(context.js, 0, 0), Decl(context.js, 36, 1))
->Context : Symbol(Context, Decl(context.js, 0, 0), Decl(context.js, 36, 1))
+>Context : Symbol(Context, Decl(context.js, 0, 0))
 
       return new Context(input)
->Context : Symbol(Context, Decl(context.js, 0, 0), Decl(context.js, 36, 1))
+>Context : Symbol(Context, Decl(context.js, 0, 0))
 >input : Symbol(input, Decl(context.js, 31, 17))
     }
     this.state = this.construct(input);
->this.state : Symbol(Context.state, Decl(context.js, 34, 5))
->state : Symbol(Context.state, Decl(context.js, 34, 5))
->this.construct : Symbol(construct, Decl(context.js, 37, 21), Decl(context.js, 37, 21))
->construct : Symbol(construct, Decl(context.js, 37, 21), Decl(context.js, 37, 21))
 >input : Symbol(input, Decl(context.js, 31, 17))
 }
 Context.prototype = {
->Context.prototype : Symbol(Context.prototype, Decl(context.js, 36, 1))
->Context : Symbol(Context, Decl(context.js, 0, 0), Decl(context.js, 36, 1))
->prototype : Symbol(Context.prototype, Decl(context.js, 36, 1))
+>Context.prototype : Symbol(prototype, Decl(context.js, 36, 1))
+>Context : Symbol(Context, Decl(context.js, 0, 0))
+>prototype : Symbol(prototype, Decl(context.js, 36, 1))
 
     /**
      * @param {Input} input
@@= skipped -38, +33 lines =@@
     }
 }
 module.exports = Context;
->module.exports : Symbol(module.exports, Decl(context.js, 0, 0))
->module : Symbol(export=, Decl(context.js, 46, 1))
->exports : Symbol(export=, Decl(context.js, 46, 1))
->Context : Symbol(Context, Decl(context.js, 0, 0), Decl(context.js, 36, 1))
+>Context : Symbol(Context, Decl(context.js, 0, 0))
 
