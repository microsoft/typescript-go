--- old.emitExponentiationOperatorInTemplateString1.types
+++ new.emitExponentiationOperatorInTemplateString1.types
@@= skipped -2, +2 lines =@@
 === emitExponentiationOperatorInTemplateString1.ts ===
 var t1 = 10;
 >t1 : number
->   : ^^^^^^
 >10 : 10
->   : ^^
 
 var t2 = 10;
 >t2 : number
->   : ^^^^^^
 >10 : 10
->   : ^^
 
 var s;
 >s : any
@@= skipped -16, +12 lines =@@
 // TempateHead & TemplateTail are empty
 `${t1 ** t2}`;
 >`${t1 ** t2}` : string
->              : ^^^^^^
 >t1 ** t2 : number
->         : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 
 `${t1 ** t2 ** t1}`;
 >`${t1 ** t2 ** t1}` : string
->                    : ^^^^^^
 >t1 ** t2 ** t1 : number
->               : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${t1 + t2 ** t1}`;
 >`${t1 + t2 ** t1}` : string
->                   : ^^^^^^
 >t1 + t2 ** t1 : number
->              : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${t1 ** t2 + t1}`;
 >`${t1 ** t2 + t1}` : string
->                   : ^^^^^^
 >t1 ** t2 + t1 : number
->              : ^^^^^^
 >t1 ** t2 : number
->         : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${t1 + t2 ** t2 + t1 }`;
 >`${t1 + t2 ** t2 + t1 }` : string
->                         : ^^^^^^
 >t1 + t2 ** t2 + t1 : number
->                   : ^^^^^^
 >t1 + t2 ** t2 : number
->              : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t2 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${typeof (t1 ** t2 ** t1) }`;
 >`${typeof (t1 ** t2 ** t1) }` : string
->                              : ^^^^^^
->typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof (t1 ** t2 ** t1) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(t1 ** t2 ** t1) : number
->                 : ^^^^^^
 >t1 ** t2 ** t1 : number
->               : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${1 + typeof (t1 ** t2 ** t1) }`;
 >`${1 + typeof (t1 ** t2 ** t1) }` : string
->                                  : ^^^^^^
 >1 + typeof (t1 ** t2 ** t1) : string
->                            : ^^^^^^
 >1 : 1
->  : ^
->typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof (t1 ** t2 ** t1) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(t1 ** t2 ** t1) : number
->                 : ^^^^^^
 >t1 ** t2 ** t1 : number
->               : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${t1 ** t2}${t1 ** t2}`;
 >`${t1 ** t2}${t1 ** t2}` : string
->                         : ^^^^^^
 >t1 ** t2 : number
->         : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 ** t2 : number
->         : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 
 `${t1 ** t2 ** t1}${t1 ** t2 ** t1}`;
 >`${t1 ** t2 ** t1}${t1 ** t2 ** t1}` : string
->                                     : ^^^^^^
 >t1 ** t2 ** t1 : number
->               : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t1 ** t2 ** t1 : number
->               : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${t1 + t2 ** t1}${t1 + t2 ** t1}`;
 >`${t1 + t2 ** t1}${t1 + t2 ** t1}` : string
->                                   : ^^^^^^
 >t1 + t2 ** t1 : number
->              : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t1 + t2 ** t1 : number
->              : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${t1 ** t2 + t1}${t1 ** t2 + t1}`;
 >`${t1 ** t2 + t1}${t1 ** t2 + t1}` : string
->                                   : ^^^^^^
 >t1 ** t2 + t1 : number
->              : ^^^^^^
 >t1 ** t2 : number
->         : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t1 ** t2 + t1 : number
->              : ^^^^^^
 >t1 ** t2 : number
->         : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${t1 + t2 ** t2 + t1}${t1 + t2 ** t2 + t1}`;
 >`${t1 + t2 ** t2 + t1}${t1 + t2 ** t2 + t1}` : string
->                                             : ^^^^^^
 >t1 + t2 ** t2 + t1 : number
->                   : ^^^^^^
 >t1 + t2 ** t2 : number
->              : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t2 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t1 + t2 ** t2 + t1 : number
->                   : ^^^^^^
 >t1 + t2 ** t2 : number
->              : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t2 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${typeof (t1 ** t2 ** t1)}${typeof (t1 ** t2 ** t1)}`;
 >`${typeof (t1 ** t2 ** t1)}${typeof (t1 ** t2 ** t1)}` : string
->                                                       : ^^^^^^
->typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof (t1 ** t2 ** t1) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(t1 ** t2 ** t1) : number
->                 : ^^^^^^
 >t1 ** t2 ** t1 : number
->               : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
->typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof (t1 ** t2 ** t1) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(t1 ** t2 ** t1) : number
->                 : ^^^^^^
 >t1 ** t2 ** t1 : number
->               : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${t1 ** t2} hello world ${t1 ** t2}`;
 >`${t1 ** t2} hello world ${t1 ** t2}` : string
->                                      : ^^^^^^
 >t1 ** t2 : number
->         : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 ** t2 : number
->         : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 
 `${t1 ** t2 ** t1} hello world ${t1 ** t2 ** t1}`;
 >`${t1 ** t2 ** t1} hello world ${t1 ** t2 ** t1}` : string
->                                                  : ^^^^^^
 >t1 ** t2 ** t1 : number
->               : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t1 ** t2 ** t1 : number
->               : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${t1 + t2 ** t1} hello world ${t1 + t2 ** t1}`;
 >`${t1 + t2 ** t1} hello world ${t1 + t2 ** t1}` : string
->                                                : ^^^^^^
 >t1 + t2 ** t1 : number
->              : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t1 + t2 ** t1 : number
->              : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${t1 ** t2 + t1} hello world ${t1 ** t2 + t1}`;
 >`${t1 ** t2 + t1} hello world ${t1 ** t2 + t1}` : string
->                                                : ^^^^^^
 >t1 ** t2 + t1 : number
->              : ^^^^^^
 >t1 ** t2 : number
->         : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t1 ** t2 + t1 : number
->              : ^^^^^^
 >t1 ** t2 : number
->         : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${t1 + t2 ** t2 + t1} hello world ${t1 + t2 ** t2 + t1}`;
 >`${t1 + t2 ** t2 + t1} hello world ${t1 + t2 ** t2 + t1}` : string
->                                                          : ^^^^^^
 >t1 + t2 ** t2 + t1 : number
->                   : ^^^^^^
 >t1 + t2 ** t2 : number
->              : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t2 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t1 + t2 ** t2 + t1 : number
->                   : ^^^^^^
 >t1 + t2 ** t2 : number
->              : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t2 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
 `${typeof (t1 ** t2 ** t1) } hello world ${typeof (t1 ** t2 ** t1) }`;
 >`${typeof (t1 ** t2 ** t1) } hello world ${typeof (t1 ** t2 ** t1) }` : string
->                                                                      : ^^^^^^
->typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof (t1 ** t2 ** t1) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(t1 ** t2 ** t1) : number
->                 : ^^^^^^
 >t1 ** t2 ** t1 : number
->               : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
->typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof (t1 ** t2 ** t1) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(t1 ** t2 ** t1) : number
->                 : ^^^^^^
 >t1 ** t2 ** t1 : number
->               : ^^^^^^
 >t1 : number
->   : ^^^^^^
 >t2 ** t1 : number
->         : ^^^^^^
 >t2 : number
->   : ^^^^^^
 >t1 : number
->   : ^^^^^^
 
