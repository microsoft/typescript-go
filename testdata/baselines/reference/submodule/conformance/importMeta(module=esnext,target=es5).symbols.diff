--- old.importMeta(module=esnext,target=es5).symbols
+++ new.importMeta(module=esnext,target=es5).symbols
@@= skipped -5, +5 lines =@@
   const response = await fetch(new URL("../hamsters.jpg", import.meta.url).toString());
 >response : Symbol(response, Decl(example.ts, 2, 7))
 >fetch : Symbol(fetch, Decl(lib.dom.d.ts, --, --))
->new URL("../hamsters.jpg", import.meta.url).toString : Symbol(URL.toString, Decl(lib.dom.d.ts, --, --))
+>new URL("../hamsters.jpg", import.meta.url).toString : Symbol(toString, Decl(lib.dom.d.ts, --, --))
 >URL : Symbol(URL, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
->import.meta.url : Symbol(ImportMeta.url, Decl(lib.dom.d.ts, --, --))
+>import.meta.url : Symbol(url, Decl(lib.dom.d.ts, --, --))
 >import.meta : Symbol(ImportMeta, Decl(lib.es5.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(assignmentTargets.ts, 4, 16))
->meta : Symbol(ImportMetaExpression.meta)
->url : Symbol(ImportMeta.url, Decl(lib.dom.d.ts, --, --))
->toString : Symbol(URL.toString, Decl(lib.dom.d.ts, --, --))
+>meta : Symbol(meta)
+>url : Symbol(url, Decl(lib.dom.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.dom.d.ts, --, --))
 
   const blob = await response.blob();
 >blob : Symbol(blob, Decl(example.ts, 3, 7))
->response.blob : Symbol(Body.blob, Decl(lib.dom.d.ts, --, --))
+>response.blob : Symbol(blob, Decl(lib.dom.d.ts, --, --))
 >response : Symbol(response, Decl(example.ts, 2, 7))
->blob : Symbol(Body.blob, Decl(lib.dom.d.ts, --, --))
+>blob : Symbol(blob, Decl(lib.dom.d.ts, --, --))
 
   const size = import.meta.scriptElement.dataset.size || 300;
 >size : Symbol(size, Decl(example.ts, 5, 7))
 >import.meta : Symbol(ImportMeta, Decl(lib.es5.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(assignmentTargets.ts, 4, 16))
->meta : Symbol(ImportMetaExpression.meta)
+>meta : Symbol(meta)
 
   const image = new Image();
 >image : Symbol(image, Decl(example.ts, 7, 7))
 >Image : Symbol(Image, Decl(lib.dom.d.ts, --, --))
 
   image.src = URL.createObjectURL(blob);
->image.src : Symbol(HTMLImageElement.src, Decl(lib.dom.d.ts, --, --))
+>image.src : Symbol(src, Decl(lib.dom.d.ts, --, --))
 >image : Symbol(image, Decl(example.ts, 7, 7))
->src : Symbol(HTMLImageElement.src, Decl(lib.dom.d.ts, --, --))
+>src : Symbol(src, Decl(lib.dom.d.ts, --, --))
 >URL.createObjectURL : Symbol(createObjectURL, Decl(lib.dom.d.ts, --, --))
 >URL : Symbol(URL, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
 >createObjectURL : Symbol(createObjectURL, Decl(lib.dom.d.ts, --, --))
 >blob : Symbol(blob, Decl(example.ts, 3, 7))
 
   image.width = image.height = size;
->image.width : Symbol(HTMLImageElement.width, Decl(lib.dom.d.ts, --, --))
+>image.width : Symbol(width, Decl(lib.dom.d.ts, --, --))
 >image : Symbol(image, Decl(example.ts, 7, 7))
->width : Symbol(HTMLImageElement.width, Decl(lib.dom.d.ts, --, --))
->image.height : Symbol(HTMLImageElement.height, Decl(lib.dom.d.ts, --, --))
+>width : Symbol(width, Decl(lib.dom.d.ts, --, --))
+>image.height : Symbol(height, Decl(lib.dom.d.ts, --, --))
 >image : Symbol(image, Decl(example.ts, 7, 7))
->height : Symbol(HTMLImageElement.height, Decl(lib.dom.d.ts, --, --))
+>height : Symbol(height, Decl(lib.dom.d.ts, --, --))
 >size : Symbol(size, Decl(example.ts, 5, 7))
 
   document.body.appendChild(image);
->document.body.appendChild : Symbol(Node.appendChild, Decl(lib.dom.d.ts, --, --))
->document.body : Symbol(Document.body, Decl(lib.dom.d.ts, --, --))
+>document.body.appendChild : Symbol(appendChild, Decl(lib.dom.d.ts, --, --))
+>document.body : Symbol(body, Decl(lib.dom.d.ts, --, --))
 >document : Symbol(document, Decl(lib.dom.d.ts, --, --))
->body : Symbol(Document.body, Decl(lib.dom.d.ts, --, --))
->appendChild : Symbol(Node.appendChild, Decl(lib.dom.d.ts, --, --))
+>body : Symbol(body, Decl(lib.dom.d.ts, --, --))
+>appendChild : Symbol(appendChild, Decl(lib.dom.d.ts, --, --))
 >image : Symbol(image, Decl(example.ts, 7, 7))
 
 })();
@@= skipped -55, +55 lines =@@
 export let x = import.meta;
 >x : Symbol(x, Decl(moduleLookingFile01.ts, 0, 10))
 >import.meta : Symbol(ImportMeta, Decl(lib.es5.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(assignmentTargets.ts, 4, 16))
->meta : Symbol(ImportMetaExpression.meta)
+>meta : Symbol(meta)
 
 export let y = import.metal;
 >y : Symbol(y, Decl(moduleLookingFile01.ts, 1, 10))
@@= skipped -12, +12 lines =@@
 let globalA = import.meta;
 >globalA : Symbol(globalA, Decl(scriptLookingFile01.ts, 0, 3))
 >import.meta : Symbol(ImportMeta, Decl(lib.es5.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(assignmentTargets.ts, 4, 16))
->meta : Symbol(ImportMetaExpression.meta)
+>meta : Symbol(meta)
 
 let globalB = import.metal;
 >globalB : Symbol(globalB, Decl(scriptLookingFile01.ts, 1, 3))
@@= skipped -13, +13 lines =@@
 >foo : Symbol(foo, Decl(assignmentTargets.ts, 0, 12))
 >ImportMeta : Symbol(ImportMeta, Decl(lib.es5.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(assignmentTargets.ts, 4, 16))
 >import.meta : Symbol(ImportMeta, Decl(lib.es5.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(assignmentTargets.ts, 4, 16))
->meta : Symbol(ImportMetaExpression.meta)
+>meta : Symbol(meta)
 >import.meta : Symbol(ImportMeta, Decl(lib.es5.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(assignmentTargets.ts, 4, 16))
->meta : Symbol(ImportMetaExpression.meta)
+>meta : Symbol(meta)
 >import.meta : Symbol(ImportMeta, Decl(lib.es5.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(assignmentTargets.ts, 4, 16))
->meta : Symbol(ImportMetaExpression.meta)
+>meta : Symbol(meta)
 
 import.meta = foo;
 >import.meta : Symbol(ImportMeta, Decl(lib.es5.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(assignmentTargets.ts, 4, 16))
->meta : Symbol(ImportMetaExpression.meta)
+>meta : Symbol(meta)
 >foo : Symbol(foo, Decl(assignmentTargets.ts, 0, 12))
 
 // @Filename augmentations.ts
 declare global {
->global : Symbol(global, Decl(assignmentTargets.ts, 1, 18))
+>global : Symbol((Missing), Decl(assignmentTargets.ts, 1, 18))
 
   interface ImportMeta {
 >ImportMeta : Symbol(ImportMeta, Decl(lib.es5.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(assignmentTargets.ts, 4, 16))
 
     wellKnownProperty: { a: number, b: string, c: boolean };
->wellKnownProperty : Symbol(ImportMeta.wellKnownProperty, Decl(assignmentTargets.ts, 5, 24))
+>wellKnownProperty : Symbol(wellKnownProperty, Decl(assignmentTargets.ts, 5, 24))
 >a : Symbol(a, Decl(assignmentTargets.ts, 6, 24))
 >b : Symbol(b, Decl(assignmentTargets.ts, 6, 35))
 >c : Symbol(c, Decl(assignmentTargets.ts, 6, 46))
@@= skipped -30, +30 lines =@@
 >a : Symbol(a, Decl(assignmentTargets.ts, 10, 7))
 >b : Symbol(b, Decl(assignmentTargets.ts, 10, 10))
 >c : Symbol(c, Decl(assignmentTargets.ts, 10, 13))
->import.meta.wellKnownProperty : Symbol(ImportMeta.wellKnownProperty, Decl(assignmentTargets.ts, 5, 24))
+>import.meta.wellKnownProperty : Symbol(wellKnownProperty, Decl(assignmentTargets.ts, 5, 24))
 >import.meta : Symbol(ImportMeta, Decl(lib.es5.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(assignmentTargets.ts, 4, 16))
->meta : Symbol(ImportMetaExpression.meta)
->wellKnownProperty : Symbol(ImportMeta.wellKnownProperty, Decl(assignmentTargets.ts, 5, 24))
+>meta : Symbol(meta)
+>wellKnownProperty : Symbol(wellKnownProperty, Decl(assignmentTargets.ts, 5, 24))
 
