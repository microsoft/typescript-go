--- old.typeGuardOfFormThisMember.symbols
+++ new.typeGuardOfFormThisMember.symbols
@@= skipped -8, +8 lines =@@
 >FileSystemObject : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMember.ts, 1, 16))
 
 		isFSO: this is FileSystemObject;
->isFSO : Symbol(FileSystemObject.isFSO, Decl(typeGuardOfFormThisMember.ts, 2, 32))
+>isFSO : Symbol(isFSO, Decl(typeGuardOfFormThisMember.ts, 2, 32))
 >FileSystemObject : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMember.ts, 1, 16))
 
 		get isFile(): this is File {
->isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
+>isFile : Symbol(isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
 >File : Symbol(File, Decl(typeGuardOfFormThisMember.ts, 15, 2))
 
 			return this instanceof File;
@@= skipped -12, +12 lines =@@
 >File : Symbol(File, Decl(typeGuardOfFormThisMember.ts, 15, 2))
 		}
 		set isFile(param) {
->isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
+>isFile : Symbol(isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
 >param : Symbol(param, Decl(typeGuardOfFormThisMember.ts, 7, 13))
 
 			// noop
 		}
 		get isDirectory(): this is Directory {
->isDirectory : Symbol(FileSystemObject.isDirectory, Decl(typeGuardOfFormThisMember.ts, 9, 3))
+>isDirectory : Symbol(isDirectory, Decl(typeGuardOfFormThisMember.ts, 9, 3))
 >Directory : Symbol(Directory, Decl(typeGuardOfFormThisMember.ts, 19, 2))
 
 			return this instanceof Directory;
@@= skipped -14, +14 lines =@@
 >Directory : Symbol(Directory, Decl(typeGuardOfFormThisMember.ts, 19, 2))
 		}
 		isNetworked: this is (Networked & this);
->isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
+>isNetworked : Symbol(isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
 >Networked : Symbol(Networked, Decl(typeGuardOfFormThisMember.ts, 22, 2))
 
 		constructor(public path: string) {}
->path : Symbol(FileSystemObject.path, Decl(typeGuardOfFormThisMember.ts, 14, 14))
+>path : Symbol(path, Decl(typeGuardOfFormThisMember.ts, 14, 14))
 	}
 
 	export class File extends FileSystemObject {
@@= skipped -13, +13 lines =@@
 
 		constructor(path: string, public content: string) { super(path); }
 >path : Symbol(path, Decl(typeGuardOfFormThisMember.ts, 18, 14))
->content : Symbol(File.content, Decl(typeGuardOfFormThisMember.ts, 18, 27))
+>content : Symbol(content, Decl(typeGuardOfFormThisMember.ts, 18, 27))
 >super : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMember.ts, 1, 16))
 >path : Symbol(path, Decl(typeGuardOfFormThisMember.ts, 18, 14))
 	}
@@= skipped -9, +9 lines =@@
 >FileSystemObject : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMember.ts, 1, 16))
 
 		children: FileSystemObject[];
->children : Symbol(Directory.children, Decl(typeGuardOfFormThisMember.ts, 20, 50))
+>children : Symbol(children, Decl(typeGuardOfFormThisMember.ts, 20, 50))
 >FileSystemObject : Symbol(FileSystemObject, Decl(typeGuardOfFormThisMember.ts, 1, 16))
 	}
 	export interface Networked {
 >Networked : Symbol(Networked, Decl(typeGuardOfFormThisMember.ts, 22, 2))
 
 		host: string;
->host : Symbol(Networked.host, Decl(typeGuardOfFormThisMember.ts, 23, 29))
+>host : Symbol(host, Decl(typeGuardOfFormThisMember.ts, 23, 29))
 	}
 
 	let file: FileSystemObject = new File("foo/bar.txt", "foo");
@@= skipped -16, +16 lines =@@
 >File : Symbol(File, Decl(typeGuardOfFormThisMember.ts, 15, 2))
 
 	file.isNetworked = false;
->file.isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
+>file.isNetworked : Symbol(isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
->isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
+>isNetworked : Symbol(isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
 
 	file.isFSO = file.isFile;
->file.isFSO : Symbol(FileSystemObject.isFSO, Decl(typeGuardOfFormThisMember.ts, 2, 32))
+>file.isFSO : Symbol(isFSO, Decl(typeGuardOfFormThisMember.ts, 2, 32))
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
->isFSO : Symbol(FileSystemObject.isFSO, Decl(typeGuardOfFormThisMember.ts, 2, 32))
->file.isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
+>isFSO : Symbol(isFSO, Decl(typeGuardOfFormThisMember.ts, 2, 32))
+>file.isFile : Symbol(isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
->isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
+>isFile : Symbol(isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
 
 	file.isFile = true;
->file.isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
+>file.isFile : Symbol(isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
->isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
+>isFile : Symbol(isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
 
 	let x = file.isFile;
 >x : Symbol(x, Decl(typeGuardOfFormThisMember.ts, 31, 4))
->file.isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
+>file.isFile : Symbol(isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
->isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
+>isFile : Symbol(isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
 
 	if (file.isFile) {
->file.isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
+>file.isFile : Symbol(isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
->isFile : Symbol(FileSystemObject.isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
+>isFile : Symbol(isFile, Decl(typeGuardOfFormThisMember.ts, 3, 34), Decl(typeGuardOfFormThisMember.ts, 6, 3))
 
 		file.content;
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
 
 		if (file.isNetworked) {
->file.isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
+>file.isNetworked : Symbol(isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
->isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
+>isNetworked : Symbol(isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
 
 			file.host;
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
@@= skipped -44, +44 lines =@@
 		}
 	}
 	else if (file.isDirectory) {
->file.isDirectory : Symbol(FileSystemObject.isDirectory, Decl(typeGuardOfFormThisMember.ts, 9, 3))
+>file.isDirectory : Symbol(isDirectory, Decl(typeGuardOfFormThisMember.ts, 9, 3))
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
->isDirectory : Symbol(FileSystemObject.isDirectory, Decl(typeGuardOfFormThisMember.ts, 9, 3))
+>isDirectory : Symbol(isDirectory, Decl(typeGuardOfFormThisMember.ts, 9, 3))
 
 		file.children;
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
 	}
 	else if (file.isNetworked) {
->file.isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
+>file.isNetworked : Symbol(isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
->isNetworked : Symbol(FileSystemObject.isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
+>isNetworked : Symbol(isNetworked, Decl(typeGuardOfFormThisMember.ts, 12, 3))
 
 		file.host;
 >file : Symbol(file, Decl(typeGuardOfFormThisMember.ts, 27, 4))
@@= skipped -23, +23 lines =@@
 >T : Symbol(T, Decl(typeGuardOfFormThisMember.ts, 46, 28))
 
 		lead(): void;
->lead : Symbol(GenericLeadGuard.lead, Decl(typeGuardOfFormThisMember.ts, 46, 56))
+>lead : Symbol(lead, Decl(typeGuardOfFormThisMember.ts, 46, 56))
 	}
 	
 	interface GenericFollowerGuard<T> extends GenericGuard<T> {
@@= skipped -10, +10 lines =@@
 >T : Symbol(T, Decl(typeGuardOfFormThisMember.ts, 50, 32))
 
 		follow(): void;
->follow : Symbol(GenericFollowerGuard.follow, Decl(typeGuardOfFormThisMember.ts, 50, 60))
+>follow : Symbol(follow, Decl(typeGuardOfFormThisMember.ts, 50, 60))
 	}
 	
 	interface GenericGuard<T> {
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(typeGuardOfFormThisMember.ts, 54, 24))
 
 		target: T;
->target : Symbol(GenericGuard.target, Decl(typeGuardOfFormThisMember.ts, 54, 28))
+>target : Symbol(target, Decl(typeGuardOfFormThisMember.ts, 54, 28))
 >T : Symbol(T, Decl(typeGuardOfFormThisMember.ts, 54, 24))
 
 		isLeader: this is (GenericLeadGuard<T>);
->isLeader : Symbol(GenericGuard.isLeader, Decl(typeGuardOfFormThisMember.ts, 55, 12))
+>isLeader : Symbol(isLeader, Decl(typeGuardOfFormThisMember.ts, 55, 12))
 >GenericLeadGuard : Symbol(GenericLeadGuard, Decl(typeGuardOfFormThisMember.ts, 44, 2))
 >T : Symbol(T, Decl(typeGuardOfFormThisMember.ts, 54, 24))
 
 		isFollower: this is GenericFollowerGuard<T>;
->isFollower : Symbol(GenericGuard.isFollower, Decl(typeGuardOfFormThisMember.ts, 56, 42))
+>isFollower : Symbol(isFollower, Decl(typeGuardOfFormThisMember.ts, 56, 42))
 >GenericFollowerGuard : Symbol(GenericFollowerGuard, Decl(typeGuardOfFormThisMember.ts, 48, 2))
 >T : Symbol(T, Decl(typeGuardOfFormThisMember.ts, 54, 24))
 	}
@@= skipped -20, +20 lines =@@
 >File : Symbol(File, Decl(typeGuardOfFormThisMember.ts, 15, 2))
 
 	if (guard.isLeader) {
->guard.isLeader : Symbol(GenericGuard.isLeader, Decl(typeGuardOfFormThisMember.ts, 55, 12))
+>guard.isLeader : Symbol(isLeader, Decl(typeGuardOfFormThisMember.ts, 55, 12))
 >guard : Symbol(guard, Decl(typeGuardOfFormThisMember.ts, 60, 4))
->isLeader : Symbol(GenericGuard.isLeader, Decl(typeGuardOfFormThisMember.ts, 55, 12))
+>isLeader : Symbol(isLeader, Decl(typeGuardOfFormThisMember.ts, 55, 12))
 
 		guard.lead();
 >guard : Symbol(guard, Decl(typeGuardOfFormThisMember.ts, 60, 4))
 	}
 	else if (guard.isFollower) {
->guard.isFollower : Symbol(GenericGuard.isFollower, Decl(typeGuardOfFormThisMember.ts, 56, 42))
+>guard.isFollower : Symbol(isFollower, Decl(typeGuardOfFormThisMember.ts, 56, 42))
 >guard : Symbol(guard, Decl(typeGuardOfFormThisMember.ts, 60, 4))
->isFollower : Symbol(GenericGuard.isFollower, Decl(typeGuardOfFormThisMember.ts, 56, 42))
+>isFollower : Symbol(isFollower, Decl(typeGuardOfFormThisMember.ts, 56, 42))
 
 		guard.follow();
 >guard : Symbol(guard, Decl(typeGuardOfFormThisMember.ts, 60, 4))
@@= skipped -20, +20 lines =@@
 >SpecificGuard : Symbol(SpecificGuard, Decl(typeGuardOfFormThisMember.ts, 66, 2))
 
 		isMoreSpecific: this is MoreSpecificGuard;
->isMoreSpecific : Symbol(SpecificGuard.isMoreSpecific, Decl(typeGuardOfFormThisMember.ts, 68, 26))
+>isMoreSpecific : Symbol(isMoreSpecific, Decl(typeGuardOfFormThisMember.ts, 68, 26))
 >MoreSpecificGuard : Symbol(MoreSpecificGuard, Decl(typeGuardOfFormThisMember.ts, 70, 2))
 	}
 
@@= skipped -9, +9 lines =@@
 >SpecificGuard : Symbol(SpecificGuard, Decl(typeGuardOfFormThisMember.ts, 66, 2))
 
 		do(): void;
->do : Symbol(MoreSpecificGuard.do, Decl(typeGuardOfFormThisMember.ts, 72, 52))
+>do : Symbol(do, Decl(typeGuardOfFormThisMember.ts, 72, 52))
 	}
 
 	let general: SpecificGuard;
@@= skipped -8, +8 lines =@@
 >SpecificGuard : Symbol(SpecificGuard, Decl(typeGuardOfFormThisMember.ts, 66, 2))
 
 	if (general.isMoreSpecific) {
->general.isMoreSpecific : Symbol(SpecificGuard.isMoreSpecific, Decl(typeGuardOfFormThisMember.ts, 68, 26))
+>general.isMoreSpecific : Symbol(isMoreSpecific, Decl(typeGuardOfFormThisMember.ts, 68, 26))
 >general : Symbol(general, Decl(typeGuardOfFormThisMember.ts, 76, 4))
->isMoreSpecific : Symbol(SpecificGuard.isMoreSpecific, Decl(typeGuardOfFormThisMember.ts, 68, 26))
+>isMoreSpecific : Symbol(isMoreSpecific, Decl(typeGuardOfFormThisMember.ts, 68, 26))
 
 		general.do();
 >general : Symbol(general, Decl(typeGuardOfFormThisMember.ts, 76, 4))
