--- old.stringLiteralTypesAsTypeParameterConstraint02.types
+++ new.stringLiteralTypesAsTypeParameterConstraint02.types
@@= skipped -2, +2 lines =@@
 === stringLiteralTypesAsTypeParameterConstraint02.ts ===
 function foo<T extends "foo">(f: (x: T) => T) {
 >foo : <T extends "foo">(f: (x: T) => T) => (x: T) => T
->    : ^ ^^^^^^^^^     ^^ ^^           ^^^^^^ ^^ ^^^^^ 
+>T : T
 >f : (x: T) => T
->  : ^ ^^ ^^^^^ 
 >x : T
->  : ^
 
     return f;
 >f : (x: T) => T
->  : ^ ^^ ^^^^^ 
 }
 
 let f = foo((y: "foo" | "bar") => y === "foo" ? y : "foo");
 >f : (x: "foo") => "foo"
->  : ^ ^^^^^^^^^^^^^^^^^
 >foo((y: "foo" | "bar") => y === "foo" ? y : "foo") : (x: "foo") => "foo"
->                                                   : ^ ^^^^^^^^^^^^^^^^^
 >foo : <T extends "foo">(f: (x: T) => T) => (x: T) => T
->    : ^ ^^^^^^^^^     ^^ ^^           ^^^^^^ ^^ ^^^^^ 
->(y: "foo" | "bar") => y === "foo" ? y : "foo" : (y: "foo" | "bar") => "foo"
->                                              : ^ ^^             ^^^^^^^^^^
->y : "foo" | "bar"
->  : ^^^^^^^^^^^^^
+>(y: "foo" | "bar") => y === "foo" ? y : "foo" : (y: "bar" | "foo") => "foo"
+>y : "bar" | "foo"
 >y === "foo" ? y : "foo" : "foo"
->                        : ^^^^^
 >y === "foo" : boolean
->            : ^^^^^^^
->y : "foo" | "bar"
->  : ^^^^^^^^^^^^^
+>y : "bar" | "foo"
 >"foo" : "foo"
->      : ^^^^^
 >y : "foo"
->  : ^^^^^
 >"foo" : "foo"
->      : ^^^^^
 
 let fResult = f("foo");
 >fResult : "foo"
->        : ^^^^^
 >f("foo") : "foo"
->         : ^^^^^
 >f : (x: "foo") => "foo"
->  : ^ ^^^^^^^^^^^^^^^^^
 >"foo" : "foo"
->      : ^^^^^
 
