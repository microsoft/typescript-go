--- old.genericCallWithObjectTypeArgsAndInitializers.types
+++ new.genericCallWithObjectTypeArgsAndInitializers.types
@@= skipped -4, +4 lines =@@
 
 function foo<T>(x: T = null) { return x; } // ok
 >foo : <T>(x?: T) => T
+>T : T
 >x : T
 >x : T
 
 function foo2<T>(x: T = undefined) { return x; } // ok
 >foo2 : <T>(x?: T) => T
+>T : T
 >x : T
 >undefined : undefined
 >x : T
 
 function foo3<T extends Number>(x: T = 1) { } // error
 >foo3 : <T extends Number>(x?: T) => void
+>T : T
 >x : T
 >1 : 1
 
 function foo4<T, U extends T>(x: T, y: U = x) { } // error
 >foo4 : <T, U extends T>(x: T, y?: U) => void
+>T : T
+>U : U
 >x : T
 >y : U
 >x : T
 
 function foo5<T, U extends T>(x: U, y: T = x) { } // ok
 >foo5 : <T, U extends T>(x: U, y?: T) => void
+>T : T
+>U : U
 >x : U
 >y : T
 >x : U
 
 function foo6<T, U extends T, V extends U>(x: T, y: U, z: V = y) { } // error
 >foo6 : <T, U extends T, V extends U>(x: T, y: U, z?: V) => void
+>T : T
+>U : U
+>V : V
 >x : T
 >y : U
 >z : V
@@= skipped -35, +45 lines =@@
 
 function foo7<T, U extends T, V extends U>(x: V, y: U = x) { } // should be ok
 >foo7 : <T, U extends T, V extends U>(x: V, y?: U) => void
+>T : T
+>U : U
+>V : V
 >x : V
 >y : U
 >x : V
