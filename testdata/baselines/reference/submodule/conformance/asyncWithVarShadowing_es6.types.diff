--- old.asyncWithVarShadowing_es6.types
+++ new.asyncWithVarShadowing_es6.types
@@= skipped -6, +6 lines =@@
 
 async function fn1(x) {
 >fn1 : (x: any) => Promise<void>
->    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var x;
@@= skipped -9, +8 lines =@@
 
 async function fn2(x) {
 >fn2 : (x: any) => Promise<void>
->    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var x, z;
@@= skipped -10, +9 lines =@@
 
 async function fn3(x) {
 >fn3 : (x: any) => Promise<void>
->    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var z;
@@= skipped -9, +8 lines =@@
 
 async function fn4(x) {
 >fn4 : (x: any) => Promise<void>
->    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var x = y;
@@= skipped -10, +9 lines =@@
 
 async function fn5(x) {
 >fn5 : (x: any) => Promise<void>
->    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var { x } = y;
 >x : any
->  : ^^^
 >y : any
 }
 
 async function fn6(x) {
 >fn6 : (x: any) => Promise<void>
->    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var { x, z } = y;
 >x : any
->  : ^^^
 >z : any
->  : ^^^
 >y : any
 }
 
 async function fn7(x) {
 >fn7 : (x: any) => Promise<void>
->    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var { x = y } = y;
 >x : any
->  : ^^^
 >y : any
->  : ^^^
 >y : any
 }
 
 async function fn8(x) {
 >fn8 : (x: any) => Promise<void>
->    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var { z: x } = y;
 >z : any
->  : ^^^
 >x : any
->  : ^^^
 >y : any
 }
 
 async function fn9(x) {
 >fn9 : (x: any) => Promise<void>
->    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var { z: { x } } = y;
 >z : any
->  : ^^^
 >x : any
->  : ^^^
 >y : any
 }
 
 async function fn10(x) {
 >fn10 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var { z: { x } = y } = y;
 >z : any
->  : ^^^
 >x : any
->  : ^^^
 >y : any
->  : ^^^
 >y : any
 }
 
 async function fn11(x) {
 >fn11 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var { ...x } = y;
 >x : any
->  : ^^^
 >y : any
 }
 
 async function fn12(x) {
 >fn12 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var [x] = y;
 >x : any
->  : ^^^
 >y : any
 }
 
 async function fn13(x) {
 >fn13 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var [x = y] = y;
 >x : any
->  : ^^^
 >y : any
->  : ^^^
 >y : any
 }
 
 async function fn14(x) {
 >fn14 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var [, x] = y;
-> : undefined
-> : ^^^^^^^^^
 >x : any
->  : ^^^
 >y : any
 }
 
 async function fn15(x) {
 >fn15 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var [...x] = y;
 >x : any
->  : ^^^
 >y : any
 }
 
 async function fn16(x) {
 >fn16 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var [[x]] = y;
 >x : any
->  : ^^^
 >y : any
 }
 
 async function fn17(x) {
 >fn17 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     var [[x] = y] = y;
 >x : any
->  : ^^^
 >y : any
->  : ^^^
 >y : any
 }
 
 async function fn18({ x }) {
->fn18 : ({ x }: { x: any; }) => Promise<void>
->     : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>fn18 : (__0: { x: any; }) => Promise<void>
 >x : any
->  : ^^^
 
     var x;
 >x : any
 }
 
 async function fn19([x]) {
->fn19 : ([x]: [any]) => Promise<void>
->     : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^
+>fn19 : (__0: [any]) => Promise<void>
 >x : any
->  : ^^^
 
     var x;
 >x : any
@@= skipped -181, +141 lines =@@
 
 async function fn20(x) {
 >fn20 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
     {
         var x;
@@= skipped -10, +9 lines =@@
 
 async function fn21(x) {
 >fn21 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     if (y) {
@@= skipped -13, +12 lines =@@
 
 async function fn22(x) {
 >fn22 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     if (y) {
@@= skipped -14, +13 lines =@@
 
 async function fn23(x) {
 >fn23 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     try {
@@= skipped -14, +13 lines =@@
 
 async function fn24(x) {
 >fn24 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     try {
@@= skipped -16, +15 lines =@@
 
 async function fn25(x) {
 >fn25 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     try {
@@= skipped -16, +15 lines =@@
 
 async function fn26(x) {
 >fn26 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     try {
@@= skipped -8, +7 lines =@@
     }
     catch ({ x }) {
 >x : any
->  : ^^^
 
         var x;
 >x : any
@@= skipped -9, +8 lines =@@
 
 async function fn27(x) {
 >fn27 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     try {
@@= skipped -13, +12 lines =@@
 
 async function fn28(x) {
 >fn28 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     while (y) {
@@= skipped -13, +12 lines =@@
 
 async function fn29(x) {
 >fn29 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     do {
@@= skipped -13, +12 lines =@@
 
 async function fn30(x) {
 >fn30 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     for (var x = y;;) {
@@= skipped -12, +11 lines =@@
 
 async function fn31(x) {
 >fn31 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     for (var { x } = y;;) {
 >x : any
->  : ^^^
 >y : any
     }
 }
 
 async function fn32(x) {
 >fn32 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     for (;;) {
@@= skipped -23, +20 lines =@@
 
 async function fn33(x: string) {
 >fn33 : (x: string) => Promise<void>
->     : ^ ^^      ^^^^^^^^^^^^^^^^^^
 >x : string
->  : ^^^^^^
 
     for (var x in y) {
 >x : string
->  : ^^^^^^
 >y : any
     }
 }
 
 async function fn34(x) {
 >fn34 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     for (var z in y) {
 >z : string
->  : ^^^^^^
 >y : any
 
         var x;
@@= skipped -28, +23 lines =@@
 
 async function fn35(x) {
 >fn35 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     for (var x of y) {
@@= skipped -11, +10 lines =@@
 
 async function fn36(x) {
 >fn36 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     for (var { x } of y) {
 >x : any
->  : ^^^
 >y : any
     }
 }
 
 async function fn37(x) {
 >fn37 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     for (var z of y) {
@@= skipped -26, +23 lines =@@
 
 async function fn38(x) {
 >fn38 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     switch (y) {
@@= skipped -16, +15 lines =@@
 
 async function fn39(x) {
 >fn39 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     foo: {
 >foo : any
->    : ^^^
 
         var x;
 >x : any
 
         break foo;
 >foo : any
->    : ^^^
     }
 }
 
 async function fn40(x) {
 >fn40 : (x: any) => Promise<void>
->     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
 >x : any
 
     try {
