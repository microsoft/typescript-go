--- old.superPropertyInConstructorBeforeSuperCall.symbols
+++ new.superPropertyInConstructorBeforeSuperCall.symbols
@@= skipped -7, +7 lines =@@
 >x : Symbol(x, Decl(superPropertyInConstructorBeforeSuperCall.ts, 1, 16))
 
     x(): string { return ""; }
->x : Symbol(B.x, Decl(superPropertyInConstructorBeforeSuperCall.ts, 1, 30))
+>x : Symbol(x, Decl(superPropertyInConstructorBeforeSuperCall.ts, 1, 30))
 }
 class C1 extends B {
 >C1 : Symbol(C1, Decl(superPropertyInConstructorBeforeSuperCall.ts, 3, 1))
@@= skipped -8, +8 lines =@@
 
     constructor() {
         super.x();
->super.x : Symbol(B.x, Decl(superPropertyInConstructorBeforeSuperCall.ts, 1, 30))
+>super.x : Symbol(x, Decl(superPropertyInConstructorBeforeSuperCall.ts, 1, 30))
 >super : Symbol(B, Decl(superPropertyInConstructorBeforeSuperCall.ts, 0, 0))
->x : Symbol(B.x, Decl(superPropertyInConstructorBeforeSuperCall.ts, 1, 30))
+>x : Symbol(x, Decl(superPropertyInConstructorBeforeSuperCall.ts, 1, 30))
 
         super();
 >super : Symbol(B, Decl(superPropertyInConstructorBeforeSuperCall.ts, 0, 0))
@@= skipped -15, +15 lines =@@
     constructor() {
         super(super.x());
 >super : Symbol(B, Decl(superPropertyInConstructorBeforeSuperCall.ts, 0, 0))
->super.x : Symbol(B.x, Decl(superPropertyInConstructorBeforeSuperCall.ts, 1, 30))
+>super.x : Symbol(x, Decl(superPropertyInConstructorBeforeSuperCall.ts, 1, 30))
 >super : Symbol(B, Decl(superPropertyInConstructorBeforeSuperCall.ts, 0, 0))
->x : Symbol(B.x, Decl(superPropertyInConstructorBeforeSuperCall.ts, 1, 30))
+>x : Symbol(x, Decl(superPropertyInConstructorBeforeSuperCall.ts, 1, 30))
     }
 }
