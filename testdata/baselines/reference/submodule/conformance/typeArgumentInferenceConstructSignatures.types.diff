--- old.typeArgumentInferenceConstructSignatures.types
+++ new.typeArgumentInferenceConstructSignatures.types
@@= skipped -2, +2 lines =@@
 === typeArgumentInferenceConstructSignatures.ts ===
 // Generic call with no parameters
 interface NoParams {
+>NoParams : NoParams
+
     new <T>();
+>T : T
 }
 var noParams: NoParams;
 >noParams : NoParams
@@= skipped -19, +22 lines =@@
 
 // Generic call with parameters but none use type parameter type
 interface noGenericParams {
+>noGenericParams : noGenericParams
+
     new <T>(n: string);
+>T : T
 >n : string
 }
 var noGenericParams: noGenericParams;
@@= skipped -23, +26 lines =@@
 
 // Generic call with multiple type parameters and only one used in parameter type annotation
 interface someGenerics1 {
+>someGenerics1 : someGenerics1
+
     new <T, U>(n: T, m: number);
+>T : T
+>U : U
 >n : T
 >m : number
 }
@@= skipped -27, +31 lines =@@
 
 // Generic call with argument of function type whose parameter is of type parameter type
 interface someGenerics2a {
+>someGenerics2a : someGenerics2a
+
     new <T>(n: (x: T) => void);
+>T : T
 >n : (x: T) => void
 >x : T
 }
@@= skipped -33, +36 lines =@@
 >0 : 0
 
 interface someGenerics2b {
+>someGenerics2b : someGenerics2b
+
     new <T, U>(n: (x: T, y: U) => void);
+>T : T
+>U : U
 >n : (x: T, y: U) => void
 >x : T
 >y : U
@@= skipped -40, +44 lines =@@
 
 // Generic call with argument of function type whose parameter is not of type parameter type but body/return type uses type parameter
 interface someGenerics3 {
+>someGenerics3 : someGenerics3
+
     new <T>(producer: () => T);
+>T : T
 >producer : () => T
 }
 var someGenerics3: someGenerics3;
@@= skipped -26, +29 lines =@@
 
 // 2 parameter generic call with argument 1 of type parameter type and argument 2 of function type whose parameter is of type parameter type
 interface someGenerics4 {
+>someGenerics4 : someGenerics4
+
     new <T, U>(n: T, f: (x: U) => void);
+>T : T
+>U : U
 >n : T
 >f : (x: U) => void
 >x : U
@@= skipped -35, +39 lines =@@
 
 // 2 parameter generic call with argument 2 of type parameter type and argument 1 of function type whose parameter is of type parameter type
 interface someGenerics5 {
+>someGenerics5 : someGenerics5
+
     new <U, T>(n: T, f: (x: U) => void);
+>U : U
+>T : T
 >n : T
 >f : (x: U) => void
 >x : U
@@= skipped -35, +39 lines =@@
 
 // Generic call with multiple arguments of function types that each have parameters of the same generic type
 interface someGenerics6 {
+>someGenerics6 : someGenerics6
+
     new <A>(a: (a: A) => A, b: (b: A) => A, c: (c: A) => A);
+>A : A
 >a : (a: A) => A
 >a : A
 >b : (b: A) => A
@@= skipped -65, +68 lines =@@
 
 // Generic call with multiple arguments of function types that each have parameters of different generic type
 interface someGenerics7 {
+>someGenerics7 : someGenerics7
+
     new <A, B, C>(a: (a: A) => A, b: (b: B) => B, c: (c: C) => C);
+>A : A
+>B : B
+>C : C
 >a : (a: A) => A
 >a : A
 >b : (b: B) => B
@@= skipped -52, +57 lines =@@
 
 // Generic call with argument of generic function type
 interface someGenerics8 {
+>someGenerics8 : someGenerics8
+
     new <T>(n: T): T;
+>T : T
 >n : T
 }
 var someGenerics8: someGenerics8;
@@= skipped -18, +21 lines =@@
 
 // Generic call with multiple parameters of generic type passed arguments with no best common type
 interface someGenerics9 {
+>someGenerics9 : someGenerics9
+
     new <T>(a: T, b: T, c: T): T;
+>T : T
 >a : T
 >b : T
 >c : T
@@= skipped -39, +42 lines =@@
 
 // Generic call with multiple parameters of generic type passed arguments with multiple best common types
 interface A91 {
+>A91 : A91
+
     x: number;
 >x : number
 
@@= skipped -7, +9 lines =@@
 >y : string
 }
 interface A92 {
+>A92 : A92
+
     x: number;
 >x : number
 
@@= skipped -7, +9 lines =@@
 >z : Window
 }
 var a9e = new someGenerics9(undefined, { x: 6, z: window }, { x: 6, y: '' });
->a9e : { x: number; z: Window & typeof globalThis; y?: undefined; } | { x: number; y: string; z?: undefined; }
->new someGenerics9(undefined, { x: 6, z: window }, { x: 6, y: '' }) : { x: number; z: Window & typeof globalThis; y?: undefined; } | { x: number; y: string; z?: undefined; }
+>a9e : { x: number; z: Window & typeof globalThis; y?: undefined; } | { z?: undefined; x: number; y: string; }
+>new someGenerics9(undefined, { x: 6, z: window }, { x: 6, y: '' }) : { x: number; z: Window & typeof globalThis; y?: undefined; } | { z?: undefined; x: number; y: string; }
 >someGenerics9 : someGenerics9
 >undefined : undefined
 >{ x: 6, z: window } : { x: number; z: Window & typeof globalThis; }
@@= skipped -16, +16 lines =@@
 >'' : ""
 
 var a9e: {};
->a9e : { x: number; z: Window & typeof globalThis; y?: undefined; } | { x: number; y: string; z?: undefined; }
+>a9e : { x: number; z: Window & typeof globalThis; y?: undefined; } | { z?: undefined; x: number; y: string; }
 
 var a9f = new someGenerics9<A92>(undefined, { x: 6, z: window }, { x: 6, y: '' });
 >a9f : A92
