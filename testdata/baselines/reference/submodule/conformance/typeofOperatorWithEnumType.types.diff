--- old.typeofOperatorWithEnumType.types
+++ new.typeofOperatorWithEnumType.types
@@= skipped -9, +9 lines =@@
 >ENUM1 : ENUM1
 >A : ENUM1.A
 >B : ENUM1.B
->"" : (typeof ENUM1)[""]
+>"" : ENUM1.""
 
 // enum type var
 var ResultIsString1 = typeof ENUM;
->ResultIsString1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof ENUM : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >ENUM : typeof ENUM
 
 var ResultIsString2 = typeof ENUM1;
->ResultIsString2 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof ENUM1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString2 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof ENUM1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >ENUM1 : typeof ENUM1
 
 // enum type expressions
 var ResultIsString3 = typeof ENUM1["A"];
->ResultIsString3 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof ENUM1["A"] : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString3 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof ENUM1["A"] : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >ENUM1["A"] : ENUM1.A
 >ENUM1 : typeof ENUM1
 >"A" : "A"
 
 var ResultIsString4 = typeof (ENUM[0] + ENUM1["B"]);
->ResultIsString4 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof (ENUM[0] + ENUM1["B"]) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString4 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof (ENUM[0] + ENUM1["B"]) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(ENUM[0] + ENUM1["B"]) : string
 >ENUM[0] + ENUM1["B"] : string
 >ENUM[0] : string
@@= skipped -35, +35 lines =@@
 
 // multiple typeof  operators
 var ResultIsString5 = typeof typeof ENUM;
->ResultIsString5 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof typeof ENUM : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof ENUM : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString5 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >ENUM : typeof ENUM
 
 var ResultIsString6 = typeof typeof typeof (ENUM[0] + ENUM1.B);
->ResultIsString6 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof typeof typeof (ENUM[0] + ENUM1.B) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof typeof (ENUM[0] + ENUM1.B) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->typeof (ENUM[0] + ENUM1.B) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>ResultIsString6 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof typeof typeof (ENUM[0] + ENUM1.B) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof typeof (ENUM[0] + ENUM1.B) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>typeof (ENUM[0] + ENUM1.B) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(ENUM[0] + ENUM1.B) : string
 >ENUM[0] + ENUM1.B : string
 >ENUM[0] : string
@@= skipped -21, +21 lines =@@
 
 // miss assignment operators
 typeof ENUM;
->typeof ENUM : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >ENUM : typeof ENUM
 
 typeof ENUM1;
->typeof ENUM1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof ENUM1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >ENUM1 : typeof ENUM1
 
 typeof ENUM1["B"];
->typeof ENUM1["B"] : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof ENUM1["B"] : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >ENUM1["B"] : ENUM1.B
 >ENUM1 : typeof ENUM1
 >"B" : "B"
 
 typeof ENUM, ENUM1;
 >typeof ENUM, ENUM1 : typeof ENUM1
->typeof ENUM : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >ENUM : typeof ENUM
 >ENUM1 : typeof ENUM1
 
@@= skipped -25, +25 lines =@@
 
 z: typeof ENUM;
 >z : any
->typeof ENUM : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >ENUM : typeof ENUM
 
 z: typeof ENUM1;
 >z : any
->typeof ENUM1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof ENUM1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >ENUM1 : typeof ENUM1
 
