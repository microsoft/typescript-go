--- old.apparentTypeSubtyping.symbols
+++ new.apparentTypeSubtyping.symbols
@@= skipped -6, +6 lines =@@
 class Base<U extends String> {
 >Base : Symbol(Base, Decl(apparentTypeSubtyping.ts, 0, 0))
 >U : Symbol(U, Decl(apparentTypeSubtyping.ts, 3, 11))
->String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --) ... and 1 more)
+>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

     x: U;
 >x : Symbol(Base.x, Decl(apparentTypeSubtyping.ts, 3, 30))
@@= skipped -15, +15 lines =@@

     x: String;
 >x : Symbol(Derived.x, Decl(apparentTypeSubtyping.ts, 8, 39))
->String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --) ... and 1 more)
+>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 }

 class Base2 {
@@= skipped -8, +8 lines =@@

     x: String;
 >x : Symbol(Base2.x, Decl(apparentTypeSubtyping.ts, 12, 13))
->String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --) ... and 1 more)
+>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

     static s: String;
 >s : Symbol(Base2.s, Decl(apparentTypeSubtyping.ts, 13, 14))
->String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --) ... and 1 more)
+>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 }

 // is U extends String (S) a subtype of String (T)? Apparent type of U is String so it succeeds
 class Derived2<U extends String> extends Base2 { // error because of the prototype's not matching, not because of the instance side
 >Derived2 : Symbol(Derived2, Decl(apparentTypeSubtyping.ts, 15, 1))
 >U : Symbol(U, Decl(apparentTypeSubtyping.ts, 18, 15))
->String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --) ... and 1 more)
+>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >Base2 : Symbol(Base2, Decl(apparentTypeSubtyping.ts, 10, 1))

     x: U;