--- old.jsDeclarationsFunctionKeywordPropExhaustive.js
+++ new.jsDeclarationsFunctionKeywordPropExhaustive.js
@@= skipped -170, +170 lines =@@
 //// [source.d.ts]
 declare function foo(): void;
 declare namespace foo {
-    export let x: number;
-    export let y: number;
-    let _break: number;
-    export { _break as break };
-    let _case: number;
-    export { _case as case };
-    let _catch: number;
-    export { _catch as catch };
-    let _class: number;
-    export { _class as class };
-    let _const: number;
-    export { _const as const };
-    let _continue: number;
-    export { _continue as continue };
-    let _debugger: number;
-    export { _debugger as debugger };
-    let _default: number;
-    export { _default as default };
-    let _delete: number;
-    export { _delete as delete };
-    let _do: number;
-    export { _do as do };
-    let _else: number;
-    export { _else as else };
-    let _enum: number;
-    export { _enum as enum };
-    let _export: number;
-    export { _export as export };
-    let _extends: number;
-    export { _extends as extends };
-    let _false: number;
-    export { _false as false };
-    let _finally: number;
-    export { _finally as finally };
-    let _for: number;
-    export { _for as for };
-    let _function: number;
-    export { _function as function };
-    let _if: number;
-    export { _if as if };
-    let _import: number;
-    export { _import as import };
-    let _in: number;
-    export { _in as in };
-    let _instanceof: number;
-    export { _instanceof as instanceof };
-    let _new: number;
-    export { _new as new };
-    let _null: number;
-    export { _null as null };
-    let _return: number;
-    export { _return as return };
-    let _super: number;
-    export { _super as super };
-    let _switch: number;
-    export { _switch as switch };
-    let _this: number;
-    export { _this as this };
-    let _throw: number;
-    export { _throw as throw };
-    let _true: number;
-    export { _true as true };
-    let _try: number;
-    export { _try as try };
-    let _typeof: number;
-    export { _typeof as typeof };
-    let _var: number;
-    export { _var as var };
-    let _void: number;
-    export { _void as void };
-    let _while: number;
-    export { _while as while };
-    let _with: number;
-    export { _with as with };
-    let _implements: number;
-    export { _implements as implements };
-    let _interface: number;
-    export { _interface as interface };
-    let _let: number;
-    export { _let as let };
-    let _package: number;
-    export { _package as package };
-    let _private: number;
-    export { _private as private };
-    let _protected: number;
-    export { _protected as protected };
-    let _public: number;
-    export { _public as public };
-    let _static: number;
-    export { _static as static };
-    let _yield: number;
-    export { _yield as yield };
-    export let abstract: number;
-    export let as: number;
-    export let asserts: number;
-    export let any: number;
-    export let async: number;
-    export let await: number;
-    export let boolean: number;
-    export let constructor: number;
-    export let declare: number;
-    export let get: number;
-    export let infer: number;
-    export let is: number;
-    export let keyof: number;
-    export let module: number;
-    export let namespace: number;
-    export let never: number;
-    export let readonly: number;
-    export let require: number;
-    export let number: number;
-    export let object: number;
-    export let set: number;
-    export let string: number;
-    export let symbol: number;
-    export let type: number;
-    export let undefined: number;
-    export let unique: number;
-    export let unknown: number;
-    export let from: number;
-    export let global: number;
-    export let bigint: number;
-    export let of: number;
+    const x: number;
+}
+declare namespace foo {
+    const y: number;
+}
+declare namespace foo {
+    const _a: number;
+    export { _a as break };
+}
+declare namespace foo {
+    const _b: number;
+    export { _b as case };
+}
+declare namespace foo {
+    const _c: number;
+    export { _c as catch };
+}
+declare namespace foo {
+    const _d: number;
+    export { _d as class };
+}
+declare namespace foo {
+    const _e: number;
+    export { _e as const };
+}
+declare namespace foo {
+    const _f: number;
+    export { _f as continue };
+}
+declare namespace foo {
+    const _g: number;
+    export { _g as debugger };
+}
+declare namespace foo {
+    const _h: number;
+    export { _h as default };
+}
+declare namespace foo {
+    const _j: number;
+    export { _j as delete };
+}
+declare namespace foo {
+    const _k: number;
+    export { _k as do };
+}
+declare namespace foo {
+    const _l: number;
+    export { _l as else };
+}
+declare namespace foo {
+    const _m: number;
+    export { _m as enum };
+}
+declare namespace foo {
+    const _o: number;
+    export { _o as export };
+}
+declare namespace foo {
+    const _p: number;
+    export { _p as extends };
+}
+declare namespace foo {
+    const _q: number;
+    export { _q as false };
+}
+declare namespace foo {
+    const _r: number;
+    export { _r as finally };
+}
+declare namespace foo {
+    const _s: number;
+    export { _s as for };
+}
+declare namespace foo {
+    const _t: number;
+    export { _t as function };
+}
+declare namespace foo {
+    const _u: number;
+    export { _u as if };
+}
+declare namespace foo {
+    const _v: number;
+    export { _v as import };
+}
+declare namespace foo {
+    const _w: number;
+    export { _w as in };
+}
+declare namespace foo {
+    const _x: number;
+    export { _x as instanceof };
+}
+declare namespace foo {
+    const _y: number;
+    export { _y as new };
+}
+declare namespace foo {
+    const _z: number;
+    export { _z as null };
+}
+declare namespace foo {
+    const _0: number;
+    export { _0 as return };
+}
+declare namespace foo {
+    const _1: number;
+    export { _1 as super };
+}
+declare namespace foo {
+    const _2: number;
+    export { _2 as switch };
+}
+declare namespace foo {
+    const _3: number;
+    export { _3 as this };
+}
+declare namespace foo {
+    const _4: number;
+    export { _4 as throw };
+}
+declare namespace foo {
+    const _5: number;
+    export { _5 as true };
+}
+declare namespace foo {
+    const _6: number;
+    export { _6 as try };
+}
+declare namespace foo {
+    const _7: number;
+    export { _7 as typeof };
+}
+declare namespace foo {
+    const _8: number;
+    export { _8 as var };
+}
+declare namespace foo {
+    const _9: number;
+    export { _9 as void };
+}
+declare namespace foo {
+    const _10: number;
+    export { _10 as while };
+}
+declare namespace foo {
+    const _11: number;
+    export { _11 as with };
+}
+declare namespace foo {
+    const _12: number;
+    export { _12 as implements };
+}
+declare namespace foo {
+    const _13: number;
+    export { _13 as interface };
+}
+declare namespace foo {
+    const _14: number;
+    export { _14 as let };
+}
+declare namespace foo {
+    const _15: number;
+    export { _15 as package };
+}
+declare namespace foo {
+    const _16: number;
+    export { _16 as private };
+}
+declare namespace foo {
+    const _17: number;
+    export { _17 as protected };
+}
+declare namespace foo {
+    const _18: number;
+    export { _18 as public };
+}
+declare namespace foo {
+    const _19: number;
+    export { _19 as static };
+}
+declare namespace foo {
+    const _20: number;
+    export { _20 as yield };
+}
+declare namespace foo {
+    const abstract: number;
+}
+declare namespace foo {
+    const as: number;
+}
+declare namespace foo {
+    const asserts: number;
+}
+declare namespace foo {
+    const any: number;
+}
+declare namespace foo {
+    const async: number;
+}
+declare namespace foo {
+    const await: number;
+}
+declare namespace foo {
+    const boolean: number;
+}
+declare namespace foo {
+    const constructor: number;
+}
+declare namespace foo {
+    const declare: number;
+}
+declare namespace foo {
+    const get: number;
+}
+declare namespace foo {
+    const infer: number;
+}
+declare namespace foo {
+    const is: number;
+}
+declare namespace foo {
+    const keyof: number;
+}
+declare namespace foo {
+    const module: number;
+}
+declare namespace foo {
+    const namespace: number;
+}
+declare namespace foo {
+    const never: number;
+}
+declare namespace foo {
+    const readonly: number;
+}
+declare namespace foo {
+    const require: number;
+}
+declare namespace foo {
+    const number: number;
+}
+declare namespace foo {
+    const object: number;
+}
+declare namespace foo {
+    const set: number;
+}
+declare namespace foo {
+    const string: number;
+}
+declare namespace foo {
+    const symbol: number;
+}
+declare namespace foo {
+    const type: number;
+}
+declare namespace foo {
+    const undefined: number;
+}
+declare namespace foo {
+    const unique: number;
+}
+declare namespace foo {
+    const unknown: number;
+}
+declare namespace foo {
+    const from: number;
+}
+declare namespace foo {
+    const global: number;
+}
+declare namespace foo {
+    const bigint: number;
+}
+declare namespace foo {
+    const of: number;
 }