//// [tests/cases/conformance/jsdoc/jsdocDisallowedInTypescript.ts] ////

=== jsdocDisallowedInTypescript.ts ===
// grammar error from checker
var ara: Array.<number> = [1,2,3];
>ara : number[]
>[1,2,3] : number[]
>1 : 1
>2 : 2
>3 : 3

function f(x: ?number, y: Array.<number>) {
>f : (x: any, y: number[]) => any
>x : any
>y : number[]

    return x ? x + y[1] : y[0];
>x ? x + y[1] : y[0] : any
>x : any
>x + y[1] : any
>x : any
>y[1] : number
>y : number[]
>1 : 1
>y[0] : number
>y : number[]
>0 : 0
}
function hof(ctor: function(new: number, string)) {
>hof : (ctor: function) => any
>ctor : function
>(new : any
>new : any
> : any
>number, string : any
>number : any
>string : any

    return new ctor('hi');
>new ctor('hi') : any
>ctor : any
>'hi' : "hi"
}
function hof2(f: function(this: number, string): string) {
>hof2 : (f: function) => any
>f : function
>(this: number, string): string : (string: any) => string
>this : number
>string : any
> : any

    return f(12, 'hullo');
>f(12, 'hullo') : any
>f : (x: any, y: number[]) => any
>12 : 12
>'hullo' : "hullo"
}
var whatevs: * = 1001;
>whatevs : any
>1001 : 1001

var ques: ? = 'what';
>ques : any
>'what' : "what"

var g: function(number, number): number = (n,m) => n + m;
>g : function
>(number, number) : any
>number, number : any
>number : any
>number : any
>number = (n,m) => n + m : (n: any, m: any) => any
>number : any
>(n,m) => n + m : (n: any, m: any) => any
>n : any
>m : any
>n + m : any
>n : any
>m : any

var most: !string = 'definite';
>most : any
>'definite' : "definite"

var postfixdef: number! = 101;
>postfixdef : number
>! : boolean
> : any
>101 : 101

var postfixopt: number? = undefined;
>postfixopt : number
>undefined : any

var nns: Array<?number>;
>nns : any[]

var dns: Array<!number>;
>dns : any[]

var anys: Array<*>;
>anys : any[]


