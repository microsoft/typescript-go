--- old.importCallExpressionInCJS5.js
+++ new.importCallExpressionInCJS5.js
@@= skipped -39, +39 lines =@@
     }
 }
 
-//// [0.js]
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.B = void 0;
-exports.foo = foo;
-class B {
-    print() { return "I am B"; }
-}
-exports.B = B;
-function foo() { return "foo"; }
-//// [1.js]
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.backup = backup;
-function backup() { return "backup"; }
 //// [2.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.D = void 0;
 class C {
-    constructor() {
-        this.myModule = Promise.resolve().then(() => require("./0"));
-    }
+    myModule = Promise.resolve().then(() => require("./0"));
     method() {
         const loadAsync = Promise.resolve().then(() => require("./0"));
         this.myModule.then(Zero => {
             console.log(Zero.foo());
-        }, async (err) => {
+        }, async err => {
             console.log(err);
             let one = await Promise.resolve().then(() => require("./1"));
             console.log(one.backup());
@@= skipped -35, +18 lines =@@
     }
 }
 class D {
-    constructor() {
-        this.myModule = Promise.resolve().then(() => require("./0"));
-    }
+    myModule = Promise.resolve().then(() => require("./0"));
     method() {
         const loadAsync = Promise.resolve().then(() => require("./0"));
         this.myModule.then(Zero => {
             console.log(Zero.foo());
-        }, async (err) => {
+        }, async err => {
             console.log(err);
             let one = await Promise.resolve().then(() => require("./1"));
             console.log(one.backup());
@@= skipped -15, +13 lines =@@
     }
 }
 exports.D = D;
+//// [1.js]
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.backup = backup;
+function backup() { return "backup"; }
+//// [0.js]
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.B = void 0;
+exports.foo = foo;
+class B {
+    print() { return "I am B"; }
+}
+exports.B = B;
+function foo() { return "foo"; }
