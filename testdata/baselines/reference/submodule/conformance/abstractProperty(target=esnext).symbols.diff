--- old.abstractProperty(target=esnext).symbols
+++ new.abstractProperty(target=esnext).symbols
@@= skipped -4, +4 lines =@@
 >A : Symbol(A, Decl(abstractProperty.ts, 0, 0))
 
     protected abstract x: string;
->x : Symbol(A.x, Decl(abstractProperty.ts, 0, 18))
+>x : Symbol(x, Decl(abstractProperty.ts, 0, 18))
 
     public foo() {
->foo : Symbol(A.foo, Decl(abstractProperty.ts, 1, 33))
+>foo : Symbol(foo, Decl(abstractProperty.ts, 1, 33))
 
         console.log(this.x);
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->this.x : Symbol(A.x, Decl(abstractProperty.ts, 0, 18))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
+>this.x : Symbol(x, Decl(abstractProperty.ts, 0, 18))
 >this : Symbol(A, Decl(abstractProperty.ts, 0, 0))
->x : Symbol(A.x, Decl(abstractProperty.ts, 0, 18))
+>x : Symbol(x, Decl(abstractProperty.ts, 0, 18))
     }
 }
 
@@= skipped -20, +20 lines =@@
 >A : Symbol(A, Decl(abstractProperty.ts, 0, 0))
 
     protected x = 'B.x';
->x : Symbol(B.x, Decl(abstractProperty.ts, 7, 19))
+>x : Symbol(x, Decl(abstractProperty.ts, 7, 19))
 }
 
 class C extends A {
@@= skipped -8, +8 lines =@@
 >A : Symbol(A, Decl(abstractProperty.ts, 0, 0))
 
     protected get x() { return 'C.x' };
->x : Symbol(C.x, Decl(abstractProperty.ts, 11, 19))
+>x : Symbol(x, Decl(abstractProperty.ts, 11, 19))
 }
 
