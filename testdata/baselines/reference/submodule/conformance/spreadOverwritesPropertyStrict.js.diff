--- old.spreadOverwritesPropertyStrict.js
+++ new.spreadOverwritesPropertyStrict.js
@@= skipped -36, +36 lines =@@


 //// [spreadOverwritesPropertyStrict.js]
-"use strict";
-var unused1 = Object.assign({ b: 1 }, ab); // error
-var unused2 = Object.assign(Object.assign({}, ab), ab); // ok, overwritten error doesn't apply to spreads
-var unused3 = Object.assign({ b: 1 }, abq); // ok, abq might have b: undefined
-var unused4 = Object.assign(Object.assign({}, ab), { b: 1 }); // ok, we don't care that b in ab is overwritten
-var unused5 = Object.assign(Object.assign({}, abq), { b: 1 }); // ok
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var unused1 = __assign({ b: 1 }, ab); // error
+var unused2 = __assign(__assign({}, ab), ab); // ok, overwritten error doesn't apply to spreads
+var unused3 = __assign({ b: 1 }, abq); // ok, abq might have b: undefined
+var unused4 = __assign(__assign({}, ab), { b: 1 }); // ok, we don't care that b in ab is overwritten
+var unused5 = __assign(__assign({}, abq), { b: 1 }); // ok
 function g(obj) {
-    return Object.assign({ x: 1 }, obj); // ok, obj might have x: undefined
+    return __assign({ x: 1 }, obj); // ok, obj might have x: undefined
 }
 function f(obj) {
-    return Object.assign({ x: 1 }, obj); // ok, obj might be undefined
+    return __assign({ x: 1 }, obj); // ok, obj might be undefined
 }
 function h(obj) {
-    return Object.assign({ x: 1 }, obj); // error
+    return __assign({ x: 1 }, obj); // error
 }
 function i(b, t) {
-    return Object.assign({ command: "hi" }, (b ? t : {})); // ok
+    return __assign({ command: "hi" }, (b ? t : {})); // ok
 }
 function j() {
-    return Object.assign({ command: "hi" }, { command: "bye" }); // ok
+    return __assign({ command: "hi" }, { command: "bye" }); // ok
 }
 function k(t) {
-    return Object.assign(Object.assign(Object.assign({ command: "hi" }, { spoiler: true }), { spoiler2: true }), t); // error
+    return __assign(__assign(__assign({ command: "hi" }, { spoiler: true }), { spoiler2: true }), t); // error
 }
 function l(anyrequired) {
-    return Object.assign({ a: 'zzz' }, anyrequired); // error
+    return __assign({ a: 'zzz' }, anyrequired); // error
 }
 function m(anyoptional) {
-    return Object.assign({ a: 'zzz' }, anyoptional); // ok
+    return __assign({ a: 'zzz' }, anyoptional); // ok
 }