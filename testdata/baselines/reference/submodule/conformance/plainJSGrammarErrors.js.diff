--- old.plainJSGrammarErrors.js
+++ new.plainJSGrammarErrors.js
@@= skipped -211, +211 lines =@@
 
 //// [plainJSGrammarErrors.js]
 class C {
-    // #private mistakes
     q = #unbound;
     m() {
         #p;
@@= skipped -10, +9 lines =@@
     #m() {
         this.#m = () => { };
     }
-    // await in static block
     static {
         for await (const x of [1, 2, 3]) {
             console.log(x);
         }
         return null;
     }
-    // modifier mistakes
     constructor() { }
     constructor() { }
     x = 1;
@@= skipped -20, +18 lines =@@
     export cantExportProperty = 1;
     export cantExportMethod() {
     }
-    // accessor mistakes
-    get incorporeal() { }
     get parametric(n) { return 1; }
     set invariant() { }
     set binary(fst, snd) { }
     set variable(...n) { }
-    // other
     "constructor" = 16;
 }
 class {
@@= skipped -16, +13 lines =@@
 }
 class Trebler extends C, C, C {
 }
-// #private mistakes
 #unrelated;
 junk.#m;
 new C().#m;
-// modifier mistakes
 export export var extremelyExported = 10;
 export static var staticExport = 1;
-function staticParam(static x = 1) { return x; }
+function staticParam(x = 1) { return x; }
 async export function oorder(x = 1) { return x; }
-function cantExportParam(export x = 1) { return x; }
-function cantAsyncParam(async x = 1) { return x; }
+function cantExportParam(x = 1) { return x; }
+function cantAsyncParam(x = 1) { return x; }
 async async function extremelyAsync() { }
 async class CantAsyncClass {
     async cantAsyncPropert = 1;
@@= skipped -32, +30 lines =@@
     static m() {
     }
 };
-// rest parameters
 function restMustBeLast(...x, y) {
 }
 function restCantHaveInitialiser(...x = [1, 2, 3]) {
@@= skipped -13, +12 lines =@@
 const { ...rest, e: episode, m: mission } = doom;
 const { e: eep, m: em, ...rest: noRestAllowed } = doom;
 const { e: erp, m: erm, ...noInitialiser = true } = doom;
-// left-over parsing
 var ;
-var x = 1 || 2 ?? 3;
-var x = 2 ?? 3 || 4;
+var x = (1 || 2) ?? 3;
+var x = 2 ?? (3 || 4);
 const arr = x => x + 1;
 var a = [1, 2];
 a `length`;
 const o = {
-    [console.log('oh no'), 2]: 'hi',
+    [(console.log('oh no'), 2)]: 'hi',
     #noPrivate: 3,
     cantExportProperties: 4,
-    // TODO: See what the existing JS error is like for these
     cantHaveQuestionMark: 1,
     m() { return 12; },
     definitely,
@@= skipped -23, +21 lines =@@
 var noTrailingComma = 1;
 class MissingExtends extends  {
 }
-// let/const mistakes
 const { e: ee };
 const noInit;
 let let = 15;
@@= skipped -8, +7 lines =@@
     let onlyBlockLet = 17;
 if (true)
     const onlyBlockConst = 18;
-// loop mistakes
 let async;
 export const l = [1, 2, 3];
 for (async of l) {
@@= skipped -18, +17 lines =@@
 for (let y, x in [1, 2, 3]) {
     console.log(x);
 }
-// duplication mistakes
 var b;
 switch (b) {
     case false:
@@= skipped -27, +26 lines =@@
         break label;
     }
 }
-// labels
 function crossFunctionBoundary() {
     outer: for (;;) {
         function test() {
@@= skipped -24, +23 lines =@@
 }
 break;
 continue;
-// other weirdness
 export let noMeta = import.metal;
 function foo() { new.targe; }
 const nullaryDynamicImport = import();
