--- old.symbolProperty61.types
+++ new.symbolProperty61.types
@@= skipped -5, +5 lines =@@

   interface SymbolConstructor {
     readonly obs: symbol
->obs : unique symbol
+>obs : symbol
   }
 }

 const observable: typeof Symbol.obs = Symbol.obs
->observable : unique symbol
->Symbol.obs : unique symbol
->Symbol : SymbolConstructor
->obs : unique symbol
->Symbol.obs : unique symbol
->Symbol : SymbolConstructor
->obs : unique symbol
+>observable : symbol
+>Symbol.obs : symbol
+>Symbol : SymbolConstructor
+>obs : symbol
+>Symbol.obs : symbol
+>Symbol : SymbolConstructor
+>obs : symbol

 export class MyObservable<T> {
 >MyObservable : MyObservable<T>
@@= skipped -34, +34 lines =@@

     [observable]() {
 >[observable] : () => this
->observable : unique symbol
+>observable : symbol

         return this
 >this : this
@@= skipped -12, +12 lines =@@

     [Symbol.obs]: () => { subscribe(next: (val: T) => void): void }
 >[Symbol.obs] : () => { subscribe(next: (val: T) => void): void; }
->Symbol.obs : unique symbol
+>Symbol.obs : symbol
 >Symbol : SymbolConstructor
->obs : unique symbol
+>obs : symbol
 >subscribe : (next: (val: T) => void) => void
 >next : (val: T) => void
 >val : T
@@= skipped -16, +16 lines =@@
 >obs[Symbol.obs]() : { subscribe(next: (val: T) => void): void; }
 >obs[Symbol.obs] : () => { subscribe(next: (val: T) => void): void; }
 >obs : InteropObservable<T>
->Symbol.obs : unique symbol
+>Symbol.obs : symbol
 >Symbol : SymbolConstructor
->obs : unique symbol
+>obs : symbol
 }

 from(new MyObservable(42))