--- old.symbolProperty61.types
+++ new.symbolProperty61.types
@@= skipped -4, +4 lines =@@
 >global : any
 
   interface SymbolConstructor {
+>SymbolConstructor : SymbolConstructor
+
     readonly obs: symbol
->obs : unique symbol
+>obs : symbol
   }
 }
 
 const observable: typeof Symbol.obs = Symbol.obs
->observable : unique symbol
->Symbol.obs : unique symbol
+>observable : symbol
 >Symbol : SymbolConstructor
->obs : unique symbol
->Symbol.obs : unique symbol
+>Symbol.obs : symbol
 >Symbol : SymbolConstructor
->obs : unique symbol
+>obs : symbol
 
 export class MyObservable<T> {
 >MyObservable : MyObservable<T>
+>T : T
 
     constructor(private _val: T) {}
 >_val : T
@@= skipped -35, +36 lines =@@
 
     [observable]() {
 >[observable] : () => this
->observable : unique symbol
+>observable : symbol
 
         return this
 >this : this
@@= skipped -9, +9 lines =@@
 
 type InteropObservable<T> = {
 >InteropObservable : InteropObservable<T>
+>T : T
 
     [Symbol.obs]: () => { subscribe(next: (val: T) => void): void }
->[Symbol.obs] : () => { subscribe(next: (val: T) => void): void; }
->Symbol.obs : unique symbol
+>[Symbol.obs] : () => { subscribe: (next: (val: T) => void) => void; }
+>Symbol.obs : symbol
 >Symbol : SymbolConstructor
->obs : unique symbol
+>obs : symbol
 >subscribe : (next: (val: T) => void) => void
 >next : (val: T) => void
 >val : T
 }
 
 function from<T>(obs: InteropObservable<T>) {
->from : <T>(obs: InteropObservable<T>) => { subscribe(next: (val: T) => void): void; }
+>from : <T>(obs: InteropObservable<T>) => { subscribe: (next: (val: T) => void) => void; }
+>T : T
 >obs : InteropObservable<T>
 
     return obs[Symbol.obs]()
->obs[Symbol.obs]() : { subscribe(next: (val: T) => void): void; }
->obs[Symbol.obs] : () => { subscribe(next: (val: T) => void): void; }
+>obs[Symbol.obs]() : { subscribe: (next: (val: T) => void) => void; }
+>obs[Symbol.obs] : () => { subscribe: (next: (val: T) => void) => void; }
 >obs : InteropObservable<T>
->Symbol.obs : unique symbol
+>Symbol.obs : symbol
 >Symbol : SymbolConstructor
->obs : unique symbol
+>obs : symbol
 }
 
 from(new MyObservable(42))
->from(new MyObservable(42)) : { subscribe(next: (val: number) => void): void; }
->from : <T>(obs: InteropObservable<T>) => { subscribe(next: (val: T) => void): void; }
+>from(new MyObservable(42)) : { subscribe: (next: (val: number) => void) => void; }
+>from : <T>(obs: InteropObservable<T>) => { subscribe: (next: (val: T) => void) => void; }
 >new MyObservable(42) : MyObservable<number>
 >MyObservable : typeof MyObservable
 >42 : 42
