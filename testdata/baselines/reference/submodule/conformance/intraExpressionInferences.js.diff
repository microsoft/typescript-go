--- old.intraExpressionInferences.js
+++ new.intraExpressionInferences.js
@@= skipped -333, +333 lines =@@


 //// [intraExpressionInferences.js]
-"use strict";
-// Repros from #47599
 var __assign = (this && this.__assign) || function () {
     __assign = Object.assign || function(t) {
         for (var s, i = 1, n = arguments.length; i < n; i++) {
@@= skipped -71, +69 lines =@@
 });
 // Repro from #41712
 class Wrapper {
+    value;
 }
 createMappingComponent({
     setup() {
@@= skipped -113, +114 lines =@@


 //// [intraExpressionInferences.d.ts]
+// Repros from #47599
 declare function callIt<T>(obj: {
     produce: (n: number) => T;
     consume: (x: T) => void;
 }): void;
 declare function callItT<T>(obj: [(n: number) => T, (x: T) => void]): void;
+// Repro from #25092
 interface MyInterface<T> {
     retrieveGeneric: (parameter: string) => T;
     operateWithGeneric: (generic: T) => string;
 }
 declare const inferTypeFn: <T>(generic: MyInterface<T>) => MyInterface<T>;
 declare const myGeneric: MyInterface<number>;
+// Repro #38623
 declare function make<M>(o: {
     mutations: M;
     action: (m: M) => void;
 }): void;
+// Repro from #38845
 declare function foo<A>(options: {
     a: A;
     b: (a: A) => void;
 }): void;
+// Repro from #38872
 type Chain<R1, R2> = {
     a(): R1;
     b(a: R1): R2;
     c(b: R2): void;
 };
 declare function test<R1, R2>(foo: Chain<R1, R2>): void;
+// Repro from #41712
 declare class Wrapper<T = any> {
     value?: T;
 }
@@= skipped -40, +46 lines =@@
     map?: (inputs: Unwrap<I>) => Unwrap<O>;
 };
 declare function createMappingComponent<I extends WrappedMap, O extends WrappedMap>(def: MappingComponent<I, O>): void;
+// Repro from #48279
 declare function simplified<T>(props: {
     generator: () => T;
     receiver: (t: T) => any;
@@= skipped -9, +10 lines =@@
     receiver: (t: T) => any;
 }): void;
 declare function nonObject<T>(generator: (bob: any) => T, receiver: (t: T) => any): void;
+// Repro from #48466
 interface Opts<TParams, TDone, TMapped> {
     fetch: (params: TParams, foo: number) => TDone;
     map: (data: TDone) => TMapped;
@@= skipped -9, +10 lines =@@
     one: number;
     two: string;
 }
+// Repro from #45255
 declare const branch: <T, U extends T>(_: {
     test: T;
     if: (t: T) => t is U;