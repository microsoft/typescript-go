--- old.TwoInternalModulesWithTheSameNameAndDifferentCommonRoot.js
+++ new.TwoInternalModulesWithTheSameNameAndDifferentCommonRoot.js
@@= skipped -29, +29 lines =@@
     }
 }
 
-//// [part1.js]
-var Root;
-(function (Root) {
-    var A;
-    (function (A) {
-        var Utils;
-        (function (Utils) {
-            function mirror(p) {
-                return { x: p.y, y: p.x };
-            }
-            Utils.mirror = mirror;
-        })(Utils = A.Utils || (A.Utils = {}));
-    })(A = Root.A || (Root.A = {}));
-})(Root || (Root = {}));
 //// [part2.js]
 var otherRoot;
 (function (otherRoot) {
-    var A;
+    let A;
     (function (A) {
-        // have to be fully qualified since in different root
         A.Origin = { x: 0, y: 0 };
-        var Utils;
+        let Utils;
         (function (Utils) {
-            var Plane = /** @class */ (function () {
-                function Plane(tl, br) {
+            class Plane {
+                tl;
+                br;
+                constructor(tl, br) {
                     this.tl = tl;
                     this.br = br;
                 }
-                return Plane;
-            }());
+            }
             Utils.Plane = Plane;
         })(Utils = A.Utils || (A.Utils = {}));
     })(A = otherRoot.A || (otherRoot.A = {}));
 })(otherRoot || (otherRoot = {}));
+//// [part1.js]
+var Root;
+(function (Root) {
+    let A;
+    (function (A) {
+        let Utils;
+        (function (Utils) {
+            function mirror(p) {
+                return { x: p.y, y: p.x };
+            }
+            Utils.mirror = mirror;
+        })(Utils = A.Utils || (A.Utils = {}));
+    })(A = Root.A || (Root.A = {}));
+})(Root || (Root = {}));
