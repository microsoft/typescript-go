--- old.conditionalTypes1.types
+++ new.conditionalTypes1.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/conformance/types/conditional/conditionalTypes1.ts] ////
 
-=== Performance Stats ===
-Instantiation count: 1,000
-
 === conditionalTypes1.ts ===
 type T00 = Exclude<"a" | "b" | "c" | "d", "a" | "c" | "f">;  // "b" | "d"
 >T00 : T00
@@= skipped -23, +20 lines =@@
 
 function f1<T>(x: T, y: NonNullable<T>) {
 >f1 : <T>(x: T, y: NonNullable<T>) => void
+>T : T
 >x : T
 >y : NonNullable<T>
 
@@= skipped -16, +17 lines =@@
 
 function f2<T extends string | undefined>(x: T, y: NonNullable<T>) {
 >f2 : <T extends string | undefined>(x: T, y: NonNullable<T>) => void
+>T : T
 >x : T
 >y : NonNullable<T>
 
@@= skipped -24, +25 lines =@@
 
 function f3<T>(x: Partial<T>[keyof T], y: NonNullable<Partial<T>[keyof T]>) {
 >f3 : <T>(x: Partial<T>[keyof T], y: NonNullable<Partial<T>[keyof T]>) => void
+>T : T
 >x : Partial<T>[keyof T]
 >y : NonNullable<Partial<T>[keyof T]>
 
@@= skipped -16, +17 lines =@@
 
 function f4<T extends { x: string | undefined }>(x: T["x"], y: NonNullable<T["x"]>) {
 >f4 : <T extends { x: string | undefined; }>(x: T["x"], y: NonNullable<T["x"]>) => void
+>T : T
 >x : string | undefined
 >x : T["x"]
 >y : NonNullable<T["x"]>
@@= skipped -60, +61 lines =@@
 
 declare function f5<T extends Options, K extends string>(p: K): Extract<T, { k: K }>;
 >f5 : <T extends Options, K extends string>(p: K) => Extract<T, { k: K; }>
+>T : T
+>K : K
 >p : K
 >k : K
 
@@= skipped -11, +13 lines =@@
 
 type OptionsOfKind<K extends Options["k"]> = Extract<Options, { k: K }>;
 >OptionsOfKind : OptionsOfKind<K>
+>K : K
 >k : K
 
 type T16 = OptionsOfKind<"a" | "b">;  // { k: "a", a: number } | { k: "b", b: string }
@@= skipped -7, +8 lines =@@
 
 type Select<T, K extends keyof T, V extends T[K]> = Extract<T, { [P in K]: V }>;
 >Select : Select<T, K, V>
+>T : T
+>K : K
+>V : V
+>P : P
 
 type T17 = Select<Options, "k", "a" | "b">;  // // { k: "a", a: number } | { k: "b", b: string }
 >T17 : T17
 
 type TypeName<T> =
 >TypeName : TypeName<T>
+>T : T
 
     T extends string ? "string" :
     T extends number ? "number" :
@@= skipped -18, +23 lines =@@
 >T20 : T20
 
 type T21 = TypeName<any>;  // "string" | "number" | "boolean" | "undefined" | "function" | "object"
->T21 : "string" | "number" | "boolean" | "undefined" | "object" | "function"
+>T21 : "boolean" | "function" | "number" | "object" | "string" | "undefined"
 
 type T22 = TypeName<never>;  // never
 >T22 : never
@@= skipped -10, +10 lines =@@
 
 type KnockoutObservable<T> = { object: T };
 >KnockoutObservable : KnockoutObservable<T>
+>T : T
 >object : T
 
 type KnockoutObservableArray<T> = { array: T };
 >KnockoutObservableArray : KnockoutObservableArray<T>
+>T : T
 >array : T
 
 type KnockedOut<T> = T extends any[] ? KnockoutObservableArray<T[number]> : KnockoutObservable<T>;
 >KnockedOut : KnockedOut<T>
+>T : T
 
 type KnockedOutObj<T> = {
 >KnockedOutObj : KnockedOutObj<T>
+>T : T
 
     [P in keyof T]: KnockedOut<T[P]>;
+>P : P
 }
 
 interface Item {
+>Item : Item
+
     id: number;
 >id : number
 
@@= skipped -30, +37 lines =@@
 >KOItem : KnockedOutObj<Item>
 
 interface Part {
+>Part : Part
+
     id: number;
 >id : number
 
@@= skipped -16, +18 lines =@@
 
 type FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T];
 >FunctionPropertyNames : FunctionPropertyNames<T>
+>T : T
+>K : K
 
 type FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;
 >FunctionProperties : FunctionProperties<T>
+>T : T
 
 type NonFunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T];
 >NonFunctionPropertyNames : NonFunctionPropertyNames<T>
+>T : T
+>K : K
 
 type NonFunctionProperties<T> = Pick<T, NonFunctionPropertyNames<T>>;
 >NonFunctionProperties : NonFunctionProperties<T>
+>T : T
 
 type T30 = FunctionProperties<Part>;
 >T30 : T30
@@= skipped -18, +24 lines =@@
 
 function f7<T>(x: T, y: FunctionProperties<T>, z: NonFunctionProperties<T>) {
 >f7 : <T>(x: T, y: FunctionProperties<T>, z: NonFunctionProperties<T>) => void
+>T : T
 >x : T
 >y : FunctionProperties<T>
 >z : NonFunctionProperties<T>
@@= skipped -37, +38 lines =@@
 
 function f8<T>(x: keyof T, y: FunctionPropertyNames<T>, z: NonFunctionPropertyNames<T>) {
 >f8 : <T>(x: keyof T, y: FunctionPropertyNames<T>, z: NonFunctionPropertyNames<T>) => void
+>T : T
 >x : keyof T
 >y : FunctionPropertyNames<T>
 >z : NonFunctionPropertyNames<T>
@@= skipped -37, +38 lines =@@
 
 type DeepReadonly<T> =
 >DeepReadonly : DeepReadonly<T>
+>T : T
 
     T extends any[] ? DeepReadonlyArray<T[number]> :
     T extends object ? DeepReadonlyObject<T> :
     T;
 
 interface DeepReadonlyArray<T> extends ReadonlyArray<DeepReadonly<T>> {}
+>DeepReadonlyArray : DeepReadonlyArray<T>
+>T : T
 
 type DeepReadonlyObject<T> = {
 >DeepReadonlyObject : DeepReadonlyObject<T>
+>T : T
 
     readonly [P in NonFunctionPropertyNames<T>]: DeepReadonly<T[P]>;
+>P : P
+
 };
 
 function f10(part: DeepReadonly<Part>) {
->f10 : (part: DeepReadonly<Part>) => void
+>f10 : (part: DeepReadonlyObject<Part>) => void
 >part : DeepReadonlyObject<Part>
 
     let name: string = part.name;
@@= skipped -82, +88 lines =@@
 
 type ZeroOf<T extends number | string | boolean> = T extends number ? 0 : T extends string ? "" : false;
 >ZeroOf : ZeroOf<T>
+>T : T
 >false : false
 
 function zeroOf<T extends number | string | boolean>(value: T) {
->zeroOf : <T extends number | string | boolean>(value: T) => ZeroOf<T>
+>zeroOf : <T extends string | number | boolean>(value: T) => ZeroOf<T>
+>T : T
 >value : T
 
     return <ZeroOf<T>>(typeof value === "number" ? 0 : typeof value === "string" ? "" : false);
 ><ZeroOf<T>>(typeof value === "number" ? 0 : typeof value === "string" ? "" : false) : ZeroOf<T>
->(typeof value === "number" ? 0 : typeof value === "string" ? "" : false) : false | "" | 0
->typeof value === "number" ? 0 : typeof value === "string" ? "" : false : false | "" | 0
+>(typeof value === "number" ? 0 : typeof value === "string" ? "" : false) : "" | 0 | false
+>typeof value === "number" ? 0 : typeof value === "string" ? "" : false : "" | 0 | false
 >typeof value === "number" : boolean
->typeof value : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof value : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >value : T
 >"number" : "number"
 >0 : 0
->typeof value === "string" ? "" : false : false | ""
+>typeof value === "string" ? "" : false : "" | false
 >typeof value === "string" : boolean
->typeof value : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof value : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >value : T
 >"string" : "string"
 >"" : ""
@@= skipped -26, +28 lines =@@
 
 function f20<T extends string>(n: number, b: boolean, x: number | boolean, y: T) {
 >f20 : <T extends string>(n: number, b: boolean, x: number | boolean, y: T) => void
+>T : T
 >n : number
 >b : boolean
 >x : number | boolean
@@= skipped -7, +8 lines =@@
 
     zeroOf(5);  // 0
 >zeroOf(5) : 0
->zeroOf : <T_1 extends number | string | boolean>(value: T_1) => ZeroOf<T_1>
+>zeroOf : <T extends string | number | boolean>(value: T) => ZeroOf<T>
 >5 : 5
 
     zeroOf("hello");  // ""
 >zeroOf("hello") : ""
->zeroOf : <T_1 extends number | string | boolean>(value: T_1) => ZeroOf<T_1>
+>zeroOf : <T extends string | number | boolean>(value: T) => ZeroOf<T>
 >"hello" : "hello"
 
     zeroOf(true);  // false
 >zeroOf(true) : false
->zeroOf : <T_1 extends number | string | boolean>(value: T_1) => ZeroOf<T_1>
+>zeroOf : <T extends string | number | boolean>(value: T) => ZeroOf<T>
 >true : true
 
     zeroOf(n);  // 0
 >zeroOf(n) : 0
->zeroOf : <T_1 extends number | string | boolean>(value: T_1) => ZeroOf<T_1>
+>zeroOf : <T extends string | number | boolean>(value: T) => ZeroOf<T>
 >n : number
 
     zeroOf(b);  // False
 >zeroOf(b) : false
->zeroOf : <T_1 extends number | string | boolean>(value: T_1) => ZeroOf<T_1>
+>zeroOf : <T extends string | number | boolean>(value: T) => ZeroOf<T>
 >b : boolean
 
     zeroOf(x);  // 0 | false
->zeroOf(x) : false | 0
->zeroOf : <T_1 extends number | string | boolean>(value: T_1) => ZeroOf<T_1>
+>zeroOf(x) : 0 | false
+>zeroOf : <T extends string | number | boolean>(value: T) => ZeroOf<T>
 >x : number | boolean
 
     zeroOf(y);  // ZeroOf<T>
 >zeroOf(y) : ZeroOf<T>
->zeroOf : <T_1 extends number | string | boolean>(value: T_1) => ZeroOf<T_1>
+>zeroOf : <T extends string | number | boolean>(value: T) => ZeroOf<T>
 >y : T
 }
 
 function f21<T extends number | string>(x: T, y: ZeroOf<T>) {
->f21 : <T extends number | string>(x: T, y: ZeroOf<T>) => void
+>f21 : <T extends string | number>(x: T, y: ZeroOf<T>) => void
+>T : T
 >x : T
 >y : ZeroOf<T>
 
@@= skipped -60, +61 lines =@@
 
 type T35<T extends { a: string, b: number }> = T[];
 >T35 : T35<T>
+>T : T
 >a : string
 >b : number
 
 type T36<T> = T extends { a: string } ? T extends { b: number } ? T35<T> : never : never;
 >T36 : T36<T>
+>T : T
 >a : string
 >b : number
 
 type T37<T> = T extends { b: number } ? T extends { a: string } ? T35<T> : never : never;
 >T37 : T37<T>
+>T : T
 >b : number
 >a : string
 
 type T38<T> = [T] extends [{ a: string }] ? [T] extends [{ b: number }] ? T35<T> : never : never;
 >T38 : T38<T>
+>T : T
 >a : string
 >b : number
 
 type Extends<T, U> = T extends U ? true : false;
 >Extends : Extends<T, U>
+>T : T
+>U : U
 >true : true
 >false : false
 
 type If<C extends boolean, T, F> = C extends true ? T : F;
 >If : If<C, T, F>
+>C : C
+>T : T
+>F : F
 >true : true
 
 type Not<C extends boolean> = If<C, false, true>;
 >Not : Not<C>
+>C : C
 >false : false
 >true : true
 
 type And<A extends boolean, B extends boolean> = If<A, B, false>;
 >And : And<A, B>
+>A : A
+>B : B
 >false : false
 
 type Or<A extends boolean, B extends boolean> = If<A, true, B>;
 >Or : Or<A, B>
+>A : A
+>B : B
 >true : true
 
 type IsString<T> = Extends<T, string>;
 >IsString : IsString<T>
+>T : T
 
 type Q1 = IsString<number>;  // false
 >Q1 : false
@@= skipped -161, +176 lines =@@
 
 type IsNever<T> = [T] extends [never] ? true : false;
 >IsNever : IsNever<T>
+>T : T
 >true : true
 >false : false
 
@@= skipped -13, +14 lines =@@
 >T52 : false
 
 function f22<T>(x: T extends (infer U)[] ? U[] : never) {
->f22 : <T>(x: T extends (infer U)[] ? U[] : never) => void
->x : T extends (infer U)[] ? U[] : never
+>f22 : <T>(x: T extends (infer U)[] ? (U)[] : never) => void
+>T : T
+>x : T extends (infer U)[] ? (U)[] : never
+>U : U
 
     let e = x[0];  // {}
 >e : unknown
 >x[0] : unknown
->x : T extends (infer U)[] ? U[] : never
+>x : T extends (infer U)[] ? (U)[] : never
 >0 : 0
 }
 
 function f23<T extends string[]>(x: T extends (infer U)[] ? U[] : never) {
->f23 : <T extends string[]>(x: T extends (infer U)[] ? U[] : never) => void
->x : T extends (infer U)[] ? U[] : never
+>f23 : <T extends string[]>(x: T extends (infer U)[] ? (U)[] : never) => void
+>T : T
+>x : T extends (infer U)[] ? (U)[] : never
+>U : U
 
     let e = x[0];  // string
 >e : string
 >x[0] : string
->x : T extends (infer U)[] ? U[] : never
+>x : T extends (infer U)[] ? (U)[] : never
 >0 : 0
 }
 
@@= skipped -25, +29 lines =@@
 
 type Eq<T, U> = T extends U ? U extends T ? true : false : false;
 >Eq : Eq<T, U>
+>T : T
+>U : U
 >true : true
 >false : false
 >false : false
@@= skipped -26, +28 lines =@@
 
 type Eq1<T, U> = Eq<T, U> extends false ? false : true;
 >Eq1 : Eq1<T, U>
+>T : T
+>U : U
 >false : false
 >false : false
 >true : true
@@= skipped -26, +28 lines =@@
 
 type Eq2<T, U> = Eq<T, U> extends true ? true : false;
 >Eq2 : Eq2<T, U>
+>T : T
+>U : U
 >true : true
 >true : true
 >false : false
@@= skipped -28, +30 lines =@@
 
 type Foo<T> = T extends string ? boolean : number;
 >Foo : Foo<T>
+>T : T
 
 type Bar<T> = T extends string ? boolean : number;
 >Bar : Bar<T>
+>T : T
 
 const convert = <U>(value: Foo<U>): Bar<U> => value;
 >convert : <U>(value: Foo<U>) => Bar<U>
 ><U>(value: Foo<U>): Bar<U> => value : <U>(value: Foo<U>) => Bar<U>
+>U : U
 >value : Foo<U>
 >value : Foo<U>
 
 type Baz<T> = Foo<T>;
 >Baz : Baz<T>
+>T : T
 
 const convert2 = <T>(value: Foo<T>): Baz<T> => value;
->convert2 : <T>(value: Foo<T>) => Baz<T>
-><T>(value: Foo<T>): Baz<T> => value : <T>(value: Foo<T>) => Baz<T>
+>convert2 : <T>(value: Foo<T>) => Foo<T>
+><T>(value: Foo<T>): Baz<T> => value : <T>(value: Foo<T>) => Foo<T>
+>T : T
 >value : Foo<T>
 >value : Foo<T>
 
 function f31<T>() {
 >f31 : <T>() => void
+>T : T
 
     type T1 = T extends string ? boolean : number;
->T1 : T extends string ? boolean : number
+>T1 : T1
 
     type T2 = T extends string ? boolean : number;
->T2 : T extends string ? boolean : number
+>T2 : T2
 
     var x: T1;
->x : T extends string ? boolean : number
+>x : T1
 
     var x: T2;
->x : T extends string ? boolean : number
+>x : T1
 }
 
 function f32<T, U>() {
 >f32 : <T, U>() => void
+>T : T
+>U : U
 
     type T1 = T & U extends string ? boolean : number;
->T1 : T & U extends string ? boolean : number
+>T1 : T1
 
     type T2 = Foo<T & U>;
 >T2 : Foo<T & U>
 
     var z: T1;
->z : T & U extends string ? boolean : number
+>z : T1
 
     var z: T2;  // Error, T2 is distributive, T1 isn't
->z : T & U extends string ? boolean : number
+>z : T1
 }
 
 function f33<T, U>() {
 >f33 : <T, U>() => void
+>T : T
+>U : U
 
     type T1 = Foo<T & U>;
 >T1 : Foo<T & U>
@@= skipped -71, +81 lines =@@
 
 type T90<T> = T extends 0 ? 0 : () => 0;
 >T90 : T90<T>
+>T : T
 
 type T91<T> = T extends 0 ? 0 : () => 0;
 >T91 : T91<T>
+>T : T
 
 const f40 = <U>(a: T90<U>): T91<U> => a;
 >f40 : <U>(a: T90<U>) => T91<U>
 ><U>(a: T90<U>): T91<U> => a : <U>(a: T90<U>) => T91<U>
+>U : U
 >a : T90<U>
 >a : T90<U>
 
 const f41 = <U>(a: T91<U>): T90<U> => a;
 >f41 : <U>(a: T91<U>) => T90<U>
 ><U>(a: T91<U>): T90<U> => a : <U>(a: T91<U>) => T90<U>
+>U : U
 >a : T91<U>
 >a : T91<U>
 
 type T92<T> = T extends () => 0 ? () => 1 : () => 2;
 >T92 : T92<T>
+>T : T
 
 type T93<T> = T extends () => 0 ? () => 1 : () => 2;
 >T93 : T93<T>
+>T : T
 
 const f42 = <U>(a: T92<U>): T93<U> => a;
 >f42 : <U>(a: T92<U>) => T93<U>
 ><U>(a: T92<U>): T93<U> => a : <U>(a: T92<U>) => T93<U>
+>U : U
 >a : T92<U>
 >a : T92<U>
 
 const f43 = <U>(a: T93<U>): T92<U> => a;
 >f43 : <U>(a: T93<U>) => T92<U>
 ><U>(a: T93<U>): T92<U> => a : <U>(a: T93<U>) => T92<U>
+>U : U
 >a : T93<U>
 >a : T93<U>
 
 type T94<T> = T extends string ? true : 42;
 >T94 : T94<T>
+>T : T
 >true : true
 
 type T95<T> = T extends string ? boolean : number;
 >T95 : T95<T>
+>T : T
 
 const f44 = <U>(value: T94<U>): T95<U> => value;
 >f44 : <U>(value: T94<U>) => T95<U>
 ><U>(value: T94<U>): T95<U> => value : <U>(value: T94<U>) => T95<U>
+>U : U
 >value : T94<U>
 >value : T94<U>
 
 const f45 = <U>(value: T95<U>): T94<U> => value;  // Error
 >f45 : <U>(value: T95<U>) => T94<U>
 ><U>(value: T95<U>): T94<U> => value : <U>(value: T95<U>) => T94<U>
+>U : U
 >value : T95<U>
 >value : T95<U>
 
@@= skipped -59, +71 lines =@@
 >f50 : () => void
 
     type Eq<T, U> = T extends U ? U extends T ? true : false : false;
->Eq : T extends U ? U extends T ? true : false : false
+>Eq : Eq<T, U>
+>T : T
+>U : U
 >true : true
 >false : false
 >false : false
 
     type If<S, T, U> = S extends false ? U : T;
->If : S extends false ? U : T
+>If : If<S, T, U>
+>S : S
+>T : T
+>U : U
 >false : false
 
     type Omit<T extends object> = { [P in keyof T]: If<Eq<T[P], never>, never, P>; }[keyof T];
->Omit : { [P in keyof T]: (T[P] extends infer T_1 ? T_1 extends T[P] ? T_1 extends never ? never : false : never : never) extends infer T_2 ? T_2 extends (T[P] extends infer T_1 ? T_1 extends T[P] ? T_1 extends never ? never : false : never : never) ? T_2 extends false ? P : never : never : never; }[keyof T]
+>Omit : Omit<T>
+>T : T
+>P : P
 
     type Omit2<T extends object, U = never> = { [P in keyof T]: If<Eq<T[P], U>, never, P>; }[keyof T];
->Omit2 : { [P in keyof T]: (T[P] extends infer T_1 ? T_1 extends T[P] ? T_1 extends U ? U extends T_1 ? true : false : false : never : never) extends infer T_2 ? T_2 extends (T[P] extends infer T_1 ? T_1 extends T[P] ? T_1 extends U ? U extends T_1 ? true : false : false : never : never) ? T_2 extends false ? P : never : never : never; }[keyof T]
+>Omit2 : Omit2<T, U>
+>T : T
+>U : U
+>P : P
 
     type A = Omit<{ a: void; b: never; }>;  // 'a'
 >A : "a"
@@= skipped -30, +40 lines =@@
 
 type OldDiff<T extends keyof any, U extends keyof any> = (
 >OldDiff : OldDiff<T, U>
+>T : T
+>U : U
 
     & { [P in T]: P; }
+>P : P
+
     & { [P in U]: never; }
+>P : P
+
     & { [x: string]: never; }
 >x : string
 
 )[T];
 type NewDiff<T, U> = T extends U ? never : T;
 >NewDiff : NewDiff<T, U>
+>T : T
+>U : U
 
 interface A {
+>A : A
+
     a: 'a';
 >a : "a"
 }
 interface B1 extends A {
+>B1 : B1
+
     b: 'b';
 >b : "b"
 
@@= skipped -22, +34 lines =@@
 >c : OldDiff<keyof this, "a">
 }
 interface B2 extends A {
+>B2 : B2
+
     b: 'b';
 >b : "b"
 
@@= skipped -16, +18 lines =@@
 
 type NonFooKeys1<T extends object> = OldDiff<keyof T, 'foo'>;
 >NonFooKeys1 : NonFooKeys1<T>
+>T : T
 
 type NonFooKeys2<T extends object> = Exclude<keyof T, 'foo'>;
 >NonFooKeys2 : NonFooKeys2<T>
+>T : T
 
 type Test1 = NonFooKeys1<{foo: 1, bar: 2, baz: 3}>;  // "bar" | "baz"
 >Test1 : Test1
@@= skipped -19, +21 lines =@@
 // Repro from #21729
 
 interface Foo2 { foo: string; }
+>Foo2 : Foo2
 >foo : string
 
 interface Bar2 { bar: string; }
+>Bar2 : Bar2
 >bar : string
 
 type FooBar = Foo2 | Bar2;
 >FooBar : FooBar
 
 declare interface ExtractFooBar<FB extends FooBar> { }
+>ExtractFooBar : ExtractFooBar<FB>
+>FB : FB
 
 type Extracted<Struct> = {
 >Extracted : Extracted<Struct>
+>Struct : Struct
 
     [K in keyof Struct]: Struct[K] extends FooBar ? ExtractFooBar<Struct[K]> : Struct[K];
+>K : K
 }
 
 // Repro from #22985
 
 type RecursivePartial<T> = {
 >RecursivePartial : RecursivePartial<T>
+>T : T
 
   [P in keyof T]?: T[P] extends Array<any> ? {[index: number]: RecursivePartial<T[P][0]>} :
+>P : P
 >index : number
 
     T[P] extends object ? RecursivePartial<T[P]> : T[P];
@@= skipped -29, +37 lines =@@
 
 declare function assign<T>(o: T, a: RecursivePartial<T>): void;
 >assign : <T>(o: T, a: RecursivePartial<T>) => void
+>T : T
 >o : T
 >a : RecursivePartial<T>
 
@@= skipped -38, +39 lines =@@
 
 type Weird1 = (<U extends boolean>(a: U) => never) extends 
 >Weird1 : never
+>U : U
 >a : U
 
     (<U extends true>(a: U) => never) ? never : never;
+>U : U
 >true : true
 >a : U
 
 type Weird2 = (<U extends boolean>(a: U) => U) extends 
 >Weird2 : boolean
+>U : U
 >a : U
 
     (<U extends true>(a: U) => infer T) ? T : never;
+>U : U
 >true : true
 >a : U
+>T : T
 
