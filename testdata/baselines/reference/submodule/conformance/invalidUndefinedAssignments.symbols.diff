--- old.invalidUndefinedAssignments.symbols
+++ new.invalidUndefinedAssignments.symbols
@@= skipped -6, +6 lines =@@
 
 enum E { A }
 >E : Symbol(E, Decl(invalidUndefinedAssignments.ts, 0, 24))
->A : Symbol(E.A, Decl(invalidUndefinedAssignments.ts, 2, 8))
+>A : Symbol(A, Decl(invalidUndefinedAssignments.ts, 2, 8))
 
 E = x;
 >E : Symbol(E, Decl(invalidUndefinedAssignments.ts, 0, 24))
 >x : Symbol(x, Decl(invalidUndefinedAssignments.ts, 0, 3))
 
 E.A = x;
->E.A : Symbol(E.A, Decl(invalidUndefinedAssignments.ts, 2, 8))
+>E.A : Symbol(A, Decl(invalidUndefinedAssignments.ts, 2, 8))
 >E : Symbol(E, Decl(invalidUndefinedAssignments.ts, 0, 24))
->A : Symbol(E.A, Decl(invalidUndefinedAssignments.ts, 2, 8))
+>A : Symbol(A, Decl(invalidUndefinedAssignments.ts, 2, 8))
 >x : Symbol(x, Decl(invalidUndefinedAssignments.ts, 0, 3))
 
 class C { foo: string }
 >C : Symbol(C, Decl(invalidUndefinedAssignments.ts, 4, 8))
->foo : Symbol(C.foo, Decl(invalidUndefinedAssignments.ts, 6, 9))
+>foo : Symbol(foo, Decl(invalidUndefinedAssignments.ts, 6, 9))
 
 var f: C;
 >f : Symbol(f, Decl(invalidUndefinedAssignments.ts, 7, 3))
@@= skipped -26, +26 lines =@@
 
 interface I { foo: string }
 >I : Symbol(I, Decl(invalidUndefinedAssignments.ts, 8, 6))
->foo : Symbol(I.foo, Decl(invalidUndefinedAssignments.ts, 10, 13))
+>foo : Symbol(foo, Decl(invalidUndefinedAssignments.ts, 10, 13))
 
 var g: I;
 >g : Symbol(g, Decl(invalidUndefinedAssignments.ts, 11, 3))
