--- old.iteratorSpreadInCall4.symbols
+++ new.iteratorSpreadInCall4.symbols
@@= skipped -9, +9 lines =@@
 >SymbolIterator : Symbol(SymbolIterator, Decl(iteratorSpreadInCall4.ts, 0, 44))
 
     next() {
->next : Symbol(SymbolIterator.next, Decl(iteratorSpreadInCall4.ts, 1, 22))
+>next : Symbol(next, Decl(iteratorSpreadInCall4.ts, 1, 22))
 
         return {
             value: Symbol(),
@@= skipped -14, +14 lines =@@
     }
 
     [Symbol.iterator]() {
->[Symbol.iterator] : Symbol(SymbolIterator[Symbol.iterator], Decl(iteratorSpreadInCall4.ts, 7, 5))
->Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(iteratorSpreadInCall4.ts, 7, 5))
+>Symbol.iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>iterator : Symbol(iterator, Decl(lib.es2015.iterable.d.ts, --, --))
 
         return this;
 >this : Symbol(SymbolIterator, Decl(iteratorSpreadInCall4.ts, 0, 44))
