--- old.TwoInternalModulesWithTheSameNameAndSameCommonRoot.js
+++ new.TwoInternalModulesWithTheSameNameAndSameCommonRoot.js
@@= skipped -38, +38 lines =@@
 
 
 
-//// [part1.js]
-var A;
-(function (A) {
-    var Utils;
-    (function (Utils) {
-        function mirror(p) {
-            return { x: p.y, y: p.x };
-        }
-        Utils.mirror = mirror;
-    })(Utils = A.Utils || (A.Utils = {}));
-})(A || (A = {}));
+//// [part3.js]
+var o;
+var o;
+var o = A.Origin;
+var o = A.Utils.mirror(o);
+var p;
+var p;
+var p = new A.Utils.Plane(o, { x: 1, y: 1 });
 //// [part2.js]
 var A;
 (function (A) {
     A.Origin = { x: 0, y: 0 };
-    var Utils;
+    let Utils;
     (function (Utils) {
-        var Plane = /** @class */ (function () {
-            function Plane(tl, br) {
+        class Plane {
+            tl;
+            br;
+            constructor(tl, br) {
                 this.tl = tl;
                 this.br = br;
             }
-            return Plane;
-        }());
+        }
         Utils.Plane = Plane;
     })(Utils = A.Utils || (A.Utils = {}));
 })(A || (A = {}));
-//// [part3.js]
-// test the merging actually worked
-var o;
-var o;
-var o = A.Origin;
-var o = A.Utils.mirror(o);
-var p;
-var p;
-var p = new A.Utils.Plane(o, { x: 1, y: 1 });
+//// [part1.js]
+var A;
+(function (A) {
+    let Utils;
+    (function (Utils) {
+        function mirror(p) {
+            return { x: p.y, y: p.x };
+        }
+        Utils.mirror = mirror;
+    })(Utils = A.Utils || (A.Utils = {}));
+})(A || (A = {}));
