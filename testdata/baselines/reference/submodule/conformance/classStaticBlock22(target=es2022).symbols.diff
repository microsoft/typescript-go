--- old.classStaticBlock22(target=es2022).symbols
+++ new.classStaticBlock22(target=es2022).symbols
@@= skipped -36, +36 lines =@@
 >D : Symbol(D, Decl(classStaticBlock22.ts, 21, 10))
 
       await = 1; // legal
->await : Symbol(D.await, Decl(classStaticBlock22.ts, 22, 13))
+>await : Symbol(await, Decl(classStaticBlock22.ts, 22, 13))
 
       x = await; // legal (initializers have an implicit function boundary)
->x : Symbol(D.x, Decl(classStaticBlock22.ts, 23, 16))
+>x : Symbol(x, Decl(classStaticBlock22.ts, 23, 16))
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
 
     };
@@= skipped -33, +33 lines =@@
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
 
       method() { await; }
->method : Symbol(E.method, Decl(classStaticBlock22.ts, 42, 30))
+>method : Symbol(method, Decl(classStaticBlock22.ts, 42, 30))
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
 
       get accessor() {
->accessor : Symbol(E.accessor, Decl(classStaticBlock22.ts, 43, 25), Decl(classStaticBlock22.ts, 47, 7))
+>accessor : Symbol(accessor, Decl(classStaticBlock22.ts, 43, 25), Decl(classStaticBlock22.ts, 47, 7))
 
         await;
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
@@= skipped -12, +12 lines =@@
         return 1;
       }
       set accessor(v: any) {
->accessor : Symbol(E.accessor, Decl(classStaticBlock22.ts, 43, 25), Decl(classStaticBlock22.ts, 47, 7))
+>accessor : Symbol(accessor, Decl(classStaticBlock22.ts, 43, 25), Decl(classStaticBlock22.ts, 47, 7))
 >v : Symbol(v, Decl(classStaticBlock22.ts, 48, 19))
 
         await;
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
       }
       propLambda = () => { await; }
->propLambda : Symbol(E.propLambda, Decl(classStaticBlock22.ts, 50, 7))
+>propLambda : Symbol(propLambda, Decl(classStaticBlock22.ts, 50, 7))
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
 
       propFunc = function () { await; }
->propFunc : Symbol(E.propFunc, Decl(classStaticBlock22.ts, 51, 35))
+>propFunc : Symbol(propFunc, Decl(classStaticBlock22.ts, 51, 35))
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
     }
   }
@@= skipped -20, +20 lines =@@
 >S : Symbol(S, Decl(classStaticBlock22.ts, 55, 10))
 
       static method() { await; }
->method : Symbol(S.method, Decl(classStaticBlock22.ts, 56, 13))
+>method : Symbol(method, Decl(classStaticBlock22.ts, 56, 13))
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
 
       static get accessor() {
->accessor : Symbol(S.accessor, Decl(classStaticBlock22.ts, 57, 32), Decl(classStaticBlock22.ts, 61, 7))
+>accessor : Symbol(accessor, Decl(classStaticBlock22.ts, 57, 32), Decl(classStaticBlock22.ts, 61, 7))
 
         await;
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
@@= skipped -12, +12 lines =@@
         return 1;
       }
       static set accessor(v: any) {
->accessor : Symbol(S.accessor, Decl(classStaticBlock22.ts, 57, 32), Decl(classStaticBlock22.ts, 61, 7))
+>accessor : Symbol(accessor, Decl(classStaticBlock22.ts, 57, 32), Decl(classStaticBlock22.ts, 61, 7))
 >v : Symbol(v, Decl(classStaticBlock22.ts, 62, 26))
 
         await;
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
       }
       static propLambda = () => { await; }
->propLambda : Symbol(S.propLambda, Decl(classStaticBlock22.ts, 64, 7))
+>propLambda : Symbol(propLambda, Decl(classStaticBlock22.ts, 64, 7))
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
 
       static propFunc = function () { await; }
->propFunc : Symbol(S.propFunc, Decl(classStaticBlock22.ts, 65, 42))
+>propFunc : Symbol(propFunc, Decl(classStaticBlock22.ts, 65, 42))
 >await : Symbol(await, Decl(classStaticBlock22.ts, 0, 3))
     }
   }
