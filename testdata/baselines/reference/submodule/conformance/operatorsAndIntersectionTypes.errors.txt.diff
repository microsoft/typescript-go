--- old.operatorsAndIntersectionTypes.errors.txt
+++ new.operatorsAndIntersectionTypes.errors.txt
@@= skipped -0, +0 lines =@@
-<no content>
+operatorsAndIntersectionTypes.ts(12,5): error TS2322: Type '{}' is not assignable to type '{ [x: string]: number; }'.
+  Index signature for type 'string' is missing in type '{}'.
+operatorsAndIntersectionTypes.ts(16,5): error TS2322: Type '{}' is not assignable to type '{ [x: number]: string; }'.
+  Index signature for type 'number' is missing in type '{}'.
+
+
+==== operatorsAndIntersectionTypes.ts (2 errors) ====
+    type Guid = string & { $Guid };          // Tagged string type
+    type SerialNo = number & { $SerialNo };  // Tagged number type
+    
+    function createGuid() {
+        return "21EC2020-3AEA-4069-A2DD-08002B30309D" as Guid;
+    }
+    
+    function createSerialNo() {
+        return 12345 as SerialNo;
+    }
+    
+    let map1: { [x: string]: number } = {};
+        ~~~~
+!!! error TS2322: Type '{}' is not assignable to type '{ [x: string]: number; }'.
+!!! error TS2322:   Index signature for type 'string' is missing in type '{}'.
+    let guid = createGuid();
+    map1[guid] = 123;  // Can with tagged string
+    
+    let map2: { [x: number]: string } = {};
+        ~~~~
+!!! error TS2322: Type '{}' is not assignable to type '{ [x: number]: string; }'.
+!!! error TS2322:   Index signature for type 'number' is missing in type '{}'.
+    let serialNo = createSerialNo();
+    map2[serialNo] = "hello";  // Can index with tagged number
+    
+    const s1 = "{" + guid + "}";
+    const s2 = guid.toLowerCase();
+    const s3 = guid + guid;
+    const s4 = guid + serialNo;
+    const s5 = serialNo.toPrecision(0);
+    const n1 = serialNo * 3;
+    const n2 = serialNo + serialNo;
+    const b1 = guid === "";
+    const b2 = guid === guid;
+    const b3 = serialNo === 0;
+    const b4 = serialNo === serialNo;
+    