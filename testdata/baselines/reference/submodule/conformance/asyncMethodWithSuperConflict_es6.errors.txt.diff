--- old.asyncMethodWithSuperConflict_es6.errors.txt
+++ new.asyncMethodWithSuperConflict_es6.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+error TS2318: Cannot find global type 'Array'.
+error TS2318: Cannot find global type 'Function'.
+error TS2318: Cannot find global type 'IArguments'.
+error TS2318: Cannot find global type 'RegExp'.
+error TS2318: Cannot find global type 'String'.
+error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+
+
+!!! error TS2318: Cannot find global type 'Array'.
+!!! error TS2318: Cannot find global type 'Function'.
+!!! error TS2318: Cannot find global type 'IArguments'.
+!!! error TS2318: Cannot find global type 'RegExp'.
+!!! error TS2318: Cannot find global type 'String'.
+!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+==== asyncMethodWithSuperConflict_es6.ts (0 errors) ====
+    class A {
+        x() {
+        }
+        y() {
+        }
+    }
+    
+    class B extends A {
+        // async method with only call/get on 'super' does not require a binding
+        async simple() {
+            const _super = null;
+            const _superIndex = null;
+            // call with property access
+            super.x();
+            // call additional property.
+            super.y();
+    
+            // call with element access
+            super["x"]();
+    
+            // property access (read)
+            const a = super.x;
+    
+            // element access (read)
+            const b = super["x"];
+        }
+    
+        // async method with assignment/destructuring on 'super' requires a binding
+        async advanced() {
+            const _super = null;
+            const _superIndex = null;
+            const f = () => {};
+    
+            // call with property access
+            super.x();
+    
+            // call with element access
+            super["x"]();
+    
+            // property access (read)
+            const a = super.x;
+    
+            // element access (read)
+            const b = super["x"];
+    
+            // property access (assign)
+            super.x = f;
+    
+            // element access (assign)
+            super["x"] = f;
+    
+            // destructuring assign with property access
+            ({ f: super.x } = { f });
+    
+            // destructuring assign with element access
+            ({ f: super["x"] } = { f });
+        }
+    }
+    
