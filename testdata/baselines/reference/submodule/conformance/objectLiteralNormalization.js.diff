--- old.objectLiteralNormalization.js
+++ new.objectLiteralNormalization.js
@@= skipped -52, +52 lines =@@


 //// [objectLiteralNormalization.js]
-"use strict";
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
 // Object literals in unions are normalized upon widening
 let a1 = [{ a: 0 }, { a: 1, b: "x" }, { a: 2, b: "y", c: true }][0];
 a1.a; // number
@@= skipped -18, +28 lines =@@
 a2 = {};
 a2 = { a: "def", b: 20 }; // Error
 a2 = { a: 1 }; // Error
-let b2 = Object.assign(Object.assign({}, b1), { z: 55 });
-let b3 = Object.assign({}, b2);
+let b2 = __assign(__assign({}, b1), { z: 55 });
+let b3 = __assign({}, b2);
 let c1 = !true ? {} : opts;
 let c2 = !true ? opts : {};
 let c3 = !true ? { a: 0, b: 0 } : {};
@@= skipped -76, +76 lines =@@
     baz?: boolean;
 };
 declare let c1: {
-    foo?: string;
-    bar?: string;
-    baz?: boolean;
+    foo?: string | undefined;
+    bar?: string | undefined;
+    baz?: boolean | undefined;
 };
 declare let c2: {
-    foo?: string;
-    bar?: string;
-    baz?: boolean;
+    foo?: string | undefined;
+    bar?: string | undefined;
+    baz?: boolean | undefined;
 };
 declare let c3: {
     a: number;