//// [tests/cases/conformance/jsdoc/typedefTagNested.ts] ////

=== a.js ===
/** @typedef {Object} App
>App : any

 * @property {string} name
>name : any

 * @property {Object} icons
>icons : any

 * @property {string} icons.image32
>property : any
>icons : any
>image32 : any

 * @property {string} icons.image64
>property : any
>icons : any
>image64 : any

 */
var ex;
>ex : any

/** @type {App} */
const app = {
>app : App
>{    name: 'name',    icons: {        image32: 'x.png',        image64: 'y.png',    }} : { name: string; icons: { image32: string; image64: string; }; }

    name: 'name',
>name : string
>'name' : "name"

    icons: {
>icons : { image32: string; image64: string; }
>{        image32: 'x.png',        image64: 'y.png',    } : { image32: string; image64: string; }

        image32: 'x.png',
>image32 : string
>'x.png' : "x.png"

        image64: 'y.png',
>image64 : string
>'y.png' : "y.png"
    }
}

/** @typedef {Object} Opp
>Opp : any

 * @property {string} name
 * @property {Object} oops
 * @property {string} horrible
 * @type {string} idea
 */
var intercessor = 1
>intercessor : number
>1 : 1

/** @type {Opp} */
var mistake;
>mistake : string

/** @typedef {Object} Upp
>Upp : any

 * @property {string} name
>name : any

 * @property {Object} not
>not : any

 * @property {string} nested
>nested : any

 */

/** @type {Upp} */
var sala = { name: 'uppsala', not: 0, nested: "ok" };
>sala : Upp
>{ name: 'uppsala', not: 0, nested: "ok" } : { name: string; not: number; nested: string; }
>name : string
>'uppsala' : "uppsala"
>not : number
>0 : 0
>nested : string
>"ok" : "ok"

sala.name
>sala.name : any
>sala : Upp
>name : any

sala.not
>sala.not : any
>sala : Upp
>not : any

sala.nested
>sala.nested : any
>sala : Upp
>nested : any

