--- old.iteratorSpreadInArray3.symbols
+++ new.iteratorSpreadInArray3.symbols
@@= skipped -4, +4 lines =@@
 >SymbolIterator : Symbol(SymbolIterator, Decl(iteratorSpreadInArray3.ts, 0, 0))
 
     next() {
->next : Symbol(SymbolIterator.next, Decl(iteratorSpreadInArray3.ts, 0, 22))
+>next : Symbol(next, Decl(iteratorSpreadInArray3.ts, 0, 22))
 
         return {
             value: Symbol(),
 >value : Symbol(value, Decl(iteratorSpreadInArray3.ts, 2, 16))
->Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 
             done: false
 >done : Symbol(done, Decl(iteratorSpreadInArray3.ts, 3, 28))
@@= skipped -14, +13 lines =@@
     }
 
     [Symbol.iterator]() {
->[Symbol.iterator] : Symbol(SymbolIterator[Symbol.iterator], Decl(iteratorSpreadInArray3.ts, 6, 5))
->Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
->Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
+>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(iteratorSpreadInArray3.ts, 6, 5))
 
         return this;
 >this : Symbol(SymbolIterator, Decl(iteratorSpreadInArray3.ts, 0, 0))
