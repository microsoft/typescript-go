--- old.objectRestForOf.types
+++ new.objectRestForOf.types
@@= skipped -35, +35 lines =@@
 >rrestOff : { y: string; }
 }
 for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
->norest : { x: string; y: string; }
->array.map(a => ({ ...a, x: 'a string' })) : { x: string; y: string; }[]
+>norest : { y: string; x: string; }
+>array.map(a => ({ ...a, x: 'a string' })) : { y: string; x: string; }[]
 >array.map : <U>(callbackfn: (value: { x: number; y: string; }, index: number, array: { x: number; y: string; }[]) => U, thisArg?: any) => U[]
 >array : { x: number; y: string; }[]
 >map : <U>(callbackfn: (value: { x: number; y: string; }, index: number, array: { x: number; y: string; }[]) => U, thisArg?: any) => U[]
->a => ({ ...a, x: 'a string' }) : (a: { x: number; y: string; }) => { x: string; y: string; }
+>a => ({ ...a, x: 'a string' }) : (a: { x: number; y: string; }) => { y: string; x: string; }
 >a : { x: number; y: string; }
->({ ...a, x: 'a string' }) : { x: string; y: string; }
->{ ...a, x: 'a string' } : { x: string; y: string; }
+>({ ...a, x: 'a string' }) : { y: string; x: string; }
+>{ ...a, x: 'a string' } : { y: string; x: string; }
 >a : { x: number; y: string; }
 >x : string
 >'a string' : "a string"
@@= skipped -16, +16 lines =@@
     [norest.x, norest.y];
 >[norest.x, norest.y] : string[]
 >norest.x : string
->norest : { x: string; y: string; }
+>norest : { y: string; x: string; }
 >x : string
 >norest.y : string
->norest : { x: string; y: string; }
+>norest : { y: string; x: string; }
 >y : string
 
     // x is now a string. who knows why.
