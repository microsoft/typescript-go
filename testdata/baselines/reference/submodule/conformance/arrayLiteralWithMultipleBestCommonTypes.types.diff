--- old.arrayLiteralWithMultipleBestCommonTypes.types
+++ new.arrayLiteralWithMultipleBestCommonTypes.types
@@= skipped -37, +37 lines =@@
 >c : { x: number; a?: number; }
 
 var ds = [(x: Object) => 1, (x: string) => 2]; // { (x:Object) => number }[]
->ds : ((x: Object) => number)[]
->[(x: Object) => 1, (x: string) => 2] : ((x: Object) => number)[]
+>ds : (x: Object) => number[]
+>[(x: Object) => 1, (x: string) => 2] : (x: Object) => number[]
 >(x: Object) => 1 : (x: Object) => number
 >x : Object
 >1 : 1
@@= skipped -10, +10 lines =@@
 >2 : 2
 
 var es = [(x: string) => 2, (x: Object) => 1]; // { (x:string) => number }[]
->es : ((x: string) => number)[]
->[(x: string) => 2, (x: Object) => 1] : ((x: string) => number)[]
+>es : (x: string) => number[]
+>[(x: string) => 2, (x: Object) => 1] : (x: string) => number[]
 >(x: string) => 2 : (x: string) => number
 >x : string
 >2 : 2
@@= skipped -10, +10 lines =@@
 >1 : 1
 
 var fs = [(a: { x: number; y?: number }) => 1, (b: { x: number; z?: number }) => 2]; // (a: { x: number; y?: number }) => number[]
->fs : (((a: { x: number; y?: number; }) => number) | ((b: { x: number; z?: number; }) => number))[]
->[(a: { x: number; y?: number }) => 1, (b: { x: number; z?: number }) => 2] : (((a: { x: number; y?: number; }) => number) | ((b: { x: number; z?: number; }) => number))[]
+>fs : ((a: { x: number; y?: number; }) => number | (b: { x: number; z?: number; }) => number)[]
+>[(a: { x: number; y?: number }) => 1, (b: { x: number; z?: number }) => 2] : ((a: { x: number; y?: number; }) => number | (b: { x: number; z?: number; }) => number)[]
 >(a: { x: number; y?: number }) => 1 : (a: { x: number; y?: number; }) => number
 >a : { x: number; y?: number; }
 >x : number
@@= skipped -14, +14 lines =@@
 >2 : 2
 
 var gs = [(b: { x: number; z?: number }) => 2, (a: { x: number; y?: number }) => 1]; // (b: { x: number; z?: number }) => number[]
->gs : (((b: { x: number; z?: number; }) => number) | ((a: { x: number; y?: number; }) => number))[]
->[(b: { x: number; z?: number }) => 2, (a: { x: number; y?: number }) => 1] : (((b: { x: number; z?: number; }) => number) | ((a: { x: number; y?: number; }) => number))[]
+>gs : ((b: { x: number; z?: number; }) => number | (a: { x: number; y?: number; }) => number)[]
+>[(b: { x: number; z?: number }) => 2, (a: { x: number; y?: number }) => 1] : ((b: { x: number; z?: number; }) => number | (a: { x: number; y?: number; }) => number)[]
 >(b: { x: number; z?: number }) => 2 : (b: { x: number; z?: number; }) => number
 >b : { x: number; z?: number; }
 >x : number
