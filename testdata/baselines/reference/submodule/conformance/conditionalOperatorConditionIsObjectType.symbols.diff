--- old.conditionalOperatorConditionIsObjectType.symbols
+++ new.conditionalOperatorConditionIsObjectType.symbols
@@= skipped -42, +42 lines =@@
 
 class C { static doIt: () => void };
 >C : Symbol(C, Decl(conditionalOperatorConditionIsObjectType.ts, 15, 19))
->doIt : Symbol(C.doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
+>doIt : Symbol(doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
 
 //Cond is an object type variable
 condObject ? exprAny1 : exprAny2;
@@= skipped -36, +36 lines =@@
 //Cond is an object type literal
 ((a: string) => a.length) ? exprAny1 : exprAny2;
 >a : Symbol(a, Decl(conditionalOperatorConditionIsObjectType.ts, 27, 2))
->a.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>a.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(conditionalOperatorConditionIsObjectType.ts, 27, 2))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >exprAny1 : Symbol(exprAny1, Decl(conditionalOperatorConditionIsObjectType.ts, 3, 3))
 >exprAny2 : Symbol(exprAny2, Decl(conditionalOperatorConditionIsObjectType.ts, 9, 3))
 
 ((a: string) => a.length) ? exprBoolean1 : exprBoolean2;
 >a : Symbol(a, Decl(conditionalOperatorConditionIsObjectType.ts, 28, 2))
->a.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>a.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(conditionalOperatorConditionIsObjectType.ts, 28, 2))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >exprBoolean1 : Symbol(exprBoolean1, Decl(conditionalOperatorConditionIsObjectType.ts, 4, 3))
 >exprBoolean2 : Symbol(exprBoolean2, Decl(conditionalOperatorConditionIsObjectType.ts, 10, 3))
 
@@= skipped -53, +53 lines =@@
 >exprNumber2 : Symbol(exprNumber2, Decl(conditionalOperatorConditionIsObjectType.ts, 11, 3))
 
 C.doIt() ? exprString1 : exprString2;
->C.doIt : Symbol(C.doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
+>C.doIt : Symbol(doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
 >C : Symbol(C, Decl(conditionalOperatorConditionIsObjectType.ts, 15, 19))
->doIt : Symbol(C.doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
+>doIt : Symbol(doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
 >exprString1 : Symbol(exprString1, Decl(conditionalOperatorConditionIsObjectType.ts, 6, 3))
 >exprString2 : Symbol(exprString2, Decl(conditionalOperatorConditionIsObjectType.ts, 12, 3))
 
 condObject.valueOf() ? exprIsObject1 : exprIsObject2;
->condObject.valueOf : Symbol(Object.valueOf, Decl(lib.es5.d.ts, --, --))
+>condObject.valueOf : Symbol(valueOf, Decl(lib.es5.d.ts, --, --))
 >condObject : Symbol(condObject, Decl(conditionalOperatorConditionIsObjectType.ts, 1, 3))
->valueOf : Symbol(Object.valueOf, Decl(lib.es5.d.ts, --, --))
+>valueOf : Symbol(valueOf, Decl(lib.es5.d.ts, --, --))
 >exprIsObject1 : Symbol(exprIsObject1, Decl(conditionalOperatorConditionIsObjectType.ts, 7, 3))
 >exprIsObject2 : Symbol(exprIsObject2, Decl(conditionalOperatorConditionIsObjectType.ts, 13, 3))
 
@@= skipped -58, +58 lines =@@
 var resultIsAny2 = ((a: string) => a.length) ? exprAny1 : exprAny2;
 >resultIsAny2 : Symbol(resultIsAny2, Decl(conditionalOperatorConditionIsObjectType.ts, 50, 3))
 >a : Symbol(a, Decl(conditionalOperatorConditionIsObjectType.ts, 50, 21))
->a.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>a.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(conditionalOperatorConditionIsObjectType.ts, 50, 21))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >exprAny1 : Symbol(exprAny1, Decl(conditionalOperatorConditionIsObjectType.ts, 3, 3))
 >exprAny2 : Symbol(exprAny2, Decl(conditionalOperatorConditionIsObjectType.ts, 9, 3))
 
 var resultIsBoolean2 = ((a: string) => a.length) ? exprBoolean1 : exprBoolean2;
 >resultIsBoolean2 : Symbol(resultIsBoolean2, Decl(conditionalOperatorConditionIsObjectType.ts, 51, 3))
 >a : Symbol(a, Decl(conditionalOperatorConditionIsObjectType.ts, 51, 25))
->a.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>a.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(conditionalOperatorConditionIsObjectType.ts, 51, 25))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >exprBoolean1 : Symbol(exprBoolean1, Decl(conditionalOperatorConditionIsObjectType.ts, 4, 3))
 >exprBoolean2 : Symbol(exprBoolean2, Decl(conditionalOperatorConditionIsObjectType.ts, 10, 3))
 
@@= skipped -61, +61 lines =@@
 
 var resultIsString3 = C.doIt() ? exprString1 : exprString2;
 >resultIsString3 : Symbol(resultIsString3, Decl(conditionalOperatorConditionIsObjectType.ts, 60, 3))
->C.doIt : Symbol(C.doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
+>C.doIt : Symbol(doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
 >C : Symbol(C, Decl(conditionalOperatorConditionIsObjectType.ts, 15, 19))
->doIt : Symbol(C.doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
+>doIt : Symbol(doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
 >exprString1 : Symbol(exprString1, Decl(conditionalOperatorConditionIsObjectType.ts, 6, 3))
 >exprString2 : Symbol(exprString2, Decl(conditionalOperatorConditionIsObjectType.ts, 12, 3))
 
 var resultIsObject3 = condObject.valueOf() ? exprIsObject1 : exprIsObject2;
 >resultIsObject3 : Symbol(resultIsObject3, Decl(conditionalOperatorConditionIsObjectType.ts, 61, 3))
->condObject.valueOf : Symbol(Object.valueOf, Decl(lib.es5.d.ts, --, --))
+>condObject.valueOf : Symbol(valueOf, Decl(lib.es5.d.ts, --, --))
 >condObject : Symbol(condObject, Decl(conditionalOperatorConditionIsObjectType.ts, 1, 3))
->valueOf : Symbol(Object.valueOf, Decl(lib.es5.d.ts, --, --))
+>valueOf : Symbol(valueOf, Decl(lib.es5.d.ts, --, --))
 >exprIsObject1 : Symbol(exprIsObject1, Decl(conditionalOperatorConditionIsObjectType.ts, 7, 3))
 >exprIsObject2 : Symbol(exprIsObject2, Decl(conditionalOperatorConditionIsObjectType.ts, 13, 3))
 
 var resultIsStringOrBoolean3 = C.doIt() ? exprString1 : exprBoolean1; // union
 >resultIsStringOrBoolean3 : Symbol(resultIsStringOrBoolean3, Decl(conditionalOperatorConditionIsObjectType.ts, 62, 3))
->C.doIt : Symbol(C.doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
+>C.doIt : Symbol(doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
 >C : Symbol(C, Decl(conditionalOperatorConditionIsObjectType.ts, 15, 19))
->doIt : Symbol(C.doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
+>doIt : Symbol(doIt, Decl(conditionalOperatorConditionIsObjectType.ts, 16, 9))
 >exprString1 : Symbol(exprString1, Decl(conditionalOperatorConditionIsObjectType.ts, 6, 3))
 >exprBoolean1 : Symbol(exprBoolean1, Decl(conditionalOperatorConditionIsObjectType.ts, 4, 3))
 
