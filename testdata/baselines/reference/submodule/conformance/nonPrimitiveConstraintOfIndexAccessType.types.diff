--- old.nonPrimitiveConstraintOfIndexAccessType.types
+++ new.nonPrimitiveConstraintOfIndexAccessType.types
@@= skipped -3, +3 lines =@@
 // test for #15371
 function f<T extends object, P extends keyof T>(s: string, tp: T[P]): void {
 >f : <T extends object, P extends keyof T>(s: string, tp: T[P]) => void
+>T : T
+>P : P
 >s : string
 >tp : T[P]
 
@@= skipped -10, +12 lines =@@
 }
 function g<T extends null, P extends keyof T>(s: string, tp: T[P]): void {
 >g : <T extends null, P extends keyof T>(s: string, tp: T[P]) => void
+>T : T
+>P : P
 >s : string
 >tp : T[P]
 
@@= skipped -10, +12 lines =@@
 }
 function h<T extends undefined, P extends keyof T>(s: string, tp: T[P]): void {
 >h : <T extends undefined, P extends keyof T>(s: string, tp: T[P]) => void
+>T : T
+>P : P
 >s : string
 >tp : T[P]
 
@@= skipped -10, +12 lines =@@
 }
 function i<T extends void, P extends keyof T>(s: string, tp: T[P]): void {
 >i : <T extends void, P extends keyof T>(s: string, tp: T[P]) => void
+>T : T
+>P : P
 >s : string
 >tp : T[P]
 
@@= skipped -10, +12 lines =@@
 }
 function j<T extends never, P extends keyof T>(s: string, tp: T[P]): void {
 >j : <T extends never, P extends keyof T>(s: string, tp: T[P]) => void
+>T : T
+>P : P
 >s : string
 >tp : T[P]
 
@@= skipped -10, +12 lines =@@
 }
 function k<T extends number, P extends keyof T>(s: string, tp: T[P]): void {
 >k : <T extends number, P extends keyof T>(s: string, tp: T[P]) => void
+>T : T
+>P : P
 >s : string
 >tp : T[P]
 
@@= skipped -10, +12 lines =@@
 }
 function o<T extends string, P extends keyof T>(s: string, tp: T[P]): void {
 >o : <T extends string, P extends keyof T>(s: string, tp: T[P]) => void
+>T : T
+>P : P
 >s : string
 >tp : T[P]
 
@@= skipped -10, +12 lines =@@
 }
 function l<T extends {}, P extends keyof T>(s: string, tp: T[P]): void {
 >l : <T extends {}, P extends keyof T>(s: string, tp: T[P]) => void
+>T : T
+>P : P
 >s : string
 >tp : T[P]
 
@@= skipped -10, +12 lines =@@
 }
 function m<T extends { a: number }, P extends keyof T>(s: string, tp: T[P]): void {
 >m : <T extends { a: number; }, P extends keyof T>(s: string, tp: T[P]) => void
+>T : T
 >a : number
+>P : P
 >s : string
 >tp : T[P]
 
@@= skipped -11, +13 lines =@@
 }
 function n<T extends { [s: string]: number }, P extends keyof T>(s: string, tp: T[P]): void {
 >n : <T extends { [s: string]: number; }, P extends keyof T>(s: string, tp: T[P]) => void
+>T : T
 >s : string
+>P : P
 >s : string
 >tp : T[P]
 
