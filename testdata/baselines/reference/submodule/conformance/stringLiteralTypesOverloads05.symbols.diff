--- old.stringLiteralTypesOverloads05.symbols
+++ new.stringLiteralTypesOverloads05.symbols
@@= skipped -2, +2 lines =@@
 === stringLiteralTypesOverloads05.ts ===
 interface Animal { animal: {} };
 >Animal : Symbol(Animal, Decl(stringLiteralTypesOverloads05.ts, 0, 0))
->animal : Symbol(Animal.animal, Decl(stringLiteralTypesOverloads05.ts, 0, 18))
+>animal : Symbol(animal, Decl(stringLiteralTypesOverloads05.ts, 0, 18))
 
 interface Dog extends Animal { dog: {} }
 >Dog : Symbol(Dog, Decl(stringLiteralTypesOverloads05.ts, 0, 32))
 >Animal : Symbol(Animal, Decl(stringLiteralTypesOverloads05.ts, 0, 0))
->dog : Symbol(Dog.dog, Decl(stringLiteralTypesOverloads05.ts, 1, 30))
+>dog : Symbol(dog, Decl(stringLiteralTypesOverloads05.ts, 1, 30))
 
 interface Cat extends Animal { cat: {} }
 >Cat : Symbol(Cat, Decl(stringLiteralTypesOverloads05.ts, 1, 40))
 >Animal : Symbol(Animal, Decl(stringLiteralTypesOverloads05.ts, 0, 0))
->cat : Symbol(Cat.cat, Decl(stringLiteralTypesOverloads05.ts, 2, 30))
+>cat : Symbol(cat, Decl(stringLiteralTypesOverloads05.ts, 2, 30))
 
 interface Moose extends Animal { moose: {} }
 >Moose : Symbol(Moose, Decl(stringLiteralTypesOverloads05.ts, 2, 40))
 >Animal : Symbol(Animal, Decl(stringLiteralTypesOverloads05.ts, 0, 0))
->moose : Symbol(Moose.moose, Decl(stringLiteralTypesOverloads05.ts, 3, 32))
+>moose : Symbol(moose, Decl(stringLiteralTypesOverloads05.ts, 3, 32))
 
 function doThing(x: "dog"): Dog;
 >doThing : Symbol(doThing, Decl(stringLiteralTypesOverloads05.ts, 3, 44), Decl(stringLiteralTypesOverloads05.ts, 5, 32), Decl(stringLiteralTypesOverloads05.ts, 6, 32), Decl(stringLiteralTypesOverloads05.ts, 7, 36))
