--- old.TwoInternalModulesThatMergeEachWithExportedLocalVarsOfTheSameName.js
+++ new.TwoInternalModulesThatMergeEachWithExportedLocalVarsOfTheSameName.js
@@= skipped -28, +28 lines =@@
 }
 
 
-//// [part1.js]
+//// [part2.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.A = void 0;
 var A;
 (function (A) {
-    var Utils;
+    A.Origin = { x: 0, y: 0 };
+    let Utils;
     (function (Utils) {
-        function mirror(p) {
-            return { x: p.y, y: p.x };
+        class Plane {
+            tl;
+            br;
+            constructor(tl, br) {
+                this.tl = tl;
+                this.br = br;
+            }
         }
-        Utils.mirror = mirror;
+        Utils.Plane = Plane;
     })(Utils = A.Utils || (A.Utils = {}));
-    A.Origin = { x: 0, y: 0 };
 })(A || (exports.A = A = {}));
-//// [part2.js]
+//// [part1.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.A = void 0;
 var A;
 (function (A) {
-    // collision with 'Origin' var in other part of merged module
-    A.Origin = { x: 0, y: 0 };
-    var Utils;
+    let Utils;
     (function (Utils) {
-        var Plane = /** @class */ (function () {
-            function Plane(tl, br) {
-                this.tl = tl;
-                this.br = br;
-            }
-            return Plane;
-        }());
-        Utils.Plane = Plane;
+        function mirror(p) {
+            return { x: p.y, y: p.x };
+        }
+        Utils.mirror = mirror;
     })(Utils = A.Utils || (A.Utils = {}));
+    A.Origin = { x: 0, y: 0 };
 })(A || (exports.A = A = {}));
