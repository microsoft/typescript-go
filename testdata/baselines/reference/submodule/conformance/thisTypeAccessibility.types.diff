--- old.thisTypeAccessibility.types
+++ new.thisTypeAccessibility.types
@@= skipped -29, +29 lines =@@
 }
 
 interface MyClass {
+>MyClass : MyClass
+
     extension1(p: number): void;
 >extension1 : (p: number) => void
 >p : number
@@= skipped -15, +17 lines =@@
 
 class MyGenericClass<T> {
 >MyGenericClass : MyGenericClass<T>
+>T : T
 
     private p: T;
 >p : T
@@= skipped -21, +22 lines =@@
 }
 
 MyClass.prototype.extension1 = function (this: MyClass, p: number) { 
->MyClass.prototype.extension1 = function (this: MyClass, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : (this: MyClass, p: number) => void
+>MyClass.prototype.extension1 = function (this: MyClass, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : (p: number) => void
 >MyClass.prototype.extension1 : (p: number) => void
 >MyClass.prototype : MyClass
 >MyClass : typeof MyClass
 >prototype : MyClass
 >extension1 : (p: number) => void
->function (this: MyClass, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : (this: MyClass, p: number) => void
+>function (this: MyClass, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : (p: number) => void
 >this : MyClass
 >p : number
 
@@= skipped -54, +54 lines =@@
 }
 
 MyClass.prototype.extension2 = function<T extends MyClass> (this: T, p: number) { 
->MyClass.prototype.extension2 = function<T extends MyClass> (this: T, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : <T extends MyClass>(this: T, p: number) => void
+>MyClass.prototype.extension2 = function<T extends MyClass> (this: T, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : <T extends MyClass>(p: number) => void
 >MyClass.prototype.extension2 : (p: number) => void
 >MyClass.prototype : MyClass
 >MyClass : typeof MyClass
 >prototype : MyClass
 >extension2 : (p: number) => void
->function<T extends MyClass> (this: T, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : <T extends MyClass>(this: T, p: number) => void
+>function<T extends MyClass> (this: T, p: number) {     this.p = p;    this.pp = p;    this.ppp = p;    MyClass.sp = p;    MyClass.spp = p;    MyClass.sppp = p;} : <T extends MyClass>(p: number) => void
+>T : T
 >this : T
 >p : number
 
@@= skipped -54, +55 lines =@@
 }
 
 function extension3<T extends MyClass> (this: T, p: number) { 
->extension3 : <T extends MyClass>(this: T, p: number) => void
+>extension3 : <T extends MyClass>(p: number) => void
+>T : T
 >this : T
 >p : number
 
@@= skipped -48, +49 lines =@@
 }
 
 MyClass.prototype.extension3 = extension3;
->MyClass.prototype.extension3 = extension3 : <T extends MyClass>(this: T, p: number) => void
+>MyClass.prototype.extension3 = extension3 : <T extends MyClass>(p: number) => void
 >MyClass.prototype.extension3 : (p: number) => void
 >MyClass.prototype : MyClass
 >MyClass : typeof MyClass
 >prototype : MyClass
 >extension3 : (p: number) => void
->extension3 : <T extends MyClass>(this: T, p: number) => void
+>extension3 : <T extends MyClass>(p: number) => void
 
 function extension4<T extends number>(this: MyGenericClass<T>, p: T) {
->extension4 : <T extends number>(this: MyGenericClass<T>, p: T) => void
+>extension4 : <T extends number>(p: T) => void
+>T : T
 >this : MyGenericClass<T>
 >p : T
 
