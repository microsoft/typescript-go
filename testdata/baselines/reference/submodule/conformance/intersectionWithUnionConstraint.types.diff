--- old.intersectionWithUnionConstraint.types
+++ new.intersectionWithUnionConstraint.types
@@= skipped -2, +2 lines =@@
 === intersectionWithUnionConstraint.ts ===
 function f1<T extends string | number, U extends string | number>(x: T & U) {
 >f1 : <T extends string | number, U extends string | number>(x: T & U) => void
+>T : T
+>U : U
 >x : T & U
 
     // Combined constraint of 'T & U' is 'string | number'
@@= skipped -10, +12 lines =@@
 
 function f2<T extends string | number | undefined, U extends string | null | undefined>(x: T & U) {
 >f2 : <T extends string | number | undefined, U extends string | null | undefined>(x: T & U) => void
+>T : T
+>U : U
 >x : T & U
 
     let y1: string | number = x;     // Error
@@= skipped -31, +33 lines =@@
 >T1 : string | undefined
 
 function f3<T extends string | number | undefined>(x: T & (number | object | undefined)) {
->f3 : <T extends string | number | undefined>(x: T & (number | object | undefined)) => void
->x : (T & undefined) | (T & number)
+>f3 : <T extends string | number | undefined>(x: T & undefined | T & number) => void
+>T : T
+>x : T & undefined | T & number
 
     const y: number | undefined = x;
 >y : number | undefined
@@= skipped -9, +10 lines =@@
 }
 
 function f4<T extends string | number>(x: T & (number | object)) {
->f4 : <T extends string | number>(x: T & (number | object)) => void
+>f4 : <T extends string | number>(x: T & number) => void
+>T : T
 >x : T & number
 
     const y: number = x;
@@= skipped -10, +11 lines =@@
 
 function f5<T, U extends keyof T>(x: keyof T & U) {
 >f5 : <T, U extends keyof T>(x: keyof T & U) => void
+>T : T
+>U : U
 >x : keyof T & U
 
     let y: keyof any = x;
@@= skipped -11, +13 lines =@@
 
 type Example<T, U> = { [K in keyof T]: K extends keyof U ? UnexpectedError<K> : NoErrorHere<K> }
 >Example : Example<T, U>
+>T : T
+>U : U
+>K : K
 
 type UnexpectedError<T extends PropertyKey> = T
 >UnexpectedError : T
+>T : T
 
 type NoErrorHere<T extends PropertyKey> = T
 >NoErrorHere : T
+>T : T
 
 // Repro from #30331
 
 type a<T> = T extends Array<infer U> ? U : never;
 >a : a<T>
+>T : T
+>U : U
 
 type b<T> = { [K in a<T> & keyof T ]: 42 };
 >b : b<T>
+>T : T
+>K : K
 
