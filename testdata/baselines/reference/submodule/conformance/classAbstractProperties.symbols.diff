--- old.classAbstractProperties.symbols
+++ new.classAbstractProperties.symbols
@@= skipped -4, +4 lines =@@
 >A : Symbol(A, Decl(classAbstractProperties.ts, 0, 0))
 
     abstract x : number;
->x : Symbol(A.x, Decl(classAbstractProperties.ts, 0, 18))
+>x : Symbol(x, Decl(classAbstractProperties.ts, 0, 18))
 
     public abstract y : number;
->y : Symbol(A.y, Decl(classAbstractProperties.ts, 1, 24))
+>y : Symbol(y, Decl(classAbstractProperties.ts, 1, 24))
 
     protected abstract z : number;
->z : Symbol(A.z, Decl(classAbstractProperties.ts, 2, 31))
+>z : Symbol(z, Decl(classAbstractProperties.ts, 2, 31))
 
     private abstract w : number;
->w : Symbol(A.w, Decl(classAbstractProperties.ts, 3, 34))
+>w : Symbol(w, Decl(classAbstractProperties.ts, 3, 34))
     
     abstract m: () => void; 
->m : Symbol(A.m, Decl(classAbstractProperties.ts, 4, 32))
+>m : Symbol(m, Decl(classAbstractProperties.ts, 4, 32))
     
     abstract foo_x() : number;
->foo_x : Symbol(A.foo_x, Decl(classAbstractProperties.ts, 6, 27))
+>foo_x : Symbol(foo_x, Decl(classAbstractProperties.ts, 6, 27))
 
     public abstract foo_y() : number;
->foo_y : Symbol(A.foo_y, Decl(classAbstractProperties.ts, 8, 30))
+>foo_y : Symbol(foo_y, Decl(classAbstractProperties.ts, 8, 30))
 
     protected abstract foo_z() : number;
->foo_z : Symbol(A.foo_z, Decl(classAbstractProperties.ts, 9, 37))
+>foo_z : Symbol(foo_z, Decl(classAbstractProperties.ts, 9, 37))
 
     private abstract foo_w() : number;
->foo_w : Symbol(A.foo_w, Decl(classAbstractProperties.ts, 10, 40))
+>foo_w : Symbol(foo_w, Decl(classAbstractProperties.ts, 10, 40))
 }
