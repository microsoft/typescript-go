--- old.inlineJsxFactoryDeclarationsLocalTypes.js
+++ new.inlineJsxFactoryDeclarationsLocalTypes.js
@@= skipped -91, +91 lines =@@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.tree = exports.MyClass = exports.MySFC = void 0;
 /** @jsx predom */
-var renderer2_1 = require("./renderer2");
+const renderer2_1 = require("./renderer2");
 const MySFC = (props) => (0, renderer2_1.predom)("p", null,
     props.x,
     " + ",
@@= skipped -10, +10 lines =@@
     ...this.props.children);
 exports.MySFC = MySFC;
 class MyClass {
+    props;
+    __predomBrand;
     constructor(props) {
         this.props = props;
     }
@@= skipped -55, +57 lines =@@
 })();
 Object.defineProperty(exports, "__esModule", { value: true });
 /** @jsx dom */
-var renderer_1 = require("./renderer");
-var component_1 = __importStar(require("./component"));
+const renderer_1 = require("./renderer");
+const component_1 = __importStar(require("./component"));
 let elem = component_1.default;
 elem = (0, renderer_1.dom)("h", null); // Expect assignability error here
 const DOMSFC = (props) => (0, renderer_1.dom)("p", null,
@@= skipped -12, +12 lines =@@
     props.x + props.y,
     props.children);
 class DOMClass {
+    props;
+    __domBrand;
     constructor(props) {
         this.props = props;
     }
@@= skipped -22, +24 lines =@@
     (0, renderer_1.dom)(component_1.MyClass, { x: 3, y: 4 }),
     (0, renderer_1.dom)(component_1.MyClass, { x: 5, y: 6 }));
 // Should fail, nondom isn't allowed as children of dom
-const _brokenTree2 = (0, renderer_1.dom)(DOMSFC, { x: 1, y: 2 },
-    component_1.tree,
-    component_1.tree);
+const _brokenTree2 = (0, renderer_1.dom)(DOMSFC, { x: 1, y: 2 }, component_1.tree, component_1.tree);