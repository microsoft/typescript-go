--- old.genericContextualTypes1.js
+++ new.genericContextualTypes1.js
@@= skipped -52, +52 lines =@@


 //// [genericContextualTypes1.js]
-"use strict";
-var f00 = list;
-var f01 = function (x) { return [x]; };
-var f02 = wrap(list);
-var f03 = wrap(function (x) { return [x]; });
-var f10 = compose(function (a) { return list(a); }, function (b) { return box(b); });
-var f11 = compose(list, box);
-var f12 = compose(function (a) { return unbox(a); }, function (b) { return unlist(b); });
-var f13 = compose(unbox, unlist);
-var arrayMap = function (f) { return function (a) { return a.map(f); }; };
-var arrayFilter = function (f) { return function (a) { return a.filter(f); }; };
-var f20 = arrayMap(function (x) { return x.length; });
-var f21 = arrayMap(function (x) { return [x]; });
-var f22 = arrayMap(identity);
-var f23 = arrayMap(function (value) { return ({ value: value }); });
-var f30 = arrayFilter(function (x) { return x.length > 10; });
-var f31 = arrayFilter(function (x) { return x.value > 10; });
-var f40 = flip(zip);
-var fn = function (a) { return a; };
+const f00 = list;
+const f01 = x => [x];
+const f02 = wrap(list);
+const f03 = wrap(x => [x]);
+const f10 = compose(a => list(a), b => box(b));
+const f11 = compose(list, box);
+const f12 = compose(a => unbox(a), b => unlist(b));
+const f13 = compose(unbox, unlist);
+const arrayMap = (f) => (a) => a.map(f);
+const arrayFilter = (f) => (a) => a.filter(f);
+const f20 = arrayMap(x => x.length);
+const f21 = arrayMap(x => [x]);
+const f22 = arrayMap(identity);
+const f23 = arrayMap(value => ({ value }));
+const f30 = arrayFilter(x => x.length > 10);
+const f31 = arrayFilter(x => x.value > 10);
+const f40 = flip(zip);
+const fn = a => a;


 //// [genericContextualTypes1.d.ts]
@@= skipped -52, +51 lines =@@
 declare const f30: (a: string[]) => string[];
 declare const f31: <T extends Box<number>>(a: T[]) => T[];
 declare const f40: <A, B>(b: B, a: A) => [A, B];
+// Repro from #16293
 type fn = <A>(a: A) => A;
 declare const fn: fn;