--- old.privateNameFieldCallExpression.js
+++ new.privateNameFieldCallExpression.js
@@= skipped -32, +32 lines =@@
     constructor() {
         _A_fieldFunc.set(this, function () { this.x = 10; });
         _A_fieldFunc2.set(this, function (a, ...b) { });
-        this.x = 1;
     }
+    x = 1;
     test() {
         var _a;
-        var _b;
-        __classPrivateFieldGet(this, _A_fieldFunc, "f").call(this);
-        (_a = __classPrivateFieldGet(this, _A_fieldFunc, "f")) === null || _a === void 0 ? void 0 : _a.call(this);
+        __classPrivateFieldGet(this, _A_fieldFunc, "f")();
+        (_a = __classPrivateFieldGet(this, _A_fieldFunc, "f")) === null || _a === void 0 ? void 0 : _a();
         const func = __classPrivateFieldGet(this, _A_fieldFunc, "f");
         func();
         new (__classPrivateFieldGet(this, _A_fieldFunc, "f"))();
         const arr = [1, 2];
-        __classPrivateFieldGet(this, _A_fieldFunc2, "f").call(this, 0, ...arr, 3);
+        __classPrivateFieldGet(this, _A_fieldFunc2, "f")(0, ...arr, 3);
         const b = new (__classPrivateFieldGet(this, _A_fieldFunc2, "f"))(0, ...arr, 3);
-        const str = __classPrivateFieldGet(this, _A_fieldFunc2, "f").bind(this) `head${1}middle${2}tail`;
-        __classPrivateFieldGet((_b = this.getInstance()), _A_fieldFunc2, "f").bind(_b) `test${1}and${2}`;
+        const str = __classPrivateFieldGet(this, _A_fieldFunc2, "f") `head${1}middle${2}tail`;
+        __classPrivateFieldGet(this.getInstance(), _A_fieldFunc2, "f") `test${1}and${2}`;
     }
     getInstance() { return new A(); }
 }