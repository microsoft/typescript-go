--- old.genericCallWithObjectTypeArgsAndStringIndexer.types
+++ new.genericCallWithObjectTypeArgsAndStringIndexer.types
@@= skipped -4, +4 lines =@@
 
 function foo<T>(x: T) {
 >foo : <T>(x: T) => T
+>T : T
 >x : T
 
     return x;
@@= skipped -18, +19 lines =@@
 
 function other<T>(arg: T) {
 >other : <T>(arg: T) => void
+>T : T
 >arg : T
 
     var b: { [x: string]: T };
@@= skipped -9, +10 lines =@@
     var r2 = foo(b); // T
 >r2 : { [x: string]: T; }
 >foo(b) : { [x: string]: T; }
->foo : <T_1>(x: T_1) => T_1
+>foo : <T>(x: T) => T
 >b : { [x: string]: T; }
 }
 
 function other2<T extends Date>(arg: T) {
 >other2 : <T extends Date>(arg: T) => void
+>T : T
 >arg : T
 
     var b: { [x: string]: T };
@@= skipped -15, +16 lines =@@
     var r2 = foo(b);
 >r2 : { [x: string]: T; }
 >foo(b) : { [x: string]: T; }
->foo : <T_1>(x: T_1) => T_1
+>foo : <T>(x: T) => T
 >b : { [x: string]: T; }
 
     var d: Date = r2['hm']; // ok
@@= skipped -12, +12 lines =@@
 
 function other3<T extends Date, U extends Date>(arg: T) {
 >other3 : <T extends Date, U extends Date>(arg: T) => void
+>T : T
+>U : U
 >arg : T
 
     var b: { [x: string]: T };
@@= skipped -9, +11 lines =@@
     var r2 = foo(b);
 >r2 : { [x: string]: T; }
 >foo(b) : { [x: string]: T; }
->foo : <T_1>(x: T_1) => T_1
+>foo : <T>(x: T) => T
 >b : { [x: string]: T; }
 
     var d: Date = r2['hm']; // ok
