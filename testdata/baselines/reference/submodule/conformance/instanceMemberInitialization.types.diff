--- old.instanceMemberInitialization.types
+++ new.instanceMemberInitialization.types
@@= skipped -2, +2 lines =@@
 === instanceMemberInitialization.ts ===
 class C {
 >C : C
->  : ^
 
     x = 1;
 >x : number
->  : ^^^^^^
 >1 : 1
->  : ^
 }
 
 var c = new C();
 >c : C
->  : ^
 >new C() : C
->        : ^
 >C : typeof C
->  : ^^^^^^^^
 
 c.x = 3;
 >c.x = 3 : 3
->        : ^
 >c.x : number
->    : ^^^^^^
 >c : C
->  : ^
 >x : number
->  : ^^^^^^
 >3 : 3
->  : ^
 
 var c2 = new C();
 >c2 : C
->   : ^
 >new C() : C
->        : ^
 >C : typeof C
->  : ^^^^^^^^
 
 var r = c.x === c2.x;
 >r : boolean
->  : ^^^^^^^
 >c.x === c2.x : boolean
->             : ^^^^^^^
 >c.x : number
->    : ^^^^^^
 >c : C
->  : ^
 >x : number
->  : ^^^^^^
 >c2.x : number
->     : ^^^^^^
 >c2 : C
->   : ^
 >x : number
->  : ^^^^^^
 
 // #31792
 
@@= skipped -61, +39 lines =@@
 
 class MyMap<K, V> {
 >MyMap : MyMap<K, V>
->      : ^^^^^^^^^^^
+>K : K
+>V : V
 
     constructor(private readonly Map_: { new<K, V>(): any }) {}
->Map_ : new <K_1, V_1>() => any
->     : ^^^^^^^^^^^^^^^^^^^^   
+>Map_ : new <K, V>() => any
+>K : K
+>V : V
 
     private readonly store = new this.Map_<K, V>();
 >store : any
 >new this.Map_<K, V>() : any
->this.Map_ : new <K_1, V_1>() => any
->          : ^^^^^^^^^^^^^^^^^^^^   
+>this.Map_ : new <K, V>() => any
 >this : this
->     : ^^^^
->Map_ : new <K_1, V_1>() => any
->     : ^^^^^^^^^^^^^^^^^^^^   
+>Map_ : new <K, V>() => any
 }
