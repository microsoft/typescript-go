--- old.callSignatureAssignabilityInInheritance3.types
+++ new.callSignatureAssignabilityInInheritance3.types
@@= skipped -26, +26 lines =@@
 >bing : string
 
     module WithNonGenericSignaturesInBaseType {
+>WithNonGenericSignaturesInBaseType : any
+
         // base type with non-generic call signatures
         interface A {
+>A : A
+
             a2: (x: number) => string[];
 >a2 : (x: number) => string[]
 >x : number
@@= skipped -33, +37 lines =@@
 >bar : string
 
             a12: (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
->a12 : (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
+>a12 : (x: Base[], y: Derived2[]) => Derived[]
 >x : Base[]
 >y : Derived2[]
 
@@= skipped -52, +52 lines =@@
 >x : { <T extends Derived>(a: T): T; <T extends Base>(a: T): T; }
 
                     <T extends Derived>(a: T): T;
+>T : T
 >a : T
 
                     <T extends Base>(a: T): T;
+>T : T
 >a : T
 
                 }): any[];
@@= skipped -10, +12 lines =@@
 >x : { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }
 
                     <T extends Derived2>(a: T): T;
+>T : T
 >a : T
 
                     <T extends Base>(a: T): T;
+>T : T
 >a : T
 
                 }): any[];
@@= skipped -10, +12 lines =@@
         }
 
         interface I extends A {
+>I : I
+
             a2: <T, U>(x: T) => U[]; // error, contextual signature instantiation doesn't relate return types so U is {}, not a subtype of string[]
 >a2 : <T, U>(x: T) => U[]
+>T : T
+>U : U
 >x : T
         }
 
         interface I2<T, U> extends A {
+>I2 : I2<T, U>
+>T : T
+>U : U
+
             a2: (x: T) => U[]; // error, no contextual signature instantiation since I2.a2 is not generic
 >a2 : (x: T) => U[]
 >x : T
         }
 
         interface I3 extends A {
+>I3 : I3
+
             // valid, no inferences for V so it defaults to Derived2
             a7: <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V;
 >a7 : <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V
+>T : T
+>U : U
+>V : V
 >x : (arg: T) => U
 >arg : T
 >r : T
         }
 
         interface I4 extends A {
+>I4 : I4
+
             a8: <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U; // error, type mismatch
 >a8 : <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U
+>T : T
+>U : U
 >x : (arg: T) => U
 >arg : T
 >y : (arg2: { foo: number; }) => U
@@= skipped -32, +49 lines =@@
         }
 
         interface I4B extends A {
+>I4B : I4B
+
             a10: <T extends Derived>(...x: T[]) => T; // valid, parameter covariance works even after contextual signature instantiation
 >a10 : <T extends Derived>(...x: T[]) => T
+>T : T
 >x : T[]
         }
 
         interface I4C extends A {
+>I4C : I4C
+
             a11: <T extends Derived>(x: T, y: T) => T; // valid, even though x is a Base, parameter covariance works even after contextual signature instantiation
 >a11 : <T extends Derived>(x: T, y: T) => T
+>T : T
 >x : T
 >y : T
         }
 
         interface I4E extends A {
+>I4E : I4E
+
             a12: <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T; // valid, no inferences for T, defaults to Array<Derived2>
->a12 : <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T
+>a12 : <T extends Derived2[]>(x: Base[], y: Base[]) => T
+>T : T
 >x : Base[]
 >y : Base[]
         }
 
         interface I6 extends A {
+>I6 : I6
+
             a15: <T>(x: { a: T; b: T }) => T; // error, T is {} which isn't an acceptable return type
 >a15 : <T>(x: { a: T; b: T; }) => T
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
         }
 
         interface I7 extends A {
+>I7 : I7
+
             a15: <T extends Base>(x: { a: T; b: T }) => number; // error, T defaults to Base, which is not compatible with number or string
 >a15 : <T extends Base>(x: { a: T; b: T; }) => number
+>T : T
 >x : { a: T; b: T; }
 >a : T
 >b : T
         }
 
         interface I8 extends A {
+>I8 : I8
+
             // ok, we relate each signature of a16 to b16, and within that, we make inferences from two different signatures in the respective A.a16 signature
             a16: <T>(x: (a: T) => T) => T[];
 >a16 : <T>(x: (a: T) => T) => T[]
+>T : T
 >x : (a: T) => T
 >a : T
         }
 
         interface I9 extends A {
+>I9 : I9
+
             a17: <T>(x: (a: T) => T) => any[]; // valid, target is more constrained than source, so it is safe in the traditional constraint-contravariant fashion
 >a17 : <T>(x: (a: T) => T) => any[]
+>T : T
 >x : (a: T) => T
 >a : T
         }
     }
 
     module WithGenericSignaturesInBaseType {
+>WithGenericSignaturesInBaseType : any
+
         // base type has generic call signature
         interface B {
+>B : B
+
             a2: <T>(x: T) => T[];
 >a2 : <T>(x: T) => T[]
+>T : T
 >x : T
         }
 
         interface I6 extends B {
+>I6 : I6
+
             a2: <T>(x: T) => string[]; // error
 >a2 : <T>(x: T) => string[]
+>T : T
 >x : T
         }
 
         // base type has generic call signature
         interface C {
+>C : C
+
             a2: <T>(x: T) => string[];
 >a2 : <T>(x: T) => string[]
+>T : T
 >x : T
         }
 
         interface I7 extends C {
+>I7 : I7
+
             a2: <T>(x: T) => T[]; // error
 >a2 : <T>(x: T) => T[]
+>T : T
 >x : T
         }
     }
