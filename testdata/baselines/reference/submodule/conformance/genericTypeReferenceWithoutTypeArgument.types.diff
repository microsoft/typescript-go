--- old.genericTypeReferenceWithoutTypeArgument.types
+++ new.genericTypeReferenceWithoutTypeArgument.types
@@= skipped -5, +5 lines =@@
 
 class C<T> {
 >C : C<T>
+>T : T
 
     foo: T;
 >foo : T
@@= skipped -9, +10 lines =@@
 >c : any
 
 var a: { x: C };
->a : { x: C; }
+>a : { x: any; }
 >x : any
 
 var b: { (x: C): C };
->b : (x: C) => C
+>b : (x: any) => any
 >x : any
 
 var d: { [x: C]: C };
@@= skipped -12, +12 lines =@@
 >x : any
 
 var e = (x: C) => { var y: C; return y; }
->e : (x: C) => any
->(x: C) => { var y: C; return y; } : (x: C) => any
+>e : (x: any) => any
+>(x: C) => { var y: C; return y; } : (x: any) => any
 >x : any
 >y : any
 >y : any
 
 function f(x: C): C { var y: C; return y; }
->f : (x: C) => C
+>f : (x: any) => any
 >x : any
 >y : any
 >y : any
 
 var g = function f(x: C): C { var y: C; return y; }
->g : (x: C) => C
->function f(x: C): C { var y: C; return y; } : (x: C) => C
->f : (x: C) => C
+>g : (x: any) => any
+>function f(x: C): C { var y: C; return y; } : (x: any) => any
+>f : (x: any) => any
 >x : any
 >y : any
 >y : any
@@= skipped -26, +26 lines =@@
 }
 
 interface I extends C {}
+>I : I
 
 module M {
 >M : typeof M
 
     export class E<T> { foo: T }
 >E : E<T>
+>T : T
 >foo : T
 }
 
 class D2 extends M.E { }
 >D2 : D2
->M.E : typeof M.E
+>M.E : typeof E
 >M : typeof M
->E : typeof M.E
+>E : typeof E
 
 class D3<T extends M.E> { }
 >D3 : D3<T>
+>T : T
 >M : any
 
 interface I2 extends M.E { }
+>I2 : I2
 >M : typeof M
 
 function h<T extends C>(x: T) { }
->h : <T extends C>(x: T) => void
+>h : <T extends any>(x: T) => void
+>T : T
 >x : T
 
 function i<T extends M.E>(x: T) { }
->i : <T extends M.E>(x: T) => void
+>i : <T extends any>(x: T) => void
+>T : T
 >M : any
 >x : T
 
