error TS2318: Cannot find global type 'Array'.
error TS2318: Cannot find global type 'Function'.
error TS2318: Cannot find global type 'IArguments'.
error TS2318: Cannot find global type 'RegExp'.
error TS2318: Cannot find global type 'String'.
error TS2318: Cannot find global type 'TemplateStringsArray'.
error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
error TS2552: Cannot find name 'Number'. Did you mean 'number'?
error TS2552: Cannot find name 'Object'. Did you mean 'object'?
privateNameStaticAccessorsCallExpression.ts(12,32): error TS2488: Type '{}' must have a '[Symbol.iterator]()' method that returns an iterator.


!!! error TS2318: Cannot find global type 'Array'.
!!! error TS2318: Cannot find global type 'Function'.
!!! error TS2318: Cannot find global type 'IArguments'.
!!! error TS2318: Cannot find global type 'RegExp'.
!!! error TS2318: Cannot find global type 'String'.
!!! error TS2318: Cannot find global type 'TemplateStringsArray'.
!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
==== privateNameStaticAccessorsCallExpression.ts (1 errors) ====
    class A {
        static get #fieldFunc() {  return function() { A.#x = 10; } }
        static get #fieldFunc2() { return  function(a, ...b) {}; }
        static #x = 1;
        static test() {
            this.#fieldFunc();
            const func = this.#fieldFunc;
            func();
            new this.#fieldFunc();
    
            const arr = [ 1, 2 ];
            this.#fieldFunc2(0, ...arr, 3);
                                   ~~~
!!! error TS2488: Type '{}' must have a '[Symbol.iterator]()' method that returns an iterator.
            const b = new this.#fieldFunc2(0, ...arr, 3);
            const str = this.#fieldFunc2`head${1}middle${2}tail`;
            this.getClass().#fieldFunc2`test${1}and${2}`;
        }
        static getClass() { return A; }
    }