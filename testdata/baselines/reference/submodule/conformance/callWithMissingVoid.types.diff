--- old.callWithMissingVoid.types
+++ new.callWithMissingVoid.types
@@= skipped -20, +20 lines =@@
 
 x.f() // no error because f expects void
 >x.f() : { a: void; }
->x.f : (t: void) => { a: void; }
+>x.f : (t?: void) => { a: void; }
 >x : X<void>
->f : (t: void) => { a: void; }
+>f : (t?: void) => { a: void; }
 
 declare const xUnion: X<void | number>;
->xUnion : X<number | void>
+>xUnion : X<void | number>
 
 xUnion.f(42) // no error because f accepts number
->xUnion.f(42) : { a: number | void; }
->xUnion.f : (t: number | void) => { a: number | void; }
->xUnion : X<number | void>
->f : (t: number | void) => { a: number | void; }
+>xUnion.f(42) : { a: void | number; }
+>xUnion.f : (t?: void | number) => { a: void | number; }
+>xUnion : X<void | number>
+>f : (t?: void | number) => { a: void | number; }
 >42 : 42
 
 xUnion.f() // no error because f accepts void
->xUnion.f() : { a: number | void; }
->xUnion.f : (t: number | void) => { a: number | void; }
->xUnion : X<number | void>
->f : (t: number | void) => { a: number | void; }
+>xUnion.f() : { a: void | number; }
+>xUnion.f : (t?: void | number) => { a: void | number; }
+>xUnion : X<void | number>
+>f : (t?: void | number) => { a: void | number; }
 
 declare const xAny: X<any>;
 >xAny : X<any>
@@= skipped -64, +64 lines =@@
 new MyPromise<void>(resolve => resolve()); // no error
 >new MyPromise<void>(resolve => resolve()) : MyPromise<void>
 >MyPromise : typeof MyPromise
->resolve => resolve() : (resolve: (value: void) => void) => void
->resolve : (value: void) => void
+>resolve => resolve() : (resolve: (value?: void) => void) => void
+>resolve : (value?: void) => void
 >resolve() : void
->resolve : (value: void) => void
+>resolve : (value?: void) => void
 
 new MyPromise<void | number>(resolve => resolve()); // no error
->new MyPromise<void | number>(resolve => resolve()) : MyPromise<number | void>
+>new MyPromise<void | number>(resolve => resolve()) : MyPromise<void | number>
 >MyPromise : typeof MyPromise
->resolve => resolve() : (resolve: (value: number | void) => void) => void
->resolve : (value: number | void) => void
+>resolve => resolve() : (resolve: (value?: void | number) => void) => void
+>resolve : (value?: void | number) => void
 >resolve() : void
->resolve : (value: number | void) => void
+>resolve : (value?: void | number) => void
 
 new MyPromise<any>(resolve => resolve()); // error, `any` arguments cannot be omitted
 >new MyPromise<any>(resolve => resolve()) : MyPromise<any>
@@= skipped -41, +41 lines =@@
 // Multiple parameters
 
 function a(x: number, y: string, z: void): void  {
->a : (x: number, y: string, z: void) => void
+>a : (x: number, y: string, z?: void) => void
 >x : number
 >y : string
 >z : void
@@= skipped -9, +9 lines =@@
 
 a(4, "hello"); // ok
 >a(4, "hello") : void
->a : (x: number, y: string, z: void) => void
+>a : (x: number, y: string, z?: void) => void
 >4 : 4
 >"hello" : "hello"
 
 a(4, "hello", void 0); // ok
 >a(4, "hello", void 0) : void
->a : (x: number, y: string, z: void) => void
+>a : (x: number, y: string, z?: void) => void
 >4 : 4
 >"hello" : "hello"
 >void 0 : undefined
@@= skipped -14, +14 lines =@@
 
 a(4); // not ok
 >a(4) : void
->a : (x: number, y: string, z: void) => void
+>a : (x: number, y: string, z?: void) => void
 >4 : 4
 
 function b(x: number, y: string, z: void, what: number): void  {
@@= skipped -41, +41 lines =@@
 >4 : 4
 
 function c(x: number | void, y: void, z: void | string | number): void  {
->c : (x: number | void, y: void, z: void | string | number) => void
->x : number | void
+>c : (x?: void | number, y?: void, z?: void | string | number) => void
+>x : void | number
 >y : void
->z : string | number | void
+>z : void | string | number
     
 }
 
 c(3, void 0, void 0); // ok
 >c(3, void 0, void 0) : void
->c : (x: number | void, y: void, z: void | string | number) => void
+>c : (x?: void | number, y?: void, z?: void | string | number) => void
 >3 : 3
 >void 0 : undefined
 >0 : 0
@@= skipped -18, +18 lines =@@
 
 c(3, void 0); // ok
 >c(3, void 0) : void
->c : (x: number | void, y: void, z: void | string | number) => void
+>c : (x?: void | number, y?: void, z?: void | string | number) => void
 >3 : 3
 >void 0 : undefined
 >0 : 0
 
 c(3); // ok
 >c(3) : void
->c : (x: number | void, y: void, z: void | string | number) => void
+>c : (x?: void | number, y?: void, z?: void | string | number) => void
 >3 : 3
 
 c(); // ok
 >c() : void
->c : (x: number | void, y: void, z: void | string | number) => void
+>c : (x?: void | number, y?: void, z?: void | string | number) => void
 
 
 // Spread Parameters
@@= skipped -52, +52 lines =@@
 call((x: number, y: void) => x, 4, void 0) // ok
 >call((x: number, y: void) => x, 4, void 0) : void
 >call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
->(x: number, y: void) => x : (x: number, y: void) => number
+>(x: number, y: void) => x : (x: number, y?: void) => number
 >x : number
 >y : void
 >x : number
@@= skipped -11, +11 lines =@@
 call((x: number, y: void) => x, 4) // ok
 >call((x: number, y: void) => x, 4) : void
 >call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
->(x: number, y: void) => x : (x: number, y: void) => number
+>(x: number, y: void) => x : (x: number, y?: void) => number
 >x : number
 >y : void
 >x : number
@@= skipped -9, +9 lines =@@
 call((x: void, y: void) => 42) // ok
 >call((x: void, y: void) => 42) : void
 >call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
->(x: void, y: void) => 42 : (x: void, y: void) => number
+>(x: void, y: void) => 42 : (x?: void, y?: void) => number
 >x : void
 >y : void
 >42 : 42
@@= skipped -8, +8 lines =@@
 call((x: number | void, y: number | void) => 42) // ok
 >call((x: number | void, y: number | void) => 42) : void
 >call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
->(x: number | void, y: number | void) => 42 : (x: number | void, y: number | void) => number
->x : number | void
->y : number | void
+>(x: number | void, y: number | void) => 42 : (x?: void | number, y?: void | number) => number
+>x : void | number
+>y : void | number
 >42 : 42
 
 call((x: number | void, y: number | void) => 42, 4) // ok
 >call((x: number | void, y: number | void) => 42, 4) : void
 >call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
->(x: number | void, y: number | void) => 42 : (x: number | void, y: number | void) => number
->x : number | void
->y : number | void
+>(x: number | void, y: number | void) => 42 : (x?: void | number, y?: void | number) => number
+>x : void | number
+>y : void | number
 >42 : 42
 >4 : 4
 
 call((x: number | void, y: number | void) => 42, 4, 2) // ok
 >call((x: number | void, y: number | void) => 42, 4, 2) : void
 >call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
->(x: number | void, y: number | void) => 42 : (x: number | void, y: number | void) => number
->x : number | void
->y : number | void
+>(x: number | void, y: number | void) => 42 : (x?: void | number, y?: void | number) => number
+>x : void | number
+>y : void | number
 >42 : 42
 >4 : 4
 >2 : 2
