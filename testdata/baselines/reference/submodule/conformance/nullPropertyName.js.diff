--- old.nullPropertyName.js
+++ new.nullPropertyName.js
@@= skipped -171, +171 lines =@@
 //// [nullPropertyName.d.ts]
 declare function foo(): void;
 declare namespace foo {
-    export var x: number;
-    export var y: number;
-    var _a: number;
-    var _b: number;
-    var _c: number;
-    var _d: number;
-    var _e: number;
-    var _f: number;
-    var _g: number;
-    var _h: number;
-    var _j: number;
-    var _k: number;
-    var _l: number;
-    var _m: number;
-    var _o: number;
-    var _p: number;
-    var _q: number;
-    var _r: number;
-    var _s: number;
-    var _t: number;
-    var _u: number;
-    var _v: number;
-    var _w: number;
-    var _x: number;
-    var _y: number;
-    var _z: number;
-    var _0: number;
-    var _1: number;
-    var _2: number;
-    var _3: number;
-    var _4: number;
-    var _5: number;
-    var _6: number;
-    var _7: number;
-    var _8: number;
-    var _9: number;
-    var _10: number;
-    var _11: number;
-    var _12: number;
-    var _13: number;
-    var _14: number;
-    var _15: number;
-    var _16: number;
-    var _17: number;
-    var _18: number;
-    var _19: number;
-    var _20: number;
-    export var abstract: number;
-    export var as: number;
-    export var asserts: number;
-    export var any: number;
-    export var async: number;
-    export var await: number;
-    export var boolean: number;
-    export var constructor: number;
-    export var declare: number;
-    export var get: number;
-    export var infer: number;
-    export var is: number;
-    export var keyof: number;
-    export var module: number;
-    export var namespace: number;
-    export var never: number;
-    export var readonly: number;
-    export var require: number;
-    export var number: number;
-    export var object: number;
-    export var set: number;
-    export var string: number;
-    export var symbol: number;
-    export var type: number;
-    export var undefined: number;
-    export var unique: number;
-    export var unknown: number;
-    export var from: number;
-    export var global: number;
-    export var bigint: number;
-    export var of: number;
-    export { _a as break, _b as case, _c as catch, _d as class, _e as const, _f as continue, _g as debugger, _h as default, _j as delete, _k as do, _l as else, _m as enum, _o as export, _p as extends, _q as false, _r as finally, _s as for, _t as function, _u as if, _v as import, _w as in, _x as instanceof, _y as new, _z as null, _0 as return, _1 as super, _2 as switch, _3 as this, _4 as throw, _5 as true, _6 as try, _7 as typeof, _8 as var, _9 as void, _10 as while, _11 as with, _12 as implements, _13 as interface, _14 as let, _15 as package, _16 as private, _17 as protected, _18 as public, _19 as static, _20 as yield };
+    const x: number;
+}
+declare namespace foo {
+    const y: number;
+}
+declare namespace foo {
+    const _a: number;
+    export { _a as break };
+}
+declare namespace foo {
+    const _b: number;
+    export { _b as case };
+}
+declare namespace foo {
+    const _c: number;
+    export { _c as catch };
+}
+declare namespace foo {
+    const _d: number;
+    export { _d as class };
+}
+declare namespace foo {
+    const _e: number;
+    export { _e as const };
+}
+declare namespace foo {
+    const _f: number;
+    export { _f as continue };
+}
+declare namespace foo {
+    const _g: number;
+    export { _g as debugger };
+}
+declare namespace foo {
+    const _h: number;
+    export { _h as default };
+}
+declare namespace foo {
+    const _j: number;
+    export { _j as delete };
+}
+declare namespace foo {
+    const _k: number;
+    export { _k as do };
+}
+declare namespace foo {
+    const _l: number;
+    export { _l as else };
+}
+declare namespace foo {
+    const _m: number;
+    export { _m as enum };
+}
+declare namespace foo {
+    const _o: number;
+    export { _o as export };
+}
+declare namespace foo {
+    const _p: number;
+    export { _p as extends };
+}
+declare namespace foo {
+    const _q: number;
+    export { _q as false };
+}
+declare namespace foo {
+    const _r: number;
+    export { _r as finally };
+}
+declare namespace foo {
+    const _s: number;
+    export { _s as for };
+}
+declare namespace foo {
+    const _t: number;
+    export { _t as function };
+}
+declare namespace foo {
+    const _u: number;
+    export { _u as if };
+}
+declare namespace foo {
+    const _v: number;
+    export { _v as import };
+}
+declare namespace foo {
+    const _w: number;
+    export { _w as in };
+}
+declare namespace foo {
+    const _x: number;
+    export { _x as instanceof };
+}
+declare namespace foo {
+    const _y: number;
+    export { _y as new };
+}
+declare namespace foo {
+    const _z: number;
+    export { _z as null };
+}
+declare namespace foo {
+    const _0: number;
+    export { _0 as return };
+}
+declare namespace foo {
+    const _1: number;
+    export { _1 as super };
+}
+declare namespace foo {
+    const _2: number;
+    export { _2 as switch };
+}
+declare namespace foo {
+    const _3: number;
+    export { _3 as this };
+}
+declare namespace foo {
+    const _4: number;
+    export { _4 as throw };
+}
+declare namespace foo {
+    const _5: number;
+    export { _5 as true };
+}
+declare namespace foo {
+    const _6: number;
+    export { _6 as try };
+}
+declare namespace foo {
+    const _7: number;
+    export { _7 as typeof };
+}
+declare namespace foo {
+    const _8: number;
+    export { _8 as var };
+}
+declare namespace foo {
+    const _9: number;
+    export { _9 as void };
+}
+declare namespace foo {
+    const _10: number;
+    export { _10 as while };
+}
+declare namespace foo {
+    const _11: number;
+    export { _11 as with };
+}
+declare namespace foo {
+    const _12: number;
+    export { _12 as implements };
+}
+declare namespace foo {
+    const _13: number;
+    export { _13 as interface };
+}
+declare namespace foo {
+    const _14: number;
+    export { _14 as let };
+}
+declare namespace foo {
+    const _15: number;
+    export { _15 as package };
+}
+declare namespace foo {
+    const _16: number;
+    export { _16 as private };
+}
+declare namespace foo {
+    const _17: number;
+    export { _17 as protected };
+}
+declare namespace foo {
+    const _18: number;
+    export { _18 as public };
+}
+declare namespace foo {
+    const _19: number;
+    export { _19 as static };
+}
+declare namespace foo {
+    const _20: number;
+    export { _20 as yield };
+}
+declare namespace foo {
+    const abstract: number;
+}
+declare namespace foo {
+    const as: number;
+}
+declare namespace foo {
+    const asserts: number;
+}
+declare namespace foo {
+    const any: number;
+}
+declare namespace foo {
+    const async: number;
+}
+declare namespace foo {
+    const await: number;
+}
+declare namespace foo {
+    const boolean: number;
+}
+declare namespace foo {
+    const constructor: number;
+}
+declare namespace foo {
+    const declare: number;
+}
+declare namespace foo {
+    const get: number;
+}
+declare namespace foo {
+    const infer: number;
+}
+declare namespace foo {
+    const is: number;
+}
+declare namespace foo {
+    const keyof: number;
+}
+declare namespace foo {
+    const module: number;
+}
+declare namespace foo {
+    const namespace: number;
+}
+declare namespace foo {
+    const never: number;
+}
+declare namespace foo {
+    const readonly: number;
+}
+declare namespace foo {
+    const require: number;
+}
+declare namespace foo {
+    const number: number;
+}
+declare namespace foo {
+    const object: number;
+}
+declare namespace foo {
+    const set: number;
+}
+declare namespace foo {
+    const string: number;
+}
+declare namespace foo {
+    const symbol: number;
+}
+declare namespace foo {
+    const type: number;
+}
+declare namespace foo {
+    const undefined: number;
+}
+declare namespace foo {
+    const unique: number;
+}
+declare namespace foo {
+    const unknown: number;
+}
+declare namespace foo {
+    const from: number;
+}
+declare namespace foo {
+    const global: number;
+}
+declare namespace foo {
+    const bigint: number;
+}
+declare namespace foo {
+    const of: number;
 }