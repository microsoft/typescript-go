--- old.dependentDestructuredVariables.symbols
+++ new.dependentDestructuredVariables.symbols
@@ -22,17 +22,13 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 4, 14))
 
         payload.toFixed();
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 4, 20))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
     }
     if (kind === 'B') {
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 4, 14))
 
         payload.toUpperCase();
->payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 4, 20))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@ -50,17 +46,13 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 14, 11))
 
         payload.toFixed();
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 14, 17))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
     }
     if (kind === 'B') {
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 14, 11))
 
         payload.toUpperCase();
->payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 14, 17))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@ -75,16 +67,12 @@
 
         case 'A':
             payload.toFixed();
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 23, 20))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 
             break;
         case 'B':
             payload.toUpperCase();
->payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 23, 20))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 
             break;
         default:
@@ -106,17 +94,13 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 37, 32))
 
         payload.toFixed();
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 37, 38))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
     }
     if (kind === 'B') {
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 37, 32))
 
         payload.toUpperCase();
->payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 37, 38))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@ -136,17 +120,13 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 47, 11))
 
         payload.toFixed();
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 47, 17))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
     }
     if (kind === 'B') {
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 47, 11))
 
         payload.toUpperCase();
->payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 47, 17))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@ -174,17 +154,13 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 60, 14))
 
             payload.toFixed();
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 60, 20))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
         }
         if (kind === 'B') {
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 60, 14))
 
             payload.toUpperCase();
->payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 60, 20))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
         }
     }
 }
@@ -206,17 +182,13 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 72, 11))
 
             payload.toFixed();
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 72, 17))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
         }
         if (kind === 'B') {
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 72, 11))
 
             payload.toUpperCase();
->payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 72, 17))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
         }
     }
 }
@@ -240,17 +212,13 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 85, 15))
 
             payload.toFixed();
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 85, 21))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
         }
         if (kind === 'B') {
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 85, 15))
 
             payload.toUpperCase();
->payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 85, 21))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
         }
     }
 }
@@ -269,16 +237,12 @@
 
             case 'A':
                 payload.toFixed();
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 95, 20))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 
                 break;
             case 'B':
                 payload.toUpperCase();
->payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 95, 20))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 
                 break;
             default:
@@ -352,17 +316,13 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 135, 17))
 
         data.toFixed();
->data.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >data : Symbol(data, Decl(dependentDestructuredVariables.ts, 135, 22))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
     }
     if (kind === 'B') {
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 135, 17))
 
         data.toUpperCase();
->data.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >data : Symbol(data, Decl(dependentDestructuredVariables.ts, 135, 22))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@ -371,16 +331,16 @@
 interface A<T> { variant: 'a', value: T }
 >A : Symbol(A, Decl(dependentDestructuredVariables.ts, 142, 1))
 >T : Symbol(T, Decl(dependentDestructuredVariables.ts, 146, 12))
->variant : Symbol(A.variant, Decl(dependentDestructuredVariables.ts, 146, 16))
->value : Symbol(A.value, Decl(dependentDestructuredVariables.ts, 146, 30))
+>variant : Symbol(variant, Decl(dependentDestructuredVariables.ts, 146, 16))
+>value : Symbol(value, Decl(dependentDestructuredVariables.ts, 146, 30))
 >T : Symbol(T, Decl(dependentDestructuredVariables.ts, 146, 12))
 
 interface B<T> { variant: 'b', value: Array<T> }
 >B : Symbol(B, Decl(dependentDestructuredVariables.ts, 146, 41))
 >T : Symbol(T, Decl(dependentDestructuredVariables.ts, 148, 12))
->variant : Symbol(B.variant, Decl(dependentDestructuredVariables.ts, 148, 16))
->value : Symbol(B.value, Decl(dependentDestructuredVariables.ts, 148, 30))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 4 more)
+>variant : Symbol(variant, Decl(dependentDestructuredVariables.ts, 148, 16))
+>value : Symbol(value, Decl(dependentDestructuredVariables.ts, 148, 30))
+>Array : Symbol(Array)
 >T : Symbol(T, Decl(dependentDestructuredVariables.ts, 148, 12))
 
 type AB<T> = A<T> | B<T>;
@@ -401,7 +361,7 @@
 >printValueList : Symbol(printValueList, Decl(dependentDestructuredVariables.ts, 152, 43))
 >T : Symbol(T, Decl(dependentDestructuredVariables.ts, 154, 32))
 >t : Symbol(t, Decl(dependentDestructuredVariables.ts, 154, 35))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 4 more)
+>Array : Symbol(Array)
 >T : Symbol(T, Decl(dependentDestructuredVariables.ts, 154, 32))
 
 function unrefined1<T>(ab: AB<T>): void {
@@ -477,14 +437,12 @@
 
 declare var it: Iterator<number>;
 >it : Symbol(it, Decl(dependentDestructuredVariables.ts, 183, 11))
->Iterator : Symbol(Iterator, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
+>Iterator : Symbol(Iterator)
 
 const { value, done } = it.next();
 >value : Symbol(value, Decl(dependentDestructuredVariables.ts, 184, 7))
 >done : Symbol(done, Decl(dependentDestructuredVariables.ts, 184, 14))
->it.next : Symbol(Iterator.next, Decl(lib.es2015.iterable.d.ts, --, --))
 >it : Symbol(it, Decl(dependentDestructuredVariables.ts, 183, 11))
->next : Symbol(Iterator.next, Decl(lib.es2015.iterable.d.ts, --, --))
 
 if (!done) {
 >done : Symbol(done, Decl(dependentDestructuredVariables.ts, 184, 14))
@@ -510,17 +468,13 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 193, 5))
 
         data.toFixed();
->data.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >data : Symbol(data, Decl(dependentDestructuredVariables.ts, 193, 10))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
     }
     if (kind === 'B') {
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 193, 5))
 
         data.toUpperCase();
->data.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >data : Symbol(data, Decl(dependentDestructuredVariables.ts, 193, 10))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
     }
 });
 
@@ -534,17 +488,13 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 202, 63))
 
         payload.toFixed();
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 202, 68))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
     }
     if (kind === 'B') {
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 202, 63))
 
         payload.toUpperCase();
->payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 202, 68))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
     }
 };
 
@@ -558,9 +508,7 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 211, 55))
 
         payload.toFixed();
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 211, 60))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
     }
     else {
         payload;  // undefined
@@ -573,7 +521,7 @@
 >path : Symbol(path, Decl(dependentDestructuredVariables.ts, 220, 26))
 >callback : Symbol(callback, Decl(dependentDestructuredVariables.ts, 220, 39))
 >args : Symbol(args, Decl(dependentDestructuredVariables.ts, 220, 51))
->Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2022.error.d.ts, --, --))
+>Error : Symbol(Error)
 
 readFile('hello', (err, data) => {
 >readFile : Symbol(readFile, Decl(dependentDestructuredVariables.ts, 218, 2))
@@ -584,15 +532,11 @@
 >err : Symbol(err, Decl(dependentDestructuredVariables.ts, 222, 19))
 
         data.length;
->data.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
 >data : Symbol(data, Decl(dependentDestructuredVariables.ts, 222, 23))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
     }
     else {
         err.message;
->err.message : Symbol(Error.message, Decl(lib.es5.d.ts, --, --))
 >err : Symbol(err, Decl(dependentDestructuredVariables.ts, 222, 19))
->message : Symbol(Error.message, Decl(lib.es5.d.ts, --, --))
     }
 });
 
@@ -615,9 +559,6 @@
 
         case "add":
             console.log(args.a + args.b);
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
 >args.a : Symbol(a, Decl(dependentDestructuredVariables.ts, 231, 28))
 >args : Symbol(args, Decl(dependentDestructuredVariables.ts, 233, 52))
 >a : Symbol(a, Decl(dependentDestructuredVariables.ts, 231, 28))
@@ -628,14 +569,9 @@
             break;
         case "concat":
             console.log(args.firstArr.concat(args.secondArr));
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->args.firstArr.concat : Symbol(Array.concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >args.firstArr : Symbol(firstArr, Decl(dependentDestructuredVariables.ts, 231, 67))
 >args : Symbol(args, Decl(dependentDestructuredVariables.ts, 233, 52))
 >firstArr : Symbol(firstArr, Decl(dependentDestructuredVariables.ts, 231, 67))
->concat : Symbol(Array.concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >args.secondArr : Symbol(secondArr, Decl(dependentDestructuredVariables.ts, 231, 84))
 >args : Symbol(args, Decl(dependentDestructuredVariables.ts, 233, 52))
 >secondArr : Symbol(secondArr, Decl(dependentDestructuredVariables.ts, 231, 84))
@@ -708,7 +644,7 @@
 >e : Symbol(e, Decl(dependentDestructuredVariables.ts, 269, 23))
 
   ): Promise<any>;
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))
+>Promise : Symbol(Promise)
 }
 
 let fooAsyncM: FooAsyncMethod = {
@@ -747,7 +683,7 @@
 >e : Symbol(e, Decl(dependentDestructuredVariables.ts, 286, 23))
 
   ): Generator<any, any, any>;
->Generator : Symbol(Generator, Decl(lib.es2015.generator.d.ts, --, --))
+>Generator : Symbol(Generator)
 }
 
 let fooGenM: FooGenMethod = {
@@ -786,7 +722,7 @@
 >e : Symbol(e, Decl(dependentDestructuredVariables.ts, 303, 23))
 
   ): AsyncGenerator<any, any, any>;
->AsyncGenerator : Symbol(AsyncGenerator, Decl(lib.es2018.asyncgenerator.d.ts, --, --))
+>AsyncGenerator : Symbol(AsyncGenerator)
 }
 
 let fooAsyncGenM: FooAsyncGenMethod = {
@@ -829,17 +765,13 @@
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 321, 19))
 
         payload.toFixed();  // error
->payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 321, 24))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
     }
     if (kind === "b") {
 >kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 321, 19))
 
         payload.toUpperCase();  // error
->payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
 >payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 321, 24))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
     }
 };
 
@@ -973,18 +905,18 @@
 >ClientEvents : Symbol(ClientEvents, Decl(dependentDestructuredVariables.ts, 386, 1))
 
     warn: [message: string];
->warn : Symbol(ClientEvents.warn, Decl(dependentDestructuredVariables.ts, 390, 24))
+>warn : Symbol(warn, Decl(dependentDestructuredVariables.ts, 390, 24))
 
     shardDisconnect: [closeEvent: CloseEvent, shardId: number];
->shardDisconnect : Symbol(ClientEvents.shardDisconnect, Decl(dependentDestructuredVariables.ts, 391, 28))
->CloseEvent : Symbol(CloseEvent, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
+>shardDisconnect : Symbol(shardDisconnect, Decl(dependentDestructuredVariables.ts, 391, 28))
+>CloseEvent : Symbol(CloseEvent)
 }
   
 declare class Client {
 >Client : Symbol(Client, Decl(dependentDestructuredVariables.ts, 393, 1))
 
     public on<K extends keyof ClientEvents>(event: K, listener: (...args: ClientEvents[K]) => void): void;
->on : Symbol(Client.on, Decl(dependentDestructuredVariables.ts, 395, 22))
+>on : Symbol(on, Decl(dependentDestructuredVariables.ts, 395, 22))
 >K : Symbol(K, Decl(dependentDestructuredVariables.ts, 396, 14))
 >ClientEvents : Symbol(ClientEvents, Decl(dependentDestructuredVariables.ts, 386, 1))
 >event : Symbol(event, Decl(dependentDestructuredVariables.ts, 396, 44))
@@ -1000,42 +932,24 @@
 >Client : Symbol(Client, Decl(dependentDestructuredVariables.ts, 393, 1))
 
 bot.on("shardDisconnect", (event, shard) => console.log(`Shard ${shard} disconnected (${event.code},${event.wasClean}): ${event.reason}`));
->bot.on : Symbol(Client.on, Decl(dependentDestructuredVariables.ts, 395, 22))
+>bot.on : Symbol(on, Decl(dependentDestructuredVariables.ts, 395, 22))
 >bot : Symbol(bot, Decl(dependentDestructuredVariables.ts, 399, 5))
->on : Symbol(Client.on, Decl(dependentDestructuredVariables.ts, 395, 22))
+>on : Symbol(on, Decl(dependentDestructuredVariables.ts, 395, 22))
 >event : Symbol(event, Decl(dependentDestructuredVariables.ts, 400, 27))
 >shard : Symbol(shard, Decl(dependentDestructuredVariables.ts, 400, 33))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
 >shard : Symbol(shard, Decl(dependentDestructuredVariables.ts, 400, 33))
->event.code : Symbol(CloseEvent.code, Decl(lib.dom.d.ts, --, --))
 >event : Symbol(event, Decl(dependentDestructuredVariables.ts, 400, 27))
->code : Symbol(CloseEvent.code, Decl(lib.dom.d.ts, --, --))
->event.wasClean : Symbol(CloseEvent.wasClean, Decl(lib.dom.d.ts, --, --))
 >event : Symbol(event, Decl(dependentDestructuredVariables.ts, 400, 27))
->wasClean : Symbol(CloseEvent.wasClean, Decl(lib.dom.d.ts, --, --))
->event.reason : Symbol(CloseEvent.reason, Decl(lib.dom.d.ts, --, --))
 >event : Symbol(event, Decl(dependentDestructuredVariables.ts, 400, 27))
->reason : Symbol(CloseEvent.reason, Decl(lib.dom.d.ts, --, --))
 
 bot.on("shardDisconnect", event => console.log(`${event.code} ${event.wasClean} ${event.reason}`));
->bot.on : Symbol(Client.on, Decl(dependentDestructuredVariables.ts, 395, 22))
+>bot.on : Symbol(on, Decl(dependentDestructuredVariables.ts, 395, 22))
 >bot : Symbol(bot, Decl(dependentDestructuredVariables.ts, 399, 5))
->on : Symbol(Client.on, Decl(dependentDestructuredVariables.ts, 395, 22))
+>on : Symbol(on, Decl(dependentDestructuredVariables.ts, 395, 22))
 >event : Symbol(event, Decl(dependentDestructuredVariables.ts, 401, 25))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->event.code : Symbol(CloseEvent.code, Decl(lib.dom.d.ts, --, --))
 >event : Symbol(event, Decl(dependentDestructuredVariables.ts, 401, 25))
->code : Symbol(CloseEvent.code, Decl(lib.dom.d.ts, --, --))
->event.wasClean : Symbol(CloseEvent.wasClean, Decl(lib.dom.d.ts, --, --))
 >event : Symbol(event, Decl(dependentDestructuredVariables.ts, 401, 25))
->wasClean : Symbol(CloseEvent.wasClean, Decl(lib.dom.d.ts, --, --))
->event.reason : Symbol(CloseEvent.reason, Decl(lib.dom.d.ts, --, --))
 >event : Symbol(event, Decl(dependentDestructuredVariables.ts, 401, 25))
->reason : Symbol(CloseEvent.reason, Decl(lib.dom.d.ts, --, --))
 
 // Destructuring tuple types with different arities
 
@@ -1108,10 +1022,6 @@
 >y : Symbol(y, Decl(dependentDestructuredVariables.ts, 436, 33))
 
   if (Math.random()) {
->Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
->Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
-
     x = 1;
 >x : Symbol(x, Decl(dependentDestructuredVariables.ts, 436, 31))
   }
@@ -1129,10 +1039,6 @@
 >y : Symbol(y, Decl(dependentDestructuredVariables.ts, 445, 33))
 
   if (Math.random()) {
->Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
->Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
-
     y = 2;
 >y : Symbol(y, Decl(dependentDestructuredVariables.ts, 445, 33))
   }
@@ -1153,10 +1059,6 @@
 >y : Symbol(y, Decl(dependentDestructuredVariables.ts, 456, 82))
 
   if (Math.random()) {
->Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
->Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
-
     y = 2;
 >y : Symbol(y, Decl(dependentDestructuredVariables.ts, 456, 82))
   }
