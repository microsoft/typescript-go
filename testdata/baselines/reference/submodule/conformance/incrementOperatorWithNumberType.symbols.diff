--- old.incrementOperatorWithNumberType.symbols
+++ new.incrementOperatorWithNumberType.symbols
@@= skipped -11, +11 lines =@@
 >A : Symbol(A, Decl(incrementOperatorWithNumberType.ts, 2, 31))
 
     public a: number;
->a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
 }
 module M {
 >M : Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
@@= skipped -25, +25 lines =@@
 // expressions
 var ResultIsNumber3 = ++objA.a;
 >ResultIsNumber3 : Symbol(ResultIsNumber3, Decl(incrementOperatorWithNumberType.ts, 19, 3))
->objA.a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>objA.a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
 >objA : Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
->a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
 
 var ResultIsNumber4 = ++M.n;
 >ResultIsNumber4 : Symbol(ResultIsNumber4, Decl(incrementOperatorWithNumberType.ts, 20, 3))
->M.n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>M.n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 >M : Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
->n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 
 var ResultIsNumber5 = objA.a++;
 >ResultIsNumber5 : Symbol(ResultIsNumber5, Decl(incrementOperatorWithNumberType.ts, 22, 3))
->objA.a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>objA.a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
 >objA : Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
->a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
 
 var ResultIsNumber6 = M.n++;
 >ResultIsNumber6 : Symbol(ResultIsNumber6, Decl(incrementOperatorWithNumberType.ts, 23, 3))
->M.n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>M.n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 >M : Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
->n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 
 var ResultIsNumber7 = NUMBER1[0]++;
 >ResultIsNumber7 : Symbol(ResultIsNumber7, Decl(incrementOperatorWithNumberType.ts, 24, 3))
@@= skipped -34, +34 lines =@@
 >NUMBER1 : Symbol(NUMBER1, Decl(incrementOperatorWithNumberType.ts, 2, 3))
 
 ++objA.a;
->objA.a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>objA.a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
 >objA : Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
->a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
 
 ++M.n;
->M.n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>M.n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 >M : Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
->n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 
 ++objA.a, M.n;
->objA.a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>objA.a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
 >objA : Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
->a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
->M.n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>M.n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 >M : Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
->n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 
 NUMBER++;
 >NUMBER : Symbol(NUMBER, Decl(incrementOperatorWithNumberType.ts, 1, 3))
@@= skipped -24, +24 lines =@@
 >NUMBER1 : Symbol(NUMBER1, Decl(incrementOperatorWithNumberType.ts, 2, 3))
 
 objA.a++;
->objA.a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>objA.a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
 >objA : Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
->a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
 
 M.n++;
->M.n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>M.n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 >M : Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
->n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 
 objA.a++, M.n++;
->objA.a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>objA.a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
 >objA : Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
->a : Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
->M.n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>a : Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
+>M.n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 >M : Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
->n : Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
+>n : Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
 
