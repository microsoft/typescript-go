--- old.nodeModules1(module=nodenext).js
+++ new.nodeModules1(module=nodenext).js
@@= skipped -323, +323 lines =@@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.x = void 0;
-// cjs format file
 const x = 1;
 exports.x = x;
 //// [index.cjs]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.x = void 0;
-// cjs format file
 const x = 1;
 exports.x = x;
 //// [index.mjs]
-// esm format file
 const x = 1;
 export { x };
 //// [index.js]
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.x = void 0;
-// cjs format file
 const x = 1;
-exports.x = x;
+export { x };
 //// [index.cjs]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.x = void 0;
-// cjs format file
 const x = 1;
 exports.x = x;
 //// [index.mjs]
-// esm format file
 const x = 1;
 export { x };
 //// [index.js]
-// esm format file
 const x = 1;
 export { x };
 //// [index.mjs]
-// esm format file
 const x = 1;
 export { x };
 //// [index.cjs]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.x = void 0;
-// cjs format file
 const x = 1;
 exports.x = x;
 //// [index.cjs]
@@= skipped -74, +62 lines =@@
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.x = void 0;
-// ESM-format imports below should issue errors
 const m1 = __importStar(require("./index.js"));
 const m2 = __importStar(require("./index.mjs"));
 const m3 = __importStar(require("./index.cjs"));
@@= skipped -13, +12 lines =@@
 const m10 = __importStar(require("./subfolder2/another/index.js"));
 const m11 = __importStar(require("./subfolder2/another/index.mjs"));
 const m12 = __importStar(require("./subfolder2/another/index.cjs"));
-// The next ones should _mostly_ work - cjs format files have index resolution and extension resolution (except for those which resolve to an esm format file)
 const m13 = __importStar(require("./"));
 const m14 = __importStar(require("./index"));
 const m15 = __importStar(require("./subfolder"));
@@= skipped -35, +34 lines =@@
 void m21;
 void m22;
 void m23;
-// These should _mostly_ work - `import = require` always desugars to require calls, which do have extension and index resolution (but can't load anything that resolves to esm!)
 const m24 = require("./");
 const m25 = require("./index");
 const m26 = require("./subfolder");
@@= skipped -23, +22 lines =@@
 void m32;
 void m33;
 void m34;
-// These shouldn't work - dynamic `import()` always uses the esm resolver, which does not have extension resolution
 const _m35 = import("./");
 const _m36 = import("./index");
 const _m37 = import("./subfolder");
@@= skipped -12, +11 lines =@@
 const _m43 = import("./subfolder2/another");
 const _m44 = import("./subfolder2/another/");
 const _m45 = import("./subfolder2/another/index");
-// cjs format file
 const x = 1;
 exports.x = x;
 //// [index.js]
@@= skipped -18, +17 lines =@@
 import * as m10 from "./subfolder2/another/index.js";
 import * as m11 from "./subfolder2/another/index.mjs";
 import * as m12 from "./subfolder2/another/index.cjs";
-// The next ones shouldn't all work - esm format files have no index resolution or extension resolution
 import * as m13 from "./";
 import * as m14 from "./index";
 import * as m15 from "./subfolder";
@@= skipped -35, +34 lines =@@
 void m21;
 void m22;
 void m23;
-// These should _mostly_ work - `import = require` always desugars to require calls, which do have extension and index resolution (but can't load anything that resolves to esm!)
 const m24 = __require("./");
 const m25 = __require("./index");
 const m26 = __require("./subfolder");
@@= skipped -23, +22 lines =@@
 void m32;
 void m33;
 void m34;
-// These shouldn't work - dynamic `import()` always uses the esm resolver, which does not have extension resolution
 const _m35 = import("./");
 const _m36 = import("./index");
 const _m37 = import("./subfolder");
@@= skipped -12, +11 lines =@@
 const _m43 = import("./subfolder2/another");
 const _m44 = import("./subfolder2/another/");
 const _m45 = import("./subfolder2/another/index");
-// esm format file
 const x = 1;
 export { x };
 //// [index.mjs]
@@= skipped -18, +17 lines =@@
 import * as m10 from "./subfolder2/another/index.js";
 import * as m11 from "./subfolder2/another/index.mjs";
 import * as m12 from "./subfolder2/another/index.cjs";
-// The next ones should all fail - esm format files have no index resolution or extension resolution
 import * as m13 from "./";
 import * as m14 from "./index";
 import * as m15 from "./subfolder";
@@= skipped -35, +34 lines =@@
 void m21;
 void m22;
 void m23;
-// These should _mostly_ work - `import = require` always desugars to require calls, which do have extension and index resolution (but can't load anything that resolves to esm!)
 const m24 = __require("./");
 const m25 = __require("./index");
 const m26 = __require("./subfolder");
@@= skipped -23, +22 lines =@@
 void m32;
 void m33;
 void m34;
-// These shouldn't work - dynamic `import()` always uses the esm resolver, which does not have extension resolution
 const _m35 = import("./");
 const _m36 = import("./index");
 const _m37 = import("./subfolder");
@@= skipped -12, +11 lines =@@
 const _m43 = import("./subfolder2/another");
 const _m44 = import("./subfolder2/another/");
 const _m45 = import("./subfolder2/another/index");
-// esm format file
 const x = 1;
 export { x };
-
-
-//// [index.d.ts]
-declare const x = 1;
-export { x };
-//// [index.d.cts]
-declare const x = 1;
-export { x };
-//// [index.d.mts]
-declare const x = 1;
-export { x };
-//// [index.d.ts]
-declare const x = 1;
-export { x };
-//// [index.d.cts]
-declare const x = 1;
-export { x };
-//// [index.d.mts]
-declare const x = 1;
-export { x };
-//// [index.d.ts]
-declare const x = 1;
-export { x };
-//// [index.d.mts]
-declare const x = 1;
-export { x };
-//// [index.d.cts]
-declare const x = 1;
-export { x };
-//// [index.d.cts]
-declare const x = 1;
-export { x };
-//// [index.d.ts]
-declare const x = 1;
-export { x };
-//// [index.d.mts]
-declare const x = 1;
-export { x };
