--- old.typeFromPropertyAssignment.types
+++ new.typeFromPropertyAssignment.types
@@= skipped -2, +2 lines =@@
 === a.js ===
 var Outer = class O {
 >Outer : typeof O
->      : ^^^^^^^^
 >class O {    m(x, y) { }} : typeof O
->                          : ^^^^^^^^
 >O : typeof O
->  : ^^^^^^^^
 
     m(x, y) { }
 >m : (x: any, y: any) => void
->  : ^ ^^^^^^^ ^^^^^^^^^^^^^^
 >x : any
 >y : any
 }
 Outer.Inner = class I {
 >Outer.Inner = class I {    n(a, b) { }} : typeof I
->                                        : ^^^^^^^^
->Outer.Inner : typeof I
->            : ^^^^^^^^
+>Outer.Inner : any
 >Outer : typeof O
->      : ^^^^^^^^
->Inner : typeof I
->      : ^^^^^^^^
+>Inner : any
 >class I {    n(a, b) { }} : typeof I
->                          : ^^^^^^^^
 >I : typeof I
->  : ^^^^^^^^
 
     n(a, b) { }
 >n : (a: any, b: any) => void
->  : ^ ^^^^^^^ ^^^^^^^^^^^^^^
 >a : any
 >b : any
 
 }
 /** @type {Outer} */
 var si
->si : O
->   : ^
+>si : any
 
 si.m
->si.m : (x: any, y: any) => void
->     : ^ ^^^^^^^ ^^^^^^^^^^^^^^
->si : O
->   : ^
->m : (x: any, y: any) => void
->  : ^ ^^^^^^^ ^^^^^^^^^^^^^^
+>si.m : any
+>si : any
+>m : any
 
 /** @type {Outer.Inner} */
 var oi
->oi : I
->   : ^
+>oi : any
 
 oi.n
->oi.n : (a: any, b: any) => void
->     : ^ ^^^^^^^ ^^^^^^^^^^^^^^
->oi : I
->   : ^
->n : (a: any, b: any) => void
->  : ^ ^^^^^^^ ^^^^^^^^^^^^^^
+>oi.n : any
+>oi : any
+>n : any
 
 
