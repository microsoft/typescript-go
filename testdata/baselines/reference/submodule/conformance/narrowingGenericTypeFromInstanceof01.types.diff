--- old.narrowingGenericTypeFromInstanceof01.types
+++ new.narrowingGenericTypeFromInstanceof01.types
@@= skipped -2, +2 lines =@@
 === narrowingGenericTypeFromInstanceof01.ts ===
 class A<T> {
 >A : A<T>
+>T : T
 
     constructor(private a: string) { }
 >a : string
@@= skipped -7, +8 lines =@@
 
 class B<T> {
 >B : B<T>
+>T : T
 }
 
 function acceptA<T>(a: A<T>) { }
 >acceptA : <T>(a: A<T>) => void
+>T : T
 >a : A<T>
 
 function acceptB<T>(b: B<T>) { }
 >acceptB : <T>(b: B<T>) => void
+>T : T
 >b : B<T>
 
 function test<T>(x: A<T> | B<T>) {
 >test : <T>(x: A<T> | B<T>) => void
+>T : T
 >x : A<T> | B<T>
 
     if (x instanceof B) {
@@= skipped -21, +25 lines =@@
 
         acceptA(x);
 >acceptA(x) : void
->acceptA : <T_1>(a: A<T_1>) => void
+>acceptA : <T>(a: A<T>) => void
 >x : B<T>
     }
 
@@= skipped -11, +11 lines =@@
 
         acceptA(x);
 >acceptA(x) : void
->acceptA : <T_1>(a: A<T_1>) => void
+>acceptA : <T>(a: A<T>) => void
 >x : A<T>
     }
 
@@= skipped -11, +11 lines =@@
 
         acceptB(x);
 >acceptB(x) : void
->acceptB : <T_1>(b: B<T_1>) => void
+>acceptB : <T>(b: B<T>) => void
 >x : B<T>
     }
 
@@= skipped -11, +11 lines =@@
 
         acceptB(x);
 >acceptB(x) : void
->acceptB : <T_1>(b: B<T_1>) => void
+>acceptB : <T>(b: B<T>) => void
 >x : B<T>
     }
 }
