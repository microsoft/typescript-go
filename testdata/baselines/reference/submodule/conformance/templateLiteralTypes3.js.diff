--- old.templateLiteralTypes3.js
+++ new.templateLiteralTypes3.js
@@= skipped -205, +205 lines =@@


 //// [templateLiteralTypes3.js]
-"use strict";
-// Inference from template literal type to template literal type
 function f1(s, n, b, t) {
     let x1 = foo1('hello'); // Error
     let x2 = foo1('*hello*');
@@= skipped -102, +100 lines =@@


 //// [templateLiteralTypes3.d.ts]
+// Inference from template literal type to template literal type
 type Foo1<T> = T extends `*${infer U}*` ? U : never;
 type T01 = Foo1<'hello'>;
 type T02 = Foo1<'*hello*'>;
@@= skipped -14, +15 lines =@@
 type T11 = Foo1<`**${boolean}**${boolean}**`>;
 declare function foo1<V extends string>(arg: `*${V}*`): V;
 declare function f1<T extends string>(s: string, n: number, b: boolean, t: T): void;
+// Inference to a placeholder immediately followed by another placeholder infers a single
+// character or placeholder from the source.
 type Parts<T> = T extends '' ? [] : T extends `${infer Head}${infer Tail}` ? [Head, ...Parts<Tail>] : never;
 type T20 = Parts<`abc`>;
 type T21 = Parts<`*${string}*`>;
@@= skipped -8, +10 lines =@@
 declare function f2(): void;
 declare function f3<T extends string>(s: string, n: number, b: boolean, t: T): void;
 declare function f4<T extends number>(s: string, n: number, b: boolean, t: T): void;
+// Repro from #43060
 type A<T> = T extends `${infer U}.${infer V}` ? U | V : never;
-type B = A<`test.1024`>;
-type C = A<`test.${number}`>;
+type B = A<`test.1024`>; // "test" | "1024"
+type C = A<`test.${number}`>; // "test" | `${number}`
 type D<T> = T extends `${infer U}.${number}` ? U : never;
-type E = D<`test.1024`>;
-type F = D<`test.${number}`>;
+type E = D<`test.1024`>; // "test"
+type F = D<`test.${number}`>; // "test"
 type G<T> = T extends `${infer U}.${infer V}` ? U | V : never;
-type H = G<`test.hoge`>;
-type I = G<`test.${string}`>;
+type H = G<`test.hoge`>; // "test" | "hoge"
+type I = G<`test.${string}`>; // string ("test" | string reduces to string)
 type J<T> = T extends `${infer U}.${string}` ? U : never;
-type K = J<`test.hoge`>;
-type L = J<`test.${string}`>;
+type K = J<`test.hoge`>; // "test"
+type L = J<`test.${string}`>; // "test""
+// Repro from #43243
 type Templated = `${string} ${string}`;
 declare const value1: string;
 declare const templated1: Templated;
+// Type '`${string} abc`' is not assignable to type '`${string} ${string}`'.
 declare const value2 = "abc";
 declare const templated2: Templated;
+// Repro from #43620
 type Prefixes = "foo" | "bar";
 type AllPrefixData = "foo:baz" | "bar:baz";
 type PrefixData<P extends Prefixes> = `${P}:baz`;
 interface ITest<P extends Prefixes, E extends AllPrefixData = PrefixData<P>> {
     blah: string;
 }
+// Repro from #45906
 type Schema = {
     a: {
         b: {
@@= skipped -31, +36 lines =@@
     };
 };
 declare function chain<F extends keyof Schema>(field: F | `${F}.${F}`): void;
+// Repro from #46125
 declare function ff1(x: `foo-${string}`, y: `${string}-bar`, z: `baz-${string}`): void;
 declare function ff2<T extends string>(x: `foo-${T}`, y: `${T}-bar`, z: `baz-${T}`): void;
 declare function ff3(x: string, y: `foo-${string}` | 'bar'): void;
 declare function ff4(x: string, y: `foo-${string}`): void;
+// Repro from #46045
 type Action = {
     type: `${string}_REQUEST`;
 } | {
@@= skipped -11, +13 lines =@@
     response: string;
 };
 declare function reducer(action: Action): void;
+// Repro from #46768
 type DotString = `${string}.${string}.${string}`;
 declare function noSpread<P extends DotString>(args: P[]): P;
 declare function spread<P extends DotString>(...args: P[]): P;
 declare function ft1<T extends string>(t: T, u: Uppercase<T>, u1: Uppercase<`1.${T}.3`>, u2: Uppercase<`1.${T}.4`>): void;
+// Repro from #52685
 type Boom = 'abc' | 'def' | `a${string}` | Lowercase<string>;
+// Repro from #56582
 declare function a<T extends {
     id: string;
 }>(): void;