--- old.intersectionsAndEmptyObjects.types
+++ new.intersectionsAndEmptyObjects.types
@@= skipped -99, +99 lines =@@
 >d1 : {}

 const d2 = intersectDictionaries(d1, d1);
->d2 : {}
->intersectDictionaries(d1, d1) : {}
+>d2 : Dictionary
+>intersectDictionaries(d1, d1) : Dictionary
 >intersectDictionaries : <F1 extends Dictionary, F2 extends Dictionary>(d1: F1, d2: F2) => F1 & F2
 >d1 : {}
 >d1 : {}
@@= skipped -9, +9 lines =@@
 testDictionary(d2);
 >testDictionary(d2) : void
 >testDictionary : <T extends Dictionary>(_value: T) => void
->d2 : {}
+>d2 : Dictionary

 const d3 = {
 >d3 : { s: string; }
@@= skipped -17, +17 lines =@@
 >d3 : { s: string; }

 const d4 = intersectDictionaries(d1, d3);
->d4 : { s: string; }
->intersectDictionaries(d1, d3) : { s: string; }
+>d4 : Dictionary & { s: string; }
+>intersectDictionaries(d1, d3) : Dictionary & { s: string; }
 >intersectDictionaries : <F1 extends Dictionary, F2 extends Dictionary>(d1: F1, d2: F2) => F1 & F2
 >d1 : {}
 >d3 : { s: string; }
@@= skipped -9, +9 lines =@@
 testDictionary(d4);
 >testDictionary(d4) : void
 >testDictionary : <T extends Dictionary>(_value: T) => void
->d4 : { s: string; }
+>d4 : Dictionary & { s: string; }

 const d5 = intersectDictionaries(d3, d1);
->d5 : { s: string; }
->intersectDictionaries(d3, d1) : { s: string; }
+>d5 : { s: string; } & Dictionary
+>intersectDictionaries(d3, d1) : { s: string; } & Dictionary
 >intersectDictionaries : <F1 extends Dictionary, F2 extends Dictionary>(d1: F1, d2: F2) => F1 & F2
 >d3 : { s: string; }
 >d1 : {}
@@= skipped -12, +12 lines =@@
 testDictionary(d5);
 >testDictionary(d5) : void
 >testDictionary : <T extends Dictionary>(_value: T) => void
->d5 : { s: string; }
+>d5 : { s: string; } & Dictionary

 const d6 = intersectDictionaries(d3, d3);
 >d6 : { s: string; }
@@= skipped -81, +81 lines =@@
 mock(import('./ex'))
 >mock(import('./ex')) : {}
 >mock : <M>(_: Promise<M>) => {} & M
->import('./ex') : Promise<{ default: typeof import("ex"); }>
+>import('./ex') : Promise<{ default: typeof import("./ex"); }>
 >'./ex' : "./ex"

 === ex.d.ts ===