--- old.umd5.symbols
+++ new.umd5.symbols
@@= skipped -4, +4 lines =@@
 >Bar : Symbol(Bar, Decl(a.ts, 0, 6))
 
 Bar.fn();
->Bar.fn : Symbol(Bar.fn, Decl(foo.d.ts, 0, 21))
+>Bar.fn : Symbol(fn, Decl(foo.d.ts, 0, 21))
 >Bar : Symbol(Bar, Decl(a.ts, 0, 6))
->fn : Symbol(Bar.fn, Decl(foo.d.ts, 0, 21))
+>fn : Symbol(fn, Decl(foo.d.ts, 0, 21))
 
 let x: Bar.Thing;
 >x : Symbol(x, Decl(a.ts, 2, 3))
 >Bar : Symbol(Bar, Decl(a.ts, 0, 6))
->Thing : Symbol(Bar.Thing, Decl(foo.d.ts, 1, 27))
+>Thing : Symbol(Thing, Decl(foo.d.ts, 1, 27))
 
 let y: number = x.n;
 >y : Symbol(y, Decl(a.ts, 3, 3))
->x.n : Symbol(Bar.Thing.n, Decl(foo.d.ts, 2, 24))
+>x.n : Symbol(n, Decl(foo.d.ts, 2, 24))
 >x : Symbol(x, Decl(a.ts, 2, 3))
->n : Symbol(Bar.Thing.n, Decl(foo.d.ts, 2, 24))
+>n : Symbol(n, Decl(foo.d.ts, 2, 24))
 
 // should error
 let z = Foo;
@@= skipped -29, +29 lines =@@
 
 export interface Thing { n: typeof x }
 >Thing : Symbol(Thing, Decl(foo.d.ts, 1, 27))
->n : Symbol(Thing.n, Decl(foo.d.ts, 2, 24))
+>n : Symbol(n, Decl(foo.d.ts, 2, 24))
 >x : Symbol(x, Decl(foo.d.ts, 0, 10))
 
 export as namespace Foo;
