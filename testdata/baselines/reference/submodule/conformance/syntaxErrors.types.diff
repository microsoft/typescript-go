--- old.syntaxErrors.types
+++ new.syntaxErrors.types
@@= skipped -2, +2 lines =@@
 === dummyType.d.ts ===
 declare class C<T> { t: T }
 >C : C<T>
->  : ^^^^
+>T : T
 >t : T
->  : ^
 
 === badTypeArguments.js ===
 /** @param {C.<>} x */
@@= skipped -10, +9 lines =@@
 // @ts-ignore
 /** @param {C.<number,>} skipped */
 function f(x, y, skipped) {
->f : (x: any, y: any, skipped: C<number>) => any
->  : ^ ^^^^^^^ ^^^^^^^       ^^         ^^^^^^^^
+>f : (x: any, y: any, skipped: any) => any
 >x : any
->  : ^^^
 >y : any
->  : ^^^
->skipped : C<number>
->        : ^^^^^^^^^
+>skipped : any
 
     return x.t + y.t;
 >x.t + y.t : any
->          : ^^^
 >x.t : any
->    : ^^^
 >x : any
->  : ^^^
 >t : any
->  : ^^^
 >y.t : any
->    : ^^^
 >y : any
->  : ^^^
 >t : any
->  : ^^^
 }
 var x = f({ t: 1000 }, { t: 3000 }, { t: 5000 });
 >x : any
->  : ^^^
 >f({ t: 1000 }, { t: 3000 }, { t: 5000 }) : any
->                                         : ^^^
->f : (x: any, y: any, skipped: C<number>) => any
->  : ^ ^^^^^^^ ^^^^^^^       ^^         ^^^^^^^^
+>f : (x: any, y: any, skipped: any) => any
 >{ t: 1000 } : { t: number; }
->            : ^^^^^^^^^^^^^^
 >t : number
->  : ^^^^^^
 >1000 : 1000
->     : ^^^^
 >{ t: 3000 } : { t: number; }
->            : ^^^^^^^^^^^^^^
 >t : number
->  : ^^^^^^
 >3000 : 3000
->     : ^^^^
 >{ t: 5000 } : { t: number; }
->            : ^^^^^^^^^^^^^^
 >t : number
->  : ^^^^^^
 >5000 : 5000
->     : ^^^^
 
