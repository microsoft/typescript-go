--- old.jsDeclarationsParameterTagReusesInputNodeInEmit2.types
+++ new.jsDeclarationsParameterTagReusesInputNodeInEmit2.types
@@= skipped -2, +2 lines =@@
 === base.js ===
 class Base {
 >Base : Base
->     : ^^^^
 
     constructor() {}
 }
 
 const BaseFactory = () => {
 >BaseFactory : { (): Base; Base: typeof Base; }
->            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >() => {    return new Base();} : { (): Base; Base: typeof Base; }
->                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
     return new Base();
 >new Base() : Base
->           : ^^^^
 >Base : typeof Base
->     : ^^^^^^^^^^^
 
 };
 
 BaseFactory.Base = Base;
 >BaseFactory.Base = Base : typeof Base
->                        : ^^^^^^^^^^^
 >BaseFactory.Base : typeof Base
->                 : ^^^^^^^^^^^
 >BaseFactory : { (): Base; Base: typeof Base; }
->            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >Base : typeof Base
->     : ^^^^^^^^^^^
 >Base : typeof Base
->     : ^^^^^^^^^^^
 
 module.exports = BaseFactory;
 >module.exports = BaseFactory : { (): Base; Base: typeof Base; }
->                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
->module.exports : { (): Base; Base: typeof Base; }
->               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
->module : { exports: { (): Base; Base: typeof Base; }; }
->       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
->exports : { (): Base; Base: typeof Base; }
->        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>module.exports : any
+>module : any
+>exports : any
 >BaseFactory : { (): Base; Base: typeof Base; }
->            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 === file.js ===
 /** @typedef {typeof import('./base')} BaseFactory */
@@= skipped -52, +37 lines =@@
  * @returns {InstanceType<BaseFactory["Base"]>}
  */
 const test = (base) => {
->test : (base: InstanceType<BaseFactory["Base"]>) => InstanceType<BaseFactory["Base"]>
->     : ^    ^^                                 ^^^^^                                 
->(base) => {    return base;} : (base: InstanceType<BaseFactory["Base"]>) => InstanceType<BaseFactory["Base"]>
->                             : ^    ^^                                 ^^^^^                                 
->base : Base
->     : ^^^^
+>test : (base: any) => any
+>(base) => {    return base;} : (base: any) => any
+>base : any
 
     return base;
->base : Base
->     : ^^^^
+>base : any
 
 };
 
