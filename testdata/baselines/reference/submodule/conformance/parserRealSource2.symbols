//// [tests/cases/conformance/parser/ecmascript5/parserRealSource2.ts] ////

=== parserRealSource2.ts ===
// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
// See LICENSE.txt in the project root for complete license information.

///<reference path='typescript.ts' />

module TypeScript {
>TypeScript : Symbol(TypeScript, Decl(parserRealSource2.ts, 0, 0))

    export function hasFlag(val: number, flag: number) {
>hasFlag : Symbol(hasFlag, Decl(parserRealSource2.ts, 5, 19))
>val : Symbol(val, Decl(parserRealSource2.ts, 7, 28))
>flag : Symbol(flag, Decl(parserRealSource2.ts, 7, 40))

        return (val & flag) != 0;
>val : Symbol(val, Decl(parserRealSource2.ts, 7, 28))
>flag : Symbol(flag, Decl(parserRealSource2.ts, 7, 40))
    }

    export enum ErrorRecoverySet {
>ErrorRecoverySet : Symbol(ErrorRecoverySet, Decl(parserRealSource2.ts, 9, 5))

        None = 0,
>None : Symbol(None, Decl(parserRealSource2.ts, 11, 34))

        Comma = 1, // Comma
>Comma : Symbol(Comma, Decl(parserRealSource2.ts, 12, 17))

        SColon = 1 << 1, // SColon
>SColon : Symbol(SColon, Decl(parserRealSource2.ts, 13, 18))

        Asg = 1 << 2, // Asg
>Asg : Symbol(Asg, Decl(parserRealSource2.ts, 14, 24))

        BinOp = 1 << 3, // Lsh, Rsh, Rs2, Le, Ge, INSTANCEOF, EQ, NE, Eqv, NEqv, LogAnd, LogOr, AsgMul, AsgDiv
>BinOp : Symbol(BinOp, Decl(parserRealSource2.ts, 15, 21))

        // AsgMod, AsgAdd, AsgSub, AsgLsh, AsgRsh, AsgRs2, AsgAnd, AsgXor, AsgOr, QMark, Mult, Div, 
        // Pct, GT, LT, And, Xor, Or
        RBrack = 1 << 4, // RBrack
>RBrack : Symbol(RBrack, Decl(parserRealSource2.ts, 16, 23))

        RCurly = 1 << 5, // RCurly
>RCurly : Symbol(RCurly, Decl(parserRealSource2.ts, 19, 24))

        RParen = 1 << 6, // RParen
>RParen : Symbol(RParen, Decl(parserRealSource2.ts, 20, 24))

        Dot = 1 << 7, // Dot
>Dot : Symbol(Dot, Decl(parserRealSource2.ts, 21, 24))

        Colon = 1 << 8, // Colon
>Colon : Symbol(Colon, Decl(parserRealSource2.ts, 22, 21))

        PrimType = 1 << 9, // number, string, boolean
>PrimType : Symbol(PrimType, Decl(parserRealSource2.ts, 23, 23))

        AddOp = 1 << 10, // Add, Sub
>AddOp : Symbol(AddOp, Decl(parserRealSource2.ts, 24, 26))

        LCurly = 1 << 11, // LCurly
>LCurly : Symbol(LCurly, Decl(parserRealSource2.ts, 25, 24))

        PreOp = 1 << 12, // Tilde, Bang, Inc, Dec
>PreOp : Symbol(PreOp, Decl(parserRealSource2.ts, 26, 25))

        RegExp = 1 << 13, // RegExp
>RegExp : Symbol(RegExp, Decl(parserRealSource2.ts, 27, 24))

        LParen = 1 << 14, // LParen
>LParen : Symbol(LParen, Decl(parserRealSource2.ts, 28, 25))

        LBrack = 1 << 15, // LBrack
>LBrack : Symbol(LBrack, Decl(parserRealSource2.ts, 29, 25))

        Scope = 1 << 16, // Scope
>Scope : Symbol(Scope, Decl(parserRealSource2.ts, 30, 25))

        In = 1 << 17, // IN
>In : Symbol(In, Decl(parserRealSource2.ts, 31, 24))

        SCase = 1 << 18, // CASE, DEFAULT
>SCase : Symbol(SCase, Decl(parserRealSource2.ts, 32, 21))

        Else = 1 << 19, // ELSE
>Else : Symbol(Else, Decl(parserRealSource2.ts, 33, 24))

        Catch = 1 << 20, // CATCH, FINALLY
>Catch : Symbol(Catch, Decl(parserRealSource2.ts, 34, 23))

        Var = 1 << 21, // 
>Var : Symbol(Var, Decl(parserRealSource2.ts, 35, 24))

        Stmt = 1 << 22, // BREAK, RETURN, THROW, DEBUGGER, FOR, SWITCH, DO, IF, TRY, WITH
>Stmt : Symbol(Stmt, Decl(parserRealSource2.ts, 36, 22))

        While = 1 << 23, // WHILE
>While : Symbol(While, Decl(parserRealSource2.ts, 37, 23))

        ID = 1 << 24, // ID
>ID : Symbol(ID, Decl(parserRealSource2.ts, 38, 24))

        Prefix = 1 << 25, // VOID, DELETE, TYPEOF, AWAIT
>Prefix : Symbol(Prefix, Decl(parserRealSource2.ts, 39, 21))

        Literal = 1 << 26, // IntCon, FltCon, StrCon
>Literal : Symbol(Literal, Decl(parserRealSource2.ts, 40, 25))

        RLit = 1 << 27, // THIS, TRUE, FALSE, NULL
>RLit : Symbol(RLit, Decl(parserRealSource2.ts, 41, 26))

        Func = 1 << 28, // FUNCTION
>Func : Symbol(Func, Decl(parserRealSource2.ts, 42, 23))

        EOF = 1 << 29, // EOF
>EOF : Symbol(EOF, Decl(parserRealSource2.ts, 43, 23))

        // REVIEW: Name this something clearer.
        TypeScriptS = 1 << 30, // PROPERTY, PRIVATE, STATIC, INTERFACE, CLASS, MODULE, EXPORT, IMPORT
>TypeScriptS : Symbol(TypeScriptS, Decl(parserRealSource2.ts, 44, 22))

        ExprStart = SColon | AddOp | LCurly | PreOp | RegExp | LParen | LBrack | ID | Prefix | RLit | Func | Literal,
>ExprStart : Symbol(ExprStart, Decl(parserRealSource2.ts, 47, 30))
>SColon : Symbol(SColon, Decl(parserRealSource2.ts, 13, 18))
>AddOp : Symbol(AddOp, Decl(parserRealSource2.ts, 24, 26))
>LCurly : Symbol(LCurly, Decl(parserRealSource2.ts, 25, 24))
>PreOp : Symbol(PreOp, Decl(parserRealSource2.ts, 26, 25))
>RegExp : Symbol(RegExp, Decl(parserRealSource2.ts, 27, 24))
>LParen : Symbol(LParen, Decl(parserRealSource2.ts, 28, 25))
>LBrack : Symbol(LBrack, Decl(parserRealSource2.ts, 29, 25))
>ID : Symbol(ID, Decl(parserRealSource2.ts, 38, 24))
>Prefix : Symbol(Prefix, Decl(parserRealSource2.ts, 39, 21))
>RLit : Symbol(RLit, Decl(parserRealSource2.ts, 41, 26))
>Func : Symbol(Func, Decl(parserRealSource2.ts, 42, 23))
>Literal : Symbol(Literal, Decl(parserRealSource2.ts, 40, 25))

        StmtStart = ExprStart | SColon | Var | Stmt | While | TypeScriptS,
>StmtStart : Symbol(StmtStart, Decl(parserRealSource2.ts, 48, 117))
>ExprStart : Symbol(ExprStart, Decl(parserRealSource2.ts, 47, 30))
>SColon : Symbol(SColon, Decl(parserRealSource2.ts, 13, 18))
>Var : Symbol(Var, Decl(parserRealSource2.ts, 35, 24))
>Stmt : Symbol(Stmt, Decl(parserRealSource2.ts, 36, 22))
>While : Symbol(While, Decl(parserRealSource2.ts, 37, 23))
>TypeScriptS : Symbol(TypeScriptS, Decl(parserRealSource2.ts, 44, 22))

        Postfix = Dot | LParen | LBrack,
>Postfix : Symbol(Postfix, Decl(parserRealSource2.ts, 49, 74))
>Dot : Symbol(Dot, Decl(parserRealSource2.ts, 21, 24))
>LParen : Symbol(LParen, Decl(parserRealSource2.ts, 28, 25))
>LBrack : Symbol(LBrack, Decl(parserRealSource2.ts, 29, 25))
    }

    export enum AllowedElements {
>AllowedElements : Symbol(AllowedElements, Decl(parserRealSource2.ts, 51, 5))

        None = 0,
>None : Symbol(None, Decl(parserRealSource2.ts, 53, 33))

        ModuleDeclarations = 1 << 2,
>ModuleDeclarations : Symbol(ModuleDeclarations, Decl(parserRealSource2.ts, 54, 17))

        ClassDeclarations = 1 << 3,
>ClassDeclarations : Symbol(ClassDeclarations, Decl(parserRealSource2.ts, 55, 36))

        InterfaceDeclarations = 1 << 4,
>InterfaceDeclarations : Symbol(InterfaceDeclarations, Decl(parserRealSource2.ts, 56, 35))

        AmbientDeclarations = 1 << 10,
>AmbientDeclarations : Symbol(AmbientDeclarations, Decl(parserRealSource2.ts, 57, 39))

        Properties = 1 << 11,
>Properties : Symbol(Properties, Decl(parserRealSource2.ts, 58, 38))

        Global = ModuleDeclarations | ClassDeclarations | InterfaceDeclarations | AmbientDeclarations,
>Global : Symbol(Global, Decl(parserRealSource2.ts, 59, 29))
>ModuleDeclarations : Symbol(ModuleDeclarations, Decl(parserRealSource2.ts, 54, 17))
>ClassDeclarations : Symbol(ClassDeclarations, Decl(parserRealSource2.ts, 55, 36))
>InterfaceDeclarations : Symbol(InterfaceDeclarations, Decl(parserRealSource2.ts, 56, 35))
>AmbientDeclarations : Symbol(AmbientDeclarations, Decl(parserRealSource2.ts, 57, 39))

        QuickParse = Global | Properties,
>QuickParse : Symbol(QuickParse, Decl(parserRealSource2.ts, 61, 102))
>Global : Symbol(Global, Decl(parserRealSource2.ts, 59, 29))
>Properties : Symbol(Properties, Decl(parserRealSource2.ts, 58, 38))
    }

    export enum Modifiers {
>Modifiers : Symbol(Modifiers, Decl(parserRealSource2.ts, 63, 5))

        None = 0,
>None : Symbol(None, Decl(parserRealSource2.ts, 65, 27))

        Private = 1,
>Private : Symbol(Private, Decl(parserRealSource2.ts, 66, 17))

        Public = 1 << 1,
>Public : Symbol(Public, Decl(parserRealSource2.ts, 67, 20))

        Readonly = 1 << 2,
>Readonly : Symbol(Readonly, Decl(parserRealSource2.ts, 68, 24))

        Ambient = 1 << 3,
>Ambient : Symbol(Ambient, Decl(parserRealSource2.ts, 69, 26))

        Exported = 1 << 4,
>Exported : Symbol(Exported, Decl(parserRealSource2.ts, 70, 25))

        Getter = 1 << 5,
>Getter : Symbol(Getter, Decl(parserRealSource2.ts, 71, 26))

        Setter = 1 << 6,
>Setter : Symbol(Setter, Decl(parserRealSource2.ts, 72, 24))

        Static = 1 << 7,
>Static : Symbol(Static, Decl(parserRealSource2.ts, 73, 24))
    }

    export enum ASTFlags {
>ASTFlags : Symbol(ASTFlags, Decl(parserRealSource2.ts, 75, 5))

        None = 0,
>None : Symbol(None, Decl(parserRealSource2.ts, 77, 26))

        ExplicitSemicolon = 1, // statment terminated by an explicit semicolon
>ExplicitSemicolon : Symbol(ExplicitSemicolon, Decl(parserRealSource2.ts, 78, 17))

        AutomaticSemicolon = 1 << 1, // statment terminated by an automatic semicolon
>AutomaticSemicolon : Symbol(AutomaticSemicolon, Decl(parserRealSource2.ts, 79, 30))

        Writeable = 1 << 2,  // node is lhs that can be modified
>Writeable : Symbol(Writeable, Decl(parserRealSource2.ts, 80, 36))

        Error = 1 << 3, // node has an error
>Error : Symbol(Error, Decl(parserRealSource2.ts, 81, 27))

        DotLHSPartial = 1 << 4, // node is the lhs of an incomplete dot expr at cursor
>DotLHSPartial : Symbol(DotLHSPartial, Decl(parserRealSource2.ts, 82, 23))

        DotLHS = 1 << 5, // node is the lhs of a dot expr
>DotLHS : Symbol(DotLHS, Decl(parserRealSource2.ts, 83, 31))

        IsStatement = 1 << 6, // node is a statement
>IsStatement : Symbol(IsStatement, Decl(parserRealSource2.ts, 84, 24))

        StrictMode = 1 << 7, // node is in the strict mode environment
>StrictMode : Symbol(StrictMode, Decl(parserRealSource2.ts, 85, 29))

        PossibleOptionalParameter = 1 << 8,
>PossibleOptionalParameter : Symbol(PossibleOptionalParameter, Decl(parserRealSource2.ts, 86, 28))

        ClassBaseConstructorCall = 1 << 9,
>ClassBaseConstructorCall : Symbol(ClassBaseConstructorCall, Decl(parserRealSource2.ts, 87, 43))

        OptionalName = 1 << 10,
>OptionalName : Symbol(OptionalName, Decl(parserRealSource2.ts, 88, 42))

        // REVIEW: This flag is to mark lambda nodes to note that the LParen of an expression has already been matched in the lambda header.
        //         The flag is used to communicate this piece of information to the calling parseTerm, which intern will remove it.
        //         Once we have a better way to associate information with nodes, this flag should not be used.
        SkipNextRParen = 1 << 11, 
>SkipNextRParen : Symbol(SkipNextRParen, Decl(parserRealSource2.ts, 89, 31))
    }

    export enum DeclFlags {
>DeclFlags : Symbol(DeclFlags, Decl(parserRealSource2.ts, 94, 5))

        None = 0,
>None : Symbol(None, Decl(parserRealSource2.ts, 96, 27))

        Exported = 1,
>Exported : Symbol(Exported, Decl(parserRealSource2.ts, 97, 17))

        Private = 1 << 1,
>Private : Symbol(Private, Decl(parserRealSource2.ts, 98, 21))

        Public = 1 << 2,
>Public : Symbol(Public, Decl(parserRealSource2.ts, 99, 25))

        Ambient = 1 << 3,
>Ambient : Symbol(Ambient, Decl(parserRealSource2.ts, 100, 24))

        Static = 1 << 4,
>Static : Symbol(Static, Decl(parserRealSource2.ts, 101, 25))

        LocalStatic = 1 << 5,
>LocalStatic : Symbol(LocalStatic, Decl(parserRealSource2.ts, 102, 24))

        GetAccessor = 1 << 6,
>GetAccessor : Symbol(GetAccessor, Decl(parserRealSource2.ts, 103, 29))

        SetAccessor = 1 << 7,
>SetAccessor : Symbol(SetAccessor, Decl(parserRealSource2.ts, 104, 29))
    }

    export enum ModuleFlags {
>ModuleFlags : Symbol(ModuleFlags, Decl(parserRealSource2.ts, 106, 5))

        None = 0,
>None : Symbol(None, Decl(parserRealSource2.ts, 108, 29))

        Exported = 1,
>Exported : Symbol(Exported, Decl(parserRealSource2.ts, 109, 17))

        Private = 1 << 1,
>Private : Symbol(Private, Decl(parserRealSource2.ts, 110, 21))

        Public = 1 << 2,
>Public : Symbol(Public, Decl(parserRealSource2.ts, 111, 25))

        Ambient = 1 << 3,
>Ambient : Symbol(Ambient, Decl(parserRealSource2.ts, 112, 24))

        Static = 1 << 4,
>Static : Symbol(Static, Decl(parserRealSource2.ts, 113, 25))

        LocalStatic = 1 << 5,
>LocalStatic : Symbol(LocalStatic, Decl(parserRealSource2.ts, 114, 24))

        GetAccessor = 1 << 6,
>GetAccessor : Symbol(GetAccessor, Decl(parserRealSource2.ts, 115, 29))

        SetAccessor = 1 << 7,
>SetAccessor : Symbol(SetAccessor, Decl(parserRealSource2.ts, 116, 29))

        IsEnum = 1 << 8,
>IsEnum : Symbol(IsEnum, Decl(parserRealSource2.ts, 117, 29))

        ShouldEmitModuleDecl = 1 << 9,
>ShouldEmitModuleDecl : Symbol(ShouldEmitModuleDecl, Decl(parserRealSource2.ts, 118, 24))

        IsWholeFile = 1 << 10,
>IsWholeFile : Symbol(IsWholeFile, Decl(parserRealSource2.ts, 119, 38))

        IsDynamic = 1 << 11,
>IsDynamic : Symbol(IsDynamic, Decl(parserRealSource2.ts, 120, 30))

        MustCaptureThis = 1 << 12,
>MustCaptureThis : Symbol(MustCaptureThis, Decl(parserRealSource2.ts, 121, 28))
    }

    export enum SymbolFlags {
>SymbolFlags : Symbol(SymbolFlags, Decl(parserRealSource2.ts, 123, 5))

        None = 0,
>None : Symbol(None, Decl(parserRealSource2.ts, 125, 29))

        Exported = 1,
>Exported : Symbol(Exported, Decl(parserRealSource2.ts, 126, 17))

        Private = 1 << 1,
>Private : Symbol(Private, Decl(parserRealSource2.ts, 127, 21))

        Public = 1 << 2,
>Public : Symbol(Public, Decl(parserRealSource2.ts, 128, 25))

        Ambient = 1 << 3,
>Ambient : Symbol(Ambient, Decl(parserRealSource2.ts, 129, 24))

        Static = 1 << 4,
>Static : Symbol(Static, Decl(parserRealSource2.ts, 130, 25))

        LocalStatic = 1 << 5,
>LocalStatic : Symbol(LocalStatic, Decl(parserRealSource2.ts, 131, 24))

        GetAccessor = 1 << 6,
>GetAccessor : Symbol(GetAccessor, Decl(parserRealSource2.ts, 132, 29))

        SetAccessor = 1 << 7,
>SetAccessor : Symbol(SetAccessor, Decl(parserRealSource2.ts, 133, 29))

        Property = 1 << 8,
>Property : Symbol(Property, Decl(parserRealSource2.ts, 134, 29))

        Readonly = 1 << 9,
>Readonly : Symbol(Readonly, Decl(parserRealSource2.ts, 135, 26))

        ModuleMember = 1 << 10,
>ModuleMember : Symbol(ModuleMember, Decl(parserRealSource2.ts, 136, 26))

        InterfaceMember = 1 << 11,
>InterfaceMember : Symbol(InterfaceMember, Decl(parserRealSource2.ts, 137, 31))

        ClassMember = 1 << 12,
>ClassMember : Symbol(ClassMember, Decl(parserRealSource2.ts, 138, 34))

        BuiltIn = 1 << 13,
>BuiltIn : Symbol(BuiltIn, Decl(parserRealSource2.ts, 139, 30))

        TypeSetDuringScopeAssignment = 1 << 14,
>TypeSetDuringScopeAssignment : Symbol(TypeSetDuringScopeAssignment, Decl(parserRealSource2.ts, 140, 26))

        Constant = 1 << 15,
>Constant : Symbol(Constant, Decl(parserRealSource2.ts, 141, 47))

        Optional = 1 << 16,
>Optional : Symbol(Optional, Decl(parserRealSource2.ts, 142, 27))

        RecursivelyReferenced = 1 << 17,
>RecursivelyReferenced : Symbol(RecursivelyReferenced, Decl(parserRealSource2.ts, 143, 27))

        Bound = 1 << 18,
>Bound : Symbol(Bound, Decl(parserRealSource2.ts, 144, 40))

        CompilerGenerated = 1 << 19,
>CompilerGenerated : Symbol(CompilerGenerated, Decl(parserRealSource2.ts, 145, 24))
    }

    export enum VarFlags {
>VarFlags : Symbol(VarFlags, Decl(parserRealSource2.ts, 147, 5))

        None = 0,
>None : Symbol(None, Decl(parserRealSource2.ts, 149, 26))

        Exported = 1,
>Exported : Symbol(Exported, Decl(parserRealSource2.ts, 150, 17))

        Private = 1 << 1,
>Private : Symbol(Private, Decl(parserRealSource2.ts, 151, 21))

        Public = 1 << 2,
>Public : Symbol(Public, Decl(parserRealSource2.ts, 152, 25))

        Ambient = 1 << 3,
>Ambient : Symbol(Ambient, Decl(parserRealSource2.ts, 153, 24))

        Static = 1 << 4,
>Static : Symbol(Static, Decl(parserRealSource2.ts, 154, 25))

        LocalStatic = 1 << 5,
>LocalStatic : Symbol(LocalStatic, Decl(parserRealSource2.ts, 155, 24))

        GetAccessor = 1 << 6,
>GetAccessor : Symbol(GetAccessor, Decl(parserRealSource2.ts, 156, 29))

        SetAccessor = 1 << 7,
>SetAccessor : Symbol(SetAccessor, Decl(parserRealSource2.ts, 157, 29))

        AutoInit = 1 << 8,
>AutoInit : Symbol(AutoInit, Decl(parserRealSource2.ts, 158, 29))

        Property = 1 << 9,
>Property : Symbol(Property, Decl(parserRealSource2.ts, 159, 26))

        Readonly = 1 << 10,
>Readonly : Symbol(Readonly, Decl(parserRealSource2.ts, 160, 26))

        Class = 1 << 11,
>Class : Symbol(Class, Decl(parserRealSource2.ts, 161, 27))

        ClassProperty = 1 << 12,
>ClassProperty : Symbol(ClassProperty, Decl(parserRealSource2.ts, 162, 24))

        ClassBodyProperty = 1 << 13,
>ClassBodyProperty : Symbol(ClassBodyProperty, Decl(parserRealSource2.ts, 163, 32))

        ClassConstructorProperty = 1 << 14,
>ClassConstructorProperty : Symbol(ClassConstructorProperty, Decl(parserRealSource2.ts, 164, 36))

        ClassSuperMustBeFirstCallInConstructor = 1 << 15,
>ClassSuperMustBeFirstCallInConstructor : Symbol(ClassSuperMustBeFirstCallInConstructor, Decl(parserRealSource2.ts, 165, 43))

        Constant = 1 << 16,
>Constant : Symbol(Constant, Decl(parserRealSource2.ts, 166, 57))

        MustCaptureThis = 1 << 17,
>MustCaptureThis : Symbol(MustCaptureThis, Decl(parserRealSource2.ts, 167, 27))
    }

    export enum FncFlags {
>FncFlags : Symbol(FncFlags, Decl(parserRealSource2.ts, 169, 5))

        None = 0,
>None : Symbol(None, Decl(parserRealSource2.ts, 171, 26))

        Exported = 1,
>Exported : Symbol(Exported, Decl(parserRealSource2.ts, 172, 17))

        Private = 1 << 1,
>Private : Symbol(Private, Decl(parserRealSource2.ts, 173, 21))

        Public = 1 << 2,
>Public : Symbol(Public, Decl(parserRealSource2.ts, 174, 25))

        Ambient = 1 << 3,
>Ambient : Symbol(Ambient, Decl(parserRealSource2.ts, 175, 24))

        Static = 1 << 4,
>Static : Symbol(Static, Decl(parserRealSource2.ts, 176, 25))

        LocalStatic = 1 << 5,
>LocalStatic : Symbol(LocalStatic, Decl(parserRealSource2.ts, 177, 24))

        GetAccessor = 1 << 6,
>GetAccessor : Symbol(GetAccessor, Decl(parserRealSource2.ts, 178, 29))

        SetAccessor = 1 << 7,
>SetAccessor : Symbol(SetAccessor, Decl(parserRealSource2.ts, 179, 29))

        Definition = 1 << 8,
>Definition : Symbol(Definition, Decl(parserRealSource2.ts, 180, 29))

        Signature = 1 << 9,
>Signature : Symbol(Signature, Decl(parserRealSource2.ts, 181, 28))

        Method = 1 << 10,
>Method : Symbol(Method, Decl(parserRealSource2.ts, 182, 27))

        HasReturnExpression = 1 << 11,
>HasReturnExpression : Symbol(HasReturnExpression, Decl(parserRealSource2.ts, 183, 25))

        CallMember = 1 << 12,
>CallMember : Symbol(CallMember, Decl(parserRealSource2.ts, 184, 38))

        ConstructMember = 1 << 13,
>ConstructMember : Symbol(ConstructMember, Decl(parserRealSource2.ts, 185, 29))

        HasSelfReference = 1 << 14,
>HasSelfReference : Symbol(HasSelfReference, Decl(parserRealSource2.ts, 186, 34))

        IsFatArrowFunction = 1 << 15,
>IsFatArrowFunction : Symbol(IsFatArrowFunction, Decl(parserRealSource2.ts, 187, 35))

        IndexerMember = 1 << 16,
>IndexerMember : Symbol(IndexerMember, Decl(parserRealSource2.ts, 188, 37))

        IsFunctionExpression = 1 << 17,
>IsFunctionExpression : Symbol(IsFunctionExpression, Decl(parserRealSource2.ts, 189, 32))

        ClassMethod = 1 << 18,
>ClassMethod : Symbol(ClassMethod, Decl(parserRealSource2.ts, 190, 39))

        ClassPropertyMethodExported = 1 << 19,
>ClassPropertyMethodExported : Symbol(ClassPropertyMethodExported, Decl(parserRealSource2.ts, 191, 30))
    }

    export enum SignatureFlags {
>SignatureFlags : Symbol(SignatureFlags, Decl(parserRealSource2.ts, 193, 5))

        None = 0,
>None : Symbol(None, Decl(parserRealSource2.ts, 195, 32))

        IsIndexer = 1,
>IsIndexer : Symbol(IsIndexer, Decl(parserRealSource2.ts, 196, 17))

        IsStringIndexer = 1 << 1,
>IsStringIndexer : Symbol(IsStringIndexer, Decl(parserRealSource2.ts, 197, 22))

        IsNumberIndexer = 1 << 2,
>IsNumberIndexer : Symbol(IsNumberIndexer, Decl(parserRealSource2.ts, 198, 33))
    }

    export function ToDeclFlags(fncFlags: FncFlags) : DeclFlags;
>ToDeclFlags : Symbol(ToDeclFlags, Decl(parserRealSource2.ts, 200, 5), Decl(parserRealSource2.ts, 202, 64), Decl(parserRealSource2.ts, 203, 64), Decl(parserRealSource2.ts, 204, 66), Decl(parserRealSource2.ts, 205, 69))
>fncFlags : Symbol(fncFlags, Decl(parserRealSource2.ts, 202, 32))
>FncFlags : Symbol(FncFlags, Decl(parserRealSource2.ts, 169, 5))
>DeclFlags : Symbol(DeclFlags, Decl(parserRealSource2.ts, 94, 5))

    export function ToDeclFlags(varFlags: VarFlags) : DeclFlags;
>ToDeclFlags : Symbol(ToDeclFlags, Decl(parserRealSource2.ts, 200, 5), Decl(parserRealSource2.ts, 202, 64), Decl(parserRealSource2.ts, 203, 64), Decl(parserRealSource2.ts, 204, 66), Decl(parserRealSource2.ts, 205, 69))
>varFlags : Symbol(varFlags, Decl(parserRealSource2.ts, 203, 32))
>VarFlags : Symbol(VarFlags, Decl(parserRealSource2.ts, 147, 5))
>DeclFlags : Symbol(DeclFlags, Decl(parserRealSource2.ts, 94, 5))

    export function ToDeclFlags(symFlags: SymbolFlags): DeclFlags;
>ToDeclFlags : Symbol(ToDeclFlags, Decl(parserRealSource2.ts, 200, 5), Decl(parserRealSource2.ts, 202, 64), Decl(parserRealSource2.ts, 203, 64), Decl(parserRealSource2.ts, 204, 66), Decl(parserRealSource2.ts, 205, 69))
>symFlags : Symbol(symFlags, Decl(parserRealSource2.ts, 204, 32))
>SymbolFlags : Symbol(SymbolFlags, Decl(parserRealSource2.ts, 123, 5))
>DeclFlags : Symbol(DeclFlags, Decl(parserRealSource2.ts, 94, 5))

    export function ToDeclFlags(moduleFlags: ModuleFlags): DeclFlags;
>ToDeclFlags : Symbol(ToDeclFlags, Decl(parserRealSource2.ts, 200, 5), Decl(parserRealSource2.ts, 202, 64), Decl(parserRealSource2.ts, 203, 64), Decl(parserRealSource2.ts, 204, 66), Decl(parserRealSource2.ts, 205, 69))
>moduleFlags : Symbol(moduleFlags, Decl(parserRealSource2.ts, 205, 32))
>ModuleFlags : Symbol(ModuleFlags, Decl(parserRealSource2.ts, 106, 5))
>DeclFlags : Symbol(DeclFlags, Decl(parserRealSource2.ts, 94, 5))

    export function ToDeclFlags(fncOrVarOrSymbolOrModuleFlags: any) {
>ToDeclFlags : Symbol(ToDeclFlags, Decl(parserRealSource2.ts, 200, 5), Decl(parserRealSource2.ts, 202, 64), Decl(parserRealSource2.ts, 203, 64), Decl(parserRealSource2.ts, 204, 66), Decl(parserRealSource2.ts, 205, 69))
>fncOrVarOrSymbolOrModuleFlags : Symbol(fncOrVarOrSymbolOrModuleFlags, Decl(parserRealSource2.ts, 206, 32))

        return <DeclFlags>fncOrVarOrSymbolOrModuleFlags;
>DeclFlags : Symbol(DeclFlags, Decl(parserRealSource2.ts, 94, 5))
>fncOrVarOrSymbolOrModuleFlags : Symbol(fncOrVarOrSymbolOrModuleFlags, Decl(parserRealSource2.ts, 206, 32))
    }

    export enum TypeFlags {
>TypeFlags : Symbol(TypeFlags, Decl(parserRealSource2.ts, 208, 5))

        None = 0,
>None : Symbol(None, Decl(parserRealSource2.ts, 210, 27))

        HasImplementation = 1,
>HasImplementation : Symbol(HasImplementation, Decl(parserRealSource2.ts, 211, 17))

        HasSelfReference = 1 << 1,
>HasSelfReference : Symbol(HasSelfReference, Decl(parserRealSource2.ts, 212, 30))

        MergeResult = 1 << 2,
>MergeResult : Symbol(MergeResult, Decl(parserRealSource2.ts, 213, 34))

        IsEnum = 1 << 3,
>IsEnum : Symbol(IsEnum, Decl(parserRealSource2.ts, 214, 29))

        BuildingName = 1 << 4,
>BuildingName : Symbol(BuildingName, Decl(parserRealSource2.ts, 215, 24))

        HasBaseType = 1 << 5,
>HasBaseType : Symbol(HasBaseType, Decl(parserRealSource2.ts, 216, 30))

        HasBaseTypeOfObject = 1 << 6,
>HasBaseTypeOfObject : Symbol(HasBaseTypeOfObject, Decl(parserRealSource2.ts, 217, 29))

        IsClass = 1 << 7,
>IsClass : Symbol(IsClass, Decl(parserRealSource2.ts, 218, 37))
    }

    export enum TypeRelationshipFlags {
>TypeRelationshipFlags : Symbol(TypeRelationshipFlags, Decl(parserRealSource2.ts, 220, 5))

        SuccessfulComparison = 0,
>SuccessfulComparison : Symbol(SuccessfulComparison, Decl(parserRealSource2.ts, 222, 39))

        SourceIsNullTargetIsVoidOrUndefined = 1,
>SourceIsNullTargetIsVoidOrUndefined : Symbol(SourceIsNullTargetIsVoidOrUndefined, Decl(parserRealSource2.ts, 223, 33))

        RequiredPropertyIsMissing = 1 << 1,
>RequiredPropertyIsMissing : Symbol(RequiredPropertyIsMissing, Decl(parserRealSource2.ts, 224, 48))

        IncompatibleSignatures = 1 << 2,
>IncompatibleSignatures : Symbol(IncompatibleSignatures, Decl(parserRealSource2.ts, 225, 43))

        SourceSignatureHasTooManyParameters = 3,
>SourceSignatureHasTooManyParameters : Symbol(SourceSignatureHasTooManyParameters, Decl(parserRealSource2.ts, 226, 40))

        IncompatibleReturnTypes = 1 << 4,
>IncompatibleReturnTypes : Symbol(IncompatibleReturnTypes, Decl(parserRealSource2.ts, 227, 48))

        IncompatiblePropertyTypes = 1 << 5,
>IncompatiblePropertyTypes : Symbol(IncompatiblePropertyTypes, Decl(parserRealSource2.ts, 228, 41))

        IncompatibleParameterTypes = 1 << 6,
>IncompatibleParameterTypes : Symbol(IncompatibleParameterTypes, Decl(parserRealSource2.ts, 229, 43))
    }

    export enum CodeGenTarget {
>CodeGenTarget : Symbol(CodeGenTarget, Decl(parserRealSource2.ts, 231, 5))

        ES3 = 0,
>ES3 : Symbol(ES3, Decl(parserRealSource2.ts, 233, 31))

        ES5 = 1,
>ES5 : Symbol(ES5, Decl(parserRealSource2.ts, 234, 16))
    }

    export enum ModuleGenTarget {
>ModuleGenTarget : Symbol(ModuleGenTarget, Decl(parserRealSource2.ts, 236, 5))

        Synchronous = 0,
>Synchronous : Symbol(Synchronous, Decl(parserRealSource2.ts, 238, 33))

        Asynchronous = 1,
>Asynchronous : Symbol(Asynchronous, Decl(parserRealSource2.ts, 239, 24))

        Local = 1 << 1,
>Local : Symbol(Local, Decl(parserRealSource2.ts, 240, 25))
    }

    // Compiler defaults to generating ES5-compliant code for
    //  - getters and setters
    export var codeGenTarget: CodeGenTarget = CodeGenTarget.ES3;
>codeGenTarget : Symbol(codeGenTarget, Decl(parserRealSource2.ts, 246, 14))
>CodeGenTarget : Symbol(CodeGenTarget, Decl(parserRealSource2.ts, 231, 5))
>CodeGenTarget.ES3 : Symbol(ES3, Decl(parserRealSource2.ts, 233, 31))
>CodeGenTarget : Symbol(CodeGenTarget, Decl(parserRealSource2.ts, 231, 5))
>ES3 : Symbol(ES3, Decl(parserRealSource2.ts, 233, 31))

    export var moduleGenTarget: ModuleGenTarget = ModuleGenTarget.Synchronous;
>moduleGenTarget : Symbol(moduleGenTarget, Decl(parserRealSource2.ts, 248, 14))
>ModuleGenTarget : Symbol(ModuleGenTarget, Decl(parserRealSource2.ts, 236, 5))
>ModuleGenTarget.Synchronous : Symbol(Synchronous, Decl(parserRealSource2.ts, 238, 33))
>ModuleGenTarget : Symbol(ModuleGenTarget, Decl(parserRealSource2.ts, 236, 5))
>Synchronous : Symbol(Synchronous, Decl(parserRealSource2.ts, 238, 33))

    export var optimizeModuleCodeGen = true;
>optimizeModuleCodeGen : Symbol(optimizeModuleCodeGen, Decl(parserRealSource2.ts, 250, 14))

    export function flagsToString(e, flags: number): string {
>flagsToString : Symbol(flagsToString, Decl(parserRealSource2.ts, 250, 44))
>e : Symbol(e, Decl(parserRealSource2.ts, 252, 34))
>flags : Symbol(flags, Decl(parserRealSource2.ts, 252, 36))

        var builder = "";
>builder : Symbol(builder, Decl(parserRealSource2.ts, 253, 11))

        for (var i = 1; i < (1 << 31) ; i = i << 1) {
>i : Symbol(i, Decl(parserRealSource2.ts, 254, 16))
>i : Symbol(i, Decl(parserRealSource2.ts, 254, 16))
>i : Symbol(i, Decl(parserRealSource2.ts, 254, 16))
>i : Symbol(i, Decl(parserRealSource2.ts, 254, 16))

            if ((flags & i) != 0) {
>flags : Symbol(flags, Decl(parserRealSource2.ts, 252, 36))
>i : Symbol(i, Decl(parserRealSource2.ts, 254, 16))

                for (var k in e) {
>k : Symbol(k, Decl(parserRealSource2.ts, 256, 24))
>e : Symbol(e, Decl(parserRealSource2.ts, 252, 34))

                    if (e[k] == i) {
>e : Symbol(e, Decl(parserRealSource2.ts, 252, 34))
>k : Symbol(k, Decl(parserRealSource2.ts, 256, 24))
>i : Symbol(i, Decl(parserRealSource2.ts, 254, 16))

                        if (builder.length > 0) {
>builder.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
>builder : Symbol(builder, Decl(parserRealSource2.ts, 253, 11))
>length : Symbol(length, Decl(lib.es5.d.ts, --, --))

                            builder += "|";
>builder : Symbol(builder, Decl(parserRealSource2.ts, 253, 11))
                        }
                        builder += k;
>builder : Symbol(builder, Decl(parserRealSource2.ts, 253, 11))
>k : Symbol(k, Decl(parserRealSource2.ts, 256, 24))

                        break;
                    }
                }
            }
        }
        return builder;
>builder : Symbol(builder, Decl(parserRealSource2.ts, 253, 11))
    }

}
