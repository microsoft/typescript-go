//// [tests/cases/conformance/decorators/missingDecoratorType.ts] ////

=== a.ts ===
interface Object { }
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 0, 0))

interface Array<T> { }
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 0, 20))
>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(a.ts, 1, 16))

interface String { }
>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 1, 22))

interface Boolean { }
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 2, 20))

interface Number { }
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 3, 21))

interface Function { }
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 4, 20))

interface RegExp { }
>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(a.ts, 5, 22))

interface IArguments { }
>IArguments : Symbol(IArguments, Decl(lib.es5.d.ts, --, --), Decl(a.ts, 6, 20))

=== b.ts ===
declare function dec(t, k, d);
>dec : Symbol(dec, Decl(b.ts, 0, 0))
>t : Symbol(t, Decl(b.ts, 0, 21))
>k : Symbol(k, Decl(b.ts, 0, 23))
>d : Symbol(d, Decl(b.ts, 0, 26))

class C {
>C : Symbol(C, Decl(b.ts, 0, 30))

    @dec
>dec : Symbol(dec, Decl(b.ts, 0, 0))

    method() {}
>method : Symbol(method, Decl(b.ts, 2, 9))
}


