//// [tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors2.ts] ////

=== propertyOverridesAccessors2.ts ===
class Base {
>Base : Symbol(Base, Decl(propertyOverridesAccessors2.ts, 0, 0))

  get x() { return 2; }
>x : Symbol(x, Decl(propertyOverridesAccessors2.ts, 0, 12), Decl(propertyOverridesAccessors2.ts, 1, 23))

  set x(value) { console.log(`x was set to ${value}`); }
>x : Symbol(x, Decl(propertyOverridesAccessors2.ts, 0, 12), Decl(propertyOverridesAccessors2.ts, 1, 23))
>value : Symbol(value, Decl(propertyOverridesAccessors2.ts, 2, 8))
>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
>value : Symbol(value, Decl(propertyOverridesAccessors2.ts, 2, 8))
}

class Derived extends Base {
>Derived : Symbol(Derived, Decl(propertyOverridesAccessors2.ts, 3, 1))
>Base : Symbol(Base, Decl(propertyOverridesAccessors2.ts, 0, 0))

  x = 1;
>x : Symbol(x, Decl(propertyOverridesAccessors2.ts, 5, 28))
}

const obj = new Derived(); // prints 'x was set to 1'
>obj : Symbol(obj, Decl(propertyOverridesAccessors2.ts, 9, 5))
>Derived : Symbol(Derived, Decl(propertyOverridesAccessors2.ts, 3, 1))

console.log(obj.x); // 2
>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
>obj.x : Symbol(x, Decl(propertyOverridesAccessors2.ts, 5, 28))
>obj : Symbol(obj, Decl(propertyOverridesAccessors2.ts, 9, 5))
>x : Symbol(x, Decl(propertyOverridesAccessors2.ts, 5, 28))

