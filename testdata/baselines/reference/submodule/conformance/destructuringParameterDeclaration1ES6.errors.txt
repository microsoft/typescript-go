error TS2318: Cannot find global type 'Array'.
error TS2318: Cannot find global type 'Function'.
error TS2318: Cannot find global type 'IArguments'.
error TS2318: Cannot find global type 'RegExp'.
error TS2318: Cannot find global type 'String'.
error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
error TS2552: Cannot find name 'Number'. Did you mean 'number'?
error TS2552: Cannot find name 'Object'. Did you mean 'object'?
destructuringParameterDeclaration1ES6.ts(8,13): error TS2488: Type '[number, number, {}]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(8,20): error TS2488: Type '{}' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(8,21): error TS2339: Property '0' does not exist on type '{}'.
destructuringParameterDeclaration1ES6.ts(10,35): error TS2339: Property '0' does not exist on type '{}'.
destructuringParameterDeclaration1ES6.ts(10,38): error TS2339: Property '1' does not exist on type '{}'.
destructuringParameterDeclaration1ES6.ts(10,41): error TS2339: Property '2' does not exist on type '{}'.
destructuringParameterDeclaration1ES6.ts(14,4): error TS2345: Argument of type '[number, number, {}, number]' is not assignable to parameter of type '[number, number, {}]'.
  Source has 4 element(s) but target allows only 3.
destructuringParameterDeclaration1ES6.ts(26,14): error TS2488: Type '[any, any, any]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(29,13): error TS2488: Type '[undefined, null, undefined]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(30,13): error TS2488: Type '[[undefined], undefined, [[undefined, undefined]]]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(30,14): error TS2488: Type '[undefined]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(30,22): error TS2488: Type '[[undefined, undefined]]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(30,23): error TS2488: Type '[undefined, undefined]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(43,13): error TS2488: Type '[any, any, [[any]]]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(43,20): error TS2488: Type '[[any]]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(43,21): error TS2488: Type '[any]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(44,13): error TS2488: Type '[any, any, [[number?]]]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(44,20): error TS2488: Type '[[number?]]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(44,21): error TS2488: Type '[number?]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(58,4): error TS2345: Argument of type '[number, number, [[string]], boolean, boolean]' is not assignable to parameter of type '[any, any, [[any]]]'.
  Source has 5 element(s) but target allows only 3.
destructuringParameterDeclaration1ES6.ts(94,17): error TS2488: Type '[number, number, number]' must have a '[Symbol.iterator]()' method that returns an iterator.
destructuringParameterDeclaration1ES6.ts(96,18): error TS2300: Duplicate identifier 'number'.
destructuringParameterDeclaration1ES6.ts(96,18): error TS2300: Duplicate identifier 'number'.
destructuringParameterDeclaration1ES6.ts(96,26): error TS2300: Duplicate identifier 'number'.
destructuringParameterDeclaration1ES6.ts(96,26): error TS2300: Duplicate identifier 'number'.
destructuringParameterDeclaration1ES6.ts(96,34): error TS2300: Duplicate identifier 'number'.
destructuringParameterDeclaration1ES6.ts(96,34): error TS2300: Duplicate identifier 'number'.


!!! error TS2318: Cannot find global type 'Array'.
!!! error TS2318: Cannot find global type 'Function'.
!!! error TS2318: Cannot find global type 'IArguments'.
!!! error TS2318: Cannot find global type 'RegExp'.
!!! error TS2318: Cannot find global type 'String'.
!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
==== destructuringParameterDeclaration1ES6.ts (27 errors) ====
    // Conformance for emitting ES6
    
    // A parameter declaration may specify either an identifier or a binding pattern.
    // The identifiers specified in parameter declarations and binding patterns
    // in a parameter list must be unique within that parameter list.
    
    // If the declaration includes a type annotation, the parameter is of that type
    function a1([a, b, [[c]]]: [number, number, string[][]]) { }
                ~~~~~~~~~~~~~
!!! error TS2488: Type '[number, number, {}]' must have a '[Symbol.iterator]()' method that returns an iterator.
                       ~~~~~
!!! error TS2488: Type '{}' must have a '[Symbol.iterator]()' method that returns an iterator.
                        ~~~
!!! error TS2339: Property '0' does not exist on type '{}'.
    function a2(o: { x: number, a: number }) { }
    function a3({j, k, l: {m, n}, q: [a, b, c]}: { j: number, k: string, l: { m: boolean, n: number }, q: (number|string)[] }) { };
                                      ~
!!! error TS2339: Property '0' does not exist on type '{}'.
                                         ~
!!! error TS2339: Property '1' does not exist on type '{}'.
                                            ~
!!! error TS2339: Property '2' does not exist on type '{}'.
    function a4({x, a}: { x: number, a: number }) { }
    
    a1([1, 2, [["world"]]]);
    a1([1, 2, [["world"]], 3]);
       ~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '[number, number, {}, number]' is not assignable to parameter of type '[number, number, {}]'.
!!! error TS2345:   Source has 4 element(s) but target allows only 3.
    
    
    // If the declaration includes an initializer expression (which is permitted only
    // when the parameter list occurs in conjunction with a function body),
    // the parameter type is the widened form (section 3.11) of the type of the initializer expression.
    
    function b1(z = [undefined, null]) { };
    function b2(z = null, o = { x: 0, y: undefined }) { }
    function b3({z: {x, y: {j}}} = { z: { x: "hi", y: { j: 1 } } }) { }
    
    interface F1 {
        b5(z, y, [, a, b], {p, m: { q, r}});
                 ~~~~~~~~
!!! error TS2488: Type '[any, any, any]' must have a '[Symbol.iterator]()' method that returns an iterator.
    }
    
    function b6([a, z, y] = [undefined, null, undefined]) { }
                ~~~~~~~~~
!!! error TS2488: Type '[undefined, null, undefined]' must have a '[Symbol.iterator]()' method that returns an iterator.
    function b7([[a], b, [[c, d]]] = [[undefined], undefined, [[undefined, undefined]]]) { }
                ~~~~~~~~~~~~~~~~~~
!!! error TS2488: Type '[[undefined], undefined, [[undefined, undefined]]]' must have a '[Symbol.iterator]()' method that returns an iterator.
                 ~~~
!!! error TS2488: Type '[undefined]' must have a '[Symbol.iterator]()' method that returns an iterator.
                         ~~~~~~~~
!!! error TS2488: Type '[[undefined, undefined]]' must have a '[Symbol.iterator]()' method that returns an iterator.
                          ~~~~~~
!!! error TS2488: Type '[undefined, undefined]' must have a '[Symbol.iterator]()' method that returns an iterator.
    
    b1([1, 2, 3]);  // z is widen to the type any[]
    b2("string", { x: 200, y: "string" });
    b2("string", { x: 200, y: true });
    
    
    // If the declaration specifies a binding pattern, the parameter type is the implied type of that binding pattern (section 5.1.3)
    enum Foo { a }
    function c0({z: {x, y: {j}}}) { }
    function c1({z} = { z: 10 }) { }
    function c2({z = 10}) { }
    function c3({b}: { b: number|string} = { b: "hello" }) { }
    function c5([a, b, [[c]]]) { }
                ~~~~~~~~~~~~~
!!! error TS2488: Type '[any, any, [[any]]]' must have a '[Symbol.iterator]()' method that returns an iterator.
                       ~~~~~
!!! error TS2488: Type '[[any]]' must have a '[Symbol.iterator]()' method that returns an iterator.
                        ~~~
!!! error TS2488: Type '[any]' must have a '[Symbol.iterator]()' method that returns an iterator.
    function c6([a, b, [[c=1]]]) { }
                ~~~~~~~~~~~~~~~
!!! error TS2488: Type '[any, any, [[number?]]]' must have a '[Symbol.iterator]()' method that returns an iterator.
                       ~~~~~~~
!!! error TS2488: Type '[[number?]]' must have a '[Symbol.iterator]()' method that returns an iterator.
                        ~~~~~
!!! error TS2488: Type '[number?]' must have a '[Symbol.iterator]()' method that returns an iterator.
    
    c0({z : { x: 1, y: { j: "world" } }});      // Implied type is { z: {x: any, y: {j: any}} }
    c0({z : { x: "string", y: { j: true } }});  // Implied type is { z: {x: any, y: {j: any}} }
    
    c1();             // Implied type is {z:number}?
    c1({ z: 1 })      // Implied type is {z:number}? 
    
    c2({});         // Implied type is {z?: number}
    c2({z:1});      // Implied type is {z?: number}
    
    c3({ b: 1 });     // Implied type is { b: number|string }.
    
    c5([1, 2, [["string"]]]);               // Implied type is is [any, any, [[any]]]
    c5([1, 2, [["string"]], false, true]);  // Implied type is is [any, any, [[any]]]
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '[number, number, [[string]], boolean, boolean]' is not assignable to parameter of type '[any, any, [[any]]]'.
!!! error TS2345:   Source has 5 element(s) but target allows only 3.
    
    
    // A parameter can be marked optional by following its name or binding pattern with a question mark (?)
    // or by including an initializer.
    
    interface F2 {
        d3([a, b, c]?);
        d4({x, y, z}?);
        e0([a, b, c]);
    }
    
    class C2 implements F2 {
        constructor() { }
        d3() { }
        d4() { }
        e0([a, b, c]) { }
    }
    
    class C3 implements F2 {
        d3([a, b, c]) { }
        d4({x, y, z}) { }
        e0([a, b, c]) { }
    }
    
    function d5({x, y} = { x: 1, y: 2 }) { }
    d5();  // Parameter is optional as its declaration included an initializer
    
    // Destructuring parameter declarations do not permit type annotations on the individual binding patterns,
    // as such annotations would conflict with the already established meaning of colons in object literals.
    // Type annotations must instead be written on the top- level parameter declaration
    
    function e1({x: number}) { }  // x has type any NOT number
    function e2({x}: { x: number }) { }  // x is type number
    function e3({x}: { x?: number }) { }  // x is an optional with type number
    function e4({x: [number,string,any] }) { }  // x has type [any, any, any]
    function e5({x: [a, b, c]}: { x: [number, number, number] }) { }  // x has type [any, any, any]
                    ~~~~~~~~~
!!! error TS2488: Type '[number, number, number]' must have a '[Symbol.iterator]()' method that returns an iterator.
    
    function e6({x: [number, number, number]}) { }  // error, duplicate identifier;
                     ~~~~~~
!!! error TS2300: Duplicate identifier 'number'.
                     ~~~~~~
!!! error TS2300: Duplicate identifier 'number'.
                             ~~~~~~
!!! error TS2300: Duplicate identifier 'number'.
                             ~~~~~~
!!! error TS2300: Duplicate identifier 'number'.
                                     ~~~~~~
!!! error TS2300: Duplicate identifier 'number'.
                                     ~~~~~~
!!! error TS2300: Duplicate identifier 'number'.
    
    
    