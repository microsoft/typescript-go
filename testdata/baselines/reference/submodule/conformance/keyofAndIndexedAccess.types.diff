--- old.keyofAndIndexedAccess.types
+++ new.keyofAndIndexedAccess.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/conformance/types/keyof/keyofAndIndexedAccess.ts] ////
 
-=== Performance Stats ===
-Type Count: 1,000
-
 === keyofAndIndexedAccess.ts ===
 class Shape {
 >Shape : Shape
@@= skipped -41, +38 lines =@@
 >Options : Options
 
     visible: "yes" | "no";
->visible : "yes" | "no"
+>visible : "no" | "yes"
 }
 
 type Dictionary<T> = { [x: string]: T };
 >Dictionary : Dictionary<T>
+>T : T
 >x : string
 
 type NumericallyIndexed<T> = { [x: number]: T };
 >NumericallyIndexed : NumericallyIndexed<T>
+>T : T
 >x : number
 
 const enum E { A, B, C }
@@= skipped -21, +23 lines =@@
 >K00 : string | number | symbol
 
 type K01 = keyof string;  // "toString" | "charAt" | ...
->K01 : number | "length" | "toString" | "concat" | "slice" | "indexOf" | "lastIndexOf" | "charAt" | "charCodeAt" | "localeCompare" | "match" | "replace" | "search" | "split" | "substring" | "toLowerCase" | "toLocaleLowerCase" | "toUpperCase" | "toLocaleUpperCase" | "trim" | "substr" | "valueOf"
+>K01 : number | "charAt" | "charCodeAt" | "concat" | "indexOf" | "lastIndexOf" | "length" | "localeCompare" | "match" | "replace" | "search" | "slice" | "split" | "substr" | "substring" | "toLocaleLowerCase" | "toLocaleUpperCase" | "toLowerCase" | "toString" | "toUpperCase" | "trim" | "valueOf"
 
 type K02 = keyof number;  // "toString" | "toFixed" | "toExponential" | ...
->K02 : "toString" | "toLocaleString" | "toFixed" | "toExponential" | "toPrecision" | "valueOf"
+>K02 : "toExponential" | "toFixed" | "toLocaleString" | "toPrecision" | "toString" | "valueOf"
 
 type K03 = keyof boolean;  // "valueOf"
 >K03 : "valueOf"
@@= skipped -39, +39 lines =@@
 >K14 : keyof Object
 
 type K15 = keyof E;  // "toString" | "toFixed" | "toExponential" | ...
->K15 : "toString" | "toLocaleString" | "toFixed" | "toExponential" | "toPrecision" | "valueOf"
+>K15 : "toExponential" | "toFixed" | "toLocaleString" | "toPrecision" | "toString" | "valueOf"
 
 type K16 = keyof [string, number];  // "0" | "1" | "length" | "toString" | ...
 >K16 : keyof [string, number]
@@= skipped -9, +9 lines =@@
 >K17 : "name"
 
 type K18 = keyof (Shape & Item);  // "name" | "width" | "height" | "visible" | "price"
->K18 : "name" | "width" | "height" | "visible" | "price"
+>K18 : "height" | "name" | "price" | "visible" | "width"
 
 type K19 = keyof NumericallyIndexed<Shape> // never
 >K19 : number
 
 type KeyOf<T> = keyof T;
 >KeyOf : keyof T
+>T : T
 
 type K20 = KeyOf<Shape>;  // "name" | "width" | "height" | "visible"
 >K20 : keyof Shape
@@= skipped -59, +60 lines =@@
 >Q36 : number
 
 type Q40 = (Shape | Options)["visible"];  // boolean | "yes" | "no"
->Q40 : boolean | "yes" | "no"
+>Q40 : "no" | "yes" | boolean
 
 type Q41 = (Shape & Options)["visible"];  // true & "yes" | true & "no" | false & "yes" | false & "no"
 >Q41 : never
@@= skipped -20, +20 lines =@@
 
 function getProperty<T, K extends keyof T>(obj: T, key: K) {
 >getProperty : <T, K extends keyof T>(obj: T, key: K) => T[K]
+>T : T
+>K : K
 >obj : T
 >key : K
 
@@= skipped -11, +13 lines =@@
 
 function setProperty<T, K extends keyof T>(obj: T, key: K, value: T[K]) {
 >setProperty : <T, K extends keyof T>(obj: T, key: K, value: T[K]) => void
+>T : T
+>K : K
 >obj : T
 >key : K
 >value : T[K]
@@= skipped -28, +30 lines =@@
 >getProperty(shape, cond ? "width" : "height") : number
 >getProperty : <T, K extends keyof T>(obj: T, key: K) => T[K]
 >shape : Shape
->cond ? "width" : "height" : "width" | "height"
+>cond ? "width" : "height" : "height" | "width"
 >cond : boolean
 >"width" : "width"
 >"height" : "height"
@@= skipped -26, +26 lines =@@
 >setProperty(shape, cond ? "width" : "height", 10) : void
 >setProperty : <T, K extends keyof T>(obj: T, key: K, value: T[K]) => void
 >shape : Shape
->cond ? "width" : "height" : "width" | "height"
+>cond ? "width" : "height" : "height" | "width"
 >cond : boolean
 >"width" : "width"
 >"height" : "height"
@@= skipped -91, +91 lines =@@
 
 class Component<PropType> {
 >Component : Component<PropType>
+>PropType : PropType
 
     props: PropType;
 >props : PropType
 
     getProperty<K extends keyof PropType>(key: K) {
 >getProperty : <K extends keyof PropType>(key: K) => PropType[K]
+>K : K
 >key : K
 
         return this.props[key];
@@= skipped -17, +19 lines =@@
     }
     setProperty<K extends keyof PropType>(key: K, value: PropType[K]) {
 >setProperty : <K extends keyof PropType>(key: K, value: PropType[K]) => void
+>K : K
 >key : K
 >value : PropType[K]
 
@@= skipped -32, +33 lines =@@
 >component.getProperty : <K extends keyof Shape>(key: K) => Shape[K]
 >component : Component<Shape>
 >getProperty : <K extends keyof Shape>(key: K) => Shape[K]
->cond ? "width" : "height" : "width" | "height"
+>cond ? "width" : "height" : "height" | "width"
 >cond : boolean
 >"width" : "width"
 >"height" : "height"
@@= skipped -29, +29 lines =@@
 >component.setProperty : <K extends keyof Shape>(key: K, value: Shape[K]) => void
 >component : Component<Shape>
 >setProperty : <K extends keyof Shape>(key: K, value: Shape[K]) => void
->cond ? "width" : "height" : "width" | "height"
+>cond ? "width" : "height" : "height" | "width"
 >cond : boolean
 >"width" : "width"
 >"height" : "height"
@@= skipped -20, +20 lines =@@
 
 function pluck<T, K extends keyof T>(array: T[], key: K) {
 >pluck : <T, K extends keyof T>(array: T[], key: K) => T[K][]
+>T : T
+>K : K
 >array : T[]
 >key : K
 
@@= skipped -46, +48 lines =@@
 
 function f31<K extends keyof Shape>(key: K) {
 >f31 : <K extends keyof Shape>(key: K) => Shape[K]
+>K : K
 >key : K
 
     const shape: Shape = { name: "foo", width: 5, height: 10, visible: true };
@@= skipped -21, +22 lines =@@
 }
 
 function f32<K extends "width" | "height">(key: K) {
->f32 : <K extends "width" | "height">(key: K) => Shape[K]
+>f32 : <K extends "height" | "width">(key: K) => Shape[K]
+>K : K
 >key : K
 
     const shape: Shape = { name: "foo", width: 5, height: 10, visible: true };
@@= skipped -23, +24 lines =@@
 
 function f33<S extends Shape, K extends keyof S>(shape: S, key: K) {
 >f33 : <S extends Shape, K extends keyof S>(shape: S, key: K) => S[K]
+>S : S
+>K : K
 >shape : S
 >key : K
 
     let name = getProperty(shape, "name");
 >name : S["name"]
 >getProperty(shape, "name") : S["name"]
->getProperty : <T, K_1 extends keyof T>(obj: T, key: K_1) => T[K_1]
+>getProperty : <T, K extends keyof T>(obj: T, key: K) => T[K]
 >shape : S
 >"name" : "name"
 
     let prop = getProperty(shape, key);
 >prop : S[K]
 >getProperty(shape, key) : S[K]
->getProperty : <T, K_1 extends keyof T>(obj: T, key: K_1) => T[K_1]
+>getProperty : <T, K extends keyof T>(obj: T, key: K) => T[K]
 >shape : S
 >key : K
 
@@= skipped -89, +91 lines =@@
 
 function f50<T>(k: keyof T, s: string) {
 >f50 : <T>(k: keyof T, s: string) => void
+>T : T
 >k : keyof T
 >s : string
 
@@= skipped -16, +17 lines =@@
 
 function f51<T, K extends keyof T>(k: K, s: string) {
 >f51 : <T, K extends keyof T>(k: K, s: string) => void
+>T : T
+>K : K
 >k : K
 >s : string
 
@@= skipped -16, +18 lines =@@
 
 function f52<T>(obj: { [x: string]: boolean }, k: Exclude<keyof T, symbol>, s: string, n: number) {
 >f52 : <T>(obj: { [x: string]: boolean; }, k: Exclude<keyof T, symbol>, s: string, n: number) => void
+>T : T
 >obj : { [x: string]: boolean; }
 >x : string
 >k : Exclude<keyof T, symbol>
@@= skipped -27, +28 lines =@@
 
 function f53<T, K extends Exclude<keyof T, symbol>>(obj: { [x: string]: boolean }, k: K, s: string, n: number) {
 >f53 : <T, K extends Exclude<keyof T, symbol>>(obj: { [x: string]: boolean; }, k: K, s: string, n: number) => void
+>T : T
+>K : K
 >obj : { [x: string]: boolean; }
 >x : string
 >k : K
@@= skipped -27, +29 lines =@@
 
 function f54<T>(obj: T, key: keyof T) {
 >f54 : <T>(obj: T, key: keyof T) => void
+>T : T
 >obj : T
 >key : keyof T
 
@@= skipped -20, +21 lines =@@
 
 function f55<T, K extends keyof T>(obj: T, key: K) {
 >f55 : <T, K extends keyof T>(obj: T, key: K) => void
+>T : T
+>K : K
 >obj : T
 >key : K
 
@@= skipped -20, +22 lines =@@
 
 function f60<T>(source: T, target: T) {
 >f60 : <T>(source: T, target: T) => void
+>T : T
 >source : T
 >target : T
 
@@= skipped -19, +20 lines =@@
 }
 
 function f70(func: <T, U>(k1: keyof (T | U), k2: keyof (T & U)) => void) {
->f70 : (func: <T, U>(k1: keyof (T | U), k2: keyof (T & U)) => void) => void
->func : <T, U>(k1: keyof (T | U), k2: keyof (T & U)) => void
+>f70 : (func: <T, U>(k1: keyof T & keyof U, k2: keyof T | keyof U) => void) => void
+>func : <T, U>(k1: keyof T & keyof U, k2: keyof T | keyof U) => void
+>T : T
+>U : U
 >k1 : keyof T & keyof U
 >k2 : keyof T | keyof U
 
     func<{ a: any, b: any }, { a: any, c: any }>('a', 'a');
 >func<{ a: any, b: any }, { a: any, c: any }>('a', 'a') : void
->func : <T, U>(k1: keyof (T | U), k2: keyof (T & U)) => void
+>func : <T, U>(k1: keyof T & keyof U, k2: keyof T | keyof U) => void
 >a : any
 >b : any
 >a : any
@@= skipped -17, +19 lines =@@
 
     func<{ a: any, b: any }, { a: any, c: any }>('a', 'b');
 >func<{ a: any, b: any }, { a: any, c: any }>('a', 'b') : void
->func : <T, U>(k1: keyof (T | U), k2: keyof (T & U)) => void
+>func : <T, U>(k1: keyof T & keyof U, k2: keyof T | keyof U) => void
 >a : any
 >b : any
 >a : any
@@= skipped -10, +10 lines =@@
 
     func<{ a: any, b: any }, { a: any, c: any }>('a', 'c');
 >func<{ a: any, b: any }, { a: any, c: any }>('a', 'c') : void
->func : <T, U>(k1: keyof (T | U), k2: keyof (T & U)) => void
+>func : <T, U>(k1: keyof T & keyof U, k2: keyof T | keyof U) => void
 >a : any
 >b : any
 >a : any
@@= skipped -12, +12 lines =@@
 function f71(func: <T, U>(x: T, y: U) => Partial<T & U>) {
 >f71 : (func: <T, U>(x: T, y: U) => Partial<T & U>) => void
 >func : <T, U>(x: T, y: U) => Partial<T & U>
+>T : T
+>U : U
 >x : T
 >y : U
 
@@= skipped -33, +35 lines =@@
 }
 
 function f72(func: <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => (T & U)[K]) {
->f72 : (func: <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => (T & U)[K]) => void
->func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => (T & U)[K]
+>f72 : (func: <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => T & U[K]) => void
+>func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => T & U[K]
+>T : T
+>U : U
+>K : K
 >x : T
 >y : U
 >k : K
@@= skipped -9, +12 lines =@@
     let a = func({ a: 1, b: "hello" }, { c: true }, 'a');  // number
 >a : number
 >func({ a: 1, b: "hello" }, { c: true }, 'a') : number
->func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => (T & U)[K]
+>func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => T & U[K]
 >{ a: 1, b: "hello" } : { a: number; b: string; }
 >a : number
 >1 : 1
@@= skipped -14, +14 lines =@@
     let b = func({ a: 1, b: "hello" }, { c: true }, 'b');  // string
 >b : string
 >func({ a: 1, b: "hello" }, { c: true }, 'b') : string
->func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => (T & U)[K]
+>func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => T & U[K]
 >{ a: 1, b: "hello" } : { a: number; b: string; }
 >a : number
 >1 : 1
@@= skipped -14, +14 lines =@@
     let c = func({ a: 1, b: "hello" }, { c: true }, 'c');  // boolean
 >c : boolean
 >func({ a: 1, b: "hello" }, { c: true }, 'c') : boolean
->func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => (T & U)[K]
+>func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => T & U[K]
 >{ a: 1, b: "hello" } : { a: number; b: string; }
 >a : number
 >1 : 1
@@= skipped -13, +13 lines =@@
 }
 
 function f73(func: <T, U, K extends keyof (T & U)>(x: T, y: U, k: K) => (T & U)[K]) {
->f73 : (func: <T, U, K extends keyof (T & U)>(x: T, y: U, k: K) => (T & U)[K]) => void
->func : <T, U, K extends keyof (T & U)>(x: T, y: U, k: K) => (T & U)[K]
+>f73 : (func: <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => T & U[K]) => void
+>func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => T & U[K]
+>T : T
+>U : U
+>K : K
 >x : T
 >y : U
 >k : K
@@= skipped -9, +12 lines =@@
     let a = func({ a: 1, b: "hello" }, { c: true }, 'a');  // number
 >a : number
 >func({ a: 1, b: "hello" }, { c: true }, 'a') : number
->func : <T, U, K extends keyof (T & U)>(x: T, y: U, k: K) => (T & U)[K]
+>func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => T & U[K]
 >{ a: 1, b: "hello" } : { a: number; b: string; }
 >a : number
 >1 : 1
@@= skipped -14, +14 lines =@@
     let b = func({ a: 1, b: "hello" }, { c: true }, 'b');  // string
 >b : string
 >func({ a: 1, b: "hello" }, { c: true }, 'b') : string
->func : <T, U, K extends keyof (T & U)>(x: T, y: U, k: K) => (T & U)[K]
+>func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => T & U[K]
 >{ a: 1, b: "hello" } : { a: number; b: string; }
 >a : number
 >1 : 1
@@= skipped -14, +14 lines =@@
     let c = func({ a: 1, b: "hello" }, { c: true }, 'c');  // boolean
 >c : boolean
 >func({ a: 1, b: "hello" }, { c: true }, 'c') : boolean
->func : <T, U, K extends keyof (T & U)>(x: T, y: U, k: K) => (T & U)[K]
+>func : <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => T & U[K]
 >{ a: 1, b: "hello" } : { a: number; b: string; }
 >a : number
 >1 : 1
@@= skipped -13, +13 lines =@@
 }
 
 function f74(func: <T, U, K extends keyof (T | U)>(x: T, y: U, k: K) => (T | U)[K]) {
->f74 : (func: <T, U, K extends keyof (T | U)>(x: T, y: U, k: K) => (T | U)[K]) => void
->func : <T, U, K extends keyof (T | U)>(x: T, y: U, k: K) => (T | U)[K]
+>f74 : (func: <T, U, K extends keyof T & keyof U>(x: T, y: U, k: K) => T | U[K]) => void
+>func : <T, U, K extends keyof T & keyof U>(x: T, y: U, k: K) => T | U[K]
+>T : T
+>U : U
+>K : K
 >x : T
 >y : U
 >k : K
@@= skipped -9, +12 lines =@@
     let a = func({ a: 1, b: "hello" }, { a: 2, b: true }, 'a');  // number
 >a : number
 >func({ a: 1, b: "hello" }, { a: 2, b: true }, 'a') : number
->func : <T, U, K extends keyof (T | U)>(x: T, y: U, k: K) => (T | U)[K]
+>func : <T, U, K extends keyof T & keyof U>(x: T, y: U, k: K) => T | U[K]
 >{ a: 1, b: "hello" } : { a: number; b: string; }
 >a : number
 >1 : 1
@@= skipped -16, +16 lines =@@
     let b = func({ a: 1, b: "hello" }, { a: 2, b: true }, 'b');  // string | boolean
 >b : string | boolean
 >func({ a: 1, b: "hello" }, { a: 2, b: true }, 'b') : string | boolean
->func : <T, U, K extends keyof (T | U)>(x: T, y: U, k: K) => (T | U)[K]
+>func : <T, U, K extends keyof T & keyof U>(x: T, y: U, k: K) => T | U[K]
 >{ a: 1, b: "hello" } : { a: number; b: string; }
 >a : number
 >1 : 1
@@= skipped -16, +16 lines =@@
 
 function f80<T extends { a: { x: any } }>(obj: T) {
 >f80 : <T extends { a: { x: any; }; }>(obj: T) => void
+>T : T
 >a : { x: any; }
 >x : any
 >obj : T
@@= skipped -51, +52 lines =@@
 
 function f81<T extends { a: { x: any } }>(obj: T) {
 >f81 : <T extends { a: { x: any; }; }>(obj: T) => T["a"]["x"]
+>T : T
 >a : { x: any; }
 >x : any
 >obj : T
@@= skipped -39, +40 lines =@@
 
 function f83<T extends { [x: string]: { x: any } }, K extends keyof T>(obj: T, key: K) {
 >f83 : <T extends { [x: string]: { x: any; }; }, K extends keyof T>(obj: T, key: K) => T[K]["x"]
+>T : T
 >x : string
 >x : any
+>K : K
 >obj : T
 >key : K
 
@@= skipped -48, +50 lines =@@
 
     get<K extends keyof this>(key: K) {
 >get : <K extends keyof this>(key: K) => this[K]
+>K : K
 >key : K
 
         return this[key];
@@= skipped -9, +10 lines =@@
     }
     set<K extends keyof this>(key: K, value: this[K]) {
 >set : <K extends keyof this>(key: K, value: this[K]) => void
+>K : K
 >key : K
 >value : this[K]
 
@@= skipped -83, +84 lines =@@
 };
 
 function f90<T extends S2, K extends keyof S2>(x1: S2[keyof S2], x2: T[keyof S2], x3: S2[K]) {
->f90 : <T extends S2, K extends keyof S2>(x1: S2[keyof S2], x2: T[keyof S2], x3: S2[K]) => void
+>f90 : <T extends S2, K extends keyof S2>(x1: string, x2: T[keyof S2], x3: S2[K]) => void
+>T : T
+>K : K
 >x1 : string
 >x2 : T[keyof S2]
 >x3 : S2[K]
@@= skipped -53, +55 lines =@@
 
 function f91<T, K extends keyof T>(x: T, y: T[keyof T], z: T[K]) {
 >f91 : <T, K extends keyof T>(x: T, y: T[keyof T], z: T[K]) => void
+>T : T
+>K : K
 >x : T
 >y : T[keyof T]
 >z : T[K]
@@= skipped -25, +27 lines =@@
 
 function f92<T, K extends keyof T>(x: T, y: T[keyof T], z: T[K]) {
 >f92 : <T, K extends keyof T>(x: T, y: T[keyof T], z: T[K]) => void
+>T : T
+>K : K
 >x : T
 >y : T[keyof T]
 >z : T[K]
@@= skipped -30, +32 lines =@@
 
     get<K extends keyof this>(prop: K) {
 >get : <K extends keyof this>(prop: K) => this[K]
+>K : K
 >prop : K
 
         return this[prop];
@@= skipped -9, +10 lines =@@
     }
     set<K extends keyof this>(prop: K, value: this[K]) {
 >set : <K extends keyof this>(prop: K, value: this[K]) => void
+>K : K
 >prop : K
 >value : this[K]
 
@@= skipped -76, +77 lines =@@
 // Modified repro from #12544
 
 function path<T, K1 extends keyof T>(obj: T, key1: K1): T[K1];
->path : { <T, K1 extends keyof T>(obj: T, key1: K1): T[K1]; <T_1, K1_1 extends keyof T_1, K2 extends keyof T_1[K1_1]>(obj: T_1, key1: K1_1, key2: K2): T_1[K1_1][K2]; <T_1, K1_1 extends keyof T_1, K2 extends keyof T_1[K1_1], K3 extends keyof T_1[K1_1][K2]>(obj: T_1, key1: K1_1, key2: K2, key3: K3): T_1[K1_1][K2][K3]; (obj: any, ...keys: (string | number)[]): any; }
+>path : { <T, K1 extends keyof T>(obj: T, key1: K1): T[K1]; <T, K1 extends keyof T, K2 extends keyof T[K1]>(obj: T, key1: K1, key2: K2): T[K1][K2]; <T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(obj: T, key1: K1, key2: K2, key3: K3): T[K1][K2][K3]; (obj: any, ...keys: (string | number)[]): any; }
+>T : T
+>K1 : K1
 >obj : T
 >key1 : K1
 
 function path<T, K1 extends keyof T, K2 extends keyof T[K1]>(obj: T, key1: K1, key2: K2): T[K1][K2];
->path : { <T_1, K1_1 extends keyof T_1>(obj: T_1, key1: K1_1): T_1[K1_1]; <T, K1 extends keyof T, K2 extends keyof T[K1]>(obj: T, key1: K1, key2: K2): T[K1][K2]; <T_1, K1_1 extends keyof T_1, K2_1 extends keyof T_1[K1_1], K3 extends keyof T_1[K1_1][K2_1]>(obj: T_1, key1: K1_1, key2: K2_1, key3: K3): T_1[K1_1][K2_1][K3]; (obj: any, ...keys: (string | number)[]): any; }
+>path : { <T, K1 extends keyof T>(obj: T, key1: K1): T[K1]; <T, K1 extends keyof T, K2 extends keyof T[K1]>(obj: T, key1: K1, key2: K2): T[K1][K2]; <T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(obj: T, key1: K1, key2: K2, key3: K3): T[K1][K2][K3]; (obj: any, ...keys: (string | number)[]): any; }
+>T : T
+>K1 : K1
+>K2 : K2
 >obj : T
 >key1 : K1
 >key2 : K2
 
 function path<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(obj: T, key1: K1, key2: K2, key3: K3): T[K1][K2][K3];
->path : { <T_1, K1_1 extends keyof T_1>(obj: T_1, key1: K1_1): T_1[K1_1]; <T_1, K1_1 extends keyof T_1, K2_1 extends keyof T_1[K1_1]>(obj: T_1, key1: K1_1, key2: K2_1): T_1[K1_1][K2_1]; <T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(obj: T, key1: K1, key2: K2, key3: K3): T[K1][K2][K3]; (obj: any, ...keys: (string | number)[]): any; }
+>path : { <T, K1 extends keyof T>(obj: T, key1: K1): T[K1]; <T, K1 extends keyof T, K2 extends keyof T[K1]>(obj: T, key1: K1, key2: K2): T[K1][K2]; <T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(obj: T, key1: K1, key2: K2, key3: K3): T[K1][K2][K3]; (obj: any, ...keys: (string | number)[]): any; }
+>T : T
+>K1 : K1
+>K2 : K2
+>K3 : K3
 >obj : T
 >key1 : K1
 >key2 : K2
@@= skipped -102, +111 lines =@@
 const assignTo2 = <T, K1 extends keyof T, K2 extends keyof T[K1]>(object: T, key1: K1, key2: K2) =>
 >assignTo2 : <T, K1 extends keyof T, K2 extends keyof T[K1]>(object: T, key1: K1, key2: K2) => (value: T[K1][K2]) => T[K1][K2]
 ><T, K1 extends keyof T, K2 extends keyof T[K1]>(object: T, key1: K1, key2: K2) =>    (value: T[K1][K2]) => object[key1][key2] = value : <T, K1 extends keyof T, K2 extends keyof T[K1]>(object: T, key1: K1, key2: K2) => (value: T[K1][K2]) => T[K1][K2]
+>T : T
+>K1 : K1
+>K2 : K2
 >object : T
 >key1 : K1
 >key2 : K2
@@= skipped -19, +22 lines =@@
 
 declare function one<T>(handler: (t: T) => void): T
 >one : <T>(handler: (t: T) => void) => T
+>T : T
 >handler : (t: T) => void
 >t : T
 
@@= skipped -11, +12 lines =@@
 
 type Handlers<T> = { [K in keyof T]: (t: T[K]) => void }
 >Handlers : Handlers<T>
+>T : T
+>K : K
 >t : T[K]
 
 declare function on<T>(handlerHash: Handlers<T>): T
 >on : <T>(handlerHash: Handlers<T>) => T
+>T : T
 >handlerHash : Handlers<T>
 
 var hashOfEmpty1 = on({ test: () => {} });  // {}
@@= skipped -26, +29 lines =@@
 // Repro from #12624
 
 interface Options1<Data, Computed> {
+>Options1 : Options1<Data, Computed>
+>Data : Data
+>Computed : Computed
+
     data?: Data
 >data : Data | undefined
 
@@= skipped -9, +13 lines =@@
 
 declare class Component1<Data, Computed> {
 >Component1 : Component1<Data, Computed>
+>Data : Data
+>Computed : Computed
 
     constructor(options: Options1<Data, Computed>);
 >options : Options1<Data, Computed>
 
     get<K extends keyof (Data & Computed)>(key: K): (Data & Computed)[K];
->get : <K extends keyof (Data & Computed)>(key: K) => (Data & Computed)[K]
+>get : <K extends keyof Computed | keyof Data>(key: K) => Data & Computed[K]
+>K : K
 >key : K
 }
 
@@= skipped -35, +38 lines =@@
 // Repro from #12625
 
 interface Options2<Data, Computed> {
+>Options2 : Options2<Data, Computed>
+>Data : Data
+>Computed : Computed
+
     data?: Data
 >data : Data | undefined
 
@@= skipped -9, +13 lines =@@
 
 declare class Component2<Data, Computed> {
 >Component2 : Component2<Data, Computed>
+>Data : Data
+>Computed : Computed
 
     constructor(options: Options2<Data, Computed>);
 >options : Options2<Data, Computed>
 
     get<K extends keyof Data | keyof Computed>(key: K): (Data & Computed)[K];
->get : <K extends keyof Data | keyof Computed>(key: K) => (Data & Computed)[K]
+>get : <K extends keyof Computed | keyof Data>(key: K) => Data & Computed[K]
+>K : K
 >key : K
 }
 
 // Repro from #12641
 
 interface R {
+>R : R
+
     p: number;
 >p : number
 }
 
 function f<K extends keyof R>(p: K) {
->f : <K extends keyof R>(p: K) => void
+>f : <K extends "p">(p: K) => void
+>K : K
 >p : K
 
     let a: any;
@@= skipped -48, +54 lines =@@
 
 declare function dispatchMethod<M extends MethodDescriptor>(name: M['name'], args: M['args']): M['returnValue'];
 >dispatchMethod : <M extends MethodDescriptor>(name: M["name"], args: M["args"]) => M["returnValue"]
+>M : M
 >name : M["name"]
 >args : M["args"]
 
@@= skipped -32, +33 lines =@@
 
 let MyThingy: { [key in KeyTypes]: string[] };
 >MyThingy : { a: string[]; b: string[]; }
+>key : key
 
 function addToMyThingy<S extends KeyTypes>(key: S) {
 >addToMyThingy : <S extends KeyTypes>(key: S) => void
+>S : S
 >key : S
 
     MyThingy[key].push("a");
@@= skipped -19, +21 lines =@@
 
 type Handler<T> = {
 >Handler : Handler<T>
+>T : T
 
     onChange: (name: keyof T) => void;
 >onChange : (name: keyof T) => void
@@= skipped -9, +10 lines =@@
 
 function onChangeGenericFunction<T>(handler: Handler<T & {preset: number}>) {
 >onChangeGenericFunction : <T>(handler: Handler<T & { preset: number; }>) => void
+>T : T
 >handler : Handler<T & { preset: number; }>
 >preset : number
 
     handler.onChange('preset')
 >handler.onChange('preset') : void
->handler.onChange : (name: keyof T | "preset") => void
+>handler.onChange : (name: "preset" | keyof T) => void
 >handler : Handler<T & { preset: number; }>
->onChange : (name: keyof T | "preset") => void
+>onChange : (name: "preset" | keyof T) => void
 >'preset' : "preset"
 }
 
@@= skipped -15, +16 lines =@@
 
 function updateIds<T extends Record<K, string>, K extends string>(
 >updateIds : <T extends Record<K, string>, K extends string>(obj: T, idFields: K[], idMapping: Partial<Record<T[K], T[K]>>) => Record<K, string>
+>T : T
+>K : K
 
     obj: T,
 >obj : T
@@= skipped -42, +44 lines =@@
 
 function updateIds2<T extends { [x: string]: string }, K extends keyof T>(
 >updateIds2 : <T extends { [x: string]: string; }, K extends keyof T>(obj: T, key: K, stringMap: { [oldId: string]: string; }) => void
+>T : T
 >x : string
+>K : K
 
     obj: T,
 >obj : T
@@= skipped -28, +30 lines =@@
 // Repro from #13514
 
 declare function head<T extends Array<any>>(list: T): T[0];
->head : <T extends Array<any>>(list: T) => T[0]
+>head : <T extends any[]>(list: T) => T[0]
+>T : T
 >list : T
 
 // Repro from #13604
 
 class A<T> {
 >A : A<T>
+>T : T
 
 	props: T & { foo: string };
 >props : T & { foo: string; }
@@= skipped -33, +35 lines =@@
 
 class Form<T> {
 >Form : Form<T>
+>T : T
 
     private childFormFactories: {[K in keyof T]: (v: T[K]) => Form<T[K]>}
->childFormFactories : { [K in keyof T]: (v: T[K]) => Form<T[K]>; }
+>childFormFactories : { [K in keyof T]: (v: T[K]) => Form<T[K]> }
+>K : K
 >v : T[K]
 
     public set<K extends keyof T>(prop: K, value: T[K]) {
 >set : <K extends keyof T>(prop: K, value: T[K]) => void
+>K : K
 >prop : K
 >value : T[K]
 
         this.childFormFactories[prop](value)
 >this.childFormFactories[prop](value) : Form<T[K]>
->this.childFormFactories[prop] : { [K_1 in keyof T]: (v: T[K_1]) => Form<T[K_1]>; }[K]
->this.childFormFactories : { [K_1 in keyof T]: (v: T[K_1]) => Form<T[K_1]>; }
+>this.childFormFactories[prop] : { [K in keyof T]: (v: T[K]) => Form<T[K]> }[K]
+>this.childFormFactories : { [K in keyof T]: (v: T[K]) => Form<T[K]> }
 >this : this
->childFormFactories : { [K_1 in keyof T]: (v: T[K_1]) => Form<T[K_1]>; }
+>childFormFactories : { [K in keyof T]: (v: T[K]) => Form<T[K]> }
 >prop : K
 >value : T[K]
     }
@@= skipped -25, +28 lines =@@
 
 class SampleClass<P> {
 >SampleClass : SampleClass<P>
+>P : P
 
     public props: Readonly<P>;
 >props : Readonly<P>
@@= skipped -13, +14 lines =@@
 >this : this
 >props : Readonly<P>
 >Object.freeze(props) : Readonly<P>
->Object.freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
+>Object.freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | object | null | undefined; }, U extends string | number | bigint | symbol | boolean>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
 >Object : ObjectConstructor
->freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
+>freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | object | null | undefined; }, U extends string | number | bigint | symbol | boolean>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
 >props : P
     }
 }
 
 interface Foo {
+>Foo : Foo
+
     foo: string;
 >foo : string
 }
 
 declare function merge<T, U>(obj1: T, obj2: U): T & U;
 >merge : <T, U>(obj1: T, obj2: U) => T & U
+>T : T
+>U : U
 >obj1 : T
 >obj2 : U
 
 class AnotherSampleClass<T> extends SampleClass<T & Foo> {
 >AnotherSampleClass : AnotherSampleClass<T>
+>T : T
 >SampleClass : SampleClass<T & Foo>
 
     constructor(props: T) {
@@= skipped -34, +39 lines =@@
 >super(merge(props, foo)) : void
 >super : typeof SampleClass
 >merge(props, foo) : T & Foo
->merge : <T_1, U>(obj1: T_1, obj2: U) => T_1 & U
+>merge : <T, U>(obj1: T, obj2: U) => T & U
 >props : T
 >foo : Foo
     }
@@= skipped -10, +10 lines =@@
 
         this.props.foo.concat;
 >this.props.foo.concat : (...strings: string[]) => string
->this.props.foo : (T & Foo)["foo"]
+>this.props.foo : T & Foo["foo"]
 >this.props : Readonly<T & Foo>
 >this : this
 >props : Readonly<T & Foo>
->foo : (T & Foo)["foo"]
+>foo : T & Foo["foo"]
 >concat : (...strings: string[]) => string
     }
 }
@@= skipped -16, +16 lines =@@
 // Positive repro from #17166
 function f3<T, K extends Extract<keyof T, string>>(t: T, k: K, tk: T[K]): void {
 >f3 : <T, K extends Extract<keyof T, string>>(t: T, k: K, tk: T[K]) => void
+>T : T
+>K : K
 >t : T
 >k : K
 >tk : T[K]
@@= skipped -25, +27 lines =@@
 // # 21185
 type Predicates<TaggedRecord> = {
 >Predicates : Predicates<TaggedRecord>
+>TaggedRecord : TaggedRecord
 
   [T in keyof TaggedRecord]: (variant: TaggedRecord[keyof TaggedRecord]) => variant is TaggedRecord[T]
+>T : T
 >variant : TaggedRecord[keyof TaggedRecord]
 }
 
@@= skipped -9, +11 lines =@@
 
 type Example<T extends { [K in keyof T]: { prop: any } }> = { [K in keyof T]: T[K]["prop"] };
 >Example : Example<T>
+>T : T
+>K : K
 >prop : any
+>K : K
 
 type Result = Example<{ a: { prop: string }; b: { prop: number } }>;
 >Result : Example<{ a: { prop: string; }; b: { prop: number; }; }>
@@= skipped -11, +14 lines =@@
 
 type Helper2<T> = { [K in keyof T]: Extract<T[K], { prop: any }> };
 >Helper2 : Helper2<T>
+>T : T
+>K : K
 >prop : any
 
 type Example2<T> = { [K in keyof Helper2<T>]: Helper2<T>[K]["prop"] };
 >Example2 : Example2<T>
+>T : T
+>K : K
 
 type Result2 = Example2<{ 1: { prop: string }; 2: { prop: number } }>;
 >Result2 : Example2<{ 1: { prop: string; }; 2: { prop: number; }; }>
@@= skipped -16, +20 lines =@@
 
 type DBBoolTable<K extends string> = { [k in K]: 0 | 1 } 
 >DBBoolTable : DBBoolTable<K>
+>K : K
+>k : k
 
 enum Flag {
 >Flag : Flag
@@= skipped -15, +17 lines =@@
 
 type SimpleDBRecord<Flag extends string> = { staticField: number } & DBBoolTable<Flag>
 >SimpleDBRecord : SimpleDBRecord<Flag>
+>Flag : Flag
 >staticField : number
 
 function getFlagsFromSimpleRecord<Flag extends string>(record: SimpleDBRecord<Flag>, flags: Flag[]) {
 >getFlagsFromSimpleRecord : <Flag extends string>(record: SimpleDBRecord<Flag>, flags: Flag[]) => SimpleDBRecord<Flag>[Flag]
+>Flag : Flag
 >record : SimpleDBRecord<Flag>
 >flags : Flag[]
 
@@= skipped -17, +19 lines =@@
 
 type DynamicDBRecord<Flag extends string> = ({ dynamicField: number } | { dynamicField: string }) & DBBoolTable<Flag>
 >DynamicDBRecord : DynamicDBRecord<Flag>
+>Flag : Flag
 >dynamicField : number
 >dynamicField : string
 
 function getFlagsFromDynamicRecord<Flag extends string>(record: DynamicDBRecord<Flag>, flags: Flag[]) {
 >getFlagsFromDynamicRecord : <Flag extends string>(record: DynamicDBRecord<Flag>, flags: Flag[]) => DynamicDBRecord<Flag>[Flag]
+>Flag : Flag
 >record : DynamicDBRecord<Flag>
 >flags : Flag[]
 
@@= skipped -19, +21 lines =@@
 // Repro from #21368
 
 interface I {
+>I : I
+
     foo: string;
 >foo : string
 }
 
 declare function take<T>(p: T): void;
 >take : <T>(p: T) => void
+>T : T
 >p : T
 
 function fn<T extends I, K extends keyof T>(o: T, k: K) {
 >fn : <T extends I, K extends keyof T>(o: T, k: K) => void
+>T : T
+>K : K
 >o : T
 >k : K
 
     take<{} | null | undefined>(o[k]);
 >take<{} | null | undefined>(o[k]) : void
->take : <T_1>(p: T_1) => void
+>take : <T>(p: T) => void
 >o[k] : T[K]
 >o : T
 >k : K
 
     take<any>(o[k]);
 >take<any>(o[k]) : void
->take : <T_1>(p: T_1) => void
+>take : <T>(p: T) => void
 >o[k] : T[K]
 >o : T
 >k : K
@@= skipped -32, +37 lines =@@
 
 class Unbounded<T> {
 >Unbounded : Unbounded<T>
+>T : T
 
     foo(x: T[keyof T]) {
 >foo : (x: T[keyof T]) => void
@@= skipped -14, +15 lines =@@
 // Repro from #23940
 
 interface I7 {
+>I7 : I7
+
     x: any;
 >x : any
 }
 type Foo7<T extends number> = T;
 >Foo7 : T
+>T : T
 
 declare function f7<K extends keyof I7>(type: K): Foo7<I7[K]>;
->f7 : <K extends keyof I7>(type: K) => Foo7<I7[K]>
+>f7 : <K extends "x">(type: K) => I7[K]
+>K : K
 >type : K
 
 // Repro from #21770
 
 type Dict<T extends string> = { [key in T]: number };
 >Dict : Dict<T>
+>T : T
+>key : key
 
 type DictDict<V extends string, T extends string> = { [key in V]: Dict<T> };
 >DictDict : DictDict<V, T>
+>V : V
+>T : T
+>key : key
 
 function ff1<V extends string, T extends string>(dd: DictDict<V, T>, k1: V, k2: T): number {
 >ff1 : <V extends string, T extends string>(dd: DictDict<V, T>, k1: V, k2: T) => number
+>V : V
+>T : T
 >dd : DictDict<V, T>
 >k1 : V
 >k2 : T
@@= skipped -34, +45 lines =@@
 
 function ff2<V extends string, T extends string>(dd: DictDict<V, T>, k1: V, k2: T): number {
 >ff2 : <V extends string, T extends string>(dd: DictDict<V, T>, k1: V, k2: T) => number
+>V : V
+>T : T
 >dd : DictDict<V, T>
 >k1 : V
 >k2 : T
@@= skipped -19, +21 lines =@@
 // Repro from #26409
 
 const cf1 = <T extends { [P in K]: string; } & { cool: string; }, K extends keyof T>(t: T, k: K) =>
->cf1 : <T extends { [P in K]: string; } & { cool: string; }, K extends keyof T>(t: T, k: K) => void
-><T extends { [P in K]: string; } & { cool: string; }, K extends keyof T>(t: T, k: K) =>{    const s: string = t[k];    t.cool;} : <T extends { [P in K]: string; } & { cool: string; }, K extends keyof T>(t: T, k: K) => void
+>cf1 : <T extends { [P in K]: string } & { cool: string; }, K extends keyof T>(t: T, k: K) => void
+><T extends { [P in K]: string; } & { cool: string; }, K extends keyof T>(t: T, k: K) =>{    const s: string = t[k];    t.cool;} : <T extends { [P in K]: string } & { cool: string; }, K extends keyof T>(t: T, k: K) => void
+>T : T
+>P : P
 >cool : string
+>K : K
 >t : T
 >k : K
 {
@@= skipped -20, +23 lines =@@
 };
 
 const cf2 = <T extends { [P in K | "cool"]: string; }, K extends keyof T>(t: T, k: K) =>
->cf2 : <T extends { [P in K | "cool"]: string; }, K extends keyof T>(t: T, k: K) => void
-><T extends { [P in K | "cool"]: string; }, K extends keyof T>(t: T, k: K) =>{    const s: string = t[k];    t.cool;} : <T extends { [P in K | "cool"]: string; }, K extends keyof T>(t: T, k: K) => void
+>cf2 : <T extends { [P in "cool" | K]: string }, K extends keyof T>(t: T, k: K) => void
+><T extends { [P in K | "cool"]: string; }, K extends keyof T>(t: T, k: K) =>{    const s: string = t[k];    t.cool;} : <T extends { [P in "cool" | K]: string }, K extends keyof T>(t: T, k: K) => void
+>T : T
+>P : P
+>K : K
 >t : T
 >k : K
 {
