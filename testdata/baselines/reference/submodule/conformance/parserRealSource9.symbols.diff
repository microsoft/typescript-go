--- old.parserRealSource9.symbols
+++ new.parserRealSource9.symbols
@@= skipped -12, +12 lines =@@
 >Binder : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
 
         constructor (public checker: TypeChecker) { }
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >TypeChecker : Symbol(TypeChecker)
 
         public resolveBaseTypeLinks(typeLinks: TypeLink[], scope: SymbolScope) {
->resolveBaseTypeLinks : Symbol(Binder.resolveBaseTypeLinks, Decl(parserRealSource9.ts, 7, 53))
+>resolveBaseTypeLinks : Symbol(resolveBaseTypeLinks, Decl(parserRealSource9.ts, 7, 53))
 >typeLinks : Symbol(typeLinks, Decl(parserRealSource9.ts, 8, 36))
 >TypeLink : Symbol(TypeLink)
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 8, 58))
@@= skipped -23, +23 lines =@@
                 for (var i = 0, len = typeLinks.length; i < len; i++) {
 >i : Symbol(i, Decl(parserRealSource9.ts, 12, 24))
 >len : Symbol(len, Decl(parserRealSource9.ts, 12, 31))
->typeLinks.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>typeLinks.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >typeLinks : Symbol(typeLinks, Decl(parserRealSource9.ts, 8, 36))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >i : Symbol(i, Decl(parserRealSource9.ts, 12, 24))
 >len : Symbol(len, Decl(parserRealSource9.ts, 12, 31))
 >i : Symbol(i, Decl(parserRealSource9.ts, 12, 24))
@@= skipped -13, +13 lines =@@
 >i : Symbol(i, Decl(parserRealSource9.ts, 12, 24))
 
                     this.checker.resolvingBases = true;
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 
                     this.checker.resolveTypeLink(scope, typeLink, true);
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 8, 58))
 >typeLink : Symbol(typeLink, Decl(parserRealSource9.ts, 13, 23))
 
                     this.checker.resolvingBases = false;
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 
                     if (typeLink.type.isClass()) {
 >typeLink : Symbol(typeLink, Decl(parserRealSource9.ts, 13, 23))
@@= skipped -37, +37 lines =@@
         }
 
         public resolveBases(scope: SymbolScope, type: Type) {
->resolveBases : Symbol(Binder.resolveBases, Decl(parserRealSource9.ts, 26, 9))
+>resolveBases : Symbol(resolveBases, Decl(parserRealSource9.ts, 26, 9))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 28, 28))
 >SymbolScope : Symbol(SymbolScope)
 >type : Symbol(type, Decl(parserRealSource9.ts, 28, 47))
@@= skipped -8, +8 lines =@@
 
             type.extendsList = this.resolveBaseTypeLinks(type.extendsTypeLinks, scope);
 >type : Symbol(type, Decl(parserRealSource9.ts, 28, 47))
->this.resolveBaseTypeLinks : Symbol(Binder.resolveBaseTypeLinks, Decl(parserRealSource9.ts, 7, 53))
+>this.resolveBaseTypeLinks : Symbol(resolveBaseTypeLinks, Decl(parserRealSource9.ts, 7, 53))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->resolveBaseTypeLinks : Symbol(Binder.resolveBaseTypeLinks, Decl(parserRealSource9.ts, 7, 53))
+>resolveBaseTypeLinks : Symbol(resolveBaseTypeLinks, Decl(parserRealSource9.ts, 7, 53))
 >type : Symbol(type, Decl(parserRealSource9.ts, 28, 47))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 28, 28))
 
@@= skipped -28, +28 lines =@@
                 if (type.extendsList[i] != this.checker.anyType) {
 >type : Symbol(type, Decl(parserRealSource9.ts, 28, 47))
 >i : Symbol(i, Decl(parserRealSource9.ts, 31, 15))
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 
                     if (derivedIsClass) {
 >derivedIsClass : Symbol(derivedIsClass, Decl(parserRealSource9.ts, 32, 15))
@@= skipped -11, +11 lines =@@
 >baseIsClass : Symbol(baseIsClass, Decl(parserRealSource9.ts, 34, 19))
 
                             this.checker.errorReporter.simpleErrorFromSym(type.symbol,
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >type : Symbol(type, Decl(parserRealSource9.ts, 28, 47))
 
                                                                      "A export class may only extend other classes, " + type.extendsList[i].symbol.fullName() + " is an interface.");
@@= skipped -15, +15 lines =@@
 >baseIsClass : Symbol(baseIsClass, Decl(parserRealSource9.ts, 34, 19))
 
                             this.checker.errorReporter.simpleErrorFromSym(type.symbol,
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >type : Symbol(type, Decl(parserRealSource9.ts, 28, 47))
 
                                                                      "An interface may only extend other interfaces, " + type.extendsList[i].symbol.fullName() + " is a class.");
@@= skipped -15, +15 lines =@@
 
             type.implementsList = this.resolveBaseTypeLinks(type.implementsTypeLinks, scope);
 >type : Symbol(type, Decl(parserRealSource9.ts, 28, 47))
->this.resolveBaseTypeLinks : Symbol(Binder.resolveBaseTypeLinks, Decl(parserRealSource9.ts, 7, 53))
+>this.resolveBaseTypeLinks : Symbol(resolveBaseTypeLinks, Decl(parserRealSource9.ts, 7, 53))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->resolveBaseTypeLinks : Symbol(Binder.resolveBaseTypeLinks, Decl(parserRealSource9.ts, 7, 53))
+>resolveBaseTypeLinks : Symbol(resolveBaseTypeLinks, Decl(parserRealSource9.ts, 7, 53))
 >type : Symbol(type, Decl(parserRealSource9.ts, 28, 47))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 28, 28))
 
@@= skipped -29, +29 lines =@@
 >derivedIsClass : Symbol(derivedIsClass, Decl(parserRealSource9.ts, 32, 15))
 
                             this.checker.errorReporter.simpleErrorFromSym(type.symbol,
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >type : Symbol(type, Decl(parserRealSource9.ts, 28, 47))
 
                                                                      "A class may only implement an interface; " + iface.symbol.fullName() + " is a class.");
@@= skipped -14, +14 lines =@@
         }
 
         public resolveSignatureGroup(signatureGroup: SignatureGroup, scope: SymbolScope, instanceType: Type) {
->resolveSignatureGroup : Symbol(Binder.resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
+>resolveSignatureGroup : Symbol(resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
 >signatureGroup : Symbol(signatureGroup, Decl(parserRealSource9.ts, 66, 37))
 >SignatureGroup : Symbol(SignatureGroup)
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 66, 68))
@@= skipped -34, +34 lines =@@
                 }
                 else {
                     this.checker.resolveTypeLink(scope, signature.returnType, supplyVar);
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 66, 68))
 >signature : Symbol(signature, Decl(parserRealSource9.ts, 69, 19))
 >supplyVar : Symbol(supplyVar, Decl(parserRealSource9.ts, 67, 15))
@@= skipped -18, +18 lines =@@
 >j : Symbol(j, Decl(parserRealSource9.ts, 77, 24))
 
                     this.bindSymbol(scope, signature.parameters[j]);
->this.bindSymbol : Symbol(Binder.bindSymbol, Decl(parserRealSource9.ts, 142, 9))
+>this.bindSymbol : Symbol(bindSymbol, Decl(parserRealSource9.ts, 142, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->bindSymbol : Symbol(Binder.bindSymbol, Decl(parserRealSource9.ts, 142, 9))
+>bindSymbol : Symbol(bindSymbol, Decl(parserRealSource9.ts, 142, 9))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 66, 68))
 >signature : Symbol(signature, Decl(parserRealSource9.ts, 69, 19))
 >j : Symbol(j, Decl(parserRealSource9.ts, 77, 24))
@@= skipped -25, +25 lines =@@
 >lastParam : Symbol(lastParam, Decl(parserRealSource9.ts, 82, 23))
 
                         this.checker.errorReporter.simpleErrorFromSym(lastParam,
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >lastParam : Symbol(lastParam, Decl(parserRealSource9.ts, 82, 23))
 
                                                                  "... parameter must have array type");
                         lastParam.parameter.typeLink.type = this.checker.makeArrayType(lastParam.parameter.typeLink.type);
 >lastParam : Symbol(lastParam, Decl(parserRealSource9.ts, 82, 23))
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >lastParam : Symbol(lastParam, Decl(parserRealSource9.ts, 82, 23))
                     }
                 }
@@= skipped -18, +18 lines =@@
         }
 
         public bindType(scope: SymbolScope, type: Type, instanceType: Type): void {
->bindType : Symbol(Binder.bindType, Decl(parserRealSource9.ts, 91, 9))
+>bindType : Symbol(bindType, Decl(parserRealSource9.ts, 91, 9))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 93, 24))
 >SymbolScope : Symbol(SymbolScope)
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
@@= skipped -12, +12 lines =@@
 >instanceType : Symbol(instanceType, Decl(parserRealSource9.ts, 93, 55))
 
                 this.bindType(scope, instanceType, null);
->this.bindType : Symbol(Binder.bindType, Decl(parserRealSource9.ts, 91, 9))
+>this.bindType : Symbol(bindType, Decl(parserRealSource9.ts, 91, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->bindType : Symbol(Binder.bindType, Decl(parserRealSource9.ts, 91, 9))
+>bindType : Symbol(bindType, Decl(parserRealSource9.ts, 91, 9))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 93, 24))
 >instanceType : Symbol(instanceType, Decl(parserRealSource9.ts, 93, 55))
             }
@@= skipped -39, +39 lines =@@
 
                 var prevCurrentModDecl = this.checker.currentModDecl;
 >prevCurrentModDecl : Symbol(prevCurrentModDecl, Decl(parserRealSource9.ts, 104, 19))
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 
                 var prevBindStatus = this.checker.inBind;
 >prevBindStatus : Symbol(prevBindStatus, Decl(parserRealSource9.ts, 105, 19))
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 
                 agg.addParentScope(memberScope);
 >agg : Symbol(agg, Decl(parserRealSource9.ts, 103, 19))
@@= skipped -22, +22 lines =@@
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
 
                     this.checker.currentModDecl = <ModuleDeclaration>type.symbol.declAST;
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >ModuleDeclaration : Symbol(ModuleDeclaration)
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
 
                     this.checker.inBind = true;
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
                 }
                 if (members) {
 >members : Symbol(members, Decl(parserRealSource9.ts, 98, 19))
 
                     this.bind(agg, type.members.allMembers); // REVIEW: Should only be getting exported types?
->this.bind : Symbol(Binder.bind, Decl(parserRealSource9.ts, 197, 9))
+>this.bind : Symbol(bind, Decl(parserRealSource9.ts, 197, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->bind : Symbol(Binder.bind, Decl(parserRealSource9.ts, 197, 9))
+>bind : Symbol(bind, Decl(parserRealSource9.ts, 197, 9))
 >agg : Symbol(agg, Decl(parserRealSource9.ts, 103, 19))
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
                 }
@@= skipped -25, +25 lines =@@
 >typeMembers : Symbol(typeMembers, Decl(parserRealSource9.ts, 100, 19))
 
                     this.bind(agg, typeMembers.allMembers);
->this.bind : Symbol(Binder.bind, Decl(parserRealSource9.ts, 197, 9))
+>this.bind : Symbol(bind, Decl(parserRealSource9.ts, 197, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->bind : Symbol(Binder.bind, Decl(parserRealSource9.ts, 197, 9))
+>bind : Symbol(bind, Decl(parserRealSource9.ts, 197, 9))
 >agg : Symbol(agg, Decl(parserRealSource9.ts, 103, 19))
 >typeMembers : Symbol(typeMembers, Decl(parserRealSource9.ts, 100, 19))
                 }
@@= skipped -10, +10 lines =@@
 >ambientMembers : Symbol(ambientMembers, Decl(parserRealSource9.ts, 99, 19))
 
                     this.bind(agg, ambientMembers.allMembers);
->this.bind : Symbol(Binder.bind, Decl(parserRealSource9.ts, 197, 9))
+>this.bind : Symbol(bind, Decl(parserRealSource9.ts, 197, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->bind : Symbol(Binder.bind, Decl(parserRealSource9.ts, 197, 9))
+>bind : Symbol(bind, Decl(parserRealSource9.ts, 197, 9))
 >agg : Symbol(agg, Decl(parserRealSource9.ts, 103, 19))
 >ambientMembers : Symbol(ambientMembers, Decl(parserRealSource9.ts, 99, 19))
                 }
@@= skipped -10, +10 lines =@@
 >ambientTypeMembers : Symbol(ambientTypeMembers, Decl(parserRealSource9.ts, 101, 19))
 
                     this.bind(agg, ambientTypeMembers.allMembers);
->this.bind : Symbol(Binder.bind, Decl(parserRealSource9.ts, 197, 9))
+>this.bind : Symbol(bind, Decl(parserRealSource9.ts, 197, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->bind : Symbol(Binder.bind, Decl(parserRealSource9.ts, 197, 9))
+>bind : Symbol(bind, Decl(parserRealSource9.ts, 197, 9))
 >agg : Symbol(agg, Decl(parserRealSource9.ts, 103, 19))
 >ambientTypeMembers : Symbol(ambientTypeMembers, Decl(parserRealSource9.ts, 101, 19))
                 }
                 this.checker.currentModDecl = prevCurrentModDecl;
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >prevCurrentModDecl : Symbol(prevCurrentModDecl, Decl(parserRealSource9.ts, 104, 19))
 
                 this.checker.inBind = prevBindStatus;
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >prevBindStatus : Symbol(prevBindStatus, Decl(parserRealSource9.ts, 105, 19))
             }
             if (type.extendsTypeLinks) {
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
 
                 this.resolveBases(scope, type);
->this.resolveBases : Symbol(Binder.resolveBases, Decl(parserRealSource9.ts, 26, 9))
+>this.resolveBases : Symbol(resolveBases, Decl(parserRealSource9.ts, 26, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->resolveBases : Symbol(Binder.resolveBases, Decl(parserRealSource9.ts, 26, 9))
+>resolveBases : Symbol(resolveBases, Decl(parserRealSource9.ts, 26, 9))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 93, 24))
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
             }
@@= skipped -32, +32 lines =@@
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
 
                 this.resolveSignatureGroup(type.construct, scope, instanceType);
->this.resolveSignatureGroup : Symbol(Binder.resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
+>this.resolveSignatureGroup : Symbol(resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->resolveSignatureGroup : Symbol(Binder.resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
+>resolveSignatureGroup : Symbol(resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 93, 24))
 >instanceType : Symbol(instanceType, Decl(parserRealSource9.ts, 93, 55))
@@= skipped -11, +11 lines =@@
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
 
                 this.resolveSignatureGroup(type.call, scope, null);
->this.resolveSignatureGroup : Symbol(Binder.resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
+>this.resolveSignatureGroup : Symbol(resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->resolveSignatureGroup : Symbol(Binder.resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
+>resolveSignatureGroup : Symbol(resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 93, 24))
             }
@@= skipped -10, +10 lines =@@
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
 
                 this.resolveSignatureGroup(type.index, scope, null);
->this.resolveSignatureGroup : Symbol(Binder.resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
+>this.resolveSignatureGroup : Symbol(resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->resolveSignatureGroup : Symbol(Binder.resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
+>resolveSignatureGroup : Symbol(resolveSignatureGroup, Decl(parserRealSource9.ts, 64, 9))
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 93, 24))
             }
@@= skipped -10, +10 lines =@@
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
 
                 this.bindType(scope, type.elementType, null);
->this.bindType : Symbol(Binder.bindType, Decl(parserRealSource9.ts, 91, 9))
+>this.bindType : Symbol(bindType, Decl(parserRealSource9.ts, 91, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->bindType : Symbol(Binder.bindType, Decl(parserRealSource9.ts, 91, 9))
+>bindType : Symbol(bindType, Decl(parserRealSource9.ts, 91, 9))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 93, 24))
 >type : Symbol(type, Decl(parserRealSource9.ts, 93, 43))
             }
         }
 
         public bindSymbol(scope: SymbolScope, symbol: Symbol) {
->bindSymbol : Symbol(Binder.bindSymbol, Decl(parserRealSource9.ts, 142, 9))
+>bindSymbol : Symbol(bindSymbol, Decl(parserRealSource9.ts, 142, 9))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 144, 26))
 >SymbolScope : Symbol(SymbolScope)
 >symbol : Symbol(symbol, Decl(parserRealSource9.ts, 144, 45))
@@= skipped -20, +20 lines =@@
 
                 var prevLocationInfo = this.checker.locationInfo;
 >prevLocationInfo : Symbol(prevLocationInfo, Decl(parserRealSource9.ts, 146, 19))
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 
                 if ((this.checker.units) && (symbol.unitIndex >= 0) && (symbol.unitIndex < this.checker.units.length)) {
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >symbol : Symbol(symbol, Decl(parserRealSource9.ts, 144, 45))
 >symbol : Symbol(symbol, Decl(parserRealSource9.ts, 144, 45))
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 
                     this.checker.locationInfo = this.checker.units[symbol.unitIndex];
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >symbol : Symbol(symbol, Decl(parserRealSource9.ts, 144, 45))
                 }
                 switch (symbol.kind()) {
@@= skipped -59, +59 lines =@@
 
                             var modSym = this.checker.findSymbolForDynamicModule(modPath, this.checker.locationInfo.filename, (id) => scope.find(id, false, true));
 >modSym : Symbol(modSym, Decl(parserRealSource9.ts, 167, 31))
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >modPath : Symbol(modPath, Decl(parserRealSource9.ts, 166, 31))
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >id : Symbol(id, Decl(parserRealSource9.ts, 167, 127))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 144, 26))
 >id : Symbol(id, Decl(parserRealSource9.ts, 167, 127))
@@= skipped -23, +23 lines =@@
                         if (typeSymbol.type && typeSymbol.type != this.checker.gloModType) {
 >typeSymbol : Symbol(typeSymbol, Decl(parserRealSource9.ts, 157, 27))
 >typeSymbol : Symbol(typeSymbol, Decl(parserRealSource9.ts, 157, 27))
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 
                             this.bindType(scope, typeSymbol.type, typeSymbol.instanceType);
->this.bindType : Symbol(Binder.bindType, Decl(parserRealSource9.ts, 91, 9))
+>this.bindType : Symbol(bindType, Decl(parserRealSource9.ts, 91, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->bindType : Symbol(Binder.bindType, Decl(parserRealSource9.ts, 91, 9))
+>bindType : Symbol(bindType, Decl(parserRealSource9.ts, 91, 9))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 144, 26))
 >typeSymbol : Symbol(typeSymbol, Decl(parserRealSource9.ts, 157, 27))
 >typeSymbol : Symbol(typeSymbol, Decl(parserRealSource9.ts, 157, 27))
@@= skipped -23, +23 lines =@@
 >i : Symbol(i, Decl(parserRealSource9.ts, 178, 40))
 
                                     this.bindType(scope, typeSymbol.expansions[i], typeSymbol.instanceType);
->this.bindType : Symbol(Binder.bindType, Decl(parserRealSource9.ts, 91, 9))
+>this.bindType : Symbol(bindType, Decl(parserRealSource9.ts, 91, 9))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->bindType : Symbol(Binder.bindType, Decl(parserRealSource9.ts, 91, 9))
+>bindType : Symbol(bindType, Decl(parserRealSource9.ts, 91, 9))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 144, 26))
 >typeSymbol : Symbol(typeSymbol, Decl(parserRealSource9.ts, 157, 27))
 >i : Symbol(i, Decl(parserRealSource9.ts, 178, 40))
@@= skipped -13, +13 lines =@@
                         break;
                     case SymbolKind.Field:
                         this.checker.resolveTypeLink(scope, (<FieldSymbol>symbol).field.typeLink,
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 144, 26))
 >FieldSymbol : Symbol(FieldSymbol)
 >symbol : Symbol(symbol, Decl(parserRealSource9.ts, 144, 45))
@@= skipped -11, +11 lines =@@
                         break;
                     case SymbolKind.Parameter:
                         this.checker.resolveTypeLink(scope,
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 144, 26))
 
                                                 (<ParameterSymbol>symbol).parameter.typeLink,
@@= skipped -13, +13 lines =@@
                         break;
                 }
                 this.checker.locationInfo = prevLocationInfo;
->this.checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>this.checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >this : Symbol(Binder, Decl(parserRealSource9.ts, 5, 19))
->checker : Symbol(Binder.checker, Decl(parserRealSource9.ts, 7, 21))
+>checker : Symbol(checker, Decl(parserRealSource9.ts, 7, 21))
 >prevLocationInfo : Symbol(prevLocationInfo, Decl(parserRealSource9.ts, 146, 19))
             }
             symbol.bound = true;
@@= skipped -10, +10 lines =@@
         }
 
         public bind(scope: SymbolScope, table: IHashTable) {
->bind : Symbol(Binder.bind, Decl(parserRealSource9.ts, 197, 9))
+>bind : Symbol(bind, Decl(parserRealSource9.ts, 197, 9))
 >scope : Symbol(scope, Decl(parserRealSource9.ts, 199, 20))
 >SymbolScope : Symbol(SymbolScope)
 >table : Symbol(table, Decl(parserRealSource9.ts, 199, 39))
