--- old.dynamicImportDefer(module=nodenext).types
+++ new.dynamicImportDefer(module=nodenext).types
@@= skipped -14, +14 lines =@@
 === b.ts ===
 import.defer("./a.js").then(ns => {
 >import.defer("./a.js").then(ns => {  ns.foo();}) : Promise<void>
->import.defer("./a.js").then : <TResult1 = { foo(): void; default: typeof import("a"); }, TResult2 = never>(onfulfilled?: (value: { foo(): void; default: typeof import("a"); }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
->import.defer("./a.js") : Promise<{ foo(): void; default: typeof import("a"); }>
+>import.defer("./a.js").then : <TResult1 = { foo(): void; default: typeof import("./a.js"); }, TResult2 = never>(onfulfilled?: (value: { foo(): void; default: typeof import("./a.js"); }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
+>import.defer("./a.js") : Promise<{ foo(): void; default: typeof import("./a.js"); }>
 >defer : any
 >"./a.js" : "./a.js"
->then : <TResult1 = { foo(): void; default: typeof import("a"); }, TResult2 = never>(onfulfilled?: (value: { foo(): void; default: typeof import("a"); }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
->ns => {  ns.foo();} : (ns: { foo(): void; default: typeof import("a"); }) => void
->ns : { foo(): void; default: typeof import("a"); }
+>then : <TResult1 = { foo(): void; default: typeof import("./a.js"); }, TResult2 = never>(onfulfilled?: (value: { foo(): void; default: typeof import("./a.js"); }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
+>ns => {  ns.foo();} : (ns: { foo(): void; default: typeof import("./a.js"); }) => void
+>ns : { foo(): void; default: typeof import("./a.js"); }

   ns.foo();
 >ns.foo() : void
 >ns.foo : () => void
->ns : { foo(): void; default: typeof import("a"); }
+>ns : { foo(): void; default: typeof import("./a.js"); }
 >foo : () => void

 });