--- old.typeGuardOfFormTypeOfNumber.types
+++ new.typeGuardOfFormTypeOfNumber.types
@@= skipped -43, +43 lines =@@
 //  - when false, removes the primitive type from the type of x.
 if (typeof strOrNum === "number") {
 >typeof strOrNum === "number" : boolean
->typeof strOrNum : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNum : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNum : string | number
 >"number" : "number"
 
@@= skipped -17, +17 lines =@@
 }
 if (typeof numOrBool === "number") {
 >typeof numOrBool === "number" : boolean
->typeof numOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof numOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >numOrBool : number | boolean
 >"number" : "number"
 
@@= skipped -16, +16 lines =@@
 }
 if (typeof strOrNumOrBool === "number") {
 >typeof strOrNumOrBool === "number" : boolean
->typeof strOrNumOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBool : string | number | boolean
 >"number" : "number"
 
@@= skipped -17, +17 lines =@@
 }
 if (typeof numOrC === "number") {
 >typeof numOrC === "number" : boolean
->typeof numOrC : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof numOrC : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >numOrC : number | C
 >"number" : "number"
 
@@= skipped -18, +18 lines =@@
 
 if (typeof strOrBool === "number") {
 >typeof strOrBool === "number" : boolean
->typeof strOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrBool : string | boolean
 >"number" : "number"
 
@@= skipped -19, +19 lines =@@
 //  - when false, narrows the type of x by typeof x === s when true.
 if (typeof strOrNum !== "number") {
 >typeof strOrNum !== "number" : boolean
->typeof strOrNum : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNum : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNum : string | number
 >"number" : "number"
 
@@= skipped -17, +17 lines =@@
 }
 if (typeof numOrBool !== "number") {
 >typeof numOrBool !== "number" : boolean
->typeof numOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof numOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >numOrBool : number | boolean
 >"number" : "number"
 
@@= skipped -16, +16 lines =@@
 }
 if (typeof strOrNumOrBool !== "number") {
 >typeof strOrNumOrBool !== "number" : boolean
->typeof strOrNumOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNumOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNumOrBool : string | number | boolean
 >"number" : "number"
 
@@= skipped -17, +17 lines =@@
 }
 if (typeof numOrC !== "number") {
 >typeof numOrC !== "number" : boolean
->typeof numOrC : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof numOrC : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >numOrC : number | C
 >"number" : "number"
 
@@= skipped -18, +18 lines =@@
 
 if (typeof strOrBool !== "number") {
 >typeof strOrBool !== "number" : boolean
->typeof strOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrBool : string | boolean
 >"number" : "number"
 
