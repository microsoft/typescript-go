fixSignatureCaching.ts(9,10): error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
fixSignatureCaching.ts(284,10): error TS2339: Property 'detectMobileBrowsers' does not exist on type '{}'.
fixSignatureCaching.ts(293,10): error TS2339: Property 'FALLBACK_PHONE' does not exist on type '{}'.
fixSignatureCaching.ts(294,10): error TS2339: Property 'FALLBACK_TABLET' does not exist on type '{}'.
fixSignatureCaching.ts(295,10): error TS2339: Property 'FALLBACK_MOBILE' does not exist on type '{}'.
fixSignatureCaching.ts(301,17): error TS2339: Property 'isArray' does not exist on type 'never'.
fixSignatureCaching.ts(330,74): error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
fixSignatureCaching.ts(369,10): error TS2339: Property 'findMatch' does not exist on type '{}'.
fixSignatureCaching.ts(387,10): error TS2339: Property 'findMatches' does not exist on type '{}'.
fixSignatureCaching.ts(407,10): error TS2339: Property 'getVersionStr' does not exist on type '{}'.
fixSignatureCaching.ts(408,26): error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
fixSignatureCaching.ts(431,10): error TS2339: Property 'getVersion' does not exist on type '{}'.
fixSignatureCaching.ts(432,28): error TS2339: Property 'getVersionStr' does not exist on type '{}'.
fixSignatureCaching.ts(433,31): error TS2339: Property 'prepareVersionNo' does not exist on type '{}'.
fixSignatureCaching.ts(443,10): error TS2339: Property 'prepareVersionNo' does not exist on type '{}'.
fixSignatureCaching.ts(458,10): error TS2339: Property 'isMobileFallback' does not exist on type '{}'.
fixSignatureCaching.ts(459,21): error TS2339: Property 'detectMobileBrowsers' does not exist on type '{}'.
fixSignatureCaching.ts(460,18): error TS2339: Property 'detectMobileBrowsers' does not exist on type '{}'.
fixSignatureCaching.ts(463,10): error TS2339: Property 'isTabletFallback' does not exist on type '{}'.
fixSignatureCaching.ts(464,21): error TS2339: Property 'detectMobileBrowsers' does not exist on type '{}'.
fixSignatureCaching.ts(467,10): error TS2339: Property 'prepareDetectionCache' does not exist on type '{}'.
fixSignatureCaching.ts(474,23): error TS2339: Property 'findMatch' does not exist on type '{}'.
fixSignatureCaching.ts(474,38): error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
fixSignatureCaching.ts(481,22): error TS2339: Property 'findMatch' does not exist on type '{}'.
fixSignatureCaching.ts(481,37): error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
fixSignatureCaching.ts(489,18): error TS2339: Property 'isMobileFallback' does not exist on type '{}'.
fixSignatureCaching.ts(492,37): error TS2339: Property 'FALLBACK_MOBILE' does not exist on type '{}'.
fixSignatureCaching.ts(495,51): error TS2339: Property 'FALLBACK_PHONE' does not exist on type '{}'.
fixSignatureCaching.ts(498,52): error TS2339: Property 'FALLBACK_TABLET' does not exist on type '{}'.
fixSignatureCaching.ts(501,25): error TS2339: Property 'isTabletFallback' does not exist on type '{}'.
fixSignatureCaching.ts(502,48): error TS2339: Property 'FALLBACK_TABLET' does not exist on type '{}'.
fixSignatureCaching.ts(511,10): error TS2339: Property 'mobileGrade' does not exist on type '{}'.
fixSignatureCaching.ts(636,10): error TS2339: Property 'detectOS' does not exist on type '{}'.
fixSignatureCaching.ts(637,21): error TS2339: Property 'findMatch' does not exist on type '{}'.
fixSignatureCaching.ts(637,36): error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
fixSignatureCaching.ts(638,18): error TS2339: Property 'findMatch' does not exist on type '{}'.
fixSignatureCaching.ts(638,33): error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
fixSignatureCaching.ts(641,10): error TS2339: Property 'getDeviceSmallerSide' does not exist on type '{}'.
fixSignatureCaching.ts(707,18): error TS2339: Property 'prepareDetectionCache' does not exist on type '{}'.
fixSignatureCaching.ts(737,18): error TS2339: Property 'prepareDetectionCache' does not exist on type '{}'.
fixSignatureCaching.ts(786,18): error TS2339: Property 'prepareDetectionCache' does not exist on type '{}'.
fixSignatureCaching.ts(808,46): error TS2339: Property 'findMatch' does not exist on type '{}'.
fixSignatureCaching.ts(808,61): error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
fixSignatureCaching.ts(831,47): error TS2339: Property 'findMatches' does not exist on type '{}'.
fixSignatureCaching.ts(831,64): error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
fixSignatureCaching.ts(848,39): error TS2339: Property 'detectOS' does not exist on type '{}'.
fixSignatureCaching.ts(872,25): error TS2339: Property 'getVersion' does not exist on type '{}'.
fixSignatureCaching.ts(893,25): error TS2339: Property 'getVersionStr' does not exist on type '{}'.
fixSignatureCaching.ts(915,36): error TS2339: Property 'findMatches' does not exist on type '{}'.
fixSignatureCaching.ts(915,53): error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
fixSignatureCaching.ts(955,42): error TS2339: Property 'mobileGrade' does not exist on type '{}'.
fixSignatureCaching.ts(964,57): error TS2339: Property 'getDeviceSmallerSide' does not exist on type '{}'.
fixSignatureCaching.ts(978,16): error TS2580: Cannot find name 'module'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node`.
fixSignatureCaching.ts(978,42): error TS2580: Cannot find name 'module'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node`.
fixSignatureCaching.ts(979,37): error TS2580: Cannot find name 'module'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node`.
fixSignatureCaching.ts(980,23): error TS2304: Cannot find name 'define'.
fixSignatureCaching.ts(980,48): error TS2304: Cannot find name 'define'.
fixSignatureCaching.ts(981,16): error TS2304: Cannot find name 'define'.
fixSignatureCaching.ts(983,44): error TS2339: Property 'MobileDetect' does not exist on type 'Window & { NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect, timeline?: AnimationTimeline): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[], options?: BlobPropertyBag): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string, name?: string): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[]): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[]): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[]): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[]): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number, y?: number, z?: number, w?: number): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit) => DOMPoint; }; SVGPoint: { new (x?: number, y?: number, z?: number, w?: number): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit) => DOMPoint; }; DOMPointReadOnly: { new (x?: number, y?: number, z?: number, w?: number): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit, p2?: DOMPointInit, p3?: DOMPointInit, p4?: DOMPointInit): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit) => DOMQuad; fromRect: (other?: DOMRectInit) => DOMQuad; }; DOMRect: { new (x?: number, y?: number, width?: number, height?: number): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit) => DOMRect; }; SVGRect: { new (x?: number, y?: number, width?: number, height?: number): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number, y?: number, width?: number, height?: number): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement, submitter?: HTMLElement): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean) => IDBKeyRange; lowerBound: (lower: any, open?: boolean) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number, settings?: ImageDataSettings): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element, keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeEffectOptions): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T>): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[]): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number; }): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit, init?: ResponseInit): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit) => Response; redirect: (url: string | URL, status?: number) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string): Text; prototype: Text; }; TextDecoder: { new (label?: string, options?: TextDecoderOptions): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string, options?: TextDecoderOptions): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL) => URL; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL) => URL; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[]): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string, options?: WebTransportErrorOptions): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string): CompileError; new (message?: string): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T]): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports): Instance; prototype: Instance; }; LinkError: { (message?: string): LinkError; new (message?: string): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string): RuntimeError; new (message?: string): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string) => HTMLAudioElement; Image: new (width?: number, height?: number) => HTMLImageElement; Option: new (text?: string, value?: string, defaultSelected?: boolean, selected?: boolean) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event; external: External; frameElement: Element; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any; ondeviceorientation: (ev: DeviceOrientationEvent) => any; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any; onorientationchange: (ev: Event) => any; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window; visualViewport: VisualViewport; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string) => CSSStyleDeclaration; getSelection: () => Selection; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL, target?: string, features?: string) => Window; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[]): void; (message: any, options?: WindowPostMessageOptions): void; }; print: () => void; prompt: (message?: string, _default?: string) => string; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any; onanimationcancel: (ev: AnimationEvent) => any; onanimationend: (ev: AnimationEvent) => any; onanimationiteration: (ev: AnimationEvent) => any; onanimationstart: (ev: AnimationEvent) => any; onauxclick: (ev: MouseEvent) => any; onbeforeinput: (ev: InputEvent) => any; onbeforetoggle: (ev: Event) => any; onblur: (ev: FocusEvent) => any; oncancel: (ev: Event) => any; oncanplay: (ev: Event) => any; oncanplaythrough: (ev: Event) => any; onchange: (ev: Event) => any; onclick: (ev: MouseEvent) => any; onclose: (ev: Event) => any; oncontextlost: (ev: Event) => any; oncontextmenu: (ev: MouseEvent) => any; oncontextrestored: (ev: Event) => any; oncopy: (ev: ClipboardEvent) => any; oncuechange: (ev: Event) => any; oncut: (ev: ClipboardEvent) => any; ondblclick: (ev: MouseEvent) => any; ondrag: (ev: DragEvent) => any; ondragend: (ev: DragEvent) => any; ondragenter: (ev: DragEvent) => any; ondragleave: (ev: DragEvent) => any; ondragover: (ev: DragEvent) => any; ondragstart: (ev: DragEvent) => any; ondrop: (ev: DragEvent) => any; ondurationchange: (ev: Event) => any; onemptied: (ev: Event) => any; onended: (ev: Event) => any; onerror: OnErrorEventHandlerNonNull; onfocus: (ev: FocusEvent) => any; onformdata: (ev: FormDataEvent) => any; ongotpointercapture: (ev: PointerEvent) => any; oninput: (ev: Event) => any; oninvalid: (ev: Event) => any; onkeydown: (ev: KeyboardEvent) => any; onkeypress: (ev: KeyboardEvent) => any; onkeyup: (ev: KeyboardEvent) => any; onload: (ev: Event) => any; onloadeddata: (ev: Event) => any; onloadedmetadata: (ev: Event) => any; onloadstart: (ev: Event) => any; onlostpointercapture: (ev: PointerEvent) => any; onmousedown: (ev: MouseEvent) => any; onmouseenter: (ev: MouseEvent) => any; onmouseleave: (ev: MouseEvent) => any; onmousemove: (ev: MouseEvent) => any; onmouseout: (ev: MouseEvent) => any; onmouseover: (ev: MouseEvent) => any; onmouseup: (ev: MouseEvent) => any; onpaste: (ev: ClipboardEvent) => any; onpause: (ev: Event) => any; onplay: (ev: Event) => any; onplaying: (ev: Event) => any; onpointercancel: (ev: PointerEvent) => any; onpointerdown: (ev: PointerEvent) => any; onpointerenter: (ev: PointerEvent) => any; onpointerleave: (ev: PointerEvent) => any; onpointermove: (ev: PointerEvent) => any; onpointerout: (ev: PointerEvent) => any; onpointerover: (ev: PointerEvent) => any; onpointerup: (ev: PointerEvent) => any; onprogress: (ev: ProgressEvent<EventTarget>) => any; onratechange: (ev: Event) => any; onreset: (ev: Event) => any; onresize: (ev: UIEvent) => any; onscroll: (ev: Event) => any; onscrollend: (ev: Event) => any; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any; onseeked: (ev: Event) => any; onseeking: (ev: Event) => any; onselect: (ev: Event) => any; onselectionchange: (ev: Event) => any; onselectstart: (ev: Event) => any; onslotchange: (ev: Event) => any; onstalled: (ev: Event) => any; onsubmit: (ev: SubmitEvent) => any; onsuspend: (ev: Event) => any; ontimeupdate: (ev: Event) => any; ontoggle: (ev: Event) => any; ontouchcancel: (ev: TouchEvent) => any; ontouchend: (ev: TouchEvent) => any; ontouchmove: (ev: TouchEvent) => any; ontouchstart: (ev: TouchEvent) => any; ontransitioncancel: (ev: TransitionEvent) => any; ontransitionend: (ev: TransitionEvent) => any; ontransitionrun: (ev: TransitionEvent) => any; ontransitionstart: (ev: TransitionEvent) => any; onvolumechange: (ev: Event) => any; onwaiting: (ev: Event) => any; onwebkitanimationend: (ev: Event) => any; onwebkitanimationiteration: (ev: Event) => any; onwebkitanimationstart: (ev: Event) => any; onwebkittransitionend: (ev: Event) => any; onwheel: (ev: WheelEvent) => any; onafterprint: (ev: Event) => any; onbeforeprint: (ev: Event) => any; onbeforeunload: (ev: BeforeUnloadEvent) => any; ongamepadconnected: (ev: GamepadEvent) => any; ongamepaddisconnected: (ev: GamepadEvent) => any; onhashchange: (ev: HashChangeEvent) => any; onlanguagechange: (ev: Event) => any; onmessage: (ev: MessageEvent<any>) => any; onmessageerror: (ev: MessageEvent<any>) => any; onoffline: (ev: Event) => any; ononline: (ev: Event) => any; onpagehide: (ev: PageTransitionEvent) => any; onpageshow: (ev: PageTransitionEvent) => any; onpopstate: (ev: PopStateEvent) => any; onrejectionhandled: (ev: PromiseRejectionEvent) => any; onstorage: (ev: StorageEvent) => any; onunhandledrejection: (ev: PromiseRejectionEvent) => any; onunload: (ev: Event) => any; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number) => void; clearTimeout: (id: number) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string, strPrefix?: string) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string, strPrefix?: string) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; readonly globalThis: ???; undefined: undefined; }'.


==== fixSignatureCaching.ts (59 errors) ====
    // Repro from #10697
    
    (function (define, undefined) {
    define(function () {
        'use strict';
    
        var impl = {};
    
        impl.mobileDetectRules = {
             ~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
        "phones": {
            "iPhone": "\\biPhone\\b|\\biPod\\b",
            "BlackBerry": "BlackBerry|\\bBB10\\b|rim[0-9]+",
            "HTC": "HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m",
            "Nexus": "Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 6",
            "Dell": "Dell.*Streak|Dell.*Aero|Dell.*Venue|DELL.*Venue Pro|Dell Flash|Dell Smoke|Dell Mini 3iX|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",
            "Motorola": "Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b",
            "Samsung": "Samsung|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F",
            "LG": "\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323)",
            "Sony": "SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533",
            "Asus": "Asus.*Galaxy|PadFone.*Mobile",
            "NokiaLumia": "Lumia [0-9]{3,4}",
            "Micromax": "Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",
            "Palm": "PalmSource|Palm",
            "Vertu": "Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",
            "Pantech": "PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",
            "Fly": "IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",
            "Wiko": "KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",
            "iMobile": "i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",
            "SimValley": "\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",
            "Wolfgang": "AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",
            "Alcatel": "Alcatel",
            "Nintendo": "Nintendo 3DS",
            "Amoi": "Amoi",
            "INQ": "INQ",
            "GenericPhone": "Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"
        },
        "tablets": {
            "iPad": "iPad|iPad.*Mobile",
            "NexusTablet": "Android.*Nexus[\\s]+(7|9|10)",
            "SamsungTablet": "SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561",
            "Kindle": "Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI)\\b",
            "SurfaceTablet": "Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",
            "HPTablet": "HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",
            "AsusTablet": "^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K017 |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA",
            "BlackBerryTablet": "PlayBook|RIM Tablet",
            "HTCtablet": "HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",
            "MotorolaTablet": "xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",
            "NookTablet": "Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",
            "AcerTablet": "Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20",
            "ToshibaTablet": "Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",
            "LGTablet": "\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",
            "FujitsuTablet": "Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",
            "PrestigioTablet": "PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",
            "LenovoTablet": "Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)",
            "DellTablet": "Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",
            "YarvikTablet": "Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",
            "MedionTablet": "Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",
            "ArnovaTablet": "AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",
            "IntensoTablet": "INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",
            "IRUTablet": "M702pro",
            "MegafonTablet": "MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",
            "EbodaTablet": "E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",
            "AllViewTablet": "Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",
            "ArchosTablet": "\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",
            "AinolTablet": "NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",
            "NokiaLumiaTablet": "Lumia 2520",
            "SonyTablet": "Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP612|SOT31",
            "PhilipsTablet": "\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",
            "CubeTablet": "Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",
            "CobyTablet": "MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",
            "MIDTablet": "M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",
            "MSITablet": "MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",
            "SMiTTablet": "Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",
            "RockChipTablet": "Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",
            "FlyTablet": "IQ310|Fly Vision",
            "bqTablet": "Android.*(bq)?.*(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris E10)|Maxwell.*Lite|Maxwell.*Plus",
            "HuaweiTablet": "MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim",
            "NecTablet": "\\bN-06D|\\bN-08D",
            "PantechTablet": "Pantech.*P4100",
            "BronchoTablet": "Broncho.*(N701|N708|N802|a710)",
            "VersusTablet": "TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",
            "ZyncTablet": "z1000|Z99 2G|z99|z930|z999|z990|z909|Z919|z900",
            "PositivoTablet": "TB07STA|TB10STA|TB07FTA|TB10FTA",
            "NabiTablet": "Android.*\\bNabi",
            "KoboTablet": "Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",
            "DanewTablet": "DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",
            "TexetTablet": "NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",
            "PlaystationTablet": "Playstation.*(Portable|Vita)",
            "TrekstorTablet": "ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",
            "PyleAudioTablet": "\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",
            "AdvanTablet": "Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",
            "DanyTechTablet": "Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",
            "GalapadTablet": "Android.*\\bG1\\b",
            "MicromaxTablet": "Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",
            "KarbonnTablet": "Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",
            "AllFineTablet": "Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",
            "PROSCANTablet": "\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",
            "YONESTablet": "BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",
            "ChangJiaTablet": "TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",
            "GUTablet": "TX-A1301|TX-M9002|Q702|kf026",
            "PointOfViewTablet": "TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",
            "OvermaxTablet": "OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)",
            "HCLTablet": "HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",
            "DPSTablet": "DPS Dream 9|DPS Dual 7",
            "VistureTablet": "V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",
            "CrestaTablet": "CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",
            "MediatekTablet": "\\bMT8125|MT8389|MT8135|MT8377\\b",
            "ConcordeTablet": "Concorde([ ]+)?Tab|ConCorde ReadMan",
            "GoCleverTablet": "GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",
            "ModecomTablet": "FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",
            "VoninoTablet": "\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",
            "ECSTablet": "V07OT2|TM105A|S10OT1|TR10CS1",
            "StorexTablet": "eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",
            "VodafoneTablet": "SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497",
            "EssentielBTablet": "Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",
            "RossMoorTablet": "RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",
            "iMobileTablet": "i-mobile i-note",
            "TolinoTablet": "tolino tab [0-9.]+|tolino shine",
            "AudioSonicTablet": "\\bC-22Q|T7-QC|T-17B|T-17P\\b",
            "AMPETablet": "Android.* A78 ",
            "SkkTablet": "Android.* (SKYPAD|PHOENIX|CYCLOPS)",
            "TecnoTablet": "TECNO P9",
            "JXDTablet": "Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",
            "iJoyTablet": "Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",
            "FX2Tablet": "FX2 PAD7|FX2 PAD10",
            "XoroTablet": "KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",
            "ViewsonicTablet": "ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",
            "OdysTablet": "LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",
            "CaptivaTablet": "CAPTIVA PAD",
            "IconbitTablet": "NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",
            "TeclastTablet": "T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",
            "OndaTablet": "\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+",
            "JaytechTablet": "TPC-PA762",
            "BlaupunktTablet": "Endeavour 800NG|Endeavour 1010",
            "DigmaTablet": "\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",
            "EvolioTablet": "ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",
            "LavaTablet": "QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",
            "AocTablet": "MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",
            "MpmanTablet": "MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",
            "CelkonTablet": "CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",
            "WolderTablet": "miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",
            "MiTablet": "\\bMI PAD\\b|\\bHM NOTE 1W\\b",
            "NibiruTablet": "Nibiru M1|Nibiru Jupiter One",
            "NexoTablet": "NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",
            "LeaderTablet": "TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",
            "UbislateTablet": "UbiSlate[\\s]?7C",
            "PocketBookTablet": "Pocketbook",
            "KocasoTablet": "\\b(TB-1207)\\b",
            "Hudl": "Hudl HT7S3|Hudl 2",
            "TelstraTablet": "T-Hub2",
            "GenericTablet": "Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bJolla\\b|\\bTP750\\b"
        },
        "oss": {
            "AndroidOS": "Android",
            "BlackBerryOS": "blackberry|\\bBB10\\b|rim tablet os",
            "PalmOS": "PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",
            "SymbianOS": "Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",
            "WindowsMobileOS": "Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Window Mobile|Windows Phone [0-9.]+|WCE;",
            "WindowsPhoneOS": "Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",
            "iOS": "\\biPhone.*Mobile|\\biPod|\\biPad",
            "MeeGoOS": "MeeGo",
            "MaemoOS": "Maemo",
            "JavaOS": "J2ME\/|\\bMIDP\\b|\\bCLDC\\b",
            "webOS": "webOS|hpwOS",
            "badaOS": "\\bBada\\b",
            "BREWOS": "BREW"
        },
        "uas": {
            "Vivaldi": "Vivaldi",
            "Chrome": "\\bCrMo\\b|CriOS|Android.*Chrome\/[.0-9]* (Mobile)?",
            "Dolfin": "\\bDolfin\\b",
            "Opera": "Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR\/[0-9.]+|Coast\/[0-9.]+",
            "Skyfire": "Skyfire",
            "Edge": "Mobile Safari\/[.0-9]* Edge",
            "IE": "IEMobile|MSIEMobile",
            "Firefox": "fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile",
            "Bolt": "bolt",
            "TeaShark": "teashark",
            "Blazer": "Blazer",
            "Safari": "Version.*Mobile.*Safari|Safari.*Mobile|MobileSafari",
            "Tizen": "Tizen",
            "UCBrowser": "UC.*Browser|UCWEB",
            "baiduboxapp": "baiduboxapp",
            "baidubrowser": "baidubrowser",
            "DiigoBrowser": "DiigoBrowser",
            "Puffin": "Puffin",
            "Mercury": "\\bMercury\\b",
            "ObigoBrowser": "Obigo",
            "NetFront": "NF-Browser",
            "GenericBrowser": "NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",
            "PaleMoon": "Android.*PaleMoon|Mobile.*PaleMoon"
        },
        "props": {
            "Mobile": "Mobile\/[VER]",
            "Build": "Build\/[VER]",
            "Version": "Version\/[VER]",
            "VendorID": "VendorID\/[VER]",
            "iPad": "iPad.*CPU[a-z ]+[VER]",
            "iPhone": "iPhone.*CPU[a-z ]+[VER]",
            "iPod": "iPod.*CPU[a-z ]+[VER]",
            "Kindle": "Kindle\/[VER]",
            "Chrome": [
                "Chrome\/[VER]",
                "CriOS\/[VER]",
                "CrMo\/[VER]"
            ],
            "Coast": [
                "Coast\/[VER]"
            ],
            "Dolfin": "Dolfin\/[VER]",
            "Firefox": "Firefox\/[VER]",
            "Fennec": "Fennec\/[VER]",
            "Edge": "Edge\/[VER]",
            "IE": [
                "IEMobile\/[VER];",
                "IEMobile [VER]",
                "MSIE [VER];",
                "Trident\/[0-9.]+;.*rv:[VER]"
            ],
            "NetFront": "NetFront\/[VER]",
            "NokiaBrowser": "NokiaBrowser\/[VER]",
            "Opera": [
                " OPR\/[VER]",
                "Opera Mini\/[VER]",
                "Version\/[VER]"
            ],
            "Opera Mini": "Opera Mini\/[VER]",
            "Opera Mobi": "Version\/[VER]",
            "UC Browser": "UC Browser[VER]",
            "MQQBrowser": "MQQBrowser\/[VER]",
            "MicroMessenger": "MicroMessenger\/[VER]",
            "baiduboxapp": "baiduboxapp\/[VER]",
            "baidubrowser": "baidubrowser\/[VER]",
            "Iron": "Iron\/[VER]",
            "Safari": [
                "Version\/[VER]",
                "Safari\/[VER]"
            ],
            "Skyfire": "Skyfire\/[VER]",
            "Tizen": "Tizen\/[VER]",
            "Webkit": "webkit[ \/][VER]",
            "PaleMoon": "PaleMoon\/[VER]",
            "Gecko": "Gecko\/[VER]",
            "Trident": "Trident\/[VER]",
            "Presto": "Presto\/[VER]",
            "Goanna": "Goanna\/[VER]",
            "iOS": " \\bi?OS\\b [VER][ ;]{1}",
            "Android": "Android [VER]",
            "BlackBerry": [
                "BlackBerry[\\w]+\/[VER]",
                "BlackBerry.*Version\/[VER]",
                "Version\/[VER]"
            ],
            "BREW": "BREW [VER]",
            "Java": "Java\/[VER]",
            "Windows Phone OS": [
                "Windows Phone OS [VER]",
                "Windows Phone [VER]"
            ],
            "Windows Phone": "Windows Phone [VER]",
            "Windows CE": "Windows CE\/[VER]",
            "Windows NT": "Windows NT [VER]",
            "Symbian": [
                "SymbianOS\/[VER]",
                "Symbian\/[VER]"
            ],
            "webOS": [
                "webOS\/[VER]",
                "hpwOS\/[VER];"
            ]
        },
        "utils": {
            "Bot": "Googlebot|facebookexternalhit|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom",
            "MobileBot": "Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker\/M1A1-R2D2",
            "DesktopMode": "WPDesktop",
            "TV": "SonyDTV|HbbTV",
            "WebKit": "(webkit)[ \/]([\\w.]+)",
            "Console": "\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|PLAYSTATION|Xbox)\\b",
            "Watch": "SM-V700"
        }
    };
    
        // following patterns come from http://detectmobilebrowsers.com/
        impl.detectMobileBrowsers = {
             ~~~~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'detectMobileBrowsers' does not exist on type '{}'.
            fullPattern: /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,
            shortPattern: /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,
            tabletPattern: /android|ipad|playbook|silk/i
        };
    
        var hasOwnProp = Object.prototype.hasOwnProperty,
            isArray;
    
        impl.FALLBACK_PHONE = 'UnknownPhone';
             ~~~~~~~~~~~~~~
!!! error TS2339: Property 'FALLBACK_PHONE' does not exist on type '{}'.
        impl.FALLBACK_TABLET = 'UnknownTablet';
             ~~~~~~~~~~~~~~~
!!! error TS2339: Property 'FALLBACK_TABLET' does not exist on type '{}'.
        impl.FALLBACK_MOBILE = 'UnknownMobile';
             ~~~~~~~~~~~~~~~
!!! error TS2339: Property 'FALLBACK_MOBILE' does not exist on type '{}'.
    
        isArray = ('isArray' in Array) ?
            Array.isArray : function (value) { return Object.prototype.toString.call(value) === '[object Array]'; };
        isArray = 'isArray' in Array
            ? function (value) { return Object.prototype.toString.call(value) === '[object Array]'; }
            : Array.isArray;
                    ~~~~~~~
!!! error TS2339: Property 'isArray' does not exist on type 'never'.
    
        function equalIC(a, b) {
            return a != null && b != null && a.toLowerCase() === b.toLowerCase();
        }
    
        function containsIC(array, value) {
            var valueLC, i, len = array.length;
            if (!len || !value) {
                return false;
            }
            valueLC = value.toLowerCase();
            for (i = 0; i < len; ++i) {
                if (valueLC === array[i].toLowerCase()) {
                    return true;
                }
            }
            return false;
        }
    
        function convertPropsToRegExp(object) {
            for (var key in object) {
                if (hasOwnProp.call(object, key)) {
                    object[key] = new RegExp(object[key], 'i');
                }
            }
        }
    
        (function init() {
            var key, values, value, i, len, verPos, mobileDetectRules = impl.mobileDetectRules;
                                                                             ~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
            for (key in mobileDetectRules.props) {
                if (hasOwnProp.call(mobileDetectRules.props, key)) {
                    values = mobileDetectRules.props[key];
                    if (!isArray(values)) {
                        values = [values];
                    }
                    len = values.length;
                    for (i = 0; i < len; ++i) {
                        value = values[i];
                        verPos = value.indexOf('[VER]');
                        if (verPos >= 0) {
                            value = value.substring(0, verPos) + '([\\w._\\+]+)' + value.substring(verPos + 5);
                        }
                        values[i] = new RegExp(value, 'i');
                    }
                    mobileDetectRules.props[key] = values;
                }
            }
            convertPropsToRegExp(mobileDetectRules.oss);
            convertPropsToRegExp(mobileDetectRules.phones);
            convertPropsToRegExp(mobileDetectRules.tablets);
            convertPropsToRegExp(mobileDetectRules.uas);
            convertPropsToRegExp(mobileDetectRules.utils);
    
            // copy some patterns to oss0 which are tested first (see issue#15)
            mobileDetectRules.oss0 = {
                WindowsPhoneOS: mobileDetectRules.oss.WindowsPhoneOS,
                WindowsMobileOS: mobileDetectRules.oss.WindowsMobileOS
            };
        }());
    
        /**
         * Test userAgent string against a set of rules and find the first matched key.
         * @param {Object} rules (key is String, value is RegExp)
         * @param {String} userAgent the navigator.userAgent (or HTTP-Header 'User-Agent').
         * @returns {String|null} the matched key if found, otherwise <tt>null</tt>
         * @private
         */
        impl.findMatch = function(rules, userAgent) {
             ~~~~~~~~~
!!! error TS2339: Property 'findMatch' does not exist on type '{}'.
            for (var key in rules) {
                if (hasOwnProp.call(rules, key)) {
                    if (rules[key].test(userAgent)) {
                        return key;
                    }
                }
            }
            return null;
        };
    
        /**
         * Test userAgent string against a set of rules and return an array of matched keys.
         * @param {Object} rules (key is String, value is RegExp)
         * @param {String} userAgent the navigator.userAgent (or HTTP-Header 'User-Agent').
         * @returns {Array} an array of matched keys, may be empty when there is no match, but not <tt>null</tt>
         * @private
         */
        impl.findMatches = function(rules, userAgent) {
             ~~~~~~~~~~~
!!! error TS2339: Property 'findMatches' does not exist on type '{}'.
            var result = [];
            for (var key in rules) {
                if (hasOwnProp.call(rules, key)) {
                    if (rules[key].test(userAgent)) {
                        result.push(key);
                    }
                }
            }
            return result;
        };
    
        /**
         * Check the version of the given property in the User-Agent.
         *
         * @param {String} propertyName
         * @param {String} userAgent
         * @return {String} version or <tt>null</tt> if version not found
         * @private
         */
        impl.getVersionStr = function (propertyName, userAgent) {
             ~~~~~~~~~~~~~
!!! error TS2339: Property 'getVersionStr' does not exist on type '{}'.
            var props = impl.mobileDetectRules.props, patterns, i, len, match;
                             ~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
            if (hasOwnProp.call(props, propertyName)) {
                patterns = props[propertyName];
                len = patterns.length;
                for (i = 0; i < len; ++i) {
                    match = patterns[i].exec(userAgent);
                    if (match !== null) {
                        return match[1];
                    }
                }
            }
            return null;
        };
    
        /**
         * Check the version of the given property in the User-Agent.
         * Will return a float number. (eg. 2_0 will return 2.0, 4.3.1 will return 4.31)
         *
         * @param {String} propertyName
         * @param {String} userAgent
         * @return {Number} version or <tt>NaN</tt> if version not found
         * @private
         */
        impl.getVersion = function (propertyName, userAgent) {
             ~~~~~~~~~~
!!! error TS2339: Property 'getVersion' does not exist on type '{}'.
            var version = impl.getVersionStr(propertyName, userAgent);
                               ~~~~~~~~~~~~~
!!! error TS2339: Property 'getVersionStr' does not exist on type '{}'.
            return version ? impl.prepareVersionNo(version) : NaN;
                                  ~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'prepareVersionNo' does not exist on type '{}'.
        };
    
        /**
         * Prepare the version number.
         *
         * @param {String} version
         * @return {Number} the version number as a floating number
         * @private
         */
        impl.prepareVersionNo = function (version) {
             ~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'prepareVersionNo' does not exist on type '{}'.
            var numbers;
    
            numbers = version.split(/[a-z._ \/\-]/i);
            if (numbers.length === 1) {
                version = numbers[0];
            }
            if (numbers.length > 1) {
                version = numbers[0] + '.';
                numbers.shift();
                version += numbers.join('');
            }
            return Number(version);
        };
    
        impl.isMobileFallback = function (userAgent) {
             ~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'isMobileFallback' does not exist on type '{}'.
            return impl.detectMobileBrowsers.fullPattern.test(userAgent) ||
                        ~~~~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'detectMobileBrowsers' does not exist on type '{}'.
                impl.detectMobileBrowsers.shortPattern.test(userAgent.substr(0,4));
                     ~~~~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'detectMobileBrowsers' does not exist on type '{}'.
        };
    
        impl.isTabletFallback = function (userAgent) {
             ~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'isTabletFallback' does not exist on type '{}'.
            return impl.detectMobileBrowsers.tabletPattern.test(userAgent);
                        ~~~~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'detectMobileBrowsers' does not exist on type '{}'.
        };
    
        impl.prepareDetectionCache = function (cache, userAgent, maxPhoneWidth) {
             ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'prepareDetectionCache' does not exist on type '{}'.
            if (cache.mobile !== undefined) {
                return;
            }
            var phone, tablet, phoneSized;
    
            // first check for stronger tablet rules, then phone (see issue#5)
            tablet = impl.findMatch(impl.mobileDetectRules.tablets, userAgent);
                          ~~~~~~~~~
!!! error TS2339: Property 'findMatch' does not exist on type '{}'.
                                         ~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
            if (tablet) {
                cache.mobile = cache.tablet = tablet;
                cache.phone = null;
                return; // unambiguously identified as tablet
            }
    
            phone = impl.findMatch(impl.mobileDetectRules.phones, userAgent);
                         ~~~~~~~~~
!!! error TS2339: Property 'findMatch' does not exist on type '{}'.
                                        ~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
            if (phone) {
                cache.mobile = cache.phone = phone;
                cache.tablet = null;
                return; // unambiguously identified as phone
            }
    
            // our rules haven't found a match -> try more general fallback rules
            if (impl.isMobileFallback(userAgent)) {
                     ~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'isMobileFallback' does not exist on type '{}'.
                phoneSized = MobileDetect.isPhoneSized(maxPhoneWidth);
                if (phoneSized === undefined) {
                    cache.mobile = impl.FALLBACK_MOBILE;
                                        ~~~~~~~~~~~~~~~
!!! error TS2339: Property 'FALLBACK_MOBILE' does not exist on type '{}'.
                    cache.tablet = cache.phone = null;
                } else if (phoneSized) {
                    cache.mobile = cache.phone = impl.FALLBACK_PHONE;
                                                      ~~~~~~~~~~~~~~
!!! error TS2339: Property 'FALLBACK_PHONE' does not exist on type '{}'.
                    cache.tablet = null;
                } else {
                    cache.mobile = cache.tablet = impl.FALLBACK_TABLET;
                                                       ~~~~~~~~~~~~~~~
!!! error TS2339: Property 'FALLBACK_TABLET' does not exist on type '{}'.
                    cache.phone = null;
                }
            } else if (impl.isTabletFallback(userAgent)) {
                            ~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'isTabletFallback' does not exist on type '{}'.
                cache.mobile = cache.tablet = impl.FALLBACK_TABLET;
                                                   ~~~~~~~~~~~~~~~
!!! error TS2339: Property 'FALLBACK_TABLET' does not exist on type '{}'.
                cache.phone = null;
            } else {
                // not mobile at all!
                cache.mobile = cache.tablet = cache.phone = null;
            }
        };
    
        // t is a reference to a MobileDetect instance
        impl.mobileGrade = function (t) {
             ~~~~~~~~~~~
!!! error TS2339: Property 'mobileGrade' does not exist on type '{}'.
            // impl note:
            // To keep in sync w/ Mobile_Detect.php easily, the following code is tightly aligned to the PHP version.
            // When changes are made in Mobile_Detect.php, copy this method and replace:
            //     $this-> / t.
            //     self::MOBILE_GRADE_(.) / '$1'
            //     , self::VERSION_TYPE_FLOAT / (nothing)
            //     isIOS() / os('iOS')
            //     [reg] / (nothing)   <-- jsdelivr complaining about unescaped unicode character U+00AE
            var $isMobile = t.mobile() !== null;
    
            if (
                // Apple iOS 3.2-5.1 - Tested on the original iPad (4.3 / 5.0), iPad 2 (4.3), iPad 3 (5.1), original iPhone (3.1), iPhone 3 (3.2), 3GS (4.3), 4 (4.3 / 5.0), and 4S (5.1)
                t.os('iOS') && t.version('iPad')>=4.3 ||
                t.os('iOS') && t.version('iPhone')>=3.1 ||
                t.os('iOS') && t.version('iPod')>=3.1 ||
    
                // Android 2.1-2.3 - Tested on the HTC Incredible (2.2), original Droid (2.2), HTC Aria (2.1), Google Nexus S (2.3). Functional on 1.5 & 1.6 but performance may be sluggish, tested on Google G1 (1.5)
                // Android 3.1 (Honeycomb)  - Tested on the Samsung Galaxy Tab 10.1 and Motorola XOOM
                // Android 4.0 (ICS)  - Tested on a Galaxy Nexus. Note: transition performance can be poor on upgraded devices
                // Android 4.1 (Jelly Bean)  - Tested on a Galaxy Nexus and Galaxy 7
                ( t.version('Android')>2.1 && t.is('Webkit') ) ||
    
                // Windows Phone 7-7.5 - Tested on the HTC Surround (7.0) HTC Trophy (7.5), LG-E900 (7.5), Nokia Lumia 800
                t.version('Windows Phone OS')>=7.0 ||
    
                // Blackberry 7 - Tested on BlackBerry Torch 9810
                // Blackberry 6.0 - Tested on the Torch 9800 and Style 9670
                t.is('BlackBerry') && t.version('BlackBerry')>=6.0 ||
                // Blackberry Playbook (1.0-2.0) - Tested on PlayBook
                t.match('Playbook.*Tablet') ||
    
                // Palm WebOS (1.4-2.0) - Tested on the Palm Pixi (1.4), Pre (1.4), Pre 2 (2.0)
                ( t.version('webOS')>=1.4 && t.match('Palm|Pre|Pixi') ) ||
                // Palm WebOS 3.0  - Tested on HP TouchPad
                t.match('hp.*TouchPad') ||
    
                // Firefox Mobile (12 Beta) - Tested on Android 2.3 device
                ( t.is('Firefox') && t.version('Firefox')>=12 ) ||
    
                // Chrome for Android - Tested on Android 4.0, 4.1 device
                ( t.is('Chrome') && t.is('AndroidOS') && t.version('Android')>=4.0 ) ||
    
                // Skyfire 4.1 - Tested on Android 2.3 device
                ( t.is('Skyfire') && t.version('Skyfire')>=4.1 && t.is('AndroidOS') && t.version('Android')>=2.3 ) ||
    
                // Opera Mobile 11.5-12: Tested on Android 2.3
                ( t.is('Opera') && t.version('Opera Mobi')>11 && t.is('AndroidOS') ) ||
    
                // Meego 1.2 - Tested on Nokia 950 and N9
                t.is('MeeGoOS') ||
    
                // Tizen (pre-release) - Tested on early hardware
                t.is('Tizen') ||
    
                // Samsung Bada 2.0 - Tested on a Samsung Wave 3, Dolphin browser
                // @todo: more tests here!
                t.is('Dolfin') && t.version('Bada')>=2.0 ||
    
                // UC Browser - Tested on Android 2.3 device
                ( (t.is('UC Browser') || t.is('Dolfin')) && t.version('Android')>=2.3 ) ||
    
                // Kindle 3 and Fire  - Tested on the built-in WebKit browser for each
                ( t.match('Kindle Fire') ||
                    t.is('Kindle') && t.version('Kindle')>=3.0 ) ||
    
                // Nook Color 1.4.1 - Tested on original Nook Color, not Nook Tablet
                t.is('AndroidOS') && t.is('NookTablet') ||
    
                // Chrome Desktop 11-21 - Tested on OS X 10.7 and Windows 7
                t.version('Chrome')>=11 && !$isMobile ||
    
                // Safari Desktop 4-5 - Tested on OS X 10.7 and Windows 7
                t.version('Safari')>=5.0 && !$isMobile ||
    
                // Firefox Desktop 4-13 - Tested on OS X 10.7 and Windows 7
                t.version('Firefox')>=4.0 && !$isMobile ||
    
                // Internet Explorer 7-9 - Tested on Windows XP, Vista and 7
                t.version('MSIE')>=7.0 && !$isMobile ||
    
                // Opera Desktop 10-12 - Tested on OS X 10.7 and Windows 7
                // @reference: http://my.opera.com/community/openweb/idopera/
                t.version('Opera')>=10 && !$isMobile
    
                ){
                return 'A';
            }
    
            if (
                t.os('iOS') && t.version('iPad')<4.3 ||
                t.os('iOS') && t.version('iPhone')<3.1 ||
                t.os('iOS') && t.version('iPod')<3.1 ||
    
                // Blackberry 5.0: Tested on the Storm 2 9550, Bold 9770
                t.is('Blackberry') && t.version('BlackBerry')>=5 && t.version('BlackBerry')<6 ||
    
                //Opera Mini (5.0-6.5) - Tested on iOS 3.2/4.3 and Android 2.3
                ( t.version('Opera Mini')>=5.0 && t.version('Opera Mini')<=6.5 &&
                    (t.version('Android')>=2.3 || t.is('iOS')) ) ||
    
                // Nokia Symbian^3 - Tested on Nokia N8 (Symbian^3), C7 (Symbian^3), also works on N97 (Symbian^1)
                t.match('NokiaN8|NokiaC7|N97.*Series60|Symbian/3') ||
    
                // @todo: report this (tested on Nokia N71)
                t.version('Opera Mobi')>=11 && t.is('SymbianOS')
                ){
                return 'B';
            }
    
            if (
            // Blackberry 4.x - Tested on the Curve 8330
                t.version('BlackBerry')<5.0 ||
                // Windows Mobile - Tested on the HTC Leo (WinMo 5.2)
                t.match('MSIEMobile|Windows CE.*Mobile') || t.version('Windows Mobile')<=5.2
    
                ){
                return 'C';
            }
    
            //All older smartphone platforms and featurephones - Any device that doesn't support media queries
            //will receive the basic, C grade experience.
            return 'C';
        };
    
        impl.detectOS = function (ua) {
             ~~~~~~~~
!!! error TS2339: Property 'detectOS' does not exist on type '{}'.
            return impl.findMatch(impl.mobileDetectRules.oss0, ua) ||
                        ~~~~~~~~~
!!! error TS2339: Property 'findMatch' does not exist on type '{}'.
                                       ~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
                impl.findMatch(impl.mobileDetectRules.oss, ua);
                     ~~~~~~~~~
!!! error TS2339: Property 'findMatch' does not exist on type '{}'.
                                    ~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
        };
    
        impl.getDeviceSmallerSide = function () {
             ~~~~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'getDeviceSmallerSide' does not exist on type '{}'.
            return window.screen.width < window.screen.height ?
                window.screen.width :
                window.screen.height;
        };
    
        /**
         * Constructor for MobileDetect object.
         * <br>
         * Such an object will keep a reference to the given user-agent string and cache most of the detect queries.<br>
         * <div style="background-color: #d9edf7; border: 1px solid #bce8f1; color: #3a87ad; padding: 14px; border-radius: 2px; margin-top: 20px">
         *     <strong>Find information how to download and install:</strong>
         *     <a href="https://github.com/hgoebl/mobile-detect.js/">github.com/hgoebl/mobile-detect.js/</a>
         * </div>
         *
         * @example <pre>
         *     var md = new MobileDetect(window.navigator.userAgent);
         *     if (md.mobile()) {
         *         location.href = (md.mobileGrade() === 'A') ? '/mobile/' : '/lynx/';
         *     }
         * </pre>
         *
         * @param {string} userAgent typically taken from window.navigator.userAgent or http_header['User-Agent']
         * @param {number} [maxPhoneWidth=600] <strong>only for browsers</strong> specify a value for the maximum
         *        width of smallest device side (in logical "CSS" pixels) until a device detected as mobile will be handled
         *        as phone.
         *        This is only used in cases where the device cannot be classified as phone or tablet.<br>
         *        See <a href="http://developer.android.com/guide/practices/screens_support.html">Declaring Tablet Layouts
         *        for Android</a>.<br>
         *        If you provide a value < 0, then this "fuzzy" check is disabled.
         * @constructor
         * @global
         */
        function MobileDetect(userAgent, maxPhoneWidth) {
            this.ua = userAgent || '';
            this._cache = {};
            //600dp is typical 7" tablet minimum width
            this.maxPhoneWidth = maxPhoneWidth || 600;
        }
    
        MobileDetect.prototype = {
            constructor: MobileDetect,
    
            /**
             * Returns the detected phone or tablet type or <tt>null</tt> if it is not a mobile device.
             * <br>
             * For a list of possible return values see {@link MobileDetect#phone} and {@link MobileDetect#tablet}.<br>
             * <br>
             * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
             * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
             * is positive, a value of <code>UnknownPhone</code>, <code>UnknownTablet</code> or
             * <code>UnknownMobile</code> is returned.<br>
             * When used in browser, the decision whether phone or tablet is made based on <code>screen.width/height</code>.<br>
             * <br>
             * When used server-side (node.js), there is no way to tell the difference between <code>UnknownTablet</code>
             * and <code>UnknownMobile</code>, so you will get <code>UnknownMobile</code> here.<br>
             * Be aware that since v1.0.0 in this special case you will get <code>UnknownMobile</code> only for:
             * {@link MobileDetect#mobile}, not for {@link MobileDetect#phone} and {@link MobileDetect#tablet}.
             * In versions before v1.0.0 all 3 methods returned <code>UnknownMobile</code> which was tedious to use.
             * <br>
             * In most cases you will use the return value just as a boolean.
             *
             * @returns {String} the key for the phone family or tablet family, e.g. "Nexus".
             * @function MobileDetect#mobile
             */
            mobile: function () {
                impl.prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth);
                     ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'prepareDetectionCache' does not exist on type '{}'.
                return this._cache.mobile;
            },
    
            /**
             * Returns the detected phone type/family string or <tt>null</tt>.
             * <br>
             * The returned tablet (family or producer) is one of following keys:<br>
             * <br><tt>iPhone, BlackBerry, HTC, Nexus, Dell, Motorola, Samsung, LG, Sony, Asus,
             * NokiaLumia, Micromax, Palm, Vertu, Pantech, Fly, Wiko, iMobile, SimValley,
             * Wolfgang, Alcatel, Nintendo, Amoi, INQ, GenericPhone</tt><br>
             * <br>
             * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
             * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
             * is positive, a value of <code>UnknownPhone</code> or <code>UnknownMobile</code> is returned.<br>
             * When used in browser, the decision whether phone or tablet is made based on <code>screen.width/height</code>.<br>
             * <br>
             * When used server-side (node.js), there is no way to tell the difference between <code>UnknownTablet</code>
             * and <code>UnknownMobile</code>, so you will get <code>null</code> here, while {@link MobileDetect#mobile}
             * will return <code>UnknownMobile</code>.<br>
             * Be aware that since v1.0.0 in this special case you will get <code>UnknownMobile</code> only for:
             * {@link MobileDetect#mobile}, not for {@link MobileDetect#phone} and {@link MobileDetect#tablet}.
             * In versions before v1.0.0 all 3 methods returned <code>UnknownMobile</code> which was tedious to use.
             * <br>
             * In most cases you will use the return value just as a boolean.
             *
             * @returns {String} the key of the phone family or producer, e.g. "iPhone"
             * @function MobileDetect#phone
             */
            phone: function () {
                impl.prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth);
                     ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'prepareDetectionCache' does not exist on type '{}'.
                return this._cache.phone;
            },
    
            /**
             * Returns the detected tablet type/family string or <tt>null</tt>.
             * <br>
             * The returned tablet (family or producer) is one of following keys:<br>
             * <br><tt>iPad, NexusTablet, SamsungTablet, Kindle, SurfaceTablet, HPTablet, AsusTablet,
             * BlackBerryTablet, HTCtablet, MotorolaTablet, NookTablet, AcerTablet,
             * ToshibaTablet, LGTablet, FujitsuTablet, PrestigioTablet, LenovoTablet,
             * DellTablet, YarvikTablet, MedionTablet, ArnovaTablet, IntensoTablet, IRUTablet,
             * MegafonTablet, EbodaTablet, AllViewTablet, ArchosTablet, AinolTablet,
             * NokiaLumiaTablet, SonyTablet, PhilipsTablet, CubeTablet, CobyTablet, MIDTablet,
             * MSITablet, SMiTTablet, RockChipTablet, FlyTablet, bqTablet, HuaweiTablet,
             * NecTablet, PantechTablet, BronchoTablet, VersusTablet, ZyncTablet,
             * PositivoTablet, NabiTablet, KoboTablet, DanewTablet, TexetTablet,
             * PlaystationTablet, TrekstorTablet, PyleAudioTablet, AdvanTablet,
             * DanyTechTablet, GalapadTablet, MicromaxTablet, KarbonnTablet, AllFineTablet,
             * PROSCANTablet, YONESTablet, ChangJiaTablet, GUTablet, PointOfViewTablet,
             * OvermaxTablet, HCLTablet, DPSTablet, VistureTablet, CrestaTablet,
             * MediatekTablet, ConcordeTablet, GoCleverTablet, ModecomTablet, VoninoTablet,
             * ECSTablet, StorexTablet, VodafoneTablet, EssentielBTablet, RossMoorTablet,
             * iMobileTablet, TolinoTablet, AudioSonicTablet, AMPETablet, SkkTablet,
             * TecnoTablet, JXDTablet, iJoyTablet, FX2Tablet, XoroTablet, ViewsonicTablet,
             * OdysTablet, CaptivaTablet, IconbitTablet, TeclastTablet, OndaTablet,
             * JaytechTablet, BlaupunktTablet, DigmaTablet, EvolioTablet, LavaTablet,
             * AocTablet, MpmanTablet, CelkonTablet, WolderTablet, MiTablet, NibiruTablet,
             * NexoTablet, LeaderTablet, UbislateTablet, PocketBookTablet, KocasoTablet, Hudl,
             * TelstraTablet, GenericTablet</tt><br>
             * <br>
             * If the device is not detected by the regular expressions from Mobile-Detect, a test is made against
             * the patterns of <a href="http://detectmobilebrowsers.com/">detectmobilebrowsers.com</a>. If this test
             * is positive, a value of <code>UnknownTablet</code> or <code>UnknownMobile</code> is returned.<br>
             * When used in browser, the decision whether phone or tablet is made based on <code>screen.width/height</code>.<br>
             * <br>
             * When used server-side (node.js), there is no way to tell the difference between <code>UnknownTablet</code>
             * and <code>UnknownMobile</code>, so you will get <code>null</code> here, while {@link MobileDetect#mobile}
             * will return <code>UnknownMobile</code>.<br>
             * Be aware that since v1.0.0 in this special case you will get <code>UnknownMobile</code> only for:
             * {@link MobileDetect#mobile}, not for {@link MobileDetect#phone} and {@link MobileDetect#tablet}.
             * In versions before v1.0.0 all 3 methods returned <code>UnknownMobile</code> which was tedious to use.
             * <br>
             * In most cases you will use the return value just as a boolean.
             *
             * @returns {String} the key of the tablet family or producer, e.g. "SamsungTablet"
             * @function MobileDetect#tablet
             */
            tablet: function () {
                impl.prepareDetectionCache(this._cache, this.ua, this.maxPhoneWidth);
                     ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'prepareDetectionCache' does not exist on type '{}'.
                return this._cache.tablet;
            },
    
            /**
             * Returns the (first) detected user-agent string or <tt>null</tt>.
             * <br>
             * The returned user-agent is one of following keys:<br>
             * <br><tt>Vivaldi, Chrome, Dolfin, Opera, Skyfire, Edge, IE, Firefox, Bolt, TeaShark,
             * Blazer, Safari, Tizen, UCBrowser, baiduboxapp, baidubrowser, DiigoBrowser,
             * Puffin, Mercury, ObigoBrowser, NetFront, GenericBrowser, PaleMoon</tt><br>
             * <br>
             * In most cases calling {@link MobileDetect#userAgent} will be sufficient. But there are rare
             * cases where a mobile device pretends to be more than one particular browser. You can get the
             * list of all matches with {@link MobileDetect#userAgents} or check for a particular value by
             * providing one of the defined keys as first argument to {@link MobileDetect#is}.
             *
             * @returns {String} the key for the detected user-agent or <tt>null</tt>
             * @function MobileDetect#userAgent
             */
            userAgent: function () {
                if (this._cache.userAgent === undefined) {
                    this._cache.userAgent = impl.findMatch(impl.mobileDetectRules.uas, this.ua);
                                                 ~~~~~~~~~
!!! error TS2339: Property 'findMatch' does not exist on type '{}'.
                                                                ~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
                }
                return this._cache.userAgent;
            },
    
            /**
             * Returns all detected user-agent strings.
             * <br>
             * The array is empty or contains one or more of following keys:<br>
             * <br><tt>Vivaldi, Chrome, Dolfin, Opera, Skyfire, Edge, IE, Firefox, Bolt, TeaShark,
             * Blazer, Safari, Tizen, UCBrowser, baiduboxapp, baidubrowser, DiigoBrowser,
             * Puffin, Mercury, ObigoBrowser, NetFront, GenericBrowser, PaleMoon</tt><br>
             * <br>
             * In most cases calling {@link MobileDetect#userAgent} will be sufficient. But there are rare
             * cases where a mobile device pretends to be more than one particular browser. You can get the
             * list of all matches with {@link MobileDetect#userAgents} or check for a particular value by
             * providing one of the defined keys as first argument to {@link MobileDetect#is}.
             *
             * @returns {Array} the array of detected user-agent keys or <tt>[]</tt>
             * @function MobileDetect#userAgents
             */
            userAgents: function () {
                if (this._cache.userAgents === undefined) {
                    this._cache.userAgents = impl.findMatches(impl.mobileDetectRules.uas, this.ua);
                                                  ~~~~~~~~~~~
!!! error TS2339: Property 'findMatches' does not exist on type '{}'.
                                                                   ~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
                }
                return this._cache.userAgents;
            },
    
            /**
             * Returns the detected operating system string or <tt>null</tt>.
             * <br>
             * The operating system is one of following keys:<br>
             * <br><tt>AndroidOS, BlackBerryOS, PalmOS, SymbianOS, WindowsMobileOS, WindowsPhoneOS,
             * iOS, MeeGoOS, MaemoOS, JavaOS, webOS, badaOS, BREWOS</tt><br>
             *
             * @returns {String} the key for the detected operating system.
             * @function MobileDetect#os
             */
            os: function () {
                if (this._cache.os === undefined) {
                    this._cache.os = impl.detectOS(this.ua);
                                          ~~~~~~~~
!!! error TS2339: Property 'detectOS' does not exist on type '{}'.
                }
                return this._cache.os;
            },
    
            /**
             * Get the version (as Number) of the given property in the User-Agent.
             * <br>
             * Will return a float number. (eg. 2_0 will return 2.0, 4.3.1 will return 4.31)
             *
             * @param {String} key a key defining a thing which has a version.<br>
             *        You can use one of following keys:<br>
             * <br><tt>Mobile, Build, Version, VendorID, iPad, iPhone, iPod, Kindle, Chrome, Coast,
             * Dolfin, Firefox, Fennec, Edge, IE, NetFront, NokiaBrowser, Opera, Opera Mini,
             * Opera Mobi, UC Browser, MQQBrowser, MicroMessenger, baiduboxapp, baidubrowser,
             * Iron, Safari, Skyfire, Tizen, Webkit, PaleMoon, Gecko, Trident, Presto, Goanna,
             * iOS, Android, BlackBerry, BREW, Java, Windows Phone OS, Windows Phone, Windows
             * CE, Windows NT, Symbian, webOS</tt><br>
             *
             * @returns {Number} the version as float or <tt>NaN</tt> if User-Agent doesn't contain this version.
             *          Be careful when comparing this value with '==' operator!
             * @function MobileDetect#version
             */
            version: function (key) {
                return impl.getVersion(key, this.ua);
                            ~~~~~~~~~~
!!! error TS2339: Property 'getVersion' does not exist on type '{}'.
            },
    
            /**
             * Get the version (as String) of the given property in the User-Agent.
             * <br>
             *
             * @param {String} key a key defining a thing which has a version.<br>
             *        You can use one of following keys:<br>
             * <br><tt>Mobile, Build, Version, VendorID, iPad, iPhone, iPod, Kindle, Chrome, Coast,
             * Dolfin, Firefox, Fennec, Edge, IE, NetFront, NokiaBrowser, Opera, Opera Mini,
             * Opera Mobi, UC Browser, MQQBrowser, MicroMessenger, baiduboxapp, baidubrowser,
             * Iron, Safari, Skyfire, Tizen, Webkit, PaleMoon, Gecko, Trident, Presto, Goanna,
             * iOS, Android, BlackBerry, BREW, Java, Windows Phone OS, Windows Phone, Windows
             * CE, Windows NT, Symbian, webOS</tt><br>
             *
             * @returns {String} the "raw" version as String or <tt>null</tt> if User-Agent doesn't contain this version.
             *
             * @function MobileDetect#versionStr
             */
            versionStr: function (key) {
                return impl.getVersionStr(key, this.ua);
                            ~~~~~~~~~~~~~
!!! error TS2339: Property 'getVersionStr' does not exist on type '{}'.
            },
    
            /**
             * Global test key against userAgent, os, phone, tablet and some other properties of userAgent string.
             *
             * @param {String} key the key (case-insensitive) of a userAgent, an operating system, phone or
             *        tablet family.<br>
             *        For a complete list of possible values, see {@link MobileDetect#userAgent},
             *        {@link MobileDetect#os}, {@link MobileDetect#phone}, {@link MobileDetect#tablet}.<br>
             *        Additionally you have following keys:<br>
             * <br><tt>Bot, MobileBot, DesktopMode, TV, WebKit, Console, Watch</tt><br>
             *
             * @returns {boolean} <tt>true</tt> when the given key is one of the defined keys of userAgent, os, phone,
             *                    tablet or one of the listed additional keys, otherwise <tt>false</tt>
             * @function MobileDetect#is
             */
            is: function (key) {
                return containsIC(this.userAgents(), key) ||
                       equalIC(key, this.os()) ||
                       equalIC(key, this.phone()) ||
                       equalIC(key, this.tablet()) ||
                       containsIC(impl.findMatches(impl.mobileDetectRules.utils, this.ua), key);
                                       ~~~~~~~~~~~
!!! error TS2339: Property 'findMatches' does not exist on type '{}'.
                                                        ~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'mobileDetectRules' does not exist on type '{}'.
            },
    
            /**
             * Do a quick test against navigator::userAgent.
             *
             * @param {String|RegExp} pattern the pattern, either as String or RegExp
             *                        (a string will be converted to a case-insensitive RegExp).
             * @returns {boolean} <tt>true</tt> when the pattern matches, otherwise <tt>false</tt>
             * @function MobileDetect#match
             */
            match: function (pattern) {
                if (!(pattern instanceof RegExp)) {
                    pattern = new RegExp(pattern, 'i');
                }
                return pattern.test(this.ua);
            },
    
            /**
             * Checks whether the mobile device can be considered as phone regarding <code>screen.width</code>.
             * <br>
             * Obviously this method makes sense in browser environments only (not for Node.js)!
             * @param {number} [maxPhoneWidth] the maximum logical pixels (aka. CSS-pixels) to be considered as phone.<br>
             *        The argument is optional and if not present or falsy, the value of the constructor is taken.
             * @returns {boolean|undefined} <code>undefined</code> if screen size wasn't detectable, else <code>true</code>
             *          when screen.width is less or equal to maxPhoneWidth, otherwise <code>false</code>.<br>
             *          Will always return <code>undefined</code> server-side.
             */
            isPhoneSized: function (maxPhoneWidth) {
                return MobileDetect.isPhoneSized(maxPhoneWidth || this.maxPhoneWidth);
            },
    
            /**
             * Returns the mobile grade ('A', 'B', 'C').
             *
             * @returns {String} one of the mobile grades ('A', 'B', 'C').
             * @function MobileDetect#mobileGrade
             */
            mobileGrade: function () {
                if (this._cache.grade === undefined) {
                    this._cache.grade = impl.mobileGrade(this);
                                             ~~~~~~~~~~~
!!! error TS2339: Property 'mobileGrade' does not exist on type '{}'.
                }
                return this._cache.grade;
            }
        };
    
        // environment-dependent
        if (typeof window !== 'undefined' && window.screen) {
            MobileDetect.isPhoneSized = function (maxPhoneWidth) {
                return maxPhoneWidth < 0 ? undefined : impl.getDeviceSmallerSide() <= maxPhoneWidth;
                                                            ~~~~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'getDeviceSmallerSide' does not exist on type '{}'.
            };
        } else {
            MobileDetect.isPhoneSized = function () {};
        }
    
        // should not be replaced by a completely new object - just overwrite existing methods
        MobileDetect._impl = impl;
    
        MobileDetect.version = '1.3.3 2016-07-31';
    
        return MobileDetect;
    }); // end of call of define()
    })((function (undefined) {
        if (typeof module !== 'undefined' && module.exports) {
                   ~~~~~~
!!! error TS2580: Cannot find name 'module'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node`.
                                             ~~~~~~
!!! error TS2580: Cannot find name 'module'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node`.
            return function (factory) { module.exports = factory(); };
                                        ~~~~~~
!!! error TS2580: Cannot find name 'module'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node`.
        } else if (typeof define === 'function' && define.amd) {
                          ~~~~~~
!!! error TS2304: Cannot find name 'define'.
                                                   ~~~~~~
!!! error TS2304: Cannot find name 'define'.
            return define;
                   ~~~~~~
!!! error TS2304: Cannot find name 'define'.
        } else if (typeof window !== 'undefined') {
            return function (factory) { window.MobileDetect = factory(); };
                                               ~~~~~~~~~~~~
!!! error TS2339: Property 'MobileDetect' does not exist on type 'Window & { NaN: number; Infinity: number; eval: (x: string) => any; parseInt: (string: string, radix?: number) => number; parseFloat: (string: string) => number; isNaN: (number: number) => boolean; isFinite: (number: number) => boolean; decodeURI: (encodedURI: string) => string; decodeURIComponent: (encodedURIComponent: string) => string; encodeURI: (uri: string) => string; encodeURIComponent: (uriComponent: string | number | boolean) => string; escape: (string: string) => string; unescape: (string: string) => string; Object: ObjectConstructor; Function: FunctionConstructor; String: StringConstructor; Boolean: BooleanConstructor; Number: NumberConstructor; Math: Math; Date: DateConstructor; RegExp: RegExpConstructor; Error: ErrorConstructor; EvalError: EvalErrorConstructor; RangeError: RangeErrorConstructor; ReferenceError: ReferenceErrorConstructor; SyntaxError: SyntaxErrorConstructor; TypeError: TypeErrorConstructor; URIError: URIErrorConstructor; JSON: JSON; Array: ArrayConstructor; ArrayBuffer: ArrayBufferConstructor; DataView: DataViewConstructor; Int8Array: Int8ArrayConstructor; Uint8Array: Uint8ArrayConstructor; Uint8ClampedArray: Uint8ClampedArrayConstructor; Int16Array: Int16ArrayConstructor; Uint16Array: Uint16ArrayConstructor; Int32Array: Int32ArrayConstructor; Uint32Array: Uint32ArrayConstructor; Float32Array: Float32ArrayConstructor; Float64Array: Float64ArrayConstructor; Intl: { Collator: CollatorConstructor; NumberFormat: NumberFormatConstructor; DateTimeFormat: DateTimeFormatConstructor; }; NodeFilter: { readonly FILTER_ACCEPT: 1; readonly FILTER_REJECT: 2; readonly FILTER_SKIP: 3; readonly SHOW_ALL: 4294967295; readonly SHOW_ELEMENT: 1; readonly SHOW_ATTRIBUTE: 2; readonly SHOW_TEXT: 4; readonly SHOW_CDATA_SECTION: 8; readonly SHOW_ENTITY_REFERENCE: 16; readonly SHOW_ENTITY: 32; readonly SHOW_PROCESSING_INSTRUCTION: 64; readonly SHOW_COMMENT: 128; readonly SHOW_DOCUMENT: 256; readonly SHOW_DOCUMENT_TYPE: 512; readonly SHOW_DOCUMENT_FRAGMENT: 1024; readonly SHOW_NOTATION: 2048; }; AbortController: { new (): AbortController; prototype: AbortController; }; AbortSignal: { new (): AbortSignal; prototype: AbortSignal; abort: (reason?: any) => AbortSignal; any: (signals: AbortSignal[]) => AbortSignal; timeout: (milliseconds: number) => AbortSignal; }; AbstractRange: { new (): AbstractRange; prototype: AbstractRange; }; AnalyserNode: { new (context: BaseAudioContext, options?: AnalyserOptions): AnalyserNode; prototype: AnalyserNode; }; Animation: { new (effect?: AnimationEffect, timeline?: AnimationTimeline): Animation; prototype: Animation; }; AnimationEffect: { new (): AnimationEffect; prototype: AnimationEffect; }; AnimationEvent: { new (type: string, animationEventInitDict?: AnimationEventInit): AnimationEvent; prototype: AnimationEvent; }; AnimationPlaybackEvent: { new (type: string, eventInitDict?: AnimationPlaybackEventInit): AnimationPlaybackEvent; prototype: AnimationPlaybackEvent; }; AnimationTimeline: { new (): AnimationTimeline; prototype: AnimationTimeline; }; Attr: { new (): Attr; prototype: Attr; }; AudioBuffer: { new (options: AudioBufferOptions): AudioBuffer; prototype: AudioBuffer; }; AudioBufferSourceNode: { new (context: BaseAudioContext, options?: AudioBufferSourceOptions): AudioBufferSourceNode; prototype: AudioBufferSourceNode; }; AudioContext: { new (contextOptions?: AudioContextOptions): AudioContext; prototype: AudioContext; }; AudioDestinationNode: { new (): AudioDestinationNode; prototype: AudioDestinationNode; }; AudioListener: { new (): AudioListener; prototype: AudioListener; }; AudioNode: { new (): AudioNode; prototype: AudioNode; }; AudioParam: { new (): AudioParam; prototype: AudioParam; }; AudioParamMap: { new (): AudioParamMap; prototype: AudioParamMap; }; AudioProcessingEvent: { new (type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent; prototype: AudioProcessingEvent; }; AudioScheduledSourceNode: { new (): AudioScheduledSourceNode; prototype: AudioScheduledSourceNode; }; AudioWorklet: { new (): AudioWorklet; prototype: AudioWorklet; }; AudioWorkletNode: { new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions): AudioWorkletNode; prototype: AudioWorkletNode; }; AuthenticatorAssertionResponse: { new (): AuthenticatorAssertionResponse; prototype: AuthenticatorAssertionResponse; }; AuthenticatorAttestationResponse: { new (): AuthenticatorAttestationResponse; prototype: AuthenticatorAttestationResponse; }; AuthenticatorResponse: { new (): AuthenticatorResponse; prototype: AuthenticatorResponse; }; BarProp: { new (): BarProp; prototype: BarProp; }; BaseAudioContext: { new (): BaseAudioContext; prototype: BaseAudioContext; }; BeforeUnloadEvent: { new (): BeforeUnloadEvent; prototype: BeforeUnloadEvent; }; BiquadFilterNode: { new (context: BaseAudioContext, options?: BiquadFilterOptions): BiquadFilterNode; prototype: BiquadFilterNode; }; Blob: { new (blobParts?: BlobPart[], options?: BlobPropertyBag): Blob; prototype: Blob; }; BlobEvent: { new (type: string, eventInitDict: BlobEventInit): BlobEvent; prototype: BlobEvent; }; BroadcastChannel: { new (name: string): BroadcastChannel; prototype: BroadcastChannel; }; ByteLengthQueuingStrategy: { new (init: QueuingStrategyInit): ByteLengthQueuingStrategy; prototype: ByteLengthQueuingStrategy; }; CDATASection: { new (): CDATASection; prototype: CDATASection; }; CSSAnimation: { new (): CSSAnimation; prototype: CSSAnimation; }; CSSConditionRule: { new (): CSSConditionRule; prototype: CSSConditionRule; }; CSSContainerRule: { new (): CSSContainerRule; prototype: CSSContainerRule; }; CSSCounterStyleRule: { new (): CSSCounterStyleRule; prototype: CSSCounterStyleRule; }; CSSFontFaceRule: { new (): CSSFontFaceRule; prototype: CSSFontFaceRule; }; CSSFontFeatureValuesRule: { new (): CSSFontFeatureValuesRule; prototype: CSSFontFeatureValuesRule; }; CSSFontPaletteValuesRule: { new (): CSSFontPaletteValuesRule; prototype: CSSFontPaletteValuesRule; }; CSSGroupingRule: { new (): CSSGroupingRule; prototype: CSSGroupingRule; }; CSSImageValue: { new (): CSSImageValue; prototype: CSSImageValue; }; CSSImportRule: { new (): CSSImportRule; prototype: CSSImportRule; }; CSSKeyframeRule: { new (): CSSKeyframeRule; prototype: CSSKeyframeRule; }; CSSKeyframesRule: { new (): CSSKeyframesRule; prototype: CSSKeyframesRule; }; CSSKeywordValue: { new (value: string): CSSKeywordValue; prototype: CSSKeywordValue; }; CSSLayerBlockRule: { new (): CSSLayerBlockRule; prototype: CSSLayerBlockRule; }; CSSLayerStatementRule: { new (): CSSLayerStatementRule; prototype: CSSLayerStatementRule; }; CSSMathClamp: { new (lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp; prototype: CSSMathClamp; }; CSSMathInvert: { new (arg: CSSNumberish): CSSMathInvert; prototype: CSSMathInvert; }; CSSMathMax: { new (...args: CSSNumberish[]): CSSMathMax; prototype: CSSMathMax; }; CSSMathMin: { new (...args: CSSNumberish[]): CSSMathMin; prototype: CSSMathMin; }; CSSMathNegate: { new (arg: CSSNumberish): CSSMathNegate; prototype: CSSMathNegate; }; CSSMathProduct: { new (...args: CSSNumberish[]): CSSMathProduct; prototype: CSSMathProduct; }; CSSMathSum: { new (...args: CSSNumberish[]): CSSMathSum; prototype: CSSMathSum; }; CSSMathValue: { new (): CSSMathValue; prototype: CSSMathValue; }; CSSMatrixComponent: { new (matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions): CSSMatrixComponent; prototype: CSSMatrixComponent; }; CSSMediaRule: { new (): CSSMediaRule; prototype: CSSMediaRule; }; CSSNamespaceRule: { new (): CSSNamespaceRule; prototype: CSSNamespaceRule; }; CSSNumericArray: { new (): CSSNumericArray; prototype: CSSNumericArray; }; CSSNumericValue: { new (): CSSNumericValue; prototype: CSSNumericValue; parse: (cssText: string) => CSSNumericValue; }; CSSPageRule: { new (): CSSPageRule; prototype: CSSPageRule; }; CSSPerspective: { new (length: CSSPerspectiveValue): CSSPerspective; prototype: CSSPerspective; }; CSSPropertyRule: { new (): CSSPropertyRule; prototype: CSSPropertyRule; }; CSSRotate: { new (angle: CSSNumericValue): CSSRotate; new (x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate; prototype: CSSRotate; }; CSSRule: { new (): CSSRule; prototype: CSSRule; readonly STYLE_RULE: 1; readonly CHARSET_RULE: 2; readonly IMPORT_RULE: 3; readonly MEDIA_RULE: 4; readonly FONT_FACE_RULE: 5; readonly PAGE_RULE: 6; readonly NAMESPACE_RULE: 10; readonly KEYFRAMES_RULE: 7; readonly KEYFRAME_RULE: 8; readonly SUPPORTS_RULE: 12; readonly COUNTER_STYLE_RULE: 11; readonly FONT_FEATURE_VALUES_RULE: 14; }; CSSRuleList: { new (): CSSRuleList; prototype: CSSRuleList; }; CSSScale: { new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish): CSSScale; prototype: CSSScale; }; CSSScopeRule: { new (): CSSScopeRule; prototype: CSSScopeRule; }; CSSSkew: { new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew; prototype: CSSSkew; }; CSSSkewX: { new (ax: CSSNumericValue): CSSSkewX; prototype: CSSSkewX; }; CSSSkewY: { new (ay: CSSNumericValue): CSSSkewY; prototype: CSSSkewY; }; CSSStartingStyleRule: { new (): CSSStartingStyleRule; prototype: CSSStartingStyleRule; }; CSSStyleDeclaration: { new (): CSSStyleDeclaration; prototype: CSSStyleDeclaration; }; CSSStyleRule: { new (): CSSStyleRule; prototype: CSSStyleRule; }; CSSStyleSheet: { new (options?: CSSStyleSheetInit): CSSStyleSheet; prototype: CSSStyleSheet; }; CSSStyleValue: { new (): CSSStyleValue; prototype: CSSStyleValue; parse: (property: string, cssText: string) => CSSStyleValue; parseAll: (property: string, cssText: string) => CSSStyleValue[]; }; CSSSupportsRule: { new (): CSSSupportsRule; prototype: CSSSupportsRule; }; CSSTransformComponent: { new (): CSSTransformComponent; prototype: CSSTransformComponent; }; CSSTransformValue: { new (transforms: CSSTransformComponent[]): CSSTransformValue; prototype: CSSTransformValue; }; CSSTransition: { new (): CSSTransition; prototype: CSSTransition; }; CSSTranslate: { new (x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue): CSSTranslate; prototype: CSSTranslate; }; CSSUnitValue: { new (value: number, unit: string): CSSUnitValue; prototype: CSSUnitValue; }; CSSUnparsedValue: { new (members: CSSUnparsedSegment[]): CSSUnparsedValue; prototype: CSSUnparsedValue; }; CSSVariableReferenceValue: { new (variable: string, fallback?: CSSUnparsedValue): CSSVariableReferenceValue; prototype: CSSVariableReferenceValue; }; Cache: { new (): Cache; prototype: Cache; }; CacheStorage: { new (): CacheStorage; prototype: CacheStorage; }; CanvasCaptureMediaStreamTrack: { new (): CanvasCaptureMediaStreamTrack; prototype: CanvasCaptureMediaStreamTrack; }; CanvasGradient: { new (): CanvasGradient; prototype: CanvasGradient; }; CanvasPattern: { new (): CanvasPattern; prototype: CanvasPattern; }; CanvasRenderingContext2D: { new (): CanvasRenderingContext2D; prototype: CanvasRenderingContext2D; }; ChannelMergerNode: { new (context: BaseAudioContext, options?: ChannelMergerOptions): ChannelMergerNode; prototype: ChannelMergerNode; }; ChannelSplitterNode: { new (context: BaseAudioContext, options?: ChannelSplitterOptions): ChannelSplitterNode; prototype: ChannelSplitterNode; }; CharacterData: { new (): CharacterData; prototype: CharacterData; }; Clipboard: { new (): Clipboard; prototype: Clipboard; }; ClipboardEvent: { new (type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent; prototype: ClipboardEvent; }; ClipboardItem: { new (items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions): ClipboardItem; prototype: ClipboardItem; supports: (type: string) => boolean; }; CloseEvent: { new (type: string, eventInitDict?: CloseEventInit): CloseEvent; prototype: CloseEvent; }; Comment: { new (data?: string): Comment; prototype: Comment; }; CompositionEvent: { new (type: string, eventInitDict?: CompositionEventInit): CompositionEvent; prototype: CompositionEvent; }; CompressionStream: { new (format: CompressionFormat): CompressionStream; prototype: CompressionStream; }; ConstantSourceNode: { new (context: BaseAudioContext, options?: ConstantSourceOptions): ConstantSourceNode; prototype: ConstantSourceNode; }; ContentVisibilityAutoStateChangeEvent: { new (type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit): ContentVisibilityAutoStateChangeEvent; prototype: ContentVisibilityAutoStateChangeEvent; }; ConvolverNode: { new (context: BaseAudioContext, options?: ConvolverOptions): ConvolverNode; prototype: ConvolverNode; }; CountQueuingStrategy: { new (init: QueuingStrategyInit): CountQueuingStrategy; prototype: CountQueuingStrategy; }; Credential: { new (): Credential; prototype: Credential; }; CredentialsContainer: { new (): CredentialsContainer; prototype: CredentialsContainer; }; Crypto: { new (): Crypto; prototype: Crypto; }; CryptoKey: { new (): CryptoKey; prototype: CryptoKey; }; CustomElementRegistry: { new (): CustomElementRegistry; prototype: CustomElementRegistry; }; CustomEvent: { new <T>(type: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>; prototype: CustomEvent<any>; }; CustomStateSet: { new (): CustomStateSet; prototype: CustomStateSet; }; DOMException: { new (message?: string, name?: string): DOMException; prototype: DOMException; readonly INDEX_SIZE_ERR: 1; readonly DOMSTRING_SIZE_ERR: 2; readonly HIERARCHY_REQUEST_ERR: 3; readonly WRONG_DOCUMENT_ERR: 4; readonly INVALID_CHARACTER_ERR: 5; readonly NO_DATA_ALLOWED_ERR: 6; readonly NO_MODIFICATION_ALLOWED_ERR: 7; readonly NOT_FOUND_ERR: 8; readonly NOT_SUPPORTED_ERR: 9; readonly INUSE_ATTRIBUTE_ERR: 10; readonly INVALID_STATE_ERR: 11; readonly SYNTAX_ERR: 12; readonly INVALID_MODIFICATION_ERR: 13; readonly NAMESPACE_ERR: 14; readonly INVALID_ACCESS_ERR: 15; readonly VALIDATION_ERR: 16; readonly TYPE_MISMATCH_ERR: 17; readonly SECURITY_ERR: 18; readonly NETWORK_ERR: 19; readonly ABORT_ERR: 20; readonly URL_MISMATCH_ERR: 21; readonly QUOTA_EXCEEDED_ERR: 22; readonly TIMEOUT_ERR: 23; readonly INVALID_NODE_TYPE_ERR: 24; readonly DATA_CLONE_ERR: 25; }; DOMImplementation: { new (): DOMImplementation; prototype: DOMImplementation; }; DOMMatrix: { new (init?: string | number[]): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit) => DOMMatrix; }; SVGMatrix: { new (init?: string | number[]): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit) => DOMMatrix; }; WebKitCSSMatrix: { new (init?: string | number[]): DOMMatrix; prototype: DOMMatrix; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrix; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrix; fromMatrix: (other?: DOMMatrixInit) => DOMMatrix; }; DOMMatrixReadOnly: { new (init?: string | number[]): DOMMatrixReadOnly; prototype: DOMMatrixReadOnly; fromFloat32Array: (array32: Float32Array<ArrayBuffer>) => DOMMatrixReadOnly; fromFloat64Array: (array64: Float64Array<ArrayBuffer>) => DOMMatrixReadOnly; fromMatrix: (other?: DOMMatrixInit) => DOMMatrixReadOnly; }; DOMParser: { new (): DOMParser; prototype: DOMParser; }; DOMPoint: { new (x?: number, y?: number, z?: number, w?: number): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit) => DOMPoint; }; SVGPoint: { new (x?: number, y?: number, z?: number, w?: number): DOMPoint; prototype: DOMPoint; fromPoint: (other?: DOMPointInit) => DOMPoint; }; DOMPointReadOnly: { new (x?: number, y?: number, z?: number, w?: number): DOMPointReadOnly; prototype: DOMPointReadOnly; fromPoint: (other?: DOMPointInit) => DOMPointReadOnly; }; DOMQuad: { new (p1?: DOMPointInit, p2?: DOMPointInit, p3?: DOMPointInit, p4?: DOMPointInit): DOMQuad; prototype: DOMQuad; fromQuad: (other?: DOMQuadInit) => DOMQuad; fromRect: (other?: DOMRectInit) => DOMQuad; }; DOMRect: { new (x?: number, y?: number, width?: number, height?: number): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit) => DOMRect; }; SVGRect: { new (x?: number, y?: number, width?: number, height?: number): DOMRect; prototype: DOMRect; fromRect: (other?: DOMRectInit) => DOMRect; }; DOMRectList: { new (): DOMRectList; prototype: DOMRectList; }; DOMRectReadOnly: { new (x?: number, y?: number, width?: number, height?: number): DOMRectReadOnly; prototype: DOMRectReadOnly; fromRect: (other?: DOMRectInit) => DOMRectReadOnly; }; DOMStringList: { new (): DOMStringList; prototype: DOMStringList; }; DOMStringMap: { new (): DOMStringMap; prototype: DOMStringMap; }; DOMTokenList: { new (): DOMTokenList; prototype: DOMTokenList; }; DataTransfer: { new (): DataTransfer; prototype: DataTransfer; }; DataTransferItem: { new (): DataTransferItem; prototype: DataTransferItem; }; DataTransferItemList: { new (): DataTransferItemList; prototype: DataTransferItemList; }; DecompressionStream: { new (format: CompressionFormat): DecompressionStream; prototype: DecompressionStream; }; DelayNode: { new (context: BaseAudioContext, options?: DelayOptions): DelayNode; prototype: DelayNode; }; DeviceMotionEvent: { new (type: string, eventInitDict?: DeviceMotionEventInit): DeviceMotionEvent; prototype: DeviceMotionEvent; }; DeviceOrientationEvent: { new (type: string, eventInitDict?: DeviceOrientationEventInit): DeviceOrientationEvent; prototype: DeviceOrientationEvent; }; Document: { new (): Document; prototype: Document; parseHTMLUnsafe: (html: string) => Document; }; DocumentFragment: { new (): DocumentFragment; prototype: DocumentFragment; }; DocumentTimeline: { new (options?: DocumentTimelineOptions): DocumentTimeline; prototype: DocumentTimeline; }; DocumentType: { new (): DocumentType; prototype: DocumentType; }; DragEvent: { new (type: string, eventInitDict?: DragEventInit): DragEvent; prototype: DragEvent; }; DynamicsCompressorNode: { new (context: BaseAudioContext, options?: DynamicsCompressorOptions): DynamicsCompressorNode; prototype: DynamicsCompressorNode; }; Element: { new (): Element; prototype: Element; }; ElementInternals: { new (): ElementInternals; prototype: ElementInternals; }; EncodedVideoChunk: { new (init: EncodedVideoChunkInit): EncodedVideoChunk; prototype: EncodedVideoChunk; }; ErrorEvent: { new (type: string, eventInitDict?: ErrorEventInit): ErrorEvent; prototype: ErrorEvent; }; Event: { new (type: string, eventInitDict?: EventInit): Event; prototype: Event; readonly NONE: 0; readonly CAPTURING_PHASE: 1; readonly AT_TARGET: 2; readonly BUBBLING_PHASE: 3; }; EventCounts: { new (): EventCounts; prototype: EventCounts; }; EventSource: { new (url: string | URL, eventSourceInitDict?: EventSourceInit): EventSource; prototype: EventSource; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSED: 2; }; EventTarget: { new (): EventTarget; prototype: EventTarget; }; External: { new (): External; prototype: External; }; File: { new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag): File; prototype: File; }; FileList: { new (): FileList; prototype: FileList; }; FileReader: { new (): FileReader; prototype: FileReader; readonly EMPTY: 0; readonly LOADING: 1; readonly DONE: 2; }; FileSystem: { new (): FileSystem; prototype: FileSystem; }; FileSystemDirectoryEntry: { new (): FileSystemDirectoryEntry; prototype: FileSystemDirectoryEntry; }; FileSystemDirectoryHandle: { new (): FileSystemDirectoryHandle; prototype: FileSystemDirectoryHandle; }; FileSystemDirectoryReader: { new (): FileSystemDirectoryReader; prototype: FileSystemDirectoryReader; }; FileSystemEntry: { new (): FileSystemEntry; prototype: FileSystemEntry; }; FileSystemFileEntry: { new (): FileSystemFileEntry; prototype: FileSystemFileEntry; }; FileSystemFileHandle: { new (): FileSystemFileHandle; prototype: FileSystemFileHandle; }; FileSystemHandle: { new (): FileSystemHandle; prototype: FileSystemHandle; }; FileSystemWritableFileStream: { new (): FileSystemWritableFileStream; prototype: FileSystemWritableFileStream; }; FocusEvent: { new (type: string, eventInitDict?: FocusEventInit): FocusEvent; prototype: FocusEvent; }; FontFace: { new (family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors): FontFace; prototype: FontFace; }; FontFaceSet: { new (initialFaces: FontFace[]): FontFaceSet; prototype: FontFaceSet; }; FontFaceSetLoadEvent: { new (type: string, eventInitDict?: FontFaceSetLoadEventInit): FontFaceSetLoadEvent; prototype: FontFaceSetLoadEvent; }; FormData: { new (form?: HTMLFormElement, submitter?: HTMLElement): FormData; prototype: FormData; }; FormDataEvent: { new (type: string, eventInitDict: FormDataEventInit): FormDataEvent; prototype: FormDataEvent; }; GainNode: { new (context: BaseAudioContext, options?: GainOptions): GainNode; prototype: GainNode; }; Gamepad: { new (): Gamepad; prototype: Gamepad; }; GamepadButton: { new (): GamepadButton; prototype: GamepadButton; }; GamepadEvent: { new (type: string, eventInitDict: GamepadEventInit): GamepadEvent; prototype: GamepadEvent; }; GamepadHapticActuator: { new (): GamepadHapticActuator; prototype: GamepadHapticActuator; }; Geolocation: { new (): Geolocation; prototype: Geolocation; }; GeolocationCoordinates: { new (): GeolocationCoordinates; prototype: GeolocationCoordinates; }; GeolocationPosition: { new (): GeolocationPosition; prototype: GeolocationPosition; }; GeolocationPositionError: { new (): GeolocationPositionError; prototype: GeolocationPositionError; readonly PERMISSION_DENIED: 1; readonly POSITION_UNAVAILABLE: 2; readonly TIMEOUT: 3; }; HTMLAllCollection: { new (): HTMLAllCollection; prototype: HTMLAllCollection; }; HTMLAnchorElement: { new (): HTMLAnchorElement; prototype: HTMLAnchorElement; }; HTMLAreaElement: { new (): HTMLAreaElement; prototype: HTMLAreaElement; }; HTMLAudioElement: { new (): HTMLAudioElement; prototype: HTMLAudioElement; }; HTMLBRElement: { new (): HTMLBRElement; prototype: HTMLBRElement; }; HTMLBaseElement: { new (): HTMLBaseElement; prototype: HTMLBaseElement; }; HTMLBodyElement: { new (): HTMLBodyElement; prototype: HTMLBodyElement; }; HTMLButtonElement: { new (): HTMLButtonElement; prototype: HTMLButtonElement; }; HTMLCanvasElement: { new (): HTMLCanvasElement; prototype: HTMLCanvasElement; }; HTMLCollection: { new (): HTMLCollection; prototype: HTMLCollection; }; HTMLDListElement: { new (): HTMLDListElement; prototype: HTMLDListElement; }; HTMLDataElement: { new (): HTMLDataElement; prototype: HTMLDataElement; }; HTMLDataListElement: { new (): HTMLDataListElement; prototype: HTMLDataListElement; }; HTMLDetailsElement: { new (): HTMLDetailsElement; prototype: HTMLDetailsElement; }; HTMLDialogElement: { new (): HTMLDialogElement; prototype: HTMLDialogElement; }; HTMLDirectoryElement: { new (): HTMLDirectoryElement; prototype: HTMLDirectoryElement; }; HTMLDivElement: { new (): HTMLDivElement; prototype: HTMLDivElement; }; HTMLDocument: { new (): HTMLDocument; prototype: HTMLDocument; }; HTMLElement: { new (): HTMLElement; prototype: HTMLElement; }; HTMLEmbedElement: { new (): HTMLEmbedElement; prototype: HTMLEmbedElement; }; HTMLFieldSetElement: { new (): HTMLFieldSetElement; prototype: HTMLFieldSetElement; }; HTMLFontElement: { new (): HTMLFontElement; prototype: HTMLFontElement; }; HTMLFormControlsCollection: { new (): HTMLFormControlsCollection; prototype: HTMLFormControlsCollection; }; HTMLFormElement: { new (): HTMLFormElement; prototype: HTMLFormElement; }; HTMLFrameElement: { new (): HTMLFrameElement; prototype: HTMLFrameElement; }; HTMLFrameSetElement: { new (): HTMLFrameSetElement; prototype: HTMLFrameSetElement; }; HTMLHRElement: { new (): HTMLHRElement; prototype: HTMLHRElement; }; HTMLHeadElement: { new (): HTMLHeadElement; prototype: HTMLHeadElement; }; HTMLHeadingElement: { new (): HTMLHeadingElement; prototype: HTMLHeadingElement; }; HTMLHtmlElement: { new (): HTMLHtmlElement; prototype: HTMLHtmlElement; }; HTMLIFrameElement: { new (): HTMLIFrameElement; prototype: HTMLIFrameElement; }; HTMLImageElement: { new (): HTMLImageElement; prototype: HTMLImageElement; }; HTMLInputElement: { new (): HTMLInputElement; prototype: HTMLInputElement; }; HTMLLIElement: { new (): HTMLLIElement; prototype: HTMLLIElement; }; HTMLLabelElement: { new (): HTMLLabelElement; prototype: HTMLLabelElement; }; HTMLLegendElement: { new (): HTMLLegendElement; prototype: HTMLLegendElement; }; HTMLLinkElement: { new (): HTMLLinkElement; prototype: HTMLLinkElement; }; HTMLMapElement: { new (): HTMLMapElement; prototype: HTMLMapElement; }; HTMLMarqueeElement: { new (): HTMLMarqueeElement; prototype: HTMLMarqueeElement; }; HTMLMediaElement: { new (): HTMLMediaElement; prototype: HTMLMediaElement; readonly NETWORK_EMPTY: 0; readonly NETWORK_IDLE: 1; readonly NETWORK_LOADING: 2; readonly NETWORK_NO_SOURCE: 3; readonly HAVE_NOTHING: 0; readonly HAVE_METADATA: 1; readonly HAVE_CURRENT_DATA: 2; readonly HAVE_FUTURE_DATA: 3; readonly HAVE_ENOUGH_DATA: 4; }; HTMLMenuElement: { new (): HTMLMenuElement; prototype: HTMLMenuElement; }; HTMLMetaElement: { new (): HTMLMetaElement; prototype: HTMLMetaElement; }; HTMLMeterElement: { new (): HTMLMeterElement; prototype: HTMLMeterElement; }; HTMLModElement: { new (): HTMLModElement; prototype: HTMLModElement; }; HTMLOListElement: { new (): HTMLOListElement; prototype: HTMLOListElement; }; HTMLObjectElement: { new (): HTMLObjectElement; prototype: HTMLObjectElement; }; HTMLOptGroupElement: { new (): HTMLOptGroupElement; prototype: HTMLOptGroupElement; }; HTMLOptionElement: { new (): HTMLOptionElement; prototype: HTMLOptionElement; }; HTMLOptionsCollection: { new (): HTMLOptionsCollection; prototype: HTMLOptionsCollection; }; HTMLOutputElement: { new (): HTMLOutputElement; prototype: HTMLOutputElement; }; HTMLParagraphElement: { new (): HTMLParagraphElement; prototype: HTMLParagraphElement; }; HTMLParamElement: { new (): HTMLParamElement; prototype: HTMLParamElement; }; HTMLPictureElement: { new (): HTMLPictureElement; prototype: HTMLPictureElement; }; HTMLPreElement: { new (): HTMLPreElement; prototype: HTMLPreElement; }; HTMLProgressElement: { new (): HTMLProgressElement; prototype: HTMLProgressElement; }; HTMLQuoteElement: { new (): HTMLQuoteElement; prototype: HTMLQuoteElement; }; HTMLScriptElement: { new (): HTMLScriptElement; prototype: HTMLScriptElement; supports: (type: string) => boolean; }; HTMLSelectElement: { new (): HTMLSelectElement; prototype: HTMLSelectElement; }; HTMLSlotElement: { new (): HTMLSlotElement; prototype: HTMLSlotElement; }; HTMLSourceElement: { new (): HTMLSourceElement; prototype: HTMLSourceElement; }; HTMLSpanElement: { new (): HTMLSpanElement; prototype: HTMLSpanElement; }; HTMLStyleElement: { new (): HTMLStyleElement; prototype: HTMLStyleElement; }; HTMLTableCaptionElement: { new (): HTMLTableCaptionElement; prototype: HTMLTableCaptionElement; }; HTMLTableCellElement: { new (): HTMLTableCellElement; prototype: HTMLTableCellElement; }; HTMLTableColElement: { new (): HTMLTableColElement; prototype: HTMLTableColElement; }; HTMLTableElement: { new (): HTMLTableElement; prototype: HTMLTableElement; }; HTMLTableRowElement: { new (): HTMLTableRowElement; prototype: HTMLTableRowElement; }; HTMLTableSectionElement: { new (): HTMLTableSectionElement; prototype: HTMLTableSectionElement; }; HTMLTemplateElement: { new (): HTMLTemplateElement; prototype: HTMLTemplateElement; }; HTMLTextAreaElement: { new (): HTMLTextAreaElement; prototype: HTMLTextAreaElement; }; HTMLTimeElement: { new (): HTMLTimeElement; prototype: HTMLTimeElement; }; HTMLTitleElement: { new (): HTMLTitleElement; prototype: HTMLTitleElement; }; HTMLTrackElement: { new (): HTMLTrackElement; prototype: HTMLTrackElement; readonly NONE: 0; readonly LOADING: 1; readonly LOADED: 2; readonly ERROR: 3; }; HTMLUListElement: { new (): HTMLUListElement; prototype: HTMLUListElement; }; HTMLUnknownElement: { new (): HTMLUnknownElement; prototype: HTMLUnknownElement; }; HTMLVideoElement: { new (): HTMLVideoElement; prototype: HTMLVideoElement; }; HashChangeEvent: { new (type: string, eventInitDict?: HashChangeEventInit): HashChangeEvent; prototype: HashChangeEvent; }; Headers: { new (init?: HeadersInit): Headers; prototype: Headers; }; Highlight: { new (...initialRanges: AbstractRange[]): Highlight; prototype: Highlight; }; HighlightRegistry: { new (): HighlightRegistry; prototype: HighlightRegistry; }; History: { new (): History; prototype: History; }; IDBCursor: { new (): IDBCursor; prototype: IDBCursor; }; IDBCursorWithValue: { new (): IDBCursorWithValue; prototype: IDBCursorWithValue; }; IDBDatabase: { new (): IDBDatabase; prototype: IDBDatabase; }; IDBFactory: { new (): IDBFactory; prototype: IDBFactory; }; IDBIndex: { new (): IDBIndex; prototype: IDBIndex; }; IDBKeyRange: { new (): IDBKeyRange; prototype: IDBKeyRange; bound: (lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean) => IDBKeyRange; lowerBound: (lower: any, open?: boolean) => IDBKeyRange; only: (value: any) => IDBKeyRange; upperBound: (upper: any, open?: boolean) => IDBKeyRange; }; IDBObjectStore: { new (): IDBObjectStore; prototype: IDBObjectStore; }; IDBOpenDBRequest: { new (): IDBOpenDBRequest; prototype: IDBOpenDBRequest; }; IDBRequest: { new (): IDBRequest<any>; prototype: IDBRequest<any>; }; IDBTransaction: { new (): IDBTransaction; prototype: IDBTransaction; }; IDBVersionChangeEvent: { new (type: string, eventInitDict?: IDBVersionChangeEventInit): IDBVersionChangeEvent; prototype: IDBVersionChangeEvent; }; IIRFilterNode: { new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode; prototype: IIRFilterNode; }; IdleDeadline: { new (): IdleDeadline; prototype: IdleDeadline; }; ImageBitmap: { new (): ImageBitmap; prototype: ImageBitmap; }; ImageBitmapRenderingContext: { new (): ImageBitmapRenderingContext; prototype: ImageBitmapRenderingContext; }; ImageData: { new (sw: number, sh: number, settings?: ImageDataSettings): ImageData; new (data: Uint8ClampedArray<ArrayBuffer>, sw: number, sh?: number, settings?: ImageDataSettings): ImageData; prototype: ImageData; }; InputDeviceInfo: { new (): InputDeviceInfo; prototype: InputDeviceInfo; }; InputEvent: { new (type: string, eventInitDict?: InputEventInit): InputEvent; prototype: InputEvent; }; IntersectionObserver: { new (callback: IntersectionObserverCallback, options?: IntersectionObserverInit): IntersectionObserver; prototype: IntersectionObserver; }; IntersectionObserverEntry: { new (intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry; prototype: IntersectionObserverEntry; }; KeyboardEvent: { new (type: string, eventInitDict?: KeyboardEventInit): KeyboardEvent; prototype: KeyboardEvent; readonly DOM_KEY_LOCATION_STANDARD: 0; readonly DOM_KEY_LOCATION_LEFT: 1; readonly DOM_KEY_LOCATION_RIGHT: 2; readonly DOM_KEY_LOCATION_NUMPAD: 3; }; KeyframeEffect: { new (target: Element, keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeEffectOptions): KeyframeEffect; new (source: KeyframeEffect): KeyframeEffect; prototype: KeyframeEffect; }; LargestContentfulPaint: { new (): LargestContentfulPaint; prototype: LargestContentfulPaint; }; Location: { new (): Location; prototype: Location; }; Lock: { new (): Lock; prototype: Lock; }; LockManager: { new (): LockManager; prototype: LockManager; }; MIDIAccess: { new (): MIDIAccess; prototype: MIDIAccess; }; MIDIConnectionEvent: { new (type: string, eventInitDict?: MIDIConnectionEventInit): MIDIConnectionEvent; prototype: MIDIConnectionEvent; }; MIDIInput: { new (): MIDIInput; prototype: MIDIInput; }; MIDIInputMap: { new (): MIDIInputMap; prototype: MIDIInputMap; }; MIDIMessageEvent: { new (type: string, eventInitDict?: MIDIMessageEventInit): MIDIMessageEvent; prototype: MIDIMessageEvent; }; MIDIOutput: { new (): MIDIOutput; prototype: MIDIOutput; }; MIDIOutputMap: { new (): MIDIOutputMap; prototype: MIDIOutputMap; }; MIDIPort: { new (): MIDIPort; prototype: MIDIPort; }; MathMLElement: { new (): MathMLElement; prototype: MathMLElement; }; MediaCapabilities: { new (): MediaCapabilities; prototype: MediaCapabilities; }; MediaDeviceInfo: { new (): MediaDeviceInfo; prototype: MediaDeviceInfo; }; MediaDevices: { new (): MediaDevices; prototype: MediaDevices; }; MediaElementAudioSourceNode: { new (context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode; prototype: MediaElementAudioSourceNode; }; MediaEncryptedEvent: { new (type: string, eventInitDict?: MediaEncryptedEventInit): MediaEncryptedEvent; prototype: MediaEncryptedEvent; }; MediaError: { new (): MediaError; prototype: MediaError; readonly MEDIA_ERR_ABORTED: 1; readonly MEDIA_ERR_NETWORK: 2; readonly MEDIA_ERR_DECODE: 3; readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4; }; MediaKeyMessageEvent: { new (type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent; prototype: MediaKeyMessageEvent; }; MediaKeySession: { new (): MediaKeySession; prototype: MediaKeySession; }; MediaKeyStatusMap: { new (): MediaKeyStatusMap; prototype: MediaKeyStatusMap; }; MediaKeySystemAccess: { new (): MediaKeySystemAccess; prototype: MediaKeySystemAccess; }; MediaKeys: { new (): MediaKeys; prototype: MediaKeys; }; MediaList: { new (): MediaList; prototype: MediaList; }; MediaMetadata: { new (init?: MediaMetadataInit): MediaMetadata; prototype: MediaMetadata; }; MediaQueryList: { new (): MediaQueryList; prototype: MediaQueryList; }; MediaQueryListEvent: { new (type: string, eventInitDict?: MediaQueryListEventInit): MediaQueryListEvent; prototype: MediaQueryListEvent; }; MediaRecorder: { new (stream: MediaStream, options?: MediaRecorderOptions): MediaRecorder; prototype: MediaRecorder; isTypeSupported: (type: string) => boolean; }; MediaSession: { new (): MediaSession; prototype: MediaSession; }; MediaSource: { new (): MediaSource; prototype: MediaSource; readonly canConstructInDedicatedWorker: boolean; isTypeSupported: (type: string) => boolean; }; MediaSourceHandle: { new (): MediaSourceHandle; prototype: MediaSourceHandle; }; MediaStream: { new (): MediaStream; new (stream: MediaStream): MediaStream; new (tracks: MediaStreamTrack[]): MediaStream; prototype: MediaStream; }; MediaStreamAudioDestinationNode: { new (context: AudioContext, options?: AudioNodeOptions): MediaStreamAudioDestinationNode; prototype: MediaStreamAudioDestinationNode; }; MediaStreamAudioSourceNode: { new (context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode; prototype: MediaStreamAudioSourceNode; }; MediaStreamTrack: { new (): MediaStreamTrack; prototype: MediaStreamTrack; }; MediaStreamTrackEvent: { new (type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent; prototype: MediaStreamTrackEvent; }; MessageChannel: { new (): MessageChannel; prototype: MessageChannel; }; MessageEvent: { new <T>(type: string, eventInitDict?: MessageEventInit<T>): MessageEvent<T>; prototype: MessageEvent<any>; }; MessagePort: { new (): MessagePort; prototype: MessagePort; }; MimeType: { new (): MimeType; prototype: MimeType; }; MimeTypeArray: { new (): MimeTypeArray; prototype: MimeTypeArray; }; MouseEvent: { new (type: string, eventInitDict?: MouseEventInit): MouseEvent; prototype: MouseEvent; }; MutationEvent: { new (): MutationEvent; prototype: MutationEvent; readonly MODIFICATION: 1; readonly ADDITION: 2; readonly REMOVAL: 3; }; MutationObserver: { new (callback: MutationCallback): MutationObserver; prototype: MutationObserver; }; MutationRecord: { new (): MutationRecord; prototype: MutationRecord; }; NamedNodeMap: { new (): NamedNodeMap; prototype: NamedNodeMap; }; NavigationPreloadManager: { new (): NavigationPreloadManager; prototype: NavigationPreloadManager; }; Navigator: { new (): Navigator; prototype: Navigator; }; Node: { new (): Node; prototype: Node; readonly ELEMENT_NODE: 1; readonly ATTRIBUTE_NODE: 2; readonly TEXT_NODE: 3; readonly CDATA_SECTION_NODE: 4; readonly ENTITY_REFERENCE_NODE: 5; readonly ENTITY_NODE: 6; readonly PROCESSING_INSTRUCTION_NODE: 7; readonly COMMENT_NODE: 8; readonly DOCUMENT_NODE: 9; readonly DOCUMENT_TYPE_NODE: 10; readonly DOCUMENT_FRAGMENT_NODE: 11; readonly NOTATION_NODE: 12; readonly DOCUMENT_POSITION_DISCONNECTED: 1; readonly DOCUMENT_POSITION_PRECEDING: 2; readonly DOCUMENT_POSITION_FOLLOWING: 4; readonly DOCUMENT_POSITION_CONTAINS: 8; readonly DOCUMENT_POSITION_CONTAINED_BY: 16; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32; }; NodeIterator: { new (): NodeIterator; prototype: NodeIterator; }; NodeList: { new (): NodeList; prototype: NodeList; }; Notification: { new (title: string, options?: NotificationOptions): Notification; prototype: Notification; readonly permission: NotificationPermission; requestPermission: (deprecatedCallback?: NotificationPermissionCallback) => Promise<NotificationPermission>; }; OfflineAudioCompletionEvent: { new (type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent; prototype: OfflineAudioCompletionEvent; }; OfflineAudioContext: { new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext; new (numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; prototype: OfflineAudioContext; }; OffscreenCanvas: { new (width: number, height: number): OffscreenCanvas; prototype: OffscreenCanvas; }; OffscreenCanvasRenderingContext2D: { new (): OffscreenCanvasRenderingContext2D; prototype: OffscreenCanvasRenderingContext2D; }; OscillatorNode: { new (context: BaseAudioContext, options?: OscillatorOptions): OscillatorNode; prototype: OscillatorNode; }; OverconstrainedError: { new (constraint: string, message?: string): OverconstrainedError; prototype: OverconstrainedError; }; PageTransitionEvent: { new (type: string, eventInitDict?: PageTransitionEventInit): PageTransitionEvent; prototype: PageTransitionEvent; }; PannerNode: { new (context: BaseAudioContext, options?: PannerOptions): PannerNode; prototype: PannerNode; }; Path2D: { new (path?: string | Path2D): Path2D; prototype: Path2D; }; PaymentMethodChangeEvent: { new (type: string, eventInitDict?: PaymentMethodChangeEventInit): PaymentMethodChangeEvent; prototype: PaymentMethodChangeEvent; }; PaymentRequest: { new (methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest; prototype: PaymentRequest; }; PaymentRequestUpdateEvent: { new (type: string, eventInitDict?: PaymentRequestUpdateEventInit): PaymentRequestUpdateEvent; prototype: PaymentRequestUpdateEvent; }; PaymentResponse: { new (): PaymentResponse; prototype: PaymentResponse; }; Performance: { new (): Performance; prototype: Performance; }; PerformanceEntry: { new (): PerformanceEntry; prototype: PerformanceEntry; }; PerformanceEventTiming: { new (): PerformanceEventTiming; prototype: PerformanceEventTiming; }; PerformanceMark: { new (markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark; prototype: PerformanceMark; }; PerformanceMeasure: { new (): PerformanceMeasure; prototype: PerformanceMeasure; }; PerformanceNavigation: { new (): PerformanceNavigation; prototype: PerformanceNavigation; readonly TYPE_NAVIGATE: 0; readonly TYPE_RELOAD: 1; readonly TYPE_BACK_FORWARD: 2; readonly TYPE_RESERVED: 255; }; PerformanceNavigationTiming: { new (): PerformanceNavigationTiming; prototype: PerformanceNavigationTiming; }; PerformanceObserver: { new (callback: PerformanceObserverCallback): PerformanceObserver; prototype: PerformanceObserver; readonly supportedEntryTypes: readonly string[]; }; PerformanceObserverEntryList: { new (): PerformanceObserverEntryList; prototype: PerformanceObserverEntryList; }; PerformancePaintTiming: { new (): PerformancePaintTiming; prototype: PerformancePaintTiming; }; PerformanceResourceTiming: { new (): PerformanceResourceTiming; prototype: PerformanceResourceTiming; }; PerformanceServerTiming: { new (): PerformanceServerTiming; prototype: PerformanceServerTiming; }; PerformanceTiming: { new (): PerformanceTiming; prototype: PerformanceTiming; }; PeriodicWave: { new (context: BaseAudioContext, options?: PeriodicWaveOptions): PeriodicWave; prototype: PeriodicWave; }; PermissionStatus: { new (): PermissionStatus; prototype: PermissionStatus; }; Permissions: { new (): Permissions; prototype: Permissions; }; PictureInPictureEvent: { new (type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent; prototype: PictureInPictureEvent; }; PictureInPictureWindow: { new (): PictureInPictureWindow; prototype: PictureInPictureWindow; }; Plugin: { new (): Plugin; prototype: Plugin; }; PluginArray: { new (): PluginArray; prototype: PluginArray; }; PointerEvent: { new (type: string, eventInitDict?: PointerEventInit): PointerEvent; prototype: PointerEvent; }; PopStateEvent: { new (type: string, eventInitDict?: PopStateEventInit): PopStateEvent; prototype: PopStateEvent; }; ProcessingInstruction: { new (): ProcessingInstruction; prototype: ProcessingInstruction; }; ProgressEvent: { new (type: string, eventInitDict?: ProgressEventInit): ProgressEvent<EventTarget>; prototype: ProgressEvent<EventTarget>; }; PromiseRejectionEvent: { new (type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent; prototype: PromiseRejectionEvent; }; PublicKeyCredential: { new (): PublicKeyCredential; prototype: PublicKeyCredential; isConditionalMediationAvailable: () => Promise<boolean>; isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>; }; PushManager: { new (): PushManager; prototype: PushManager; readonly supportedContentEncodings: readonly string[]; }; PushSubscription: { new (): PushSubscription; prototype: PushSubscription; }; PushSubscriptionOptions: { new (): PushSubscriptionOptions; prototype: PushSubscriptionOptions; }; RTCCertificate: { new (): RTCCertificate; prototype: RTCCertificate; }; RTCDTMFSender: { new (): RTCDTMFSender; prototype: RTCDTMFSender; }; RTCDTMFToneChangeEvent: { new (type: string, eventInitDict?: RTCDTMFToneChangeEventInit): RTCDTMFToneChangeEvent; prototype: RTCDTMFToneChangeEvent; }; RTCDataChannel: { new (): RTCDataChannel; prototype: RTCDataChannel; }; RTCDataChannelEvent: { new (type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent; prototype: RTCDataChannelEvent; }; RTCDtlsTransport: { new (): RTCDtlsTransport; prototype: RTCDtlsTransport; }; RTCEncodedAudioFrame: { new (): RTCEncodedAudioFrame; prototype: RTCEncodedAudioFrame; }; RTCEncodedVideoFrame: { new (): RTCEncodedVideoFrame; prototype: RTCEncodedVideoFrame; }; RTCError: { new (init: RTCErrorInit, message?: string): RTCError; prototype: RTCError; }; RTCErrorEvent: { new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent; prototype: RTCErrorEvent; }; RTCIceCandidate: { new (candidateInitDict?: RTCIceCandidateInit): RTCIceCandidate; prototype: RTCIceCandidate; }; RTCIceTransport: { new (): RTCIceTransport; prototype: RTCIceTransport; }; RTCPeerConnection: { new (configuration?: RTCConfiguration): RTCPeerConnection; prototype: RTCPeerConnection; generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate>; }; RTCPeerConnectionIceErrorEvent: { new (type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent; prototype: RTCPeerConnectionIceErrorEvent; }; RTCPeerConnectionIceEvent: { new (type: string, eventInitDict?: RTCPeerConnectionIceEventInit): RTCPeerConnectionIceEvent; prototype: RTCPeerConnectionIceEvent; }; RTCRtpReceiver: { new (): RTCRtpReceiver; prototype: RTCRtpReceiver; getCapabilities: (kind: string) => RTCRtpCapabilities; }; RTCRtpScriptTransform: { new (worker: Worker, options?: any, transfer?: any[]): RTCRtpScriptTransform; prototype: RTCRtpScriptTransform; }; RTCRtpSender: { new (): RTCRtpSender; prototype: RTCRtpSender; getCapabilities: (kind: string) => RTCRtpCapabilities; }; RTCRtpTransceiver: { new (): RTCRtpTransceiver; prototype: RTCRtpTransceiver; }; RTCSctpTransport: { new (): RTCSctpTransport; prototype: RTCSctpTransport; }; RTCSessionDescription: { new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription; prototype: RTCSessionDescription; }; RTCStatsReport: { new (): RTCStatsReport; prototype: RTCStatsReport; }; RTCTrackEvent: { new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent; prototype: RTCTrackEvent; }; RadioNodeList: { new (): RadioNodeList; prototype: RadioNodeList; }; Range: { new (): Range; prototype: Range; readonly START_TO_START: 0; readonly START_TO_END: 1; readonly END_TO_END: 2; readonly END_TO_START: 3; }; ReadableByteStreamController: { new (): ReadableByteStreamController; prototype: ReadableByteStreamController; }; ReadableStream: { new (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number; }): ReadableStream<Uint8Array<ArrayBuffer>>; new <R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>; new <R>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>; prototype: ReadableStream<any>; }; ReadableStreamBYOBReader: { new (stream: ReadableStream<any>): ReadableStreamBYOBReader; prototype: ReadableStreamBYOBReader; }; ReadableStreamBYOBRequest: { new (): ReadableStreamBYOBRequest; prototype: ReadableStreamBYOBRequest; }; ReadableStreamDefaultController: { new (): ReadableStreamDefaultController<any>; prototype: ReadableStreamDefaultController<any>; }; ReadableStreamDefaultReader: { new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>; prototype: ReadableStreamDefaultReader<any>; }; RemotePlayback: { new (): RemotePlayback; prototype: RemotePlayback; }; Report: { new (): Report; prototype: Report; }; ReportBody: { new (): ReportBody; prototype: ReportBody; }; ReportingObserver: { new (callback: ReportingObserverCallback, options?: ReportingObserverOptions): ReportingObserver; prototype: ReportingObserver; }; Request: { new (input: URL | RequestInfo, init?: RequestInit): Request; prototype: Request; }; ResizeObserver: { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }; ResizeObserverEntry: { new (): ResizeObserverEntry; prototype: ResizeObserverEntry; }; ResizeObserverSize: { new (): ResizeObserverSize; prototype: ResizeObserverSize; }; Response: { new (body?: BodyInit, init?: ResponseInit): Response; prototype: Response; error: () => Response; json: (data: any, init?: ResponseInit) => Response; redirect: (url: string | URL, status?: number) => Response; }; SVGAElement: { new (): SVGAElement; prototype: SVGAElement; }; SVGAngle: { new (): SVGAngle; prototype: SVGAngle; readonly SVG_ANGLETYPE_UNKNOWN: 0; readonly SVG_ANGLETYPE_UNSPECIFIED: 1; readonly SVG_ANGLETYPE_DEG: 2; readonly SVG_ANGLETYPE_RAD: 3; readonly SVG_ANGLETYPE_GRAD: 4; }; SVGAnimateElement: { new (): SVGAnimateElement; prototype: SVGAnimateElement; }; SVGAnimateMotionElement: { new (): SVGAnimateMotionElement; prototype: SVGAnimateMotionElement; }; SVGAnimateTransformElement: { new (): SVGAnimateTransformElement; prototype: SVGAnimateTransformElement; }; SVGAnimatedAngle: { new (): SVGAnimatedAngle; prototype: SVGAnimatedAngle; }; SVGAnimatedBoolean: { new (): SVGAnimatedBoolean; prototype: SVGAnimatedBoolean; }; SVGAnimatedEnumeration: { new (): SVGAnimatedEnumeration; prototype: SVGAnimatedEnumeration; }; SVGAnimatedInteger: { new (): SVGAnimatedInteger; prototype: SVGAnimatedInteger; }; SVGAnimatedLength: { new (): SVGAnimatedLength; prototype: SVGAnimatedLength; }; SVGAnimatedLengthList: { new (): SVGAnimatedLengthList; prototype: SVGAnimatedLengthList; }; SVGAnimatedNumber: { new (): SVGAnimatedNumber; prototype: SVGAnimatedNumber; }; SVGAnimatedNumberList: { new (): SVGAnimatedNumberList; prototype: SVGAnimatedNumberList; }; SVGAnimatedPreserveAspectRatio: { new (): SVGAnimatedPreserveAspectRatio; prototype: SVGAnimatedPreserveAspectRatio; }; SVGAnimatedRect: { new (): SVGAnimatedRect; prototype: SVGAnimatedRect; }; SVGAnimatedString: { new (): SVGAnimatedString; prototype: SVGAnimatedString; }; SVGAnimatedTransformList: { new (): SVGAnimatedTransformList; prototype: SVGAnimatedTransformList; }; SVGAnimationElement: { new (): SVGAnimationElement; prototype: SVGAnimationElement; }; SVGCircleElement: { new (): SVGCircleElement; prototype: SVGCircleElement; }; SVGClipPathElement: { new (): SVGClipPathElement; prototype: SVGClipPathElement; }; SVGComponentTransferFunctionElement: { new (): SVGComponentTransferFunctionElement; prototype: SVGComponentTransferFunctionElement; readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5; }; SVGDefsElement: { new (): SVGDefsElement; prototype: SVGDefsElement; }; SVGDescElement: { new (): SVGDescElement; prototype: SVGDescElement; }; SVGElement: { new (): SVGElement; prototype: SVGElement; }; SVGEllipseElement: { new (): SVGEllipseElement; prototype: SVGEllipseElement; }; SVGFEBlendElement: { new (): SVGFEBlendElement; prototype: SVGFEBlendElement; readonly SVG_FEBLEND_MODE_UNKNOWN: 0; readonly SVG_FEBLEND_MODE_NORMAL: 1; readonly SVG_FEBLEND_MODE_MULTIPLY: 2; readonly SVG_FEBLEND_MODE_SCREEN: 3; readonly SVG_FEBLEND_MODE_DARKEN: 4; readonly SVG_FEBLEND_MODE_LIGHTEN: 5; readonly SVG_FEBLEND_MODE_OVERLAY: 6; readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7; readonly SVG_FEBLEND_MODE_COLOR_BURN: 8; readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9; readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10; readonly SVG_FEBLEND_MODE_DIFFERENCE: 11; readonly SVG_FEBLEND_MODE_EXCLUSION: 12; readonly SVG_FEBLEND_MODE_HUE: 13; readonly SVG_FEBLEND_MODE_SATURATION: 14; readonly SVG_FEBLEND_MODE_COLOR: 15; readonly SVG_FEBLEND_MODE_LUMINOSITY: 16; }; SVGFEColorMatrixElement: { new (): SVGFEColorMatrixElement; prototype: SVGFEColorMatrixElement; readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1; readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2; readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4; }; SVGFEComponentTransferElement: { new (): SVGFEComponentTransferElement; prototype: SVGFEComponentTransferElement; }; SVGFECompositeElement: { new (): SVGFECompositeElement; prototype: SVGFECompositeElement; readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1; readonly SVG_FECOMPOSITE_OPERATOR_IN: 2; readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3; readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4; readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5; readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6; }; SVGFEConvolveMatrixElement: { new (): SVGFEConvolveMatrixElement; prototype: SVGFEConvolveMatrixElement; readonly SVG_EDGEMODE_UNKNOWN: 0; readonly SVG_EDGEMODE_DUPLICATE: 1; readonly SVG_EDGEMODE_WRAP: 2; readonly SVG_EDGEMODE_NONE: 3; }; SVGFEDiffuseLightingElement: { new (): SVGFEDiffuseLightingElement; prototype: SVGFEDiffuseLightingElement; }; SVGFEDisplacementMapElement: { new (): SVGFEDisplacementMapElement; prototype: SVGFEDisplacementMapElement; readonly SVG_CHANNEL_UNKNOWN: 0; readonly SVG_CHANNEL_R: 1; readonly SVG_CHANNEL_G: 2; readonly SVG_CHANNEL_B: 3; readonly SVG_CHANNEL_A: 4; }; SVGFEDistantLightElement: { new (): SVGFEDistantLightElement; prototype: SVGFEDistantLightElement; }; SVGFEDropShadowElement: { new (): SVGFEDropShadowElement; prototype: SVGFEDropShadowElement; }; SVGFEFloodElement: { new (): SVGFEFloodElement; prototype: SVGFEFloodElement; }; SVGFEFuncAElement: { new (): SVGFEFuncAElement; prototype: SVGFEFuncAElement; }; SVGFEFuncBElement: { new (): SVGFEFuncBElement; prototype: SVGFEFuncBElement; }; SVGFEFuncGElement: { new (): SVGFEFuncGElement; prototype: SVGFEFuncGElement; }; SVGFEFuncRElement: { new (): SVGFEFuncRElement; prototype: SVGFEFuncRElement; }; SVGFEGaussianBlurElement: { new (): SVGFEGaussianBlurElement; prototype: SVGFEGaussianBlurElement; }; SVGFEImageElement: { new (): SVGFEImageElement; prototype: SVGFEImageElement; }; SVGFEMergeElement: { new (): SVGFEMergeElement; prototype: SVGFEMergeElement; }; SVGFEMergeNodeElement: { new (): SVGFEMergeNodeElement; prototype: SVGFEMergeNodeElement; }; SVGFEMorphologyElement: { new (): SVGFEMorphologyElement; prototype: SVGFEMorphologyElement; readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1; readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2; }; SVGFEOffsetElement: { new (): SVGFEOffsetElement; prototype: SVGFEOffsetElement; }; SVGFEPointLightElement: { new (): SVGFEPointLightElement; prototype: SVGFEPointLightElement; }; SVGFESpecularLightingElement: { new (): SVGFESpecularLightingElement; prototype: SVGFESpecularLightingElement; }; SVGFESpotLightElement: { new (): SVGFESpotLightElement; prototype: SVGFESpotLightElement; }; SVGFETileElement: { new (): SVGFETileElement; prototype: SVGFETileElement; }; SVGFETurbulenceElement: { new (): SVGFETurbulenceElement; prototype: SVGFETurbulenceElement; readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0; readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2; readonly SVG_STITCHTYPE_UNKNOWN: 0; readonly SVG_STITCHTYPE_STITCH: 1; readonly SVG_STITCHTYPE_NOSTITCH: 2; }; SVGFilterElement: { new (): SVGFilterElement; prototype: SVGFilterElement; }; SVGForeignObjectElement: { new (): SVGForeignObjectElement; prototype: SVGForeignObjectElement; }; SVGGElement: { new (): SVGGElement; prototype: SVGGElement; }; SVGGeometryElement: { new (): SVGGeometryElement; prototype: SVGGeometryElement; }; SVGGradientElement: { new (): SVGGradientElement; prototype: SVGGradientElement; readonly SVG_SPREADMETHOD_UNKNOWN: 0; readonly SVG_SPREADMETHOD_PAD: 1; readonly SVG_SPREADMETHOD_REFLECT: 2; readonly SVG_SPREADMETHOD_REPEAT: 3; }; SVGGraphicsElement: { new (): SVGGraphicsElement; prototype: SVGGraphicsElement; }; SVGImageElement: { new (): SVGImageElement; prototype: SVGImageElement; }; SVGLength: { new (): SVGLength; prototype: SVGLength; readonly SVG_LENGTHTYPE_UNKNOWN: 0; readonly SVG_LENGTHTYPE_NUMBER: 1; readonly SVG_LENGTHTYPE_PERCENTAGE: 2; readonly SVG_LENGTHTYPE_EMS: 3; readonly SVG_LENGTHTYPE_EXS: 4; readonly SVG_LENGTHTYPE_PX: 5; readonly SVG_LENGTHTYPE_CM: 6; readonly SVG_LENGTHTYPE_MM: 7; readonly SVG_LENGTHTYPE_IN: 8; readonly SVG_LENGTHTYPE_PT: 9; readonly SVG_LENGTHTYPE_PC: 10; }; SVGLengthList: { new (): SVGLengthList; prototype: SVGLengthList; }; SVGLineElement: { new (): SVGLineElement; prototype: SVGLineElement; }; SVGLinearGradientElement: { new (): SVGLinearGradientElement; prototype: SVGLinearGradientElement; }; SVGMPathElement: { new (): SVGMPathElement; prototype: SVGMPathElement; }; SVGMarkerElement: { new (): SVGMarkerElement; prototype: SVGMarkerElement; readonly SVG_MARKERUNITS_UNKNOWN: 0; readonly SVG_MARKERUNITS_USERSPACEONUSE: 1; readonly SVG_MARKERUNITS_STROKEWIDTH: 2; readonly SVG_MARKER_ORIENT_UNKNOWN: 0; readonly SVG_MARKER_ORIENT_AUTO: 1; readonly SVG_MARKER_ORIENT_ANGLE: 2; }; SVGMaskElement: { new (): SVGMaskElement; prototype: SVGMaskElement; }; SVGMetadataElement: { new (): SVGMetadataElement; prototype: SVGMetadataElement; }; SVGNumber: { new (): SVGNumber; prototype: SVGNumber; }; SVGNumberList: { new (): SVGNumberList; prototype: SVGNumberList; }; SVGPathElement: { new (): SVGPathElement; prototype: SVGPathElement; }; SVGPatternElement: { new (): SVGPatternElement; prototype: SVGPatternElement; }; SVGPointList: { new (): SVGPointList; prototype: SVGPointList; }; SVGPolygonElement: { new (): SVGPolygonElement; prototype: SVGPolygonElement; }; SVGPolylineElement: { new (): SVGPolylineElement; prototype: SVGPolylineElement; }; SVGPreserveAspectRatio: { new (): SVGPreserveAspectRatio; prototype: SVGPreserveAspectRatio; readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; readonly SVG_PRESERVEASPECTRATIO_NONE: 1; readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5; readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; readonly SVG_MEETORSLICE_UNKNOWN: 0; readonly SVG_MEETORSLICE_MEET: 1; readonly SVG_MEETORSLICE_SLICE: 2; }; SVGRadialGradientElement: { new (): SVGRadialGradientElement; prototype: SVGRadialGradientElement; }; SVGRectElement: { new (): SVGRectElement; prototype: SVGRectElement; }; SVGSVGElement: { new (): SVGSVGElement; prototype: SVGSVGElement; }; SVGScriptElement: { new (): SVGScriptElement; prototype: SVGScriptElement; }; SVGSetElement: { new (): SVGSetElement; prototype: SVGSetElement; }; SVGStopElement: { new (): SVGStopElement; prototype: SVGStopElement; }; SVGStringList: { new (): SVGStringList; prototype: SVGStringList; }; SVGStyleElement: { new (): SVGStyleElement; prototype: SVGStyleElement; }; SVGSwitchElement: { new (): SVGSwitchElement; prototype: SVGSwitchElement; }; SVGSymbolElement: { new (): SVGSymbolElement; prototype: SVGSymbolElement; }; SVGTSpanElement: { new (): SVGTSpanElement; prototype: SVGTSpanElement; }; SVGTextContentElement: { new (): SVGTextContentElement; prototype: SVGTextContentElement; readonly LENGTHADJUST_UNKNOWN: 0; readonly LENGTHADJUST_SPACING: 1; readonly LENGTHADJUST_SPACINGANDGLYPHS: 2; }; SVGTextElement: { new (): SVGTextElement; prototype: SVGTextElement; }; SVGTextPathElement: { new (): SVGTextPathElement; prototype: SVGTextPathElement; readonly TEXTPATH_METHODTYPE_UNKNOWN: 0; readonly TEXTPATH_METHODTYPE_ALIGN: 1; readonly TEXTPATH_METHODTYPE_STRETCH: 2; readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0; readonly TEXTPATH_SPACINGTYPE_AUTO: 1; readonly TEXTPATH_SPACINGTYPE_EXACT: 2; }; SVGTextPositioningElement: { new (): SVGTextPositioningElement; prototype: SVGTextPositioningElement; }; SVGTitleElement: { new (): SVGTitleElement; prototype: SVGTitleElement; }; SVGTransform: { new (): SVGTransform; prototype: SVGTransform; readonly SVG_TRANSFORM_UNKNOWN: 0; readonly SVG_TRANSFORM_MATRIX: 1; readonly SVG_TRANSFORM_TRANSLATE: 2; readonly SVG_TRANSFORM_SCALE: 3; readonly SVG_TRANSFORM_ROTATE: 4; readonly SVG_TRANSFORM_SKEWX: 5; readonly SVG_TRANSFORM_SKEWY: 6; }; SVGTransformList: { new (): SVGTransformList; prototype: SVGTransformList; }; SVGUnitTypes: { new (): SVGUnitTypes; prototype: SVGUnitTypes; readonly SVG_UNIT_TYPE_UNKNOWN: 0; readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1; readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2; }; SVGUseElement: { new (): SVGUseElement; prototype: SVGUseElement; }; SVGViewElement: { new (): SVGViewElement; prototype: SVGViewElement; }; Screen: { new (): Screen; prototype: Screen; }; ScreenOrientation: { new (): ScreenOrientation; prototype: ScreenOrientation; }; ScriptProcessorNode: { new (): ScriptProcessorNode; prototype: ScriptProcessorNode; }; SecurityPolicyViolationEvent: { new (type: string, eventInitDict?: SecurityPolicyViolationEventInit): SecurityPolicyViolationEvent; prototype: SecurityPolicyViolationEvent; }; Selection: { new (): Selection; prototype: Selection; }; ServiceWorker: { new (): ServiceWorker; prototype: ServiceWorker; }; ServiceWorkerContainer: { new (): ServiceWorkerContainer; prototype: ServiceWorkerContainer; }; ServiceWorkerRegistration: { new (): ServiceWorkerRegistration; prototype: ServiceWorkerRegistration; }; ShadowRoot: { new (): ShadowRoot; prototype: ShadowRoot; }; SharedWorker: { new (scriptURL: string | URL, options?: string | WorkerOptions): SharedWorker; prototype: SharedWorker; }; SourceBuffer: { new (): SourceBuffer; prototype: SourceBuffer; }; SourceBufferList: { new (): SourceBufferList; prototype: SourceBufferList; }; SpeechRecognitionAlternative: { new (): SpeechRecognitionAlternative; prototype: SpeechRecognitionAlternative; }; SpeechRecognitionResult: { new (): SpeechRecognitionResult; prototype: SpeechRecognitionResult; }; SpeechRecognitionResultList: { new (): SpeechRecognitionResultList; prototype: SpeechRecognitionResultList; }; SpeechSynthesis: { new (): SpeechSynthesis; prototype: SpeechSynthesis; }; SpeechSynthesisErrorEvent: { new (type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent; prototype: SpeechSynthesisErrorEvent; }; SpeechSynthesisEvent: { new (type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent; prototype: SpeechSynthesisEvent; }; SpeechSynthesisUtterance: { new (text?: string): SpeechSynthesisUtterance; prototype: SpeechSynthesisUtterance; }; SpeechSynthesisVoice: { new (): SpeechSynthesisVoice; prototype: SpeechSynthesisVoice; }; StaticRange: { new (init: StaticRangeInit): StaticRange; prototype: StaticRange; }; StereoPannerNode: { new (context: BaseAudioContext, options?: StereoPannerOptions): StereoPannerNode; prototype: StereoPannerNode; }; Storage: { new (): Storage; prototype: Storage; }; StorageEvent: { new (type: string, eventInitDict?: StorageEventInit): StorageEvent; prototype: StorageEvent; }; StorageManager: { new (): StorageManager; prototype: StorageManager; }; StylePropertyMap: { new (): StylePropertyMap; prototype: StylePropertyMap; }; StylePropertyMapReadOnly: { new (): StylePropertyMapReadOnly; prototype: StylePropertyMapReadOnly; }; StyleSheet: { new (): StyleSheet; prototype: StyleSheet; }; StyleSheetList: { new (): StyleSheetList; prototype: StyleSheetList; }; SubmitEvent: { new (type: string, eventInitDict?: SubmitEventInit): SubmitEvent; prototype: SubmitEvent; }; SubtleCrypto: { new (): SubtleCrypto; prototype: SubtleCrypto; }; Text: { new (data?: string): Text; prototype: Text; }; TextDecoder: { new (label?: string, options?: TextDecoderOptions): TextDecoder; prototype: TextDecoder; }; TextDecoderStream: { new (label?: string, options?: TextDecoderOptions): TextDecoderStream; prototype: TextDecoderStream; }; TextEncoder: { new (): TextEncoder; prototype: TextEncoder; }; TextEncoderStream: { new (): TextEncoderStream; prototype: TextEncoderStream; }; TextEvent: { new (): TextEvent; prototype: TextEvent; }; TextMetrics: { new (): TextMetrics; prototype: TextMetrics; }; TextTrack: { new (): TextTrack; prototype: TextTrack; }; TextTrackCue: { new (): TextTrackCue; prototype: TextTrackCue; }; TextTrackCueList: { new (): TextTrackCueList; prototype: TextTrackCueList; }; TextTrackList: { new (): TextTrackList; prototype: TextTrackList; }; TimeRanges: { new (): TimeRanges; prototype: TimeRanges; }; ToggleEvent: { new (type: string, eventInitDict?: ToggleEventInit): ToggleEvent; prototype: ToggleEvent; }; Touch: { new (touchInitDict: TouchInit): Touch; prototype: Touch; }; TouchEvent: { new (type: string, eventInitDict?: TouchEventInit): TouchEvent; prototype: TouchEvent; }; TouchList: { new (): TouchList; prototype: TouchList; }; TrackEvent: { new (type: string, eventInitDict?: TrackEventInit): TrackEvent; prototype: TrackEvent; }; TransformStream: { new <I, O>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>; prototype: TransformStream<any, any>; }; TransformStreamDefaultController: { new (): TransformStreamDefaultController<any>; prototype: TransformStreamDefaultController<any>; }; TransitionEvent: { new (type: string, transitionEventInitDict?: TransitionEventInit): TransitionEvent; prototype: TransitionEvent; }; TreeWalker: { new (): TreeWalker; prototype: TreeWalker; }; UIEvent: { new (type: string, eventInitDict?: UIEventInit): UIEvent; prototype: UIEvent; }; URL: { new (url: string | URL, base?: string | URL): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL) => URL; revokeObjectURL: (url: string) => void; }; webkitURL: { new (url: string | URL, base?: string | URL): URL; prototype: URL; canParse: (url: string | URL, base?: string | URL) => boolean; createObjectURL: (obj: Blob | MediaSource) => string; parse: (url: string | URL, base?: string | URL) => URL; revokeObjectURL: (url: string) => void; }; URLSearchParams: { new (init?: string | string[][] | Record<string, string> | URLSearchParams): URLSearchParams; prototype: URLSearchParams; }; UserActivation: { new (): UserActivation; prototype: UserActivation; }; VTTCue: { new (startTime: number, endTime: number, text: string): VTTCue; prototype: VTTCue; }; VTTRegion: { new (): VTTRegion; prototype: VTTRegion; }; ValidityState: { new (): ValidityState; prototype: ValidityState; }; VideoColorSpace: { new (init?: VideoColorSpaceInit): VideoColorSpace; prototype: VideoColorSpace; }; VideoDecoder: { new (init: VideoDecoderInit): VideoDecoder; prototype: VideoDecoder; isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport>; }; VideoEncoder: { new (init: VideoEncoderInit): VideoEncoder; prototype: VideoEncoder; isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport>; }; VideoFrame: { new (image: CanvasImageSource, init?: VideoFrameInit): VideoFrame; new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame; prototype: VideoFrame; }; VideoPlaybackQuality: { new (): VideoPlaybackQuality; prototype: VideoPlaybackQuality; }; ViewTransition: { new (): ViewTransition; prototype: ViewTransition; }; VisualViewport: { new (): VisualViewport; prototype: VisualViewport; }; WakeLock: { new (): WakeLock; prototype: WakeLock; }; WakeLockSentinel: { new (): WakeLockSentinel; prototype: WakeLockSentinel; }; WaveShaperNode: { new (context: BaseAudioContext, options?: WaveShaperOptions): WaveShaperNode; prototype: WaveShaperNode; }; WebGL2RenderingContext: { new (): WebGL2RenderingContext; prototype: WebGL2RenderingContext; readonly READ_BUFFER: 3074; readonly UNPACK_ROW_LENGTH: 3314; readonly UNPACK_SKIP_ROWS: 3315; readonly UNPACK_SKIP_PIXELS: 3316; readonly PACK_ROW_LENGTH: 3330; readonly PACK_SKIP_ROWS: 3331; readonly PACK_SKIP_PIXELS: 3332; readonly COLOR: 6144; readonly DEPTH: 6145; readonly STENCIL: 6146; readonly RED: 6403; readonly RGB8: 32849; readonly RGB10_A2: 32857; readonly TEXTURE_BINDING_3D: 32874; readonly UNPACK_SKIP_IMAGES: 32877; readonly UNPACK_IMAGE_HEIGHT: 32878; readonly TEXTURE_3D: 32879; readonly TEXTURE_WRAP_R: 32882; readonly MAX_3D_TEXTURE_SIZE: 32883; readonly UNSIGNED_INT_2_10_10_10_REV: 33640; readonly MAX_ELEMENTS_VERTICES: 33000; readonly MAX_ELEMENTS_INDICES: 33001; readonly TEXTURE_MIN_LOD: 33082; readonly TEXTURE_MAX_LOD: 33083; readonly TEXTURE_BASE_LEVEL: 33084; readonly TEXTURE_MAX_LEVEL: 33085; readonly MIN: 32775; readonly MAX: 32776; readonly DEPTH_COMPONENT24: 33190; readonly MAX_TEXTURE_LOD_BIAS: 34045; readonly TEXTURE_COMPARE_MODE: 34892; readonly TEXTURE_COMPARE_FUNC: 34893; readonly CURRENT_QUERY: 34917; readonly QUERY_RESULT: 34918; readonly QUERY_RESULT_AVAILABLE: 34919; readonly STREAM_READ: 35041; readonly STREAM_COPY: 35042; readonly STATIC_READ: 35045; readonly STATIC_COPY: 35046; readonly DYNAMIC_READ: 35049; readonly DYNAMIC_COPY: 35050; readonly MAX_DRAW_BUFFERS: 34852; readonly DRAW_BUFFER0: 34853; readonly DRAW_BUFFER1: 34854; readonly DRAW_BUFFER2: 34855; readonly DRAW_BUFFER3: 34856; readonly DRAW_BUFFER4: 34857; readonly DRAW_BUFFER5: 34858; readonly DRAW_BUFFER6: 34859; readonly DRAW_BUFFER7: 34860; readonly DRAW_BUFFER8: 34861; readonly DRAW_BUFFER9: 34862; readonly DRAW_BUFFER10: 34863; readonly DRAW_BUFFER11: 34864; readonly DRAW_BUFFER12: 34865; readonly DRAW_BUFFER13: 34866; readonly DRAW_BUFFER14: 34867; readonly DRAW_BUFFER15: 34868; readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657; readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658; readonly SAMPLER_3D: 35679; readonly SAMPLER_2D_SHADOW: 35682; readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723; readonly PIXEL_PACK_BUFFER: 35051; readonly PIXEL_UNPACK_BUFFER: 35052; readonly PIXEL_PACK_BUFFER_BINDING: 35053; readonly PIXEL_UNPACK_BUFFER_BINDING: 35055; readonly FLOAT_MAT2x3: 35685; readonly FLOAT_MAT2x4: 35686; readonly FLOAT_MAT3x2: 35687; readonly FLOAT_MAT3x4: 35688; readonly FLOAT_MAT4x2: 35689; readonly FLOAT_MAT4x3: 35690; readonly SRGB: 35904; readonly SRGB8: 35905; readonly SRGB8_ALPHA8: 35907; readonly COMPARE_REF_TO_TEXTURE: 34894; readonly RGBA32F: 34836; readonly RGB32F: 34837; readonly RGBA16F: 34842; readonly RGB16F: 34843; readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069; readonly MAX_ARRAY_TEXTURE_LAYERS: 35071; readonly MIN_PROGRAM_TEXEL_OFFSET: 35076; readonly MAX_PROGRAM_TEXEL_OFFSET: 35077; readonly MAX_VARYING_COMPONENTS: 35659; readonly TEXTURE_2D_ARRAY: 35866; readonly TEXTURE_BINDING_2D_ARRAY: 35869; readonly R11F_G11F_B10F: 35898; readonly UNSIGNED_INT_10F_11F_11F_REV: 35899; readonly RGB9_E5: 35901; readonly UNSIGNED_INT_5_9_9_9_REV: 35902; readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968; readonly TRANSFORM_FEEDBACK_VARYINGS: 35971; readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972; readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973; readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976; readonly RASTERIZER_DISCARD: 35977; readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978; readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979; readonly INTERLEAVED_ATTRIBS: 35980; readonly SEPARATE_ATTRIBS: 35981; readonly TRANSFORM_FEEDBACK_BUFFER: 35982; readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983; readonly RGBA32UI: 36208; readonly RGB32UI: 36209; readonly RGBA16UI: 36214; readonly RGB16UI: 36215; readonly RGBA8UI: 36220; readonly RGB8UI: 36221; readonly RGBA32I: 36226; readonly RGB32I: 36227; readonly RGBA16I: 36232; readonly RGB16I: 36233; readonly RGBA8I: 36238; readonly RGB8I: 36239; readonly RED_INTEGER: 36244; readonly RGB_INTEGER: 36248; readonly RGBA_INTEGER: 36249; readonly SAMPLER_2D_ARRAY: 36289; readonly SAMPLER_2D_ARRAY_SHADOW: 36292; readonly SAMPLER_CUBE_SHADOW: 36293; readonly UNSIGNED_INT_VEC2: 36294; readonly UNSIGNED_INT_VEC3: 36295; readonly UNSIGNED_INT_VEC4: 36296; readonly INT_SAMPLER_2D: 36298; readonly INT_SAMPLER_3D: 36299; readonly INT_SAMPLER_CUBE: 36300; readonly INT_SAMPLER_2D_ARRAY: 36303; readonly UNSIGNED_INT_SAMPLER_2D: 36306; readonly UNSIGNED_INT_SAMPLER_3D: 36307; readonly UNSIGNED_INT_SAMPLER_CUBE: 36308; readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311; readonly DEPTH_COMPONENT32F: 36012; readonly DEPTH32F_STENCIL8: 36013; readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269; readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296; readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297; readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298; readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299; readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300; readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301; readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302; readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303; readonly FRAMEBUFFER_DEFAULT: 33304; readonly UNSIGNED_INT_24_8: 34042; readonly DEPTH24_STENCIL8: 35056; readonly UNSIGNED_NORMALIZED: 35863; readonly DRAW_FRAMEBUFFER_BINDING: 36006; readonly READ_FRAMEBUFFER: 36008; readonly DRAW_FRAMEBUFFER: 36009; readonly READ_FRAMEBUFFER_BINDING: 36010; readonly RENDERBUFFER_SAMPLES: 36011; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052; readonly MAX_COLOR_ATTACHMENTS: 36063; readonly COLOR_ATTACHMENT1: 36065; readonly COLOR_ATTACHMENT2: 36066; readonly COLOR_ATTACHMENT3: 36067; readonly COLOR_ATTACHMENT4: 36068; readonly COLOR_ATTACHMENT5: 36069; readonly COLOR_ATTACHMENT6: 36070; readonly COLOR_ATTACHMENT7: 36071; readonly COLOR_ATTACHMENT8: 36072; readonly COLOR_ATTACHMENT9: 36073; readonly COLOR_ATTACHMENT10: 36074; readonly COLOR_ATTACHMENT11: 36075; readonly COLOR_ATTACHMENT12: 36076; readonly COLOR_ATTACHMENT13: 36077; readonly COLOR_ATTACHMENT14: 36078; readonly COLOR_ATTACHMENT15: 36079; readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182; readonly MAX_SAMPLES: 36183; readonly HALF_FLOAT: 5131; readonly RG: 33319; readonly RG_INTEGER: 33320; readonly R8: 33321; readonly RG8: 33323; readonly R16F: 33325; readonly R32F: 33326; readonly RG16F: 33327; readonly RG32F: 33328; readonly R8I: 33329; readonly R8UI: 33330; readonly R16I: 33331; readonly R16UI: 33332; readonly R32I: 33333; readonly R32UI: 33334; readonly RG8I: 33335; readonly RG8UI: 33336; readonly RG16I: 33337; readonly RG16UI: 33338; readonly RG32I: 33339; readonly RG32UI: 33340; readonly VERTEX_ARRAY_BINDING: 34229; readonly R8_SNORM: 36756; readonly RG8_SNORM: 36757; readonly RGB8_SNORM: 36758; readonly RGBA8_SNORM: 36759; readonly SIGNED_NORMALIZED: 36764; readonly COPY_READ_BUFFER: 36662; readonly COPY_WRITE_BUFFER: 36663; readonly COPY_READ_BUFFER_BINDING: 36662; readonly COPY_WRITE_BUFFER_BINDING: 36663; readonly UNIFORM_BUFFER: 35345; readonly UNIFORM_BUFFER_BINDING: 35368; readonly UNIFORM_BUFFER_START: 35369; readonly UNIFORM_BUFFER_SIZE: 35370; readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371; readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373; readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374; readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375; readonly MAX_UNIFORM_BLOCK_SIZE: 35376; readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377; readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379; readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380; readonly ACTIVE_UNIFORM_BLOCKS: 35382; readonly UNIFORM_TYPE: 35383; readonly UNIFORM_SIZE: 35384; readonly UNIFORM_BLOCK_INDEX: 35386; readonly UNIFORM_OFFSET: 35387; readonly UNIFORM_ARRAY_STRIDE: 35388; readonly UNIFORM_MATRIX_STRIDE: 35389; readonly UNIFORM_IS_ROW_MAJOR: 35390; readonly UNIFORM_BLOCK_BINDING: 35391; readonly UNIFORM_BLOCK_DATA_SIZE: 35392; readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394; readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395; readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396; readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398; readonly INVALID_INDEX: 4294967295; readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154; readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157; readonly MAX_SERVER_WAIT_TIMEOUT: 37137; readonly OBJECT_TYPE: 37138; readonly SYNC_CONDITION: 37139; readonly SYNC_STATUS: 37140; readonly SYNC_FLAGS: 37141; readonly SYNC_FENCE: 37142; readonly SYNC_GPU_COMMANDS_COMPLETE: 37143; readonly UNSIGNALED: 37144; readonly SIGNALED: 37145; readonly ALREADY_SIGNALED: 37146; readonly TIMEOUT_EXPIRED: 37147; readonly CONDITION_SATISFIED: 37148; readonly WAIT_FAILED: 37149; readonly SYNC_FLUSH_COMMANDS_BIT: 1; readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070; readonly ANY_SAMPLES_PASSED: 35887; readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202; readonly SAMPLER_BINDING: 35097; readonly RGB10_A2UI: 36975; readonly INT_2_10_10_10_REV: 36255; readonly TRANSFORM_FEEDBACK: 36386; readonly TRANSFORM_FEEDBACK_PAUSED: 36387; readonly TRANSFORM_FEEDBACK_ACTIVE: 36388; readonly TRANSFORM_FEEDBACK_BINDING: 36389; readonly TEXTURE_IMMUTABLE_FORMAT: 37167; readonly MAX_ELEMENT_INDEX: 36203; readonly TEXTURE_IMMUTABLE_LEVELS: 33503; readonly TIMEOUT_IGNORED: -1; readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLActiveInfo: { new (): WebGLActiveInfo; prototype: WebGLActiveInfo; }; WebGLBuffer: { new (): WebGLBuffer; prototype: WebGLBuffer; }; WebGLContextEvent: { new (type: string, eventInit?: WebGLContextEventInit): WebGLContextEvent; prototype: WebGLContextEvent; }; WebGLFramebuffer: { new (): WebGLFramebuffer; prototype: WebGLFramebuffer; }; WebGLProgram: { new (): WebGLProgram; prototype: WebGLProgram; }; WebGLQuery: { new (): WebGLQuery; prototype: WebGLQuery; }; WebGLRenderbuffer: { new (): WebGLRenderbuffer; prototype: WebGLRenderbuffer; }; WebGLRenderingContext: { new (): WebGLRenderingContext; prototype: WebGLRenderingContext; readonly DEPTH_BUFFER_BIT: 256; readonly STENCIL_BUFFER_BIT: 1024; readonly COLOR_BUFFER_BIT: 16384; readonly POINTS: 0; readonly LINES: 1; readonly LINE_LOOP: 2; readonly LINE_STRIP: 3; readonly TRIANGLES: 4; readonly TRIANGLE_STRIP: 5; readonly TRIANGLE_FAN: 6; readonly ZERO: 0; readonly ONE: 1; readonly SRC_COLOR: 768; readonly ONE_MINUS_SRC_COLOR: 769; readonly SRC_ALPHA: 770; readonly ONE_MINUS_SRC_ALPHA: 771; readonly DST_ALPHA: 772; readonly ONE_MINUS_DST_ALPHA: 773; readonly DST_COLOR: 774; readonly ONE_MINUS_DST_COLOR: 775; readonly SRC_ALPHA_SATURATE: 776; readonly FUNC_ADD: 32774; readonly BLEND_EQUATION: 32777; readonly BLEND_EQUATION_RGB: 32777; readonly BLEND_EQUATION_ALPHA: 34877; readonly FUNC_SUBTRACT: 32778; readonly FUNC_REVERSE_SUBTRACT: 32779; readonly BLEND_DST_RGB: 32968; readonly BLEND_SRC_RGB: 32969; readonly BLEND_DST_ALPHA: 32970; readonly BLEND_SRC_ALPHA: 32971; readonly CONSTANT_COLOR: 32769; readonly ONE_MINUS_CONSTANT_COLOR: 32770; readonly CONSTANT_ALPHA: 32771; readonly ONE_MINUS_CONSTANT_ALPHA: 32772; readonly BLEND_COLOR: 32773; readonly ARRAY_BUFFER: 34962; readonly ELEMENT_ARRAY_BUFFER: 34963; readonly ARRAY_BUFFER_BINDING: 34964; readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965; readonly STREAM_DRAW: 35040; readonly STATIC_DRAW: 35044; readonly DYNAMIC_DRAW: 35048; readonly BUFFER_SIZE: 34660; readonly BUFFER_USAGE: 34661; readonly CURRENT_VERTEX_ATTRIB: 34342; readonly FRONT: 1028; readonly BACK: 1029; readonly FRONT_AND_BACK: 1032; readonly CULL_FACE: 2884; readonly BLEND: 3042; readonly DITHER: 3024; readonly STENCIL_TEST: 2960; readonly DEPTH_TEST: 2929; readonly SCISSOR_TEST: 3089; readonly POLYGON_OFFSET_FILL: 32823; readonly SAMPLE_ALPHA_TO_COVERAGE: 32926; readonly SAMPLE_COVERAGE: 32928; readonly NO_ERROR: 0; readonly INVALID_ENUM: 1280; readonly INVALID_VALUE: 1281; readonly INVALID_OPERATION: 1282; readonly OUT_OF_MEMORY: 1285; readonly CW: 2304; readonly CCW: 2305; readonly LINE_WIDTH: 2849; readonly ALIASED_POINT_SIZE_RANGE: 33901; readonly ALIASED_LINE_WIDTH_RANGE: 33902; readonly CULL_FACE_MODE: 2885; readonly FRONT_FACE: 2886; readonly DEPTH_RANGE: 2928; readonly DEPTH_WRITEMASK: 2930; readonly DEPTH_CLEAR_VALUE: 2931; readonly DEPTH_FUNC: 2932; readonly STENCIL_CLEAR_VALUE: 2961; readonly STENCIL_FUNC: 2962; readonly STENCIL_FAIL: 2964; readonly STENCIL_PASS_DEPTH_FAIL: 2965; readonly STENCIL_PASS_DEPTH_PASS: 2966; readonly STENCIL_REF: 2967; readonly STENCIL_VALUE_MASK: 2963; readonly STENCIL_WRITEMASK: 2968; readonly STENCIL_BACK_FUNC: 34816; readonly STENCIL_BACK_FAIL: 34817; readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818; readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819; readonly STENCIL_BACK_REF: 36003; readonly STENCIL_BACK_VALUE_MASK: 36004; readonly STENCIL_BACK_WRITEMASK: 36005; readonly VIEWPORT: 2978; readonly SCISSOR_BOX: 3088; readonly COLOR_CLEAR_VALUE: 3106; readonly COLOR_WRITEMASK: 3107; readonly UNPACK_ALIGNMENT: 3317; readonly PACK_ALIGNMENT: 3333; readonly MAX_TEXTURE_SIZE: 3379; readonly MAX_VIEWPORT_DIMS: 3386; readonly SUBPIXEL_BITS: 3408; readonly RED_BITS: 3410; readonly GREEN_BITS: 3411; readonly BLUE_BITS: 3412; readonly ALPHA_BITS: 3413; readonly DEPTH_BITS: 3414; readonly STENCIL_BITS: 3415; readonly POLYGON_OFFSET_UNITS: 10752; readonly POLYGON_OFFSET_FACTOR: 32824; readonly TEXTURE_BINDING_2D: 32873; readonly SAMPLE_BUFFERS: 32936; readonly SAMPLES: 32937; readonly SAMPLE_COVERAGE_VALUE: 32938; readonly SAMPLE_COVERAGE_INVERT: 32939; readonly COMPRESSED_TEXTURE_FORMATS: 34467; readonly DONT_CARE: 4352; readonly FASTEST: 4353; readonly NICEST: 4354; readonly GENERATE_MIPMAP_HINT: 33170; readonly BYTE: 5120; readonly UNSIGNED_BYTE: 5121; readonly SHORT: 5122; readonly UNSIGNED_SHORT: 5123; readonly INT: 5124; readonly UNSIGNED_INT: 5125; readonly FLOAT: 5126; readonly DEPTH_COMPONENT: 6402; readonly ALPHA: 6406; readonly RGB: 6407; readonly RGBA: 6408; readonly LUMINANCE: 6409; readonly LUMINANCE_ALPHA: 6410; readonly UNSIGNED_SHORT_4_4_4_4: 32819; readonly UNSIGNED_SHORT_5_5_5_1: 32820; readonly UNSIGNED_SHORT_5_6_5: 33635; readonly FRAGMENT_SHADER: 35632; readonly VERTEX_SHADER: 35633; readonly MAX_VERTEX_ATTRIBS: 34921; readonly MAX_VERTEX_UNIFORM_VECTORS: 36347; readonly MAX_VARYING_VECTORS: 36348; readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661; readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660; readonly MAX_TEXTURE_IMAGE_UNITS: 34930; readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349; readonly SHADER_TYPE: 35663; readonly DELETE_STATUS: 35712; readonly LINK_STATUS: 35714; readonly VALIDATE_STATUS: 35715; readonly ATTACHED_SHADERS: 35717; readonly ACTIVE_UNIFORMS: 35718; readonly ACTIVE_ATTRIBUTES: 35721; readonly SHADING_LANGUAGE_VERSION: 35724; readonly CURRENT_PROGRAM: 35725; readonly NEVER: 512; readonly LESS: 513; readonly EQUAL: 514; readonly LEQUAL: 515; readonly GREATER: 516; readonly NOTEQUAL: 517; readonly GEQUAL: 518; readonly ALWAYS: 519; readonly KEEP: 7680; readonly REPLACE: 7681; readonly INCR: 7682; readonly DECR: 7683; readonly INVERT: 5386; readonly INCR_WRAP: 34055; readonly DECR_WRAP: 34056; readonly VENDOR: 7936; readonly RENDERER: 7937; readonly VERSION: 7938; readonly NEAREST: 9728; readonly LINEAR: 9729; readonly NEAREST_MIPMAP_NEAREST: 9984; readonly LINEAR_MIPMAP_NEAREST: 9985; readonly NEAREST_MIPMAP_LINEAR: 9986; readonly LINEAR_MIPMAP_LINEAR: 9987; readonly TEXTURE_MAG_FILTER: 10240; readonly TEXTURE_MIN_FILTER: 10241; readonly TEXTURE_WRAP_S: 10242; readonly TEXTURE_WRAP_T: 10243; readonly TEXTURE_2D: 3553; readonly TEXTURE: 5890; readonly TEXTURE_CUBE_MAP: 34067; readonly TEXTURE_BINDING_CUBE_MAP: 34068; readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069; readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070; readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071; readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072; readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073; readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074; readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076; readonly TEXTURE0: 33984; readonly TEXTURE1: 33985; readonly TEXTURE2: 33986; readonly TEXTURE3: 33987; readonly TEXTURE4: 33988; readonly TEXTURE5: 33989; readonly TEXTURE6: 33990; readonly TEXTURE7: 33991; readonly TEXTURE8: 33992; readonly TEXTURE9: 33993; readonly TEXTURE10: 33994; readonly TEXTURE11: 33995; readonly TEXTURE12: 33996; readonly TEXTURE13: 33997; readonly TEXTURE14: 33998; readonly TEXTURE15: 33999; readonly TEXTURE16: 34000; readonly TEXTURE17: 34001; readonly TEXTURE18: 34002; readonly TEXTURE19: 34003; readonly TEXTURE20: 34004; readonly TEXTURE21: 34005; readonly TEXTURE22: 34006; readonly TEXTURE23: 34007; readonly TEXTURE24: 34008; readonly TEXTURE25: 34009; readonly TEXTURE26: 34010; readonly TEXTURE27: 34011; readonly TEXTURE28: 34012; readonly TEXTURE29: 34013; readonly TEXTURE30: 34014; readonly TEXTURE31: 34015; readonly ACTIVE_TEXTURE: 34016; readonly REPEAT: 10497; readonly CLAMP_TO_EDGE: 33071; readonly MIRRORED_REPEAT: 33648; readonly FLOAT_VEC2: 35664; readonly FLOAT_VEC3: 35665; readonly FLOAT_VEC4: 35666; readonly INT_VEC2: 35667; readonly INT_VEC3: 35668; readonly INT_VEC4: 35669; readonly BOOL: 35670; readonly BOOL_VEC2: 35671; readonly BOOL_VEC3: 35672; readonly BOOL_VEC4: 35673; readonly FLOAT_MAT2: 35674; readonly FLOAT_MAT3: 35675; readonly FLOAT_MAT4: 35676; readonly SAMPLER_2D: 35678; readonly SAMPLER_CUBE: 35680; readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338; readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339; readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340; readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341; readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922; readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373; readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975; readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738; readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739; readonly COMPILE_STATUS: 35713; readonly LOW_FLOAT: 36336; readonly MEDIUM_FLOAT: 36337; readonly HIGH_FLOAT: 36338; readonly LOW_INT: 36339; readonly MEDIUM_INT: 36340; readonly HIGH_INT: 36341; readonly FRAMEBUFFER: 36160; readonly RENDERBUFFER: 36161; readonly RGBA4: 32854; readonly RGB5_A1: 32855; readonly RGBA8: 32856; readonly RGB565: 36194; readonly DEPTH_COMPONENT16: 33189; readonly STENCIL_INDEX8: 36168; readonly DEPTH_STENCIL: 34041; readonly RENDERBUFFER_WIDTH: 36162; readonly RENDERBUFFER_HEIGHT: 36163; readonly RENDERBUFFER_INTERNAL_FORMAT: 36164; readonly RENDERBUFFER_RED_SIZE: 36176; readonly RENDERBUFFER_GREEN_SIZE: 36177; readonly RENDERBUFFER_BLUE_SIZE: 36178; readonly RENDERBUFFER_ALPHA_SIZE: 36179; readonly RENDERBUFFER_DEPTH_SIZE: 36180; readonly RENDERBUFFER_STENCIL_SIZE: 36181; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048; readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050; readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051; readonly COLOR_ATTACHMENT0: 36064; readonly DEPTH_ATTACHMENT: 36096; readonly STENCIL_ATTACHMENT: 36128; readonly DEPTH_STENCIL_ATTACHMENT: 33306; readonly NONE: 0; readonly FRAMEBUFFER_COMPLETE: 36053; readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054; readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055; readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057; readonly FRAMEBUFFER_UNSUPPORTED: 36061; readonly FRAMEBUFFER_BINDING: 36006; readonly RENDERBUFFER_BINDING: 36007; readonly MAX_RENDERBUFFER_SIZE: 34024; readonly INVALID_FRAMEBUFFER_OPERATION: 1286; readonly UNPACK_FLIP_Y_WEBGL: 37440; readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441; readonly CONTEXT_LOST_WEBGL: 37442; readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443; readonly BROWSER_DEFAULT_WEBGL: 37444; }; WebGLSampler: { new (): WebGLSampler; prototype: WebGLSampler; }; WebGLShader: { new (): WebGLShader; prototype: WebGLShader; }; WebGLShaderPrecisionFormat: { new (): WebGLShaderPrecisionFormat; prototype: WebGLShaderPrecisionFormat; }; WebGLSync: { new (): WebGLSync; prototype: WebGLSync; }; WebGLTexture: { new (): WebGLTexture; prototype: WebGLTexture; }; WebGLTransformFeedback: { new (): WebGLTransformFeedback; prototype: WebGLTransformFeedback; }; WebGLUniformLocation: { new (): WebGLUniformLocation; prototype: WebGLUniformLocation; }; WebGLVertexArrayObject: { new (): WebGLVertexArrayObject; prototype: WebGLVertexArrayObject; }; WebSocket: { new (url: string | URL, protocols?: string | string[]): WebSocket; prototype: WebSocket; readonly CONNECTING: 0; readonly OPEN: 1; readonly CLOSING: 2; readonly CLOSED: 3; }; WebTransport: { new (url: string | URL, options?: WebTransportOptions): WebTransport; prototype: WebTransport; }; WebTransportBidirectionalStream: { new (): WebTransportBidirectionalStream; prototype: WebTransportBidirectionalStream; }; WebTransportDatagramDuplexStream: { new (): WebTransportDatagramDuplexStream; prototype: WebTransportDatagramDuplexStream; }; WebTransportError: { new (message?: string, options?: WebTransportErrorOptions): WebTransportError; prototype: WebTransportError; }; WheelEvent: { new (type: string, eventInitDict?: WheelEventInit): WheelEvent; prototype: WheelEvent; readonly DOM_DELTA_PIXEL: 0; readonly DOM_DELTA_LINE: 1; readonly DOM_DELTA_PAGE: 2; }; Window: { new (): Window; prototype: Window; }; Worker: { new (scriptURL: string | URL, options?: WorkerOptions): Worker; prototype: Worker; }; Worklet: { new (): Worklet; prototype: Worklet; }; WritableStream: { new <W>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>; prototype: WritableStream<any>; }; WritableStreamDefaultController: { new (): WritableStreamDefaultController; prototype: WritableStreamDefaultController; }; WritableStreamDefaultWriter: { new <W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>; prototype: WritableStreamDefaultWriter<any>; }; XMLDocument: { new (): XMLDocument; prototype: XMLDocument; }; XMLHttpRequest: { new (): XMLHttpRequest; prototype: XMLHttpRequest; readonly UNSENT: 0; readonly OPENED: 1; readonly HEADERS_RECEIVED: 2; readonly LOADING: 3; readonly DONE: 4; }; XMLHttpRequestEventTarget: { new (): XMLHttpRequestEventTarget; prototype: XMLHttpRequestEventTarget; }; XMLHttpRequestUpload: { new (): XMLHttpRequestUpload; prototype: XMLHttpRequestUpload; }; XMLSerializer: { new (): XMLSerializer; prototype: XMLSerializer; }; XPathEvaluator: { new (): XPathEvaluator; prototype: XPathEvaluator; }; XPathExpression: { new (): XPathExpression; prototype: XPathExpression; }; XPathResult: { new (): XPathResult; prototype: XPathResult; readonly ANY_TYPE: 0; readonly NUMBER_TYPE: 1; readonly STRING_TYPE: 2; readonly BOOLEAN_TYPE: 3; readonly UNORDERED_NODE_ITERATOR_TYPE: 4; readonly ORDERED_NODE_ITERATOR_TYPE: 5; readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6; readonly ORDERED_NODE_SNAPSHOT_TYPE: 7; readonly ANY_UNORDERED_NODE_TYPE: 8; readonly FIRST_ORDERED_NODE_TYPE: 9; }; XSLTProcessor: { new (): XSLTProcessor; prototype: XSLTProcessor; }; console: Console; CSS: { highlights: HighlightRegistry; Hz: (value: number) => CSSUnitValue; Q: (value: number) => CSSUnitValue; cap: (value: number) => CSSUnitValue; ch: (value: number) => CSSUnitValue; cm: (value: number) => CSSUnitValue; cqb: (value: number) => CSSUnitValue; cqh: (value: number) => CSSUnitValue; cqi: (value: number) => CSSUnitValue; cqmax: (value: number) => CSSUnitValue; cqmin: (value: number) => CSSUnitValue; cqw: (value: number) => CSSUnitValue; deg: (value: number) => CSSUnitValue; dpcm: (value: number) => CSSUnitValue; dpi: (value: number) => CSSUnitValue; dppx: (value: number) => CSSUnitValue; dvb: (value: number) => CSSUnitValue; dvh: (value: number) => CSSUnitValue; dvi: (value: number) => CSSUnitValue; dvmax: (value: number) => CSSUnitValue; dvmin: (value: number) => CSSUnitValue; dvw: (value: number) => CSSUnitValue; em: (value: number) => CSSUnitValue; escape: (ident: string) => string; ex: (value: number) => CSSUnitValue; fr: (value: number) => CSSUnitValue; grad: (value: number) => CSSUnitValue; ic: (value: number) => CSSUnitValue; kHz: (value: number) => CSSUnitValue; lh: (value: number) => CSSUnitValue; lvb: (value: number) => CSSUnitValue; lvh: (value: number) => CSSUnitValue; lvi: (value: number) => CSSUnitValue; lvmax: (value: number) => CSSUnitValue; lvmin: (value: number) => CSSUnitValue; lvw: (value: number) => CSSUnitValue; mm: (value: number) => CSSUnitValue; ms: (value: number) => CSSUnitValue; number: (value: number) => CSSUnitValue; pc: (value: number) => CSSUnitValue; percent: (value: number) => CSSUnitValue; pt: (value: number) => CSSUnitValue; px: (value: number) => CSSUnitValue; rad: (value: number) => CSSUnitValue; rcap: (value: number) => CSSUnitValue; rch: (value: number) => CSSUnitValue; registerProperty: (definition: PropertyDefinition) => void; rem: (value: number) => CSSUnitValue; rex: (value: number) => CSSUnitValue; ric: (value: number) => CSSUnitValue; rlh: (value: number) => CSSUnitValue; s: (value: number) => CSSUnitValue; supports: { (property: string, value: string): boolean; (conditionText: string): boolean; }; svb: (value: number) => CSSUnitValue; svh: (value: number) => CSSUnitValue; svi: (value: number) => CSSUnitValue; svmax: (value: number) => CSSUnitValue; svmin: (value: number) => CSSUnitValue; svw: (value: number) => CSSUnitValue; turn: (value: number) => CSSUnitValue; vb: (value: number) => CSSUnitValue; vh: (value: number) => CSSUnitValue; vi: (value: number) => CSSUnitValue; vmax: (value: number) => CSSUnitValue; vmin: (value: number) => CSSUnitValue; vw: (value: number) => CSSUnitValue; }; WebAssembly: { CompileError: { (message?: string): CompileError; new (message?: string): CompileError; prototype: CompileError; }; Global: { new <T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T]): Global<T>; prototype: Global<keyof ValueTypeMap>; }; Instance: { new (module: Module, importObject?: Imports): Instance; prototype: Instance; }; LinkError: { (message?: string): LinkError; new (message?: string): LinkError; prototype: LinkError; }; Memory: { new (descriptor: MemoryDescriptor): Memory; prototype: Memory; }; Module: { new (bytes: BufferSource): Module; prototype: Module; customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[]; exports: (moduleObject: Module) => ModuleExportDescriptor[]; imports: (moduleObject: Module) => ModuleImportDescriptor[]; }; RuntimeError: { (message?: string): RuntimeError; new (message?: string): RuntimeError; prototype: RuntimeError; }; Table: { new (descriptor: TableDescriptor, value?: any): Table; prototype: Table; }; compile: (bytes: BufferSource) => Promise<Module>; compileStreaming: (source: PromiseLike<Response> | Response) => Promise<Module>; instantiate: { (bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>; (moduleObject: Module, importObject?: Imports): Promise<Instance>; }; instantiateStreaming: (source: PromiseLike<Response> | Response, importObject?: Imports) => Promise<WebAssemblyInstantiatedSource>; validate: (bytes: BufferSource) => boolean; }; Audio: new (src?: string) => HTMLAudioElement; Image: new (width?: number, height?: number) => HTMLImageElement; Option: new (text?: string, value?: string, defaultSelected?: boolean, selected?: boolean) => HTMLOptionElement; clientInformation: Navigator; closed: boolean; customElements: CustomElementRegistry; devicePixelRatio: number; document: Document; event: Event; external: External; frameElement: Element; frames: Window; history: History; innerHeight: number; innerWidth: number; length: number; location: Location; locationbar: BarProp; menubar: BarProp; navigator: Navigator; ondevicemotion: (ev: DeviceMotionEvent) => any; ondeviceorientation: (ev: DeviceOrientationEvent) => any; ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any; onorientationchange: (ev: Event) => any; opener: any; orientation: number; outerHeight: number; outerWidth: number; pageXOffset: number; pageYOffset: number; parent: Window; personalbar: BarProp; screen: Screen; screenLeft: number; screenTop: number; screenX: number; screenY: number; scrollX: number; scrollY: number; scrollbars: BarProp; self: Window & ???; speechSynthesis: SpeechSynthesis; status: string; statusbar: BarProp; toolbar: BarProp; top: Window; visualViewport: VisualViewport; window: Window & ???; alert: (message?: any) => void; blur: () => void; cancelIdleCallback: (handle: number) => void; captureEvents: () => void; close: () => void; confirm: (message?: string) => boolean; focus: () => void; getComputedStyle: (elt: Element, pseudoElt?: string) => CSSStyleDeclaration; getSelection: () => Selection; matchMedia: (query: string) => MediaQueryList; moveBy: (x: number, y: number) => void; moveTo: (x: number, y: number) => void; open: (url?: string | URL, target?: string, features?: string) => Window; postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[]): void; (message: any, options?: WindowPostMessageOptions): void; }; print: () => void; prompt: (message?: string, _default?: string) => string; releaseEvents: () => void; requestIdleCallback: (callback: IdleRequestCallback, options?: IdleRequestOptions) => number; resizeBy: (x: number, y: number) => void; resizeTo: (width: number, height: number) => void; scroll: { (options?: ScrollToOptions): void; (x: number, y: number): void; }; scrollBy: { (options?: ScrollToOptions): void; (x: number, y: number): void; }; scrollTo: { (options?: ScrollToOptions): void; (x: number, y: number): void; }; stop: () => void; toString: () => string; dispatchEvent: (event: Event) => boolean; cancelAnimationFrame: (handle: number) => void; requestAnimationFrame: (callback: FrameRequestCallback) => number; onabort: (ev: UIEvent) => any; onanimationcancel: (ev: AnimationEvent) => any; onanimationend: (ev: AnimationEvent) => any; onanimationiteration: (ev: AnimationEvent) => any; onanimationstart: (ev: AnimationEvent) => any; onauxclick: (ev: MouseEvent) => any; onbeforeinput: (ev: InputEvent) => any; onbeforetoggle: (ev: Event) => any; onblur: (ev: FocusEvent) => any; oncancel: (ev: Event) => any; oncanplay: (ev: Event) => any; oncanplaythrough: (ev: Event) => any; onchange: (ev: Event) => any; onclick: (ev: MouseEvent) => any; onclose: (ev: Event) => any; oncontextlost: (ev: Event) => any; oncontextmenu: (ev: MouseEvent) => any; oncontextrestored: (ev: Event) => any; oncopy: (ev: ClipboardEvent) => any; oncuechange: (ev: Event) => any; oncut: (ev: ClipboardEvent) => any; ondblclick: (ev: MouseEvent) => any; ondrag: (ev: DragEvent) => any; ondragend: (ev: DragEvent) => any; ondragenter: (ev: DragEvent) => any; ondragleave: (ev: DragEvent) => any; ondragover: (ev: DragEvent) => any; ondragstart: (ev: DragEvent) => any; ondrop: (ev: DragEvent) => any; ondurationchange: (ev: Event) => any; onemptied: (ev: Event) => any; onended: (ev: Event) => any; onerror: OnErrorEventHandlerNonNull; onfocus: (ev: FocusEvent) => any; onformdata: (ev: FormDataEvent) => any; ongotpointercapture: (ev: PointerEvent) => any; oninput: (ev: Event) => any; oninvalid: (ev: Event) => any; onkeydown: (ev: KeyboardEvent) => any; onkeypress: (ev: KeyboardEvent) => any; onkeyup: (ev: KeyboardEvent) => any; onload: (ev: Event) => any; onloadeddata: (ev: Event) => any; onloadedmetadata: (ev: Event) => any; onloadstart: (ev: Event) => any; onlostpointercapture: (ev: PointerEvent) => any; onmousedown: (ev: MouseEvent) => any; onmouseenter: (ev: MouseEvent) => any; onmouseleave: (ev: MouseEvent) => any; onmousemove: (ev: MouseEvent) => any; onmouseout: (ev: MouseEvent) => any; onmouseover: (ev: MouseEvent) => any; onmouseup: (ev: MouseEvent) => any; onpaste: (ev: ClipboardEvent) => any; onpause: (ev: Event) => any; onplay: (ev: Event) => any; onplaying: (ev: Event) => any; onpointercancel: (ev: PointerEvent) => any; onpointerdown: (ev: PointerEvent) => any; onpointerenter: (ev: PointerEvent) => any; onpointerleave: (ev: PointerEvent) => any; onpointermove: (ev: PointerEvent) => any; onpointerout: (ev: PointerEvent) => any; onpointerover: (ev: PointerEvent) => any; onpointerup: (ev: PointerEvent) => any; onprogress: (ev: ProgressEvent<EventTarget>) => any; onratechange: (ev: Event) => any; onreset: (ev: Event) => any; onresize: (ev: UIEvent) => any; onscroll: (ev: Event) => any; onscrollend: (ev: Event) => any; onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any; onseeked: (ev: Event) => any; onseeking: (ev: Event) => any; onselect: (ev: Event) => any; onselectionchange: (ev: Event) => any; onselectstart: (ev: Event) => any; onslotchange: (ev: Event) => any; onstalled: (ev: Event) => any; onsubmit: (ev: SubmitEvent) => any; onsuspend: (ev: Event) => any; ontimeupdate: (ev: Event) => any; ontoggle: (ev: Event) => any; ontouchcancel: (ev: TouchEvent) => any; ontouchend: (ev: TouchEvent) => any; ontouchmove: (ev: TouchEvent) => any; ontouchstart: (ev: TouchEvent) => any; ontransitioncancel: (ev: TransitionEvent) => any; ontransitionend: (ev: TransitionEvent) => any; ontransitionrun: (ev: TransitionEvent) => any; ontransitionstart: (ev: TransitionEvent) => any; onvolumechange: (ev: Event) => any; onwaiting: (ev: Event) => any; onwebkitanimationend: (ev: Event) => any; onwebkitanimationiteration: (ev: Event) => any; onwebkitanimationstart: (ev: Event) => any; onwebkittransitionend: (ev: Event) => any; onwheel: (ev: WheelEvent) => any; onafterprint: (ev: Event) => any; onbeforeprint: (ev: Event) => any; onbeforeunload: (ev: BeforeUnloadEvent) => any; ongamepadconnected: (ev: GamepadEvent) => any; ongamepaddisconnected: (ev: GamepadEvent) => any; onhashchange: (ev: HashChangeEvent) => any; onlanguagechange: (ev: Event) => any; onmessage: (ev: MessageEvent<any>) => any; onmessageerror: (ev: MessageEvent<any>) => any; onoffline: (ev: Event) => any; ononline: (ev: Event) => any; onpagehide: (ev: PageTransitionEvent) => any; onpageshow: (ev: PageTransitionEvent) => any; onpopstate: (ev: PopStateEvent) => any; onrejectionhandled: (ev: PromiseRejectionEvent) => any; onstorage: (ev: StorageEvent) => any; onunhandledrejection: (ev: PromiseRejectionEvent) => any; onunload: (ev: Event) => any; localStorage: Storage; caches: CacheStorage; crossOriginIsolated: boolean; crypto: Crypto; indexedDB: IDBFactory; isSecureContext: boolean; origin: string; performance: Performance; atob: (data: string) => string; btoa: (data: string) => string; clearInterval: (id: number) => void; clearTimeout: (id: number) => void; createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>; (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>; }; fetch: (input: URL | RequestInfo, init?: RequestInit) => Promise<Response>; queueMicrotask: (callback: VoidFunction) => void; reportError: (e: any) => void; setInterval: (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number; setTimeout: (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number; structuredClone: <T>(value: T, options?: StructuredSerializeOptions) => T; sessionStorage: Storage; addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void; }; removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void; }; importScripts: (...urls: string[]) => void; ActiveXObject: ActiveXObject; WScript: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string, strPrefix?: string) => any; Sleep: (intTime: number) => void; }; WSH: { Echo: (s: any) => void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item: (n: number) => string; }; ScriptFullName: string; Quit: (exitCode?: number) => number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject: (objEventSource: any, strPrefix: string) => void; CreateObject: (strProgID: string, strPrefix?: string) => any; DisconnectObject: (obj: any) => void; GetObject: (strPathname: string, strProgID?: string, strPrefix?: string) => any; Sleep: (intTime: number) => void; }; Enumerator: EnumeratorConstructor; VBArray: VBArrayConstructor; readonly globalThis: ???; undefined: undefined; }'.
        } else {
            // please file a bug if you get this error!
            throw new Error('unknown environment');
        }
    })());
    