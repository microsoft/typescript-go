--- old.emitStatementsBeforeSuperCall.symbols
+++ new.emitStatementsBeforeSuperCall.symbols
@@= skipped -9, +9 lines =@@
 
     // @ts-ignore
     constructor(public p: number) {
->p : Symbol(Sub.p, Decl(emitStatementsBeforeSuperCall.ts, 4, 16))
+>p : Symbol(p, Decl(emitStatementsBeforeSuperCall.ts, 4, 16))
 
         console.log('hi'); // should emit before super
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
-
         super();
 >super : Symbol(Base, Decl(emitStatementsBeforeSuperCall.ts, 0, 0))
     }
     field = 0;
->field : Symbol(Sub.field, Decl(emitStatementsBeforeSuperCall.ts, 7, 5))
+>field : Symbol(field, Decl(emitStatementsBeforeSuperCall.ts, 7, 5))
 }
 
 class Test extends Base {
@@= skipped -19, +15 lines =@@
 >Base : Symbol(Base, Decl(emitStatementsBeforeSuperCall.ts, 0, 0))
 
     prop: number;
->prop : Symbol(Test.prop, Decl(emitStatementsBeforeSuperCall.ts, 11, 25))
+>prop : Symbol(prop, Decl(emitStatementsBeforeSuperCall.ts, 11, 25))
 
     // @ts-ignore
     constructor(public p: number) {
->p : Symbol(Test.p, Decl(emitStatementsBeforeSuperCall.ts, 14, 16))
+>p : Symbol(p, Decl(emitStatementsBeforeSuperCall.ts, 14, 16))
 
         1; // should emit before super
         super();
 >super : Symbol(Base, Decl(emitStatementsBeforeSuperCall.ts, 0, 0))
 
         this.prop = 1;
->this.prop : Symbol(Test.prop, Decl(emitStatementsBeforeSuperCall.ts, 11, 25))
+>this.prop : Symbol(prop, Decl(emitStatementsBeforeSuperCall.ts, 11, 25))
 >this : Symbol(Test, Decl(emitStatementsBeforeSuperCall.ts, 9, 1))
->prop : Symbol(Test.prop, Decl(emitStatementsBeforeSuperCall.ts, 11, 25))
+>prop : Symbol(prop, Decl(emitStatementsBeforeSuperCall.ts, 11, 25))
     }
 }
 
