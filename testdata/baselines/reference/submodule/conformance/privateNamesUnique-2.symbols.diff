--- old.privateNamesUnique-2.symbols
+++ new.privateNamesUnique-2.symbols
@@= skipped -4, +4 lines =@@
 >Foo : Symbol(Foo, Decl(a.ts, 0, 0))
 
     #x;
->#x : Symbol(Foo.#x, Decl(a.ts, 0, 18))
+>#x : Symbol(#x, Decl(a.ts, 0, 18))
 
     copy(other: import("./b").Foo) {
->copy : Symbol(Foo.copy, Decl(a.ts, 1, 7))
+>copy : Symbol(copy, Decl(a.ts, 1, 7))
 >other : Symbol(other, Decl(a.ts, 2, 9))
 >Foo : Symbol(Foo, Decl(b.ts, 0, 0))
 
@@= skipped -17, +17 lines =@@
 >Foo : Symbol(Foo, Decl(b.ts, 0, 0))
 
     #x;
->#x : Symbol(Foo.#x, Decl(b.ts, 0, 18))
+>#x : Symbol(#x, Decl(b.ts, 0, 18))
 }
 
 === main.ts ===
 import { Foo as A } from "./a";
->Foo : Symbol(A, Decl(a.ts, 0, 0))
+>Foo : Symbol(Foo, Decl(a.ts, 0, 0))
 >A : Symbol(A, Decl(main.ts, 0, 8))
 
 import { Foo as B } from "./b";
->Foo : Symbol(B, Decl(b.ts, 0, 0))
+>Foo : Symbol(Foo, Decl(b.ts, 0, 0))
 >B : Symbol(B, Decl(main.ts, 1, 8))
 
 const a = new A();
@@= skipped -21, +21 lines =@@
 >B : Symbol(B, Decl(main.ts, 1, 8))
 
 a.copy(b); // error
->a.copy : Symbol(A.copy, Decl(a.ts, 1, 7))
+>a.copy : Symbol(copy, Decl(a.ts, 1, 7))
 >a : Symbol(a, Decl(main.ts, 3, 5))
->copy : Symbol(A.copy, Decl(a.ts, 1, 7))
+>copy : Symbol(copy, Decl(a.ts, 1, 7))
 >b : Symbol(b, Decl(main.ts, 4, 5))
 
