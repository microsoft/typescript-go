--- old.bestChoiceType.types
+++ new.bestChoiceType.types
@@= skipped -8, +8 lines =@@
 >(''.match(/ /) || []) : RegExpMatchArray | []
 >''.match(/ /) || [] : RegExpMatchArray | []
 >''.match(/ /) : RegExpMatchArray | null
->''.match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
+>''.match : (regexp: string | RegExp) => RegExpMatchArray | null
 >'' : ""
->match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
+>match : (regexp: string | RegExp) => RegExpMatchArray | null
 >/ / : RegExp
 >[] : []
 >map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[])
@@= skipped -21, +21 lines =@@
     let x = ''.match(/ /);
 >x : RegExpMatchArray | null
 >''.match(/ /) : RegExpMatchArray | null
->''.match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
+>''.match : (regexp: string | RegExp) => RegExpMatchArray | null
 >'' : ""
->match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
+>match : (regexp: string | RegExp) => RegExpMatchArray | null
 >/ / : RegExp

     let y = x || [];
@@= skipped -31, +31 lines =@@
     let x = ''.match(/ /);
 >x : RegExpMatchArray | null
 >''.match(/ /) : RegExpMatchArray | null
->''.match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
+>''.match : (regexp: string | RegExp) => RegExpMatchArray | null
 >'' : ""
->match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
+>match : (regexp: string | RegExp) => RegExpMatchArray | null
 >/ / : RegExp

     let y = x ? x : [];
->y : RegExpMatchArray | never[]
->x ? x : [] : RegExpMatchArray | never[]
+>y : never[] | RegExpMatchArray
+>x ? x : [] : never[] | RegExpMatchArray
 >x : RegExpMatchArray | null
 >x : RegExpMatchArray
 >[] : never[]
@@= skipped -16, +16 lines =@@
 >z : any[]
 >y.map(s => s.toLowerCase()) : any[]
 >y.map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[])
->y : RegExpMatchArray | never[]
+>y : never[] | RegExpMatchArray
 >map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[])
 >s => s.toLowerCase() : (s: any) => any
 >s : any