--- old.genericFunctionCallSignatureReturnTypeMismatch.types
+++ new.genericFunctionCallSignatureReturnTypeMismatch.types
@@= skipped -1, +1 lines =@@
 
 === genericFunctionCallSignatureReturnTypeMismatch.ts ===
 interface Array<T> {}
+>Array : T[]
+>T : T
 
 var f : { <T>(x:T): T; }
 >f : <T>(x: T) => T
->  : ^ ^^ ^^ ^^^^^ 
+>T : T
 >x : T
->  : ^
 
 var g : { <S>() : S[]; };
 >g : <S>() => S[]
->  : ^ ^^^^^^^   
+>S : S
 
 f = g;
 >f = g : <S>() => S[]
->      : ^ ^^^^^^^   
 >f : <T>(x: T) => T
->  : ^ ^^ ^^ ^^^^^ 
 >g : <S>() => S[]
->  : ^ ^^^^^^^   
 
 var s = f("str").toUpperCase();
 >s : string
->  : ^^^^^^
 >f("str").toUpperCase() : string
->                       : ^^^^^^
 >f("str").toUpperCase : () => string
->                     : ^^^^^^      
 >f("str") : "str"
->         : ^^^^^
 >f : <T>(x: T) => T
->  : ^ ^^ ^^ ^^^^^ 
 >"str" : "str"
->      : ^^^^^
 >toUpperCase : () => string
->            : ^^^^^^      
 
 console.log(s);
 >console.log(s) : void
->               : ^^^^
 >console.log : (...data: any[]) => void
->            : ^^^^    ^^     ^^^^^    
 >console : Console
->        : ^^^^^^^
 >log : (...data: any[]) => void
->    : ^^^^    ^^     ^^^^^    
 >s : string
->  : ^^^^^^
 
