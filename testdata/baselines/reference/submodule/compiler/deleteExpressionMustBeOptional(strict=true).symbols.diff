--- old.deleteExpressionMustBeOptional(strict=true).symbols
+++ new.deleteExpressionMustBeOptional(strict=true).symbols
@@= skipped -4, +4 lines =@@
 >Foo : Symbol(Foo, Decl(deleteExpressionMustBeOptional.ts, 0, 0))
 
     a: number
->a : Symbol(Foo.a, Decl(deleteExpressionMustBeOptional.ts, 0, 15))
+>a : Symbol(a, Decl(deleteExpressionMustBeOptional.ts, 0, 15))
 
     b: number | undefined
->b : Symbol(Foo.b, Decl(deleteExpressionMustBeOptional.ts, 1, 13))
+>b : Symbol(b, Decl(deleteExpressionMustBeOptional.ts, 1, 13))
 
     c: number | null
->c : Symbol(Foo.c, Decl(deleteExpressionMustBeOptional.ts, 2, 25))
+>c : Symbol(c, Decl(deleteExpressionMustBeOptional.ts, 2, 25))
 
     d?: number
->d : Symbol(Foo.d, Decl(deleteExpressionMustBeOptional.ts, 3, 20))
+>d : Symbol(d, Decl(deleteExpressionMustBeOptional.ts, 3, 20))
 
     e: number | undefined | null
->e : Symbol(Foo.e, Decl(deleteExpressionMustBeOptional.ts, 4, 14))
+>e : Symbol(e, Decl(deleteExpressionMustBeOptional.ts, 4, 14))
 
     f?: number | undefined | null
->f : Symbol(Foo.f, Decl(deleteExpressionMustBeOptional.ts, 5, 32))
+>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 5, 32))
 
     g: unknown
->g : Symbol(Foo.g, Decl(deleteExpressionMustBeOptional.ts, 6, 33))
+>g : Symbol(g, Decl(deleteExpressionMustBeOptional.ts, 6, 33))
 
     h: any
->h : Symbol(Foo.h, Decl(deleteExpressionMustBeOptional.ts, 7, 14))
+>h : Symbol(h, Decl(deleteExpressionMustBeOptional.ts, 7, 14))
 
     i: never
->i : Symbol(Foo.i, Decl(deleteExpressionMustBeOptional.ts, 8, 10))
+>i : Symbol(i, Decl(deleteExpressionMustBeOptional.ts, 8, 10))
 }
 
 interface AA {
@@= skipped -54, +54 lines =@@
 >BB : Symbol(BB, Decl(deleteExpressionMustBeOptional.ts, 14, 1))
 
 delete f.a
->f.a : Symbol(Foo.a, Decl(deleteExpressionMustBeOptional.ts, 0, 15))
+>f.a : Symbol(a, Decl(deleteExpressionMustBeOptional.ts, 0, 15))
 >f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 20, 13))
->a : Symbol(Foo.a, Decl(deleteExpressionMustBeOptional.ts, 0, 15))
+>a : Symbol(a, Decl(deleteExpressionMustBeOptional.ts, 0, 15))
 
 delete f.b
->f.b : Symbol(Foo.b, Decl(deleteExpressionMustBeOptional.ts, 1, 13))
+>f.b : Symbol(b, Decl(deleteExpressionMustBeOptional.ts, 1, 13))
 >f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 20, 13))
->b : Symbol(Foo.b, Decl(deleteExpressionMustBeOptional.ts, 1, 13))
+>b : Symbol(b, Decl(deleteExpressionMustBeOptional.ts, 1, 13))
 
 delete f.c
->f.c : Symbol(Foo.c, Decl(deleteExpressionMustBeOptional.ts, 2, 25))
+>f.c : Symbol(c, Decl(deleteExpressionMustBeOptional.ts, 2, 25))
 >f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 20, 13))
->c : Symbol(Foo.c, Decl(deleteExpressionMustBeOptional.ts, 2, 25))
+>c : Symbol(c, Decl(deleteExpressionMustBeOptional.ts, 2, 25))
 
 delete f.d
->f.d : Symbol(Foo.d, Decl(deleteExpressionMustBeOptional.ts, 3, 20))
+>f.d : Symbol(d, Decl(deleteExpressionMustBeOptional.ts, 3, 20))
 >f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 20, 13))
->d : Symbol(Foo.d, Decl(deleteExpressionMustBeOptional.ts, 3, 20))
+>d : Symbol(d, Decl(deleteExpressionMustBeOptional.ts, 3, 20))
 
 delete f.e
->f.e : Symbol(Foo.e, Decl(deleteExpressionMustBeOptional.ts, 4, 14))
+>f.e : Symbol(e, Decl(deleteExpressionMustBeOptional.ts, 4, 14))
 >f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 20, 13))
->e : Symbol(Foo.e, Decl(deleteExpressionMustBeOptional.ts, 4, 14))
+>e : Symbol(e, Decl(deleteExpressionMustBeOptional.ts, 4, 14))
 
 delete f.f
->f.f : Symbol(Foo.f, Decl(deleteExpressionMustBeOptional.ts, 5, 32))
+>f.f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 5, 32))
 >f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 20, 13))
->f : Symbol(Foo.f, Decl(deleteExpressionMustBeOptional.ts, 5, 32))
+>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 5, 32))
 
 delete f.g
->f.g : Symbol(Foo.g, Decl(deleteExpressionMustBeOptional.ts, 6, 33))
+>f.g : Symbol(g, Decl(deleteExpressionMustBeOptional.ts, 6, 33))
 >f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 20, 13))
->g : Symbol(Foo.g, Decl(deleteExpressionMustBeOptional.ts, 6, 33))
+>g : Symbol(g, Decl(deleteExpressionMustBeOptional.ts, 6, 33))
 
 delete f.h
->f.h : Symbol(Foo.h, Decl(deleteExpressionMustBeOptional.ts, 7, 14))
+>f.h : Symbol(h, Decl(deleteExpressionMustBeOptional.ts, 7, 14))
 >f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 20, 13))
->h : Symbol(Foo.h, Decl(deleteExpressionMustBeOptional.ts, 7, 14))
+>h : Symbol(h, Decl(deleteExpressionMustBeOptional.ts, 7, 14))
 
 delete f.i
->f.i : Symbol(Foo.i, Decl(deleteExpressionMustBeOptional.ts, 8, 10))
+>f.i : Symbol(i, Decl(deleteExpressionMustBeOptional.ts, 8, 10))
 >f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 20, 13))
->i : Symbol(Foo.i, Decl(deleteExpressionMustBeOptional.ts, 8, 10))
+>i : Symbol(i, Decl(deleteExpressionMustBeOptional.ts, 8, 10))
 
 delete f.j
 >f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 20, 13))
 
 delete a.a
->a.a : Symbol(AA.__index, Decl(deleteExpressionMustBeOptional.ts, 12, 14))
+>a.a : Symbol((Missing), Decl(deleteExpressionMustBeOptional.ts, 12, 14))
 >a : Symbol(a, Decl(deleteExpressionMustBeOptional.ts, 21, 13))
->a : Symbol(AA.__index, Decl(deleteExpressionMustBeOptional.ts, 12, 14))
+>a : Symbol((Missing), Decl(deleteExpressionMustBeOptional.ts, 12, 14))
 
 delete a.b
->a.b : Symbol(AA.__index, Decl(deleteExpressionMustBeOptional.ts, 12, 14))
+>a.b : Symbol((Missing), Decl(deleteExpressionMustBeOptional.ts, 12, 14))
 >a : Symbol(a, Decl(deleteExpressionMustBeOptional.ts, 21, 13))
->b : Symbol(AA.__index, Decl(deleteExpressionMustBeOptional.ts, 12, 14))
+>b : Symbol((Missing), Decl(deleteExpressionMustBeOptional.ts, 12, 14))
 
 delete b.a
 >b : Symbol(b, Decl(deleteExpressionMustBeOptional.ts, 22, 13))
