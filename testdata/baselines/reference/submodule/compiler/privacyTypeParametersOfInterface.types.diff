--- old.privacyTypeParametersOfInterface.types
+++ new.privacyTypeParametersOfInterface.types
@@= skipped -10, +10 lines =@@
 
 class privateClassT<T> {
 >privateClassT : privateClassT<T>
+>T : T
 }
 
 export class publicClassT<T> {
 >publicClassT : publicClassT<T>
+>T : T
 }
 
 // TypeParameter_0_of_exported_interface_1_has_or_is_using_private_type_2
 export interface publicInterfaceWithPrivateTypeParameters<T extends privateClass> {
+>publicInterfaceWithPrivateTypeParameters : publicInterfaceWithPrivateTypeParameters<T>
+>T : T
+
     myMethod(val: T): T; // Error
 >myMethod : (val: T) => T
 >val : T
@@= skipped -29, +34 lines =@@
 }
 
 export interface publicInterfaceWithPublicTypeParameters<T extends publicClass> {
+>publicInterfaceWithPublicTypeParameters : publicInterfaceWithPublicTypeParameters<T>
+>T : T
+
     myMethod(val: T): T; // No Error
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
 }
 
 interface privateInterfaceWithPrivateTypeParameters<T extends privateClass> {
+>privateInterfaceWithPrivateTypeParameters : privateInterfaceWithPrivateTypeParameters<T>
+>T : T
+
     myMethod(val: T): T; // No Error
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
 }
 
 interface privateInterfaceWithPublicTypeParameters<T extends publicClass> {
+>privateInterfaceWithPublicTypeParameters : privateInterfaceWithPublicTypeParameters<T>
+>T : T
+
     myMethod(val: T): T; // No Error
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
 }
 
 export interface publicInterfaceWithPublicTypeParametersWithoutExtends<T> {
+>publicInterfaceWithPublicTypeParametersWithoutExtends : publicInterfaceWithPublicTypeParametersWithoutExtends<T>
+>T : T
+
     myMethod(val: T): T; // No Error
 >myMethod : (val: T) => T
 >val : T
@@= skipped -9, +12 lines =@@
 }
 
 interface privateInterfaceWithPublicTypeParametersWithoutExtends<T> {
+>privateInterfaceWithPublicTypeParametersWithoutExtends : privateInterfaceWithPublicTypeParametersWithoutExtends<T>
+>T : T
+
     myMethod(val: T): T; // No Error
 >myMethod : (val: T) => T
 >val : T
