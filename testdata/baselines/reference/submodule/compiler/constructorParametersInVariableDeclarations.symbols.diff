--- old.constructorParametersInVariableDeclarations.symbols
+++ new.constructorParametersInVariableDeclarations.symbols
@@= skipped -4, +4 lines =@@
 >A : Symbol(A, Decl(constructorParametersInVariableDeclarations.ts, 0, 0))
 
     private a = x;
->a : Symbol(A.a, Decl(constructorParametersInVariableDeclarations.ts, 0, 9))
+>a : Symbol(a, Decl(constructorParametersInVariableDeclarations.ts, 0, 9))
 
     private b = { p: x };
->b : Symbol(A.b, Decl(constructorParametersInVariableDeclarations.ts, 1, 18))
+>b : Symbol(b, Decl(constructorParametersInVariableDeclarations.ts, 1, 18))
 >p : Symbol(p, Decl(constructorParametersInVariableDeclarations.ts, 2, 17))
 
     private c = () => x;
->c : Symbol(A.c, Decl(constructorParametersInVariableDeclarations.ts, 2, 25))
+>c : Symbol(c, Decl(constructorParametersInVariableDeclarations.ts, 2, 25))
 
     constructor(x: number) {
 >x : Symbol(x, Decl(constructorParametersInVariableDeclarations.ts, 4, 16))
@@= skipped -18, +18 lines =@@
 >B : Symbol(B, Decl(constructorParametersInVariableDeclarations.ts, 6, 1))
 
     private a = x;
->a : Symbol(B.a, Decl(constructorParametersInVariableDeclarations.ts, 8, 9))
+>a : Symbol(a, Decl(constructorParametersInVariableDeclarations.ts, 8, 9))
 
     private b = { p: x };
->b : Symbol(B.b, Decl(constructorParametersInVariableDeclarations.ts, 9, 18))
+>b : Symbol(b, Decl(constructorParametersInVariableDeclarations.ts, 9, 18))
 >p : Symbol(p, Decl(constructorParametersInVariableDeclarations.ts, 10, 17))
 
     private c = () => x;
->c : Symbol(B.c, Decl(constructorParametersInVariableDeclarations.ts, 10, 25))
+>c : Symbol(c, Decl(constructorParametersInVariableDeclarations.ts, 10, 25))
 
     constructor() {
         var x = 1;
