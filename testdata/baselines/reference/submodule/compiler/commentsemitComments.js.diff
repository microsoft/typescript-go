--- old.commentsemitComments.js
+++ new.commentsemitComments.js
@@= skipped -99, +99 lines =@@
 foo(50);
 fooVar();
 /**class comment*/
-var c = /** @class */ (function () {
+class c {
     /** constructor comment*/
-    function c() {
-        /** property comment */
-        this.b = 10;
+    constructor() {
     }
+    /** property comment */
+    b = 10;
     /** function comment */
-    c.prototype.myFoo = function () {
-        return this.b;
-    };
-    Object.defineProperty(c.prototype, "prop1", {
-        /** getter comment*/
-        get: function () {
-            return this.b;
-        },
-        /** setter comment*/
-        set: function (val) {
-            this.b = val;
-        },
-        enumerable: false,
-        configurable: true
-    });
+    myFoo() {
+        return this.b;
+    }
+    /** getter comment*/
+    get prop1() {
+        return this.b;
+    }
+    /** setter comment*/
+    set prop1(val) {
+        this.b = val;
+    }
     /** overload implementation signature*/
-    c.prototype.foo1 = function (aOrb) {
+    foo1(aOrb) {
         return aOrb.toString();
-    };
-    return c;
-}());
+    }
+}
 /**instance comment*/
 var i = new c();
 /**interface instance comments*/
@@= skipped -36, +31 lines =@@
 var m1;
 (function (m1) {
     /** class b */
-    var b = /** @class */ (function () {
-        function b(x) {
+    class b {
+        x;
+        constructor(x) {
             this.x = x;
         }
-        return b;
-    }());
+    }
     m1.b = b;
 })(m1 || (m1 = {}));

@@= skipped -45, +45 lines =@@
     /**indexer property*/
     [a: number]: string;
     /** function property;*/
-    myFoo(/*param prop*/ a: number): string;
+    myFoo(a: number): string;
     /** prop*/
     prop: string;
 }