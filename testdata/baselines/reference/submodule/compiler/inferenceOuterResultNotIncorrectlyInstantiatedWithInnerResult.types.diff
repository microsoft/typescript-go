--- old.inferenceOuterResultNotIncorrectlyInstantiatedWithInnerResult.types
+++ new.inferenceOuterResultNotIncorrectlyInstantiatedWithInnerResult.types
@@= skipped -3, +3 lines =@@
 // simple example
 export class Test<A, B> {
 >Test : Test<A, B>
+>A : A
+>B : B
 
     constructor(public a: A, public b: B) { }
 >a : A
@@= skipped -7, +9 lines =@@
 
     test<C>(c: C): Test<B, C> {
 >test : <C>(c: C) => Test<B, C>
+>C : C
 >c : C
 
         return new Test(this.b, c);
@@= skipped -14, +15 lines =@@
 
 // complicated one
 interface Supervisor<out T> {
+>Supervisor : Supervisor<T>
+>T : T
+
     zip<A>(right: Supervisor<A>): Supervisor<[T, A]>;
 >zip : <A>(right: Supervisor<A>) => Supervisor<[T, A]>
+>A : A
 >right : Supervisor<A>
 }
 
 export class Zip<out T0, out T1> implements Supervisor<readonly [T0, T1]> {
 >Zip : Zip<T0, T1>
+>T0 : T0
+>T1 : T1
 
     constructor(
         readonly left: Supervisor<T0>,
@@= skipped -19, +25 lines =@@
 
     zip<A>(right: Supervisor<A>): Supervisor<[[T0, T1], A]> {
 >zip : <A>(right: Supervisor<A>) => Supervisor<[[T0, T1], A]>
+>A : A
 >right : Supervisor<A>
 
         return new Zip(this, right);
@@= skipped -13, +14 lines =@@
 // indirect
 type Assign<T, U> = Omit<T, keyof U> & U;
 >Assign : Assign<T, U>
+>T : T
+>U : U
 
 class Base<T> {
 >Base : Base<T>
+>T : T
 
     constructor(public t: T) { }
 >t : T
@@= skipped -10, +13 lines =@@
 
 export class Foo<T> extends Base<T> {
 >Foo : Foo<T>
+>T : T
 >Base : Base<T>
 
     update(): Foo<Assign<T, { x: number }>> {
@@= skipped -10, +11 lines =@@
 >v : Assign<T, { x: number; }>
 >x : number
 >Object.assign(this.t, { x: 1 }) : T & { x: number; }
->Object.assign : { <T_1 extends {}, U>(target: T_1, source: U): T_1 & U; <T_1 extends {}, U, V>(target: T_1, source1: U, source2: V): T_1 & U & V; <T_1 extends {}, U, V, W>(target: T_1, source1: U, source2: V, source3: W): T_1 & U & V & W; (target: object, ...sources: any[]): any; }
+>Object.assign : { <T extends {}, U>(target: T, source: U): T & U; <T extends {}, U, V>(target: T, source1: U, source2: V): T & U & V; <T extends {}, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W; (target: object, ...sources: any[]): any; }
 >Object : ObjectConstructor
->assign : { <T_1 extends {}, U>(target: T_1, source: U): T_1 & U; <T_1 extends {}, U, V>(target: T_1, source1: U, source2: V): T_1 & U & V; <T_1 extends {}, U, V, W>(target: T_1, source1: U, source2: V, source3: W): T_1 & U & V & W; (target: object, ...sources: any[]): any; }
+>assign : { <T extends {}, U>(target: T, source: U): T & U; <T extends {}, U, V>(target: T, source1: U, source2: V): T & U & V; <T extends {}, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W; (target: object, ...sources: any[]): any; }
 >this.t : T
 >this : this
 >t : T
