--- old.promisePermutations2.symbols
+++ new.promisePermutations2.symbols
@@= skipped -3, +3 lines =@@
 // same as promisePermutations but without the same overloads in Promise<T>

 interface Promise<T> {
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
->T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 2, 18))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 2, 18))

     then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>;
 >then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 2, 22))
 >U : Symbol(U, Decl(promisePermutations2.ts, 3, 9))
 >success : Symbol(success, Decl(promisePermutations2.ts, 3, 12))
 >value : Symbol(value, Decl(promisePermutations2.ts, 3, 23))
->T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 2, 18))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 2, 18))
 >U : Symbol(U, Decl(promisePermutations2.ts, 3, 9))
 >error : Symbol(error, Decl(promisePermutations2.ts, 3, 38))
 >error : Symbol(error, Decl(promisePermutations2.ts, 3, 48))
 >U : Symbol(U, Decl(promisePermutations2.ts, 3, 9))
 >progress : Symbol(progress, Decl(promisePermutations2.ts, 3, 65))
 >progress : Symbol(progress, Decl(promisePermutations2.ts, 3, 78))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
 >U : Symbol(U, Decl(promisePermutations2.ts, 3, 9))

     done<U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
@@= skipped -23, +23 lines =@@
 >U : Symbol(U, Decl(promisePermutations2.ts, 4, 9))
 >success : Symbol(success, Decl(promisePermutations2.ts, 4, 12))
 >value : Symbol(value, Decl(promisePermutations2.ts, 4, 23))
->T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 2, 18))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 2, 18))
 >error : Symbol(error, Decl(promisePermutations2.ts, 4, 40))
 >error : Symbol(error, Decl(promisePermutations2.ts, 4, 50))
 >progress : Symbol(progress, Decl(promisePermutations2.ts, 4, 69))
@@= skipped -93, +93 lines =@@

 declare function testFunctionP(): Promise<number>;
 >testFunctionP : Symbol(testFunctionP, Decl(promisePermutations2.ts, 15, 50))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 declare function testFunction2(): IPromise<{ x: number }>;
 >testFunction2 : Symbol(testFunction2, Decl(promisePermutations2.ts, 16, 50))
@@= skipped -9, +9 lines =@@

 declare function testFunction2P(): Promise<{ x: number }>;
 >testFunction2P : Symbol(testFunction2P, Decl(promisePermutations2.ts, 17, 58))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
 >x : Symbol(x, Decl(promisePermutations2.ts, 18, 44))

 declare function testFunction3(x: number): IPromise<number>;
@@= skipped -11, +11 lines =@@
 declare function testFunction3P(x: number): Promise<number>;
 >testFunction3P : Symbol(testFunction3P, Decl(promisePermutations2.ts, 19, 60))
 >x : Symbol(x, Decl(promisePermutations2.ts, 20, 32))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 declare function testFunction4(x: number, y?: string): IPromise<string>;
 >testFunction4 : Symbol(testFunction4, Decl(promisePermutations2.ts, 20, 60))
@@= skipped -12, +12 lines =@@
 >testFunction4P : Symbol(testFunction4P, Decl(promisePermutations2.ts, 21, 72))
 >x : Symbol(x, Decl(promisePermutations2.ts, 22, 32))
 >y : Symbol(y, Decl(promisePermutations2.ts, 22, 42))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 declare function testFunction5(x: number, cb: (a: string) => string): IPromise<string>;
 >testFunction5 : Symbol(testFunction5, Decl(promisePermutations2.ts, 22, 72))
@@= skipped -14, +14 lines =@@
 >x : Symbol(x, Decl(promisePermutations2.ts, 24, 32))
 >cb : Symbol(cb, Decl(promisePermutations2.ts, 24, 42))
 >a : Symbol(a, Decl(promisePermutations2.ts, 24, 48))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 declare function testFunction6(x: number, cb: <T>(a: T) => T): IPromise<string>;
 >testFunction6 : Symbol(testFunction6, Decl(promisePermutations2.ts, 24, 87))
@@= skipped -20, +20 lines =@@
 >a : Symbol(a, Decl(promisePermutations2.ts, 26, 51))
 >T : Symbol(T, Decl(promisePermutations2.ts, 26, 48))
 >T : Symbol(T, Decl(promisePermutations2.ts, 26, 48))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 declare function testFunction7(cb: <T>(a: T) => T): IPromise<string>;
 >testFunction7 : Symbol(testFunction7, Decl(promisePermutations2.ts, 26, 80))
@@= skipped -18, +18 lines =@@
 >a : Symbol(a, Decl(promisePermutations2.ts, 28, 40))
 >T : Symbol(T, Decl(promisePermutations2.ts, 28, 37))
 >T : Symbol(T, Decl(promisePermutations2.ts, 28, 37))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 declare function testFunction8<T>(x: T, cb: (a: T) => T): IPromise<T>;
 >testFunction8 : Symbol(testFunction8, Decl(promisePermutations2.ts, 28, 69))
@@= skipped -23, +23 lines =@@
 >a : Symbol(a, Decl(promisePermutations2.ts, 30, 46))
 >T : Symbol(T, Decl(promisePermutations2.ts, 30, 32))
 >T : Symbol(T, Decl(promisePermutations2.ts, 30, 32))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
 >T : Symbol(T, Decl(promisePermutations2.ts, 30, 32))

 declare function testFunction9<T>(x: T, cb: <U>(a: U) => U): IPromise<T>;
@@= skipped -26, +26 lines =@@
 >a : Symbol(a, Decl(promisePermutations2.ts, 32, 49))
 >U : Symbol(U, Decl(promisePermutations2.ts, 32, 46))
 >U : Symbol(U, Decl(promisePermutations2.ts, 32, 46))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
 >T : Symbol(T, Decl(promisePermutations2.ts, 32, 32))

 declare function testFunction10<T>(cb: <U>(a: U) => U): IPromise<T>;
@@= skipped -22, +22 lines =@@
 >a : Symbol(a, Decl(promisePermutations2.ts, 34, 44))
 >U : Symbol(U, Decl(promisePermutations2.ts, 34, 41))
 >U : Symbol(U, Decl(promisePermutations2.ts, 34, 41))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
 >T : Symbol(T, Decl(promisePermutations2.ts, 34, 33))

 declare function testFunction11(x: number): IPromise<number>;
@@= skipped -16, +16 lines =@@
 declare function testFunction11P(x: number): Promise<number>;
 >testFunction11P : Symbol(testFunction11P, Decl(promisePermutations2.ts, 37, 61), Decl(promisePermutations2.ts, 38, 61))
 >x : Symbol(x, Decl(promisePermutations2.ts, 38, 33))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 declare function testFunction11P(x: string): Promise<string>;
 >testFunction11P : Symbol(testFunction11P, Decl(promisePermutations2.ts, 37, 61), Decl(promisePermutations2.ts, 38, 61))
 >x : Symbol(x, Decl(promisePermutations2.ts, 39, 33))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 declare function testFunction12<T>(x: T): IPromise<T>;
 >testFunction12 : Symbol(testFunction12, Decl(promisePermutations2.ts, 39, 61), Decl(promisePermutations2.ts, 41, 54))
@@= skipped -40, +40 lines =@@
 >T : Symbol(T, Decl(promisePermutations2.ts, 44, 33))
 >y : Symbol(y, Decl(promisePermutations2.ts, 44, 41))
 >T : Symbol(T, Decl(promisePermutations2.ts, 44, 33))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
 >T : Symbol(T, Decl(promisePermutations2.ts, 44, 33))

 var r1: IPromise<number>;
@@= skipped -41, +41 lines =@@

 var s1: Promise<number>;
 >s1 : Symbol(s1, Decl(promisePermutations2.ts, 50, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 var s1a = s1.then(testFunction, testFunction, testFunction);
 >s1a : Symbol(s1a, Decl(promisePermutations2.ts, 51, 3))
@@= skipped -73, +73 lines =@@

 var s2: Promise<{ x: number; }>;
 >s2 : Symbol(s2, Decl(promisePermutations2.ts, 59, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
 >x : Symbol(x, Decl(promisePermutations2.ts, 59, 17))

 var s2a = s2.then(testFunction2, testFunction2, testFunction2);
@@= skipped -73, +73 lines =@@

 var s3: Promise<number>;
 >s3 : Symbol(s3, Decl(promisePermutations2.ts, 68, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 var s3a = s3.then(testFunction3, testFunction3, testFunction3);
 >s3a : Symbol(s3a, Decl(promisePermutations2.ts, 69, 3))
@@= skipped -55, +55 lines =@@
 var sPromise: (x: any) => Promise<string>;
 >sPromise : Symbol(sPromise, Decl(promisePermutations2.ts, 76, 3))
 >x : Symbol(x, Decl(promisePermutations2.ts, 76, 15))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 var r4a = r4.then(testFunction4, testFunction4, testFunction4); // error
 >r4a : Symbol(r4a, Decl(promisePermutations2.ts, 77, 3))
@@= skipped -27, +27 lines =@@

 var s4: Promise<string>;
 >s4 : Symbol(s4, Decl(promisePermutations2.ts, 79, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 var s4a = s4.then(testFunction4, testFunction4, testFunction4); // error
 >s4a : Symbol(s4a, Decl(promisePermutations2.ts, 80, 3))
@@= skipped -72, +72 lines =@@

 var s5: Promise<string>;
 >s5 : Symbol(s5, Decl(promisePermutations2.ts, 88, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 var s5a = s5.then(testFunction5, testFunction5, testFunction5); // error
 >s5a : Symbol(s5a, Decl(promisePermutations2.ts, 89, 3))
@@= skipped -72, +72 lines =@@

 var s6: Promise<string>;
 >s6 : Symbol(s6, Decl(promisePermutations2.ts, 97, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 var s6a = s6.then(testFunction6, testFunction6, testFunction6); // error
 >s6a : Symbol(s6a, Decl(promisePermutations2.ts, 98, 3))
@@= skipped -72, +72 lines =@@

 var s7: Promise<string>;
 >s7 : Symbol(s7, Decl(promisePermutations2.ts, 106, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 var s7a = r7.then(testFunction7, testFunction7, testFunction7); // error
 >s7a : Symbol(s7a, Decl(promisePermutations2.ts, 107, 3))
@@= skipped -55, +55 lines =@@
 var nPromise: (x: any) => Promise<number>;
 >nPromise : Symbol(nPromise, Decl(promisePermutations2.ts, 114, 3))
 >x : Symbol(x, Decl(promisePermutations2.ts, 114, 15))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 var r8a = r8.then(testFunction8, testFunction8, testFunction8); // error
 >r8a : Symbol(r8a, Decl(promisePermutations2.ts, 115, 3))
@@= skipped -27, +27 lines =@@

 var s8: Promise<number>;
 >s8 : Symbol(s8, Decl(promisePermutations2.ts, 117, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 var s8a = s8.then(testFunction8, testFunction8, testFunction8); // error
 >s8a : Symbol(s8a, Decl(promisePermutations2.ts, 118, 3))
@@= skipped -99, +99 lines =@@

 var s9: Promise<number>;
 >s9 : Symbol(s9, Decl(promisePermutations2.ts, 129, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 var s9a = s9.then(testFunction9, testFunction9, testFunction9); // error
 >s9a : Symbol(s9a, Decl(promisePermutations2.ts, 130, 3))
@@= skipped -215, +215 lines =@@

 var s11: Promise<number>;
 >s11 : Symbol(s11, Decl(promisePermutations2.ts, 155, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(promisePermutations2.ts, 0, 0))

 var s11a = s11.then(testFunction11, testFunction11, testFunction11); // ok
 >s11a : Symbol(s11a, Decl(promisePermutations2.ts, 156, 3))