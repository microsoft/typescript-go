--- old.declarationEmitReexportedSymlinkReference.symbols
+++ new.declarationEmitReexportedSymlinkReference.symbols
@@= skipped -8, +8 lines =@@
 
 export const ADMIN = MetadataAccessor.create<boolean>('1');
 >ADMIN : Symbol(ADMIN, Decl(keys.ts, 2, 12))
->MetadataAccessor.create : Symbol(MetadataAccessor.create, Decl(types.d.ts, 10, 23))
+>MetadataAccessor.create : Symbol(create, Decl(types.d.ts, 10, 23))
 >MetadataAccessor : Symbol(MetadataAccessor, Decl(keys.ts, 0, 8))
->create : Symbol(MetadataAccessor.create, Decl(types.d.ts, 10, 23))
+>create : Symbol(create, Decl(types.d.ts, 10, 23))
 
 === monorepo/pkg1/dist/index.d.ts ===
 
@@= skipped -35, +35 lines =@@
 >IdType : Symbol(IdType, Decl(types.d.ts, 5, 2))
 
     readonly key: string;
->key : Symbol(MetadataAccessor.key, Decl(types.d.ts, 7, 69))
+>key : Symbol(key, Decl(types.d.ts, 7, 69))
 
     private constructor();
     toString(): string;
->toString : Symbol(MetadataAccessor.toString, Decl(types.d.ts, 9, 26))
+>toString : Symbol(toString, Decl(types.d.ts, 9, 26))
 
     static create<T, D extends IdType = IdType>(key: string): MetadataAccessor<T, D>;
->create : Symbol(MetadataAccessor.create, Decl(types.d.ts, 10, 23))
+>create : Symbol(create, Decl(types.d.ts, 10, 23))
 >T : Symbol(T, Decl(types.d.ts, 11, 18))
 >D : Symbol(D, Decl(types.d.ts, 11, 20))
 >IdType : Symbol(IdType, Decl(types.d.ts, 5, 2))
