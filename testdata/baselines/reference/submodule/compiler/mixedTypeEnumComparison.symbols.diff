--- old.mixedTypeEnumComparison.symbols
+++ new.mixedTypeEnumComparison.symbols
@@= skipped -4, +4 lines =@@
 >E : Symbol(E, Decl(mixedTypeEnumComparison.ts, 0, 0))
 
     S1 = "foo",
->S1 : Symbol(E.S1, Decl(mixedTypeEnumComparison.ts, 0, 14))
+>S1 : Symbol(S1, Decl(mixedTypeEnumComparison.ts, 0, 14))
 
     S2 = "bar",
->S2 : Symbol(E.S2, Decl(mixedTypeEnumComparison.ts, 1, 15))
+>S2 : Symbol(S2, Decl(mixedTypeEnumComparison.ts, 1, 15))
 
     N1 = 1000,
->N1 : Symbol(E.N1, Decl(mixedTypeEnumComparison.ts, 2, 15))
+>N1 : Symbol(N1, Decl(mixedTypeEnumComparison.ts, 2, 15))
 
     N2 = 25,
->N2 : Symbol(E.N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
+>N2 : Symbol(N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
 }
 
 declare var someNumber: number
@@= skipped -17, +17 lines =@@
 
 if (someNumber > E.N2) {
 >someNumber : Symbol(someNumber, Decl(mixedTypeEnumComparison.ts, 8, 11))
->E.N2 : Symbol(E.N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
+>E.N2 : Symbol(N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
 >E : Symbol(E, Decl(mixedTypeEnumComparison.ts, 0, 0))
->N2 : Symbol(E.N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
+>N2 : Symbol(N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
 
     someNumber = E.N2;
 >someNumber : Symbol(someNumber, Decl(mixedTypeEnumComparison.ts, 8, 11))
->E.N2 : Symbol(E.N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
+>E.N2 : Symbol(N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
 >E : Symbol(E, Decl(mixedTypeEnumComparison.ts, 0, 0))
->N2 : Symbol(E.N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
+>N2 : Symbol(N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
 }
 
 declare const unionOfEnum: E.N1 | E.N2;
 >unionOfEnum : Symbol(unionOfEnum, Decl(mixedTypeEnumComparison.ts, 14, 13))
 >E : Symbol(E, Decl(mixedTypeEnumComparison.ts, 0, 0))
->N1 : Symbol(E.N1, Decl(mixedTypeEnumComparison.ts, 2, 15))
+>N1 : Symbol(N1, Decl(mixedTypeEnumComparison.ts, 2, 15))
 >E : Symbol(E, Decl(mixedTypeEnumComparison.ts, 0, 0))
->N2 : Symbol(E.N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
+>N2 : Symbol(N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
 
 if (someNumber > unionOfEnum) {
 >someNumber : Symbol(someNumber, Decl(mixedTypeEnumComparison.ts, 8, 11))
@@= skipped -24, +24 lines =@@
 
     someNumber = E.N2;
 >someNumber : Symbol(someNumber, Decl(mixedTypeEnumComparison.ts, 8, 11))
->E.N2 : Symbol(E.N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
+>E.N2 : Symbol(N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
 >E : Symbol(E, Decl(mixedTypeEnumComparison.ts, 0, 0))
->N2 : Symbol(E.N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
+>N2 : Symbol(N2, Decl(mixedTypeEnumComparison.ts, 4, 14))
 }
 
 declare var someString: string
@@= skipped -10, +10 lines =@@
 
 if (someString > E.S1) {
 >someString : Symbol(someString, Decl(mixedTypeEnumComparison.ts, 20, 11))
->E.S1 : Symbol(E.S1, Decl(mixedTypeEnumComparison.ts, 0, 14))
+>E.S1 : Symbol(S1, Decl(mixedTypeEnumComparison.ts, 0, 14))
 >E : Symbol(E, Decl(mixedTypeEnumComparison.ts, 0, 0))
->S1 : Symbol(E.S1, Decl(mixedTypeEnumComparison.ts, 0, 14))
+>S1 : Symbol(S1, Decl(mixedTypeEnumComparison.ts, 0, 14))
 
     someString = E.S2;
 >someString : Symbol(someString, Decl(mixedTypeEnumComparison.ts, 20, 11))
->E.S2 : Symbol(E.S2, Decl(mixedTypeEnumComparison.ts, 1, 15))
+>E.S2 : Symbol(S2, Decl(mixedTypeEnumComparison.ts, 1, 15))
 >E : Symbol(E, Decl(mixedTypeEnumComparison.ts, 0, 0))
->S2 : Symbol(E.S2, Decl(mixedTypeEnumComparison.ts, 1, 15))
+>S2 : Symbol(S2, Decl(mixedTypeEnumComparison.ts, 1, 15))
 }
 
 
@@= skipped -19, +19 lines =@@
 >E2 : Symbol(E2, Decl(mixedTypeEnumComparison.ts, 27, 37))
 
     S1 = "foo",
->S1 : Symbol(E2.S1, Decl(mixedTypeEnumComparison.ts, 29, 9))
+>S1 : Symbol(S1, Decl(mixedTypeEnumComparison.ts, 29, 9))
 
     N1 = 1000,
->N1 : Symbol(E2.N1, Decl(mixedTypeEnumComparison.ts, 30, 15))
+>N1 : Symbol(N1, Decl(mixedTypeEnumComparison.ts, 30, 15))
 
     C1 = someValue(),
->C1 : Symbol(E2.C1, Decl(mixedTypeEnumComparison.ts, 31, 14))
+>C1 : Symbol(C1, Decl(mixedTypeEnumComparison.ts, 31, 14))
 >someValue : Symbol(someValue, Decl(mixedTypeEnumComparison.ts, 24, 1))
 }
 
 someString > E2.S1;
 >someString : Symbol(someString, Decl(mixedTypeEnumComparison.ts, 20, 11))
->E2.S1 : Symbol(E2.S1, Decl(mixedTypeEnumComparison.ts, 29, 9))
+>E2.S1 : Symbol(S1, Decl(mixedTypeEnumComparison.ts, 29, 9))
 >E2 : Symbol(E2, Decl(mixedTypeEnumComparison.ts, 27, 37))
->S1 : Symbol(E2.S1, Decl(mixedTypeEnumComparison.ts, 29, 9))
+>S1 : Symbol(S1, Decl(mixedTypeEnumComparison.ts, 29, 9))
 
 someNumber > E2.N1;
 >someNumber : Symbol(someNumber, Decl(mixedTypeEnumComparison.ts, 8, 11))
->E2.N1 : Symbol(E2.N1, Decl(mixedTypeEnumComparison.ts, 30, 15))
+>E2.N1 : Symbol(N1, Decl(mixedTypeEnumComparison.ts, 30, 15))
 >E2 : Symbol(E2, Decl(mixedTypeEnumComparison.ts, 27, 37))
->N1 : Symbol(E2.N1, Decl(mixedTypeEnumComparison.ts, 30, 15))
+>N1 : Symbol(N1, Decl(mixedTypeEnumComparison.ts, 30, 15))
 
 someNumber > E2.C1;
 >someNumber : Symbol(someNumber, Decl(mixedTypeEnumComparison.ts, 8, 11))
->E2.C1 : Symbol(E2.C1, Decl(mixedTypeEnumComparison.ts, 31, 14))
+>E2.C1 : Symbol(C1, Decl(mixedTypeEnumComparison.ts, 31, 14))
 >E2 : Symbol(E2, Decl(mixedTypeEnumComparison.ts, 27, 37))
->C1 : Symbol(E2.C1, Decl(mixedTypeEnumComparison.ts, 31, 14))
+>C1 : Symbol(C1, Decl(mixedTypeEnumComparison.ts, 31, 14))
 
