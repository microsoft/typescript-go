--- old.deferredLookupTypeResolution.types
+++ new.deferredLookupTypeResolution.types
@@= skipped -4, +4 lines =@@
 
 type StringContains<S extends string, L extends string> = (
 >StringContains : StringContains<S, L>
+>S : S
+>L : L
 
     { [K in S]:      'true' } &
+>K : K
+
     { [key: string]: 'false' }
 >key : string
 
@@= skipped -9, +13 lines =@@
 
 type ObjectHasKey<O, L extends string> = StringContains<Extract<keyof O, string>, L>
 >ObjectHasKey : ObjectHasKey<O, L>
+>O : O
+>L : L
 
 type First<T> = ObjectHasKey<T, '0'>;  // Should be deferred
 >First : First<T>
+>T : T
 
 type T1 = ObjectHasKey<{ a: string }, 'a'>;  // 'true'
 >T1 : "true"
@@= skipped -15, +18 lines =@@
 // Verify that mapped type isn't eagerly resolved in type-to-string operation
 
 declare function f1<A extends string, B extends string>(a: A, b: B): { [P in A | B]: any };
->f1 : <A extends string, B extends string>(a: A, b: B) => { [P in A | B]: any; }
+>f1 : <A extends string, B extends string>(a: A, b: B) => { [P in A | B]: any }
+>A : A
+>B : B
 >a : A
 >b : B
+>P : P
 
 function f2<A extends string>(a: A) {
->f2 : <A extends string>(a: A) => { [P in A | "x"]: any; }
+>f2 : <A extends string>(a: A) => { [P in "x" | A]: any }
+>A : A
 >a : A
 
     return f1(a, 'x');
->f1(a, 'x') : { [P in A | "x"]: any; }
->f1 : <A_1 extends string, B extends string>(a: A_1, b: B) => { [P in A_1 | B]: any; }
+>f1(a, 'x') : { [P in "x" | A]: any }
+>f1 : <A extends string, B extends string>(a: A, b: B) => { [P in A | B]: any }
 >a : A
 >'x' : "x"
 }
@@= skipped -21, +25 lines =@@
 
     return f2(x);
 >f2(x) : { a: any; b: any; x: any; }
->f2 : <A extends string>(a: A) => { [P in A | "x"]: any; }
+>f2 : <A extends string>(a: A) => { [P in "x" | A]: any }
 >x : "a" | "b"
 }
 
