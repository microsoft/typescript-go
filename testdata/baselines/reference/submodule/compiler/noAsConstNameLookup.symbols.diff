--- old.noAsConstNameLookup.symbols
+++ new.noAsConstNameLookup.symbols
@@= skipped -21, +21 lines =@@
 >Store : Symbol(Store, Decl(noAsConstNameLookup.ts, 0, 0))
 
     private readonly cleaners: Cleaner[] = []
->cleaners : Symbol(FeatureRunner.cleaners, Decl(noAsConstNameLookup.ts, 5, 45))
+>cleaners : Symbol(cleaners, Decl(noAsConstNameLookup.ts, 5, 45))
 >Cleaner : Symbol(Cleaner, Decl(noAsConstNameLookup.ts, 2, 23))
 
     async runFeature(): Promise<any> {
->runFeature : Symbol(FeatureRunner.runFeature, Decl(noAsConstNameLookup.ts, 6, 45))
+>runFeature : Symbol(runFeature, Decl(noAsConstNameLookup.ts, 6, 45))
 >Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 
         const objectWhichShouldBeConst = {
@@= skipped -24, +24 lines =@@
     }
 
     async run(): Promise<any> {
->run : Symbol(FeatureRunner.run, Decl(noAsConstNameLookup.ts, 14, 5))
+>run : Symbol(run, Decl(noAsConstNameLookup.ts, 14, 5))
 >Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 
         const result = {}
 >result : Symbol(result, Decl(noAsConstNameLookup.ts, 17, 13))
 
         this.cleaners.forEach(c => c(this))
->this.cleaners.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
->this.cleaners : Symbol(FeatureRunner.cleaners, Decl(noAsConstNameLookup.ts, 5, 45))
+>this.cleaners.forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
+>this.cleaners : Symbol(cleaners, Decl(noAsConstNameLookup.ts, 5, 45))
 >this : Symbol(FeatureRunner, Decl(noAsConstNameLookup.ts, 3, 81))
->cleaners : Symbol(FeatureRunner.cleaners, Decl(noAsConstNameLookup.ts, 5, 45))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>cleaners : Symbol(cleaners, Decl(noAsConstNameLookup.ts, 5, 45))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >c : Symbol(c, Decl(noAsConstNameLookup.ts, 18, 30))
 >c : Symbol(c, Decl(noAsConstNameLookup.ts, 18, 30))
 >this : Symbol(FeatureRunner, Decl(noAsConstNameLookup.ts, 3, 81))
@@= skipped -26, +26 lines =@@
 >T : Symbol(T, Decl(noAsConstNameLookup.ts, 23, 15))
 
     f(): void {
->f : Symbol(C.f, Decl(noAsConstNameLookup.ts, 23, 19))
+>f : Symbol(f, Decl(noAsConstNameLookup.ts, 23, 19))
 
         let one = 1 as const;
 >one : Symbol(one, Decl(noAsConstNameLookup.ts, 25, 11))
@@= skipped -8, +8 lines =@@
     }
 }
 new C<string>().f();
->new C<string>().f : Symbol(C.f, Decl(noAsConstNameLookup.ts, 23, 19))
+>new C<string>().f : Symbol(f, Decl(noAsConstNameLookup.ts, 23, 19))
 >C : Symbol(C, Decl(noAsConstNameLookup.ts, 21, 1))
->f : Symbol(C.f, Decl(noAsConstNameLookup.ts, 23, 19))
+>f : Symbol(f, Decl(noAsConstNameLookup.ts, 23, 19))
 
