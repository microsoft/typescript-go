--- old.sourceMapValidationDestructuringForArrayBindingPattern.types
+++ new.sourceMapValidationDestructuringForArrayBindingPattern.types
@@= skipped -51, +51 lines =@@
 }

 for (let [, nameA] = robotA, i = 0; i < 1; i++) {
-> : undefined
 >nameA : string
 >robotA : Robot
 >i : number
@@= skipped -19, +18 lines =@@
 >nameA : string
 }
 for (let [, nameA] = getRobot(), i = 0; i < 1; i++) {
-> : undefined
 >nameA : string
 >getRobot() : Robot
 >getRobot : () => Robot
@@= skipped -20, +19 lines =@@
 >nameA : string
 }
 for (let [, nameA] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
-> : undefined
 >nameA : string
 >[2, "trimmer", "trimming"] : [number, string, string]
 >2 : 2
@@= skipped -22, +21 lines =@@
 >nameA : string
 }
 for (let [, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0; i < 1; i++) {
-> : undefined
 >primarySkillA : string
 >secondarySkillA : string
 >multiRobotA : MultiSkilledRobot
@@= skipped -20, +19 lines =@@
 >primarySkillA : string
 }
 for (let [, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0; i < 1; i++) {
-> : undefined
 >primarySkillA : string
 >secondarySkillA : string
 >getMultiRobot() : MultiSkilledRobot
@@= skipped -21, +20 lines =@@
 >primarySkillA : string
 }
 for (let [, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
-> : undefined
 >primarySkillA : string
 >secondarySkillA : string
 >["trimmer", ["trimming", "edging"]] : [string, [string, string]]