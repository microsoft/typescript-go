--- old.modularizeLibrary_TargetES6UsingES6Lib.symbols
+++ new.modularizeLibrary_TargetES6UsingES6Lib.symbols
@@= skipped -8, +8 lines =@@
 >z : Symbol(z, Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 1, 32))
 
     return Array.from(arguments);
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
+>Array.from : Symbol(from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
+>from : Symbol(from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
 >arguments : Symbol(arguments)
 }
 
@@= skipped -15, +15 lines =@@
 >Map : Symbol(Map, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 
 m.clear();
->m.clear : Symbol(Map.clear, Decl(lib.es2015.collection.d.ts, --, --))
+>m.clear : Symbol(clear, Decl(lib.es2015.collection.d.ts, --, --))
 >m : Symbol(m, Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 8, 3))
->clear : Symbol(Map.clear, Decl(lib.es2015.collection.d.ts, --, --))
+>clear : Symbol(clear, Decl(lib.es2015.collection.d.ts, --, --))
 
 // Using ES6 iterable
 m.keys();
->m.keys : Symbol(Map.keys, Decl(lib.es2015.iterable.d.ts, --, --))
+>m.keys : Symbol(keys, Decl(lib.es2015.iterable.d.ts, --, --))
 >m : Symbol(m, Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 8, 3))
->keys : Symbol(Map.keys, Decl(lib.es2015.iterable.d.ts, --, --))
+>keys : Symbol(keys, Decl(lib.es2015.iterable.d.ts, --, --))
 
 // Using ES6 function
 function Baz() { }
 >Baz : Symbol(Baz, Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 11, 9))
 
 Baz.name;
->Baz.name : Symbol(Function.name, Decl(lib.es2015.core.d.ts, --, --))
+>Baz.name : Symbol(name, Decl(lib.es2015.core.d.ts, --, --))
 >Baz : Symbol(Baz, Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 11, 9))
->name : Symbol(Function.name, Decl(lib.es2015.core.d.ts, --, --))
+>name : Symbol(name, Decl(lib.es2015.core.d.ts, --, --))
 
 // Using ES6 math
 Math.sign(1);
->Math.sign : Symbol(Math.sign, Decl(lib.es2015.core.d.ts, --, --))
+>Math.sign : Symbol(sign, Decl(lib.es2015.core.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->sign : Symbol(Math.sign, Decl(lib.es2015.core.d.ts, --, --))
+>sign : Symbol(sign, Decl(lib.es2015.core.d.ts, --, --))
 
 // Using ES6 object
 var o = {
@@= skipped -34, +34 lines =@@
 
     [Symbol.hasInstance](value: any) {
 >[Symbol.hasInstance] : Symbol([Symbol.hasInstance], Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 22, 9))
->Symbol.hasInstance : Symbol(SymbolConstructor.hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Symbol.hasInstance : Symbol(hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->hasInstance : Symbol(SymbolConstructor.hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>hasInstance : Symbol(hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 >value : Symbol(value, Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 23, 25))
 
         return false;
     }
 };
 o.hasOwnProperty(Symbol.hasInstance);
->o.hasOwnProperty : Symbol(Object.hasOwnProperty, Decl(lib.es5.d.ts, --, --))
+>o.hasOwnProperty : Symbol(hasOwnProperty, Decl(lib.es5.d.ts, --, --))
 >o : Symbol(o, Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 21, 3))
->hasOwnProperty : Symbol(Object.hasOwnProperty, Decl(lib.es5.d.ts, --, --))
->Symbol.hasInstance : Symbol(SymbolConstructor.hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>hasOwnProperty : Symbol(hasOwnProperty, Decl(lib.es5.d.ts, --, --))
+>Symbol.hasInstance : Symbol(hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->hasInstance : Symbol(SymbolConstructor.hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>hasInstance : Symbol(hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 
 // Using Es6 proxy
 var t = {}
@@= skipped -27, +27 lines =@@
 
 // Using ES6 reflect
 Reflect.isExtensible({});
->Reflect.isExtensible : Symbol(Reflect.isExtensible, Decl(lib.es2015.reflect.d.ts, --, --))
+>Reflect.isExtensible : Symbol(isExtensible, Decl(lib.es2015.reflect.d.ts, --, --))
 >Reflect : Symbol(Reflect, Decl(lib.es2015.reflect.d.ts, --, --))
->isExtensible : Symbol(Reflect.isExtensible, Decl(lib.es2015.reflect.d.ts, --, --))
+>isExtensible : Symbol(isExtensible, Decl(lib.es2015.reflect.d.ts, --, --))
 
 // Using Es6 regexp
 var reg = new RegExp("/s");
@@= skipped -10, +10 lines =@@
 >RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 
 reg.flags;
->reg.flags : Symbol(RegExp.flags, Decl(lib.es2015.core.d.ts, --, --))
+>reg.flags : Symbol(flags, Decl(lib.es2015.core.d.ts, --, --))
 >reg : Symbol(reg, Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 37, 3))
->flags : Symbol(RegExp.flags, Decl(lib.es2015.core.d.ts, --, --))
+>flags : Symbol(flags, Decl(lib.es2015.core.d.ts, --, --))
 
 // Using ES6 string
 var str = "Hello world";
 >str : Symbol(str, Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 41, 3))
 
 str.includes("hello", 0);
->str.includes : Symbol(String.includes, Decl(lib.es2015.core.d.ts, --, --))
+>str.includes : Symbol(includes, Decl(lib.es2015.core.d.ts, --, --))
 >str : Symbol(str, Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 41, 3))
->includes : Symbol(String.includes, Decl(lib.es2015.core.d.ts, --, --))
+>includes : Symbol(includes, Decl(lib.es2015.core.d.ts, --, --))
 
 // Using ES6 symbol
 var s = Symbol();
@@= skipped -24, +24 lines =@@
 
     [Symbol.hasInstance](value: any) {
 >[Symbol.hasInstance] : Symbol([Symbol.hasInstance], Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 48, 12))
->Symbol.hasInstance : Symbol(SymbolConstructor.hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Symbol.hasInstance : Symbol(hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 >Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->hasInstance : Symbol(SymbolConstructor.hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>hasInstance : Symbol(hasInstance, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 >value : Symbol(value, Decl(modularizeLibrary_TargetES6UsingES6Lib.ts, 49, 25))
 
         return false;
