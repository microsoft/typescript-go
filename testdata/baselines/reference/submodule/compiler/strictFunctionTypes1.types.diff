--- old.strictFunctionTypes1.types
+++ new.strictFunctionTypes1.types
@@= skipped -2, +2 lines =@@
 === strictFunctionTypes1.ts ===
 declare function f1<T>(f1: (x: T) => void, f2: (x: T) => void): (x: T) => void;
 >f1 : <T>(f1: (x: T) => void, f2: (x: T) => void) => (x: T) => void
+>T : T
 >f1 : (x: T) => void
 >x : T
 >f2 : (x: T) => void
@@= skipped -8, +9 lines =@@
 
 declare function f2<T>(obj: T, f1: (x: T) => void, f2: (x: T) => void): T;
 >f2 : <T>(obj: T, f1: (x: T) => void, f2: (x: T) => void) => T
+>T : T
 >obj : T
 >f1 : (x: T) => void
 >x : T
@@= skipped -8, +9 lines =@@
 
 declare function f3<T>(obj: T, f1: (x: T) => void, f2: (f: (x: T) => void) => void): T;
 >f3 : <T>(obj: T, f1: (x: T) => void, f2: (f: (x: T) => void) => void) => T
+>T : T
 >obj : T
 >f1 : (x: T) => void
 >x : T
@@= skipped -8, +9 lines =@@
 >x : T
 
 interface Func<T> { (x: T): void }
+>Func : Func<T>
+>T : T
 >x : T
 
 declare function f4<T>(f1: Func<T>, f2: Func<T>): Func<T>;
 >f4 : <T>(f1: Func<T>, f2: Func<T>) => Func<T>
+>T : T
 >f1 : Func<T>
 >f2 : Func<T>
 
@@= skipped -36, +39 lines =@@
 >fs : (x: string) => void
 
 const x3 = f3("abc", fo, fx);  // "abc" | "def"
->x3 : "def" | "abc"
->f3("abc", fo, fx) : "def" | "abc"
+>x3 : "abc" | "def"
+>f3("abc", fo, fx) : "abc" | "def"
 >f3 : <T>(obj: T, f1: (x: T) => void, f2: (f: (x: T) => void) => void) => T
 >"abc" : "abc"
 >fo : (x: Object) => void
@@= skipped -36, +36 lines =@@
 // Repro from #21112
 
 declare function foo<T>(a: ReadonlyArray<T>): T;
->foo : <T>(a: ReadonlyArray<T>) => T
+>foo : <T>(a: readonly T[]) => T
+>T : T
 >a : readonly T[]
 
 let x = foo([]);  // never
 >x : never
 >foo([]) : never
->foo : <T>(a: ReadonlyArray<T>) => T
+>foo : <T>(a: readonly T[]) => T
 >[] : never[]
 
 // Modified repros from #26127
 
 interface A { a: string }
+>A : A
 >a : string
 
 interface B extends A { b: string }
+>B : B
 >b : string
 
 declare function acceptUnion(x: A | number): void;
->acceptUnion : (x: A | number) => void
+>acceptUnion : (x: number | A) => void
 >x : number | A
 
 declare function acceptA(x: A): void;
@@= skipped -33, +36 lines =@@
 
 declare function coAndContra<T>(value: T, func: (t: T) => void): T;
 >coAndContra : <T>(value: T, func: (t: T) => void) => T
+>T : T
 >value : T
 >func : (t: T) => void
 >t : T
@@= skipped -9, +10 lines =@@
 >coAndContra(a, acceptUnion) : A
 >coAndContra : <T>(value: T, func: (t: T) => void) => T
 >a : A
->acceptUnion : (x: A | number) => void
+>acceptUnion : (x: number | A) => void
 
 const t2: B = coAndContra(b, acceptA);
 >t2 : B
@@= skipped -18, +18 lines =@@
 
 declare function coAndContraArray<T>(value: T[], func: (t: T) => void): T[];
 >coAndContraArray : <T>(value: T[], func: (t: T) => void) => T[]
+>T : T
 >value : T[]
 >func : (t: T) => void
 >t : T
@@= skipped -10, +11 lines =@@
 >coAndContraArray : <T>(value: T[], func: (t: T) => void) => T[]
 >[a] : A[]
 >a : A
->acceptUnion : (x: A | number) => void
+>acceptUnion : (x: number | A) => void
 
 const t5: B[] = coAndContraArray([b], acceptA);
 >t5 : B[]
