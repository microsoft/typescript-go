--- old.superWithGenericSpecialization.symbols
+++ new.superWithGenericSpecialization.symbols
@@= skipped -5, +5 lines =@@
 >T : Symbol(T, Decl(superWithGenericSpecialization.ts, 0, 8))
 
     x: T;
->x : Symbol(C.x, Decl(superWithGenericSpecialization.ts, 0, 12))
+>x : Symbol(x, Decl(superWithGenericSpecialization.ts, 0, 12))
 >T : Symbol(T, Decl(superWithGenericSpecialization.ts, 0, 8))
 }
 
@@= skipped -10, +10 lines =@@
 >C : Symbol(C, Decl(superWithGenericSpecialization.ts, 0, 0))
 
     y: T;
->y : Symbol(D.y, Decl(superWithGenericSpecialization.ts, 4, 30))
+>y : Symbol(y, Decl(superWithGenericSpecialization.ts, 4, 30))
 >T : Symbol(T, Decl(superWithGenericSpecialization.ts, 4, 8))
 
     constructor() {
@@= skipped -15, +15 lines =@@
 
 var r: string = d.x;
 >r : Symbol(r, Decl(superWithGenericSpecialization.ts, 12, 3))
->d.x : Symbol(C.x, Decl(superWithGenericSpecialization.ts, 0, 12))
+>d.x : Symbol(x, Decl(superWithGenericSpecialization.ts, 0, 12))
 >d : Symbol(d, Decl(superWithGenericSpecialization.ts, 11, 3))
->x : Symbol(C.x, Decl(superWithGenericSpecialization.ts, 0, 12))
+>x : Symbol(x, Decl(superWithGenericSpecialization.ts, 0, 12))
 
 var r2: number = d.y;
 >r2 : Symbol(r2, Decl(superWithGenericSpecialization.ts, 13, 3))
->d.y : Symbol(D.y, Decl(superWithGenericSpecialization.ts, 4, 30))
+>d.y : Symbol(y, Decl(superWithGenericSpecialization.ts, 4, 30))
 >d : Symbol(d, Decl(superWithGenericSpecialization.ts, 11, 3))
->y : Symbol(D.y, Decl(superWithGenericSpecialization.ts, 4, 30))
+>y : Symbol(y, Decl(superWithGenericSpecialization.ts, 4, 30))
 
