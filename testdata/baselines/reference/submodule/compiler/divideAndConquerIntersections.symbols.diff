--- old.divideAndConquerIntersections.symbols
+++ new.divideAndConquerIntersections.symbols
@@= skipped -70, +70 lines =@@
 >Update : Symbol(Update, Decl(divideAndConquerIntersections.ts, 20, 20))
 
     update_id: number;
->update_id : Symbol(Update.update_id, Decl(divideAndConquerIntersections.ts, 24, 25))
+>update_id : Symbol(update_id, Decl(divideAndConquerIntersections.ts, 24, 25))
 
     message?: { message: string };
->message : Symbol(Update.message, Decl(divideAndConquerIntersections.ts, 25, 22))
+>message : Symbol(message, Decl(divideAndConquerIntersections.ts, 25, 22))
 >message : Symbol(message, Decl(divideAndConquerIntersections.ts, 27, 15))
 
     edited_message?: { edited_message: string };
->edited_message : Symbol(Update.edited_message, Decl(divideAndConquerIntersections.ts, 27, 34))
+>edited_message : Symbol(edited_message, Decl(divideAndConquerIntersections.ts, 27, 34))
 >edited_message : Symbol(edited_message, Decl(divideAndConquerIntersections.ts, 28, 22))
 
     channel_post?: { channel_post: string };
->channel_post : Symbol(Update.channel_post, Decl(divideAndConquerIntersections.ts, 28, 48))
+>channel_post : Symbol(channel_post, Decl(divideAndConquerIntersections.ts, 28, 48))
 >channel_post : Symbol(channel_post, Decl(divideAndConquerIntersections.ts, 29, 20))
 
     edited_channel_post?: { edited_channel_post: string };
->edited_channel_post : Symbol(Update.edited_channel_post, Decl(divideAndConquerIntersections.ts, 29, 44))
+>edited_channel_post : Symbol(edited_channel_post, Decl(divideAndConquerIntersections.ts, 29, 44))
 >edited_channel_post : Symbol(edited_channel_post, Decl(divideAndConquerIntersections.ts, 30, 27))
 
     message_reaction?: { message_reaction: string };
->message_reaction : Symbol(Update.message_reaction, Decl(divideAndConquerIntersections.ts, 30, 58))
+>message_reaction : Symbol(message_reaction, Decl(divideAndConquerIntersections.ts, 30, 58))
 >message_reaction : Symbol(message_reaction, Decl(divideAndConquerIntersections.ts, 31, 24))
 
     message_reaction_count?: { message_reaction_count: string };
->message_reaction_count : Symbol(Update.message_reaction_count, Decl(divideAndConquerIntersections.ts, 31, 52))
+>message_reaction_count : Symbol(message_reaction_count, Decl(divideAndConquerIntersections.ts, 31, 52))
 >message_reaction_count : Symbol(message_reaction_count, Decl(divideAndConquerIntersections.ts, 32, 30))
 
     inline_query?: { inline_query: string };
->inline_query : Symbol(Update.inline_query, Decl(divideAndConquerIntersections.ts, 32, 64))
+>inline_query : Symbol(inline_query, Decl(divideAndConquerIntersections.ts, 32, 64))
 >inline_query : Symbol(inline_query, Decl(divideAndConquerIntersections.ts, 33, 20))
 
     chosen_inline_result?: { chosen_inline_result: string };
->chosen_inline_result : Symbol(Update.chosen_inline_result, Decl(divideAndConquerIntersections.ts, 33, 44))
+>chosen_inline_result : Symbol(chosen_inline_result, Decl(divideAndConquerIntersections.ts, 33, 44))
 >chosen_inline_result : Symbol(chosen_inline_result, Decl(divideAndConquerIntersections.ts, 34, 28))
 
     callback_query?: { callback_query: string };
->callback_query : Symbol(Update.callback_query, Decl(divideAndConquerIntersections.ts, 34, 60))
+>callback_query : Symbol(callback_query, Decl(divideAndConquerIntersections.ts, 34, 60))
 >callback_query : Symbol(callback_query, Decl(divideAndConquerIntersections.ts, 35, 22))
 
     shipping_query?: { shipping_query: string };
->shipping_query : Symbol(Update.shipping_query, Decl(divideAndConquerIntersections.ts, 35, 48))
+>shipping_query : Symbol(shipping_query, Decl(divideAndConquerIntersections.ts, 35, 48))
 >shipping_query : Symbol(shipping_query, Decl(divideAndConquerIntersections.ts, 36, 22))
 
     pre_checkout_query?: { pre_checkout_query: string };
->pre_checkout_query : Symbol(Update.pre_checkout_query, Decl(divideAndConquerIntersections.ts, 36, 48))
+>pre_checkout_query : Symbol(pre_checkout_query, Decl(divideAndConquerIntersections.ts, 36, 48))
 >pre_checkout_query : Symbol(pre_checkout_query, Decl(divideAndConquerIntersections.ts, 37, 26))
 
     poll?: { poll: string };
->poll : Symbol(Update.poll, Decl(divideAndConquerIntersections.ts, 37, 56))
+>poll : Symbol(poll, Decl(divideAndConquerIntersections.ts, 37, 56))
 >poll : Symbol(poll, Decl(divideAndConquerIntersections.ts, 38, 12))
 
     poll_answer?: { poll_answer: string };
->poll_answer : Symbol(Update.poll_answer, Decl(divideAndConquerIntersections.ts, 38, 28))
+>poll_answer : Symbol(poll_answer, Decl(divideAndConquerIntersections.ts, 38, 28))
 >poll_answer : Symbol(poll_answer, Decl(divideAndConquerIntersections.ts, 39, 19))
 
     my_chat_member?: { my_chat_member: string };
->my_chat_member : Symbol(Update.my_chat_member, Decl(divideAndConquerIntersections.ts, 39, 42))
+>my_chat_member : Symbol(my_chat_member, Decl(divideAndConquerIntersections.ts, 39, 42))
 >my_chat_member : Symbol(my_chat_member, Decl(divideAndConquerIntersections.ts, 40, 22))
 
     chat_member?: { chat_member: string };
->chat_member : Symbol(Update.chat_member, Decl(divideAndConquerIntersections.ts, 40, 48))
+>chat_member : Symbol(chat_member, Decl(divideAndConquerIntersections.ts, 40, 48))
 >chat_member : Symbol(chat_member, Decl(divideAndConquerIntersections.ts, 41, 19))
 
     chat_join_request?: { chat_join_request: string };
->chat_join_request : Symbol(Update.chat_join_request, Decl(divideAndConquerIntersections.ts, 41, 42))
+>chat_join_request : Symbol(chat_join_request, Decl(divideAndConquerIntersections.ts, 41, 42))
 >chat_join_request : Symbol(chat_join_request, Decl(divideAndConquerIntersections.ts, 42, 25))
 
     chat_boost?: { chat_boost: string };
->chat_boost : Symbol(Update.chat_boost, Decl(divideAndConquerIntersections.ts, 42, 54))
+>chat_boost : Symbol(chat_boost, Decl(divideAndConquerIntersections.ts, 42, 54))
 >chat_boost : Symbol(chat_boost, Decl(divideAndConquerIntersections.ts, 43, 18))
 
     removed_chat_boost?: { removed_chat_boost: string };
->removed_chat_boost : Symbol(Update.removed_chat_boost, Decl(divideAndConquerIntersections.ts, 43, 40))
+>removed_chat_boost : Symbol(removed_chat_boost, Decl(divideAndConquerIntersections.ts, 43, 40))
 >removed_chat_boost : Symbol(removed_chat_boost, Decl(divideAndConquerIntersections.ts, 44, 26))
 }
 
@@= skipped -107, +107 lines =@@
 
   // ^ errors out
     console.log("Matching", filter);
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >filter : Symbol(filter, Decl(divideAndConquerIntersections.ts, 49, 69))
 
     return (up: U): up is Filter<U, Q> => !!up;
@@= skipped -120, +120 lines =@@
 >Update : Symbol(Update, Decl(divideAndConquerIntersections.ts, 20, 20))
 
     use(...middleware: Array<Middleware<U>>): EventHub<U> {
->use : Symbol(EventHub.use, Decl(divideAndConquerIntersections.ts, 89, 34))
+>use : Symbol(use, Decl(divideAndConquerIntersections.ts, 89, 34))
 >middleware : Symbol(middleware, Decl(divideAndConquerIntersections.ts, 90, 8))
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >Middleware : Symbol(Middleware, Decl(divideAndConquerIntersections.ts, 86, 27))
@@= skipped -9, +9 lines =@@
 >U : Symbol(U, Decl(divideAndConquerIntersections.ts, 89, 15))
 
         console.log("Adding", middleware.length, "generic handlers");
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->middleware.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
+>middleware.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >middleware : Symbol(middleware, Decl(divideAndConquerIntersections.ts, 90, 8))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
         return this;
 >this : Symbol(EventHub, Decl(divideAndConquerIntersections.ts, 88, 75))
     }
     on<Q extends FilterQuery>(
->on : Symbol(EventHub.on, Decl(divideAndConquerIntersections.ts, 93, 5))
+>on : Symbol(on, Decl(divideAndConquerIntersections.ts, 93, 5))
 >Q : Symbol(Q, Decl(divideAndConquerIntersections.ts, 94, 7))
 >FilterQuery : Symbol(FilterQuery, Decl(divideAndConquerIntersections.ts, 55, 1))
 
@@= skipped -36, +36 lines =@@
 >Q : Symbol(Q, Decl(divideAndConquerIntersections.ts, 94, 7))
 
         console.log("Adding", middleware.length, "handlers for", filter);
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->middleware.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
+>middleware.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >middleware : Symbol(middleware, Decl(divideAndConquerIntersections.ts, 95, 24))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >filter : Symbol(filter, Decl(divideAndConquerIntersections.ts, 94, 30))
 
         return new EventHub<Filter<U, Q>>();
