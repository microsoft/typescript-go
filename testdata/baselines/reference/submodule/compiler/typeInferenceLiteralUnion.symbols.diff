--- old.typeInferenceLiteralUnion.symbols
+++ new.typeInferenceLiteralUnion.symbols
@@= skipped -6, +6 lines =@@
  */
 export type Primitive = number | string | boolean | Date;
 >Primitive : Symbol(Primitive, Decl(typeInferenceLiteralUnion.ts, 0, 0))
->Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))

 /**
  * Administrivia: anything with a valueOf(): number method is comparable, so we allow it in numeric operations
@@= skipped -46, +46 lines =@@
 >T : Symbol(T, Decl(typeInferenceLiteralUnion.ts, 28, 23))
 >Numeric : Symbol(Numeric, Decl(typeInferenceLiteralUnion.ts, 4, 57))
 >array : Symbol(array, Decl(typeInferenceLiteralUnion.ts, 28, 42))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(typeInferenceLiteralUnion.ts, 28, 23))
 >Primitive : Symbol(Primitive, Decl(typeInferenceLiteralUnion.ts, 0, 0))
 >T : Symbol(T, Decl(typeInferenceLiteralUnion.ts, 28, 23))