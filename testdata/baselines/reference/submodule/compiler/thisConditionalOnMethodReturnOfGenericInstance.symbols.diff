--- old.thisConditionalOnMethodReturnOfGenericInstance.symbols
+++ new.thisConditionalOnMethodReturnOfGenericInstance.symbols
@@= skipped -5, +5 lines =@@
 >T : Symbol(T, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 0, 8))
 
     unmeasurableUsage!: {[K in keyof T]-?: T[K]};
->unmeasurableUsage : Symbol(A.unmeasurableUsage, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 0, 12))
+>unmeasurableUsage : Symbol(unmeasurableUsage, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 0, 12))
 >K : Symbol(K, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 1, 26))
 >T : Symbol(T, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 0, 8))
 >T : Symbol(T, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 0, 8))
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 4, 8))
 
     method(): string | (this extends C ? undefined : null) {
->method : Symbol(B.method, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 4, 25))
+>method : Symbol(method, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 4, 25))
 >C : Symbol(C, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 8, 1))
 
         return "";
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 10, 8))
 
     marker!: string;
->marker : Symbol(C.marker, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 10, 31))
+>marker : Symbol(marker, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 10, 31))
 }
 
 const x = new C<{}>();
@@= skipped -9, +9 lines =@@
 
 const y = x.method(); // usage flags `method` in `B` as circular and marks `y` as the error-any type
 >y : Symbol(y, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 16, 5))
->x.method : Symbol(B.method, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 4, 25))
+>x.method : Symbol(method, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 4, 25))
 >x : Symbol(x, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 14, 5))
->method : Symbol(B.method, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 4, 25))
+>method : Symbol(method, Decl(thisConditionalOnMethodReturnOfGenericInstance.ts, 4, 25))
 
