--- old.duplicateErrorClassExpression.symbols
+++ new.duplicateErrorClassExpression.symbols
@@= skipped -18, +18 lines =@@
 >ABase : Symbol(ABase, Decl(duplicateErrorClassExpression.ts, 5, 1))
 
     a: string;
->a : Symbol(ABase.a, Decl(duplicateErrorClassExpression.ts, 6, 17))
+>a : Symbol(a, Decl(duplicateErrorClassExpression.ts, 6, 17))
 }
 interface ADerived {
 >ADerived : Symbol(ADerived, Decl(duplicateErrorClassExpression.ts, 8, 1))
 
     b: string;
->b : Symbol(ADerived.b, Decl(duplicateErrorClassExpression.ts, 9, 20))
+>b : Symbol(b, Decl(duplicateErrorClassExpression.ts, 9, 20))
 }
 class Base {
 >Base : Symbol(Base, Decl(duplicateErrorClassExpression.ts, 11, 1))
 
     foo!: ComplicatedTypeBase;
->foo : Symbol(Base.foo, Decl(duplicateErrorClassExpression.ts, 12, 12))
+>foo : Symbol(foo, Decl(duplicateErrorClassExpression.ts, 12, 12))
 >ComplicatedTypeBase : Symbol(ComplicatedTypeBase, Decl(duplicateErrorClassExpression.ts, 0, 0))
 }
 const x = class Derived extends Base {
@@= skipped -21, +21 lines =@@
 >Base : Symbol(Base, Decl(duplicateErrorClassExpression.ts, 11, 1))
 
     foo!: ComplicatedTypeDerived;
->foo : Symbol(Derived.foo, Decl(duplicateErrorClassExpression.ts, 15, 38))
+>foo : Symbol(foo, Decl(duplicateErrorClassExpression.ts, 15, 38))
 >ComplicatedTypeDerived : Symbol(ComplicatedTypeDerived, Decl(duplicateErrorClassExpression.ts, 2, 1))
 }
 let obj: { 3: string } = { 3: "three" };
