--- old.unionCallMixedTypeParameterPresence.types
+++ new.unionCallMixedTypeParameterPresence.types
@@= skipped -3, +3 lines =@@
 // https://github.com/microsoft/TypeScript/issues/57356
 
 interface Err<T> {
+>Err : Err<T>
+>T : T
+
   f<U>(a: (err: T) => U): Err<U>;
 >f : <U>(a: (err: T) => U) => Err<U>
+>U : U
 >a : (err: T) => U
 >err : T
 }
 interface Ok<T> {
+>Ok : Ok<T>
+>T : T
+
   f(a: (err: T) => unknown): Err<T>;
 >f : (a: (err: T) => unknown) => Err<T>
 >a : (err: T) => unknown
@@= skipped -17, +24 lines =@@
 const e2 = e.f((e) => e);
 >e2 : Err<2> | Err<0 | 1 | 2>
 >e.f((e) => e) : Err<2> | Err<0 | 1 | 2>
->e.f : (<U>(a: (err: 0) => U) => Err<U>) | (<U>(a: (err: 1) => U) => Err<U>) | ((a: (err: 2) => unknown) => Err<2>)
+>e.f : <U>(a: (err: 0) => U) => Err<U> | <U>(a: (err: 1) => U) => Err<U> | (a: (err: 2) => unknown) => Err<2>
 >e : Err<0> | Err<1> | Ok<2>
->f : (<U>(a: (err: 0) => U) => Err<U>) | (<U>(a: (err: 1) => U) => Err<U>) | ((a: (err: 2) => unknown) => Err<2>)
+>f : <U>(a: (err: 0) => U) => Err<U> | <U>(a: (err: 1) => U) => Err<U> | (a: (err: 2) => unknown) => Err<2>
 >(e) => e : (e: 0 | 1 | 2) => 0 | 1 | 2
 >e : 0 | 1 | 2
 >e : 0 | 1 | 2
