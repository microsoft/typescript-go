--- old.es5-asyncFunctionNewExpressions.types
+++ new.es5-asyncFunctionNewExpressions.types
@@= skipped -10, +10 lines =@@
 
 async function newExpression0() {
 >newExpression0 : () => Promise<void>
->               : ^^^^^^^^^^^^^^^^^^^
 
     await new x(y, z);
 >await new x(y, z) : any
@@= skipped -12, +11 lines =@@
 
 async function newExpression1() {
 >newExpression1 : () => Promise<void>
->               : ^^^^^^^^^^^^^^^^^^^
 
     new (await x)(y, z);
 >new (await x)(y, z) : any
@@= skipped -13, +12 lines =@@
 
 async function newExpression2() {
 >newExpression2 : () => Promise<void>
->               : ^^^^^^^^^^^^^^^^^^^
 
     new x(await y, z);
 >new x(await y, z) : any
@@= skipped -12, +11 lines =@@
 
 async function newExpression3() {
 >newExpression3 : () => Promise<void>
->               : ^^^^^^^^^^^^^^^^^^^
 
     new x(y, await z);
 >new x(y, await z) : any
@@= skipped -12, +11 lines =@@
 
 async function newExpression4() {
 >newExpression4 : () => Promise<void>
->               : ^^^^^^^^^^^^^^^^^^^
 
     await new x(...y, z);
 >await new x(...y, z) : any
@@= skipped -13, +12 lines =@@
 
 async function newExpression5() {
 >newExpression5 : () => Promise<void>
->               : ^^^^^^^^^^^^^^^^^^^
 
     new (await x)(...y, z);
 >new (await x)(...y, z) : any
@@= skipped -14, +13 lines =@@
 
 async function newExpression6() {
 >newExpression6 : () => Promise<void>
->               : ^^^^^^^^^^^^^^^^^^^
 
     new x(...(await y), z);
 >new x(...(await y), z) : any
@@= skipped -14, +13 lines =@@
 
 async function newExpression7() {
 >newExpression7 : () => Promise<void>
->               : ^^^^^^^^^^^^^^^^^^^
 
     new x(...y, await z);
 >new x(...y, await z) : any
@@= skipped -13, +12 lines =@@
 
 async function newExpression8() {
 >newExpression8 : () => Promise<void>
->               : ^^^^^^^^^^^^^^^^^^^
 
     new x(await y, ...z);
 >new x(await y, ...z) : any
@@= skipped -13, +12 lines =@@
 
 async function newExpression9() {
 >newExpression9 : () => Promise<void>
->               : ^^^^^^^^^^^^^^^^^^^
 
     new x(y, ...(await z));
 >new x(y, ...(await z)) : any
@@= skipped -14, +13 lines =@@
 
 async function newExpression10() {
 >newExpression10 : () => Promise<void>
->                : ^^^^^^^^^^^^^^^^^^^
 
     await new x.a(y, z);
 >await new x.a(y, z) : any
 >new x.a(y, z) : any
 >x.a : any
 >x : any
->  : ^^^
 >a : any
->  : ^^^
 >y : any
 >z : any
 }
 
 async function newExpression11() {
 >newExpression11 : () => Promise<void>
->                : ^^^^^^^^^^^^^^^^^^^
 
     new (await x.a)(y, z);
 >new (await x.a)(y, z) : any
@@= skipped -24, +20 lines =@@
 >await x.a : any
 >x.a : any
 >x : any
->  : ^^^
 >a : any
->  : ^^^
 >y : any
 >z : any
 }
 
 async function newExpression12() {
 >newExpression12 : () => Promise<void>
->                : ^^^^^^^^^^^^^^^^^^^
 
     new (await x).a(y, z);
 >new (await x).a(y, z) : any
 >(await x).a : any
 >(await x) : any
->          : ^^^
 >await x : any
 >x : any
 >a : any
->  : ^^^
 >y : any
 >z : any
 }
 
 async function newExpression13() {
 >newExpression13 : () => Promise<void>
->                : ^^^^^^^^^^^^^^^^^^^
 
     new x.a(await y, z);
 >new x.a(await y, z) : any
 >x.a : any
 >x : any
->  : ^^^
 >a : any
->  : ^^^
 >await y : any
 >y : any
 >z : any
@@= skipped -42, +34 lines =@@
 
 async function newExpression14() {
 >newExpression14 : () => Promise<void>
->                : ^^^^^^^^^^^^^^^^^^^
 
     new x.a(y, await z);
 >new x.a(y, await z) : any
 >x.a : any
 >x : any
->  : ^^^
 >a : any
->  : ^^^
 >y : any
 >await z : any
 >z : any
@@= skipped -16, +13 lines =@@
 
 async function newExpression15() {
 >newExpression15 : () => Promise<void>
->                : ^^^^^^^^^^^^^^^^^^^
 
     await new x[a](y, z);
 >await new x[a](y, z) : any
@@= skipped -14, +13 lines =@@
 
 async function newExpression16() {
 >newExpression16 : () => Promise<void>
->                : ^^^^^^^^^^^^^^^^^^^
 
     new (await x[a])(y, z);
 >new (await x[a])(y, z) : any
@@= skipped -15, +14 lines =@@
 
 async function newExpression17() {
 >newExpression17 : () => Promise<void>
->                : ^^^^^^^^^^^^^^^^^^^
 
     new (await x)[a](y, z);
 >new (await x)[a](y, z) : any
@@= skipped -15, +14 lines =@@
 
 async function newExpression18() {
 >newExpression18 : () => Promise<void>
->                : ^^^^^^^^^^^^^^^^^^^
 
     new x[await a](y, z);
 >new x[await a](y, z) : any
@@= skipped -14, +13 lines =@@
 
 async function newExpression19() {
 >newExpression19 : () => Promise<void>
->                : ^^^^^^^^^^^^^^^^^^^
 
     new x[a](await y, z);
 >new x[a](await y, z) : any
@@= skipped -14, +13 lines =@@
 
 async function newExpression20() {
 >newExpression20 : () => Promise<void>
->                : ^^^^^^^^^^^^^^^^^^^
 
     new x[a](y, await z);
 >new x[a](y, await z) : any
