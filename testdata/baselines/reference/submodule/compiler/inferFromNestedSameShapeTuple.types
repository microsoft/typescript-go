//// [tests/cases/compiler/inferFromNestedSameShapeTuple.ts] ////

=== inferFromNestedSameShapeTuple.ts ===
// repro #48524

type Magic<X> = X extends [[infer Y, ...infer _], ...infer __] ? Y : never;
>Magic : Magic<X>
>X : X
>Y : Y
>_ : _
>__ : __

type R = Magic<[[number]]>
>R : number

// repro #52722

type Recursive<Id> = {
>Recursive : Recursive<Id>
>Id : Id

    id: Id
>id : Id

    children: readonly Recursive<Id>[]
>children : readonly Recursive<Id>[]
}

declare function getIds<Id>(items: readonly Recursive<Id>[]): Id[];
>getIds : <Id>(items: readonly Recursive<Id>[]) => Id[]
>Id : Id
>items : readonly Recursive<Id>[]

const items = [{
>items : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const satisfies readonly Recursive<string>[] : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
>{    id: 'a',    children: [{        id: 'b',        children: []    }]} : { readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }

    id: 'a',
>id : "a"
>'a' : "a"

    children: [{
>children : [{ readonly id: "b"; readonly children: []; }]
>[{        id: 'b',        children: []    }] : [{ readonly id: "b"; readonly children: []; }]
>{        id: 'b',        children: []    } : { readonly id: "b"; readonly children: []; }

        id: 'b',
>id : "b"
>'b' : "b"

        children: []
>children : []
>[] : []

    }]
}] as const satisfies readonly Recursive<string>[]

const foo = getIds(items)
>foo : ("a" | "b")[]
>getIds(items) : ("a" | "b")[]
>getIds : <Id>(items: readonly Recursive<Id>[]) => Id[]
>items : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]

// variant with a fresh argument
const foo2 = getIds([{
>foo2 : ("a" | "b")[]
>getIds([{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const) : ("a" | "b")[]
>getIds : <Id>(items: readonly Recursive<Id>[]) => Id[]
>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
>{    id: 'a',    children: [{        id: 'b',        children: []    }]} : { readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }

    id: 'a',
>id : "a"
>'a' : "a"

    children: [{
>children : [{ readonly id: "b"; readonly children: []; }]
>[{        id: 'b',        children: []    }] : [{ readonly id: "b"; readonly children: []; }]
>{        id: 'b',        children: []    } : { readonly id: "b"; readonly children: []; }

        id: 'b',
>id : "b"
>'b' : "b"

        children: []
>children : []
>[] : []

    }]
}] as const)

// Repro from comment in #49226

type T1<T> = [number, T1<{ x: T }>];
>T1 : T1<T>
>T : T
>x : T

type T2<T> = [42, T2<{ x: T }>];
>T2 : T2<T>
>T : T
>x : T

function qq<U>(x: T1<U>, y: T2<U>) {
>qq : <U>(x: T1<U>, y: T2<U>) => void
>U : U
>x : T1<U>
>y : T2<U>

    x = y;
>x = y : T2<U>
>x : T1<U>
>y : T2<U>

    y = x;  // Error
>y = x : T1<U>
>y : T2<U>
>x : T1<U>
}

