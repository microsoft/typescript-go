--- old.moduleAugmentationGlobal3.symbols
+++ new.moduleAugmentationGlobal3.symbols
@@= skipped -9, +9 lines =@@
 >A : Symbol(A, Decl(f2.ts, 1, 8))
 
 declare global {
->global : Symbol(global, Decl(f2.ts, 1, 23))
+>global : Symbol((Missing), Decl(f2.ts, 1, 23))
 
     interface Array<T> {
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(f2.ts, 3, 16))
 >T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(f2.ts, 4, 20))
 
         getCountAsString(): string;
->getCountAsString : Symbol(Array.getCountAsString, Decl(f2.ts, 4, 24))
+>getCountAsString : Symbol(getCountAsString, Decl(f2.ts, 4, 24))
     }
 }
 
@@= skipped -19, +19 lines =@@
 
 let y = x.getCountAsString().toLowerCase();
 >y : Symbol(y, Decl(f3.ts, 3, 3))
->x.getCountAsString().toLowerCase : Symbol(String.toLowerCase, Decl(lib.es5.d.ts, --, --))
->x.getCountAsString : Symbol(Array.getCountAsString, Decl(f2.ts, 4, 24))
+>x.getCountAsString().toLowerCase : Symbol(toLowerCase, Decl(lib.es5.d.ts, --, --))
+>x.getCountAsString : Symbol(getCountAsString, Decl(f2.ts, 4, 24))
 >x : Symbol(x, Decl(f3.ts, 2, 3))
->getCountAsString : Symbol(Array.getCountAsString, Decl(f2.ts, 4, 24))
->toLowerCase : Symbol(String.toLowerCase, Decl(lib.es5.d.ts, --, --))
+>getCountAsString : Symbol(getCountAsString, Decl(f2.ts, 4, 24))
+>toLowerCase : Symbol(toLowerCase, Decl(lib.es5.d.ts, --, --))
 
