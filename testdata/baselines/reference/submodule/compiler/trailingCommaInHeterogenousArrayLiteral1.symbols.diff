--- old.trailingCommaInHeterogenousArrayLiteral1.symbols
+++ new.trailingCommaInHeterogenousArrayLiteral1.symbols
@@= skipped -4, +4 lines =@@
 >arrTest : Symbol(arrTest, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 0))
 
     test(arg1: number[]) {    }
->test : Symbol(arrTest.test, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 15))
+>test : Symbol(test, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 15))
 >arg1 : Symbol(arg1, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 1, 9))
 
     callTest() {
->callTest : Symbol(arrTest.callTest, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 1, 31))
+>callTest : Symbol(callTest, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 1, 31))
 
         // these two should give the same error
         this.test([1, 2, "hi", 5, ]);
->this.test : Symbol(arrTest.test, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 15))
+>this.test : Symbol(test, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 15))
 >this : Symbol(arrTest, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 0))
->test : Symbol(arrTest.test, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 15))
+>test : Symbol(test, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 15))
 
         this.test([1, 2, "hi", 5]); 
->this.test : Symbol(arrTest.test, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 15))
+>this.test : Symbol(test, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 15))
 >this : Symbol(arrTest, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 0))
->test : Symbol(arrTest.test, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 15))
+>test : Symbol(test, Decl(trailingCommaInHeterogenousArrayLiteral1.ts, 0, 15))
     }
 }
 
