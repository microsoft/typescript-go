--- old.taggedTemplateStringsWithCurriedFunction.js
+++ new.taggedTemplateStringsWithCurriedFunction.js
@@= skipped -12, +12 lines =@@


 //// [taggedTemplateStringsWithCurriedFunction.js]
-// Originated from #38558
-var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
-    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
-    return cooked;
-};
 var __assign = (this && this.__assign) || function () {
     __assign = Object.assign || function(t) {
         for (var s, i = 1, n = arguments.length; i < n; i++) {
@@= skipped -16, +11 lines =@@
     };
     return __assign.apply(this, arguments);
 };
-var f = function (_) { return function () {
-    var _ = [];
-    for (var _i = 0; _i < arguments.length; _i++) {
-        _[_i] = arguments[_i];
-    }
-    return "";
-}; };
-f(__assign({ x: 0 }))(__makeTemplateObject([""], [""]));
-f(__assign({ x: 0 }))(__makeTemplateObject(["x"], ["x"]));
-f(__assign({ x: 0 }))(__makeTemplateObject(["x", "x"], ["x", "x"]), f);
-f(__assign({ x: 0 }, { y: (function () { return 1; })() }))(__makeTemplateObject([""], [""]));
-f(__assign({ x: (function () { return 1; })() }, { y: 1 }))(__makeTemplateObject([""], [""]));
+// Originated from #38558
+const f = _ => (..._) => "";
+f(__assign({ x: 0 })) ``;
+f(__assign({ x: 0 })) `x`;
+f(__assign({ x: 0 })) `x${f}x`;
+f(__assign({ x: 0 }, { y: (() => 1)() })) ``;
+f(__assign({ x: (() => 1)() }, { y: 1 })) ``;