--- old.asyncFunctionContextuallyTypedReturns.symbols
+++ new.asyncFunctionContextuallyTypedReturns.symbols
@@= skipped -10, +10 lines =@@
 >f : Symbol(f, Decl(asyncFunctionContextuallyTypedReturns.ts, 0, 0))
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 1, 2))
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 1, 2))
->Promise.reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>Promise.reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 >Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 
 f(async v => v ? [0] : Promise.reject());
 >f : Symbol(f, Decl(asyncFunctionContextuallyTypedReturns.ts, 0, 0))
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 2, 7))
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 2, 7))
->Promise.reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>Promise.reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 >Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 
 declare function g(cb: (v: boolean) => "contextuallyTypable" | PromiseLike<"contextuallyTypable">): void;
 >g : Symbol(g, Decl(asyncFunctionContextuallyTypedReturns.ts, 2, 41))
@@= skipped -22, +22 lines =@@
 >g : Symbol(g, Decl(asyncFunctionContextuallyTypedReturns.ts, 2, 41))
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 5, 2))
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 5, 2))
->Promise.reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>Promise.reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 >Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 
 g(async v => v ? "contextuallyTypable" : Promise.reject());
 >g : Symbol(g, Decl(asyncFunctionContextuallyTypedReturns.ts, 2, 41))
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 6, 7))
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 6, 7))
->Promise.reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>Promise.reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 >Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 
 type MyCallback = (thing: string) => void;
 >MyCallback : Symbol(MyCallback, Decl(asyncFunctionContextuallyTypedReturns.ts, 6, 59))
@@= skipped -29, +29 lines =@@
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 10, 2))
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 10, 2))
 >abc : Symbol(abc, Decl(asyncFunctionContextuallyTypedReturns.ts, 10, 12))
->Promise.reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>Promise.reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 >Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 
 h(async v => v ? (def) => { } : Promise.reject());
 >h : Symbol(h, Decl(asyncFunctionContextuallyTypedReturns.ts, 8, 42))
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 11, 7))
 >v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 11, 7))
 >def : Symbol(def, Decl(asyncFunctionContextuallyTypedReturns.ts, 11, 18))
->Promise.reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>Promise.reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 >Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --))
+>reject : Symbol(reject, Decl(lib.es2015.promise.d.ts, --, --))
 
 // repro from #29196
 const increment: (
@@= skipped -33, +33 lines =@@
 >a : Symbol(a, Decl(asyncFunctionContextuallyTypedReturns.ts, 18, 8))
 
     return a.length
->a.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>a.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(asyncFunctionContextuallyTypedReturns.ts, 18, 8))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
   }
 }
 
@@= skipped -25, +25 lines =@@
 >a : Symbol(a, Decl(asyncFunctionContextuallyTypedReturns.ts, 27, 8))
 
     return a.length
->a.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>a.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(asyncFunctionContextuallyTypedReturns.ts, 27, 8))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
   }
 }
 
