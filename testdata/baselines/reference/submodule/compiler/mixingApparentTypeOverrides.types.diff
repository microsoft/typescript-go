--- old.mixingApparentTypeOverrides.types
+++ new.mixingApparentTypeOverrides.types
@@= skipped -2, +2 lines =@@
 === mixingApparentTypeOverrides.ts ===
 type Constructor<T> = new(...args: any[]) => T;
 >Constructor : Constructor<T>
+>T : T
 >args : any[]
 
 function Tagged<T extends Constructor<{}>>(Base: T) {
->Tagged : <T extends Constructor<{}>>(Base: T) => { new (...args: any[]): (Anonymous class); prototype: Tagged<any>.(Anonymous class); } & T
+>Tagged : <T extends Constructor<{}>>(Base: T) => { new (...args: any[]): (Anonymous class)<T>; prototype: (Anonymous class)<any>; } & T
+>T : T
 >Base : T
 
   return class extends Base {
->class extends Base {    _tag: string;    constructor(...args: any[]) {      super(...args);      this._tag = "";    }  } : { new (...args: any[]): (Anonymous class); prototype: Tagged<any>.(Anonymous class); } & T
+>class extends Base {    _tag: string;    constructor(...args: any[]) {      super(...args);      this._tag = "";    }  } : { new (...args: any[]): (Anonymous class)<T>; prototype: (Anonymous class)<any>; } & T
 >Base : {}
 
     _tag: string;
@@= skipped -45, +47 lines =@@
 
 class B extends Tagged(A) {
 >B : B
->Tagged(A) : Tagged<typeof A>.(Anonymous class) & A
->Tagged : <T extends Constructor<{}>>(Base: T) => { new (...args: any[]): (Anonymous class); prototype: Tagged<any>.(Anonymous class); } & T
+>Tagged(A) : (Anonymous class)<typeof A> & A
+>Tagged : <T extends Constructor<{}>>(Base: T) => { new (...args: any[]): (Anonymous class)<T>; prototype: (Anonymous class)<any>; } & T
 >A : typeof A
 
   toString () { // Should not be an error
