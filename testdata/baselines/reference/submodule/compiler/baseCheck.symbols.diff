--- old.baseCheck.symbols
+++ new.baseCheck.symbols
@@= skipped -29, +29 lines =@@
     }
 
     m() {
->m : Symbol(ELocVar.m, Decl(baseCheck.ts, 9, 5))
+>m : Symbol(m, Decl(baseCheck.ts, 9, 5))
 
         var loc=10;
 >loc : Symbol(loc, Decl(baseCheck.ts, 12, 11))
@@= skipped -10, +10 lines =@@
 class D extends C { constructor(public z: number) { super(this.z) }  } // too few params
 >D : Symbol(D, Decl(baseCheck.ts, 14, 1))
 >C : Symbol(C, Decl(baseCheck.ts, 0, 0))
->z : Symbol(D.z, Decl(baseCheck.ts, 16, 32))
+>z : Symbol(z, Decl(baseCheck.ts, 16, 32))
 >super : Symbol(C, Decl(baseCheck.ts, 0, 0))
->this.z : Symbol(D.z, Decl(baseCheck.ts, 16, 32))
+>this.z : Symbol(z, Decl(baseCheck.ts, 16, 32))
 >this : Symbol(D, Decl(baseCheck.ts, 14, 1))
->z : Symbol(D.z, Decl(baseCheck.ts, 16, 32))
+>z : Symbol(z, Decl(baseCheck.ts, 16, 32))
 
 class E extends C { constructor(public z: number) { super(0, this.z) } }
 >E : Symbol(E, Decl(baseCheck.ts, 16, 70))
 >C : Symbol(C, Decl(baseCheck.ts, 0, 0))
->z : Symbol(E.z, Decl(baseCheck.ts, 17, 32))
+>z : Symbol(z, Decl(baseCheck.ts, 17, 32))
 >super : Symbol(C, Decl(baseCheck.ts, 0, 0))
->this.z : Symbol(E.z, Decl(baseCheck.ts, 17, 32))
+>this.z : Symbol(z, Decl(baseCheck.ts, 17, 32))
 >this : Symbol(E, Decl(baseCheck.ts, 16, 70))
->z : Symbol(E.z, Decl(baseCheck.ts, 17, 32))
+>z : Symbol(z, Decl(baseCheck.ts, 17, 32))
 
 class F extends C { constructor(public z: number) { super("hello", this.z) } } // first param type
 >F : Symbol(F, Decl(baseCheck.ts, 17, 72))
 >C : Symbol(C, Decl(baseCheck.ts, 0, 0))
->z : Symbol(F.z, Decl(baseCheck.ts, 18, 32))
+>z : Symbol(z, Decl(baseCheck.ts, 18, 32))
 >super : Symbol(C, Decl(baseCheck.ts, 0, 0))
->this.z : Symbol(F.z, Decl(baseCheck.ts, 18, 32))
+>this.z : Symbol(z, Decl(baseCheck.ts, 18, 32))
 >this : Symbol(F, Decl(baseCheck.ts, 17, 72))
->z : Symbol(F.z, Decl(baseCheck.ts, 18, 32))
+>z : Symbol(z, Decl(baseCheck.ts, 18, 32))
 
 function f() {
 >f : Symbol(f, Decl(baseCheck.ts, 18, 78))
