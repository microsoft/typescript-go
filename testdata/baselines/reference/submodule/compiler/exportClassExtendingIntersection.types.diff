--- old.exportClassExtendingIntersection.types
+++ new.exportClassExtendingIntersection.types
@@= skipped -2, +2 lines =@@
 === BaseClass.ts ===
 export type Constructor<T> = new (...args: any[]) => T;
 >Constructor : Constructor<T>
->            : ^^^^^^^^^^^^^^
+>T : T
 >args : any[]
->     : ^^^^^
 
 export class MyBaseClass<T> {
 >MyBaseClass : MyBaseClass<T>
->            : ^^^^^^^^^^^^^^
+>T : T
 
     baseProperty: string;
 >baseProperty : string
->             : ^^^^^^
 
     constructor(value: T) {}
 >value : T
->      : ^
 }
 === MixinClass.ts ===
 import { Constructor, MyBaseClass } from './BaseClass';
 >Constructor : any
->            : ^^^
 >MyBaseClass : typeof MyBaseClass
->            : ^^^^^^^^^^^^^^^^^^
 
 export interface MyMixin {
+>MyMixin : MyMixin
+
     mixinProperty: string;
 >mixinProperty : string
->              : ^^^^^^
 }
 
 export function MyMixin<T extends Constructor<MyBaseClass<any>>>(base: T): T & Constructor<MyMixin> {
 >MyMixin : <T extends Constructor<MyBaseClass<any>>>(base: T) => T & Constructor<MyMixin>
->        : ^ ^^^^^^^^^                             ^^    ^^ ^^^^^                        
+>T : T
 >base : T
->     : ^
 
     return class extends base {
->class extends base {        mixinProperty: string;    } : { new (...args: any[]): (Anonymous class); prototype: MyMixin<any>.(Anonymous class); } & T
->                                                        : ^^^^^^^^^^    ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>class extends base {        mixinProperty: string;    } : { new (...args: any[]): (Anonymous class)<T>; prototype: (Anonymous class)<any>; } & T
 >base : MyBaseClass<any>
->     : ^^^^^^^^^^^^^^^^
 
         mixinProperty: string;
 >mixinProperty : string
->              : ^^^^^^
     }
 }
 === FinalClass.ts ===
 import { MyBaseClass } from './BaseClass';
 >MyBaseClass : typeof MyBaseClass
->            : ^^^^^^^^^^^^^^^^^^
 
 import { MyMixin } from './MixinClass';
->MyMixin : <T extends import("BaseClass").Constructor<MyBaseClass<any>>>(base: T) => T & import("BaseClass").Constructor<MyMixin>
->        : ^ ^^^^^^^^^       ^^^^^^^^^^^  ^^^^^^^^^^^                  ^^    ^^ ^^^^^           ^^^^^^^^^^^  ^^^^^^^^^^^         
+>MyMixin : <T extends Constructor<MyBaseClass<any>>>(base: T) => T & Constructor<MyMixin>
 
 export class MyExtendedClass extends MyMixin(MyBaseClass)<string> {
 >MyExtendedClass : MyExtendedClass
->                : ^^^^^^^^^^^^^^^
 >MyMixin(MyBaseClass) : MyBaseClass<string> & MyMixin
->                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
->MyMixin : <T extends import("BaseClass").Constructor<MyBaseClass<any>>>(base: T) => T & import("BaseClass").Constructor<MyMixin>
->        : ^ ^^^^^^^^^       ^^^^^^^^^^^  ^^^^^^^^^^^                  ^^    ^^ ^^^^^           ^^^^^^^^^^^  ^^^^^^^^^^^         
+>MyMixin : <T extends Constructor<MyBaseClass<any>>>(base: T) => T & Constructor<MyMixin>
 >MyBaseClass : typeof MyBaseClass
->            : ^^^^^^^^^^^^^^^^^^
 
     extendedClassProperty: number;
 >extendedClassProperty : number
->                      : ^^^^^^
 }
 === Main.ts ===
 import { MyExtendedClass } from './FinalClass';
 >MyExtendedClass : typeof MyExtendedClass
->                : ^^^^^^^^^^^^^^^^^^^^^^
 
 import { MyMixin } from './MixinClass';
->MyMixin : <T extends import("BaseClass").Constructor<import("BaseClass").MyBaseClass<any>>>(base: T) => T & import("BaseClass").Constructor<MyMixin>
->        : ^ ^^^^^^^^^       ^^^^^^^^^^^  ^^^^^^^^^^^        ^^^^^^^^^^^  ^^^^^^^^^^^      ^^    ^^ ^^^^^           ^^^^^^^^^^^  ^^^^^^^^^^^         
+>MyMixin : <T extends Constructor<MyBaseClass<any>>>(base: T) => T & Constructor<MyMixin>
 
 const myExtendedClass = new MyExtendedClass('string');
 >myExtendedClass : MyExtendedClass
->                : ^^^^^^^^^^^^^^^
 >new MyExtendedClass('string') : MyExtendedClass
->                              : ^^^^^^^^^^^^^^^
 >MyExtendedClass : typeof MyExtendedClass
->                : ^^^^^^^^^^^^^^^^^^^^^^
 >'string' : "string"
->         : ^^^^^^^^
 
 const AnotherMixedClass = MyMixin(MyExtendedClass);
->AnotherMixedClass : typeof MyExtendedClass & import("BaseClass").Constructor<MyMixin>
->                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
->MyMixin(MyExtendedClass) : typeof MyExtendedClass & import("BaseClass").Constructor<MyMixin>
->                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
->MyMixin : <T extends import("BaseClass").Constructor<import("BaseClass").MyBaseClass<any>>>(base: T) => T & import("BaseClass").Constructor<MyMixin>
->        : ^ ^^^^^^^^^       ^^^^^^^^^^^  ^^^^^^^^^^^        ^^^^^^^^^^^  ^^^^^^^^^^^      ^^    ^^ ^^^^^           ^^^^^^^^^^^  ^^^^^^^^^^^         
+>AnotherMixedClass : typeof MyExtendedClass & Constructor<MyMixin>
+>MyMixin(MyExtendedClass) : typeof MyExtendedClass & Constructor<MyMixin>
+>MyMixin : <T extends Constructor<MyBaseClass<any>>>(base: T) => T & Constructor<MyMixin>
 >MyExtendedClass : typeof MyExtendedClass
->                : ^^^^^^^^^^^^^^^^^^^^^^
 
