--- old.truthinessCallExpressionCoercion.symbols
+++ new.truthinessCallExpressionCoercion.symbols
@@= skipped -27, +27 lines =@@
 
     function test() { return Math.random() > 0.5; }
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion.ts, 14, 39))
->Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>Math.random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 
     if (test) { // error
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion.ts, 14, 39))
 
         console.log('test');
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
     }
     
     if (test) { // ok
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion.ts, 14, 39))
 
         console.log(test);
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion.ts, 14, 39))
     }
 
@@= skipped -34, +34 lines =@@
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion.ts, 14, 39))
 
         [() => null].forEach(() => {
->[() => null].forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>[() => null].forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 
             test();
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion.ts, 14, 39))
@@= skipped -13, +13 lines =@@
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion.ts, 14, 39))
 
         [() => null].forEach(test => {
->[() => null].forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>[() => null].forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion.ts, 36, 29))
 
             test();
@@= skipped -53, +53 lines =@@
 >Foo : Symbol(Foo, Decl(truthinessCallExpressionCoercion.ts, 55, 1))
 
     maybeIsUser?: () => boolean;
->maybeIsUser : Symbol(Foo.maybeIsUser, Decl(truthinessCallExpressionCoercion.ts, 57, 11))
+>maybeIsUser : Symbol(maybeIsUser, Decl(truthinessCallExpressionCoercion.ts, 57, 11))
 
     isUser() {
->isUser : Symbol(Foo.isUser, Decl(truthinessCallExpressionCoercion.ts, 58, 32))
+>isUser : Symbol(isUser, Decl(truthinessCallExpressionCoercion.ts, 58, 32))
 
         return true;
     }
 
     test() {
->test : Symbol(Foo.test, Decl(truthinessCallExpressionCoercion.ts, 62, 5))
+>test : Symbol(test, Decl(truthinessCallExpressionCoercion.ts, 62, 5))
 
         if (this.isUser) { // error
->this.isUser : Symbol(Foo.isUser, Decl(truthinessCallExpressionCoercion.ts, 58, 32))
+>this.isUser : Symbol(isUser, Decl(truthinessCallExpressionCoercion.ts, 58, 32))
 >this : Symbol(Foo, Decl(truthinessCallExpressionCoercion.ts, 55, 1))
->isUser : Symbol(Foo.isUser, Decl(truthinessCallExpressionCoercion.ts, 58, 32))
+>isUser : Symbol(isUser, Decl(truthinessCallExpressionCoercion.ts, 58, 32))
         }
 
         if (this.maybeIsUser) { // ok
->this.maybeIsUser : Symbol(Foo.maybeIsUser, Decl(truthinessCallExpressionCoercion.ts, 57, 11))
+>this.maybeIsUser : Symbol(maybeIsUser, Decl(truthinessCallExpressionCoercion.ts, 57, 11))
 >this : Symbol(Foo, Decl(truthinessCallExpressionCoercion.ts, 55, 1))
->maybeIsUser : Symbol(Foo.maybeIsUser, Decl(truthinessCallExpressionCoercion.ts, 57, 11))
+>maybeIsUser : Symbol(maybeIsUser, Decl(truthinessCallExpressionCoercion.ts, 57, 11))
         }
     }
 }
@@= skipped -32, +32 lines =@@
 >StatsBase : Symbol(StatsBase, Decl(truthinessCallExpressionCoercion.ts, 87, 1))
 
     if (stats.isDirectory) { // err
->stats.isDirectory : Symbol(StatsBase.isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
+>stats.isDirectory : Symbol(isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
 >stats : Symbol(stats, Decl(truthinessCallExpressionCoercion.ts, 74, 11))
->isDirectory : Symbol(StatsBase.isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
+>isDirectory : Symbol(isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
 
         console.log(`[Directory] ${stats.ctime}`)
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->stats.ctime : Symbol(StatsBase.ctime, Decl(truthinessCallExpressionCoercion.ts, 90, 27))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
+>stats.ctime : Symbol(ctime, Decl(truthinessCallExpressionCoercion.ts, 90, 27))
 >stats : Symbol(stats, Decl(truthinessCallExpressionCoercion.ts, 74, 11))
->ctime : Symbol(StatsBase.ctime, Decl(truthinessCallExpressionCoercion.ts, 90, 27))
+>ctime : Symbol(ctime, Decl(truthinessCallExpressionCoercion.ts, 90, 27))
     }
 }
 
@@= skipped -22, +22 lines =@@
 >Nested : Symbol(Nested, Decl(truthinessCallExpressionCoercion.ts, 92, 1))
 
     if (a.stats.isDirectory) { // err
->a.stats.isDirectory : Symbol(StatsBase.isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
->a.stats : Symbol(Nested.stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
+>a.stats.isDirectory : Symbol(isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
+>a.stats : Symbol(stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
 >a : Symbol(a, Decl(truthinessCallExpressionCoercion.ts, 80, 11))
->stats : Symbol(Nested.stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
->isDirectory : Symbol(StatsBase.isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
+>stats : Symbol(stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
+>isDirectory : Symbol(isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
 
         b.stats.isDirectory(); 
->b.stats.isDirectory : Symbol(StatsBase.isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
->b.stats : Symbol(Nested.stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
+>b.stats.isDirectory : Symbol(isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
+>b.stats : Symbol(stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
 >b : Symbol(b, Decl(truthinessCallExpressionCoercion.ts, 80, 21))
->stats : Symbol(Nested.stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
->isDirectory : Symbol(StatsBase.isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
+>stats : Symbol(stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
+>isDirectory : Symbol(isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
     }
     if (a.stats.isDirectory) { // ok
->a.stats.isDirectory : Symbol(StatsBase.isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
->a.stats : Symbol(Nested.stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
+>a.stats.isDirectory : Symbol(isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
+>a.stats : Symbol(stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
 >a : Symbol(a, Decl(truthinessCallExpressionCoercion.ts, 80, 11))
->stats : Symbol(Nested.stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
->isDirectory : Symbol(StatsBase.isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
+>stats : Symbol(stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
+>isDirectory : Symbol(isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
 
         a.stats.isDirectory();
->a.stats.isDirectory : Symbol(StatsBase.isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
->a.stats : Symbol(Nested.stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
+>a.stats.isDirectory : Symbol(isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
+>a.stats : Symbol(stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
 >a : Symbol(a, Decl(truthinessCallExpressionCoercion.ts, 80, 11))
->stats : Symbol(Nested.stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
->isDirectory : Symbol(StatsBase.isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
+>stats : Symbol(stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
+>isDirectory : Symbol(isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
     }
 } 
 
@@= skipped -34, +34 lines =@@
 >T : Symbol(T, Decl(truthinessCallExpressionCoercion.ts, 89, 20))
 
     isDirectory(): boolean;
->isDirectory : Symbol(StatsBase.isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
+>isDirectory : Symbol(isDirectory, Decl(truthinessCallExpressionCoercion.ts, 89, 24))
 
     ctime: number;
->ctime : Symbol(StatsBase.ctime, Decl(truthinessCallExpressionCoercion.ts, 90, 27))
+>ctime : Symbol(ctime, Decl(truthinessCallExpressionCoercion.ts, 90, 27))
 }
 
 interface Nested {
 >Nested : Symbol(Nested, Decl(truthinessCallExpressionCoercion.ts, 92, 1))
 
     stats: StatsBase<any>;
->stats : Symbol(Nested.stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
+>stats : Symbol(stats, Decl(truthinessCallExpressionCoercion.ts, 94, 18))
 >StatsBase : Symbol(StatsBase, Decl(truthinessCallExpressionCoercion.ts, 87, 1))
 }
