--- old.topLevel.symbols
+++ new.topLevel.symbols
@@= skipped -4, +4 lines =@@
 >IPoint : Symbol(IPoint, Decl(topLevel.ts, 0, 0))
 
     x:number;
->x : Symbol(IPoint.x, Decl(topLevel.ts, 0, 18))
+>x : Symbol(x, Decl(topLevel.ts, 0, 18))
 
     y:number;
->y : Symbol(IPoint.y, Decl(topLevel.ts, 1, 13))
+>y : Symbol(y, Decl(topLevel.ts, 1, 13))
 }
 
 class Point implements IPoint {
@@= skipped -11, +11 lines =@@
 >IPoint : Symbol(IPoint, Decl(topLevel.ts, 0, 0))
 
     constructor(public x,public y){}
->x : Symbol(Point.x, Decl(topLevel.ts, 6, 16))
->y : Symbol(Point.y, Decl(topLevel.ts, 6, 25))
+>x : Symbol(x, Decl(topLevel.ts, 6, 16))
+>y : Symbol(y, Decl(topLevel.ts, 6, 25))
 
     public move(xo:number,yo:number) {
->move : Symbol(Point.move, Decl(topLevel.ts, 6, 36))
+>move : Symbol(move, Decl(topLevel.ts, 6, 36))
 >xo : Symbol(xo, Decl(topLevel.ts, 7, 16))
 >yo : Symbol(yo, Decl(topLevel.ts, 7, 26))
 
 	this.x+=xo;
->this.x : Symbol(Point.x, Decl(topLevel.ts, 6, 16))
+>this.x : Symbol(x, Decl(topLevel.ts, 6, 16))
 >this : Symbol(Point, Decl(topLevel.ts, 3, 1))
->x : Symbol(Point.x, Decl(topLevel.ts, 6, 16))
+>x : Symbol(x, Decl(topLevel.ts, 6, 16))
 >xo : Symbol(xo, Decl(topLevel.ts, 7, 16))
 
 	this.y+=yo;
->this.y : Symbol(Point.y, Decl(topLevel.ts, 6, 25))
+>this.y : Symbol(y, Decl(topLevel.ts, 6, 25))
 >this : Symbol(Point, Decl(topLevel.ts, 3, 1))
->y : Symbol(Point.y, Decl(topLevel.ts, 6, 25))
+>y : Symbol(y, Decl(topLevel.ts, 6, 25))
 >yo : Symbol(yo, Decl(topLevel.ts, 7, 26))
 
 	return this;
 >this : Symbol(Point, Decl(topLevel.ts, 3, 1))
     }
     public toString() {
->toString : Symbol(Point.toString, Decl(topLevel.ts, 11, 5))
+>toString : Symbol(toString, Decl(topLevel.ts, 11, 5))
 
 	return ("("+this.x+","+this.y+")");
->this.x : Symbol(Point.x, Decl(topLevel.ts, 6, 16))
+>this.x : Symbol(x, Decl(topLevel.ts, 6, 16))
 >this : Symbol(Point, Decl(topLevel.ts, 3, 1))
->x : Symbol(Point.x, Decl(topLevel.ts, 6, 16))
->this.y : Symbol(Point.y, Decl(topLevel.ts, 6, 25))
+>x : Symbol(x, Decl(topLevel.ts, 6, 16))
+>this.y : Symbol(y, Decl(topLevel.ts, 6, 25))
 >this : Symbol(Point, Decl(topLevel.ts, 3, 1))
->y : Symbol(Point.y, Decl(topLevel.ts, 6, 25))
+>y : Symbol(y, Decl(topLevel.ts, 6, 25))
     }
 }
 
@@= skipped -41, +41 lines =@@
 
 result+=(new Point(3,4).move(2,2));
 >result : Symbol(result, Decl(topLevel.ts, 17, 3))
->new Point(3,4).move : Symbol(Point.move, Decl(topLevel.ts, 6, 36))
+>new Point(3,4).move : Symbol(move, Decl(topLevel.ts, 6, 36))
 >Point : Symbol(Point, Decl(topLevel.ts, 3, 1))
->move : Symbol(Point.move, Decl(topLevel.ts, 6, 36))
+>move : Symbol(move, Decl(topLevel.ts, 6, 36))
 
 module M {
 >M : Symbol(M, Decl(topLevel.ts, 18, 35))
@@= skipped -14, +14 lines =@@
 
 result+=(M.origin.move(1,1));
 >result : Symbol(result, Decl(topLevel.ts, 17, 3))
->M.origin.move : Symbol(Point.move, Decl(topLevel.ts, 6, 36))
->M.origin : Symbol(M.origin, Decl(topLevel.ts, 21, 14))
+>M.origin.move : Symbol(move, Decl(topLevel.ts, 6, 36))
+>M.origin : Symbol(origin, Decl(topLevel.ts, 21, 14))
 >M : Symbol(M, Decl(topLevel.ts, 18, 35))
->origin : Symbol(M.origin, Decl(topLevel.ts, 21, 14))
->move : Symbol(Point.move, Decl(topLevel.ts, 6, 36))
+>origin : Symbol(origin, Decl(topLevel.ts, 21, 14))
+>move : Symbol(move, Decl(topLevel.ts, 6, 36))
 
 
