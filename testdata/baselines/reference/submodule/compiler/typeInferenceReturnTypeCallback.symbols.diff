--- old.typeInferenceReturnTypeCallback.symbols
+++ new.typeInferenceReturnTypeCallback.symbols
@@= skipped -5, +5 lines =@@
 >A : Symbol(A, Decl(typeInferenceReturnTypeCallback.ts, 0, 16))
 
     map<B>(f: (t: A) => B): IList<B>;
->map : Symbol(IList.map, Decl(typeInferenceReturnTypeCallback.ts, 0, 20))
+>map : Symbol(map, Decl(typeInferenceReturnTypeCallback.ts, 0, 20))
 >B : Symbol(B, Decl(typeInferenceReturnTypeCallback.ts, 1, 8))
 >f : Symbol(f, Decl(typeInferenceReturnTypeCallback.ts, 1, 11))
 >t : Symbol(t, Decl(typeInferenceReturnTypeCallback.ts, 1, 15))
@@= skipped -17, +17 lines =@@
 >C : Symbol(C, Decl(typeInferenceReturnTypeCallback.ts, 4, 10))
 
     map<D>(f: (t: C) => D): IList<D> {
->map : Symbol(Nil.map, Decl(typeInferenceReturnTypeCallback.ts, 4, 33))
+>map : Symbol(map, Decl(typeInferenceReturnTypeCallback.ts, 4, 33))
 >D : Symbol(D, Decl(typeInferenceReturnTypeCallback.ts, 5, 8))
 >f : Symbol(f, Decl(typeInferenceReturnTypeCallback.ts, 5, 11))
 >t : Symbol(t, Decl(typeInferenceReturnTypeCallback.ts, 5, 15))
@@= skipped -20, +20 lines =@@
 >T : Symbol(T, Decl(typeInferenceReturnTypeCallback.ts, 10, 11))
 
     map<U>(f: (t: T) => U): IList<U> {
->map : Symbol(Cons.map, Decl(typeInferenceReturnTypeCallback.ts, 10, 34))
+>map : Symbol(map, Decl(typeInferenceReturnTypeCallback.ts, 10, 34))
 >U : Symbol(U, Decl(typeInferenceReturnTypeCallback.ts, 11, 8))
 >f : Symbol(f, Decl(typeInferenceReturnTypeCallback.ts, 11, 11))
 >t : Symbol(t, Decl(typeInferenceReturnTypeCallback.ts, 11, 15))
@@= skipped -10, +10 lines =@@
 >U : Symbol(U, Decl(typeInferenceReturnTypeCallback.ts, 11, 8))
 
         return this.foldRight(new Nil<U>(), (t, acc) => {
->this.foldRight : Symbol(Cons.foldRight, Decl(typeInferenceReturnTypeCallback.ts, 15, 5))
+>this.foldRight : Symbol(foldRight, Decl(typeInferenceReturnTypeCallback.ts, 15, 5))
 >this : Symbol(Cons, Decl(typeInferenceReturnTypeCallback.ts, 8, 1))
->foldRight : Symbol(Cons.foldRight, Decl(typeInferenceReturnTypeCallback.ts, 15, 5))
+>foldRight : Symbol(foldRight, Decl(typeInferenceReturnTypeCallback.ts, 15, 5))
 >Nil : Symbol(Nil, Decl(typeInferenceReturnTypeCallback.ts, 2, 1))
 >U : Symbol(U, Decl(typeInferenceReturnTypeCallback.ts, 11, 8))
 >t : Symbol(t, Decl(typeInferenceReturnTypeCallback.ts, 12, 45))
@@= skipped -16, +16 lines =@@
     }
 
     foldRight<E>(z: E, f: (t: T, acc: E) => E): E {
->foldRight : Symbol(Cons.foldRight, Decl(typeInferenceReturnTypeCallback.ts, 15, 5))
+>foldRight : Symbol(foldRight, Decl(typeInferenceReturnTypeCallback.ts, 15, 5))
 >E : Symbol(E, Decl(typeInferenceReturnTypeCallback.ts, 17, 14))
 >z : Symbol(z, Decl(typeInferenceReturnTypeCallback.ts, 17, 17))
 >E : Symbol(E, Decl(typeInferenceReturnTypeCallback.ts, 17, 14))
