--- old.correlatedUnions.js
+++ new.correlatedUnions.js
@@= skipped -303, +303 lines =@@


 //// [correlatedUnions.js]
-"use strict";
-// Various repros from #30581
 function processRecord(rec) {
     rec.f(rec.v);
 }
 processRecord(r1);
 processRecord(r2);
-processRecord({ kind: 'n', v: 42, f: function (v) { return v.toExponential(); } });
+processRecord({ kind: 'n', v: 42, f: v => v.toExponential() });
 function renderTextField(props) { }
 function renderSelectField(props) { }
-var renderFuncs = {
+const renderFuncs = {
     text: renderTextField,
     select: renderSelectField,
 };
 function renderField(field) {
-    var renderFn = renderFuncs[field.type];
+    const renderFn = renderFuncs[field.type];
     renderFn(field.data);
 }
-var handlers = {
-    foo: function (s) { return s.length; },
-    bar: function (n) { return n.toFixed(2); }
+const handlers = {
+    foo: s => s.length,
+    bar: n => n.toFixed(2)
 };
-var data = [
+const data = [
     { type: 'foo', data: 'abc' },
     { type: 'foo', data: 'def' },
     { type: 'bar', data: 42 },
 ];
 function process(data) {
-    data.forEach(function (block) {
+    data.forEach(block => {
         if (block.type in handlers) {
             handlers[block.type](block.data);
         }
@@= skipped -36, +34 lines =@@
 }
 process(data);
 process([{ type: 'foo', data: 'abc' }]);
-function call(_a) {
-    var letter = _a.letter, caller = _a.caller;
+function call({ letter, caller }) {
     caller(letter);
 }
 call(xx);
 function processEvents(events) {
-    var _loop_1 = function (event_1) {
-        document.addEventListener(event_1.name, function (ev) { return event_1.callback(ev); }, { once: event_1.once });
-    };
-    for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {
-        var event_1 = events_1[_i];
-        _loop_1(event_1);
+    for (const event of events) {
+        document.addEventListener(event.name, (ev) => event.callback(ev), { once: event.once });
     }
 }
-function createEventListener(_a) {
-    var name = _a.name, _b = _a.once, once = _b === void 0 ? false : _b, callback = _a.callback;
-    return { name: name, once: once, callback: callback };
+function createEventListener({ name, once = false, callback }) {
+    return { name, once, callback };
 }
-var clickEvent = createEventListener({
+const clickEvent = createEventListener({
     name: "click",
-    callback: function (ev) { return console.log(ev); },
+    callback: ev => console.log(ev),
 });
-var scrollEvent = createEventListener({
+const scrollEvent = createEventListener({
     name: "scroll",
-    callback: function (ev) { return console.log(ev); },
+    callback: ev => console.log(ev),
 });
 processEvents([clickEvent, scrollEvent]);
 processEvents([
-    { name: "click", callback: function (ev) { return console.log(ev); } },
-    { name: "scroll", callback: function (ev) { return console.log(ev); } },
+    { name: "click", callback: ev => console.log(ev) },
+    { name: "scroll", callback: ev => console.log(ev) },
 ]);
 // --------
 function ff1() {
-    var funs = {
-        sum: function (a, b) { return a + b; },
-        concat: function (a, b, c) { return a + b + c; }
+    const funs = {
+        sum: (a, b) => a + b,
+        concat: (a, b, c) => a + b + c
     };
-    function apply(funKey) {
-        var args = [];
-        for (var _i = 1; _i < arguments.length; _i++) {
-            args[_i - 1] = arguments[_i];
-        }
-        var fn = funs[funKey];
-        fn.apply(void 0, args);
+    function apply(funKey, ...args) {
+        const fn = funs[funKey];
+        fn(...args);
     }
-    var x1 = apply('sum', 1, 2);
-    var x2 = apply('concat', 'str1', 'str2', 'str3');
+    const x1 = apply('sum', 1, 2);
+    const x2 = apply('concat', 'str1', 'str2', 'str3');
 }
 function f1(funcs, key, arg) {
     funcs[key](arg);
 }
 function f2(funcs, key, arg) {
-    var func = funcs[key]; // Type Funcs[K]
+    const func = funcs[key]; // Type Funcs[K]
     func(arg);
 }
 function f3(funcs, key, arg) {
-    var func = funcs[key];
+    const func = funcs[key];
     func(arg);
 }
 function f4(x, y) {
     x = y;
 }
-var ref = {
+const ref = {
     someKey: { name: "" },
     someOtherKey: { name: 42 }
 };
 function func(k) {
-    var myObj = ref[k];
+    const myObj = ref[k];
     if (myObj) {
         return myObj.name;
     }
-    var myObj2 = ref[k];
+    const myObj2 = ref[k];
     if (myObj2) {
         return myObj2.name;
     }
@@= skipped -80, +70 lines =@@
 function foo(prop, f) {
     bar(f[prop]);
 }
-var ALL_BARS = [{ name: 'a' }, { name: 'b' }];
-var BAR_LOOKUP = makeCompleteLookupMapping(ALL_BARS, 'name');
-var getStringAndNumberFromOriginalAndMapped = function (original, mappedFromOriginal, key, nestedKey) {
+const ALL_BARS = [{ name: 'a' }, { name: 'b' }];
+const BAR_LOOKUP = makeCompleteLookupMapping(ALL_BARS, 'name');
+const getStringAndNumberFromOriginalAndMapped = (original, mappedFromOriginal, key, nestedKey) => {
     return [original[key][nestedKey], mappedFromOriginal[key][nestedKey]];
 };
 function getConfigOrDefault(userConfig, key, defaultValue) {
-    var userValue = userConfig[key];
-    var assertedCheck = userValue ? userValue : defaultValue;
+    const userValue = userConfig[key];
+    const assertedCheck = userValue ? userValue : defaultValue;
     return assertedCheck;
 }
 function getValueConcrete(o, k) {
@@= skipped -108, +108 lines =@@
 declare function createEventListener<K extends keyof DocumentEventMap>({ name, once, callback }: Ev<K>): Ev<K>;
 declare const clickEvent: {
     readonly name: "click";
-    readonly once?: boolean;
+    readonly once?: boolean | undefined;
     readonly callback: (ev: PointerEvent) => void;
 };
 declare const scrollEvent: {
     readonly name: "scroll";
-    readonly once?: boolean;
+    readonly once?: boolean | undefined;
     readonly callback: (ev: Event) => void;
 };
 declare function ff1(): void;
@@= skipped -74, +74 lines =@@
     };
 };
 type MappedFromOriginal = SameKeys<Original>;
-declare const getStringAndNumberFromOriginalAndMapped: <K extends KeyOfOriginal, N extends NestedKeyOfOriginalFor<K>>(original: Original, mappedFromOriginal: MappedFromOriginal, key: K, nestedKey: N) => [Original[K][N], MappedFromOriginal[K][N]];
+declare const getStringAndNumberFromOriginalAndMapped: <K extends keyof Original, N extends keyof Original[K]>(original: Original, mappedFromOriginal: SameKeys<Original>, key: K, nestedKey: N) => [Original[K][N], SameKeys<Original>[K][N]];
 interface Config {
     string: string;
     number: number;