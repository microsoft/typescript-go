--- old.inferFromAnnotatedReturn1.types
+++ new.inferFromAnnotatedReturn1.types
@@= skipped -6, +6 lines =@@
 >arg : T

 const res1 = test((arg): number => 1); // ok
->res1 : number
->test((arg): number => 1) : number
+>res1 : unknown
+>test((arg): number => 1) : unknown
 >test : <T>(cb: (arg: T) => T) => T
->(arg): number => 1 : (arg: number) => number
->arg : number
+>(arg): number => 1 : (arg: unknown) => number
+>arg : unknown
 >1 : 1

 const res2 = test((arg): number => 'foo'); // error
->res2 : number
->test((arg): number => 'foo') : number
+>res2 : unknown
+>test((arg): number => 'foo') : unknown
 >test : <T>(cb: (arg: T) => T) => T
->(arg): number => 'foo' : (arg: number) => number
->arg : number
+>(arg): number => 'foo' : (arg: unknown) => number
+>arg : unknown
 >'foo' : "foo"

 export declare function linkedSignal<S, D>(options: {
@@= skipped -29, +29 lines =@@
 }): D;

 const signal = linkedSignal({
->signal : number
->linkedSignal({  source: () => 3,  computation: (s): number => 3,}) : number
+>signal : unknown
+>linkedSignal({  source: () => 3,  computation: (s): number => 3,}) : unknown
 >linkedSignal : <S, D>(options: { source: () => S; computation: (source: NoInfer<D>) => D; }) => D
->{  source: () => 3,  computation: (s): number => 3,} : { source: () => number; computation: (s: number) => number; }
+>{  source: () => 3,  computation: (s): number => 3,} : { source: () => number; computation: (s: unknown) => number; }

   source: () => 3,
 >source : () => number
@@= skipped -11, +11 lines =@@
 >3 : 3

   computation: (s): number => 3,
->computation : (s: number) => number
->(s): number => 3 : (s: number) => number
->s : number
+>computation : (s: unknown) => number
+>(s): number => 3 : (s: unknown) => number
+>s : unknown
 >3 : 3

 });
@@= skipped -19, +19 lines =@@
 }

 const _1 = new Foo((name: string, { x }): { name: string; x: number } => ({
->_1 : Foo<string, { name: string; x: number; }>
->new Foo((name: string, { x }): { name: string; x: number } => ({  name,  x,})) : Foo<string, { name: string; x: number; }>
+>_1 : Foo<string, unknown>
+>new Foo((name: string, { x }): { name: string; x: number } => ({  name,  x,})) : Foo<string, unknown>
 >Foo : typeof Foo
->(name: string, { x }): { name: string; x: number } => ({  name,  x,}) : (name: string, { x }: { x: number; other: NoInfer<{ name: string; x: number; }>; }) => { name: string; x: number; }
+>(name: string, { x }): { name: string; x: number } => ({  name,  x,}) : (name: string, { x }: { x: number; other: unknown; }) => { name: string; x: number; }
 >name : string
 >x : number
 >name : string