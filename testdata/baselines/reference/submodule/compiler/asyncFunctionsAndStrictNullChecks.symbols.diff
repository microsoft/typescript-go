--- old.asyncFunctionsAndStrictNullChecks.symbols
+++ new.asyncFunctionsAndStrictNullChecks.symbols
@@= skipped -9, +9 lines =@@
 >TResult : Symbol(TResult, Decl(asyncFunctionsAndStrictNullChecks.ts, 1, 23))
 
         then<U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
->then : Symbol(IPromise.then, Decl(asyncFunctionsAndStrictNullChecks.ts, 1, 33), Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 145), Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 135), Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 135))
+>then : Symbol(then, Decl(asyncFunctionsAndStrictNullChecks.ts, 1, 33), Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 145), Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 135), Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 135))
 >U : Symbol(U, Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 13))
 >success : Symbol(success, Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 16))
 >value : Symbol(value, Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 27))
@@= skipped -17, +17 lines =@@
 >U : Symbol(U, Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 13))
 
         then<U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
->then : Symbol(IPromise.then, Decl(asyncFunctionsAndStrictNullChecks.ts, 1, 33), Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 145), Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 135), Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 135))
+>then : Symbol(then, Decl(asyncFunctionsAndStrictNullChecks.ts, 1, 33), Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 145), Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 135), Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 135))
 >U : Symbol(U, Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 13))
 >success : Symbol(success, Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 16))
 >value : Symbol(value, Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 27))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 13))
 
         then<U>(success?: (value: TResult) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
->then : Symbol(IPromise.then, Decl(asyncFunctionsAndStrictNullChecks.ts, 1, 33), Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 145), Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 135), Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 135))
+>then : Symbol(then, Decl(asyncFunctionsAndStrictNullChecks.ts, 1, 33), Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 145), Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 135), Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 135))
 >U : Symbol(U, Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 13))
 >success : Symbol(success, Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 16))
 >value : Symbol(value, Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 27))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 13))
 
         then<U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
->then : Symbol(IPromise.then, Decl(asyncFunctionsAndStrictNullChecks.ts, 1, 33), Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 145), Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 135), Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 135))
+>then : Symbol(then, Decl(asyncFunctionsAndStrictNullChecks.ts, 1, 33), Decl(asyncFunctionsAndStrictNullChecks.ts, 2, 145), Decl(asyncFunctionsAndStrictNullChecks.ts, 3, 135), Decl(asyncFunctionsAndStrictNullChecks.ts, 4, 135))
 >U : Symbol(U, Decl(asyncFunctionsAndStrictNullChecks.ts, 5, 13))
 >success : Symbol(success, Decl(asyncFunctionsAndStrictNullChecks.ts, 5, 16))
 >value : Symbol(value, Decl(asyncFunctionsAndStrictNullChecks.ts, 5, 27))
@@= skipped -15, +15 lines =@@
 >U : Symbol(U, Decl(asyncFunctionsAndStrictNullChecks.ts, 5, 13))
 
         done<U>(success?: (value: TResult) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
->done : Symbol(IPromise.done, Decl(asyncFunctionsAndStrictNullChecks.ts, 5, 125))
+>done : Symbol(done, Decl(asyncFunctionsAndStrictNullChecks.ts, 5, 125))
 >U : Symbol(U, Decl(asyncFunctionsAndStrictNullChecks.ts, 6, 13))
 >success : Symbol(success, Decl(asyncFunctionsAndStrictNullChecks.ts, 6, 16))
 >value : Symbol(value, Decl(asyncFunctionsAndStrictNullChecks.ts, 6, 27))
@@= skipped -11, +11 lines =@@
 >progress : Symbol(progress, Decl(asyncFunctionsAndStrictNullChecks.ts, 6, 92))
 
         cancel(): void;
->cancel : Symbol(IPromise.cancel, Decl(asyncFunctionsAndStrictNullChecks.ts, 6, 122))
+>cancel : Symbol(cancel, Decl(asyncFunctionsAndStrictNullChecks.ts, 6, 122))
     }
 }
 
@@= skipped -8, +8 lines =@@
 >sample : Symbol(sample, Decl(asyncFunctionsAndStrictNullChecks.ts, 10, 1))
 >promise : Symbol(promise, Decl(asyncFunctionsAndStrictNullChecks.ts, 12, 22))
 >Windows : Symbol(Windows, Decl(asyncFunctionsAndStrictNullChecks.ts, 0, 0))
->Foundation : Symbol(Windows.Foundation, Decl(asyncFunctionsAndStrictNullChecks.ts, 0, 26))
->IPromise : Symbol(Windows.Foundation.IPromise, Decl(asyncFunctionsAndStrictNullChecks.ts, 0, 38))
+>Foundation : Symbol(Foundation, Decl(asyncFunctionsAndStrictNullChecks.ts, 0, 26))
+>IPromise : Symbol(IPromise, Decl(asyncFunctionsAndStrictNullChecks.ts, 0, 38))
 
     var number = await promise;
 >number : Symbol(number, Decl(asyncFunctionsAndStrictNullChecks.ts, 13, 7))
@@= skipped -23, +23 lines =@@
 >value : Symbol(value, Decl(asyncFunctionsAndStrictNullChecks.ts, 18, 29))
 >T : Symbol(T, Decl(asyncFunctionsAndStrictNullChecks.ts, 18, 26))
 >Windows : Symbol(Windows, Decl(asyncFunctionsAndStrictNullChecks.ts, 0, 0))
->Foundation : Symbol(Windows.Foundation, Decl(asyncFunctionsAndStrictNullChecks.ts, 0, 26))
->IPromise : Symbol(Windows.Foundation.IPromise, Decl(asyncFunctionsAndStrictNullChecks.ts, 0, 38))
+>Foundation : Symbol(Foundation, Decl(asyncFunctionsAndStrictNullChecks.ts, 0, 26))
+>IPromise : Symbol(IPromise, Decl(asyncFunctionsAndStrictNullChecks.ts, 0, 38))
 >T : Symbol(T, Decl(asyncFunctionsAndStrictNullChecks.ts, 18, 26))
 
 async function sample2(x?: number) {
