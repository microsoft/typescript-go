--- old.assignmentNonObjectTypeConstraints.symbols
+++ new.assignmentNonObjectTypeConstraints.symbols
@@= skipped -2, +2 lines =@@
 === assignmentNonObjectTypeConstraints.ts ===
 const enum E { A, B, C }
 >E : Symbol(E, Decl(assignmentNonObjectTypeConstraints.ts, 0, 0))
->A : Symbol(E.A, Decl(assignmentNonObjectTypeConstraints.ts, 0, 14))
->B : Symbol(E.B, Decl(assignmentNonObjectTypeConstraints.ts, 0, 17))
->C : Symbol(E.C, Decl(assignmentNonObjectTypeConstraints.ts, 0, 20))
+>A : Symbol(A, Decl(assignmentNonObjectTypeConstraints.ts, 0, 14))
+>B : Symbol(B, Decl(assignmentNonObjectTypeConstraints.ts, 0, 17))
+>C : Symbol(C, Decl(assignmentNonObjectTypeConstraints.ts, 0, 20))
 
 function foo<T extends number>(x: T) {
 >foo : Symbol(foo, Decl(assignmentNonObjectTypeConstraints.ts, 0, 24))
@@= skipped -20, +20 lines =@@
 
 foo(E.A);
 >foo : Symbol(foo, Decl(assignmentNonObjectTypeConstraints.ts, 0, 24))
->E.A : Symbol(E.A, Decl(assignmentNonObjectTypeConstraints.ts, 0, 14))
+>E.A : Symbol(A, Decl(assignmentNonObjectTypeConstraints.ts, 0, 14))
 >E : Symbol(E, Decl(assignmentNonObjectTypeConstraints.ts, 0, 0))
->A : Symbol(E.A, Decl(assignmentNonObjectTypeConstraints.ts, 0, 14))
+>A : Symbol(A, Decl(assignmentNonObjectTypeConstraints.ts, 0, 14))
 
 class A { a }
 >A : Symbol(A, Decl(assignmentNonObjectTypeConstraints.ts, 7, 9))
->a : Symbol(A.a, Decl(assignmentNonObjectTypeConstraints.ts, 9, 9))
+>a : Symbol(a, Decl(assignmentNonObjectTypeConstraints.ts, 9, 9))
 
 class B { b }
 >B : Symbol(B, Decl(assignmentNonObjectTypeConstraints.ts, 9, 13))
->b : Symbol(B.b, Decl(assignmentNonObjectTypeConstraints.ts, 10, 9))
+>b : Symbol(b, Decl(assignmentNonObjectTypeConstraints.ts, 10, 9))
 
 function bar<T extends A | B>(x: T) {
 >bar : Symbol(bar, Decl(assignmentNonObjectTypeConstraints.ts, 10, 13))
