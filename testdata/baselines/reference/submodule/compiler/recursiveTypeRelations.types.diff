--- old.recursiveTypeRelations.types
+++ new.recursiveTypeRelations.types
@@= skipped -52, +52 lines =@@
     }
     if (typeof arg == "string") {
 >typeof arg == "string" : boolean
->typeof arg : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof arg : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >arg : ClassNameArg<S>
 >"string" : "string"

@@= skipped -11, +11 lines =@@
     }
     if (typeof arg == "object") {
 >typeof arg == "object" : boolean
->typeof arg : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof arg : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >arg : ClassNameArg<S>
 >"object" : "object"

@@= skipped -8, +8 lines =@@
 >Object.keys(arg).reduce<ClassNameObject>((obj: ClassNameObject, key: keyof S) => {        const exportedClassName = styles[key];        obj[exportedClassName] = (arg as ClassNameMap<S>)[key];         return obj;      }, {}) : string
 >Object.keys(arg).reduce : { (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U; }
 >Object.keys(arg) : string[]
->Object.keys : { (o: object): string[]; (o: {}): string[]; }
+>Object.keys : (o: object) => string[]
 >Object : ObjectConstructor
->keys : { (o: object): string[]; (o: {}): string[]; }
+>keys : (o: object) => string[]
 >arg : ClassNameObjectMap<S>
 >reduce : { (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U; }
 >(obj: ClassNameObject, key: keyof S) => {        const exportedClassName = styles[key];        obj[exportedClassName] = (arg as ClassNameMap<S>)[key];         return obj;      } : (obj: ClassNameObject, key: keyof S) => ClassNameObject