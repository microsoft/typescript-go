--- old.recursiveTypeRelations.types
+++ new.recursiveTypeRelations.types
@@= skipped -4, +4 lines =@@
 
 type Attributes<Keys extends keyof any> = {
 >Attributes : Attributes<Keys>
+>Keys : Keys
 
     [Key in Keys]: string;
+>Key : Key
 }
 
 class Query<A extends Attributes<keyof A>> {
 >Query : Query<A>
+>A : A
 
     multiply<B extends Attributes<keyof B>>(x: B): Query<A & B>;
 >multiply : <B extends Attributes<keyof B>>(x: B) => Query<A & B>
+>B : B
 >x : B
 }
 
@@= skipped -16, +20 lines =@@
 
 type ClassName<S> = keyof S;
 >ClassName : keyof S
+>S : S
 
 type ClassNameMap<S> = { [K in keyof S]?: boolean }
 >ClassNameMap : ClassNameMap<S>
+>S : S
+>K : K
 
 type ClassNameObjectMap<S> = object & ClassNameMap<S>;
 >ClassNameObjectMap : ClassNameObjectMap<S>
+>S : S
 
 type ClassNameArg<S> = ClassName<S> | ClassNameObjectMap<S>;
 >ClassNameArg : ClassNameArg<S>
+>S : S
 
 export function css<S extends { [K in keyof S]: string }>(styles: S, ...classNames: ClassNameArg<S>[]): string {
->css : <S extends { [K in keyof S]: string; }>(styles: S, ...classNames: ClassNameArg<S>[]) => string
+>css : <S extends { [K in keyof S]: string }>(styles: S, ...classNames: ClassNameArg<S>[]) => string
+>S : S
+>K : K
 >styles : S
 >classNames : ClassNameArg<S>[]
 
@@= skipped -32, +39 lines =@@
     }
     if (typeof arg == "string") {
 >typeof arg == "string" : boolean
->typeof arg : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof arg : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >arg : ClassNameArg<S>
 >"string" : "string"
 
@@= skipped -11, +11 lines =@@
     }
     if (typeof arg == "object") {
 >typeof arg == "object" : boolean
->typeof arg : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof arg : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >arg : ClassNameArg<S>
 >"object" : "object"
 
