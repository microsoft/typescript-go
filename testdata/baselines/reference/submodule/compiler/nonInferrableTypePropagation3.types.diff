--- old.nonInferrableTypePropagation3.types
+++ new.nonInferrableTypePropagation3.types
@@= skipped -4, +4 lines =@@
 
 declare type Callback<Args extends any[], Out, R> = (...args: Args) => (data: Out) => R;
 >Callback : Callback<Args, Out, R>
+>Args : Args
+>Out : Out
+>R : R
 >args : Args
 >data : Out
 
 declare function factory<Out>(): <Args extends any[], R>(callback: Callback<Args, Out, R>) => (...args: Args) => R;
 >factory : <Out>() => <Args extends any[], R>(callback: Callback<Args, Out, R>) => (...args: Args) => R
+>Out : Out
+>Args : Args
+>R : R
 >callback : Callback<Args, Out, R>
 >args : Args
 
@@= skipped -16, +22 lines =@@
 >age : number
 
 const usersOverAge = make((age: number) => data => {
->usersOverAge : (age: number) => { id: string; age: number; }[]
->make((age: number) => data => {    return data.filter(user => user.age >= age);}) : (age: number) => { id: string; age: number; }[]
+>usersOverAge : (...args: [age: number]) => { id: string; age: number; }[]
+>make((age: number) => data => {    return data.filter(user => user.age >= age);}) : (...args: [age: number]) => { id: string; age: number; }[]
 >make : <Args extends any[], R>(callback: Callback<Args, { id: string; age: number; }[], R>) => (...args: Args) => R
 >(age: number) => data => {    return data.filter(user => user.age >= age);} : (age: number) => (data: { id: string; age: number; }[]) => { id: string; age: number; }[]
 >age : number
