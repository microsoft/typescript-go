--- old.jsDeclarationEmitExportedClassWithExtends.js
+++ new.jsDeclarationEmitExportedClassWithExtends.js
@@= skipped -41, +41 lines =@@
 export class ElementC extends LitElement2 {}

 //// [index.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 import { LitElement, LitElement as LitElement2 } from "lit";
-var ElementB = /** @class */ (function (_super) {
-    __extends(ElementB, _super);
-    function ElementB() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return ElementB;
-}(LitElement));
-export { ElementB };
-var ElementC = /** @class */ (function (_super) {
-    __extends(ElementC, _super);
-    function ElementC() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return ElementC;
-}(LitElement2));
-export { ElementC };
-
-
-//// [index.d.ts]
 export class ElementB extends LitElement {
 }
-export class ElementC extends LitElement {
-}
-import { LitElement } from "lit";
+export class ElementC extends LitElement2 {
+}
+
+
+//// [index.d.ts]
+import { LitElement, LitElement as LitElement2 } from "lit";
+export declare class ElementB extends LitElement {
+}
+export declare class ElementC extends LitElement2 {
+}