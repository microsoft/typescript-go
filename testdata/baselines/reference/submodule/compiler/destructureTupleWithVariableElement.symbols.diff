--- old.destructureTupleWithVariableElement.symbols
+++ new.destructureTupleWithVariableElement.symbols
@@= skipped -4, +4 lines =@@

 type NonEmptyStringArray = [string, ...Array<string>]
 >NonEmptyStringArray : Symbol(NonEmptyStringArray, Decl(destructureTupleWithVariableElement.ts, 0, 0))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

 const strings: NonEmptyStringArray = ['one', 'two']
 >strings : Symbol(strings, Decl(destructureTupleWithVariableElement.ts, 4, 5))
@@= skipped -29, +29 lines =@@

 declare const strings2: [string, ...Array<string>, string]
 >strings2 : Symbol(strings2, Decl(destructureTupleWithVariableElement.ts, 11, 13))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

 const [s3, s4, s5] = strings2;
 >s3 : Symbol(s3, Decl(destructureTupleWithVariableElement.ts, 13, 7))