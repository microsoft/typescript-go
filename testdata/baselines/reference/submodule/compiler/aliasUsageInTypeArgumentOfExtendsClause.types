//// [tests/cases/compiler/aliasUsageInTypeArgumentOfExtendsClause.ts] ////

=== aliasUsageInTypeArgumentOfExtendsClause_main.ts ===
import Backbone = require("./aliasUsageInTypeArgumentOfExtendsClause_backbone");
>Backbone : typeof import("aliasUsageInTypeArgumentOfExtendsClause_backbone")

import moduleA = require("./aliasUsageInTypeArgumentOfExtendsClause_moduleA");
>moduleA : typeof import("aliasUsageInTypeArgumentOfExtendsClause_moduleA")

interface IHasVisualizationModel {
>IHasVisualizationModel : IHasVisualizationModel

    VisualizationModel: typeof Backbone.Model;
>VisualizationModel : typeof Model
>Backbone : typeof import("aliasUsageInTypeArgumentOfExtendsClause_backbone")
}
class C<T extends IHasVisualizationModel> {
>C : C<T>
>T : T

    x: T;
>x : T
}
class D extends C<IHasVisualizationModel> {
>D : D
>C : C<IHasVisualizationModel>

    x = moduleA;
>x : typeof import("aliasUsageInTypeArgumentOfExtendsClause_moduleA")
>moduleA : typeof import("aliasUsageInTypeArgumentOfExtendsClause_moduleA")
}
=== aliasUsageInTypeArgumentOfExtendsClause_backbone.ts ===
export class Model {
>Model : Model

    public someData: string;
>someData : string
}

=== aliasUsageInTypeArgumentOfExtendsClause_moduleA.ts ===
import Backbone = require("./aliasUsageInTypeArgumentOfExtendsClause_backbone");
>Backbone : typeof import("aliasUsageInTypeArgumentOfExtendsClause_backbone")

export class VisualizationModel extends Backbone.Model {
>VisualizationModel : VisualizationModel
>Backbone.Model : Model
>Backbone : typeof import("aliasUsageInTypeArgumentOfExtendsClause_backbone")
>Model : typeof Model

    // interesting stuff here
}

