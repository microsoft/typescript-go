--- old.reverseMappedPartiallyInferableTypes.symbols
+++ new.reverseMappedPartiallyInferableTypes.symbols
@@ -88,7 +88,7 @@
 >MyType : Symbol(MyType, Decl(reverseMappedPartiallyInferableTypes.ts, 25, 90))
 
     valid: boolean;
->valid : Symbol(MyType.valid, Decl(reverseMappedPartiallyInferableTypes.ts, 27, 18))
+>valid : Symbol(valid, Decl(reverseMappedPartiallyInferableTypes.ts, 27, 18))
 }
 
 const r = extend({
@@ -112,9 +112,9 @@
 >x : Symbol(x, Decl(reverseMappedPartiallyInferableTypes.ts, 35, 22))
 
                 return x.valid;
->x.valid : Symbol(MyType.valid, Decl(reverseMappedPartiallyInferableTypes.ts, 27, 18))
+>x.valid : Symbol(valid, Decl(reverseMappedPartiallyInferableTypes.ts, 27, 18))
 >x : Symbol(x, Decl(reverseMappedPartiallyInferableTypes.ts, 35, 22))
->valid : Symbol(MyType.valid, Decl(reverseMappedPartiallyInferableTypes.ts, 27, 18))
+>valid : Symbol(valid, Decl(reverseMappedPartiallyInferableTypes.ts, 27, 18))
             }
         },
         explicit: {
@@ -132,9 +132,9 @@
 >MyType : Symbol(MyType, Decl(reverseMappedPartiallyInferableTypes.ts, 25, 90))
 
                 return x.valid;
->x.valid : Symbol(MyType.valid, Decl(reverseMappedPartiallyInferableTypes.ts, 27, 18))
+>x.valid : Symbol(valid, Decl(reverseMappedPartiallyInferableTypes.ts, 27, 18))
 >x : Symbol(x, Decl(reverseMappedPartiallyInferableTypes.ts, 41, 24))
->valid : Symbol(MyType.valid, Decl(reverseMappedPartiallyInferableTypes.ts, 27, 18))
+>valid : Symbol(valid, Decl(reverseMappedPartiallyInferableTypes.ts, 27, 18))
             }
         }
     }
@@ -233,9 +233,9 @@
 >k : Symbol(k, Decl(reverseMappedPartiallyInferableTypes.ts, 79, 17))
 
             return k.length > 0;
->k.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>k.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >k : Symbol(k, Decl(reverseMappedPartiallyInferableTypes.ts, 79, 17))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
         }
     }
 });
