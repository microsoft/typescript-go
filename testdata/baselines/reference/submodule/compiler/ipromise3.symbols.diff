--- old.ipromise3.symbols
+++ new.ipromise3.symbols
@@= skipped -5, +5 lines =@@
 >T : Symbol(T, Decl(ipromise3.ts, 0, 20))
 
     then<U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void ): IPromise3<U>;
->then : Symbol(IPromise3.then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
+>then : Symbol(then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
 >U : Symbol(U, Decl(ipromise3.ts, 1, 9))
 >success : Symbol(success, Decl(ipromise3.ts, 1, 12))
 >value : Symbol(value, Decl(ipromise3.ts, 1, 23))
@@= skipped -17, +17 lines =@@
 >U : Symbol(U, Decl(ipromise3.ts, 1, 9))
 
     then<U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void ): IPromise3<U>;
->then : Symbol(IPromise3.then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
+>then : Symbol(then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
 >U : Symbol(U, Decl(ipromise3.ts, 2, 9))
 >success : Symbol(success, Decl(ipromise3.ts, 2, 12))
 >value : Symbol(value, Decl(ipromise3.ts, 2, 23))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(ipromise3.ts, 2, 9))
 
     then<U>(success?: (value: T) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void ): IPromise3<U>;
->then : Symbol(IPromise3.then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
+>then : Symbol(then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
 >U : Symbol(U, Decl(ipromise3.ts, 3, 9))
 >success : Symbol(success, Decl(ipromise3.ts, 3, 12))
 >value : Symbol(value, Decl(ipromise3.ts, 3, 23))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(ipromise3.ts, 3, 9))
 
     then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void ): IPromise3<U>;
->then : Symbol(IPromise3.then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
+>then : Symbol(then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
 >U : Symbol(U, Decl(ipromise3.ts, 4, 9))
 >success : Symbol(success, Decl(ipromise3.ts, 4, 12))
 >value : Symbol(value, Decl(ipromise3.ts, 4, 23))
@@= skipped -15, +15 lines =@@
 >U : Symbol(U, Decl(ipromise3.ts, 4, 9))
 
     done? <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void ): void;
->done : Symbol(IPromise3.done, Decl(ipromise3.ts, 4, 117))
+>done : Symbol(done, Decl(ipromise3.ts, 4, 117))
 >U : Symbol(U, Decl(ipromise3.ts, 5, 11))
 >success : Symbol(success, Decl(ipromise3.ts, 5, 14))
 >value : Symbol(value, Decl(ipromise3.ts, 5, 25))
@@= skipped -17, +17 lines =@@
 var p2: IPromise3<string> = p1.then(function (x) {
 >p2 : Symbol(p2, Decl(ipromise3.ts, 8, 3))
 >IPromise3 : Symbol(IPromise3, Decl(ipromise3.ts, 0, 0))
->p1.then : Symbol(IPromise3.then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
+>p1.then : Symbol(then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
 >p1 : Symbol(p1, Decl(ipromise3.ts, 7, 3))
->then : Symbol(IPromise3.then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
+>then : Symbol(then, Decl(ipromise3.ts, 0, 24), Decl(ipromise3.ts, 1, 139), Decl(ipromise3.ts, 2, 128), Decl(ipromise3.ts, 3, 128))
 >x : Symbol(x, Decl(ipromise3.ts, 8, 46))
 
     return x;
