--- old.typeComparisonCaching.symbols
+++ new.typeComparisonCaching.symbols
@@= skipped -6, +6 lines =@@
 >A : Symbol(A, Decl(typeComparisonCaching.ts, 0, 0))
 
     p: C;
->p : Symbol(A.p, Decl(typeComparisonCaching.ts, 2, 13))
+>p : Symbol(p, Decl(typeComparisonCaching.ts, 2, 13))
 >C : Symbol(C, Decl(typeComparisonCaching.ts, 10, 1))
 
     s: string;
->s : Symbol(A.s, Decl(typeComparisonCaching.ts, 3, 9))
+>s : Symbol(s, Decl(typeComparisonCaching.ts, 3, 9))
 }
 
 interface B {
 >B : Symbol(B, Decl(typeComparisonCaching.ts, 5, 1))
 
     p: D;
->p : Symbol(B.p, Decl(typeComparisonCaching.ts, 7, 13))
+>p : Symbol(p, Decl(typeComparisonCaching.ts, 7, 13))
 >D : Symbol(D, Decl(typeComparisonCaching.ts, 14, 1))
 
     s: number;
->s : Symbol(B.s, Decl(typeComparisonCaching.ts, 8, 9))
+>s : Symbol(s, Decl(typeComparisonCaching.ts, 8, 9))
 }
 
 interface C {
 >C : Symbol(C, Decl(typeComparisonCaching.ts, 10, 1))
 
     q: A;
->q : Symbol(C.q, Decl(typeComparisonCaching.ts, 12, 13))
+>q : Symbol(q, Decl(typeComparisonCaching.ts, 12, 13))
 >A : Symbol(A, Decl(typeComparisonCaching.ts, 0, 0))
 }
 
@@= skipped -30, +30 lines =@@
 >D : Symbol(D, Decl(typeComparisonCaching.ts, 14, 1))
 
     q: B;
->q : Symbol(D.q, Decl(typeComparisonCaching.ts, 16, 13))
+>q : Symbol(q, Decl(typeComparisonCaching.ts, 16, 13))
 >B : Symbol(B, Decl(typeComparisonCaching.ts, 5, 1))
 }
 
