--- old.declarationEmitInlinedDistributiveConditional.js
+++ new.declarationEmitInlinedDistributiveConditional.js
@@= skipped -24, +24 lines =@@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.dropPrivateProps2 = exports.dropPrivateProps1 = void 0;
-var internal_1 = require("./internal");
+const internal_1 = require("./internal");
 const dropPrivateProps1 = (obj) => (0, internal_1.excludePrivateKeys1)(obj);
 exports.dropPrivateProps1 = dropPrivateProps1;
 const dropPrivateProps2 = (obj) => (0, internal_1.excludePrivateKeys2)(obj);
@@= skipped -8, +8 lines =@@
 //// [test.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var api_1 = require("./api");
+const api_1 = require("./api");
 const a = (0, api_1.dropPrivateProps1)({ foo: 42, _bar: 'secret' }); // type is {foo: number}
 //a._bar                                                // error: _bar does not exist           <===== as expected
 const b = (0, api_1.dropPrivateProps2)({ foo: 42, _bar: 'secret' }); // type is {foo: number, _bar: string}
@@= skipped -22, +22 lines =@@
 export declare const dropPrivateProps2: <Obj>(obj: Obj) => { [K in keyof Obj extends infer T ? T extends keyof Obj ? T extends `_${string}` ? never : T : never : never]: Obj[K]; };
 //// [test.d.ts]
 export {};
+//b._bar                                                // no error, type of b._bar is string   <===== NOT expected