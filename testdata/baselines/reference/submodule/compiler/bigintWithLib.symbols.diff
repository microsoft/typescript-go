--- old.bigintWithLib.symbols
+++ new.bigintWithLib.symbols
@@= skipped -14, +14 lines =@@
 
 bigintVal = BigInt.asIntN(8, 0xFFFFn);
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->BigInt.asIntN : Symbol(BigIntConstructor.asIntN, Decl(lib.es2020.bigint.d.ts, --, --))
+>BigInt.asIntN : Symbol(asIntN, Decl(lib.es2020.bigint.d.ts, --, --))
 >BigInt : Symbol(BigInt, Decl(lib.es2020.bigint.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
->asIntN : Symbol(BigIntConstructor.asIntN, Decl(lib.es2020.bigint.d.ts, --, --))
+>asIntN : Symbol(asIntN, Decl(lib.es2020.bigint.d.ts, --, --))
 
 bigintVal = BigInt.asUintN(8, 0xFFFFn);
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->BigInt.asUintN : Symbol(BigIntConstructor.asUintN, Decl(lib.es2020.bigint.d.ts, --, --))
+>BigInt.asUintN : Symbol(asUintN, Decl(lib.es2020.bigint.d.ts, --, --))
 >BigInt : Symbol(BigInt, Decl(lib.es2020.bigint.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
->asUintN : Symbol(BigIntConstructor.asUintN, Decl(lib.es2020.bigint.d.ts, --, --))
+>asUintN : Symbol(asUintN, Decl(lib.es2020.bigint.d.ts, --, --))
 
 bigintVal = bigintVal.valueOf();
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->bigintVal.valueOf : Symbol(BigInt.valueOf, Decl(lib.es2020.bigint.d.ts, --, --))
+>bigintVal.valueOf : Symbol(valueOf, Decl(lib.es2020.bigint.d.ts, --, --))
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->valueOf : Symbol(BigInt.valueOf, Decl(lib.es2020.bigint.d.ts, --, --))
+>valueOf : Symbol(valueOf, Decl(lib.es2020.bigint.d.ts, --, --))
 
 let stringVal: string = bigintVal.toString();
 >stringVal : Symbol(stringVal, Decl(bigintWithLib.ts, 7, 3))
->bigintVal.toString : Symbol(BigInt.toString, Decl(lib.es2020.bigint.d.ts, --, --))
+>bigintVal.toString : Symbol(toString, Decl(lib.es2020.bigint.d.ts, --, --))
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->toString : Symbol(BigInt.toString, Decl(lib.es2020.bigint.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es2020.bigint.d.ts, --, --))
 
 stringVal = bigintVal.toString(2);
 >stringVal : Symbol(stringVal, Decl(bigintWithLib.ts, 7, 3))
->bigintVal.toString : Symbol(BigInt.toString, Decl(lib.es2020.bigint.d.ts, --, --))
+>bigintVal.toString : Symbol(toString, Decl(lib.es2020.bigint.d.ts, --, --))
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->toString : Symbol(BigInt.toString, Decl(lib.es2020.bigint.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es2020.bigint.d.ts, --, --))
 
 stringVal = bigintVal.toLocaleString();
 >stringVal : Symbol(stringVal, Decl(bigintWithLib.ts, 7, 3))
->bigintVal.toLocaleString : Symbol(BigInt.toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
+>bigintVal.toLocaleString : Symbol(toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->toLocaleString : Symbol(BigInt.toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
+>toLocaleString : Symbol(toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
 
 stringVal = bigintVal.toLocaleString('de-DE');
 >stringVal : Symbol(stringVal, Decl(bigintWithLib.ts, 7, 3))
->bigintVal.toLocaleString : Symbol(BigInt.toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
+>bigintVal.toLocaleString : Symbol(toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->toLocaleString : Symbol(BigInt.toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
+>toLocaleString : Symbol(toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
 
 stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency' });
 >stringVal : Symbol(stringVal, Decl(bigintWithLib.ts, 7, 3))
->bigintVal.toLocaleString : Symbol(BigInt.toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
+>bigintVal.toLocaleString : Symbol(toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->toLocaleString : Symbol(BigInt.toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
+>toLocaleString : Symbol(toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
 >style : Symbol(style, Decl(bigintWithLib.ts, 11, 47))
 
 stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' })
 >stringVal : Symbol(stringVal, Decl(bigintWithLib.ts, 7, 3))
->bigintVal.toLocaleString : Symbol(BigInt.toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
+>bigintVal.toLocaleString : Symbol(toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->toLocaleString : Symbol(BigInt.toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
+>toLocaleString : Symbol(toLocaleString, Decl(lib.es2020.bigint.d.ts, --, --))
 >style : Symbol(style, Decl(bigintWithLib.ts, 12, 47))
 >currency : Symbol(currency, Decl(bigintWithLib.ts, 12, 66))
 
@@= skipped -90, +90 lines =@@
 
 let len: number = bigIntArray.length;
 >len : Symbol(len, Decl(bigintWithLib.ts, 22, 3))
->bigIntArray.length : Symbol(BigInt64Array.length, Decl(lib.es2020.bigint.d.ts, --, --))
+>bigIntArray.length : Symbol(length, Decl(lib.es2020.bigint.d.ts, --, --))
 >bigIntArray : Symbol(bigIntArray, Decl(bigintWithLib.ts, 15, 3))
->length : Symbol(BigInt64Array.length, Decl(lib.es2020.bigint.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es2020.bigint.d.ts, --, --))
 
 bigIntArray.length = 10; // should error
->bigIntArray.length : Symbol(BigInt64Array.length, Decl(lib.es2020.bigint.d.ts, --, --))
+>bigIntArray.length : Symbol(length, Decl(lib.es2020.bigint.d.ts, --, --))
 >bigIntArray : Symbol(bigIntArray, Decl(bigintWithLib.ts, 15, 3))
->length : Symbol(BigInt64Array.length, Decl(lib.es2020.bigint.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es2020.bigint.d.ts, --, --))
 
 let arrayBufferLike: ArrayBufferView = bigIntArray;
 >arrayBufferLike : Symbol(arrayBufferLike, Decl(bigintWithLib.ts, 24, 3))
@@= skipped -49, +49 lines =@@
 
 len = bigIntArray.length;
 >len : Symbol(len, Decl(bigintWithLib.ts, 22, 3))
->bigIntArray.length : Symbol(BigInt64Array.length, Decl(lib.es2020.bigint.d.ts, --, --))
+>bigIntArray.length : Symbol(length, Decl(lib.es2020.bigint.d.ts, --, --))
 >bigIntArray : Symbol(bigIntArray, Decl(bigintWithLib.ts, 15, 3))
->length : Symbol(BigInt64Array.length, Decl(lib.es2020.bigint.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es2020.bigint.d.ts, --, --))
 
 bigIntArray.length = 10; // should error
->bigIntArray.length : Symbol(BigInt64Array.length, Decl(lib.es2020.bigint.d.ts, --, --))
+>bigIntArray.length : Symbol(length, Decl(lib.es2020.bigint.d.ts, --, --))
 >bigIntArray : Symbol(bigIntArray, Decl(bigintWithLib.ts, 15, 3))
->length : Symbol(BigInt64Array.length, Decl(lib.es2020.bigint.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es2020.bigint.d.ts, --, --))
 
 arrayBufferLike = bigIntArray;
 >arrayBufferLike : Symbol(arrayBufferLike, Decl(bigintWithLib.ts, 24, 3))
@@= skipped -20, +20 lines =@@
 >ArrayBuffer : Symbol(ArrayBuffer, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 
 dataView.setBigInt64(1, -1n);
->dataView.setBigInt64 : Symbol(DataView.setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
+>dataView.setBigInt64 : Symbol(setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
 >dataView : Symbol(dataView, Decl(bigintWithLib.ts, 39, 5))
->setBigInt64 : Symbol(DataView.setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
+>setBigInt64 : Symbol(setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
 
 dataView.setBigInt64(1, -1n, true);
->dataView.setBigInt64 : Symbol(DataView.setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
+>dataView.setBigInt64 : Symbol(setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
 >dataView : Symbol(dataView, Decl(bigintWithLib.ts, 39, 5))
->setBigInt64 : Symbol(DataView.setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
+>setBigInt64 : Symbol(setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
 
 dataView.setBigInt64(1, -1); // should error
->dataView.setBigInt64 : Symbol(DataView.setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
+>dataView.setBigInt64 : Symbol(setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
 >dataView : Symbol(dataView, Decl(bigintWithLib.ts, 39, 5))
->setBigInt64 : Symbol(DataView.setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
+>setBigInt64 : Symbol(setBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
 
 dataView.setBigUint64(2, 123n);
->dataView.setBigUint64 : Symbol(DataView.setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
+>dataView.setBigUint64 : Symbol(setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
 >dataView : Symbol(dataView, Decl(bigintWithLib.ts, 39, 5))
->setBigUint64 : Symbol(DataView.setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
+>setBigUint64 : Symbol(setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
 
 dataView.setBigUint64(2, 123n, true);
->dataView.setBigUint64 : Symbol(DataView.setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
+>dataView.setBigUint64 : Symbol(setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
 >dataView : Symbol(dataView, Decl(bigintWithLib.ts, 39, 5))
->setBigUint64 : Symbol(DataView.setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
+>setBigUint64 : Symbol(setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
 
 dataView.setBigUint64(2, 123); // should error
->dataView.setBigUint64 : Symbol(DataView.setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
+>dataView.setBigUint64 : Symbol(setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
 >dataView : Symbol(dataView, Decl(bigintWithLib.ts, 39, 5))
->setBigUint64 : Symbol(DataView.setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
+>setBigUint64 : Symbol(setBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
 
 bigintVal = dataView.getBigInt64(1);
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->dataView.getBigInt64 : Symbol(DataView.getBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
+>dataView.getBigInt64 : Symbol(getBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
 >dataView : Symbol(dataView, Decl(bigintWithLib.ts, 39, 5))
->getBigInt64 : Symbol(DataView.getBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
+>getBigInt64 : Symbol(getBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
 
 bigintVal = dataView.getBigInt64(1, true);
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->dataView.getBigInt64 : Symbol(DataView.getBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
+>dataView.getBigInt64 : Symbol(getBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
 >dataView : Symbol(dataView, Decl(bigintWithLib.ts, 39, 5))
->getBigInt64 : Symbol(DataView.getBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
+>getBigInt64 : Symbol(getBigInt64, Decl(lib.es2020.bigint.d.ts, --, --))
 
 bigintVal = dataView.getBigUint64(2);
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->dataView.getBigUint64 : Symbol(DataView.getBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
+>dataView.getBigUint64 : Symbol(getBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
 >dataView : Symbol(dataView, Decl(bigintWithLib.ts, 39, 5))
->getBigUint64 : Symbol(DataView.getBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
+>getBigUint64 : Symbol(getBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
 
 bigintVal = dataView.getBigUint64(2, true);
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
->dataView.getBigUint64 : Symbol(DataView.getBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
+>dataView.getBigUint64 : Symbol(getBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
 >dataView : Symbol(dataView, Decl(bigintWithLib.ts, 39, 5))
->getBigUint64 : Symbol(DataView.getBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
+>getBigUint64 : Symbol(getBigUint64, Decl(lib.es2020.bigint.d.ts, --, --))
 
 // Test emitted declarations files
 const w = 12n; // should emit as const w = 12n
@@= skipped -68, +68 lines =@@
 
 // Test Intl methods with new parameter type
 new Intl.NumberFormat("fr").format(3000n);
->new Intl.NumberFormat("fr").format : Symbol(Intl.NumberFormat.format, Decl(lib.es5.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
->Intl.NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2018.intl.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
+>new Intl.NumberFormat("fr").format : Symbol(format, Decl(lib.es5.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
+>Intl.NumberFormat : Symbol(NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2018.intl.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
 >Intl : Symbol(Intl, Decl(lib.es5.d.ts, --, --), Decl(lib.es2016.intl.d.ts, --, --), Decl(lib.es2017.intl.d.ts, --, --), Decl(lib.es2018.intl.d.ts, --, --), Decl(lib.es2019.intl.d.ts, --, --) ... and 2 more)
->NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2018.intl.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
->format : Symbol(Intl.NumberFormat.format, Decl(lib.es5.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
+>NumberFormat : Symbol(NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2018.intl.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
+>format : Symbol(format, Decl(lib.es5.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
 
 new Intl.NumberFormat("fr").format(bigintVal);
->new Intl.NumberFormat("fr").format : Symbol(Intl.NumberFormat.format, Decl(lib.es5.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
->Intl.NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2018.intl.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
+>new Intl.NumberFormat("fr").format : Symbol(format, Decl(lib.es5.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
+>Intl.NumberFormat : Symbol(NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2018.intl.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
 >Intl : Symbol(Intl, Decl(lib.es5.d.ts, --, --), Decl(lib.es2016.intl.d.ts, --, --), Decl(lib.es2017.intl.d.ts, --, --), Decl(lib.es2018.intl.d.ts, --, --), Decl(lib.es2019.intl.d.ts, --, --) ... and 2 more)
->NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2018.intl.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
->format : Symbol(Intl.NumberFormat.format, Decl(lib.es5.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
+>NumberFormat : Symbol(NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2018.intl.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
+>format : Symbol(format, Decl(lib.es5.d.ts, --, --), Decl(lib.es2020.bigint.d.ts, --, --))
 >bigintVal : Symbol(bigintVal, Decl(bigintWithLib.ts, 1, 3))
 
