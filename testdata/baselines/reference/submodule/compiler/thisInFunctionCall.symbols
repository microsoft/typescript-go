//// [tests/cases/compiler/thisInFunctionCall.ts] ////

=== thisInFunctionCall.ts ===
class Test {
>Test : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))

  data: number[]
>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))

  constructor() {
    this.data = [1, 2, 3]
>this.data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
>this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
  }

  finderRaw() {
>finderRaw : Symbol(finderRaw, Decl(thisInFunctionCall.ts, 5, 3))

    this.data.find(function (d) {
>this.data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
>this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
>d : Symbol(d, Decl(thisInFunctionCall.ts, 8, 29))

      return d === this.data.length
>d : Symbol(d, Decl(thisInFunctionCall.ts, 8, 29))

    })
  }

  forEacherRaw() {
>forEacherRaw : Symbol(forEacherRaw, Decl(thisInFunctionCall.ts, 11, 3))

    this.data.forEach(function (d) {
>this.data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
>this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
>d : Symbol(d, Decl(thisInFunctionCall.ts, 14, 32))

      console.log(d === this.data.length)
>d : Symbol(d, Decl(thisInFunctionCall.ts, 14, 32))

    })
  }

  forEacher() {
>forEacher : Symbol(forEacher, Decl(thisInFunctionCall.ts, 17, 3))

    this.data.forEach(
>this.data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
>this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))

    /** @this {Test} */
    function (d) {
>d : Symbol(d, Decl(thisInFunctionCall.ts, 22, 14))

      console.log(d === this.data.length)
>d : Symbol(d, Decl(thisInFunctionCall.ts, 22, 14))

    }, this)
>this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
  }

  finder() {
>finder : Symbol(finder, Decl(thisInFunctionCall.ts, 25, 3))

    this.data.find(
>this.data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
>this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))

    /** @this {Test} */
    function (d) {
>d : Symbol(d, Decl(thisInFunctionCall.ts, 30, 14))

      return d === this.data.length
>d : Symbol(d, Decl(thisInFunctionCall.ts, 30, 14))

    }, this)
>this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
  }
}

