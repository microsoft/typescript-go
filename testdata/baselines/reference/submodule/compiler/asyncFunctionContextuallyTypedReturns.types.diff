--- old.asyncFunctionContextuallyTypedReturns.types
+++ new.asyncFunctionContextuallyTypedReturns.types
@@= skipped -1, +1 lines =@@

 === asyncFunctionContextuallyTypedReturns.ts ===
 declare function f(cb: (v: boolean) => [0] | PromiseLike<[0]>): void;
->f : (cb: (v: boolean) => [0] | PromiseLike<[0]>) => void
->cb : (v: boolean) => [0] | PromiseLike<[0]>
+>f : (cb: (v: boolean) => PromiseLike<[0]> | [0]) => void
+>cb : (v: boolean) => PromiseLike<[0]> | [0]
 >v : boolean

 f(v => v ? [0] : Promise.reject());
 >f(v => v ? [0] : Promise.reject()) : void
->f : (cb: (v: boolean) => [0] | PromiseLike<[0]>) => void
->v => v ? [0] : Promise.reject() : (v: boolean) => [0] | Promise<[0]>
+>f : (cb: (v: boolean) => PromiseLike<[0]> | [0]) => void
+>v => v ? [0] : Promise.reject() : (v: boolean) => Promise<[0]> | [0]
 >v : boolean
->v ? [0] : Promise.reject() : [0] | Promise<[0]>
+>v ? [0] : Promise.reject() : Promise<[0]> | [0]
 >v : boolean
 >[0] : [0]
 >0 : 0
@@= skipped -20, +20 lines =@@

 f(async v => v ? [0] : Promise.reject());
 >f(async v => v ? [0] : Promise.reject()) : void
->f : (cb: (v: boolean) => [0] | PromiseLike<[0]>) => void
+>f : (cb: (v: boolean) => PromiseLike<[0]> | [0]) => void
 >async v => v ? [0] : Promise.reject() : (v: boolean) => Promise<[0]>
 >v : boolean
->v ? [0] : Promise.reject() : [0] | Promise<[0]>
+>v ? [0] : Promise.reject() : Promise<[0]> | [0]
 >v : boolean
 >[0] : [0]
 >0 : 0
@@= skipped -55, +55 lines =@@
 h(v => v ? (abc) => { } : Promise.reject());
 >h(v => v ? (abc) => { } : Promise.reject()) : void
 >h : (cb: (v: boolean) => MyCallback | PromiseLike<MyCallback>) => void
->v => v ? (abc) => { } : Promise.reject() : (v: boolean) => ((abc: string) => void) | Promise<MyCallback>
+>v => v ? (abc) => { } : Promise.reject() : (v: boolean) => Promise<MyCallback> | ((abc: string) => void)
 >v : boolean
->v ? (abc) => { } : Promise.reject() : ((abc: string) => void) | Promise<MyCallback>
+>v ? (abc) => { } : Promise.reject() : Promise<MyCallback> | ((abc: string) => void)
 >v : boolean
 >(abc) => { } : (abc: string) => void
 >abc : string
@@= skipped -27, +27 lines =@@

 // repro from #29196
 const increment: (
->increment : (num: number, str: string) => Promise<((s: string) => any) | string> | string
+>increment : (num: number, str: string) => string | Promise<string | ((s: string) => any)>

   num: number,
 >num : number
@@= skipped -26, +26 lines =@@
 }

 const increment2: (
->increment2 : (num: number, str: string) => Promise<((s: string) => any) | string>
+>increment2 : (num: number, str: string) => Promise<string | ((s: string) => any)>

   num: number,
 >num : number