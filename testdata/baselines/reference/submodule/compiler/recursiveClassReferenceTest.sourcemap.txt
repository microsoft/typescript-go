===================================================================
JsFile: recursiveClassReferenceTest.js
mapUrl: recursiveClassReferenceTest.js.map
sourceRoot: 
sources: recursiveClassReferenceTest.ts
===================================================================
-------------------------------------------------------------------
emittedFile:recursiveClassReferenceTest.js
sourceFile:recursiveClassReferenceTest.ts
-------------------------------------------------------------------
>>>// Scenario 1: Test reqursive function call with "this" parameter
1 >
2 >^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                                 ^^^^^^^^^^->
1 >
2 >// Scenario 1: Test reqursive function call with "this" parameter
1 >Emitted(1, 1) Source(1, 1) + SourceIndex(0)
2 >Emitted(1, 66) Source(1, 66) + SourceIndex(0)
---
>>>// Scenario 2: Test recursive function call with cast and "this" parameter
1->
2 >^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1->
  >
2 >// Scenario 2: Test recursive function call with cast and "this" parameter
1->Emitted(2, 1) Source(2, 1) + SourceIndex(0)
2 >Emitted(2, 75) Source(2, 75) + SourceIndex(0)
---
>>>var Sample;
1 >
2 >^^^^
3 >    ^^^^^^
4 >          ^^^^^^^^^^^->
1 >
  >
  >
  >
  >declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >
2 >module 
3 >    Sample.Actions.Thing.Find {
  >    	export class StartFindAction implements Sample.Thing.IAction {
  >    		
  >    		public getId() { return "yo"; }
  >    		
  >    		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >    
  >    			return true;
  >    		}
  >    	}
  >    }
1 >Emitted(3, 1) Source(32, 1) + SourceIndex(0)
2 >Emitted(3, 5) Source(32, 8) + SourceIndex(0)
3 >Emitted(3, 11) Source(42, 2) + SourceIndex(0)
---
>>>(function (Sample) {
1->
2 >^^^^^^^^^^^
3 >           ^^^^^^
4 >                 ^^
1->
2 >module 
3 >           Sample
4 >                 
1->Emitted(4, 1) Source(32, 1) + SourceIndex(0)
2 >Emitted(4, 12) Source(32, 8) + SourceIndex(0)
3 >Emitted(4, 18) Source(32, 14) + SourceIndex(0)
4 >Emitted(4, 20) Source(6, 1) + SourceIndex(0)
---
>>>    let Actions;
1 >^^^^
2 >    ^^^^
3 >        ^^^^^^^
4 >               ^^^^^^^^^^^->
1 >declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >module Sample.
2 >    
3 >        Actions.Thing.Find {
  >        	export class StartFindAction implements Sample.Thing.IAction {
  >        		
  >        		public getId() { return "yo"; }
  >        		
  >        		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >        
  >        			return true;
  >        		}
  >        	}
  >        }
1 >Emitted(5, 5) Source(32, 15) + SourceIndex(0)
2 >Emitted(5, 9) Source(32, 15) + SourceIndex(0)
3 >Emitted(5, 16) Source(42, 2) + SourceIndex(0)
---
>>>    (function (Actions) {
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^^^
4 >                      ^^
1->
2 >    
3 >               Actions
4 >                      
1->Emitted(6, 5) Source(32, 15) + SourceIndex(0)
2 >Emitted(6, 16) Source(32, 15) + SourceIndex(0)
3 >Emitted(6, 23) Source(32, 22) + SourceIndex(0)
4 >Emitted(6, 25) Source(6, 1) + SourceIndex(0)
---
>>>        let Thing;
1 >^^^^^^^^
2 >        ^^^^
3 >            ^^^^^
4 >                 ^^^^^^^^^^^^^->
1 >declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >module Sample.Actions.
2 >        
3 >            Thing.Find {
  >            	export class StartFindAction implements Sample.Thing.IAction {
  >            		
  >            		public getId() { return "yo"; }
  >            		
  >            		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >            
  >            			return true;
  >            		}
  >            	}
  >            }
1 >Emitted(7, 9) Source(32, 23) + SourceIndex(0)
2 >Emitted(7, 13) Source(32, 23) + SourceIndex(0)
3 >Emitted(7, 18) Source(42, 2) + SourceIndex(0)
---
>>>        (function (Thing_1) {
1->^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^^
4 >                          ^^
1->
2 >        
3 >                   Thing
4 >                          
1->Emitted(8, 9) Source(32, 23) + SourceIndex(0)
2 >Emitted(8, 20) Source(32, 23) + SourceIndex(0)
3 >Emitted(8, 27) Source(32, 28) + SourceIndex(0)
4 >Emitted(8, 29) Source(6, 1) + SourceIndex(0)
---
>>>            let Find;
1 >^^^^^^^^^^^^
2 >            ^^^^
3 >                ^^^^
4 >                    ^^^^^^^^^^^->
1 >declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >module Sample.Actions.Thing.
2 >            
3 >                Find {
  >                	export class StartFindAction implements Sample.Thing.IAction {
  >                		
  >                		public getId() { return "yo"; }
  >                		
  >                		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                
  >                			return true;
  >                		}
  >                	}
  >                }
1 >Emitted(9, 13) Source(32, 29) + SourceIndex(0)
2 >Emitted(9, 17) Source(32, 29) + SourceIndex(0)
3 >Emitted(9, 21) Source(42, 2) + SourceIndex(0)
---
>>>            (function (Find) {
1->^^^^^^^^^^^^
2 >            ^^^^^^^^^^^
3 >                       ^^^^
4 >                           ^^
5 >                             ^^^^^^^^^^^->
1->
2 >            
3 >                       Find
4 >                            
1->Emitted(10, 13) Source(32, 29) + SourceIndex(0)
2 >Emitted(10, 24) Source(32, 29) + SourceIndex(0)
3 >Emitted(10, 28) Source(32, 33) + SourceIndex(0)
4 >Emitted(10, 30) Source(32, 34) + SourceIndex(0)
---
>>>                class StartFindAction {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^
3 >                      ^^^^^^^^^^^^^^^
4 >                                     ^^^^^^^^->
1->{
  >	
2 >                export class 
3 >                      StartFindAction
1->Emitted(11, 17) Source(33, 2) + SourceIndex(0)
2 >Emitted(11, 23) Source(33, 15) + SourceIndex(0)
3 >Emitted(11, 38) Source(33, 30) + SourceIndex(0)
---
>>>                    getId() { return "yo"; }
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^
3 >                         ^^^
4 >                            ^^
5 >                              ^^^^^^^
6 >                                     ^^^^
7 >                                         ^
8 >                                          ^
9 >                                           ^
1-> implements Sample.Thing.IAction {
  >		
  >		public 
2 >                    getId
3 >                         () 
4 >                            { 
5 >                              return 
6 >                                     "yo"
7 >                                         ;
8 >                                          
9 >                                            }
1->Emitted(12, 21) Source(35, 10) + SourceIndex(0)
2 >Emitted(12, 26) Source(35, 15) + SourceIndex(0)
3 >Emitted(12, 29) Source(35, 18) + SourceIndex(0)
4 >Emitted(12, 31) Source(35, 20) + SourceIndex(0)
5 >Emitted(12, 38) Source(35, 27) + SourceIndex(0)
6 >Emitted(12, 42) Source(35, 31) + SourceIndex(0)
7 >Emitted(12, 43) Source(35, 32) + SourceIndex(0)
8 >Emitted(12, 44) Source(35, 32) + SourceIndex(0)
9 >Emitted(12, 45) Source(35, 34) + SourceIndex(0)
---
>>>                    run(Thing) {
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^
3 >                       ^
4 >                        ^^^^^
5 >                             ^^
6 >                               ^^^^^^->
1 >
  >		
  >		public 
2 >                    run
3 >                       (
4 >                        Thing:Sample.Thing.ICodeThing
5 >                             ):boolean 
1 >Emitted(13, 21) Source(37, 10) + SourceIndex(0)
2 >Emitted(13, 24) Source(37, 13) + SourceIndex(0)
3 >Emitted(13, 25) Source(37, 14) + SourceIndex(0)
4 >Emitted(13, 30) Source(37, 43) + SourceIndex(0)
5 >Emitted(13, 32) Source(37, 53) + SourceIndex(0)
---
>>>                        return true;
1->^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^
1->{
  >
  >			
2 >                        return 
3 >                               true
4 >                                   ;
1->Emitted(14, 25) Source(39, 4) + SourceIndex(0)
2 >Emitted(14, 32) Source(39, 11) + SourceIndex(0)
3 >Emitted(14, 36) Source(39, 15) + SourceIndex(0)
4 >Emitted(14, 37) Source(39, 16) + SourceIndex(0)
---
>>>                    }
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
1 >
2 >                    
  >                    		}
1 >Emitted(15, 21) Source(39, 16) + SourceIndex(0)
2 >Emitted(15, 22) Source(40, 4) + SourceIndex(0)
---
>>>                }
1 >^^^^^^^^^^^^^^^^^
2 >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >	}
1 >Emitted(16, 18) Source(41, 3) + SourceIndex(0)
---
>>>                Find.StartFindAction = StartFindAction;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^
3 >                     ^^^^^^^^^^^^^^^
4 >                                    ^^^^^^^^^^^^^^^^^^
5 >                                                      ^
6 >                                                       ^^^^^->
1->
2 >                
3 >                     StartFindAction
4 >                                     implements Sample.Thing.IAction {
  >                                    		
  >                                    		public getId() { return "yo"; }
  >                                    		
  >                                    		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                    
  >                                    			return true;
  >                                    		}
  >                                    	}
5 >                                                      
1->Emitted(17, 17) Source(33, 15) + SourceIndex(0)
2 >Emitted(17, 22) Source(33, 15) + SourceIndex(0)
3 >Emitted(17, 37) Source(33, 30) + SourceIndex(0)
4 >Emitted(17, 55) Source(41, 3) + SourceIndex(0)
5 >Emitted(17, 56) Source(41, 3) + SourceIndex(0)
---
>>>            })(Find = Thing_1.Find || (Thing_1.Find = {}));
1->^^^^^^^^^^^^
2 >            ^
3 >             ^^
4 >               ^^^^
5 >                   ^^^
6 >                      ^^^^^^^^
7 >                              ^^^^
8 >                                  ^^^^^
9 >                                       ^^^^^^^^
10>                                               ^^^^
11>                                                   ^^^^^^^^
1->
2 >            
  >            }
3 >             
4 >               Find
5 >                   
6 >                      
7 >                              Find
8 >                                  
9 >                                       
10>                                               Find
11>                                                    {
  >                                                   	export class StartFindAction implements Sample.Thing.IAction {
  >                                                   		
  >                                                   		public getId() { return "yo"; }
  >                                                   		
  >                                                   		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                                   
  >                                                   			return true;
  >                                                   		}
  >                                                   	}
  >                                                   }
1->Emitted(18, 13) Source(41, 3) + SourceIndex(0)
2 >Emitted(18, 14) Source(42, 2) + SourceIndex(0)
3 >Emitted(18, 16) Source(32, 29) + SourceIndex(0)
4 >Emitted(18, 20) Source(32, 33) + SourceIndex(0)
5 >Emitted(18, 23) Source(32, 29) + SourceIndex(0)
6 >Emitted(18, 31) Source(32, 29) + SourceIndex(0)
7 >Emitted(18, 35) Source(32, 33) + SourceIndex(0)
8 >Emitted(18, 40) Source(32, 29) + SourceIndex(0)
9 >Emitted(18, 48) Source(32, 29) + SourceIndex(0)
10>Emitted(18, 52) Source(32, 33) + SourceIndex(0)
11>Emitted(18, 60) Source(42, 2) + SourceIndex(0)
---
>>>        })(Thing = Actions.Thing || (Actions.Thing = {}));
1 >^^^^^^^^
2 >        ^
3 >         
4 >         ^^
5 >           ^^^^^
6 >                ^^^
7 >                   ^^^^^^^^
8 >                           ^^^^^
9 >                                ^^^^^
10>                                     ^^^^^^^^
11>                                             ^^^^^
12>                                                  ^^^^^^^^
13>                                                          ^->
1 >
2 >        
  >        
3 >         
4 >         // Scenario 1: Test reqursive function call with "this" parameter
  >         // Scenario 2: Test recursive function call with cast and "this" parameter
  >         
  >         
  >         
  >         declare module Sample.Thing {
  >         
  >         	export interface IWidget {
  >         		getDomNode(): any;
  >         		destroy();
  >         		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >         	}
  >         
  >         	export interface ICodeThing {
  >           
  >           		getDomNode(): Element;
  >         		
  >         		addWidget(widgetId:string, widget:IWidget);
  >         
  >         		
  >         		focus(); 
  >         		
  >         		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >         	}
  >         
  >         	export interface IAction {
  >         		run(Thing:ICodeThing):boolean;
  >         		getId():string;
  >         	}	
  >         }
  >         
  >         module Sample.Actions.
5 >           Thing
6 >                
7 >                   
8 >                           Thing
9 >                                
10>                                     
11>                                             Thing
12>                                                  .Find {
  >                                                  	export class StartFindAction implements Sample.Thing.IAction {
  >                                                  		
  >                                                  		public getId() { return "yo"; }
  >                                                  		
  >                                                  		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                                  
  >                                                  			return true;
  >                                                  		}
  >                                                  	}
  >                                                  }
1 >Emitted(19, 9) Source(41, 3) + SourceIndex(0)
2 >Emitted(19, 10) Source(42, 1) + SourceIndex(0)
3 >Emitted(19, 10) Source(1, 1) + SourceIndex(0)
4 >Emitted(19, 12) Source(32, 23) + SourceIndex(0)
5 >Emitted(19, 17) Source(32, 28) + SourceIndex(0)
6 >Emitted(19, 20) Source(32, 23) + SourceIndex(0)
7 >Emitted(19, 28) Source(32, 23) + SourceIndex(0)
8 >Emitted(19, 33) Source(32, 28) + SourceIndex(0)
9 >Emitted(19, 38) Source(32, 23) + SourceIndex(0)
10>Emitted(19, 46) Source(32, 23) + SourceIndex(0)
11>Emitted(19, 51) Source(32, 28) + SourceIndex(0)
12>Emitted(19, 59) Source(42, 2) + SourceIndex(0)
---
>>>    })(Actions = Sample.Actions || (Sample.Actions = {}));
1->^^^^
2 >    ^
3 >     
4 >     ^^
5 >       ^^^^^^^
6 >              ^^^
7 >                 ^^^^^^^
8 >                        ^^^^^^^
9 >                               ^^^^^
10>                                    ^^^^^^^
11>                                           ^^^^^^^
12>                                                  ^^^^^^^^
1->
2 >    
  >    
3 >     
4 >     // Scenario 1: Test reqursive function call with "this" parameter
  >     // Scenario 2: Test recursive function call with cast and "this" parameter
  >     
  >     
  >     
  >     declare module Sample.Thing {
  >     
  >     	export interface IWidget {
  >     		getDomNode(): any;
  >     		destroy();
  >     		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >     	}
  >     
  >     	export interface ICodeThing {
  >       
  >       		getDomNode(): Element;
  >     		
  >     		addWidget(widgetId:string, widget:IWidget);
  >     
  >     		
  >     		focus(); 
  >     		
  >     		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >     	}
  >     
  >     	export interface IAction {
  >     		run(Thing:ICodeThing):boolean;
  >     		getId():string;
  >     	}	
  >     }
  >     
  >     module Sample.
5 >       Actions
6 >              
7 >                 
8 >                        Actions
9 >                               
10>                                    
11>                                           Actions
12>                                                  .Thing.Find {
  >                                                  	export class StartFindAction implements Sample.Thing.IAction {
  >                                                  		
  >                                                  		public getId() { return "yo"; }
  >                                                  		
  >                                                  		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                                  
  >                                                  			return true;
  >                                                  		}
  >                                                  	}
  >                                                  }
1->Emitted(20, 5) Source(41, 3) + SourceIndex(0)
2 >Emitted(20, 6) Source(42, 1) + SourceIndex(0)
3 >Emitted(20, 6) Source(1, 1) + SourceIndex(0)
4 >Emitted(20, 8) Source(32, 15) + SourceIndex(0)
5 >Emitted(20, 15) Source(32, 22) + SourceIndex(0)
6 >Emitted(20, 18) Source(32, 15) + SourceIndex(0)
7 >Emitted(20, 25) Source(32, 15) + SourceIndex(0)
8 >Emitted(20, 32) Source(32, 22) + SourceIndex(0)
9 >Emitted(20, 37) Source(32, 15) + SourceIndex(0)
10>Emitted(20, 44) Source(32, 15) + SourceIndex(0)
11>Emitted(20, 51) Source(32, 22) + SourceIndex(0)
12>Emitted(20, 59) Source(42, 2) + SourceIndex(0)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > 
4 > ^^
5 >   ^^^^^^
6 >         ^^^^^
7 >              ^^^^^^
8 >                    ^^^^^^^^
1 >
2 >
  >
3 > 
4 > // Scenario 1: Test reqursive function call with "this" parameter
  > // Scenario 2: Test recursive function call with cast and "this" parameter
  > 
  > 
  > 
  > declare module Sample.Thing {
  > 
  > 	export interface IWidget {
  > 		getDomNode(): any;
  > 		destroy();
  > 		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  > 	}
  > 
  > 	export interface ICodeThing {
  >   
  >   		getDomNode(): Element;
  > 		
  > 		addWidget(widgetId:string, widget:IWidget);
  > 
  > 		
  > 		focus(); 
  > 		
  > 		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  > 	}
  > 
  > 	export interface IAction {
  > 		run(Thing:ICodeThing):boolean;
  > 		getId():string;
  > 	}	
  > }
  > 
  > module 
5 >   Sample
6 >         
7 >              Sample
8 >                    .Actions.Thing.Find {
  >                    	export class StartFindAction implements Sample.Thing.IAction {
  >                    		
  >                    		public getId() { return "yo"; }
  >                    		
  >                    		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                    
  >                    			return true;
  >                    		}
  >                    	}
  >                    }
1 >Emitted(21, 1) Source(41, 3) + SourceIndex(0)
2 >Emitted(21, 2) Source(42, 1) + SourceIndex(0)
3 >Emitted(21, 2) Source(1, 1) + SourceIndex(0)
4 >Emitted(21, 4) Source(32, 8) + SourceIndex(0)
5 >Emitted(21, 10) Source(32, 14) + SourceIndex(0)
6 >Emitted(21, 15) Source(32, 8) + SourceIndex(0)
7 >Emitted(21, 21) Source(32, 14) + SourceIndex(0)
8 >Emitted(21, 29) Source(42, 2) + SourceIndex(0)
---
>>>(function (Sample) {
1 >
2 >^^^^^^^^^^^
3 >           ^^^^^^
4 >                 ^^
1 >
  >
  >
2 >module 
3 >           Sample
4 >                 
1 >Emitted(22, 1) Source(44, 1) + SourceIndex(0)
2 >Emitted(22, 12) Source(44, 8) + SourceIndex(0)
3 >Emitted(22, 18) Source(44, 14) + SourceIndex(0)
4 >Emitted(22, 20) Source(6, 1) + SourceIndex(0)
---
>>>    let Thing;
1 >^^^^
2 >    ^^^^
3 >        ^^^^^
4 >             ^^^^^^^^^^^->
1 >declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >module Sample.Actions.Thing.Find {
  >	export class StartFindAction implements Sample.Thing.IAction {
  >		
  >		public getId() { return "yo"; }
  >		
  >		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >
  >			return true;
  >		}
  >	}
  >}
  >
  >module Sample.
2 >    
3 >        Thing.Widgets {
  >        	export class FindWidget implements Sample.Thing.IWidget {
  >        
  >        		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >        			
  >        		private domNode:any = null;
  >        		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >        		    // scenario 1
  >        		    codeThing.addWidget("addWidget", this);
  >        		}
  >        		
  >        		public getDomNode() {
  >        			return domNode;
  >        		}
  >        		
  >        		public destroy() {
  >        
  >        		}
  >        
  >        	}
  >        }
1 >Emitted(23, 5) Source(44, 15) + SourceIndex(0)
2 >Emitted(23, 9) Source(44, 15) + SourceIndex(0)
3 >Emitted(23, 14) Source(64, 2) + SourceIndex(0)
---
>>>    (function (Thing) {
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^
4 >                    ^^
1->
2 >    
3 >               Thing
4 >                    
1->Emitted(24, 5) Source(44, 15) + SourceIndex(0)
2 >Emitted(24, 16) Source(44, 15) + SourceIndex(0)
3 >Emitted(24, 21) Source(44, 20) + SourceIndex(0)
4 >Emitted(24, 23) Source(6, 1) + SourceIndex(0)
---
>>>        let Widgets;
1 >^^^^^^^^
2 >        ^^^^
3 >            ^^^^^^^
4 >                   ^^^^^^^^^^^->
1 >declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >module Sample.Actions.Thing.Find {
  >	export class StartFindAction implements Sample.Thing.IAction {
  >		
  >		public getId() { return "yo"; }
  >		
  >		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >
  >			return true;
  >		}
  >	}
  >}
  >
  >module Sample.Thing.
2 >        
3 >            Widgets {
  >            	export class FindWidget implements Sample.Thing.IWidget {
  >            
  >            		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >            			
  >            		private domNode:any = null;
  >            		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >            		    // scenario 1
  >            		    codeThing.addWidget("addWidget", this);
  >            		}
  >            		
  >            		public getDomNode() {
  >            			return domNode;
  >            		}
  >            		
  >            		public destroy() {
  >            
  >            		}
  >            
  >            	}
  >            }
1 >Emitted(25, 9) Source(44, 21) + SourceIndex(0)
2 >Emitted(25, 13) Source(44, 21) + SourceIndex(0)
3 >Emitted(25, 20) Source(64, 2) + SourceIndex(0)
---
>>>        (function (Widgets) {
1->^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^^
4 >                          ^^
5 >                            ^^^->
1->
2 >        
3 >                   Widgets
4 >                           
1->Emitted(26, 9) Source(44, 21) + SourceIndex(0)
2 >Emitted(26, 20) Source(44, 21) + SourceIndex(0)
3 >Emitted(26, 27) Source(44, 28) + SourceIndex(0)
4 >Emitted(26, 29) Source(44, 29) + SourceIndex(0)
---
>>>            class FindWidget {
1->^^^^^^^^^^^^
2 >            ^^^^^^
3 >                  ^^^^^^^^^^
1->{
  >	
2 >            export class 
3 >                  FindWidget
1->Emitted(27, 13) Source(45, 2) + SourceIndex(0)
2 >Emitted(27, 19) Source(45, 15) + SourceIndex(0)
3 >Emitted(27, 29) Source(45, 25) + SourceIndex(0)
---
>>>                codeThing;
1 >^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^
3 >                         ^^^^^^^^^^^^^^^^^->
1 > implements Sample.Thing.IWidget {
  >
  >		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >			
  >		private domNode:any = null;
  >		constructor(private 
2 >                codeThing
1 >Emitted(28, 17) Source(50, 23) + SourceIndex(0)
2 >Emitted(28, 26) Source(50, 32) + SourceIndex(0)
---
>>>                gar(runner) { if (true) {
1->^^^^^^^^^^^^^^^^
2 >                ^^^
3 >                   ^
4 >                    ^^^^^^
5 >                          ^^
6 >                            ^^
7 >                              ^^^^
8 >                                  ^^^^
9 >                                      ^^
10>                                        ^
1->
2 >                gar
3 >                   (
4 >                    runner:(widget:Sample.Thing.IWidget)=>any
5 >                          ) 
6 >                            { 
7 >                              if (
8 >                                  true
9 >                                      ) 
10>                                        {
1->Emitted(29, 17) Source(47, 10) + SourceIndex(0)
2 >Emitted(29, 20) Source(47, 13) + SourceIndex(0)
3 >Emitted(29, 21) Source(47, 14) + SourceIndex(0)
4 >Emitted(29, 27) Source(47, 55) + SourceIndex(0)
5 >Emitted(29, 29) Source(47, 57) + SourceIndex(0)
6 >Emitted(29, 31) Source(47, 59) + SourceIndex(0)
7 >Emitted(29, 35) Source(47, 63) + SourceIndex(0)
8 >Emitted(29, 39) Source(47, 67) + SourceIndex(0)
9 >Emitted(29, 41) Source(47, 69) + SourceIndex(0)
10>Emitted(29, 42) Source(47, 70) + SourceIndex(0)
---
>>>                    return runner(this);
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^
3 >                           ^^^^^^
4 >                                 ^
5 >                                  ^^^^
6 >                                      ^
7 >                                       ^
1 >
2 >                    return 
3 >                           runner
4 >                                 (
5 >                                  this
6 >                                      )
7 >                                       ;
1 >Emitted(30, 21) Source(47, 70) + SourceIndex(0)
2 >Emitted(30, 28) Source(47, 77) + SourceIndex(0)
3 >Emitted(30, 34) Source(47, 83) + SourceIndex(0)
4 >Emitted(30, 35) Source(47, 84) + SourceIndex(0)
5 >Emitted(30, 39) Source(47, 88) + SourceIndex(0)
6 >Emitted(30, 40) Source(47, 89) + SourceIndex(0)
7 >Emitted(30, 41) Source(47, 90) + SourceIndex(0)
---
>>>                } }
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^
4 >                  ^
5 >                   ^^^^^^^^^^^^^->
1 >
2 >                }
3 >                 
4 >                  }
1 >Emitted(31, 17) Source(47, 90) + SourceIndex(0)
2 >Emitted(31, 18) Source(47, 91) + SourceIndex(0)
3 >Emitted(31, 19) Source(47, 91) + SourceIndex(0)
4 >Emitted(31, 20) Source(47, 92) + SourceIndex(0)
---
>>>                domNode = null;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^
3 >                       ^^^
4 >                          ^^^^
5 >                              ^
6 >                               ^^^^^^^^^^->
1->
  >			
  >		private 
2 >                domNode
3 >                       :any = 
4 >                          null
5 >                              ;
1->Emitted(32, 17) Source(49, 11) + SourceIndex(0)
2 >Emitted(32, 24) Source(49, 18) + SourceIndex(0)
3 >Emitted(32, 27) Source(49, 25) + SourceIndex(0)
4 >Emitted(32, 31) Source(49, 29) + SourceIndex(0)
5 >Emitted(32, 32) Source(49, 30) + SourceIndex(0)
---
>>>                constructor(codeThing) {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^
3 >                            ^^^^^^^^^
4 >                                     ^^
5 >                                       ^^^^^^^^^->
1->
  >		
2 >                constructor(private 
3 >                            codeThing: Sample.Thing.ICodeThing
4 >                                     ) 
1->Emitted(33, 17) Source(50, 3) + SourceIndex(0)
2 >Emitted(33, 29) Source(50, 23) + SourceIndex(0)
3 >Emitted(33, 38) Source(50, 57) + SourceIndex(0)
4 >Emitted(33, 40) Source(50, 59) + SourceIndex(0)
---
>>>                    this.codeThing = codeThing;
1->^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 >                                     ^^^^^^^^^
1->
2 >                                     codeThing
1->Emitted(34, 38) Source(50, 23) + SourceIndex(0)
2 >Emitted(34, 47) Source(50, 32) + SourceIndex(0)
---
>>>                    // scenario 1
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^
3 >                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >: Sample.Thing.ICodeThing) {
  >		    
2 >                    // scenario 1
1 >Emitted(35, 21) Source(51, 7) + SourceIndex(0)
2 >Emitted(35, 34) Source(51, 20) + SourceIndex(0)
---
>>>                    codeThing.addWidget("addWidget", this);
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^
3 >                             ^
4 >                              ^^^^^^^^^
5 >                                       ^
6 >                                        ^^^^^^^^^^^
7 >                                                   ^^
8 >                                                     ^^^^
9 >                                                         ^
10>                                                          ^
1->
  >		    
2 >                    codeThing
3 >                             .
4 >                              addWidget
5 >                                       (
6 >                                        "addWidget"
7 >                                                   , 
8 >                                                     this
9 >                                                         )
10>                                                          ;
1->Emitted(36, 21) Source(52, 7) + SourceIndex(0)
2 >Emitted(36, 30) Source(52, 16) + SourceIndex(0)
3 >Emitted(36, 31) Source(52, 17) + SourceIndex(0)
4 >Emitted(36, 40) Source(52, 26) + SourceIndex(0)
5 >Emitted(36, 41) Source(52, 27) + SourceIndex(0)
6 >Emitted(36, 52) Source(52, 38) + SourceIndex(0)
7 >Emitted(36, 54) Source(52, 40) + SourceIndex(0)
8 >Emitted(36, 58) Source(52, 44) + SourceIndex(0)
9 >Emitted(36, 59) Source(52, 45) + SourceIndex(0)
10>Emitted(36, 60) Source(52, 46) + SourceIndex(0)
---
>>>                }
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^^^^^^^^^^^^^^->
1 >
2 >                
  >                		}
1 >Emitted(37, 17) Source(52, 46) + SourceIndex(0)
2 >Emitted(37, 18) Source(53, 4) + SourceIndex(0)
---
>>>                getDomNode() {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^
3 >                          ^^^
4 >                             ^^^^^^^->
1->
  >		
  >		public 
2 >                getDomNode
3 >                          () 
1->Emitted(38, 17) Source(55, 10) + SourceIndex(0)
2 >Emitted(38, 27) Source(55, 20) + SourceIndex(0)
3 >Emitted(38, 30) Source(55, 23) + SourceIndex(0)
---
>>>                    return domNode;
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^
3 >                           ^^^^^^^
4 >                                  ^
1->{
  >			
2 >                    return 
3 >                           domNode
4 >                                  ;
1->Emitted(39, 21) Source(56, 4) + SourceIndex(0)
2 >Emitted(39, 28) Source(56, 11) + SourceIndex(0)
3 >Emitted(39, 35) Source(56, 18) + SourceIndex(0)
4 >Emitted(39, 36) Source(56, 19) + SourceIndex(0)
---
>>>                }
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^^^^^^^^^^^->
1 >
2 >                
  >                		}
1 >Emitted(40, 17) Source(56, 19) + SourceIndex(0)
2 >Emitted(40, 18) Source(57, 4) + SourceIndex(0)
---
>>>                destroy() {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^
3 >                       ^^^
1->
  >		
  >		public 
2 >                destroy
3 >                       () 
1->Emitted(41, 17) Source(59, 10) + SourceIndex(0)
2 >Emitted(41, 24) Source(59, 17) + SourceIndex(0)
3 >Emitted(41, 27) Source(59, 20) + SourceIndex(0)
---
>>>                }
1 >^^^^^^^^^^^^^^^^
2 >                ^
1 >{
2 >                
  >                
  >                		}
1 >Emitted(42, 17) Source(59, 21) + SourceIndex(0)
2 >Emitted(42, 18) Source(61, 4) + SourceIndex(0)
---
>>>            }
1 >^^^^^^^^^^^^^
2 >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >
  >	}
1 >Emitted(43, 14) Source(63, 3) + SourceIndex(0)
---
>>>            Widgets.FindWidget = FindWidget;
1->^^^^^^^^^^^^
2 >            ^^^^^^^^
3 >                    ^^^^^^^^^^
4 >                              ^^^^^^^^^^^^^
5 >                                           ^
6 >                                            ^^^^^^^^^^^^^^^^^->
1->
2 >            
3 >                    FindWidget
4 >                               implements Sample.Thing.IWidget {
  >                              
  >                              		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                              			
  >                              		private domNode:any = null;
  >                              		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                              		    // scenario 1
  >                              		    codeThing.addWidget("addWidget", this);
  >                              		}
  >                              		
  >                              		public getDomNode() {
  >                              			return domNode;
  >                              		}
  >                              		
  >                              		public destroy() {
  >                              
  >                              		}
  >                              
  >                              	}
5 >                                           
1->Emitted(44, 13) Source(45, 15) + SourceIndex(0)
2 >Emitted(44, 21) Source(45, 15) + SourceIndex(0)
3 >Emitted(44, 31) Source(45, 25) + SourceIndex(0)
4 >Emitted(44, 44) Source(63, 3) + SourceIndex(0)
5 >Emitted(44, 45) Source(63, 3) + SourceIndex(0)
---
>>>        })(Widgets = Thing.Widgets || (Thing.Widgets = {}));
1->^^^^^^^^
2 >        ^
3 >         ^^
4 >           ^^^^^^^
5 >                  ^^^
6 >                     ^^^^^^
7 >                           ^^^^^^^
8 >                                  ^^^^^
9 >                                       ^^^^^^
10>                                             ^^^^^^^
11>                                                    ^^^^^^^^
1->
2 >        
  >        }
3 >         
4 >           Widgets
5 >                  
6 >                     
7 >                           Widgets
8 >                                  
9 >                                       
10>                                             Widgets
11>                                                     {
  >                                                    	export class FindWidget implements Sample.Thing.IWidget {
  >                                                    
  >                                                    		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                                                    			
  >                                                    		private domNode:any = null;
  >                                                    		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                                                    		    // scenario 1
  >                                                    		    codeThing.addWidget("addWidget", this);
  >                                                    		}
  >                                                    		
  >                                                    		public getDomNode() {
  >                                                    			return domNode;
  >                                                    		}
  >                                                    		
  >                                                    		public destroy() {
  >                                                    
  >                                                    		}
  >                                                    
  >                                                    	}
  >                                                    }
1->Emitted(45, 9) Source(63, 3) + SourceIndex(0)
2 >Emitted(45, 10) Source(64, 2) + SourceIndex(0)
3 >Emitted(45, 12) Source(44, 21) + SourceIndex(0)
4 >Emitted(45, 19) Source(44, 28) + SourceIndex(0)
5 >Emitted(45, 22) Source(44, 21) + SourceIndex(0)
6 >Emitted(45, 28) Source(44, 21) + SourceIndex(0)
7 >Emitted(45, 35) Source(44, 28) + SourceIndex(0)
8 >Emitted(45, 40) Source(44, 21) + SourceIndex(0)
9 >Emitted(45, 46) Source(44, 21) + SourceIndex(0)
10>Emitted(45, 53) Source(44, 28) + SourceIndex(0)
11>Emitted(45, 61) Source(64, 2) + SourceIndex(0)
---
>>>    })(Thing = Sample.Thing || (Sample.Thing = {}));
1 >^^^^
2 >    ^
3 >     
4 >     ^^
5 >       ^^^^^
6 >            ^^^
7 >               ^^^^^^^
8 >                      ^^^^^
9 >                           ^^^^^
10>                                ^^^^^^^
11>                                       ^^^^^
12>                                            ^^^^^^^^
1 >
2 >    
  >    
3 >     
4 >     // Scenario 1: Test reqursive function call with "this" parameter
  >     // Scenario 2: Test recursive function call with cast and "this" parameter
  >     
  >     
  >     
  >     declare module Sample.Thing {
  >     
  >     	export interface IWidget {
  >     		getDomNode(): any;
  >     		destroy();
  >     		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >     	}
  >     
  >     	export interface ICodeThing {
  >       
  >       		getDomNode(): Element;
  >     		
  >     		addWidget(widgetId:string, widget:IWidget);
  >     
  >     		
  >     		focus(); 
  >     		
  >     		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >     	}
  >     
  >     	export interface IAction {
  >     		run(Thing:ICodeThing):boolean;
  >     		getId():string;
  >     	}	
  >     }
  >     
  >     module Sample.Actions.Thing.Find {
  >     	export class StartFindAction implements Sample.Thing.IAction {
  >     		
  >     		public getId() { return "yo"; }
  >     		
  >     		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >     
  >     			return true;
  >     		}
  >     	}
  >     }
  >     
  >     module Sample.
5 >       Thing
6 >            
7 >               
8 >                      Thing
9 >                           
10>                                
11>                                       Thing
12>                                            .Widgets {
  >                                            	export class FindWidget implements Sample.Thing.IWidget {
  >                                            
  >                                            		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                                            			
  >                                            		private domNode:any = null;
  >                                            		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                                            		    // scenario 1
  >                                            		    codeThing.addWidget("addWidget", this);
  >                                            		}
  >                                            		
  >                                            		public getDomNode() {
  >                                            			return domNode;
  >                                            		}
  >                                            		
  >                                            		public destroy() {
  >                                            
  >                                            		}
  >                                            
  >                                            	}
  >                                            }
1 >Emitted(46, 5) Source(63, 3) + SourceIndex(0)
2 >Emitted(46, 6) Source(64, 1) + SourceIndex(0)
3 >Emitted(46, 6) Source(1, 1) + SourceIndex(0)
4 >Emitted(46, 8) Source(44, 15) + SourceIndex(0)
5 >Emitted(46, 13) Source(44, 20) + SourceIndex(0)
6 >Emitted(46, 16) Source(44, 15) + SourceIndex(0)
7 >Emitted(46, 23) Source(44, 15) + SourceIndex(0)
8 >Emitted(46, 28) Source(44, 20) + SourceIndex(0)
9 >Emitted(46, 33) Source(44, 15) + SourceIndex(0)
10>Emitted(46, 40) Source(44, 15) + SourceIndex(0)
11>Emitted(46, 45) Source(44, 20) + SourceIndex(0)
12>Emitted(46, 53) Source(64, 2) + SourceIndex(0)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > 
4 > ^^
5 >   ^^^^^^
6 >         ^^^^^
7 >              ^^^^^^
8 >                    ^^^^^^^^
1 >
2 >
  >
3 > 
4 > // Scenario 1: Test reqursive function call with "this" parameter
  > // Scenario 2: Test recursive function call with cast and "this" parameter
  > 
  > 
  > 
  > declare module Sample.Thing {
  > 
  > 	export interface IWidget {
  > 		getDomNode(): any;
  > 		destroy();
  > 		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  > 	}
  > 
  > 	export interface ICodeThing {
  >   
  >   		getDomNode(): Element;
  > 		
  > 		addWidget(widgetId:string, widget:IWidget);
  > 
  > 		
  > 		focus(); 
  > 		
  > 		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  > 	}
  > 
  > 	export interface IAction {
  > 		run(Thing:ICodeThing):boolean;
  > 		getId():string;
  > 	}	
  > }
  > 
  > module Sample.Actions.Thing.Find {
  > 	export class StartFindAction implements Sample.Thing.IAction {
  > 		
  > 		public getId() { return "yo"; }
  > 		
  > 		public run(Thing:Sample.Thing.ICodeThing):boolean {
  > 
  > 			return true;
  > 		}
  > 	}
  > }
  > 
  > module 
5 >   Sample
6 >         
7 >              Sample
8 >                    .Thing.Widgets {
  >                    	export class FindWidget implements Sample.Thing.IWidget {
  >                    
  >                    		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                    			
  >                    		private domNode:any = null;
  >                    		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                    		    // scenario 1
  >                    		    codeThing.addWidget("addWidget", this);
  >                    		}
  >                    		
  >                    		public getDomNode() {
  >                    			return domNode;
  >                    		}
  >                    		
  >                    		public destroy() {
  >                    
  >                    		}
  >                    
  >                    	}
  >                    }
1 >Emitted(47, 1) Source(63, 3) + SourceIndex(0)
2 >Emitted(47, 2) Source(64, 1) + SourceIndex(0)
3 >Emitted(47, 2) Source(1, 1) + SourceIndex(0)
4 >Emitted(47, 4) Source(44, 8) + SourceIndex(0)
5 >Emitted(47, 10) Source(44, 14) + SourceIndex(0)
6 >Emitted(47, 15) Source(44, 8) + SourceIndex(0)
7 >Emitted(47, 21) Source(44, 14) + SourceIndex(0)
8 >Emitted(47, 29) Source(64, 2) + SourceIndex(0)
---
>>>class AbstractMode {
1 >
2 >^^^^^^
3 >      ^^^^^^^^^^^^
4 >                  ^^^^^^^^^^^^^^^^^^^^^->
1 >
  >
  >interface IMode { getInitialState(): IState;} 
  >
2 >class 
3 >      AbstractMode
1 >Emitted(48, 1) Source(67, 1) + SourceIndex(0)
2 >Emitted(48, 7) Source(67, 7) + SourceIndex(0)
3 >Emitted(48, 19) Source(67, 19) + SourceIndex(0)
---
>>>    getInitialState() { return null; }
1->^^^^
2 >    ^^^^^^^^^^^^^^^
3 >                   ^^^
4 >                      ^^
5 >                        ^^^^^^^
6 >                               ^^^^
7 >                                   ^
8 >                                    ^
9 >                                     ^
1-> implements IMode { public 
2 >    getInitialState
3 >                   (): IState 
4 >                      { 
5 >                        return 
6 >                               null
7 >                                   ;
8 >                                    
9 >                                     }
1->Emitted(49, 5) Source(67, 46) + SourceIndex(0)
2 >Emitted(49, 20) Source(67, 61) + SourceIndex(0)
3 >Emitted(49, 23) Source(67, 72) + SourceIndex(0)
4 >Emitted(49, 25) Source(67, 74) + SourceIndex(0)
5 >Emitted(49, 32) Source(67, 81) + SourceIndex(0)
6 >Emitted(49, 36) Source(67, 85) + SourceIndex(0)
7 >Emitted(49, 37) Source(67, 86) + SourceIndex(0)
8 >Emitted(49, 38) Source(67, 86) + SourceIndex(0)
9 >Emitted(49, 39) Source(67, 87) + SourceIndex(0)
---
>>>}
1 >^
2 > ^^^^^^^^^^^^^^^^^^^^->
1 > }
1 >Emitted(50, 2) Source(67, 89) + SourceIndex(0)
---
>>>(function (Sample) {
1->
2 >^^^^^^^^^^^
3 >           ^^^^^^
4 >                 ^^
1->
  >
  >interface IState {}
  >
  >interface Window {
  >    opener: Window;
  >}
  >declare var self: Window;
  >
  >
2 >module 
3 >           Sample
4 >                 
1->Emitted(51, 1) Source(76, 1) + SourceIndex(0)
2 >Emitted(51, 12) Source(76, 8) + SourceIndex(0)
3 >Emitted(51, 18) Source(76, 14) + SourceIndex(0)
4 >Emitted(51, 20) Source(6, 1) + SourceIndex(0)
---
>>>    let Thing;
1 >^^^^
2 >    ^^^^
3 >        ^^^^^
4 >             ^^^^^^^^^^^->
1 >declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >module Sample.Actions.Thing.Find {
  >	export class StartFindAction implements Sample.Thing.IAction {
  >		
  >		public getId() { return "yo"; }
  >		
  >		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >
  >			return true;
  >		}
  >	}
  >}
  >
  >module Sample.Thing.Widgets {
  >	export class FindWidget implements Sample.Thing.IWidget {
  >
  >		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >			
  >		private domNode:any = null;
  >		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >		    // scenario 1
  >		    codeThing.addWidget("addWidget", this);
  >		}
  >		
  >		public getDomNode() {
  >			return domNode;
  >		}
  >		
  >		public destroy() {
  >
  >		}
  >
  >	}
  >}
  >
  >interface IMode { getInitialState(): IState;} 
  >class AbstractMode implements IMode { public getInitialState(): IState { return null;} }
  >
  >interface IState {}
  >
  >interface Window {
  >    opener: Window;
  >}
  >declare var self: Window;
  >
  >module Sample.
2 >    
3 >        Thing.Languages.PlainText {
  >        	
  >        	export class State implements IState {		
  >                constructor(private mode: IMode) { }
  >        		public clone():IState {
  >        			return this;
  >        		}
  >        
  >        		public equals(other:IState):boolean {
  >        			return this === other;
  >        		}
  >        		
  >        		public getMode(): IMode { return mode; }
  >        	}
  >        	
  >        	export class Mode extends AbstractMode {
  >        
  >        		// scenario 2
  >        		public getInitialState(): IState {
  >        			return new State(self);
  >        		}
  >        
  >        
  >        	}
  >        }
1 >Emitted(52, 5) Source(76, 15) + SourceIndex(0)
2 >Emitted(52, 9) Source(76, 15) + SourceIndex(0)
3 >Emitted(52, 14) Source(100, 2) + SourceIndex(0)
---
>>>    (function (Thing) {
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^
4 >                    ^^
5 >                      ^->
1->
2 >    
3 >               Thing
4 >                    
1->Emitted(53, 5) Source(76, 15) + SourceIndex(0)
2 >Emitted(53, 16) Source(76, 15) + SourceIndex(0)
3 >Emitted(53, 21) Source(76, 20) + SourceIndex(0)
4 >Emitted(53, 23) Source(6, 1) + SourceIndex(0)
---
>>>        let Languages;
1->^^^^^^^^
2 >        ^^^^
3 >            ^^^^^^^^^
4 >                     ^^^^^^^^^^^->
1->declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >module Sample.Actions.Thing.Find {
  >	export class StartFindAction implements Sample.Thing.IAction {
  >		
  >		public getId() { return "yo"; }
  >		
  >		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >
  >			return true;
  >		}
  >	}
  >}
  >
  >module Sample.Thing.Widgets {
  >	export class FindWidget implements Sample.Thing.IWidget {
  >
  >		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >			
  >		private domNode:any = null;
  >		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >		    // scenario 1
  >		    codeThing.addWidget("addWidget", this);
  >		}
  >		
  >		public getDomNode() {
  >			return domNode;
  >		}
  >		
  >		public destroy() {
  >
  >		}
  >
  >	}
  >}
  >
  >interface IMode { getInitialState(): IState;} 
  >class AbstractMode implements IMode { public getInitialState(): IState { return null;} }
  >
  >interface IState {}
  >
  >interface Window {
  >    opener: Window;
  >}
  >declare var self: Window;
  >
  >module Sample.Thing.
2 >        
3 >            Languages.PlainText {
  >            	
  >            	export class State implements IState {		
  >                    constructor(private mode: IMode) { }
  >            		public clone():IState {
  >            			return this;
  >            		}
  >            
  >            		public equals(other:IState):boolean {
  >            			return this === other;
  >            		}
  >            		
  >            		public getMode(): IMode { return mode; }
  >            	}
  >            	
  >            	export class Mode extends AbstractMode {
  >            
  >            		// scenario 2
  >            		public getInitialState(): IState {
  >            			return new State(self);
  >            		}
  >            
  >            
  >            	}
  >            }
1->Emitted(54, 9) Source(76, 21) + SourceIndex(0)
2 >Emitted(54, 13) Source(76, 21) + SourceIndex(0)
3 >Emitted(54, 22) Source(100, 2) + SourceIndex(0)
---
>>>        (function (Languages) {
1->^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^^^^
4 >                            ^^
1->
2 >        
3 >                   Languages
4 >                            
1->Emitted(55, 9) Source(76, 21) + SourceIndex(0)
2 >Emitted(55, 20) Source(76, 21) + SourceIndex(0)
3 >Emitted(55, 29) Source(76, 30) + SourceIndex(0)
4 >Emitted(55, 31) Source(6, 1) + SourceIndex(0)
---
>>>            let PlainText;
1 >^^^^^^^^^^^^
2 >            ^^^^
3 >                ^^^^^^^^^
4 >                         ^^^^^^^^^^^->
1 >declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >module Sample.Actions.Thing.Find {
  >	export class StartFindAction implements Sample.Thing.IAction {
  >		
  >		public getId() { return "yo"; }
  >		
  >		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >
  >			return true;
  >		}
  >	}
  >}
  >
  >module Sample.Thing.Widgets {
  >	export class FindWidget implements Sample.Thing.IWidget {
  >
  >		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >			
  >		private domNode:any = null;
  >		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >		    // scenario 1
  >		    codeThing.addWidget("addWidget", this);
  >		}
  >		
  >		public getDomNode() {
  >			return domNode;
  >		}
  >		
  >		public destroy() {
  >
  >		}
  >
  >	}
  >}
  >
  >interface IMode { getInitialState(): IState;} 
  >class AbstractMode implements IMode { public getInitialState(): IState { return null;} }
  >
  >interface IState {}
  >
  >interface Window {
  >    opener: Window;
  >}
  >declare var self: Window;
  >
  >module Sample.Thing.Languages.
2 >            
3 >                PlainText {
  >                	
  >                	export class State implements IState {		
  >                        constructor(private mode: IMode) { }
  >                		public clone():IState {
  >                			return this;
  >                		}
  >                
  >                		public equals(other:IState):boolean {
  >                			return this === other;
  >                		}
  >                		
  >                		public getMode(): IMode { return mode; }
  >                	}
  >                	
  >                	export class Mode extends AbstractMode {
  >                
  >                		// scenario 2
  >                		public getInitialState(): IState {
  >                			return new State(self);
  >                		}
  >                
  >                
  >                	}
  >                }
1 >Emitted(56, 13) Source(76, 31) + SourceIndex(0)
2 >Emitted(56, 17) Source(76, 31) + SourceIndex(0)
3 >Emitted(56, 26) Source(100, 2) + SourceIndex(0)
---
>>>            (function (PlainText) {
1->^^^^^^^^^^^^
2 >            ^^^^^^^^^^^
3 >                       ^^^^^^^^^
4 >                                ^^
1->
2 >            
3 >                       PlainText
4 >                                 
1->Emitted(57, 13) Source(76, 31) + SourceIndex(0)
2 >Emitted(57, 24) Source(76, 31) + SourceIndex(0)
3 >Emitted(57, 33) Source(76, 40) + SourceIndex(0)
4 >Emitted(57, 35) Source(76, 41) + SourceIndex(0)
---
>>>                class State {
1 >^^^^^^^^^^^^^^^^
2 >                ^^^^^^
3 >                      ^^^^^
1 >{
  >	
  >	
2 >                export class 
3 >                      State
1 >Emitted(58, 17) Source(78, 2) + SourceIndex(0)
2 >Emitted(58, 23) Source(78, 15) + SourceIndex(0)
3 >Emitted(58, 28) Source(78, 20) + SourceIndex(0)
---
>>>                    mode;
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^
3 >                        ^^^^^^^^^^^^^^^^->
1 > implements IState {		
  >        constructor(private 
2 >                    mode
1 >Emitted(59, 21) Source(79, 29) + SourceIndex(0)
2 >Emitted(59, 25) Source(79, 33) + SourceIndex(0)
---
>>>                    constructor(mode) {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^
3 >                                ^^^^
4 >                                    ^^
5 >                                      ^^^^->
1->
2 >                    constructor(private 
3 >                                mode: IMode
4 >                                    ) 
1->Emitted(60, 21) Source(79, 9) + SourceIndex(0)
2 >Emitted(60, 33) Source(79, 29) + SourceIndex(0)
3 >Emitted(60, 37) Source(79, 40) + SourceIndex(0)
4 >Emitted(60, 39) Source(79, 42) + SourceIndex(0)
---
>>>                        this.mode = mode;
1->^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 >                                    ^^^^
1->
2 >                                    mode
1->Emitted(61, 37) Source(79, 29) + SourceIndex(0)
2 >Emitted(61, 41) Source(79, 33) + SourceIndex(0)
---
>>>                    }
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^->
1 >: IMode) {
2 >                     }
1 >Emitted(62, 21) Source(79, 43) + SourceIndex(0)
2 >Emitted(62, 22) Source(79, 45) + SourceIndex(0)
---
>>>                    clone() {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^
3 >                         ^^^
4 >                            ^^^^^^^^^->
1->
  >		public 
2 >                    clone
3 >                         ():IState 
1->Emitted(63, 21) Source(80, 10) + SourceIndex(0)
2 >Emitted(63, 26) Source(80, 15) + SourceIndex(0)
3 >Emitted(63, 29) Source(80, 25) + SourceIndex(0)
---
>>>                        return this;
1->^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^
1->{
  >			
2 >                        return 
3 >                               this
4 >                                   ;
1->Emitted(64, 25) Source(81, 4) + SourceIndex(0)
2 >Emitted(64, 32) Source(81, 11) + SourceIndex(0)
3 >Emitted(64, 36) Source(81, 15) + SourceIndex(0)
4 >Emitted(64, 37) Source(81, 16) + SourceIndex(0)
---
>>>                    }
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^->
1 >
2 >                    
  >                    		}
1 >Emitted(65, 21) Source(81, 16) + SourceIndex(0)
2 >Emitted(65, 22) Source(82, 4) + SourceIndex(0)
---
>>>                    equals(other) {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^
3 >                          ^
4 >                           ^^^^^
5 >                                ^^
6 >                                  ^^^^^^^^^^^^^->
1->
  >
  >		public 
2 >                    equals
3 >                          (
4 >                           other:IState
5 >                                ):boolean 
1->Emitted(66, 21) Source(84, 10) + SourceIndex(0)
2 >Emitted(66, 27) Source(84, 16) + SourceIndex(0)
3 >Emitted(66, 28) Source(84, 17) + SourceIndex(0)
4 >Emitted(66, 33) Source(84, 29) + SourceIndex(0)
5 >Emitted(66, 35) Source(84, 39) + SourceIndex(0)
---
>>>                        return this === other;
1->^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^^^^^
5 >                                        ^^^^^
6 >                                             ^
1->{
  >			
2 >                        return 
3 >                               this
4 >                                    === 
5 >                                        other
6 >                                             ;
1->Emitted(67, 25) Source(85, 4) + SourceIndex(0)
2 >Emitted(67, 32) Source(85, 11) + SourceIndex(0)
3 >Emitted(67, 36) Source(85, 15) + SourceIndex(0)
4 >Emitted(67, 41) Source(85, 20) + SourceIndex(0)
5 >Emitted(67, 46) Source(85, 25) + SourceIndex(0)
6 >Emitted(67, 47) Source(85, 26) + SourceIndex(0)
---
>>>                    }
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >                    
  >                    		}
1 >Emitted(68, 21) Source(85, 26) + SourceIndex(0)
2 >Emitted(68, 22) Source(86, 4) + SourceIndex(0)
---
>>>                    getMode() { return mode; }
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^
3 >                           ^^^
4 >                              ^^
5 >                                ^^^^^^^
6 >                                       ^^^^
7 >                                           ^
8 >                                            ^
9 >                                             ^
1->
  >		
  >		public 
2 >                    getMode
3 >                           (): IMode 
4 >                              { 
5 >                                return 
6 >                                       mode
7 >                                           ;
8 >                                            
9 >                                              }
1->Emitted(69, 21) Source(88, 10) + SourceIndex(0)
2 >Emitted(69, 28) Source(88, 17) + SourceIndex(0)
3 >Emitted(69, 31) Source(88, 27) + SourceIndex(0)
4 >Emitted(69, 33) Source(88, 29) + SourceIndex(0)
5 >Emitted(69, 40) Source(88, 36) + SourceIndex(0)
6 >Emitted(69, 44) Source(88, 40) + SourceIndex(0)
7 >Emitted(69, 45) Source(88, 41) + SourceIndex(0)
8 >Emitted(69, 46) Source(88, 41) + SourceIndex(0)
9 >Emitted(69, 47) Source(88, 43) + SourceIndex(0)
---
>>>                }
1 >^^^^^^^^^^^^^^^^^
2 >                 ^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >	}
1 >Emitted(70, 18) Source(89, 3) + SourceIndex(0)
---
>>>                PlainText.State = State;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^
3 >                          ^^^^^
4 >                               ^^^^^^^^
5 >                                       ^
6 >                                        ^^^^^^^^^^->
1->
2 >                
3 >                          State
4 >                                implements IState {		
  >                                       constructor(private mode: IMode) { }
  >                               		public clone():IState {
  >                               			return this;
  >                               		}
  >                               
  >                               		public equals(other:IState):boolean {
  >                               			return this === other;
  >                               		}
  >                               		
  >                               		public getMode(): IMode { return mode; }
  >                               	}
5 >                                       
1->Emitted(71, 17) Source(78, 15) + SourceIndex(0)
2 >Emitted(71, 27) Source(78, 15) + SourceIndex(0)
3 >Emitted(71, 32) Source(78, 20) + SourceIndex(0)
4 >Emitted(71, 40) Source(89, 3) + SourceIndex(0)
5 >Emitted(71, 41) Source(89, 3) + SourceIndex(0)
---
>>>                class Mode extends AbstractMode {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^
3 >                      ^^^^
4 >                          ^^^^^^^^^
5 >                                   ^^^^^^^^^^^^
1->
  >	
  >	
2 >                export class 
3 >                      Mode 
4 >                          extends 
5 >                                   AbstractMode
1->Emitted(72, 17) Source(91, 2) + SourceIndex(0)
2 >Emitted(72, 23) Source(91, 15) + SourceIndex(0)
3 >Emitted(72, 27) Source(91, 20) + SourceIndex(0)
4 >Emitted(72, 36) Source(91, 28) + SourceIndex(0)
5 >Emitted(72, 48) Source(91, 40) + SourceIndex(0)
---
>>>                    // scenario 2
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^
3 >                                 ^^^^^^^->
1 > {
  >
  >		
2 >                    // scenario 2
1 >Emitted(73, 21) Source(93, 3) + SourceIndex(0)
2 >Emitted(73, 34) Source(93, 16) + SourceIndex(0)
---
>>>                    getInitialState() {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^
3 >                                   ^^^
4 >                                      ^^^^^^^^^^->
1->
  >		public 
2 >                    getInitialState
3 >                                   (): IState 
1->Emitted(74, 21) Source(94, 10) + SourceIndex(0)
2 >Emitted(74, 36) Source(94, 25) + SourceIndex(0)
3 >Emitted(74, 39) Source(94, 36) + SourceIndex(0)
---
>>>                        return new State(self);
1->^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^^^^^
5 >                                        ^
6 >                                         ^^^^
7 >                                             ^
8 >                                              ^
1->{
  >			
2 >                        return 
3 >                               new 
4 >                                   State
5 >                                        (
6 >                                         self
7 >                                             )
8 >                                              ;
1->Emitted(75, 25) Source(95, 4) + SourceIndex(0)
2 >Emitted(75, 32) Source(95, 11) + SourceIndex(0)
3 >Emitted(75, 36) Source(95, 15) + SourceIndex(0)
4 >Emitted(75, 41) Source(95, 20) + SourceIndex(0)
5 >Emitted(75, 42) Source(95, 21) + SourceIndex(0)
6 >Emitted(75, 46) Source(95, 25) + SourceIndex(0)
7 >Emitted(75, 47) Source(95, 26) + SourceIndex(0)
8 >Emitted(75, 48) Source(95, 27) + SourceIndex(0)
---
>>>                    }
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
1 >
2 >                    
  >                    		}
1 >Emitted(76, 21) Source(95, 27) + SourceIndex(0)
2 >Emitted(76, 22) Source(96, 4) + SourceIndex(0)
---
>>>                }
1 >^^^^^^^^^^^^^^^^^
2 >                 ^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >
  >
  >	}
1 >Emitted(77, 18) Source(99, 3) + SourceIndex(0)
---
>>>                PlainText.Mode = Mode;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^
3 >                          ^^^^
4 >                              ^^^^^^^
5 >                                     ^
6 >                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >                
3 >                          Mode
4 >                               extends AbstractMode {
  >                              
  >                              		// scenario 2
  >                              		public getInitialState(): IState {
  >                              			return new State(self);
  >                              		}
  >                              
  >                              
  >                              	}
5 >                                     
1->Emitted(78, 17) Source(91, 15) + SourceIndex(0)
2 >Emitted(78, 27) Source(91, 15) + SourceIndex(0)
3 >Emitted(78, 31) Source(91, 19) + SourceIndex(0)
4 >Emitted(78, 38) Source(99, 3) + SourceIndex(0)
5 >Emitted(78, 39) Source(99, 3) + SourceIndex(0)
---
>>>            })(PlainText = Languages.PlainText || (Languages.PlainText = {}));
1->^^^^^^^^^^^^
2 >            ^
3 >             ^^
4 >               ^^^^^^^^^
5 >                        ^^^
6 >                           ^^^^^^^^^^
7 >                                     ^^^^^^^^^
8 >                                              ^^^^^
9 >                                                   ^^^^^^^^^^
10>                                                             ^^^^^^^^^
11>                                                                      ^^^^^^^^
1->
2 >            
  >            }
3 >             
4 >               PlainText
5 >                        
6 >                           
7 >                                     PlainText
8 >                                              
9 >                                                   
10>                                                             PlainText
11>                                                                       {
  >                                                                      	
  >                                                                      	export class State implements IState {		
  >                                                                              constructor(private mode: IMode) { }
  >                                                                      		public clone():IState {
  >                                                                      			return this;
  >                                                                      		}
  >                                                                      
  >                                                                      		public equals(other:IState):boolean {
  >                                                                      			return this === other;
  >                                                                      		}
  >                                                                      		
  >                                                                      		public getMode(): IMode { return mode; }
  >                                                                      	}
  >                                                                      	
  >                                                                      	export class Mode extends AbstractMode {
  >                                                                      
  >                                                                      		// scenario 2
  >                                                                      		public getInitialState(): IState {
  >                                                                      			return new State(self);
  >                                                                      		}
  >                                                                      
  >                                                                      
  >                                                                      	}
  >                                                                      }
1->Emitted(79, 13) Source(99, 3) + SourceIndex(0)
2 >Emitted(79, 14) Source(100, 2) + SourceIndex(0)
3 >Emitted(79, 16) Source(76, 31) + SourceIndex(0)
4 >Emitted(79, 25) Source(76, 40) + SourceIndex(0)
5 >Emitted(79, 28) Source(76, 31) + SourceIndex(0)
6 >Emitted(79, 38) Source(76, 31) + SourceIndex(0)
7 >Emitted(79, 47) Source(76, 40) + SourceIndex(0)
8 >Emitted(79, 52) Source(76, 31) + SourceIndex(0)
9 >Emitted(79, 62) Source(76, 31) + SourceIndex(0)
10>Emitted(79, 71) Source(76, 40) + SourceIndex(0)
11>Emitted(79, 79) Source(100, 2) + SourceIndex(0)
---
>>>        })(Languages = Thing.Languages || (Thing.Languages = {}));
1 >^^^^^^^^
2 >        ^
3 >         
4 >         ^^
5 >           ^^^^^^^^^
6 >                    ^^^
7 >                       ^^^^^^
8 >                             ^^^^^^^^^
9 >                                      ^^^^^
10>                                           ^^^^^^
11>                                                 ^^^^^^^^^
12>                                                          ^^^^^^^^
1 >
2 >        
  >        
3 >         
4 >         // Scenario 1: Test reqursive function call with "this" parameter
  >         // Scenario 2: Test recursive function call with cast and "this" parameter
  >         
  >         
  >         
  >         declare module Sample.Thing {
  >         
  >         	export interface IWidget {
  >         		getDomNode(): any;
  >         		destroy();
  >         		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >         	}
  >         
  >         	export interface ICodeThing {
  >           
  >           		getDomNode(): Element;
  >         		
  >         		addWidget(widgetId:string, widget:IWidget);
  >         
  >         		
  >         		focus(); 
  >         		
  >         		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >         	}
  >         
  >         	export interface IAction {
  >         		run(Thing:ICodeThing):boolean;
  >         		getId():string;
  >         	}	
  >         }
  >         
  >         module Sample.Actions.Thing.Find {
  >         	export class StartFindAction implements Sample.Thing.IAction {
  >         		
  >         		public getId() { return "yo"; }
  >         		
  >         		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >         
  >         			return true;
  >         		}
  >         	}
  >         }
  >         
  >         module Sample.Thing.Widgets {
  >         	export class FindWidget implements Sample.Thing.IWidget {
  >         
  >         		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >         			
  >         		private domNode:any = null;
  >         		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >         		    // scenario 1
  >         		    codeThing.addWidget("addWidget", this);
  >         		}
  >         		
  >         		public getDomNode() {
  >         			return domNode;
  >         		}
  >         		
  >         		public destroy() {
  >         
  >         		}
  >         
  >         	}
  >         }
  >         
  >         interface IMode { getInitialState(): IState;} 
  >         class AbstractMode implements IMode { public getInitialState(): IState { return null;} }
  >         
  >         interface IState {}
  >         
  >         interface Window {
  >             opener: Window;
  >         }
  >         declare var self: Window;
  >         
  >         module Sample.Thing.
5 >           Languages
6 >                    
7 >                       
8 >                             Languages
9 >                                      
10>                                           
11>                                                 Languages
12>                                                          .PlainText {
  >                                                          	
  >                                                          	export class State implements IState {		
  >                                                                  constructor(private mode: IMode) { }
  >                                                          		public clone():IState {
  >                                                          			return this;
  >                                                          		}
  >                                                          
  >                                                          		public equals(other:IState):boolean {
  >                                                          			return this === other;
  >                                                          		}
  >                                                          		
  >                                                          		public getMode(): IMode { return mode; }
  >                                                          	}
  >                                                          	
  >                                                          	export class Mode extends AbstractMode {
  >                                                          
  >                                                          		// scenario 2
  >                                                          		public getInitialState(): IState {
  >                                                          			return new State(self);
  >                                                          		}
  >                                                          
  >                                                          
  >                                                          	}
  >                                                          }
1 >Emitted(80, 9) Source(99, 3) + SourceIndex(0)
2 >Emitted(80, 10) Source(100, 1) + SourceIndex(0)
3 >Emitted(80, 10) Source(1, 1) + SourceIndex(0)
4 >Emitted(80, 12) Source(76, 21) + SourceIndex(0)
5 >Emitted(80, 21) Source(76, 30) + SourceIndex(0)
6 >Emitted(80, 24) Source(76, 21) + SourceIndex(0)
7 >Emitted(80, 30) Source(76, 21) + SourceIndex(0)
8 >Emitted(80, 39) Source(76, 30) + SourceIndex(0)
9 >Emitted(80, 44) Source(76, 21) + SourceIndex(0)
10>Emitted(80, 50) Source(76, 21) + SourceIndex(0)
11>Emitted(80, 59) Source(76, 30) + SourceIndex(0)
12>Emitted(80, 67) Source(100, 2) + SourceIndex(0)
---
>>>    })(Thing = Sample.Thing || (Sample.Thing = {}));
1 >^^^^
2 >    ^
3 >     
4 >     ^^
5 >       ^^^^^
6 >            ^^^
7 >               ^^^^^^^
8 >                      ^^^^^
9 >                           ^^^^^
10>                                ^^^^^^^
11>                                       ^^^^^
12>                                            ^^^^^^^^
1 >
2 >    
  >    
3 >     
4 >     // Scenario 1: Test reqursive function call with "this" parameter
  >     // Scenario 2: Test recursive function call with cast and "this" parameter
  >     
  >     
  >     
  >     declare module Sample.Thing {
  >     
  >     	export interface IWidget {
  >     		getDomNode(): any;
  >     		destroy();
  >     		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >     	}
  >     
  >     	export interface ICodeThing {
  >       
  >       		getDomNode(): Element;
  >     		
  >     		addWidget(widgetId:string, widget:IWidget);
  >     
  >     		
  >     		focus(); 
  >     		
  >     		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >     	}
  >     
  >     	export interface IAction {
  >     		run(Thing:ICodeThing):boolean;
  >     		getId():string;
  >     	}	
  >     }
  >     
  >     module Sample.Actions.Thing.Find {
  >     	export class StartFindAction implements Sample.Thing.IAction {
  >     		
  >     		public getId() { return "yo"; }
  >     		
  >     		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >     
  >     			return true;
  >     		}
  >     	}
  >     }
  >     
  >     module Sample.Thing.Widgets {
  >     	export class FindWidget implements Sample.Thing.IWidget {
  >     
  >     		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >     			
  >     		private domNode:any = null;
  >     		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >     		    // scenario 1
  >     		    codeThing.addWidget("addWidget", this);
  >     		}
  >     		
  >     		public getDomNode() {
  >     			return domNode;
  >     		}
  >     		
  >     		public destroy() {
  >     
  >     		}
  >     
  >     	}
  >     }
  >     
  >     interface IMode { getInitialState(): IState;} 
  >     class AbstractMode implements IMode { public getInitialState(): IState { return null;} }
  >     
  >     interface IState {}
  >     
  >     interface Window {
  >         opener: Window;
  >     }
  >     declare var self: Window;
  >     
  >     module Sample.
5 >       Thing
6 >            
7 >               
8 >                      Thing
9 >                           
10>                                
11>                                       Thing
12>                                            .Languages.PlainText {
  >                                            	
  >                                            	export class State implements IState {		
  >                                                    constructor(private mode: IMode) { }
  >                                            		public clone():IState {
  >                                            			return this;
  >                                            		}
  >                                            
  >                                            		public equals(other:IState):boolean {
  >                                            			return this === other;
  >                                            		}
  >                                            		
  >                                            		public getMode(): IMode { return mode; }
  >                                            	}
  >                                            	
  >                                            	export class Mode extends AbstractMode {
  >                                            
  >                                            		// scenario 2
  >                                            		public getInitialState(): IState {
  >                                            			return new State(self);
  >                                            		}
  >                                            
  >                                            
  >                                            	}
  >                                            }
1 >Emitted(81, 5) Source(99, 3) + SourceIndex(0)
2 >Emitted(81, 6) Source(100, 1) + SourceIndex(0)
3 >Emitted(81, 6) Source(1, 1) + SourceIndex(0)
4 >Emitted(81, 8) Source(76, 15) + SourceIndex(0)
5 >Emitted(81, 13) Source(76, 20) + SourceIndex(0)
6 >Emitted(81, 16) Source(76, 15) + SourceIndex(0)
7 >Emitted(81, 23) Source(76, 15) + SourceIndex(0)
8 >Emitted(81, 28) Source(76, 20) + SourceIndex(0)
9 >Emitted(81, 33) Source(76, 15) + SourceIndex(0)
10>Emitted(81, 40) Source(76, 15) + SourceIndex(0)
11>Emitted(81, 45) Source(76, 20) + SourceIndex(0)
12>Emitted(81, 53) Source(100, 2) + SourceIndex(0)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > 
4 > ^^
5 >   ^^^^^^
6 >         ^^^^^
7 >              ^^^^^^
8 >                    ^^^^^^^^
9 >                            ^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >
  >
3 > 
4 > // Scenario 1: Test reqursive function call with "this" parameter
  > // Scenario 2: Test recursive function call with cast and "this" parameter
  > 
  > 
  > 
  > declare module Sample.Thing {
  > 
  > 	export interface IWidget {
  > 		getDomNode(): any;
  > 		destroy();
  > 		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  > 	}
  > 
  > 	export interface ICodeThing {
  >   
  >   		getDomNode(): Element;
  > 		
  > 		addWidget(widgetId:string, widget:IWidget);
  > 
  > 		
  > 		focus(); 
  > 		
  > 		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  > 	}
  > 
  > 	export interface IAction {
  > 		run(Thing:ICodeThing):boolean;
  > 		getId():string;
  > 	}	
  > }
  > 
  > module Sample.Actions.Thing.Find {
  > 	export class StartFindAction implements Sample.Thing.IAction {
  > 		
  > 		public getId() { return "yo"; }
  > 		
  > 		public run(Thing:Sample.Thing.ICodeThing):boolean {
  > 
  > 			return true;
  > 		}
  > 	}
  > }
  > 
  > module Sample.Thing.Widgets {
  > 	export class FindWidget implements Sample.Thing.IWidget {
  > 
  > 		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  > 			
  > 		private domNode:any = null;
  > 		constructor(private codeThing: Sample.Thing.ICodeThing) {
  > 		    // scenario 1
  > 		    codeThing.addWidget("addWidget", this);
  > 		}
  > 		
  > 		public getDomNode() {
  > 			return domNode;
  > 		}
  > 		
  > 		public destroy() {
  > 
  > 		}
  > 
  > 	}
  > }
  > 
  > interface IMode { getInitialState(): IState;} 
  > class AbstractMode implements IMode { public getInitialState(): IState { return null;} }
  > 
  > interface IState {}
  > 
  > interface Window {
  >     opener: Window;
  > }
  > declare var self: Window;
  > 
  > module 
5 >   Sample
6 >         
7 >              Sample
8 >                    .Thing.Languages.PlainText {
  >                    	
  >                    	export class State implements IState {		
  >                            constructor(private mode: IMode) { }
  >                    		public clone():IState {
  >                    			return this;
  >                    		}
  >                    
  >                    		public equals(other:IState):boolean {
  >                    			return this === other;
  >                    		}
  >                    		
  >                    		public getMode(): IMode { return mode; }
  >                    	}
  >                    	
  >                    	export class Mode extends AbstractMode {
  >                    
  >                    		// scenario 2
  >                    		public getInitialState(): IState {
  >                    			return new State(self);
  >                    		}
  >                    
  >                    
  >                    	}
  >                    }
1 >Emitted(82, 1) Source(99, 3) + SourceIndex(0)
2 >Emitted(82, 2) Source(100, 1) + SourceIndex(0)
3 >Emitted(82, 2) Source(1, 1) + SourceIndex(0)
4 >Emitted(82, 4) Source(76, 8) + SourceIndex(0)
5 >Emitted(82, 10) Source(76, 14) + SourceIndex(0)
6 >Emitted(82, 15) Source(76, 8) + SourceIndex(0)
7 >Emitted(82, 21) Source(76, 14) + SourceIndex(0)
8 >Emitted(82, 29) Source(100, 2) + SourceIndex(0)
---
>>>//# sourceMappingURL=recursiveClassReferenceTest.js.map