--- old.recursiveConditionalTypes2.symbols
+++ new.recursiveConditionalTypes2.symbols
@@ -25,19 +25,19 @@
 >ClassSpec : Symbol(ClassSpec, Decl(recursiveConditionalTypes2.ts, 6, 10))
 
   public?: object;
->public : Symbol(ClassSpec.public, Decl(recursiveConditionalTypes2.ts, 8, 21))
+>public : Symbol(public, Decl(recursiveConditionalTypes2.ts, 8, 21))
 
   private?: object;
->private : Symbol(ClassSpec.private, Decl(recursiveConditionalTypes2.ts, 9, 18))
+>private : Symbol(private, Decl(recursiveConditionalTypes2.ts, 9, 18))
 
   publicExtends?: Record<string, ClassSpec>;
->publicExtends : Symbol(ClassSpec.publicExtends, Decl(recursiveConditionalTypes2.ts, 10, 19))
->Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
+>publicExtends : Symbol(publicExtends, Decl(recursiveConditionalTypes2.ts, 10, 19))
+>Record : Symbol(Record)
 >ClassSpec : Symbol(ClassSpec, Decl(recursiveConditionalTypes2.ts, 6, 10))
 
   privateExtends?: Record<string, ClassSpec>;
->privateExtends : Symbol(ClassSpec.privateExtends, Decl(recursiveConditionalTypes2.ts, 11, 44))
->Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
+>privateExtends : Symbol(privateExtends, Decl(recursiveConditionalTypes2.ts, 11, 44))
+>Record : Symbol(Record)
 >ClassSpec : Symbol(ClassSpec, Decl(recursiveConditionalTypes2.ts, 6, 10))
 }
 
@@ -45,7 +45,7 @@
 >MaybeMergePrivateSuperSpec : Symbol(MaybeMergePrivateSuperSpec, Decl(recursiveConditionalTypes2.ts, 13, 1))
 >T : Symbol(T, Decl(recursiveConditionalTypes2.ts, 15, 32))
 >T : Symbol(T, Decl(recursiveConditionalTypes2.ts, 15, 32))
->Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
+>Record : Symbol(Record)
 >ClassSpec : Symbol(ClassSpec, Decl(recursiveConditionalTypes2.ts, 6, 10))
 
   ? MergePrivateSuperSpec<T>
@@ -92,7 +92,7 @@
 type MergePrivateSuperSpec<T extends Record<string, ClassSpec>> =
 >MergePrivateSuperSpec : Symbol(MergePrivateSuperSpec, Decl(recursiveConditionalTypes2.ts, 26, 2))
 >T : Symbol(T, Decl(recursiveConditionalTypes2.ts, 28, 27))
->Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
+>Record : Symbol(Record)
 >ClassSpec : Symbol(ClassSpec, Decl(recursiveConditionalTypes2.ts, 6, 10))
 
   UnionToIntersection<
@@ -169,7 +169,7 @@
 >DefaultsDeep : Symbol(DefaultsDeep, Decl(recursiveConditionalTypes2.ts, 44, 2))
 >T : Symbol(T, Decl(recursiveConditionalTypes2.ts, 46, 18))
 >P : Symbol(P, Decl(recursiveConditionalTypes2.ts, 47, 3))
->NonNullable : Symbol(NonNullable, Decl(lib.es5.d.ts, --, --))
+>NonNullable : Symbol(NonNullable)
 >U : Symbol(U, Decl(recursiveConditionalTypes2.ts, 46, 20))
 >P : Symbol(P, Decl(recursiveConditionalTypes2.ts, 47, 3))
 
@@ -188,7 +188,7 @@
 >T : Symbol(T, Decl(recursiveConditionalTypes2.ts, 54, 17))
 
   find<S extends T>(predicate: (value: T) => boolean): void;
->find : Symbol(_Array.find, Decl(recursiveConditionalTypes2.ts, 54, 21))
+>find : Symbol(find, Decl(recursiveConditionalTypes2.ts, 54, 21))
 >S : Symbol(S, Decl(recursiveConditionalTypes2.ts, 55, 7))
 >T : Symbol(T, Decl(recursiveConditionalTypes2.ts, 54, 17))
 >predicate : Symbol(predicate, Decl(recursiveConditionalTypes2.ts, 55, 20))
@@ -202,8 +202,8 @@
 >DefaultsDeep : Symbol(DefaultsDeep, Decl(recursiveConditionalTypes2.ts, 44, 2))
 
 z.find((_) => true);
->z.find : Symbol(_Array.find, Decl(recursiveConditionalTypes2.ts, 54, 21))
+>z.find : Symbol(find, Decl(recursiveConditionalTypes2.ts, 54, 21))
 >z : Symbol(z, Decl(recursiveConditionalTypes2.ts, 58, 5))
->find : Symbol(_Array.find, Decl(recursiveConditionalTypes2.ts, 54, 21))
+>find : Symbol(find, Decl(recursiveConditionalTypes2.ts, 54, 21))
 >_ : Symbol(_, Decl(recursiveConditionalTypes2.ts, 60, 8))
 
