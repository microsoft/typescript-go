//// [tests/cases/compiler/decoratorsOnComputedProperties.ts] ////

=== decoratorsOnComputedProperties.ts ===
function x(o: object, k: PropertyKey) { }
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>o : Symbol(o, Decl(decoratorsOnComputedProperties.ts, 0, 11))
>k : Symbol(k, Decl(decoratorsOnComputedProperties.ts, 0, 21))
>PropertyKey : Symbol(PropertyKey)

let i = 0;
>i : Symbol(i, Decl(decoratorsOnComputedProperties.ts, 1, 3))

function foo(): string { return ++i + ""; }
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))
>i : Symbol(i, Decl(decoratorsOnComputedProperties.ts, 1, 3))

const fieldNameA: string = "fieldName1";
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

const fieldNameB: string = "fieldName2";
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

const fieldNameC: string = "fieldName3";
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

class A {
>A : Symbol(A, Decl(decoratorsOnComputedProperties.ts, 6, 40))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property"] : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 8, 9))
>"property" : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 8, 9))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.toStringTag] : Symbol([Symbol.toStringTag], Decl(decoratorsOnComputedProperties.ts, 9, 25))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property2"] : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 10, 33))
>"property2" : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 10, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(decoratorsOnComputedProperties.ts, 11, 30))

    ["property3"]: any;
>["property3"] : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 12, 37))
>"property3" : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 12, 37))

    [Symbol.isConcatSpreadable]: any;
>[Symbol.isConcatSpreadable] : Symbol([Symbol.isConcatSpreadable], Decl(decoratorsOnComputedProperties.ts, 13, 23))

    ["property4"]: any = 2;
>["property4"] : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 14, 37))
>"property4" : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 14, 37))

    [Symbol.match]: any = null;
>[Symbol.match] : Symbol([Symbol.match], Decl(decoratorsOnComputedProperties.ts, 15, 27))

    [foo()]: any;
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 16, 31))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 17, 17))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 18, 20))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    [fieldNameA]: any;
>[fieldNameA] : Symbol([fieldNameA], Decl(decoratorsOnComputedProperties.ts, 19, 27))
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameB] : Symbol([fieldNameB], Decl(decoratorsOnComputedProperties.ts, 20, 22))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameC] : Symbol([fieldNameC], Decl(decoratorsOnComputedProperties.ts, 21, 25))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))
}

void class B {
>B : Symbol(B, Decl(decoratorsOnComputedProperties.ts, 25, 4))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property"] : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 25, 14))
>"property" : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 25, 14))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.toStringTag] : Symbol([Symbol.toStringTag], Decl(decoratorsOnComputedProperties.ts, 26, 25))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property2"] : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 27, 33))
>"property2" : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 27, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(decoratorsOnComputedProperties.ts, 28, 30))

    ["property3"]: any;
>["property3"] : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 29, 37))
>"property3" : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 29, 37))

    [Symbol.isConcatSpreadable]: any;
>[Symbol.isConcatSpreadable] : Symbol([Symbol.isConcatSpreadable], Decl(decoratorsOnComputedProperties.ts, 30, 23))

    ["property4"]: any = 2;
>["property4"] : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 31, 37))
>"property4" : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 31, 37))

    [Symbol.match]: any = null;
>[Symbol.match] : Symbol([Symbol.match], Decl(decoratorsOnComputedProperties.ts, 32, 27))

    [foo()]: any;
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 33, 31))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 34, 17))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 35, 20))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    [fieldNameA]: any;
>[fieldNameA] : Symbol([fieldNameA], Decl(decoratorsOnComputedProperties.ts, 36, 27))
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameB] : Symbol([fieldNameB], Decl(decoratorsOnComputedProperties.ts, 37, 22))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameC] : Symbol([fieldNameC], Decl(decoratorsOnComputedProperties.ts, 38, 25))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

};

class C {
>C : Symbol(C, Decl(decoratorsOnComputedProperties.ts, 40, 2))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property"] : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 42, 9))
>"property" : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 42, 9))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.toStringTag] : Symbol([Symbol.toStringTag], Decl(decoratorsOnComputedProperties.ts, 43, 25))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property2"] : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 44, 33))
>"property2" : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 44, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(decoratorsOnComputedProperties.ts, 45, 30))

    ["property3"]: any;
>["property3"] : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 46, 37))
>"property3" : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 46, 37))

    [Symbol.isConcatSpreadable]: any;
>[Symbol.isConcatSpreadable] : Symbol([Symbol.isConcatSpreadable], Decl(decoratorsOnComputedProperties.ts, 47, 23))

    ["property4"]: any = 2;
>["property4"] : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 48, 37))
>"property4" : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 48, 37))

    [Symbol.match]: any = null;
>[Symbol.match] : Symbol([Symbol.match], Decl(decoratorsOnComputedProperties.ts, 49, 27))

    [foo()]: any;
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 50, 31))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 51, 17))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 52, 20))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    [fieldNameA]: any;
>[fieldNameA] : Symbol([fieldNameA], Decl(decoratorsOnComputedProperties.ts, 53, 27))
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameB] : Symbol([fieldNameB], Decl(decoratorsOnComputedProperties.ts, 54, 22))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameC] : Symbol([fieldNameC], Decl(decoratorsOnComputedProperties.ts, 55, 25))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

    ["some" + "method"]() {}
>["some" + "method"] : Symbol(["some" + "method"], Decl(decoratorsOnComputedProperties.ts, 56, 32))
}

void class D {
>D : Symbol(D, Decl(decoratorsOnComputedProperties.ts, 60, 4))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property"] : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 60, 14))
>"property" : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 60, 14))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.toStringTag] : Symbol([Symbol.toStringTag], Decl(decoratorsOnComputedProperties.ts, 61, 25))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property2"] : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 62, 33))
>"property2" : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 62, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(decoratorsOnComputedProperties.ts, 63, 30))

    ["property3"]: any;
>["property3"] : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 64, 37))
>"property3" : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 64, 37))

    [Symbol.isConcatSpreadable]: any;
>[Symbol.isConcatSpreadable] : Symbol([Symbol.isConcatSpreadable], Decl(decoratorsOnComputedProperties.ts, 65, 23))

    ["property4"]: any = 2;
>["property4"] : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 66, 37))
>"property4" : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 66, 37))

    [Symbol.match]: any = null;
>[Symbol.match] : Symbol([Symbol.match], Decl(decoratorsOnComputedProperties.ts, 67, 27))

    [foo()]: any;
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 68, 31))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 69, 17))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 70, 20))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    [fieldNameA]: any;
>[fieldNameA] : Symbol([fieldNameA], Decl(decoratorsOnComputedProperties.ts, 71, 27))
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameB] : Symbol([fieldNameB], Decl(decoratorsOnComputedProperties.ts, 72, 22))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameC] : Symbol([fieldNameC], Decl(decoratorsOnComputedProperties.ts, 73, 25))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

    ["some" + "method"]() {}
>["some" + "method"] : Symbol(["some" + "method"], Decl(decoratorsOnComputedProperties.ts, 74, 32))

};

class E {
>E : Symbol(E, Decl(decoratorsOnComputedProperties.ts, 76, 2))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property"] : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 78, 9))
>"property" : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 78, 9))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.toStringTag] : Symbol([Symbol.toStringTag], Decl(decoratorsOnComputedProperties.ts, 79, 25))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property2"] : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 80, 33))
>"property2" : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 80, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(decoratorsOnComputedProperties.ts, 81, 30))

    ["property3"]: any;
>["property3"] : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 82, 37))
>"property3" : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 82, 37))

    [Symbol.isConcatSpreadable]: any;
>[Symbol.isConcatSpreadable] : Symbol([Symbol.isConcatSpreadable], Decl(decoratorsOnComputedProperties.ts, 83, 23))

    ["property4"]: any = 2;
>["property4"] : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 84, 37))
>"property4" : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 84, 37))

    [Symbol.match]: any = null;
>[Symbol.match] : Symbol([Symbol.match], Decl(decoratorsOnComputedProperties.ts, 85, 27))

    [foo()]: any;
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 86, 31))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 87, 17))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 88, 20))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    ["some" + "method"]() {}
>["some" + "method"] : Symbol(["some" + "method"], Decl(decoratorsOnComputedProperties.ts, 89, 27))

    [fieldNameA]: any;
>[fieldNameA] : Symbol([fieldNameA], Decl(decoratorsOnComputedProperties.ts, 90, 28))
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameB] : Symbol([fieldNameB], Decl(decoratorsOnComputedProperties.ts, 91, 22))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameC] : Symbol([fieldNameC], Decl(decoratorsOnComputedProperties.ts, 92, 25))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))
}

void class F {
>F : Symbol(F, Decl(decoratorsOnComputedProperties.ts, 96, 4))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property"] : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 96, 14))
>"property" : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 96, 14))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.toStringTag] : Symbol([Symbol.toStringTag], Decl(decoratorsOnComputedProperties.ts, 97, 25))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property2"] : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 98, 33))
>"property2" : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 98, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(decoratorsOnComputedProperties.ts, 99, 30))

    ["property3"]: any;
>["property3"] : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 100, 37))
>"property3" : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 100, 37))

    [Symbol.isConcatSpreadable]: any;
>[Symbol.isConcatSpreadable] : Symbol([Symbol.isConcatSpreadable], Decl(decoratorsOnComputedProperties.ts, 101, 23))

    ["property4"]: any = 2;
>["property4"] : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 102, 37))
>"property4" : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 102, 37))

    [Symbol.match]: any = null;
>[Symbol.match] : Symbol([Symbol.match], Decl(decoratorsOnComputedProperties.ts, 103, 27))

    [foo()]: any;
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 104, 31))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 105, 17))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 106, 20))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    ["some" + "method"]() {}
>["some" + "method"] : Symbol(["some" + "method"], Decl(decoratorsOnComputedProperties.ts, 107, 27))

    [fieldNameA]: any;
>[fieldNameA] : Symbol([fieldNameA], Decl(decoratorsOnComputedProperties.ts, 108, 28))
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameB] : Symbol([fieldNameB], Decl(decoratorsOnComputedProperties.ts, 109, 22))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameC] : Symbol([fieldNameC], Decl(decoratorsOnComputedProperties.ts, 110, 25))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

};

class G {
>G : Symbol(G, Decl(decoratorsOnComputedProperties.ts, 112, 2))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property"] : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 114, 9))
>"property" : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 114, 9))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.toStringTag] : Symbol([Symbol.toStringTag], Decl(decoratorsOnComputedProperties.ts, 115, 25))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property2"] : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 116, 33))
>"property2" : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 116, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(decoratorsOnComputedProperties.ts, 117, 30))

    ["property3"]: any;
>["property3"] : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 118, 37))
>"property3" : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 118, 37))

    [Symbol.isConcatSpreadable]: any;
>[Symbol.isConcatSpreadable] : Symbol([Symbol.isConcatSpreadable], Decl(decoratorsOnComputedProperties.ts, 119, 23))

    ["property4"]: any = 2;
>["property4"] : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 120, 37))
>"property4" : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 120, 37))

    [Symbol.match]: any = null;
>[Symbol.match] : Symbol([Symbol.match], Decl(decoratorsOnComputedProperties.ts, 121, 27))

    [foo()]: any;
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 122, 31))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 123, 17))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 124, 20))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    ["some" + "method"]() {}
>["some" + "method"] : Symbol(["some" + "method"], Decl(decoratorsOnComputedProperties.ts, 125, 27))

    [fieldNameA]: any;
>[fieldNameA] : Symbol([fieldNameA], Decl(decoratorsOnComputedProperties.ts, 126, 28))
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameB] : Symbol([fieldNameB], Decl(decoratorsOnComputedProperties.ts, 127, 22))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    ["some" + "method2"]() {}
>["some" + "method2"] : Symbol(["some" + "method2"], Decl(decoratorsOnComputedProperties.ts, 128, 25))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameC] : Symbol([fieldNameC], Decl(decoratorsOnComputedProperties.ts, 129, 29))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))
}

void class H {
>H : Symbol(H, Decl(decoratorsOnComputedProperties.ts, 133, 4))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property"] : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 133, 14))
>"property" : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 133, 14))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.toStringTag] : Symbol([Symbol.toStringTag], Decl(decoratorsOnComputedProperties.ts, 134, 25))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property2"] : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 135, 33))
>"property2" : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 135, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(decoratorsOnComputedProperties.ts, 136, 30))

    ["property3"]: any;
>["property3"] : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 137, 37))
>"property3" : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 137, 37))

    [Symbol.isConcatSpreadable]: any;
>[Symbol.isConcatSpreadable] : Symbol([Symbol.isConcatSpreadable], Decl(decoratorsOnComputedProperties.ts, 138, 23))

    ["property4"]: any = 2;
>["property4"] : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 139, 37))
>"property4" : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 139, 37))

    [Symbol.match]: any = null;
>[Symbol.match] : Symbol([Symbol.match], Decl(decoratorsOnComputedProperties.ts, 140, 27))

    [foo()]: any;
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 141, 31))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 142, 17))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 143, 20))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    ["some" + "method"]() {}
>["some" + "method"] : Symbol(["some" + "method"], Decl(decoratorsOnComputedProperties.ts, 144, 27))

    [fieldNameA]: any;
>[fieldNameA] : Symbol([fieldNameA], Decl(decoratorsOnComputedProperties.ts, 145, 28))
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameB] : Symbol([fieldNameB], Decl(decoratorsOnComputedProperties.ts, 146, 22))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    ["some" + "method2"]() {}
>["some" + "method2"] : Symbol(["some" + "method2"], Decl(decoratorsOnComputedProperties.ts, 147, 25))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameC] : Symbol([fieldNameC], Decl(decoratorsOnComputedProperties.ts, 148, 29))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

};

class I {
>I : Symbol(I, Decl(decoratorsOnComputedProperties.ts, 150, 2))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property"] : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 152, 9))
>"property" : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 152, 9))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.toStringTag] : Symbol([Symbol.toStringTag], Decl(decoratorsOnComputedProperties.ts, 153, 25))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property2"] : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 154, 33))
>"property2" : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 154, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(decoratorsOnComputedProperties.ts, 155, 30))

    ["property3"]: any;
>["property3"] : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 156, 37))
>"property3" : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 156, 37))

    [Symbol.isConcatSpreadable]: any;
>[Symbol.isConcatSpreadable] : Symbol([Symbol.isConcatSpreadable], Decl(decoratorsOnComputedProperties.ts, 157, 23))

    ["property4"]: any = 2;
>["property4"] : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 158, 37))
>"property4" : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 158, 37))

    [Symbol.match]: any = null;
>[Symbol.match] : Symbol([Symbol.match], Decl(decoratorsOnComputedProperties.ts, 159, 27))

    [foo()]: any;
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 160, 31))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 161, 17))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 162, 20))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x ["some" + "method"]() {}
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["some" + "method"] : Symbol(["some" + "method"], Decl(decoratorsOnComputedProperties.ts, 163, 27))

    [fieldNameA]: any;
>[fieldNameA] : Symbol([fieldNameA], Decl(decoratorsOnComputedProperties.ts, 164, 31))
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameB] : Symbol([fieldNameB], Decl(decoratorsOnComputedProperties.ts, 165, 22))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    ["some" + "method2"]() {}
>["some" + "method2"] : Symbol(["some" + "method2"], Decl(decoratorsOnComputedProperties.ts, 166, 25))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameC] : Symbol([fieldNameC], Decl(decoratorsOnComputedProperties.ts, 167, 29))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))
}

void class J {
>J : Symbol(J, Decl(decoratorsOnComputedProperties.ts, 171, 4))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property"] : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 171, 14))
>"property" : Symbol(property, Decl(decoratorsOnComputedProperties.ts, 171, 14))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.toStringTag] : Symbol([Symbol.toStringTag], Decl(decoratorsOnComputedProperties.ts, 172, 25))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["property2"] : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 173, 33))
>"property2" : Symbol(property2, Decl(decoratorsOnComputedProperties.ts, 173, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(decoratorsOnComputedProperties.ts, 174, 30))

    ["property3"]: any;
>["property3"] : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 175, 37))
>"property3" : Symbol(property3, Decl(decoratorsOnComputedProperties.ts, 175, 37))

    [Symbol.isConcatSpreadable]: any;
>[Symbol.isConcatSpreadable] : Symbol([Symbol.isConcatSpreadable], Decl(decoratorsOnComputedProperties.ts, 176, 23))

    ["property4"]: any = 2;
>["property4"] : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 177, 37))
>"property4" : Symbol(property4, Decl(decoratorsOnComputedProperties.ts, 177, 37))

    [Symbol.match]: any = null;
>[Symbol.match] : Symbol([Symbol.match], Decl(decoratorsOnComputedProperties.ts, 178, 27))

    [foo()]: any;
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 179, 31))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 180, 17))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[foo()] : Symbol([foo()], Decl(decoratorsOnComputedProperties.ts, 181, 20))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x ["some" + "method"]() {}
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>["some" + "method"] : Symbol(["some" + "method"], Decl(decoratorsOnComputedProperties.ts, 182, 27))

    [fieldNameA]: any;
>[fieldNameA] : Symbol([fieldNameA], Decl(decoratorsOnComputedProperties.ts, 183, 31))
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameB] : Symbol([fieldNameB], Decl(decoratorsOnComputedProperties.ts, 184, 22))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    ["some" + "method2"]() {}
>["some" + "method2"] : Symbol(["some" + "method2"], Decl(decoratorsOnComputedProperties.ts, 185, 25))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>[fieldNameC] : Symbol([fieldNameC], Decl(decoratorsOnComputedProperties.ts, 186, 29))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

};
