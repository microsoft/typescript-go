--- old.exportEqualsProperty.symbols
+++ new.exportEqualsProperty.symbols
@@= skipped -24, +24 lines =@@
 >b : Symbol(b, Decl(index.ts, 7, 5))
 >B : Symbol(B, Decl(index.ts, 4, 18))
 >B : Symbol(B, Decl(index.ts, 4, 18))
->B.b : Symbol(B.b, Decl(a.ts, 2, 37))
+>B.b : Symbol(b, Decl(a.ts, 2, 37))
 >B : Symbol(B, Decl(index.ts, 4, 18))
->b : Symbol(B.b, Decl(a.ts, 2, 37))
+>b : Symbol(b, Decl(a.ts, 2, 37))
 
 import fooLength = require("./b");
 >fooLength : Symbol(fooLength, Decl(index.ts, 7, 24))
@@= skipped -26, +26 lines =@@
 >"foobar" : Symbol("foobar", Decl(declarations.d.ts, 3, 1))
 
     export = foo.bar;
->foo.bar : Symbol(foo.bar, Decl(declarations.d.ts, 0, 22))
+>foo.bar : Symbol(bar, Decl(declarations.d.ts, 0, 22))
 >foo : Symbol(foo, Decl(declarations.d.ts, 0, 0))
->bar : Symbol(foo.bar, Decl(declarations.d.ts, 0, 22))
+>bar : Symbol(bar, Decl(declarations.d.ts, 0, 22))
 }
 
 declare module "foobarx" {
 >"foobarx" : Symbol("foobarx", Decl(declarations.d.ts, 7, 1))
 
     export = foo.bar.X;
->foo.bar.X : Symbol(foo.bar.X, Decl(declarations.d.ts, 0, 27), Decl(declarations.d.ts, 2, 16))
->foo.bar : Symbol(foo.bar, Decl(declarations.d.ts, 0, 22))
+>foo.bar.X : Symbol(X, Decl(declarations.d.ts, 0, 27), Decl(declarations.d.ts, 2, 16))
+>foo.bar : Symbol(bar, Decl(declarations.d.ts, 0, 22))
 >foo : Symbol(foo, Decl(declarations.d.ts, 0, 0))
->bar : Symbol(foo.bar, Decl(declarations.d.ts, 0, 22))
->X : Symbol(foo.bar.X, Decl(declarations.d.ts, 0, 27), Decl(declarations.d.ts, 2, 16))
+>bar : Symbol(bar, Decl(declarations.d.ts, 0, 22))
+>X : Symbol(X, Decl(declarations.d.ts, 0, 27), Decl(declarations.d.ts, 2, 16))
 }
 
 === a.ts ===
@@= skipped -29, +29 lines =@@
 >b : Symbol(b, Decl(a.ts, 2, 37))
 }
 export = A.B;
->A.B : Symbol(A.B, Decl(a.ts, 0, 13), Decl(a.ts, 1, 48))
+>A.B : Symbol(B, Decl(a.ts, 0, 13), Decl(a.ts, 1, 48))
 >A : Symbol(A, Decl(a.ts, 0, 0))
->B : Symbol(A.B, Decl(a.ts, 0, 13), Decl(a.ts, 1, 48))
+>B : Symbol(B, Decl(a.ts, 0, 13), Decl(a.ts, 1, 48))
 
 === b.ts ===
 export = "foo".length;
->"foo".length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>"foo".length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
