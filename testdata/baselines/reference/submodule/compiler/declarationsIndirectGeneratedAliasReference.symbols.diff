--- old.declarationsIndirectGeneratedAliasReference.symbols
+++ new.declarationsIndirectGeneratedAliasReference.symbols
@@= skipped -4, +4 lines =@@
 >Ctor : Symbol(Ctor, Decl(ctor.d.ts, 0, 0), Decl(ctor.d.ts, 7, 12))
 
     x: number;
->x : Symbol(Ctor.x, Decl(ctor.d.ts, 0, 23))
+>x : Symbol(x, Decl(ctor.d.ts, 0, 23))
 }
 export type ExtendedCtor<T> = {x: number, ext: T};
 >ExtendedCtor : Symbol(ExtendedCtor, Decl(ctor.d.ts, 2, 1))
@@= skipped -13, +13 lines =@@
 >CtorConstructor : Symbol(CtorConstructor, Decl(ctor.d.ts, 3, 50))
 
     extends<T>(x: T): ExtendedCtor<T extends unknown ? Ctor : undefined>;
->extends : Symbol(CtorConstructor.extends, Decl(ctor.d.ts, 4, 34))
+>extends : Symbol(extends, Decl(ctor.d.ts, 4, 34))
 >T : Symbol(T, Decl(ctor.d.ts, 5, 12))
 >x : Symbol(x, Decl(ctor.d.ts, 5, 15))
 >T : Symbol(T, Decl(ctor.d.ts, 5, 12))
@@= skipped -25, +25 lines =@@
 
 const Ctor = ns.default;
 >Ctor : Symbol(Ctor, Decl(index.ts, 1, 5))
->ns.default : Symbol(ns.default, Decl(index.d.ts, 0, 30))
+>ns.default : Symbol(default, Decl(index.d.ts, 0, 30))
 >ns : Symbol(ns, Decl(index.ts, 0, 6))
->default : Symbol(ns.default, Decl(index.d.ts, 0, 30))
+>default : Symbol(default, Decl(index.d.ts, 0, 30))
 
 export const MyComp = Ctor.extends({foo: "bar"});
 >MyComp : Symbol(MyComp, Decl(index.ts, 2, 12))
->Ctor.extends : Symbol(CtorConstructor.extends, Decl(ctor.d.ts, 4, 34))
+>Ctor.extends : Symbol(extends, Decl(ctor.d.ts, 4, 34))
 >Ctor : Symbol(Ctor, Decl(index.ts, 1, 5))
->extends : Symbol(CtorConstructor.extends, Decl(ctor.d.ts, 4, 34))
+>extends : Symbol(extends, Decl(ctor.d.ts, 4, 34))
 >foo : Symbol(foo, Decl(index.ts, 2, 36))
 
