--- old.genericDefaults.js
+++ new.genericDefaults.js
@@= skipped -811, +811 lines =@@
 f20(a);
 f20(a, b);
 f20(a, b, d);
-var i00c00 = x.a;
-var i00c01 = x.a;
-var i01c00 = x.a;
-var i01c01 = x.a;
-var i02c00 = x.a;
-var i02c01 = x.a;
-var i02c02 = x.a;
-var i02c03 = x.a;
-var i02c04 = x.a;
-var i03c00 = x.a;
-var i03c01 = x.a;
-var i03c02 = x.a;
-var i03c03 = x.a;
-var i03c04 = x.a;
-var i05c00 = x.a;
-var i05c01 = x.a;
-var i06c00 = x.a;
-var i06c01 = x.a;
-var i06c02 = x.a;
-var i07c00 = x.a;
-var i07c01 = x.b;
-var i07c02 = x.a;
-var i07c03 = x.b;
-var Base01c00 = new Base01();
-var Base01c01 = new Base01(1);
-var Base01c02 = new Base01();
-var Base01c03 = new Base01(1);
-var Derived01c00 = new Derived01();
-var Derived01c01 = new Derived01(1);
-var Derived01c02 = new Derived01();
-var Derived01c03 = new Derived01(1);
-var Derived02c00 = new Derived02();
-var Derived02c01 = new Derived02(1);
-var Derived02c02 = new Derived02();
-var Derived02c03 = new Derived02(1);
-var Derived03c00 = new Derived03(ab);
-var Derived03c01 = Derived03c00.a;
-var t00c00 = x.a;
-var t00c01 = x.a;
-var t01c00 = x.a;
-var t01c01 = x.a;
-var t02c00 = x.a;
-var t02c01 = x.a;
-var t02c02 = x.a;
-var t02c03 = x.a;
-var t02c04 = x.a;
-var t03c00 = x.a;
-var t03c01 = x.a;
-var t03c02 = x.a;
-var t03c03 = x.a;
-var t03c04 = x.a;
+const i00c00 = x.a;
+const i00c01 = x.a;
+const i01c00 = x.a;
+const i01c01 = x.a;
+const i02c00 = x.a;
+const i02c01 = x.a;
+const i02c02 = x.a;
+const i02c03 = x.a;
+const i02c04 = x.a;
+const i03c00 = x.a;
+const i03c01 = x.a;
+const i03c02 = x.a;
+const i03c03 = x.a;
+const i03c04 = x.a;
+const i05c00 = x.a;
+const i05c01 = x.a;
+const i06c00 = x.a;
+const i06c01 = x.a;
+const i06c02 = x.a;
+const i07c00 = x.a;
+const i07c01 = x.b;
+const i07c02 = x.a;
+const i07c03 = x.b;
+const Base01c00 = new Base01();
+const Base01c01 = new Base01(1);
+const Base01c02 = new Base01();
+const Base01c03 = new Base01(1);
+const Derived01c00 = new Derived01();
+const Derived01c01 = new Derived01(1);
+const Derived01c02 = new Derived01();
+const Derived01c03 = new Derived01(1);
+const Derived02c00 = new Derived02();
+const Derived02c01 = new Derived02(1);
+const Derived02c02 = new Derived02();
+const Derived02c03 = new Derived02(1);
+const Derived03c00 = new Derived03(ab);
+const Derived03c01 = Derived03c00.a;
+const t00c00 = x.a;
+const t00c01 = x.a;
+const t01c00 = x.a;
+const t01c01 = x.a;
+const t02c00 = x.a;
+const t02c01 = x.a;
+const t02c02 = x.a;
+const t02c03 = x.a;
+const t02c04 = x.a;
+const t03c00 = x.a;
+const t03c01 = x.a;
+const t03c02 = x.a;
+const t03c03 = x.a;
+const t03c04 = x.a;


 //// [genericDefaults.d.ts]
@@= skipped -81, +81 lines =@@
 declare const ab: AB;
 declare const bc: BC;
 declare const x: any;
+// function without type parameters
 declare function f00(a?: A): A;
+// function with a type parameter without a default
 declare function f01<T>(a?: T): T;
+// function with a type paramter with a default
 declare function f02<T = A>(a?: T): T;
+// function with a type parameter with a default that refers to itself
 declare function f03<T = T>(a?: T): T;
+// function with a type paramter without a default and a type parameter with a default
 declare function f04<T, U = B>(a?: T, b?: U): [T, U];
+// function with a type parameter without a default and a type parameter with a default that refers to an earlier type parameter
 declare function f05<T, U = T>(a?: T, b?: U): [T, U];
+// function with a type parameter with a default that refers to an earlier type parameter with a default
 declare function f06<T = A, U = T>(a?: T, b?: U): [T, U];
+// function with a type parameter without a default and a type parameter with a default that refers to an earlier type parameter with a default
 declare function f07<T, U = B, V = U>(a?: T, b?: U, c?: V): [T, U, V];
+// function with a type parameter with a default that refers to an earlier type parameter with a constraint
 declare function f08<T extends A, U = T>(a?: T, b?: U): [T, U];
+// function with a type parameter with a constraint and a default that refers to an earlier type parameter
 declare function f09<T, U extends T = T>(a?: T, b?: U): [T, U];
+// function with a type parameter with a constraint and a default that refers to an earlier type parameter with a constraint
 declare function f10<T extends A, U extends T = T>(a?: T, b?: U): [T, U];
+// function with a type parameter with a default that refers to an earier type parameter in a union
 declare function f11<T, U = T | B>(a?: T, b?: U): [T, U];
+// function with a type parameter with a default that refers to an earlier type parameter in an intersection
 declare function f12<T, U = T & B>(a?: T, b?: U): [T, U];
+// function with a type parameter with a default that refers to a later type parameter with a default
 declare function f13<T = U, U = B>(a?: T, b?: U): [T, U];
+// function with a type parameter without a default and a type parameter with a default that refers to a later type parameter with a default
 declare function f14<T, U = V, V = C>(a?: T, b?: U, c?: V): [T, U, V];
+// function with two type parameters with defaults that mutually refer to each other
 declare function f15<T = U, U = T>(a?: T, b?: U): [T, U];
+// function with a type parameter without a default and two type parameters with defaults that mutually refer to each other
 declare function f16<T, U = V, V = U>(a?: T, b?: U, c?: V): [T, U, V];
+// function with a type parameter with a default that refers to a later type parameter with a default that refers to an earlier type parameter in a union
 declare function f17<T = U, U = T | B>(a?: T, b?: U): [T, U];
+// function with a type parameter without a default and a type parameter with a default that refers to a later type parameter with a default that refers to an earlier type parameter in a union
 declare function f18<T, U = V, V = U | C>(a?: T, b?: U, c?: V): [T, U, V];
+// function with a type parameter with a default that refers to a later type parameter with a default that refers to an earlier type parameter in an intersection
 declare function f19<T = U, U = T & B>(a?: T, b?: U): [T, U];
+// function with a type parameter without a default and a type parameter with a default that refers to a later type parameter with a default that refers to an earlier type parameter in an intersection
 declare function f20<T, U = V, V = U & C>(a?: T, b?: U, c?: V): [T, U, V];
 interface i00<T = number> {
     a: T;
@@= skipped -80, +101 lines =@@
     a: T;
 }
 interface Base01Constructor {
-    new <T = number>(a?: T): Base01<T>;
+    new <T = number>(a?: T);
 }
 declare const Base01: Base01Constructor;
 declare const Base01c00: Base01<number>;
@@= skipped -19, +19 lines =@@
 declare const Derived02c01: Derived02<number>;
 declare const Derived02c02: Derived02<number>;
 declare const Derived02c03: Derived02<number>;
+// https://github.com/Microsoft/TypeScript/issues/16211
 interface Base02 {
 }
 interface Base02Constructor {
-    new <T = A>(a: T): Base02 & T;
+    new <T = A>(a: T);
 }
 declare const Base02: Base02Constructor;
 declare class Derived03 extends Base02 {
@@= skipped -37, +38 lines =@@
 declare const t03c02: [number, number];
 declare const t03c03: [1, 1];
 declare const t03c04: [number, 1];
+// https://github.com/Microsoft/TypeScript/issues/16221
 interface SelfReference<T = SelfReference<string>> {
 }