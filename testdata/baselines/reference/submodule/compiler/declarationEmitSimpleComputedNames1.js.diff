--- old.declarationEmitSimpleComputedNames1.js
+++ new.declarationEmitSimpleComputedNames1.js
@@= skipped -34, +34 lines =@@

 //// [declarationEmitSimpleComputedNames1.js]
 "use strict";
-var _a;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.instanceLookup = exports.staticLookup = exports.Holder = exports.conatainer = exports.fieldName = void 0;
 exports.fieldName = Math.random() > 0.5 ? "f1" : "f2";
-exports.conatainer = (_a = {},
-    _a[exports.fieldName] = function () {
+exports.conatainer = {
+    [exports.fieldName]() {
         return "result";
-    },
-    _a);
-var classFieldName = Math.random() > 0.5 ? "g1" : "g2";
-var otherField = classFieldName === "g1" ? "g2" : "g1";
-var staticField = Math.random() > 0.5 ? "s1" : "s2";
-var Holder = /** @class */ (function () {
-    function Holder() {
     }
-    Holder.prototype[classFieldName] = function () {
+};
+const classFieldName = Math.random() > 0.5 ? "g1" : "g2";
+const otherField = classFieldName === "g1" ? "g2" : "g1";
+const staticField = Math.random() > 0.5 ? "s1" : "s2";
+class Holder {
+    [classFieldName]() {
         return "value";
-    };
-    Holder.prototype[otherField] = function () {
+    }
+    [otherField]() {
         return 42;
-    };
-    Holder[staticField] = function () {
+    }
+    static [staticField]() {
         return { static: true };
-    };
-    Holder[staticField] = function () {
+    }
+    static [staticField]() {
         return { static: "sometimes" };
-    };
-    return Holder;
-}());
+    }
+}
 exports.Holder = Holder;
 /**
  * Could be `"prototype"`, so all static string indexers include the instance type
@@= skipped -40, +36 lines =@@
 //// [declarationEmitSimpleComputedNames1.d.ts]
 export declare const fieldName: string;
 export declare const conatainer: {
-    [fieldName]: () => string;
+    [x: string]: () => string;
 };
-declare const classFieldName: string;
-declare const otherField: string;
-declare const staticField: string;
 export declare class Holder {
-    static [staticField]: () => {
-        static: boolean;
-    };
-    static [staticField]: () => {
-        static: string;
-    };
-    [classFieldName]: () => string;
-    [otherField]: () => number;
+    static [x: string]: Holder | (typeof Holder)[typeof staticField] | (typeof Holder)[typeof staticField];
+    [x: string]: (() => string) | (() => number);
 }
 /**
  * Could be `"prototype"`, so all static string indexers include the instance type
  */
-export declare const staticLookup: Holder | (() => {
-    static: boolean;
-}) | (() => {
-    static: string;
-});
+export declare const staticLookup: Holder | (typeof Holder)[typeof staticField] | (typeof Holder)[typeof staticField];
 export declare const instanceLookup: (() => string) | (() => number);
-export {};