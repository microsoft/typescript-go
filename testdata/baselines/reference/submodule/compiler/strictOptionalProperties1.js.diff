--- old.strictOptionalProperties1.js
+++ new.strictOptionalProperties1.js
@@= skipped -237, +237 lines =@@


 //// [strictOptionalProperties1.js]
-"use strict";
-var __assign = (this && this.__assign) || function () {
-    __assign = Object.assign || function(t) {
-        for (var s, i = 1, n = arguments.length; i < n; i++) {
-            s = arguments[i];
-            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
-                t[p] = s[p];
-        }
-        return t;
-    };
-    return __assign.apply(this, arguments);
-};
 function f1(obj) {
     let a = obj.a; // string | undefined
     let b = obj.b; // string | undefined
@@= skipped -92, +80 lines =@@
 }
 const defaultProps = { foo: 'foo' };
 const inputProps = { foo: undefined, bar: 'bar' };
-const completeProps = __assign(__assign({}, defaultProps), inputProps);
+const completeProps = { ...defaultProps, ...inputProps };
 // Example from #13195
 const t1 = [1];
 const t2 = [1, undefined];
@@= skipped -8, +8 lines =@@
 const t4 = [1, undefined, undefined];
 // Example from #13195
 const x = { foo: undefined };
-const y = __assign({ foo: 123 }, x);
+const y = { foo: 123, ...x };
 f11(ox1); // string
 f11(ox2); // string | undefined
 f11(ox3); // string
@@= skipped -56, +56 lines =@@
 declare function f4a(t1: [number, string?], t2: [number, string?, string?]): void;
 declare function f5(t: [number, string?, boolean?]): void;
 declare function f6(): void;
+// Example from #13195
 type Props = {
     foo: string;
     bar: string;
@@= skipped -11, +12 lines =@@
 declare const defaultProps: Pick<Props, 'foo'>;
 declare const inputProps: InputProps;
 declare const completeProps: Props;
+// Example from #13195
 declare const t1: [number, string?, boolean?];
 declare const t2: [number, string?, boolean?];
 declare const t3: [number, string?, boolean?];
 declare const t4: [number, string?, boolean?];
+// Example from #13195
 declare const x: {
     foo?: number;
 };
 declare const y: {
     foo: number;
 };
+// Index signatures and strict optional properties
 interface Test {
     [key: string]: string;
-    foo?: string;
-    bar?: string | undefined;
+    foo?: string; // Should be ok
+    bar?: string | undefined; // Error
 }
+// Strict optional properties and inference
 declare let ox1: {
     p: string;
 };
@@= skipped -36, +40 lines =@@
 }): T;
 declare function f12<T>(x: [T?]): T;
 declare function f13<T>(x: Partial<T>): T;
+// Repro from #44388
 type Undefinable<T> = T | undefined;
 declare function expectNotUndefined<T>(value: Undefinable<T>): T;
 interface Bar {
@@= skipped -18, +19 lines =@@
 declare const e: string | boolean | undefined;
 declare const u1: U1;
 declare let u2: U2;
+// Repro from #44437
 declare var a: {
     [x: string]: number | string;
 };
@@= skipped -19, +20 lines =@@
     a: number;
     b?: string | undefined;
 };
+// Repro from #46004
 interface PropsFromReact {
     onClick?: () => void;
 }
@@= skipped -10, +11 lines =@@
 interface NavBottomListItem extends TheTypeFromMaterialUI {
     value: string;
 }
-type UA = undefined;
+// Repro from #46004
+type UA = undefined; // Explicit undefined type
 type UB = {
     x?: never;
-}['x'];
-type UC = UA & UB;
+}['x']; // undefined from missing property
+type UC = UA & UB; // undefined