--- old.declarationEmitStringEnumUsedInNonlocalSpread.js
+++ new.declarationEmitStringEnumUsedInNonlocalSpread.js
@@= skipped -34, +34 lines =@@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.A = void 0;
-var A = /** @class */ (function () {
-    function A() {
+class A {
+    getA() {
+        return {
+            ["123123" /* TestEnum.Test1 */]: '123',
+            ["12312312312" /* TestEnum.Test2 */]: '123',
+        };
     }
-    A.prototype.getA = function () {
-        var _a;
-        return _a = {},
-            _a["123123" /* TestEnum.Test1 */] = '123',
-            _a["12312312312" /* TestEnum.Test2 */] = '123',
-            _a;
-    };
-    return A;
-}());
+}
 exports.A = A;
 //// [index.js]
 "use strict";
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 var __assign = (this && this.__assign) || function () {
     __assign = Object.assign || function(t) {
         for (var s, i = 1, n = arguments.length; i < n; i++) {
@@= skipped -43, +24 lines =@@
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.B = void 0;
-var class_1 = require("./class");
-var B = /** @class */ (function (_super) {
-    __extends(B, _super);
-    function B() {
-        return _super !== null && _super.apply(this, arguments) || this;
+const class_1 = require("./class");
+class B extends class_1.A {
+    getA() {
+        return __assign(__assign({}, super.getA()), { a: '123' });
     }
-    B.prototype.getA = function () {
-        return __assign(__assign({}, _super.prototype.getA.call(this)), { a: '123' });
-    };
-    return B;
-}(class_1.A));
+}
 exports.B = B;


@@= skipped -30, +25 lines =@@
 import { A } from './class';
 export declare class B extends A {
     getA(): {
-        a: string;
         "123123": string;
         "12312312312": string;
+        a: string;
     };
 }