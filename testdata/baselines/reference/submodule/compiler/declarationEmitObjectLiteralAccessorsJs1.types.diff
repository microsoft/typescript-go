--- old.declarationEmitObjectLiteralAccessorsJs1.types
+++ new.declarationEmitObjectLiteralAccessorsJs1.types
@@= skipped -3, +3 lines =@@
 // same type accessors
 export const obj1 = {
 >obj1 : { x: string; }
->     : ^^^^^^^^^^^^^^
 >{  /**   * my awesome getter (first in source order)   * @returns {string}   */  get x() {    return "";  },  /**    * my awesome setter (second in source order)   * @param {string} a   */  set x(a) {},} : { x: string; }
->                                                                                                                                                                                                            : ^^^^^^^^^^^^^^
 
   /**
    * my awesome getter (first in source order)
@@= skipped -10, +8 lines =@@
    */
   get x() {
 >x : string
->  : ^^^^^^
 
     return "";
 >"" : ""
->   : ^^
 
   },
   /** 
@@= skipped -13, +11 lines =@@
    */
   set x(a) {},
 >x : string
->  : ^^^^^^
 >a : string
->  : ^^^^^^
 
 };
 
 // divergent accessors
 export const obj2 = {
->obj2 : { get x(): string; set x(a: number); }
->     : ^^^^^^^^^^^      ^^^^^^^^ ^^      ^^^^
->{  /**    * my awesome getter   * @returns {string}   */  get x() {    return "";  },  /**    * my awesome setter   * @param {number} a   */  set x(a) {},} : { get x(): string; set x(a: number); }
->                                                                                                                                                            : ^^^^^^^^^^^      ^^^^^^^^ ^^      ^^^^
+>obj2 : { x: string; }
+>{  /**    * my awesome getter   * @returns {string}   */  get x() {    return "";  },  /**    * my awesome setter   * @param {number} a   */  set x(a) {},} : { x: string; }
 
   /** 
    * my awesome getter
@@= skipped -19, +15 lines =@@
    */
   get x() {
 >x : string
->  : ^^^^^^
 
     return "";
 >"" : ""
->   : ^^
 
   },
   /** 
@@= skipped -13, +11 lines =@@
    */
   set x(a) {},
 >x : string
->  : ^^^^^^
->a : number
->  : ^^^^^^
+>a : string
 
 };
 
 export const obj3 = {
 >obj3 : { readonly x: string; }
->     : ^^^^^^^^^^^^^^^^^^^^^^^
 >{  /**   * my awesome getter   * @returns {string}   */  get x() {    return "";  },} : { readonly x: string; }
->                                                                                      : ^^^^^^^^^^^^^^^^^^^^^^^
 
   /**
    * my awesome getter
@@= skipped -18, +14 lines =@@
    */
   get x() {
 >x : string
->  : ^^^^^^
 
     return "";
 >"" : ""
->   : ^^
 
   },
 };
 
 export const obj4 = {
->obj4 : { x: number; }
->     : ^^^^^^^^^^^^^^
->{  /**   * my awesome setter   * @param {number} a   */  set x(a) {},} : { x: number; }
->                                                                       : ^^^^^^^^^^^^^^
+>obj4 : { x: any; }
+>{  /**   * my awesome setter   * @param {number} a   */  set x(a) {},} : { x: any; }
 
   /**
    * my awesome setter
    * @param {number} a
    */
   set x(a) {},
->x : number
->  : ^^^^^^
->a : number
->  : ^^^^^^
+>x : any
+>a : any
 
 };
 
