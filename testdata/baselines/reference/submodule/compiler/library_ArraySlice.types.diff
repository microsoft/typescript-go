--- old.library_ArraySlice.types
+++ new.library_ArraySlice.types
@@= skipped -3, +3 lines =@@
 // Array.prototype.slice can have zero, one, or two arguments
 Array.prototype.slice();
 >Array.prototype.slice() : any[]
->                        : ^^^^^
 >Array.prototype.slice : (start?: number, end?: number) => any[]
->                      : ^     ^^^      ^^   ^^^      ^^^^^^^^^^
 >Array.prototype : any[]
->                : ^^^^^
 >Array : ArrayConstructor
->      : ^^^^^^^^^^^^^^^^
 >prototype : any[]
->          : ^^^^^
 >slice : (start?: number, end?: number) => any[]
->      : ^     ^^^      ^^   ^^^      ^^^^^^^^^^
 
 Array.prototype.slice(0);
 >Array.prototype.slice(0) : any[]
->                         : ^^^^^
 >Array.prototype.slice : (start?: number, end?: number) => any[]
->                      : ^     ^^^      ^^   ^^^      ^^^^^^^^^^
 >Array.prototype : any[]
->                : ^^^^^
 >Array : ArrayConstructor
->      : ^^^^^^^^^^^^^^^^
 >prototype : any[]
->          : ^^^^^
 >slice : (start?: number, end?: number) => any[]
->      : ^     ^^^      ^^   ^^^      ^^^^^^^^^^
 >0 : 0
->  : ^
 
 Array.prototype.slice(0, 1);
 >Array.prototype.slice(0, 1) : any[]
->                            : ^^^^^
 >Array.prototype.slice : (start?: number, end?: number) => any[]
->                      : ^     ^^^      ^^   ^^^      ^^^^^^^^^^
 >Array.prototype : any[]
->                : ^^^^^
 >Array : ArrayConstructor
->      : ^^^^^^^^^^^^^^^^
 >prototype : any[]
->          : ^^^^^
 >slice : (start?: number, end?: number) => any[]
->      : ^     ^^^      ^^   ^^^      ^^^^^^^^^^
 >0 : 0
->  : ^
 >1 : 1
->  : ^
 
