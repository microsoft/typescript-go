--- old.genericInstanceOf.symbols
+++ new.genericInstanceOf.symbols
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(genericInstanceOf.ts, 4, 8))
 
     constructor(public a: T, public b: F) {}
->a : Symbol(C.a, Decl(genericInstanceOf.ts, 5, 16))
+>a : Symbol(a, Decl(genericInstanceOf.ts, 5, 16))
 >T : Symbol(T, Decl(genericInstanceOf.ts, 4, 8))
->b : Symbol(C.b, Decl(genericInstanceOf.ts, 5, 28))
+>b : Symbol(b, Decl(genericInstanceOf.ts, 5, 28))
 >F : Symbol(F, Decl(genericInstanceOf.ts, 0, 0))
 
     foo() {
->foo : Symbol(C.foo, Decl(genericInstanceOf.ts, 5, 44))
+>foo : Symbol(foo, Decl(genericInstanceOf.ts, 5, 44))
 
         if (this.a instanceof this.b) {
->this.a : Symbol(C.a, Decl(genericInstanceOf.ts, 5, 16))
+>this.a : Symbol(a, Decl(genericInstanceOf.ts, 5, 16))
 >this : Symbol(C, Decl(genericInstanceOf.ts, 2, 1))
->a : Symbol(C.a, Decl(genericInstanceOf.ts, 5, 16))
->this.b : Symbol(C.b, Decl(genericInstanceOf.ts, 5, 28))
+>a : Symbol(a, Decl(genericInstanceOf.ts, 5, 16))
+>this.b : Symbol(b, Decl(genericInstanceOf.ts, 5, 28))
 >this : Symbol(C, Decl(genericInstanceOf.ts, 2, 1))
->b : Symbol(C.b, Decl(genericInstanceOf.ts, 5, 28))
+>b : Symbol(b, Decl(genericInstanceOf.ts, 5, 28))
         }
     }
 }
