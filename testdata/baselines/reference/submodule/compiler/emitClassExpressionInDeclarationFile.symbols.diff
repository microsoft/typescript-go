--- old.emitClassExpressionInDeclarationFile.symbols
+++ new.emitClassExpressionInDeclarationFile.symbols
@@= skipped -4, +4 lines =@@
 >simpleExample : Symbol(simpleExample, Decl(emitClassExpressionInDeclarationFile.ts, 0, 10))
 
     static getTags() { }
->getTags : Symbol(simpleExample.getTags, Decl(emitClassExpressionInDeclarationFile.ts, 0, 34))
+>getTags : Symbol(getTags, Decl(emitClassExpressionInDeclarationFile.ts, 0, 34))
 
     tags() { }
->tags : Symbol(simpleExample.tags, Decl(emitClassExpressionInDeclarationFile.ts, 1, 24))
+>tags : Symbol(tags, Decl(emitClassExpressionInDeclarationFile.ts, 1, 24))
 }
 export var circularReference = class C {
 >circularReference : Symbol(circularReference, Decl(emitClassExpressionInDeclarationFile.ts, 4, 10))
 >C : Symbol(C, Decl(emitClassExpressionInDeclarationFile.ts, 4, 30))
 
     static getTags(c: C): C { return c }
->getTags : Symbol(C.getTags, Decl(emitClassExpressionInDeclarationFile.ts, 4, 40))
+>getTags : Symbol(getTags, Decl(emitClassExpressionInDeclarationFile.ts, 4, 40))
 >c : Symbol(c, Decl(emitClassExpressionInDeclarationFile.ts, 5, 19))
 >C : Symbol(C, Decl(emitClassExpressionInDeclarationFile.ts, 4, 30))
 >C : Symbol(C, Decl(emitClassExpressionInDeclarationFile.ts, 4, 30))
 >c : Symbol(c, Decl(emitClassExpressionInDeclarationFile.ts, 5, 19))
 
     tags(c: C): C { return c }
->tags : Symbol(C.tags, Decl(emitClassExpressionInDeclarationFile.ts, 5, 40))
+>tags : Symbol(tags, Decl(emitClassExpressionInDeclarationFile.ts, 5, 40))
 >c : Symbol(c, Decl(emitClassExpressionInDeclarationFile.ts, 6, 9))
 >C : Symbol(C, Decl(emitClassExpressionInDeclarationFile.ts, 4, 30))
 >C : Symbol(C, Decl(emitClassExpressionInDeclarationFile.ts, 4, 30))
@@= skipped -29, +29 lines =@@
 >FooItem : Symbol(FooItem, Decl(emitClassExpressionInDeclarationFile.ts, 7, 1))
 
     foo(): void { }
->foo : Symbol(FooItem.foo, Decl(emitClassExpressionInDeclarationFile.ts, 10, 22))
+>foo : Symbol(foo, Decl(emitClassExpressionInDeclarationFile.ts, 10, 22))
 
     name?: string;
->name : Symbol(FooItem.name, Decl(emitClassExpressionInDeclarationFile.ts, 11, 19))
+>name : Symbol(name, Decl(emitClassExpressionInDeclarationFile.ts, 11, 19))
 }
 
 export type Constructor<T> = new(...args: any[]) => T;
@@= skipped -24, +24 lines =@@
 >Base : Symbol(Base, Decl(emitClassExpressionInDeclarationFile.ts, 16, 57))
 
         static getTags(): void { }
->getTags : Symbol((Anonymous class).getTags, Decl(emitClassExpressionInDeclarationFile.ts, 17, 31))
+>getTags : Symbol(getTags, Decl(emitClassExpressionInDeclarationFile.ts, 17, 31))
 
         tags(): void { }
->tags : Symbol((Anonymous class).tags, Decl(emitClassExpressionInDeclarationFile.ts, 18, 34))
+>tags : Symbol(tags, Decl(emitClassExpressionInDeclarationFile.ts, 18, 34))
     }
 }
 
@@= skipped -17, +17 lines =@@
 >Test : Symbol(Test, Decl(emitClassExpressionInDeclarationFile.ts, 21, 1))
 
 Test.getTags()
->Test.getTags : Symbol((Anonymous class).getTags, Decl(emitClassExpressionInDeclarationFile.ts, 17, 31))
+>Test.getTags : Symbol(getTags, Decl(emitClassExpressionInDeclarationFile.ts, 17, 31))
 >Test : Symbol(Test, Decl(emitClassExpressionInDeclarationFile.ts, 21, 1))
->getTags : Symbol((Anonymous class).getTags, Decl(emitClassExpressionInDeclarationFile.ts, 17, 31))
+>getTags : Symbol(getTags, Decl(emitClassExpressionInDeclarationFile.ts, 17, 31))
 
 test.tags();
->test.tags : Symbol((Anonymous class).tags, Decl(emitClassExpressionInDeclarationFile.ts, 18, 34))
+>test.tags : Symbol(tags, Decl(emitClassExpressionInDeclarationFile.ts, 18, 34))
 >test : Symbol(test, Decl(emitClassExpressionInDeclarationFile.ts, 25, 5))
->tags : Symbol((Anonymous class).tags, Decl(emitClassExpressionInDeclarationFile.ts, 18, 34))
+>tags : Symbol(tags, Decl(emitClassExpressionInDeclarationFile.ts, 18, 34))
 
