--- old.deeplyNestedMappedTypes.types
+++ new.deeplyNestedMappedTypes.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/deeplyNestedMappedTypes.ts] ////
 
-=== Performance Stats ===
-Type Count: 1,000
-Instantiation count: 10,000
-
 === deeplyNestedMappedTypes.ts ===
 // Simplified repro from #55535
 
 type Id<T> = { [K in keyof T]: Id<T[K]> };
 >Id : Id<T>
+>T : T
+>K : K
 
 type Foo1 = Id<{ x: { y: { z: { a: { b: { c: number } } } } } }>;
 >Foo1 : Id<{ x: { y: { z: { a: { b: { c: number; }; }; }; }; }; }>
@@= skipped -36, +34 lines =@@
 
 type Id2<T> = { [K in keyof T]: Id2<Id2<T[K]>> };
 >Id2 : Id2<T>
+>T : T
+>K : K
 
 type Foo3 = Id2<{ x: { y: { z: { a: { b: { c: number } } } } } }>;
 >Foo3 : Id2<{ x: { y: { z: { a: { b: { c: number; }; }; }; }; }; }>
@@= skipped -30, +32 lines =@@
 
 type RequiredDeep<T> = { [K in keyof T]-?: RequiredDeep<T[K]> };
 >RequiredDeep : RequiredDeep<T>
+>T : T
+>K : K
 
 type A = { a?: { b: { c: 1 | { d: 2000 } }}}
 >A : A
 >a : { b: { c: 1 | { d: 2000; }; }; } | undefined
 >b : { c: 1 | { d: 2000; }; }
->c : { d: 2000; } | 1
+>c : 1 | { d: 2000; }
 >d : 2000
 
 type B = { a?: { b: { c: { d: { e: { f: { g: 2 }}}}, x: 1000 }}}
@@= skipped -48, +50 lines =@@
 
 type NestedRecord<K extends string, V> = K extends `${infer K0}.${infer KR}` ? { [P in K0]: NestedRecord<KR, V> } : Record<K, V>;
 >NestedRecord : NestedRecord<K, V>
+>K : K
+>V : V
+>K0 : K0
+>KR : KR
+>P : P
 
 type Bar1 = NestedRecord<"x.y.z.a.b.c", number>;
 >Bar1 : { x: { y: { z: { a: { b: Record<"c", number>; }; }; }; }; }
@@= skipped -18, +23 lines =@@
 
 export type Input = Static<typeof Input>
 >Input : { level1: { level2: { foo: string; }; }; }
->Input : TObject<{ level1: TObject<{ level2: TObject<{ foo: TString; }>; }>; }>
 
 export const Input = Type.Object({
 >Input : TObject<{ level1: TObject<{ level2: TObject<{ foo: TString; }>; }>; }>
@@= skipped -39, +38 lines =@@
 
 export type Output = Static<typeof Output>
 >Output : { level1: { level2: { foo: string; bar: string; }; }; }
->Output : TObject<{ level1: TObject<{ level2: TObject<{ foo: TString; bar: TString; }>; }>; }>
 
 export const Output = Type.Object({
 >Output : TObject<{ level1: TObject<{ level2: TObject<{ foo: TString; bar: TString; }>; }>; }>
@@= skipped -45, +44 lines =@@
 })
 
 function problematicFunction1(ors: Input[]): Output[] {
->problematicFunction1 : (ors: Input[]) => Output[]
+>problematicFunction1 : (ors: { level1: { level2: { foo: string; }; }; }[]) => { level1: { level2: { foo: string; bar: string; }; }; }[]
 >ors : { level1: { level2: { foo: string; }; }; }[]
 
     return ors;  // Error
@@= skipped -8, +8 lines =@@
 }
 
 function problematicFunction2<T extends Output[]>(ors: Input[]): T {
->problematicFunction2 : <T extends Output[]>(ors: Input[]) => T
+>problematicFunction2 : <T extends { level1: { level2: { foo: string; bar: string; }; }; }[]>(ors: { level1: { level2: { foo: string; }; }; }[]) => T
+>T : T
 >ors : { level1: { level2: { foo: string; }; }; }[]
 
     return ors;  // Error
@@= skipped -8, +9 lines =@@
 }
 
 function problematicFunction3(ors: (typeof Input.static)[]): Output[] {
->problematicFunction3 : (ors: (typeof Input.static)[]) => Output[]
+>problematicFunction3 : (ors: { level1: { level2: { foo: string; }; }; }[]) => { level1: { level2: { foo: string; bar: string; }; }; }[]
 >ors : { level1: { level2: { foo: string; }; }; }[]
->Input.static : { level1: { level2: { foo: string; }; }; }
 >Input : TObject<{ level1: TObject<{ level2: TObject<{ foo: TString; }>; }>; }>
->static : { level1: { level2: { foo: string; }; }; }
 
     return ors;  // Error
 >ors : { level1: { level2: { foo: string; }; }; }[]
@@= skipped -12, +10 lines =@@
 
 export type Evaluate<T> = T extends infer O ? { [K in keyof O]: O[K] } : never
 >Evaluate : Evaluate<T>
+>T : T
+>O : O
+>K : K
 
 export declare const Readonly: unique symbol;
 >Readonly : unique symbol
@@= skipped -14, +17 lines =@@
 >Kind : unique symbol
 
 export interface TKind {
+>TKind : TKind
+
     [Kind]: string
 >[Kind] : string
 >Kind : unique symbol
 }
 export interface TSchema extends TKind {
+>TSchema : TSchema
+
     [Readonly]?: string
 >[Readonly] : string | undefined
 >Readonly : unique symbol
@@= skipped -26, +30 lines =@@
 
 export type TReadonlyOptional<T extends TSchema> = TOptional<T> & TReadonly<T>
 >TReadonlyOptional : TReadonlyOptional<T>
+>T : T
 
 export type TReadonly<T extends TSchema> = T & { [Readonly]: 'Readonly' }
 >TReadonly : TReadonly<T>
+>T : T
 >[Readonly] : "Readonly"
 >Readonly : unique symbol
 
 export type TOptional<T extends TSchema> = T & { [Optional]: 'Optional' }
 >TOptional : TOptional<T>
+>T : T
 >[Optional] : "Optional"
 >Optional : unique symbol
 
 export interface TString extends TSchema {
+>TString : TString
+
     [Kind]: 'String';
 >[Kind] : "String"
 >Kind : unique symbol
@@= skipped -25, +30 lines =@@
 
 export type ReadonlyOptionalPropertyKeys<T extends TProperties> = { [K in keyof T]: T[K] extends TReadonly<TSchema> ? (T[K] extends TOptional<T[K]> ? K : never) : never }[keyof T]
 >ReadonlyOptionalPropertyKeys : ReadonlyOptionalPropertyKeys<T>
+>T : T
+>K : K
 
 export type ReadonlyPropertyKeys<T extends TProperties> = { [K in keyof T]: T[K] extends TReadonly<TSchema> ? (T[K] extends TOptional<T[K]> ? never : K) : never }[keyof T]
 >ReadonlyPropertyKeys : ReadonlyPropertyKeys<T>
+>T : T
+>K : K
 
 export type OptionalPropertyKeys<T extends TProperties> = { [K in keyof T]: T[K] extends TOptional<TSchema> ? (T[K] extends TReadonly<T[K]> ? never : K) : never }[keyof T]
 >OptionalPropertyKeys : OptionalPropertyKeys<T>
+>T : T
+>K : K
 
 export type RequiredPropertyKeys<T extends TProperties> = keyof Omit<T, ReadonlyOptionalPropertyKeys<T> | ReadonlyPropertyKeys<T> | OptionalPropertyKeys<T>>
->RequiredPropertyKeys : Exclude<keyof T, ReadonlyOptionalPropertyKeys<T> | ReadonlyPropertyKeys<T> | OptionalPropertyKeys<T>>
+>RequiredPropertyKeys : Exclude<keyof T, OptionalPropertyKeys<T> | ReadonlyOptionalPropertyKeys<T> | ReadonlyPropertyKeys<T>>
+>T : T
 
 export type PropertiesReducer<T extends TProperties, R extends Record<keyof any, unknown>> = Evaluate<(
 >PropertiesReducer : PropertiesReducer<T, R>
+>T : T
+>R : R
 
     Readonly<Partial<Pick<R, ReadonlyOptionalPropertyKeys<T>>>> &
     Readonly<Pick<R, ReadonlyPropertyKeys<T>>> &
@@= skipped -20, +29 lines =@@
 )>
 export type PropertiesReduce<T extends TProperties, P extends unknown[]> = PropertiesReducer<T, {
 >PropertiesReduce : PropertiesReduce<T, P>
+>T : T
+>P : P
 
     [K in keyof T]: Static<T[K], P>
+>K : K
+
 }>
 export type TPropertyKey = string | number
 >TPropertyKey : TPropertyKey
@@= skipped -10, +14 lines =@@
 >TProperties : TProperties
 
 export interface TObject<T extends TProperties = TProperties> extends TSchema {
+>TObject : TObject<T>
+>T : T
+
     [Kind]: 'Object'
 >[Kind] : "Object"
 >Kind : unique symbol
 
     static: PropertiesReduce<T, this['params']>
->static : Evaluate<Readonly<Partial<Pick<{ [K in keyof T]: Static<T[K], this["params"]>; }, ReadonlyOptionalPropertyKeys<T>>>> & Readonly<Pick<{ [K in keyof T]: Static<T[K], this["params"]>; }, ReadonlyPropertyKeys<T>>> & Partial<Pick<{ [K in keyof T]: Static<T[K], this["params"]>; }, OptionalPropertyKeys<T>>> & Required<Pick<{ [K in keyof T]: Static<T[K], this["params"]>; }, Exclude<keyof T, ReadonlyOptionalPropertyKeys<T> | ReadonlyPropertyKeys<T> | OptionalPropertyKeys<T>>>>>
+>static : Evaluate<Readonly<Partial<Pick<{ [K in keyof T]: Static<T[K], this["params"]> }, ReadonlyOptionalPropertyKeys<T>>>> & Readonly<Pick<{ [K in keyof T]: Static<T[K], this["params"]> }, ReadonlyPropertyKeys<T>>> & Partial<Pick<{ [K in keyof T]: Static<T[K], this["params"]> }, OptionalPropertyKeys<T>>> & Required<Pick<{ [K in keyof T]: Static<T[K], this["params"]> }, Exclude<keyof T, OptionalPropertyKeys<T> | ReadonlyOptionalPropertyKeys<T> | ReadonlyPropertyKeys<T>>>>>
 
     type: 'object'
 >type : "object"
@@= skipped -16, +19 lines =@@
 
 export type Static<T extends TSchema, P extends unknown[] = []> = (T & { params: P; })['static']
 >Static : Static<T, P>
+>T : T
+>P : P
 >params : P
 
 declare namespace Type {
@@= skipped -7, +9 lines =@@
 
     function Object<T extends TProperties>(object: T): TObject<T>
 >Object : <T extends TProperties>(object: T) => TObject<T>
+>T : T
 >object : T
 
     function String(): TString
