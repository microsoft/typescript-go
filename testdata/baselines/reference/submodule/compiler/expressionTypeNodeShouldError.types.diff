--- old.expressionTypeNodeShouldError.types
+++ new.expressionTypeNodeShouldError.types
@@= skipped -8, +8 lines =@@
 
 === string.ts ===
 interface String {
+>String : String
+
     typeof<T>(x: T): T;
 >typeof : <T>(x: T) => T
+>T : T
 >x : T
 }
 
@@= skipped -13, +16 lines =@@
 
         const x: "".typeof(this.foo);
 >x : ""
->typeof(this.foo) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof(this.foo) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(this.foo) : () => void
 >this.foo : () => void
 >this : this
@@= skipped -18, +18 lines =@@
 
 type ItemType = "".typeof(nodes.item(0));
 >ItemType : ""
->typeof(nodes.item(0)) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof(nodes.item(0)) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(nodes.item(0)) : HTMLLIElement
 >nodes.item(0) : HTMLLIElement
 >nodes.item : (index: number) => HTMLLIElement
@@= skipped -10, +10 lines =@@
 
 === number.ts ===
 interface Number {
+>Number : Number
+
     typeof<T>(x: T): T;
 >typeof : <T>(x: T) => T
+>T : T
 >x : T
 }
 
@@= skipped -13, +16 lines =@@
 
         const x: 3.141592.typeof(this.foo);
 >x : 3.141592
->typeof(this.foo) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof(this.foo) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(this.foo) : () => void
 >this.foo : () => void
 >this : this
@@= skipped -18, +18 lines =@@
 
 type ItemType2 = 4..typeof(nodes.item(0));
 >ItemType2 : 4
->typeof(nodes.item(0)) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof(nodes.item(0)) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(nodes.item(0)) : HTMLLIElement
 >nodes.item(0) : HTMLLIElement
 >nodes.item : (index: number) => HTMLLIElement
@@= skipped -10, +10 lines =@@
 
 === boolean.ts ===
 interface Boolean {
+>Boolean : Boolean
+
     typeof<T>(x: T): T;
 >typeof : <T>(x: T) => T
+>T : T
 >x : T
 }
 
@@= skipped -14, +17 lines =@@
         const x: false.typeof(this.foo);
 >x : false
 >false : false
->typeof(this.foo) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof(this.foo) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(this.foo) : () => void
 >this.foo : () => void
 >this : this
@@= skipped -19, +19 lines =@@
 type ItemType3 = true.typeof(nodes.item(0));
 >ItemType3 : true
 >true : true
->typeof(nodes.item(0)) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof(nodes.item(0)) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >(nodes.item(0)) : HTMLLIElement
 >nodes.item(0) : HTMLLIElement
 >nodes.item : (index: number) => HTMLLIElement
