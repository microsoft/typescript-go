--- old.privacyFunctionParameterDeclFile.js
+++ new.privacyFunctionParameterDeclFile.js
@@= skipped -697, +697 lines =@@
 }
 exports.publicClass = publicClass;
 class publicClassWithWithPrivateParmeterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
 }
 exports.publicClassWithWithPrivateParmeterTypes = publicClassWithWithPrivateParmeterTypes;
 class publicClassWithWithPublicParmeterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
 }
 exports.publicClassWithWithPublicParmeterTypes = publicClassWithWithPublicParmeterTypes;
 class privateClassWithWithPrivateParmeterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     static myPrivateStaticMethod(param) {
@@= skipped -14, +16 lines =@@
     }
 }
 class privateClassWithWithPublicParmeterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     static myPrivateStaticMethod(param) {
@@= skipped -22, +24 lines =@@
 function privateFunctionWithPublicParmeterTypes(param) {
 }
 class publicClassWithPrivateModuleParameterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     myPublicMethod(param) {
@@= skipped -13, +15 lines =@@
 function publicFunctionWithPrivateModuleParameterTypes(param) {
 }
 class privateClassWithPrivateModuleParameterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     myPublicMethod(param) {
@@= skipped -19, +21 lines =@@
     }
     publicModule.publicClass = publicClass;
     class publicClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     publicModule.publicClassWithWithPrivateParmeterTypes = publicClassWithWithPrivateParmeterTypes;
     class publicClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     publicModule.publicClassWithWithPublicParmeterTypes = publicClassWithWithPublicParmeterTypes;
     class privateClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -14, +16 lines =@@
         }
     }
     class privateClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -24, +26 lines =@@
     function privateFunctionWithPublicParmeterTypes(param) {
     }
     class publicClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
@@= skipped -14, +16 lines =@@
     }
     publicModule.publicFunctionWithPrivateModuleParameterTypes = publicFunctionWithPrivateModuleParameterTypes;
     class privateClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
@@= skipped -20, +22 lines =@@
     }
     privateModule.publicClass = publicClass;
     class publicClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     privateModule.publicClassWithWithPrivateParmeterTypes = publicClassWithWithPrivateParmeterTypes;
     class publicClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     privateModule.publicClassWithWithPublicParmeterTypes = publicClassWithWithPublicParmeterTypes;
     class privateClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -14, +16 lines =@@
         }
     }
     class privateClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -24, +26 lines =@@
     function privateFunctionWithPublicParmeterTypes(param) {
     }
     class publicClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
@@= skipped -14, +16 lines =@@
     }
     privateModule.publicFunctionWithPrivateModuleParameterTypes = publicFunctionWithPrivateModuleParameterTypes;
     class privateClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
@@= skipped -16, +18 lines =@@
 class publicClassInGlobal {
 }
 class publicClassWithWithPublicParmeterTypesInGlobal {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     static myPrivateStaticMethod(param) {
@@= skipped -30, +32 lines =@@
         }
         privateModule.publicClass = publicClass;
         class publicClassWithWithPrivateParmeterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
         }
         privateModule.publicClassWithWithPrivateParmeterTypes = publicClassWithWithPrivateParmeterTypes;
         class publicClassWithWithPublicParmeterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
         }
         privateModule.publicClassWithWithPublicParmeterTypes = publicClassWithWithPublicParmeterTypes;
         class privateClassWithWithPrivateParmeterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             static myPrivateStaticMethod(param) {
@@= skipped -14, +16 lines =@@
             }
         }
         class privateClassWithWithPublicParmeterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             static myPrivateStaticMethod(param) {
@@= skipped -24, +26 lines =@@
         function privateFunctionWithPublicParmeterTypes(param) {
         }
         class publicClassWithPrivateModuleParameterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             myPublicMethod(param) {
@@= skipped -14, +16 lines =@@
         }
         privateModule.publicFunctionWithPrivateModuleParameterTypes = publicFunctionWithPrivateModuleParameterTypes;
         class privateClassWithPrivateModuleParameterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             myPublicMethod(param) {
@@= skipped -13, +15 lines =@@
         }
     })(privateModule || (privateModule = {}));
     class publicClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     publicModuleInGlobal.publicClassWithWithPrivateParmeterTypes = publicClassWithWithPrivateParmeterTypes;
     class publicClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     publicModuleInGlobal.publicClassWithWithPublicParmeterTypes = publicClassWithWithPublicParmeterTypes;
     class privateClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -14, +16 lines =@@
         }
     }
     class privateClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -24, +26 lines =@@
     function privateFunctionWithPublicParmeterTypes(param) {
     }
     class publicClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
@@= skipped -14, +16 lines =@@
     }
     publicModuleInGlobal.publicFunctionWithPrivateModuleParameterTypes = publicFunctionWithPrivateModuleParameterTypes;
     class privateClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
@@= skipped -20, +22 lines =@@
 export declare class publicClass {
 }
 export interface publicInterfaceWithPrivateParmeterTypes {
-    new (param: privateClass): publicClass;
-    (param: privateClass): publicClass;
-    myMethod(param: privateClass): void;
+    new (param: privateClass); // Error
+    (param: privateClass): publicClass; // Error
+    myMethod(param: privateClass): void; // Error
 }
 export interface publicInterfaceWithPublicParmeterTypes {
-    new (param: publicClass): publicClass;
+    new (param: publicClass);
     (param: publicClass): publicClass;
     myMethod(param: publicClass): void;
 }
@@= skipped -29, +29 lines =@@
 }
 export declare function publicFunctionWithPrivateParmeterTypes(param: privateClass): void;
 export declare function publicFunctionWithPublicParmeterTypes(param: publicClass): void;
-export declare function publicAmbientFunctionWithPrivateParmeterTypes(param: privateClass): void;
+export declare function publicAmbientFunctionWithPrivateParmeterTypes(param: privateClass): void; // Error
 export declare function publicAmbientFunctionWithPublicParmeterTypes(param: publicClass): void;
 export interface publicInterfaceWithPrivateModuleParameterTypes {
-    new (param: privateModule.publicClass): publicClass;
-    (param: privateModule.publicClass): publicClass;
-    myMethod(param: privateModule.publicClass): void;
+    new (param: privateModule.publicClass); // Error
+    (param: privateModule.publicClass): publicClass; // Error
+    myMethod(param: privateModule.publicClass): void; // Error
 }
 export declare class publicClassWithPrivateModuleParameterTypes {
     private param1;
@@= skipped -15, +15 lines =@@
     constructor(param: privateModule.publicClass, param1: privateModule.publicClass, param2: privateModule.publicClass);
 }
 export declare function publicFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void;
-export declare function publicAmbientFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void;
+export declare function publicAmbientFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void; // Error
 export declare namespace publicModule {
     class privateClass {
     }
     export class publicClass {
     }
     export interface publicInterfaceWithPrivateParmeterTypes {
-        new (param: privateClass): publicClass;
-        (param: privateClass): publicClass;
-        myMethod(param: privateClass): void;
+        new (param: privateClass); // Error
+        (param: privateClass): publicClass; // Error
+        myMethod(param: privateClass): void; // Error
     }
     export interface publicInterfaceWithPublicParmeterTypes {
-        new (param: publicClass): publicClass;
+        new (param: publicClass);
         (param: publicClass): publicClass;
         myMethod(param: publicClass): void;
     }
@@= skipped -36, +36 lines =@@
     }
     export function publicFunctionWithPrivateParmeterTypes(param: privateClass): void;
     export function publicFunctionWithPublicParmeterTypes(param: publicClass): void;
-    export function publicAmbientFunctionWithPrivateParmeterTypes(param: privateClass): void;
+    export function publicAmbientFunctionWithPrivateParmeterTypes(param: privateClass): void; // Error
     export function publicAmbientFunctionWithPublicParmeterTypes(param: publicClass): void;
     export interface publicInterfaceWithPrivateModuleParameterTypes {
-        new (param: privateModule.publicClass): publicClass;
-        (param: privateModule.publicClass): publicClass;
-        myMethod(param: privateModule.publicClass): void;
+        new (param: privateModule.publicClass); // Error
+        (param: privateModule.publicClass): publicClass; // Error
+        myMethod(param: privateModule.publicClass): void; // Error
     }
     export class publicClassWithPrivateModuleParameterTypes {
         private param1;
@@= skipped -15, +15 lines =@@
         constructor(param: privateModule.publicClass, param1: privateModule.publicClass, param2: privateModule.publicClass);
     }
     export function publicFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void;
-    export function publicAmbientFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void;
+    export function publicAmbientFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void; // Error
     export {};
 }
 declare namespace privateModule {
@@= skipped -9, +9 lines =@@
     export class publicClass {
     }
     export interface publicInterfaceWithPrivateParmeterTypes {
-        new (param: privateClass): publicClass;
+        new (param: privateClass);
         (param: privateClass): publicClass;
         myMethod(param: privateClass): void;
     }
     export interface publicInterfaceWithPublicParmeterTypes {
-        new (param: publicClass): publicClass;
+        new (param: publicClass);
         (param: publicClass): publicClass;
         myMethod(param: publicClass): void;
     }
@@= skipped -32, +32 lines =@@
     export function publicAmbientFunctionWithPrivateParmeterTypes(param: privateClass): void;
     export function publicAmbientFunctionWithPublicParmeterTypes(param: publicClass): void;
     export interface publicInterfaceWithPrivateModuleParameterTypes {
-        new (param: privateModule.publicClass): publicClass;
+        new (param: privateModule.publicClass);
         (param: privateModule.publicClass): publicClass;
         myMethod(param: privateModule.publicClass): void;
     }
@@= skipped -20, +20 lines =@@
 declare class publicClassInGlobal {
 }
 interface publicInterfaceWithPublicParmeterTypesInGlobal {
-    new (param: publicClassInGlobal): publicClassInGlobal;
+    new (param: publicClassInGlobal);
     (param: publicClassInGlobal): publicClassInGlobal;
     myMethod(param: publicClassInGlobal): void;
 }
@@= skipped -26, +26 lines =@@
         export class publicClass {
         }
         export interface publicInterfaceWithPrivateParmeterTypes {
-            new (param: privateClass): publicClass;
+            new (param: privateClass);
             (param: privateClass): publicClass;
             myMethod(param: privateClass): void;
         }
         export interface publicInterfaceWithPublicParmeterTypes {
-            new (param: publicClass): publicClass;
+            new (param: publicClass);
             (param: publicClass): publicClass;
             myMethod(param: publicClass): void;
         }
@@= skipped -32, +32 lines =@@
         export function publicAmbientFunctionWithPrivateParmeterTypes(param: privateClass): void;
         export function publicAmbientFunctionWithPublicParmeterTypes(param: publicClass): void;
         export interface publicInterfaceWithPrivateModuleParameterTypes {
-            new (param: privateModule.publicClass): publicClass;
+            new (param: privateModule.publicClass);
             (param: privateModule.publicClass): publicClass;
             myMethod(param: privateModule.publicClass): void;
         }
@@= skipped -16, +16 lines =@@
         export {};
     }
     export interface publicInterfaceWithPrivateParmeterTypes {
-        new (param: privateClass): publicClass;
-        (param: privateClass): publicClass;
-        myMethod(param: privateClass): void;
+        new (param: privateClass); // Error
+        (param: privateClass): publicClass; // Error
+        myMethod(param: privateClass): void; // Error
     }
     export interface publicInterfaceWithPublicParmeterTypes {
-        new (param: publicClass): publicClass;
+        new (param: publicClass);
         (param: publicClass): publicClass;
         myMethod(param: publicClass): void;
     }
@@= skipped -29, +29 lines =@@
     }
     export function publicFunctionWithPrivateParmeterTypes(param: privateClass): void;
     export function publicFunctionWithPublicParmeterTypes(param: publicClass): void;
-    export function publicAmbientFunctionWithPrivateParmeterTypes(param: privateClass): void;
+    export function publicAmbientFunctionWithPrivateParmeterTypes(param: privateClass): void; // Error
     export function publicAmbientFunctionWithPublicParmeterTypes(param: publicClass): void;
     export interface publicInterfaceWithPrivateModuleParameterTypes {
-        new (param: privateModule.publicClass): publicClass;
-        (param: privateModule.publicClass): publicClass;
-        myMethod(param: privateModule.publicClass): void;
+        new (param: privateModule.publicClass); // Error
+        (param: privateModule.publicClass): publicClass; // Error
+        myMethod(param: privateModule.publicClass): void; // Error
     }
     export class publicClassWithPrivateModuleParameterTypes {
         private param1;
@@= skipped -15, +15 lines =@@
         constructor(param: privateModule.publicClass, param1: privateModule.publicClass, param2: privateModule.publicClass);
     }
     export function publicFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void;
-    export function publicAmbientFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void;
+    export function publicAmbientFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void; // Error
     export {};
 }