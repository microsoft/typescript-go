//// [tests/cases/compiler/constEnums.ts] ////

=== constEnums.ts ===
const enum Enum1 {
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))

   A0 = 100,
>A0 : Symbol(A0, Decl(constEnums.ts, 0, 18))
}

const enum Enum1 {
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))

    // correct cases
    A,
>A : Symbol(A, Decl(constEnums.ts, 4, 18))

    B,
>B : Symbol(B, Decl(constEnums.ts, 6, 6))

    C = 10,
>C : Symbol(C, Decl(constEnums.ts, 7, 6))

    D = A | B,
>D : Symbol(D, Decl(constEnums.ts, 8, 11))
>A : Symbol(A, Decl(constEnums.ts, 4, 18))
>B : Symbol(B, Decl(constEnums.ts, 6, 6))

    E = A | 1,
>E : Symbol(E, Decl(constEnums.ts, 9, 14))
>A : Symbol(A, Decl(constEnums.ts, 4, 18))

    F = 1 | A,
>F : Symbol(F, Decl(constEnums.ts, 10, 14))
>A : Symbol(A, Decl(constEnums.ts, 4, 18))

    G = (1 & 1),
>G : Symbol(G, Decl(constEnums.ts, 11, 14))

    H = ~(A | B),
>H : Symbol(H, Decl(constEnums.ts, 12, 16))
>A : Symbol(A, Decl(constEnums.ts, 4, 18))
>B : Symbol(B, Decl(constEnums.ts, 6, 6))

    I = A >>> 1,
>I : Symbol(I, Decl(constEnums.ts, 13, 17))
>A : Symbol(A, Decl(constEnums.ts, 4, 18))

    J = 1 & A,
>J : Symbol(J, Decl(constEnums.ts, 14, 16))
>A : Symbol(A, Decl(constEnums.ts, 4, 18))

    K = ~(1 | 5),
>K : Symbol(K, Decl(constEnums.ts, 15, 14))

    L = ~D,
>L : Symbol(L, Decl(constEnums.ts, 16, 17))
>D : Symbol(D, Decl(constEnums.ts, 8, 11))

    M = E << B,
>M : Symbol(M, Decl(constEnums.ts, 17, 11))
>E : Symbol(E, Decl(constEnums.ts, 9, 14))
>B : Symbol(B, Decl(constEnums.ts, 6, 6))

    N = E << 1,
>N : Symbol(N, Decl(constEnums.ts, 18, 15))
>E : Symbol(E, Decl(constEnums.ts, 9, 14))

    O = E >> B,
>O : Symbol(O, Decl(constEnums.ts, 19, 15))
>E : Symbol(E, Decl(constEnums.ts, 9, 14))
>B : Symbol(B, Decl(constEnums.ts, 6, 6))

    P = E >> 1,
>P : Symbol(P, Decl(constEnums.ts, 20, 15))
>E : Symbol(E, Decl(constEnums.ts, 9, 14))

    PQ = E ** 2,
>PQ : Symbol(PQ, Decl(constEnums.ts, 21, 15))
>E : Symbol(E, Decl(constEnums.ts, 9, 14))

    Q = -D,
>Q : Symbol(Q, Decl(constEnums.ts, 22, 16))
>D : Symbol(D, Decl(constEnums.ts, 8, 11))

    R = C & 5,
>R : Symbol(R, Decl(constEnums.ts, 23, 11))
>C : Symbol(C, Decl(constEnums.ts, 7, 6))

    S = 5 & C,
>S : Symbol(S, Decl(constEnums.ts, 24, 14))
>C : Symbol(C, Decl(constEnums.ts, 7, 6))

    T = C | D,
>T : Symbol(T, Decl(constEnums.ts, 25, 14))
>C : Symbol(C, Decl(constEnums.ts, 7, 6))
>D : Symbol(D, Decl(constEnums.ts, 8, 11))

    U = C | 1,
>U : Symbol(U, Decl(constEnums.ts, 26, 14))
>C : Symbol(C, Decl(constEnums.ts, 7, 6))

    V = 10 | D,
>V : Symbol(V, Decl(constEnums.ts, 27, 14))
>D : Symbol(D, Decl(constEnums.ts, 8, 11))

    W = Enum1.V,
>W : Symbol(W, Decl(constEnums.ts, 28, 15))
>Enum1.V : Symbol(V, Decl(constEnums.ts, 27, 14))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>V : Symbol(V, Decl(constEnums.ts, 27, 14))

    // correct cases: reference to the enum member from different enum declaration
    W1 = A0,
>W1 : Symbol(W1, Decl(constEnums.ts, 29, 16))
>A0 : Symbol(A0, Decl(constEnums.ts, 0, 18))

    W2 = Enum1.A0,
>W2 : Symbol(W2, Decl(constEnums.ts, 32, 12))
>Enum1.A0 : Symbol(A0, Decl(constEnums.ts, 0, 18))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>A0 : Symbol(A0, Decl(constEnums.ts, 0, 18))

    W3 = Enum1["A0"],
>W3 : Symbol(W3, Decl(constEnums.ts, 33, 18))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>"A0" : Symbol(A0, Decl(constEnums.ts, 0, 18))

    W4 = Enum1["W"],
>W4 : Symbol(W4, Decl(constEnums.ts, 34, 21))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>"W" : Symbol(W, Decl(constEnums.ts, 28, 15))

    W5 = Enum1[`V`],
>W5 : Symbol(W5, Decl(constEnums.ts, 35, 20))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>`V` : Symbol(V, Decl(constEnums.ts, 27, 14))
}

const enum Comments {
>Comments : Symbol(Comments, Decl(constEnums.ts, 37, 1))

    "//",
>"//" : Symbol("//", Decl(constEnums.ts, 39, 21))

    "/*",
>"/*" : Symbol("/*", Decl(constEnums.ts, 40, 9))

    "*/",
>"*/" : Symbol("*/", Decl(constEnums.ts, 41, 9))

    "///",
>"///" : Symbol("///", Decl(constEnums.ts, 42, 9))

    "#",
>"#" : Symbol("#", Decl(constEnums.ts, 43, 10))

    "<!--",
>"<!--" : Symbol("<!--", Decl(constEnums.ts, 44, 8))

    "-->",
>"-->" : Symbol("-->", Decl(constEnums.ts, 45, 11))
}

module A {
>A : Symbol(A, Decl(constEnums.ts, 47, 1), Decl(constEnums.ts, 58, 1))

    export module B {
>B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))

        export module C {
>C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))

            export const enum E {
>E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))

                V1 = 1,
>V1 : Symbol(V1, Decl(constEnums.ts, 52, 33))

                V2 = A.B.C.E.V1 | 100
>V2 : Symbol(V2, Decl(constEnums.ts, 53, 23))
>A.B.C.E.V1 : Symbol(V1, Decl(constEnums.ts, 52, 33))
>A.B.C.E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>A.B.C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>A.B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>A : Symbol(A, Decl(constEnums.ts, 47, 1), Decl(constEnums.ts, 58, 1))
>B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>V1 : Symbol(V1, Decl(constEnums.ts, 52, 33))
            }
        }
    }
}

module A {
>A : Symbol(A, Decl(constEnums.ts, 47, 1), Decl(constEnums.ts, 58, 1))

    export module B {
>B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))

        export module C {
>C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))

            export const enum E {
>E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))

                V3 = A.B.C.E["V2"] & 200,
>V3 : Symbol(V3, Decl(constEnums.ts, 63, 33))
>A.B.C.E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>A.B.C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>A.B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>A : Symbol(A, Decl(constEnums.ts, 47, 1), Decl(constEnums.ts, 58, 1))
>B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>"V2" : Symbol(V2, Decl(constEnums.ts, 53, 23))

                V4 = A.B.C.E[`V1`] << 1,
>V4 : Symbol(V4, Decl(constEnums.ts, 64, 41))
>A.B.C.E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>A.B.C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>A.B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>A : Symbol(A, Decl(constEnums.ts, 47, 1), Decl(constEnums.ts, 58, 1))
>B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>`V1` : Symbol(V1, Decl(constEnums.ts, 52, 33))
            }
        }
    }
}

module A1 {
>A1 : Symbol(A1, Decl(constEnums.ts, 69, 1))

    export module B {
>B : Symbol(B, Decl(constEnums.ts, 71, 11))

        export module C {
>C : Symbol(C, Decl(constEnums.ts, 72, 21))

            export const enum E {
>E : Symbol(E, Decl(constEnums.ts, 73, 25))

                V1 = 10,
>V1 : Symbol(V1, Decl(constEnums.ts, 74, 33))

                V2 = 110,
>V2 : Symbol(V2, Decl(constEnums.ts, 75, 24))
            }
        }
    }
}

module A2 {
>A2 : Symbol(A2, Decl(constEnums.ts, 80, 1))

    export module B {
>B : Symbol(B, Decl(constEnums.ts, 82, 11))

        export module C {
>C : Symbol(C, Decl(constEnums.ts, 83, 21), Decl(constEnums.ts, 89, 9))

            export const enum E {
>E : Symbol(E, Decl(constEnums.ts, 84, 25))

                V1 = 10,
>V1 : Symbol(V1, Decl(constEnums.ts, 85, 33))

                V2 = 110,
>V2 : Symbol(V2, Decl(constEnums.ts, 86, 24))
            }
        }
        // module C will be classified as value
        export module C {
>C : Symbol(C, Decl(constEnums.ts, 83, 21), Decl(constEnums.ts, 89, 9))

            var x = 1
>x : Symbol(x, Decl(constEnums.ts, 92, 15))
        }
    }
}

import I = A.B.C.E;
>I : Symbol(I, Decl(constEnums.ts, 95, 1))
>A : Symbol(A, Decl(constEnums.ts, 47, 1), Decl(constEnums.ts, 58, 1))
>B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))

import I1 = A1.B;
>I1 : Symbol(I1, Decl(constEnums.ts, 97, 19))
>A1 : Symbol(A1, Decl(constEnums.ts, 69, 1))
>B : Symbol(B, Decl(constEnums.ts, 71, 11))

import I2 = A2.B;
>I2 : Symbol(I2, Decl(constEnums.ts, 98, 17))
>A2 : Symbol(A2, Decl(constEnums.ts, 80, 1))
>B : Symbol(B, Decl(constEnums.ts, 82, 11))

function foo0(e: I): void {
>foo0 : Symbol(foo0, Decl(constEnums.ts, 99, 17))
>e : Symbol(e, Decl(constEnums.ts, 101, 14))
>I : Symbol(I, Decl(constEnums.ts, 95, 1))

    if (e === I.V1) {
>e : Symbol(e, Decl(constEnums.ts, 101, 14))
>I.V1 : Symbol(V1, Decl(constEnums.ts, 52, 33))
>I : Symbol(I, Decl(constEnums.ts, 95, 1))
>V1 : Symbol(V1, Decl(constEnums.ts, 52, 33))
    }
    else if (e === I.V2) {
>e : Symbol(e, Decl(constEnums.ts, 101, 14))
>I.V2 : Symbol(V2, Decl(constEnums.ts, 53, 23))
>I : Symbol(I, Decl(constEnums.ts, 95, 1))
>V2 : Symbol(V2, Decl(constEnums.ts, 53, 23))
    }
}

function foo1(e: I1.C.E): void {
>foo1 : Symbol(foo1, Decl(constEnums.ts, 106, 1))
>e : Symbol(e, Decl(constEnums.ts, 108, 14))
>I1 : Symbol(I1, Decl(constEnums.ts, 97, 19))
>C : Symbol(C, Decl(constEnums.ts, 72, 21))
>E : Symbol(E, Decl(constEnums.ts, 73, 25))

    if (e === I1.C.E.V1) {
>e : Symbol(e, Decl(constEnums.ts, 108, 14))
>I1.C.E.V1 : Symbol(V1, Decl(constEnums.ts, 74, 33))
>I1.C.E : Symbol(E, Decl(constEnums.ts, 73, 25))
>I1.C : Symbol(C, Decl(constEnums.ts, 72, 21))
>I1 : Symbol(I1, Decl(constEnums.ts, 97, 19))
>C : Symbol(C, Decl(constEnums.ts, 72, 21))
>E : Symbol(E, Decl(constEnums.ts, 73, 25))
>V1 : Symbol(V1, Decl(constEnums.ts, 74, 33))
    }
    else if (e === I1.C.E.V2) {
>e : Symbol(e, Decl(constEnums.ts, 108, 14))
>I1.C.E.V2 : Symbol(V2, Decl(constEnums.ts, 75, 24))
>I1.C.E : Symbol(E, Decl(constEnums.ts, 73, 25))
>I1.C : Symbol(C, Decl(constEnums.ts, 72, 21))
>I1 : Symbol(I1, Decl(constEnums.ts, 97, 19))
>C : Symbol(C, Decl(constEnums.ts, 72, 21))
>E : Symbol(E, Decl(constEnums.ts, 73, 25))
>V2 : Symbol(V2, Decl(constEnums.ts, 75, 24))
    }
}

function foo2(e: I2.C.E): void {
>foo2 : Symbol(foo2, Decl(constEnums.ts, 113, 1))
>e : Symbol(e, Decl(constEnums.ts, 115, 14))
>I2 : Symbol(I2, Decl(constEnums.ts, 98, 17))
>C : Symbol(C, Decl(constEnums.ts, 83, 21), Decl(constEnums.ts, 89, 9))
>E : Symbol(E, Decl(constEnums.ts, 84, 25))

    if (e === I2.C.E.V1) {
>e : Symbol(e, Decl(constEnums.ts, 115, 14))
>I2.C.E.V1 : Symbol(V1, Decl(constEnums.ts, 85, 33))
>I2.C.E : Symbol(E, Decl(constEnums.ts, 84, 25))
>I2.C : Symbol(C, Decl(constEnums.ts, 83, 21), Decl(constEnums.ts, 89, 9))
>I2 : Symbol(I2, Decl(constEnums.ts, 98, 17))
>C : Symbol(C, Decl(constEnums.ts, 83, 21), Decl(constEnums.ts, 89, 9))
>E : Symbol(E, Decl(constEnums.ts, 84, 25))
>V1 : Symbol(V1, Decl(constEnums.ts, 85, 33))
    }
    else if (e === I2.C.E.V2) {
>e : Symbol(e, Decl(constEnums.ts, 115, 14))
>I2.C.E.V2 : Symbol(V2, Decl(constEnums.ts, 86, 24))
>I2.C.E : Symbol(E, Decl(constEnums.ts, 84, 25))
>I2.C : Symbol(C, Decl(constEnums.ts, 83, 21), Decl(constEnums.ts, 89, 9))
>I2 : Symbol(I2, Decl(constEnums.ts, 98, 17))
>C : Symbol(C, Decl(constEnums.ts, 83, 21), Decl(constEnums.ts, 89, 9))
>E : Symbol(E, Decl(constEnums.ts, 84, 25))
>V2 : Symbol(V2, Decl(constEnums.ts, 86, 24))
    }
}


function foo(x: Enum1) {
>foo : Symbol(foo, Decl(constEnums.ts, 120, 1))
>x : Symbol(x, Decl(constEnums.ts, 123, 13))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))

    switch (x) {
>x : Symbol(x, Decl(constEnums.ts, 123, 13))

        case Enum1.A:
>Enum1.A : Symbol(A, Decl(constEnums.ts, 4, 18))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>A : Symbol(A, Decl(constEnums.ts, 4, 18))

        case Enum1.B:
>Enum1.B : Symbol(B, Decl(constEnums.ts, 6, 6))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>B : Symbol(B, Decl(constEnums.ts, 6, 6))

        case Enum1.C:
>Enum1.C : Symbol(C, Decl(constEnums.ts, 7, 6))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>C : Symbol(C, Decl(constEnums.ts, 7, 6))

        case Enum1.D:
>Enum1.D : Symbol(D, Decl(constEnums.ts, 8, 11))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>D : Symbol(D, Decl(constEnums.ts, 8, 11))

        case Enum1.E:
>Enum1.E : Symbol(E, Decl(constEnums.ts, 9, 14))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>E : Symbol(E, Decl(constEnums.ts, 9, 14))

        case Enum1.F:
>Enum1.F : Symbol(F, Decl(constEnums.ts, 10, 14))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>F : Symbol(F, Decl(constEnums.ts, 10, 14))

        case Enum1.G:
>Enum1.G : Symbol(G, Decl(constEnums.ts, 11, 14))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>G : Symbol(G, Decl(constEnums.ts, 11, 14))

        case Enum1.H:
>Enum1.H : Symbol(H, Decl(constEnums.ts, 12, 16))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>H : Symbol(H, Decl(constEnums.ts, 12, 16))

        case Enum1.I:
>Enum1.I : Symbol(I, Decl(constEnums.ts, 13, 17))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>I : Symbol(I, Decl(constEnums.ts, 13, 17))

        case Enum1.J:
>Enum1.J : Symbol(J, Decl(constEnums.ts, 14, 16))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>J : Symbol(J, Decl(constEnums.ts, 14, 16))

        case Enum1.K:
>Enum1.K : Symbol(K, Decl(constEnums.ts, 15, 14))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>K : Symbol(K, Decl(constEnums.ts, 15, 14))

        case Enum1.L:
>Enum1.L : Symbol(L, Decl(constEnums.ts, 16, 17))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>L : Symbol(L, Decl(constEnums.ts, 16, 17))

        case Enum1.M:
>Enum1.M : Symbol(M, Decl(constEnums.ts, 17, 11))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>M : Symbol(M, Decl(constEnums.ts, 17, 11))

        case Enum1.N:
>Enum1.N : Symbol(N, Decl(constEnums.ts, 18, 15))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>N : Symbol(N, Decl(constEnums.ts, 18, 15))

        case Enum1.O:
>Enum1.O : Symbol(O, Decl(constEnums.ts, 19, 15))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>O : Symbol(O, Decl(constEnums.ts, 19, 15))

        case Enum1.P:
>Enum1.P : Symbol(P, Decl(constEnums.ts, 20, 15))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>P : Symbol(P, Decl(constEnums.ts, 20, 15))

        case Enum1.PQ:
>Enum1.PQ : Symbol(PQ, Decl(constEnums.ts, 21, 15))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>PQ : Symbol(PQ, Decl(constEnums.ts, 21, 15))

        case Enum1.Q:
>Enum1.Q : Symbol(Q, Decl(constEnums.ts, 22, 16))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>Q : Symbol(Q, Decl(constEnums.ts, 22, 16))

        case Enum1.R:
>Enum1.R : Symbol(R, Decl(constEnums.ts, 23, 11))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>R : Symbol(R, Decl(constEnums.ts, 23, 11))

        case Enum1.S:
>Enum1.S : Symbol(S, Decl(constEnums.ts, 24, 14))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>S : Symbol(S, Decl(constEnums.ts, 24, 14))

        case Enum1["T"]:
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>"T" : Symbol(T, Decl(constEnums.ts, 25, 14))

        case Enum1[`U`]:
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>`U` : Symbol(U, Decl(constEnums.ts, 26, 14))

        case Enum1.V:
>Enum1.V : Symbol(V, Decl(constEnums.ts, 27, 14))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>V : Symbol(V, Decl(constEnums.ts, 27, 14))

        case Enum1.W:
>Enum1.W : Symbol(W, Decl(constEnums.ts, 28, 15))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>W : Symbol(W, Decl(constEnums.ts, 28, 15))

        case Enum1.W1:
>Enum1.W1 : Symbol(W1, Decl(constEnums.ts, 29, 16))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>W1 : Symbol(W1, Decl(constEnums.ts, 29, 16))

        case Enum1.W2:
>Enum1.W2 : Symbol(W2, Decl(constEnums.ts, 32, 12))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>W2 : Symbol(W2, Decl(constEnums.ts, 32, 12))

        case Enum1.W3:
>Enum1.W3 : Symbol(W3, Decl(constEnums.ts, 33, 18))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>W3 : Symbol(W3, Decl(constEnums.ts, 33, 18))

        case Enum1.W4:
>Enum1.W4 : Symbol(W4, Decl(constEnums.ts, 34, 21))
>Enum1 : Symbol(Enum1, Decl(constEnums.ts, 0, 0), Decl(constEnums.ts, 2, 1))
>W4 : Symbol(W4, Decl(constEnums.ts, 34, 21))

            break;
    }
}

function bar(e: A.B.C.E): number {
>bar : Symbol(bar, Decl(constEnums.ts, 155, 1))
>e : Symbol(e, Decl(constEnums.ts, 157, 13))
>A : Symbol(A, Decl(constEnums.ts, 47, 1), Decl(constEnums.ts, 58, 1))
>B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))

    switch (e) {
>e : Symbol(e, Decl(constEnums.ts, 157, 13))

        case A.B.C.E.V1: return 1;
>A.B.C.E.V1 : Symbol(V1, Decl(constEnums.ts, 52, 33))
>A.B.C.E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>A.B.C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>A.B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>A : Symbol(A, Decl(constEnums.ts, 47, 1), Decl(constEnums.ts, 58, 1))
>B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>V1 : Symbol(V1, Decl(constEnums.ts, 52, 33))

        case A.B.C.E.V2: return 1;
>A.B.C.E.V2 : Symbol(V2, Decl(constEnums.ts, 53, 23))
>A.B.C.E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>A.B.C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>A.B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>A : Symbol(A, Decl(constEnums.ts, 47, 1), Decl(constEnums.ts, 58, 1))
>B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>V2 : Symbol(V2, Decl(constEnums.ts, 53, 23))

        case A.B.C.E.V3: return 1;
>A.B.C.E.V3 : Symbol(V3, Decl(constEnums.ts, 63, 33))
>A.B.C.E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>A.B.C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>A.B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>A : Symbol(A, Decl(constEnums.ts, 47, 1), Decl(constEnums.ts, 58, 1))
>B : Symbol(B, Decl(constEnums.ts, 49, 10), Decl(constEnums.ts, 60, 10))
>C : Symbol(C, Decl(constEnums.ts, 50, 21), Decl(constEnums.ts, 61, 21))
>E : Symbol(E, Decl(constEnums.ts, 51, 25), Decl(constEnums.ts, 62, 25))
>V3 : Symbol(V3, Decl(constEnums.ts, 63, 33))
    }
}

function baz(c: Comments) {
>baz : Symbol(baz, Decl(constEnums.ts, 163, 1))
>c : Symbol(c, Decl(constEnums.ts, 165, 13))
>Comments : Symbol(Comments, Decl(constEnums.ts, 37, 1))

    switch (c) {
>c : Symbol(c, Decl(constEnums.ts, 165, 13))

        case Comments["//"]:
>Comments : Symbol(Comments, Decl(constEnums.ts, 37, 1))
>"//" : Symbol("//", Decl(constEnums.ts, 39, 21))

        case Comments["/*"]:
>Comments : Symbol(Comments, Decl(constEnums.ts, 37, 1))
>"/*" : Symbol("/*", Decl(constEnums.ts, 40, 9))

        case Comments["*/"]:
>Comments : Symbol(Comments, Decl(constEnums.ts, 37, 1))
>"*/" : Symbol("*/", Decl(constEnums.ts, 41, 9))

        case Comments["///"]:
>Comments : Symbol(Comments, Decl(constEnums.ts, 37, 1))
>"///" : Symbol("///", Decl(constEnums.ts, 42, 9))

        case Comments["#"]:
>Comments : Symbol(Comments, Decl(constEnums.ts, 37, 1))
>"#" : Symbol("#", Decl(constEnums.ts, 43, 10))

        case Comments["<!--"]:
>Comments : Symbol(Comments, Decl(constEnums.ts, 37, 1))
>"<!--" : Symbol("<!--", Decl(constEnums.ts, 44, 8))

        case Comments["-->"]:
>Comments : Symbol(Comments, Decl(constEnums.ts, 37, 1))
>"-->" : Symbol("-->", Decl(constEnums.ts, 45, 11))

        break;
    }
}

