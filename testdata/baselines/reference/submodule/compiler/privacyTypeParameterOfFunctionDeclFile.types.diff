--- old.privacyTypeParameterOfFunctionDeclFile.types
+++ new.privacyTypeParameterOfFunctionDeclFile.types
@@= skipped -9, +9 lines =@@
 }
 
 export interface publicInterfaceWithPrivateTypeParameters {
+>publicInterfaceWithPrivateTypeParameters : publicInterfaceWithPrivateTypeParameters
+
     new <T extends privateClass>(): privateClass;  // Error
+>T : T
+
     <T extends privateClass>(): privateClass;  // Error
+>T : T
+
     myMethod<T extends privateClass>(): privateClass;  // Error
 >myMethod : <T extends privateClass>() => privateClass
+>T : T
 }
 
 export interface publicInterfaceWithPublicTypeParameters {
+>publicInterfaceWithPublicTypeParameters : publicInterfaceWithPublicTypeParameters
+
     new <T extends publicClass>(): publicClass;
+>T : T
+
     <T extends publicClass>(): publicClass;
+>T : T
+
     myMethod<T extends publicClass>(): publicClass;
 >myMethod : <T extends publicClass>() => publicClass
+>T : T
 }
 
 interface privateInterfaceWithPrivateTypeParameters {
+>privateInterfaceWithPrivateTypeParameters : privateInterfaceWithPrivateTypeParameters
+
     new <T extends privateClass>(): privateClass;
+>T : T
+
     <T extends privateClass>(): privateClass;
+>T : T
+
     myMethod<T extends privateClass>(): privateClass;
 >myMethod : <T extends privateClass>() => privateClass
+>T : T
 }
 
 interface privateInterfaceWithPublicTypeParameters {
+>privateInterfaceWithPublicTypeParameters : privateInterfaceWithPublicTypeParameters
+
     new <T extends publicClass>(): publicClass;
+>T : T
+
     <T extends publicClass>(): publicClass;
+>T : T
+
     myMethod<T extends publicClass>(): publicClass;
 >myMethod : <T extends publicClass>() => publicClass
+>T : T
 }
 
 export class publicClassWithWithPrivateTypeParameters {
@@= skipped -32, +60 lines =@@
 
     static myPublicStaticMethod<T extends privateClass>() {  // Error
 >myPublicStaticMethod : <T extends privateClass>() => void
+>T : T
     }
     private static myPrivateStaticMethod<T extends privateClass>() {
 >myPrivateStaticMethod : <T extends privateClass>() => void
+>T : T
     }
     myPublicMethod<T extends privateClass>() {  // Error
 >myPublicMethod : <T extends privateClass>() => void
+>T : T
     }
     private myPrivateMethod<T extends privateClass>() {
 >myPrivateMethod : <T extends privateClass>() => void
+>T : T
     }
 }
 
@@= skipped -17, +21 lines =@@
 
     static myPublicStaticMethod<T extends publicClass>() {
 >myPublicStaticMethod : <T extends publicClass>() => void
+>T : T
     }
     private static myPrivateStaticMethod<T extends publicClass>() { 
 >myPrivateStaticMethod : <T extends publicClass>() => void
+>T : T
     }
     myPublicMethod<T extends publicClass>() {
 >myPublicMethod : <T extends publicClass>() => void
+>T : T
     }
     private myPrivateMethod<T extends publicClass>() {
 >myPrivateMethod : <T extends publicClass>() => void
+>T : T
     }
 }
 
@@= skipped -17, +21 lines =@@
 
     static myPublicStaticMethod<T extends privateClass>() {
 >myPublicStaticMethod : <T extends privateClass>() => void
+>T : T
     }
     private static myPrivateStaticMethod<T extends privateClass>() {
 >myPrivateStaticMethod : <T extends privateClass>() => void
+>T : T
     }
     myPublicMethod<T extends privateClass>() {
 >myPublicMethod : <T extends privateClass>() => void
+>T : T
     }
     private myPrivateMethod<T extends privateClass>() {
 >myPrivateMethod : <T extends privateClass>() => void
+>T : T
     }
 }
 
@@= skipped -17, +21 lines =@@
 
     static myPublicStaticMethod<T extends publicClass>() {
 >myPublicStaticMethod : <T extends publicClass>() => void
+>T : T
     }
     private static myPrivateStaticMethod<T extends publicClass>() {
 >myPrivateStaticMethod : <T extends publicClass>() => void
+>T : T
     }
     myPublicMethod<T extends publicClass>() {
 >myPublicMethod : <T extends publicClass>() => void
+>T : T
     }
     private myPrivateMethod<T extends publicClass>() {
 >myPrivateMethod : <T extends publicClass>() => void
+>T : T
     }
 }
 
 export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() {  // Error
 >publicFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
+>T : T
 }
 
 export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
 >publicFunctionWithPublicTypeParameters : <T extends publicClass>() => void
+>T : T
 }
 
 function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
 >privateFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
+>T : T
 }
 
 function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
 >privateFunctionWithPublicTypeParameters : <T extends publicClass>() => void
+>T : T
 }
 
 export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
+>publicInterfaceWithPublicTypeParametersWithoutExtends : publicInterfaceWithPublicTypeParametersWithoutExtends
+
     new <T>(): publicClass;
+>T : T
+
     <T>(): publicClass;
+>T : T
+
     myMethod<T>(): publicClass;
 >myMethod : <T>() => publicClass
+>T : T
 }
 
 interface privateInterfaceWithPublicTypeParametersWithoutExtends {
+>privateInterfaceWithPublicTypeParametersWithoutExtends : privateInterfaceWithPublicTypeParametersWithoutExtends
+
     new <T>(): publicClass;
+>T : T
+
     <T>(): publicClass;
+>T : T
+
     myMethod<T>(): publicClass;
 >myMethod : <T>() => publicClass
+>T : T
 }
 
 export class publicClassWithWithPublicTypeParametersWithoutExtends {
@@= skipped -47, +69 lines =@@
 
     static myPublicStaticMethod<T>() {
 >myPublicStaticMethod : <T>() => void
+>T : T
     }
     private static myPrivateStaticMethod<T>() {
 >myPrivateStaticMethod : <T>() => void
+>T : T
     }
     myPublicMethod<T>() {
 >myPublicMethod : <T>() => void
+>T : T
     }
     private myPrivateMethod<T>() {
 >myPrivateMethod : <T>() => void
+>T : T
     }
 }
 class privateClassWithWithPublicTypeParametersWithoutExtends {
@@= skipped -16, +20 lines =@@
 
     static myPublicStaticMethod<T>() {
 >myPublicStaticMethod : <T>() => void
+>T : T
     }
     private static myPrivateStaticMethod<T>() {
 >myPrivateStaticMethod : <T>() => void
+>T : T
     }
     myPublicMethod<T>() {
 >myPublicMethod : <T>() => void
+>T : T
     }
     private myPrivateMethod<T>() {
 >myPrivateMethod : <T>() => void
+>T : T
     }
 }
 
 export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
 >publicFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
+>T : T
 }
 
 function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
 >privateFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
+>T : T
 }
 
 export interface publicInterfaceWithPrivatModuleTypeParameters {
+>publicInterfaceWithPrivatModuleTypeParameters : publicInterfaceWithPrivatModuleTypeParameters
+
     new <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
+>T : T
 >privateModule : any
 >privateModule : any
 
     <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
+>T : T
 >privateModule : any
 >privateModule : any
 
     myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
->myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
+>myMethod : <T extends publicClass>() => publicClass
+>T : T
 >privateModule : any
 >privateModule : any
 }
@@= skipped -38, +49 lines =@@
 >publicClassWithWithPrivateModuleTypeParameters : publicClassWithWithPrivateModuleTypeParameters
 
     static myPublicStaticMethod<T extends privateModule.publicClass>() {  // Error
->myPublicStaticMethod : <T extends privateModule.publicClass>() => void
+>myPublicStaticMethod : <T extends publicClass>() => void
+>T : T
 >privateModule : any
     }
     myPublicMethod<T extends privateModule.publicClass>() {  // Error
->myPublicMethod : <T extends privateModule.publicClass>() => void
+>myPublicMethod : <T extends publicClass>() => void
+>T : T
 >privateModule : any
     }
 }
 export function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {  // Error
->publicFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
+>publicFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
+>T : T
 >privateModule : any
 }
 
 
 interface privateInterfaceWithPrivatModuleTypeParameters {
+>privateInterfaceWithPrivatModuleTypeParameters : privateInterfaceWithPrivatModuleTypeParameters
+
     new <T extends privateModule.publicClass>(): privateModule.publicClass;
+>T : T
 >privateModule : any
 >privateModule : any
 
     <T extends privateModule.publicClass>(): privateModule.publicClass;
+>T : T
 >privateModule : any
 >privateModule : any
 
     myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;
->myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
+>myMethod : <T extends publicClass>() => publicClass
+>T : T
 >privateModule : any
 >privateModule : any
 }
@@= skipped -32, +40 lines =@@
 >privateClassWithWithPrivateModuleTypeParameters : privateClassWithWithPrivateModuleTypeParameters
 
     static myPublicStaticMethod<T extends privateModule.publicClass>() {
->myPublicStaticMethod : <T extends privateModule.publicClass>() => void
+>myPublicStaticMethod : <T extends publicClass>() => void
+>T : T
 >privateModule : any
     }
     myPublicMethod<T extends privateModule.publicClass>() {
->myPublicMethod : <T extends privateModule.publicClass>() => void
+>myPublicMethod : <T extends publicClass>() => void
+>T : T
 >privateModule : any
     }
 }
 function privateFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {
->privateFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
+>privateFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
+>T : T
 >privateModule : any
 }
 
@@= skipped -26, +29 lines =@@
     }
 
     export interface publicInterfaceWithPrivateTypeParameters {
+>publicInterfaceWithPrivateTypeParameters : publicInterfaceWithPrivateTypeParameters
+
         new <T extends privateClass>(): privateClass;  // Error
+>T : T
+
         <T extends privateClass>(): privateClass;  // Error
+>T : T
+
         myMethod<T extends privateClass>(): privateClass;  // Error
 >myMethod : <T extends privateClass>() => privateClass
+>T : T
     }
 
     export interface publicInterfaceWithPublicTypeParameters {
+>publicInterfaceWithPublicTypeParameters : publicInterfaceWithPublicTypeParameters
+
         new <T extends publicClass>(): publicClass;
+>T : T
+
         <T extends publicClass>(): publicClass;
+>T : T
+
         myMethod<T extends publicClass>(): publicClass;
 >myMethod : <T extends publicClass>() => publicClass
+>T : T
     }
 
     interface privateInterfaceWithPrivateTypeParameters {
+>privateInterfaceWithPrivateTypeParameters : privateInterfaceWithPrivateTypeParameters
+
         new <T extends privateClass>(): privateClass;
+>T : T
+
         <T extends privateClass>(): privateClass;
+>T : T
+
         myMethod<T extends privateClass>(): privateClass;
 >myMethod : <T extends privateClass>() => privateClass
+>T : T
     }
 
     interface privateInterfaceWithPublicTypeParameters {
+>privateInterfaceWithPublicTypeParameters : privateInterfaceWithPublicTypeParameters
+
         new <T extends publicClass>(): publicClass;
+>T : T
+
         <T extends publicClass>(): publicClass;
+>T : T
+
         myMethod<T extends publicClass>(): publicClass;
 >myMethod : <T extends publicClass>() => publicClass
+>T : T
     }
 
     export class publicClassWithWithPrivateTypeParameters {
@@= skipped -32, +60 lines =@@
 
         static myPublicStaticMethod<T extends privateClass>() {  // Error
 >myPublicStaticMethod : <T extends privateClass>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T extends privateClass>() {
 >myPrivateStaticMethod : <T extends privateClass>() => void
+>T : T
         }
         myPublicMethod<T extends privateClass>() {  // Error
 >myPublicMethod : <T extends privateClass>() => void
+>T : T
         }
         private myPrivateMethod<T extends privateClass>() {
 >myPrivateMethod : <T extends privateClass>() => void
+>T : T
         }
     }
 
@@= skipped -17, +21 lines =@@
 
         static myPublicStaticMethod<T extends publicClass>() {
 >myPublicStaticMethod : <T extends publicClass>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T extends publicClass>() {
 >myPrivateStaticMethod : <T extends publicClass>() => void
+>T : T
         }
         myPublicMethod<T extends publicClass>() {
 >myPublicMethod : <T extends publicClass>() => void
+>T : T
         }
         private myPrivateMethod<T extends publicClass>() {
 >myPrivateMethod : <T extends publicClass>() => void
+>T : T
         }
     }
 
@@= skipped -17, +21 lines =@@
 
         static myPublicStaticMethod<T extends privateClass>() {
 >myPublicStaticMethod : <T extends privateClass>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T extends privateClass>() {
 >myPrivateStaticMethod : <T extends privateClass>() => void
+>T : T
         }
         myPublicMethod<T extends privateClass>() {
 >myPublicMethod : <T extends privateClass>() => void
+>T : T
         }
         private myPrivateMethod<T extends privateClass>() {
 >myPrivateMethod : <T extends privateClass>() => void
+>T : T
         }
     }
 
@@= skipped -17, +21 lines =@@
 
         static myPublicStaticMethod<T extends publicClass>() {
 >myPublicStaticMethod : <T extends publicClass>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T extends publicClass>() {
 >myPrivateStaticMethod : <T extends publicClass>() => void
+>T : T
         }
         myPublicMethod<T extends publicClass>() {
 >myPublicMethod : <T extends publicClass>() => void
+>T : T
         }
         private myPrivateMethod<T extends publicClass>() {
 >myPrivateMethod : <T extends publicClass>() => void
+>T : T
         }
     }
 
     export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() {  // Error
 >publicFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
+>T : T
     }
 
     export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
 >publicFunctionWithPublicTypeParameters : <T extends publicClass>() => void
+>T : T
     }
 
     function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
 >privateFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
+>T : T
     }
 
     function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
 >privateFunctionWithPublicTypeParameters : <T extends publicClass>() => void
+>T : T
     }
 
     export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
+>publicInterfaceWithPublicTypeParametersWithoutExtends : publicInterfaceWithPublicTypeParametersWithoutExtends
+
         new <T>(): publicClass;
+>T : T
+
         <T>(): publicClass;
+>T : T
+
         myMethod<T>(): publicClass;
 >myMethod : <T>() => publicClass
+>T : T
     }
 
     interface privateInterfaceWithPublicTypeParametersWithoutExtends {
+>privateInterfaceWithPublicTypeParametersWithoutExtends : privateInterfaceWithPublicTypeParametersWithoutExtends
+
         new <T>(): publicClass;
+>T : T
+
         <T>(): publicClass;
+>T : T
+
         myMethod<T>(): publicClass;
 >myMethod : <T>() => publicClass
+>T : T
     }
 
     export class publicClassWithWithPublicTypeParametersWithoutExtends {
@@= skipped -47, +69 lines =@@
 
         static myPublicStaticMethod<T>() {
 >myPublicStaticMethod : <T>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T>() {
 >myPrivateStaticMethod : <T>() => void
+>T : T
         }
         myPublicMethod<T>() {
 >myPublicMethod : <T>() => void
+>T : T
         }
         private myPrivateMethod<T>() {
 >myPrivateMethod : <T>() => void
+>T : T
         }
     }
     class privateClassWithWithPublicTypeParametersWithoutExtends {
@@= skipped -16, +20 lines =@@
 
         static myPublicStaticMethod<T>() {
 >myPublicStaticMethod : <T>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T>() {
 >myPrivateStaticMethod : <T>() => void
+>T : T
         }
         myPublicMethod<T>() {
 >myPublicMethod : <T>() => void
+>T : T
         }
         private myPrivateMethod<T>() {
 >myPrivateMethod : <T>() => void
+>T : T
         }
     }
 
     export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
 >publicFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
+>T : T
     }
 
     function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
 >privateFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
+>T : T
     }
 
     export interface publicInterfaceWithPrivatModuleTypeParameters {
+>publicInterfaceWithPrivatModuleTypeParameters : publicInterfaceWithPrivatModuleTypeParameters
+
         new <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
+>T : T
 >privateModule : any
 >privateModule : any
 
         <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
+>T : T
 >privateModule : any
 >privateModule : any
 
         myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
->myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
+>myMethod : <T extends publicClass>() => publicClass
+>T : T
 >privateModule : any
 >privateModule : any
     }
@@= skipped -38, +49 lines =@@
 >publicClassWithWithPrivateModuleTypeParameters : publicClassWithWithPrivateModuleTypeParameters
 
         static myPublicStaticMethod<T extends privateModule.publicClass>() {  // Error
->myPublicStaticMethod : <T extends privateModule.publicClass>() => void
+>myPublicStaticMethod : <T extends publicClass>() => void
+>T : T
 >privateModule : any
         }
         myPublicMethod<T extends privateModule.publicClass>() {  // Error
->myPublicMethod : <T extends privateModule.publicClass>() => void
+>myPublicMethod : <T extends publicClass>() => void
+>T : T
 >privateModule : any
         }
     }
     export function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {  // Error
->publicFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
+>publicFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
+>T : T
 >privateModule : any
     }
 
 
     interface privateInterfaceWithPrivatModuleTypeParameters {
+>privateInterfaceWithPrivatModuleTypeParameters : privateInterfaceWithPrivatModuleTypeParameters
+
         new <T extends privateModule.publicClass>(): privateModule.publicClass;  
+>T : T
 >privateModule : any
 >privateModule : any
 
         <T extends privateModule.publicClass>(): privateModule.publicClass;  
+>T : T
 >privateModule : any
 >privateModule : any
 
         myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  
->myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
+>myMethod : <T extends publicClass>() => publicClass
+>T : T
 >privateModule : any
 >privateModule : any
     }
@@= skipped -32, +40 lines =@@
 >privateClassWithWithPrivateModuleTypeParameters : privateClassWithWithPrivateModuleTypeParameters
 
         static myPublicStaticMethod<T extends privateModule.publicClass>() {  
->myPublicStaticMethod : <T extends privateModule.publicClass>() => void
+>myPublicStaticMethod : <T extends publicClass>() => void
+>T : T
 >privateModule : any
         }
         myPublicMethod<T extends privateModule.publicClass>() { 
->myPublicMethod : <T extends privateModule.publicClass>() => void
+>myPublicMethod : <T extends publicClass>() => void
+>T : T
 >privateModule : any
         }
     }
     function privateFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() { 
->privateFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
+>privateFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
+>T : T
 >privateModule : any
     }
 
@@= skipped -27, +30 lines =@@
     }
 
     export interface publicInterfaceWithPrivateTypeParameters {
+>publicInterfaceWithPrivateTypeParameters : publicInterfaceWithPrivateTypeParameters
+
         new <T extends privateClass>(): privateClass; 
+>T : T
+
         <T extends privateClass>(): privateClass;
+>T : T
+
         myMethod<T extends privateClass>(): privateClass; 
 >myMethod : <T extends privateClass>() => privateClass
+>T : T
     }
 
     export interface publicInterfaceWithPublicTypeParameters {
+>publicInterfaceWithPublicTypeParameters : publicInterfaceWithPublicTypeParameters
+
         new <T extends publicClass>(): publicClass;
+>T : T
+
         <T extends publicClass>(): publicClass;
+>T : T
+
         myMethod<T extends publicClass>(): publicClass;
 >myMethod : <T extends publicClass>() => publicClass
+>T : T
     }
 
     interface privateInterfaceWithPrivateTypeParameters {
+>privateInterfaceWithPrivateTypeParameters : privateInterfaceWithPrivateTypeParameters
+
         new <T extends privateClass>(): privateClass;
+>T : T
+
         <T extends privateClass>(): privateClass;
+>T : T
+
         myMethod<T extends privateClass>(): privateClass;
 >myMethod : <T extends privateClass>() => privateClass
+>T : T
     }
 
     interface privateInterfaceWithPublicTypeParameters {
+>privateInterfaceWithPublicTypeParameters : privateInterfaceWithPublicTypeParameters
+
         new <T extends publicClass>(): publicClass;
+>T : T
+
         <T extends publicClass>(): publicClass;
+>T : T
+
         myMethod<T extends publicClass>(): publicClass;
 >myMethod : <T extends publicClass>() => publicClass
+>T : T
     }
 
     export class publicClassWithWithPrivateTypeParameters {
@@= skipped -32, +60 lines =@@
 
         static myPublicStaticMethod<T extends privateClass>() { 
 >myPublicStaticMethod : <T extends privateClass>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T extends privateClass>() {
 >myPrivateStaticMethod : <T extends privateClass>() => void
+>T : T
         }
         myPublicMethod<T extends privateClass>() {  
 >myPublicMethod : <T extends privateClass>() => void
+>T : T
         }
         private myPrivateMethod<T extends privateClass>() {
 >myPrivateMethod : <T extends privateClass>() => void
+>T : T
         }
     }
 
@@= skipped -17, +21 lines =@@
 
         static myPublicStaticMethod<T extends publicClass>() {
 >myPublicStaticMethod : <T extends publicClass>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T extends publicClass>() {
 >myPrivateStaticMethod : <T extends publicClass>() => void
+>T : T
         }
         myPublicMethod<T extends publicClass>() {
 >myPublicMethod : <T extends publicClass>() => void
+>T : T
         }
         private myPrivateMethod<T extends publicClass>() {
 >myPrivateMethod : <T extends publicClass>() => void
+>T : T
         }
     }
 
@@= skipped -17, +21 lines =@@
 
         static myPublicStaticMethod<T extends privateClass>() {
 >myPublicStaticMethod : <T extends privateClass>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T extends privateClass>() {
 >myPrivateStaticMethod : <T extends privateClass>() => void
+>T : T
         }
         myPublicMethod<T extends privateClass>() {
 >myPublicMethod : <T extends privateClass>() => void
+>T : T
         }
         private myPrivateMethod<T extends privateClass>() {
 >myPrivateMethod : <T extends privateClass>() => void
+>T : T
         }
     }
 
@@= skipped -17, +21 lines =@@
 
         static myPublicStaticMethod<T extends publicClass>() {
 >myPublicStaticMethod : <T extends publicClass>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T extends publicClass>() {
 >myPrivateStaticMethod : <T extends publicClass>() => void
+>T : T
         }
         myPublicMethod<T extends publicClass>() {
 >myPublicMethod : <T extends publicClass>() => void
+>T : T
         }
         private myPrivateMethod<T extends publicClass>() {
 >myPrivateMethod : <T extends publicClass>() => void
+>T : T
         }
     }
 
     export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() { 
 >publicFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
+>T : T
     }
 
     export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
 >publicFunctionWithPublicTypeParameters : <T extends publicClass>() => void
+>T : T
     }
 
     function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
 >privateFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
+>T : T
     }
 
     function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
 >privateFunctionWithPublicTypeParameters : <T extends publicClass>() => void
+>T : T
     }
 
     export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
+>publicInterfaceWithPublicTypeParametersWithoutExtends : publicInterfaceWithPublicTypeParametersWithoutExtends
+
         new <T>(): publicClass;
+>T : T
+
         <T>(): publicClass;
+>T : T
+
         myMethod<T>(): publicClass;
 >myMethod : <T>() => publicClass
+>T : T
     }
 
     interface privateInterfaceWithPublicTypeParametersWithoutExtends {
+>privateInterfaceWithPublicTypeParametersWithoutExtends : privateInterfaceWithPublicTypeParametersWithoutExtends
+
         new <T>(): publicClass;
+>T : T
+
         <T>(): publicClass;
+>T : T
+
         myMethod<T>(): publicClass;
 >myMethod : <T>() => publicClass
+>T : T
     }
 
     export class publicClassWithWithPublicTypeParametersWithoutExtends {
@@= skipped -47, +69 lines =@@
 
         static myPublicStaticMethod<T>() {
 >myPublicStaticMethod : <T>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T>() {
 >myPrivateStaticMethod : <T>() => void
+>T : T
         }
         myPublicMethod<T>() {
 >myPublicMethod : <T>() => void
+>T : T
         }
         private myPrivateMethod<T>() {
 >myPrivateMethod : <T>() => void
+>T : T
         }
     }
     class privateClassWithWithPublicTypeParametersWithoutExtends {
@@= skipped -16, +20 lines =@@
 
         static myPublicStaticMethod<T>() {
 >myPublicStaticMethod : <T>() => void
+>T : T
         }
         private static myPrivateStaticMethod<T>() {
 >myPrivateStaticMethod : <T>() => void
+>T : T
         }
         myPublicMethod<T>() {
 >myPublicMethod : <T>() => void
+>T : T
         }
         private myPrivateMethod<T>() {
 >myPrivateMethod : <T>() => void
+>T : T
         }
     }
 
     export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
 >publicFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
+>T : T
     }
 
     function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
 >privateFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
+>T : T
     }
 }
