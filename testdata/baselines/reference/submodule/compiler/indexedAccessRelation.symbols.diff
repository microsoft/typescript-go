--- old.indexedAccessRelation.symbols
+++ new.indexedAccessRelation.symbols
@@= skipped -7, +7 lines =@@
 >S : Symbol(S, Decl(indexedAccessRelation.ts, 2, 16))
 
     setState<K extends keyof S>(state: Pick<S, K>) {}
->setState : Symbol(Component.setState, Decl(indexedAccessRelation.ts, 2, 20))
+>setState : Symbol(setState, Decl(indexedAccessRelation.ts, 2, 20))
 >K : Symbol(K, Decl(indexedAccessRelation.ts, 3, 13))
 >S : Symbol(S, Decl(indexedAccessRelation.ts, 2, 16))
 >state : Symbol(state, Decl(indexedAccessRelation.ts, 3, 32))
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(indexedAccessRelation.ts, 6, 23))
 
     a?: T;
->a : Symbol(State.a, Decl(indexedAccessRelation.ts, 6, 27))
+>a : Symbol(a, Decl(indexedAccessRelation.ts, 6, 27))
 >T : Symbol(T, Decl(indexedAccessRelation.ts, 6, 23))
 }
 
@@= skipped -18, +18 lines =@@
 >T : Symbol(T, Decl(indexedAccessRelation.ts, 12, 11))
 {
     foo(a: T) {
->foo : Symbol(Comp.foo, Decl(indexedAccessRelation.ts, 13, 1))
+>foo : Symbol(foo, Decl(indexedAccessRelation.ts, 13, 1))
 >a : Symbol(a, Decl(indexedAccessRelation.ts, 14, 8))
 >T : Symbol(T, Decl(indexedAccessRelation.ts, 12, 11))
 
         this.setState({ a: a });
->this.setState : Symbol(Component.setState, Decl(indexedAccessRelation.ts, 2, 20))
+>this.setState : Symbol(setState, Decl(indexedAccessRelation.ts, 2, 20))
 >this : Symbol(Comp, Decl(indexedAccessRelation.ts, 10, 12))
->setState : Symbol(Component.setState, Decl(indexedAccessRelation.ts, 2, 20))
+>setState : Symbol(setState, Decl(indexedAccessRelation.ts, 2, 20))
 >a : Symbol(a, Decl(indexedAccessRelation.ts, 15, 23))
 >a : Symbol(a, Decl(indexedAccessRelation.ts, 14, 8))
     }
