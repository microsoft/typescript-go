--- old.strictOptionalProperties1.types
+++ new.strictOptionalProperties1.types
@@= skipped -1, +1 lines =@@
 
 === strictOptionalProperties1.ts ===
 function f1(obj: { a?: string, b?: string | undefined }) {
->f1 : (obj: { a?: string; b?: string | undefined; }) => void
->obj : { a?: string; b?: string | undefined; }
+>f1 : (obj: { a?: string | undefined; b?: string | undefined; }) => void
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string | undefined
 >b : string | undefined
 
     let a = obj.a;  // string | undefined
 >a : string | undefined
 >obj.a : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string | undefined
 
     let b = obj.b;  // string | undefined
 >b : string | undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 
     obj.a = 'hello';
 >obj.a = 'hello' : "hello"
 >obj.a : string
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string
 >'hello' : "hello"
 
     obj.b = 'hello';
 >obj.b = 'hello' : "hello"
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 >'hello' : "hello"
 
     obj.a = undefined;  // Error
 >obj.a = undefined : undefined
 >obj.a : string
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string
 >undefined : undefined
 
     obj.b = undefined;
 >obj.b = undefined : undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 >undefined : undefined
 }
 
 function f2(obj: { a?: string, b?: string | undefined }) {
->f2 : (obj: { a?: string; b?: string | undefined; }) => void
->obj : { a?: string; b?: string | undefined; }
+>f2 : (obj: { a?: string | undefined; b?: string | undefined; }) => void
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string | undefined
 >b : string | undefined
 
     obj = obj;
->obj = obj : { a?: string; b?: string | undefined; }
->obj : { a?: string; b?: string | undefined; }
->obj : { a?: string; b?: string | undefined; }
+>obj = obj : { a?: string | undefined; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 
     obj.a = obj.a;  // Error
 >obj.a = obj.a : string | undefined
 >obj.a : string
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string
 >obj.a : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string | undefined
 
     obj.b = obj.b;
 >obj.b = obj.b : string | undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 
     if ('a' in obj) {
 >'a' in obj : boolean
 >'a' : "a"
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 
         obj.a;
 >obj.a : string
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string
 
         obj.a = obj.a;
 >obj.a = obj.a : string
 >obj.a : string
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string
 >obj.a : string
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string
     }
     else {
         obj.a;
 >obj.a : undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : undefined
 
         obj.a = obj.a;  // Error
 >obj.a = obj.a : undefined
 >obj.a : string
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string
 >obj.a : undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : undefined
     }
     if (obj.hasOwnProperty('a')) {
 >obj.hasOwnProperty('a') : boolean
 >obj.hasOwnProperty : (v: PropertyKey) => boolean
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >hasOwnProperty : (v: PropertyKey) => boolean
 >'a' : "a"
 
         obj.a;
 >obj.a : string
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string
 
         obj.a = obj.a;
 >obj.a = obj.a : string
 >obj.a : string
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string
 >obj.a : string
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string
     }
     else {
         obj.a;
 >obj.a : undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : undefined
 
         obj.a = obj.a;  // Error
 >obj.a = obj.a : undefined
 >obj.a : string
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : string
 >obj.a : undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >a : undefined
     }
     if ('b' in obj) {
 >'b' in obj : boolean
 >'b' : "b"
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 
         obj.b;
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 
         obj.b = obj.b;
 >obj.b = obj.b : string | undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
     }
     else {
         obj.b;
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 
         obj.b = obj.b;
 >obj.b = obj.b : string | undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
     }
     if (obj.hasOwnProperty('b')) {
 >obj.hasOwnProperty('b') : boolean
 >obj.hasOwnProperty : (v: PropertyKey) => boolean
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >hasOwnProperty : (v: PropertyKey) => boolean
 >'b' : "b"
 
         obj.b;
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 
         obj.b = obj.b;
 >obj.b = obj.b : string | undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
     }
     else {
         obj.b;
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 
         obj.b = obj.b;
 >obj.b = obj.b : string | undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
 >obj.b : string | undefined
->obj : { a?: string; b?: string | undefined; }
+>obj : { a?: string | undefined; b?: string | undefined; }
 >b : string | undefined
     }
 }
@@= skipped -265, +265 lines =@@
 }
 
 function f4(t: [string?]) {
->f4 : (t: [string?]) => void
->t : [string?]
+>f4 : (t: [(string | undefined)?]) => void
+>t : [(string | undefined)?]
 
     let x = t[0];  // string | undefined
 >x : string | undefined
 >t[0] : string | undefined
->t : [string?]
+>t : [(string | undefined)?]
 >0 : 0
 
     t[0] = 'hello';
 >t[0] = 'hello' : "hello"
 >t[0] : string
->t : [string?]
+>t : [(string | undefined)?]
 >0 : 0
 >'hello' : "hello"
 
     t[0] = undefined;  // Error
 >t[0] = undefined : undefined
 >t[0] : string
->t : [string?]
+>t : [(string | undefined)?]
 >0 : 0
 >undefined : undefined
 }
 
 function f4a(t1: [number, string?], t2: [number, string?, string?]) {
->f4a : (t1: [number, string?], t2: [number, string?, string?]) => void
->t1 : [number, string?]
->t2 : [number, string?, string?]
+>f4a : (t1: [number, (string | undefined)?], t2: [number, (string | undefined)?, (string | undefined)?]) => void
+>t1 : [number, (string | undefined)?]
+>t2 : [number, (string | undefined)?, (string | undefined)?]
 
     t1 = t2;  // Wasn't an error, but should be
->t1 = t2 : [number, string?, string?]
->t1 : [number, string?]
->t2 : [number, string?, string?]
+>t1 = t2 : [number, (string | undefined)?, (string | undefined)?]
+>t1 : [number, (string | undefined)?]
+>t2 : [number, (string | undefined)?, (string | undefined)?]
 }
 
 function f5(t: [number, string?, boolean?]) {
->f5 : (t: [number, string?, boolean?]) => void
->t : [number, string?, boolean?]
+>f5 : (t: [number, (string | undefined)?, (boolean | undefined)?]) => void
+>t : [number, (string | undefined)?, (boolean | undefined)?]
 
     t = [42];
 >t = [42] : [number]
->t : [number, string?, boolean?]
+>t : [number, (string | undefined)?, (boolean | undefined)?]
 >[42] : [number]
 >42 : 42
 
     t = [42, 'abc'];
 >t = [42, 'abc'] : [number, string]
->t : [number, string?, boolean?]
+>t : [number, (string | undefined)?, (boolean | undefined)?]
 >[42, 'abc'] : [number, string]
 >42 : 42
 >'abc' : "abc"
 
     t = [42, 'abc', true];
 >t = [42, 'abc', true] : [number, string, true]
->t : [number, string?, boolean?]
+>t : [number, (string | undefined)?, (boolean | undefined)?]
 >[42, 'abc', true] : [number, string, true]
 >42 : 42
 >'abc' : "abc"
 >true : true
 
     t = [42, ,];
->t = [42, ,] : [number, never?]
->t : [number, string?, boolean?]
->[42, ,] : [number, never?]
+>t = [42, ,] : [number, undefined?]
+>t : [number, (string | undefined)?, (boolean | undefined)?]
+>[42, ,] : [number, undefined?]
 >42 : 42
 > : undefined
 
     t = [42, , ,];
->t = [42, , ,] : [number, never?, never?]
->t : [number, string?, boolean?]
->[42, , ,] : [number, never?, never?]
+>t = [42, , ,] : [number, undefined?, undefined?]
+>t : [number, (string | undefined)?, (boolean | undefined)?]
+>[42, , ,] : [number, undefined?, undefined?]
 >42 : 42
 > : undefined
 > : undefined
 
     t = [42, , , ,];  // Error
->t = [42, , , ,] : [number, never?, never?, never?]
->t : [number, string?, boolean?]
->[42, , , ,] : [number, never?, never?, never?]
+>t = [42, , , ,] : [number, undefined?, undefined?, undefined?]
+>t : [number, (string | undefined)?, (boolean | undefined)?]
+>[42, , , ,] : [number, undefined?, undefined?, undefined?]
 >42 : 42
 > : undefined
 > : undefined
 > : undefined
 
     t = [, , true];  // Error
->t = [, , true] : [never?, never?, true?]
->t : [number, string?, boolean?]
->[, , true] : [never?, never?, true?]
+>t = [, , true] : [undefined?, undefined?, (true | undefined)?]
+>t : [number, (string | undefined)?, (boolean | undefined)?]
+>[, , true] : [undefined?, undefined?, (true | undefined)?]
 > : undefined
 > : undefined
 >true : true
 
     t = [42, undefined, true];  // Error
 >t = [42, undefined, true] : [number, undefined, true]
->t : [number, string?, boolean?]
+>t : [number, (string | undefined)?, (boolean | undefined)?]
 >[42, undefined, true] : [number, undefined, true]
 >42 : 42
 >undefined : undefined
@@= skipped -105, +105 lines =@@
 >f6 : () => void
 
     const t1 = [1, 2] as const;
->t1 : readonly [1, 2]
->[1, 2] as const : readonly [1, 2]
->[1, 2] : readonly [1, 2]
+>t1 : [1, 2]
+>[1, 2] as const : [1, 2]
+>[1, 2] : [1, 2]
 >1 : 1
 >2 : 2
 
     const t2 = [1, 2, ,] as const;
->t2 : readonly [1, 2, never?]
->[1, 2, ,] as const : readonly [1, 2, never?]
->[1, 2, ,] : readonly [1, 2, never?]
+>t2 : [1, 2, undefined?]
+>[1, 2, ,] as const : [1, 2, undefined?]
+>[1, 2, ,] : [1, 2, undefined?]
 >1 : 1
 >2 : 2
 > : undefined
 
     const t3 = [1, 2, , ,] as const;
->t3 : readonly [1, 2, never?, never?]
->[1, 2, , ,] as const : readonly [1, 2, never?, never?]
->[1, 2, , ,] : readonly [1, 2, never?, never?]
+>t3 : [1, 2, undefined?, undefined?]
+>[1, 2, , ,] as const : [1, 2, undefined?, undefined?]
+>[1, 2, , ,] : [1, 2, undefined?, undefined?]
 >1 : 1
 >2 : 2
 > : undefined
 > : undefined
 
     const t4 = [1, , 2] as const;
->t4 : readonly [1, never?, 2?]
->[1, , 2] as const : readonly [1, never?, 2?]
->[1, , 2] : readonly [1, never?, 2?]
+>t4 : [1, undefined?, (2 | undefined)?]
+>[1, , 2] as const : [1, undefined?, (2 | undefined)?]
+>[1, , 2] : [1, undefined?, (2 | undefined)?]
 >1 : 1
 > : undefined
 >2 : 2
 
     const t5 = [1, , , 2] as const;
->t5 : readonly [1, never?, never?, 2?]
->[1, , , 2] as const : readonly [1, never?, never?, 2?]
->[1, , , 2] : readonly [1, never?, never?, 2?]
+>t5 : [1, undefined?, undefined?, (2 | undefined)?]
+>[1, , , 2] as const : [1, undefined?, undefined?, (2 | undefined)?]
+>[1, , , 2] : [1, undefined?, undefined?, (2 | undefined)?]
 >1 : 1
 > : undefined
 > : undefined
@@= skipped -86, +86 lines =@@
 // Example from #13195
 
 const t1: [number, string?, boolean?] = [1];
->t1 : [number, string?, boolean?]
+>t1 : [number, (string | undefined)?, (boolean | undefined)?]
 >[1] : [number]
 >1 : 1
 
 const t2: [number, string?, boolean?] = [1, undefined];
->t2 : [number, string?, boolean?]
+>t2 : [number, (string | undefined)?, (boolean | undefined)?]
 >[1, undefined] : [number, undefined]
 >1 : 1
 >undefined : undefined
 
 const t3: [number, string?, boolean?] = [1, "string", undefined];
->t3 : [number, string?, boolean?]
+>t3 : [number, (string | undefined)?, (boolean | undefined)?]
 >[1, "string", undefined] : [number, string, undefined]
 >1 : 1
 >"string" : "string"
 >undefined : undefined
 
 const t4: [number, string?, boolean?] = [1, undefined, undefined];
->t4 : [number, string?, boolean?]
+>t4 : [number, (string | undefined)?, (boolean | undefined)?]
 >[1, undefined, undefined] : [number, undefined, undefined]
 >1 : 1
 >undefined : undefined
@@= skipped -27, +27 lines =@@
 // Example from #13195
 
 const x: { foo?: number } = { foo: undefined };
->x : { foo?: number; }
+>x : { foo?: number | undefined; }
 >foo : number | undefined
 >{ foo: undefined } : { foo: undefined; }
 >foo : undefined
@@= skipped -12, +12 lines =@@
 >{ foo: 123, ...x } : { foo: number; }
 >foo : number
 >123 : 123
->x : { foo?: number; }
+>x : { foo?: number | undefined; }
 
 // Index signatures and strict optional properties
 
@@= skipped -26, +26 lines =@@
 >p : string | undefined
 
 declare let ox3: { p?: string };
->ox3 : { p?: string; }
+>ox3 : { p?: string | undefined; }
 >p : string | undefined
 
 declare let ox4: { p?: string | undefined };
@@= skipped -14, +14 lines =@@
 >tx2 : [string | undefined]
 
 declare let tx3: [string?];
->tx3 : [string?]
+>tx3 : [(string | undefined)?]
 
 declare let tx4: [(string | undefined)?];
 >tx4 : [(string | undefined)?]
 
 declare function f11<T>(x: { p?: T }): T;
->f11 : <T>(x: { p?: T; }) => T
->x : { p?: T; }
+>f11 : <T>(x: { p?: T | undefined; }) => T
+>x : { p?: T | undefined; }
 >p : T | undefined
 
 f11(ox1);  // string
 >f11(ox1) : string
->f11 : <T>(x: { p?: T; }) => T
+>f11 : <T>(x: { p?: T | undefined; }) => T
 >ox1 : { p: string; }
 
 f11(ox2);  // string | undefined
 >f11(ox2) : string | undefined
->f11 : <T>(x: { p?: T; }) => T
+>f11 : <T>(x: { p?: T | undefined; }) => T
 >ox2 : { p: string | undefined; }
 
 f11(ox3);  // string
 >f11(ox3) : string
->f11 : <T>(x: { p?: T; }) => T
->ox3 : { p?: string; }
+>f11 : <T>(x: { p?: T | undefined; }) => T
+>ox3 : { p?: string | undefined; }
 
 f11(ox4);  // string | undefined
 >f11(ox4) : string | undefined
->f11 : <T>(x: { p?: T; }) => T
+>f11 : <T>(x: { p?: T | undefined; }) => T
 >ox4 : { p?: string | undefined; }
 
 declare function f12<T>(x: [T?]): T;
->f12 : <T>(x: [T?]) => T
->x : [T?]
+>f12 : <T>(x: [(T | undefined)?]) => T
+>x : [(T | undefined)?]
 
 f12(tx1);  // string
 >f12(tx1) : string
->f12 : <T>(x: [T?]) => T
+>f12 : <T>(x: [(T | undefined)?]) => T
 >tx1 : [string]
 
 f12(tx2);  // string | undefined
 >f12(tx2) : string | undefined
->f12 : <T>(x: [T?]) => T
+>f12 : <T>(x: [(T | undefined)?]) => T
 >tx2 : [string | undefined]
 
 f12(tx3);  // string
 >f12(tx3) : string
->f12 : <T>(x: [T?]) => T
->tx3 : [string?]
+>f12 : <T>(x: [(T | undefined)?]) => T
+>tx3 : [(string | undefined)?]
 
 f12(tx4);  // string | undefined
 >f12(tx4) : string | undefined
->f12 : <T>(x: [T?]) => T
+>f12 : <T>(x: [(T | undefined)?]) => T
 >tx4 : [(string | undefined)?]
 
 declare function f13<T>(x: Partial<T>): T;
@@= skipped -71, +71 lines =@@
 f13(ox3);  // { p: string }
 >f13(ox3) : { p: string; }
 >f13 : <T>(x: Partial<T>) => T
->ox3 : { p?: string; }
+>ox3 : { p?: string | undefined; }
 
 f13(ox4);  // { p: string | undefined }
 >f13(ox4) : { p: string | undefined; }
@@= skipped -20, +20 lines =@@
 f13(tx3);  // [string]
 >f13(tx3) : [string]
 >f13 : <T>(x: Partial<T>) => T
->tx3 : [string?]
+>tx3 : [(string | undefined)?]
 
 f13(tx4);  // [string | undefined]
 >f13(tx4) : [string | undefined]
@@= skipped -120, +120 lines =@@
 >b : string
 
 declare var c: {a: number, b?: string}
->c : { a: number; b?: string; }
+>c : { a: number; b?: string | undefined; }
 >a : number
 >b : string | undefined
 
@@= skipped -20, +20 lines =@@
 >b : { a: number; b: string; }
 
 a = c;
->a = c : { a: number; b?: string; }
+>a = c : { a: number; b?: string | undefined; }
 >a : { [x: string]: string | number; }
->c : { a: number; b?: string; }
+>c : { a: number; b?: string | undefined; }
 
 a = d;  // Error
 >a = d : { a: number; b: string | undefined; }
@@= skipped -18, +18 lines =@@
 
 interface PropsFromReact {
     onClick?: () => void;
->onClick : (() => void) | undefined
+>onClick : () => void | undefined
 }
 
 interface PropsFromMaterialUI {
     onClick?: (() => void) | undefined;
->onClick : (() => void) | undefined
+>onClick : () => void | undefined
 }
 
 type TheTypeFromMaterialUI = PropsFromReact & PropsFromMaterialUI;
