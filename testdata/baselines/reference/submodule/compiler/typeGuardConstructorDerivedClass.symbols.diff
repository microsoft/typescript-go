--- old.typeGuardConstructorDerivedClass.symbols
+++ new.typeGuardConstructorDerivedClass.symbols
@@ -6,7 +6,7 @@
 >C1 : Symbol(C1, Decl(typeGuardConstructorDerivedClass.ts, 0, 0))
 
     property1: number;
->property1 : Symbol(C1.property1, Decl(typeGuardConstructorDerivedClass.ts, 1, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorDerivedClass.ts, 1, 10))
 }
 
 class C2 extends C1 {
@@ -14,7 +14,7 @@
 >C1 : Symbol(C1, Decl(typeGuardConstructorDerivedClass.ts, 0, 0))
 
     property2: number;
->property2 : Symbol(C2.property2, Decl(typeGuardConstructorDerivedClass.ts, 5, 21))
+>property2 : Symbol(property2, Decl(typeGuardConstructorDerivedClass.ts, 5, 21))
 }
 
 let var1: C2 | string;
@@ -22,9 +22,9 @@
 >C2 : Symbol(C2, Decl(typeGuardConstructorDerivedClass.ts, 3, 1))
 
 if (var1.constructor === C1) {
->var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var1.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var1 : Symbol(var1, Decl(typeGuardConstructorDerivedClass.ts, 9, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C1 : Symbol(C1, Decl(typeGuardConstructorDerivedClass.ts, 0, 0))
 
     var1; // never
@@ -34,18 +34,18 @@
 >var1 : Symbol(var1, Decl(typeGuardConstructorDerivedClass.ts, 9, 3))
 }
 if (var1.constructor === C2) {
->var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var1.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var1 : Symbol(var1, Decl(typeGuardConstructorDerivedClass.ts, 9, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C2 : Symbol(C2, Decl(typeGuardConstructorDerivedClass.ts, 3, 1))
 
     var1; // C2
 >var1 : Symbol(var1, Decl(typeGuardConstructorDerivedClass.ts, 9, 3))
 
     var1.property1; // number
->var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorDerivedClass.ts, 1, 10))
+>var1.property1 : Symbol(property1, Decl(typeGuardConstructorDerivedClass.ts, 1, 10))
 >var1 : Symbol(var1, Decl(typeGuardConstructorDerivedClass.ts, 9, 3))
->property1 : Symbol(C1.property1, Decl(typeGuardConstructorDerivedClass.ts, 1, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorDerivedClass.ts, 1, 10))
 }
 
 // Derived classes with the same structure
@@ -61,18 +61,18 @@
 >C4 : Symbol(C4, Decl(typeGuardConstructorDerivedClass.ts, 20, 11))
 
 if (var2.constructor === C3) {
->var2.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var2.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var2 : Symbol(var2, Decl(typeGuardConstructorDerivedClass.ts, 24, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C3 : Symbol(C3, Decl(typeGuardConstructorDerivedClass.ts, 17, 1))
 
     var2; // never
 >var2 : Symbol(var2, Decl(typeGuardConstructorDerivedClass.ts, 24, 3))
 }
 if (var2.constructor === C4) {
->var2.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var2.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var2 : Symbol(var2, Decl(typeGuardConstructorDerivedClass.ts, 24, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C4 : Symbol(C4, Decl(typeGuardConstructorDerivedClass.ts, 20, 11))
 
     var2; // C4
@@ -84,14 +84,14 @@
 >C5 : Symbol(C5, Decl(typeGuardConstructorDerivedClass.ts, 30, 1))
 
     property1: number;
->property1 : Symbol(C5.property1, Decl(typeGuardConstructorDerivedClass.ts, 33, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorDerivedClass.ts, 33, 10))
 }
 
 class C6 {
 >C6 : Symbol(C6, Decl(typeGuardConstructorDerivedClass.ts, 35, 1))
 
     property2: number;
->property2 : Symbol(C6.property2, Decl(typeGuardConstructorDerivedClass.ts, 37, 10))
+>property2 : Symbol(property2, Decl(typeGuardConstructorDerivedClass.ts, 37, 10))
 }
 
 let let3: C6 | string;
@@ -99,18 +99,18 @@
 >C6 : Symbol(C6, Decl(typeGuardConstructorDerivedClass.ts, 35, 1))
 
 if (let3.constructor === C5) {
->let3.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>let3.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >let3 : Symbol(let3, Decl(typeGuardConstructorDerivedClass.ts, 41, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C5 : Symbol(C5, Decl(typeGuardConstructorDerivedClass.ts, 30, 1))
 
     let3; // never
 >let3 : Symbol(let3, Decl(typeGuardConstructorDerivedClass.ts, 41, 3))
 }
 if (let3.constructor === C6) {
->let3.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>let3.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >let3 : Symbol(let3, Decl(typeGuardConstructorDerivedClass.ts, 41, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C6 : Symbol(C6, Decl(typeGuardConstructorDerivedClass.ts, 35, 1))
 
     let3; // C6
@@ -122,14 +122,14 @@
 >C7 : Symbol(C7, Decl(typeGuardConstructorDerivedClass.ts, 47, 1))
 
     property1: number
->property1 : Symbol(C7.property1, Decl(typeGuardConstructorDerivedClass.ts, 50, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorDerivedClass.ts, 50, 10))
 }
 
 class C8 {
 >C8 : Symbol(C8, Decl(typeGuardConstructorDerivedClass.ts, 52, 1))
 
     property1: number;
->property1 : Symbol(C8.property1, Decl(typeGuardConstructorDerivedClass.ts, 54, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorDerivedClass.ts, 54, 10))
 }
 
 let let4: C8 | string;
@@ -137,18 +137,18 @@
 >C8 : Symbol(C8, Decl(typeGuardConstructorDerivedClass.ts, 52, 1))
 
 if (let4.constructor === C7) {
->let4.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>let4.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >let4 : Symbol(let4, Decl(typeGuardConstructorDerivedClass.ts, 58, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C7 : Symbol(C7, Decl(typeGuardConstructorDerivedClass.ts, 47, 1))
 
     let4; // never
 >let4 : Symbol(let4, Decl(typeGuardConstructorDerivedClass.ts, 58, 3))
 }
 if (let4.constructor === C8) {
->let4.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>let4.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >let4 : Symbol(let4, Decl(typeGuardConstructorDerivedClass.ts, 58, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C8 : Symbol(C8, Decl(typeGuardConstructorDerivedClass.ts, 52, 1))
 
     let4; // C8
