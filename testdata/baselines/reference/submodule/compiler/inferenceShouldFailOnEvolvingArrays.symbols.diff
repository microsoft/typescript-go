--- old.inferenceShouldFailOnEvolvingArrays.symbols
+++ new.inferenceShouldFailOnEvolvingArrays.symbols
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(inferenceShouldFailOnEvolvingArrays.ts, 2, 19))
 
     console.log(arg.length);
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->arg.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
+>arg.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >arg : Symbol(arg, Decl(inferenceShouldFailOnEvolvingArrays.ts, 2, 55))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
     return arg;
 >arg : Symbol(arg, Decl(inferenceShouldFailOnEvolvingArrays.ts, 2, 55))
@@= skipped -32, +32 lines =@@
 >T : Symbol(T, Decl(inferenceShouldFailOnEvolvingArrays.ts, 10, 24))
 
     console.log(arg[0].length);
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->arg[0].length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
+>arg[0].length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >arg : Symbol(arg, Decl(inferenceShouldFailOnEvolvingArrays.ts, 10, 62))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
     return arg;
 >arg : Symbol(arg, Decl(inferenceShouldFailOnEvolvingArrays.ts, 10, 62))
@@= skipped -17, +17 lines =@@
 >zz : Symbol(zz, Decl(inferenceShouldFailOnEvolvingArrays.ts, 15, 3))
 
 zz.push(logLength(42));  // no error; T is inferred as `any`
->zz.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>zz.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >zz : Symbol(zz, Decl(inferenceShouldFailOnEvolvingArrays.ts, 15, 3))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >logLength : Symbol(logLength, Decl(inferenceShouldFailOnEvolvingArrays.ts, 0, 0))
 
 zz = logFirstLength([42]);  // no error; T is inferred as `any[]`
