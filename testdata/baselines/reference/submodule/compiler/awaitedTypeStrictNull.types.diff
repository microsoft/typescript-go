--- old.awaitedTypeStrictNull.types
+++ new.awaitedTypeStrictNull.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/awaitedTypeStrictNull.ts] ////
 
-=== Performance Stats ===
-Instantiation count: 25,000
-
 === awaitedTypeStrictNull.ts ===
 type T1 = Awaited<number>;
 >T1 : number
@@= skipped -64, +61 lines =@@
 >TNullOrUndefined : TNullOrUndefined
 
 interface BadPromise { then(cb: (value: BadPromise) => void): void; }
+>BadPromise : BadPromise
 >then : (cb: (value: BadPromise) => void) => void
 >cb : (value: BadPromise) => void
 >value : BadPromise
@@= skipped -8, +9 lines =@@
 >T16 : any
 
 interface BadPromise1 { then(cb: (value: BadPromise2) => void): void; }
+>BadPromise1 : BadPromise1
 >then : (cb: (value: BadPromise2) => void) => void
 >cb : (value: BadPromise2) => void
 >value : BadPromise2
 
 interface BadPromise2 { then(cb: (value: BadPromise1) => void): void; }
+>BadPromise2 : BadPromise2
 >then : (cb: (value: BadPromise1) => void) => void
 >cb : (value: BadPromise1) => void
 >value : BadPromise1
@@= skipped -23, +25 lines =@@
 // https://github.com/microsoft/TypeScript/issues/33562
 type MaybePromise<T> = T | Promise<T> | PromiseLike<T>
 >MaybePromise : MaybePromise<T>
+>T : T
 
 declare function MaybePromise<T>(value: T): MaybePromise<T>;
 >MaybePromise : <T>(value: T) => MaybePromise<T>
+>T : T
 >value : T
 
 async function main() {
@@= skipped -27, +29 lines =@@
     ] = await Promise.all([
 >await Promise.all([        MaybePromise(1),        MaybePromise('2'),        MaybePromise(true),    ]) : [number, string, boolean]
 >Promise.all([        MaybePromise(1),        MaybePromise('2'),        MaybePromise(true),    ]) : Promise<[number, string, boolean]>
->Promise.all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>Promise.all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >Promise : PromiseConstructor
->all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >[        MaybePromise(1),        MaybePromise('2'),        MaybePromise(true),    ] : [number | Promise<1> | PromiseLike<1>, string | Promise<"2"> | PromiseLike<"2">, true | Promise<true> | PromiseLike<true>]
 
         MaybePromise(1),
@@= skipped -26, +26 lines =@@
 // https://github.com/microsoft/TypeScript/issues/45924
 class Api<D = {}> {
 >Api : Api<D>
+>D : D
 
 	// Should result in `Promise<T>` instead of `Promise<Awaited<T>>`.
 	async post<T = D>() { return this.request<T>(); }
->post : <T = D>() => Promise<T>
+>post : <T>() => Promise<T>
+>T : T
 >this.request<T>() : Promise<T>
->this.request : <D_1>() => Promise<D_1>
+>this.request : <D>() => Promise<D>
 >this : this
->request : <D_1>() => Promise<D_1>
+>request : <D>() => Promise<D>
 
 	async request<D>(): Promise<D> { throw new Error(); }
 >request : <D>() => Promise<D>
+>D : D
 >new Error() : Error
 >Error : ErrorConstructor
 }
@@= skipped -19, +22 lines =@@
 >api : Api<{}>
 
 interface Obj { x: number }
+>Obj : Obj
 >x : number
 
 async function fn<T>(): Promise<T extends object ? { [K in keyof T]: Obj } : Obj> {
->fn : <T>() => Promise<T extends object ? { [K in keyof T]: Obj; } : Obj>
+>fn : <T>() => Promise<T extends object ? { [K in keyof T]: Obj } : Obj>
+>T : T
+>K : K
 
 	// Per #45924, this was failing due to incorrect inference both above and here.
 	// Should not error.
 	return api.post();
->api.post() : Promise<T extends object ? { [K in keyof T]: Obj; } : Obj>
->api.post : <T_1 = {}>() => Promise<T_1>
+>api.post() : Promise<T extends object ? { [K in keyof T]: Obj } : Obj>
+>api.post : <T>() => Promise<T>
 >api : Api<{}>
->post : <T_1 = {}>() => Promise<T_1>
+>post : <T>() => Promise<T>
 }
 
 // helps with tests where '.types' just prints out the type alias name
 type _Expect<TActual extends TExpected, TExpected> = TActual;
 >_Expect : TActual
+>TActual : TActual
+>TExpected : TExpected
 
