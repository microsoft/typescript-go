--- old.autolift4.symbols
+++ new.autolift4.symbols
@@= skipped -4, +4 lines =@@
 >Point : Symbol(Point, Decl(autolift4.ts, 0, 0))
 
     constructor(public x: number, public y: number) {
->x : Symbol(Point.x, Decl(autolift4.ts, 2, 16))
->y : Symbol(Point.y, Decl(autolift4.ts, 2, 33))
+>x : Symbol(x, Decl(autolift4.ts, 2, 16))
+>y : Symbol(y, Decl(autolift4.ts, 2, 33))
 
     }
     getDist() { 
->getDist : Symbol(Point.getDist, Decl(autolift4.ts, 4, 5))
+>getDist : Symbol(getDist, Decl(autolift4.ts, 4, 5))
 
         return Math.sqrt(this.x*this.x + this.y*this.y); 
->Math.sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
+>Math.sqrt : Symbol(sqrt, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
->this.x : Symbol(Point.x, Decl(autolift4.ts, 2, 16))
+>sqrt : Symbol(sqrt, Decl(lib.es5.d.ts, --, --))
+>this.x : Symbol(x, Decl(autolift4.ts, 2, 16))
 >this : Symbol(Point, Decl(autolift4.ts, 0, 0))
->x : Symbol(Point.x, Decl(autolift4.ts, 2, 16))
->this.x : Symbol(Point.x, Decl(autolift4.ts, 2, 16))
+>x : Symbol(x, Decl(autolift4.ts, 2, 16))
+>this.x : Symbol(x, Decl(autolift4.ts, 2, 16))
 >this : Symbol(Point, Decl(autolift4.ts, 0, 0))
->x : Symbol(Point.x, Decl(autolift4.ts, 2, 16))
->this.y : Symbol(Point.y, Decl(autolift4.ts, 2, 33))
+>x : Symbol(x, Decl(autolift4.ts, 2, 16))
+>this.y : Symbol(y, Decl(autolift4.ts, 2, 33))
 >this : Symbol(Point, Decl(autolift4.ts, 0, 0))
->y : Symbol(Point.y, Decl(autolift4.ts, 2, 33))
->this.y : Symbol(Point.y, Decl(autolift4.ts, 2, 33))
+>y : Symbol(y, Decl(autolift4.ts, 2, 33))
+>this.y : Symbol(y, Decl(autolift4.ts, 2, 33))
 >this : Symbol(Point, Decl(autolift4.ts, 0, 0))
->y : Symbol(Point.y, Decl(autolift4.ts, 2, 33))
+>y : Symbol(y, Decl(autolift4.ts, 2, 33))
     }
     static origin = new Point(0,0);
->origin : Symbol(Point.origin, Decl(autolift4.ts, 7, 5))
+>origin : Symbol(origin, Decl(autolift4.ts, 7, 5))
 >Point : Symbol(Point, Decl(autolift4.ts, 0, 0))
 }
 
@@= skipped -36, +36 lines =@@
     constructor(x: number, y: number, public z: number, m:number) {
 >x : Symbol(x, Decl(autolift4.ts, 13, 16))
 >y : Symbol(y, Decl(autolift4.ts, 13, 26))
->z : Symbol(Point3D.z, Decl(autolift4.ts, 13, 37))
+>z : Symbol(z, Decl(autolift4.ts, 13, 37))
 >m : Symbol(m, Decl(autolift4.ts, 13, 55))
 
         super(x, y);
@@= skipped -10, +10 lines =@@
     }
     
     getDist() {
->getDist : Symbol(Point3D.getDist, Decl(autolift4.ts, 15, 5))
+>getDist : Symbol(getDist, Decl(autolift4.ts, 15, 5))
 
         return Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.m);
->Math.sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
+>Math.sqrt : Symbol(sqrt, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
->this.x : Symbol(Point.x, Decl(autolift4.ts, 2, 16))
+>sqrt : Symbol(sqrt, Decl(lib.es5.d.ts, --, --))
+>this.x : Symbol(x, Decl(autolift4.ts, 2, 16))
 >this : Symbol(Point3D, Decl(autolift4.ts, 9, 1))
->x : Symbol(Point.x, Decl(autolift4.ts, 2, 16))
->this.x : Symbol(Point.x, Decl(autolift4.ts, 2, 16))
+>x : Symbol(x, Decl(autolift4.ts, 2, 16))
+>this.x : Symbol(x, Decl(autolift4.ts, 2, 16))
 >this : Symbol(Point3D, Decl(autolift4.ts, 9, 1))
->x : Symbol(Point.x, Decl(autolift4.ts, 2, 16))
->this.y : Symbol(Point.y, Decl(autolift4.ts, 2, 33))
+>x : Symbol(x, Decl(autolift4.ts, 2, 16))
+>this.y : Symbol(y, Decl(autolift4.ts, 2, 33))
 >this : Symbol(Point3D, Decl(autolift4.ts, 9, 1))
->y : Symbol(Point.y, Decl(autolift4.ts, 2, 33))
->this.y : Symbol(Point.y, Decl(autolift4.ts, 2, 33))
+>y : Symbol(y, Decl(autolift4.ts, 2, 33))
+>this.y : Symbol(y, Decl(autolift4.ts, 2, 33))
 >this : Symbol(Point3D, Decl(autolift4.ts, 9, 1))
->y : Symbol(Point.y, Decl(autolift4.ts, 2, 33))
->this.z : Symbol(Point3D.z, Decl(autolift4.ts, 13, 37))
+>y : Symbol(y, Decl(autolift4.ts, 2, 33))
+>this.z : Symbol(z, Decl(autolift4.ts, 13, 37))
 >this : Symbol(Point3D, Decl(autolift4.ts, 9, 1))
->z : Symbol(Point3D.z, Decl(autolift4.ts, 13, 37))
+>z : Symbol(z, Decl(autolift4.ts, 13, 37))
 >this : Symbol(Point3D, Decl(autolift4.ts, 9, 1))
     }        
 }
