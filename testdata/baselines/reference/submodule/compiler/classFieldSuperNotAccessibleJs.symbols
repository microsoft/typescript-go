//// [tests/cases/compiler/classFieldSuperNotAccessibleJs.ts] ////

=== index.js ===
// https://github.com/microsoft/TypeScript/issues/55884

class YaddaBase {
>YaddaBase : Symbol(YaddaBase, Decl(index.js, 0, 0))

    constructor() {
        this.roots = "hi";
>this : Symbol(YaddaBase, Decl(index.js, 0, 0))

        /** @type number */
        this.justProp;
>this : Symbol(YaddaBase, Decl(index.js, 0, 0))

        /** @type string */
        this['literalElementAccess'];
>this : Symbol(YaddaBase, Decl(index.js, 0, 0))

        this.b()
>this.b : Symbol(b, Decl(index.js, 11, 5))
>this : Symbol(YaddaBase, Decl(index.js, 0, 0))
>b : Symbol(b, Decl(index.js, 11, 5))
    }
    accessor b = () => {
>b : Symbol(b, Decl(index.js, 11, 5))

        this.foo = 10
>this : Symbol(YaddaBase, Decl(index.js, 0, 0))
    }
}

class DerivedYadda extends YaddaBase {
>DerivedYadda : Symbol(DerivedYadda, Decl(index.js, 15, 1))
>YaddaBase : Symbol(YaddaBase, Decl(index.js, 0, 0))

    get rootTests() {
>rootTests : Symbol(rootTests, Decl(index.js, 17, 38))

        return super.roots;
>super : Symbol(YaddaBase, Decl(index.js, 0, 0))
    }
    get fooTests() {
>fooTests : Symbol(fooTests, Decl(index.js, 20, 5))

        return super.foo;
>super : Symbol(YaddaBase, Decl(index.js, 0, 0))
    }
    get justPropTests() {
>justPropTests : Symbol(justPropTests, Decl(index.js, 23, 5))

        return super.justProp;
>super : Symbol(YaddaBase, Decl(index.js, 0, 0))
    }
    get literalElementAccessTests() {
>literalElementAccessTests : Symbol(literalElementAccessTests, Decl(index.js, 26, 5))

        return super.literalElementAccess;
>super : Symbol(YaddaBase, Decl(index.js, 0, 0))
    }
}

