--- old.genericPrototypeProperty2.symbols
+++ new.genericPrototypeProperty2.symbols
@@= skipped -2, +2 lines =@@
 === genericPrototypeProperty2.ts ===
 interface EventTarget { x } 
 >EventTarget : Symbol(EventTarget, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(genericPrototypeProperty2.ts, 0, 0))
->x : Symbol(EventTarget.x, Decl(genericPrototypeProperty2.ts, 0, 23))
+>x : Symbol(x, Decl(genericPrototypeProperty2.ts, 0, 23))
 
 class BaseEvent {
 >BaseEvent : Symbol(BaseEvent, Decl(genericPrototypeProperty2.ts, 0, 27))
 
     target: EventTarget;
->target : Symbol(BaseEvent.target, Decl(genericPrototypeProperty2.ts, 1, 17))
+>target : Symbol(target, Decl(genericPrototypeProperty2.ts, 1, 17))
 >EventTarget : Symbol(EventTarget, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(genericPrototypeProperty2.ts, 0, 0))
 }
 
@@= skipped -17, +17 lines =@@
 >BaseEvent : Symbol(BaseEvent, Decl(genericPrototypeProperty2.ts, 0, 27))
 
     target: T;
->target : Symbol(MyEvent.target, Decl(genericPrototypeProperty2.ts, 5, 56))
+>target : Symbol(target, Decl(genericPrototypeProperty2.ts, 5, 56))
 >T : Symbol(T, Decl(genericPrototypeProperty2.ts, 5, 14))
 }
 class BaseEventWrapper {
 >BaseEventWrapper : Symbol(BaseEventWrapper, Decl(genericPrototypeProperty2.ts, 7, 1))
 
     t: BaseEvent;
->t : Symbol(BaseEventWrapper.t, Decl(genericPrototypeProperty2.ts, 8, 24))
+>t : Symbol(t, Decl(genericPrototypeProperty2.ts, 8, 24))
 >BaseEvent : Symbol(BaseEvent, Decl(genericPrototypeProperty2.ts, 0, 27))
 }
 
@@= skipped -16, +16 lines =@@
 >BaseEventWrapper : Symbol(BaseEventWrapper, Decl(genericPrototypeProperty2.ts, 7, 1))
 
     t: MyEvent<any>; // any satisfies constraint and passes assignability check between 'target' properties
->t : Symbol(MyEventWrapper.t, Decl(genericPrototypeProperty2.ts, 12, 47))
+>t : Symbol(t, Decl(genericPrototypeProperty2.ts, 12, 47))
 >MyEvent : Symbol(MyEvent, Decl(genericPrototypeProperty2.ts, 3, 1))
 }
