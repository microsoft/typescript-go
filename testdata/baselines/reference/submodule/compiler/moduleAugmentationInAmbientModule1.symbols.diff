--- old.moduleAugmentationInAmbientModule1.symbols
+++ new.moduleAugmentationInAmbientModule1.symbols
@@= skipped -10, +10 lines =@@
 >Observable : Symbol(Observable, Decl(main.ts, 2, 8))
 
 x.foo().x;
->x.foo().x : Symbol(Cls.x, Decl(O.d.ts, 5, 15))
->x.foo : Symbol(Observable.foo, Decl(O.d.ts, 11, 30))
 >x : Symbol(x, Decl(main.ts, 3, 3))
->foo : Symbol(Observable.foo, Decl(O.d.ts, 11, 30))
->x : Symbol(Cls.x, Decl(O.d.ts, 5, 15))
 
 === O.d.ts ===
 declare module "Observable" {
->"Observable" : Symbol("Observable", Decl(O.d.ts, 0, 0), Decl(O.d.ts, 9, 28))
+>"Observable" : Symbol("Observable", Decl(O.d.ts, 0, 0))
 
     class Observable {}
->Observable : Symbol(Observable, Decl(O.d.ts, 0, 29), Decl(O.d.ts, 10, 25))
+>Observable : Symbol(Observable, Decl(O.d.ts, 0, 29))
 }
 
 declare module "M" {
@@= skipped -19, +15 lines =@@
 
     class Cls { x: number }
 >Cls : Symbol(Cls, Decl(O.d.ts, 4, 20))
->x : Symbol(Cls.x, Decl(O.d.ts, 5, 15))
+>x : Symbol(x, Decl(O.d.ts, 5, 15))
 }
 
 declare module "Map" {
@@= skipped -10, +10 lines =@@
 >Cls : Symbol(Cls, Decl(O.d.ts, 9, 12))
 
     module "Observable" {
->"Observable" : Symbol("Observable", Decl(O.d.ts, 0, 0), Decl(O.d.ts, 9, 28))
+>"Observable" : Symbol("Observable", Decl(O.d.ts, 9, 28), Decl(O.d.ts, 0, 0))
 
         interface Observable {
->Observable : Symbol(Observable, Decl(O.d.ts, 0, 29), Decl(O.d.ts, 10, 25))
+>Observable : Symbol(Observable, Decl(O.d.ts, 10, 25), Decl(O.d.ts, 0, 29))
 
             foo(): Cls;
->foo : Symbol(Observable.foo, Decl(O.d.ts, 11, 30))
+>foo : Symbol(foo, Decl(O.d.ts, 11, 30))
 >Cls : Symbol(Cls, Decl(O.d.ts, 9, 12))
         }
     }
