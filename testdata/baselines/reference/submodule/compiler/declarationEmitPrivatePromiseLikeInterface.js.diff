--- old.declarationEmitPrivatePromiseLikeInterface.js
+++ new.declarationEmitPrivatePromiseLikeInterface.js
@@= skipped -36, +36 lines =@@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.HttpClient = void 0;
 class HttpClient {
-    constructor() {
-        this.request = () => {
-            return '';
-        };
-    }
+    request = () => {
+        return '';
+    };
 }
 exports.HttpClient = HttpClient;
 //// [Api.js]
@@= skipped -12, +10 lines =@@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Api = void 0;
 class Api {
+    http;
     constructor(http) {
         this.http = http;
-        this.abc1 = () => this.http.request();
-        this.abc2 = () => this.http.request();
-        this.abc3 = () => this.http.request();
     }
+    abc1 = () => this.http.request();
+    abc2 = () => this.http.request();
+    abc3 = () => this.http.request();
 }
 exports.Api = Api;

@@= skipped -20, +21 lines =@@
     error: E;
 }
 export declare class HttpClient<SecurityDataType = unknown> {
-    request: <T = any, E = any>() => TPromise<HttpResponse<T, E>>;
+    request: <T = any, E = any>() => TPromise<HttpResponse<T, E>, any>;
 }
 export {};
+//// [Api.d.ts]
+import { HttpClient } from "./http-client";
+export declare class Api<SecurityDataType = unknown> {
+    private http;
+    constructor(http: HttpClient<SecurityDataType>);
+    abc1: () => Omit<Promise<import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+        then<TResult1 = import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+            then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                    then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                        then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                            then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & {
+                                                then<TResult1_10 = TResult1_9 | TResult2_9, TResult2_10 = never>(onfulfilled?: (value: TResult1_9 | TResult2_9) => TResult1_10 | PromiseLike<TResult1_10>, onrejected?: (reason: any) => TResult2_10 | PromiseLike<TResult2_10>): Omit<Promise<TResult1_10 | TResult2_10>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult | TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult | TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult | TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult | TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult | TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult | TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult | TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult | TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult | TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult | TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult | TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                    then<TResult1_2 = TResult | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1_1 = TResult | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult_1 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1_1 = TResult | TResult_1 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+        };
+        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+            then<TResult1 = TResult | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult_1 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1_1 = TResult_1 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult_1 | TResult_2 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                then<TResult1 = TResult | TResult_1 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult_2 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult_2 | TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit</*elided*/ any> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike</*elided*/ any>): Omit</*elided*/ any> & {
+                                        /*elided*/ 
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike</*elided*/ any>): Omit</*elided*/ any> & {
+                            /*elided*/ 
+                        };
+                    };
+                };
+            };
+        };
+    };
+    abc2: () => Omit<Promise<import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+        then<TResult1 = import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+            then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                    then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                        then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                            then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & {
+                                                then<TResult1_10 = TResult1_9 | TResult2_9, TResult2_10 = never>(onfulfilled?: (value: TResult1_9 | TResult2_9) => TResult1_10 | PromiseLike<TResult1_10>, onrejected?: (reason: any) => TResult2_10 | PromiseLike<TResult2_10>): Omit<Promise<TResult1_10 | TResult2_10>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult | TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult | TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult | TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult | TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult | TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult | TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult | TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult | TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult | TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult | TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult | TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                    then<TResult1_2 = TResult | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1_1 = TResult | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult_1 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1_1 = TResult | TResult_1 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+        };
+        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+            then<TResult1 = TResult | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult_1 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1_1 = TResult_1 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult_1 | TResult_2 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                then<TResult1 = TResult | TResult_1 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult_2 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult_2 | TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit</*elided*/ any> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike</*elided*/ any>): Omit</*elided*/ any> & {
+                                        /*elided*/ 
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike</*elided*/ any>): Omit</*elided*/ any> & {
+                            /*elided*/ 
+                        };
+                    };
+                };
+            };
+        };
+    };
+    abc3: () => Omit<Promise<import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+        then<TResult1 = import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+            then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                    then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                        then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                            then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & {
+                                                then<TResult1_10 = TResult1_9 | TResult2_9, TResult2_10 = never>(onfulfilled?: (value: TResult1_9 | TResult2_9) => TResult1_10 | PromiseLike<TResult1_10>, onrejected?: (reason: any) => TResult2_10 | PromiseLike<TResult2_10>): Omit<Promise<TResult1_10 | TResult2_10>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult | TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult | TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult | TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult | TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult | TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult | TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult | TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult | TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult | TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult | TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult | TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                    then<TResult1_2 = TResult | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1_1 = TResult | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult_1 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1_1 = TResult | TResult_1 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+        };
+        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+            then<TResult1 = TResult | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                    then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                        then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                            then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & {
+                                                then<TResult1_9 = TResult1_8 | TResult2_8, TResult2_9 = never>(onfulfilled?: (value: TResult1_8 | TResult2_8) => TResult1_9 | PromiseLike<TResult1_9>, onrejected?: (reason: any) => TResult2_9 | PromiseLike<TResult2_9>): Omit<Promise<TResult1_9 | TResult2_9>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult_1 | TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult_1 | TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult_1 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_1 | TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult_1 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_1 | TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult_1 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_1 | TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult_1 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_1 | TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult_1 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_1 | TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult_1 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult_1 | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1_1 = TResult_1 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_1 | TResult_2 | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult_1 | TResult_2 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult_1 = never>(onrejected?: (reason: any) => TResult_1 | PromiseLike<TResult_1>): Omit<Promise<TResult | TResult_1 | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                then<TResult1 = TResult | TResult_1 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                    then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                        then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                            then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & {
+                                                then<TResult1_8 = TResult1_7 | TResult2_7, TResult2_8 = never>(onfulfilled?: (value: TResult1_7 | TResult2_7) => TResult1_8 | PromiseLike<TResult1_8>, onrejected?: (reason: any) => TResult2_8 | PromiseLike<TResult2_8>): Omit<Promise<TResult1_8 | TResult2_8>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult_2 | TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult_2 | TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult_2 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_2 | TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult_2 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_2 | TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult_2 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_2 | TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult_2 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_2 | TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult_2 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult_2 | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult_2 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_2 | TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult_2 | TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult_2 = never>(onrejected?: (reason: any) => TResult_2 | PromiseLike<TResult_2>): Omit<Promise<TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                    then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                        then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                            then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & {
+                                                then<TResult1_7 = TResult1_6 | TResult2_6, TResult2_7 = never>(onfulfilled?: (value: TResult1_6 | TResult2_6) => TResult1_7 | PromiseLike<TResult1_7>, onrejected?: (reason: any) => TResult2_7 | PromiseLike<TResult2_7>): Omit<Promise<TResult1_7 | TResult2_7>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult_3 | TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult_3 | TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult_3 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_3 | TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult_3 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_3 | TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult_3 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_3 | TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult_3 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult_3 | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult_3 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_3 | TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_3 | TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1_1 = TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_9 = never>(onrejected?: (reason: any) => TResult_9 | PromiseLike<TResult_9>): Omit<Promise<TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult_3 = never>(onrejected?: (reason: any) => TResult_3 | PromiseLike<TResult_3>): Omit<Promise<TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1_1 = TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                    then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                        then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                            then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & {
+                                                then<TResult1_6 = TResult1_5 | TResult2_5, TResult2_6 = never>(onfulfilled?: (value: TResult1_5 | TResult2_5) => TResult1_6 | PromiseLike<TResult1_6>, onrejected?: (reason: any) => TResult2_6 | PromiseLike<TResult2_6>): Omit<Promise<TResult1_6 | TResult2_6>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult_4 | TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult_4 | TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult_4 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_4 | TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult_4 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_4 | TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult_4 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike<TResult_4>): Omit<Promise<TResult_4 | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1_1 = TResult_4 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_4 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                    then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                        then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                            then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & {
+                                                then<TResult1_5 = TResult1_4 | TResult2_4, TResult2_5 = never>(onfulfilled?: (value: TResult1_4 | TResult2_4) => TResult1_5 | PromiseLike<TResult1_5>, onrejected?: (reason: any) => TResult2_5 | PromiseLike<TResult2_5>): Omit<Promise<TResult1_5 | TResult2_5>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult_5 | TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult_5 | TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult_5 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_5 | TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_5 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult_5 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_5 | TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit<Promise<TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult_5 = never>(onrejected?: (reason: any) => TResult_5 | PromiseLike<TResult_5>): Omit<Promise<TResult_4 | TResult_5 | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1_1 = TResult_4 | TResult_5 | TResult1 | TResult2, TResult2_1 = never>(onfulfilled?: (value: TResult_4 | TResult_5 | TResult1 | TResult2) => TResult1_1 | PromiseLike<TResult1_1>, onrejected?: (reason: any) => TResult2_1 | PromiseLike<TResult2_1>): Omit<Promise<TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                        then<TResult1_2 = TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                            then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & {
+                                                then<TResult1_4 = TResult1_3 | TResult2_3, TResult2_4 = never>(onfulfilled?: (value: TResult1_3 | TResult2_3) => TResult1_4 | PromiseLike<TResult1_4>, onrejected?: (reason: any) => TResult2_4 | PromiseLike<TResult2_4>): Omit<Promise<TResult1_4 | TResult2_4>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult_6 | TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult_6 | TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike<TResult_6>): Omit<Promise<TResult_6 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                            then<TResult1_2 = TResult_6 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & {
+                                                then<TResult1_3 = TResult1_2 | TResult2_2, TResult2_3 = never>(onfulfilled?: (value: TResult1_2 | TResult2_2) => TResult1_3 | PromiseLike<TResult1_3>, onrejected?: (reason: any) => TResult2_3 | PromiseLike<TResult2_3>): Omit<Promise<TResult1_3 | TResult2_3>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_7 | TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult_7 = never>(onrejected?: (reason: any) => TResult_7 | PromiseLike<TResult_7>): Omit<Promise<TResult_6 | TResult_7 | TResult1_1 | TResult2_1>, "catch" | "then"> & {
+                                                then<TResult1_2 = TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2_2 = never>(onfulfilled?: (value: TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1_2 | PromiseLike<TResult1_2>, onrejected?: (reason: any) => TResult2_2 | PromiseLike<TResult2_2>): Omit<Promise<TResult1_2 | TResult2_2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult_8 = never>(onrejected?: (reason: any) => TResult_8 | PromiseLike<TResult_8>): Omit</*elided*/ any> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult_6 = never>(onrejected?: (reason: any) => TResult_6 | PromiseLike</*elided*/ any>): Omit</*elided*/ any> & {
+                                        /*elided*/ 
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult_4 = never>(onrejected?: (reason: any) => TResult_4 | PromiseLike</*elided*/ any>): Omit</*elided*/ any> & {
+                            /*elided*/ 
+                        };
+                    };
+                };
+            };
+        };
+    };
+}