--- old.varianceProblingAndZeroOrderIndexSignatureRelationsAlign2.types
+++ new.varianceProblingAndZeroOrderIndexSignatureRelationsAlign2.types
@@= skipped -2, +2 lines =@@
 === varianceProblingAndZeroOrderIndexSignatureRelationsAlign2.ts ===
 type Either<L, A> = Left<L, A> | Right<L, A>;
 >Either : Either<L, A>
+>L : L
+>A : A
 
 class Left<L, A> {
 >Left : Left<L, A>
+>L : L
+>A : A
 
     readonly _tag: 'Left' = 'Left'
 >_tag : "Left"
@@= skipped -20, +24 lines =@@
     /** The given function is applied if this is a `Right` */
     map<B>(f: (a: A) => B): Either<L, B> {
 >map : <B>(f: (a: A) => B) => Either<L, B>
+>B : B
 >f : (a: A) => B
 >a : A
 
@@= skipped -9, +10 lines =@@
     }
     ap<B>(fab: Either<L, (a: A) => B>): Either<L, B> {
 >ap : <B>(fab: Either<L, (a: A) => B>) => Either<L, B>
+>B : B
 >fab : Either<L, (a: A) => B>
 >a : A
 
@@= skipped -10, +11 lines =@@
 
 class Right<L, A> {
 >Right : Right<L, A>
+>L : L
+>A : A
 
     readonly _tag: 'Right' = 'Right'
 >_tag : "Right"
@@= skipped -16, +18 lines =@@
 
     map<B>(f: (a: A) => B): Either<L, B> {
 >map : <B>(f: (a: A) => B) => Either<L, B>
+>B : B
 >f : (a: A) => B
 >a : A
 
@@= skipped -14, +15 lines =@@
     }
     ap<B>(fab: Either<L, (a: A) => B>): Either<L, B> {
 >ap : <B>(fab: Either<L, (a: A) => B>) => Either<L, B>
+>B : B
 >fab : Either<L, (a: A) => B>
 >a : A
 
@@= skipped -10, +11 lines =@@
 
 class Type<A, O = A, I = unknown> {
 >Type : Type<A, O, I>
+>A : A
+>O : O
+>I : I
 
   readonly _A!: A;
 >_A : A
@@= skipped -40, +43 lines =@@
 }
 
 interface Any extends Type<any, any, any> {}
+>Any : Any
 
 type TypeOf<C extends Any> = C["_A"];
 >TypeOf : TypeOf<C>
+>C : C
 
 type ToB<S extends {[_ in string | number | symbol]: Any}> = { [k in keyof S]: TypeOf<S[k]> };
 >ToB : ToB<S>
+>S : S
+>_ : _
+>k : k
 
 type ToA<S> = { [k in keyof S]: Type<S[k]> };
 >ToA : ToA<S>
+>S : S
+>k : k
 
 type NeededInfo<MyNamespaceSchema = {}> = {
 >NeededInfo : NeededInfo<MyNamespaceSchema>
+>MyNamespaceSchema : MyNamespaceSchema
 
   ASchema: ToA<MyNamespaceSchema>;
 >ASchema : ToA<MyNamespaceSchema>
@@= skipped -27, +35 lines =@@
 >null! : never
 
 function tmp2<N extends NeededInfo>(n: N) {}
->tmp2 : <N extends NeededInfo>(n: N) => void
+>tmp2 : <N extends NeededInfo<{}>>(n: N) => void
+>N : N
 >n : N
 
 // tmp2(tmp1); // uncommenting this line removes a type error from a completely unrelated line ?? (see test 1, needs to behave the same)
 
 class Server<X extends NeededInfo> {}
 >Server : Server<X>
+>X : X
 
 export class MyServer extends Server<MyInfo> {} // not assignable error at `MyInfo`
 >MyServer : MyServer
