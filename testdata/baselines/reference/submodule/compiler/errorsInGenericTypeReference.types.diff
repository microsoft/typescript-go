--- old.errorsInGenericTypeReference.types
+++ new.errorsInGenericTypeReference.types
@@= skipped -1, +1 lines =@@
 
 === errorsInGenericTypeReference.ts ===
 interface IFoo<T> { }
+>IFoo : IFoo<T>
+>T : T
 
 class Foo<T> { }
 >Foo : Foo<T>
+>T : T
 
 
 // in call type arguments
@@= skipped -11, +14 lines =@@
 
     method<T>(): void { }
 >method : <T>() => void
+>T : T
 }
 var tc1 = new testClass1();
 >tc1 : testClass1
@@= skipped -17, +18 lines =@@
 // in constructor type arguments
 class testClass2<T> {
 >testClass2 : testClass2<T>
+>T : T
 }
 var tc2 = new testClass2<{ x: V }>(); // error: could not find symbol V
 >tc2 : testClass2<{ x: V; }>
@@= skipped -53, +54 lines =@@
 // in constraints
 class testClass4<T extends { x: V }> { } // error: could not find symbol V
 >testClass4 : testClass4<T>
+>T : T
 >x : V
 
 interface testClass5<T extends Foo<{ x: V }>> { } // error: could not find symbol V
+>testClass5 : testClass5<T>
+>T : T
 >x : V
 
 class testClass6<T> {
 >testClass6 : testClass6<T>
+>T : T
 
     method<M extends { x: V }>(): void { } // error: could not find symbol V
 >method : <M extends { x: V; }>() => void
+>M : M
 >x : V
 }
 
 interface testInterface1 {
+>testInterface1 : testInterface1
+
     new <M extends { x: V }>(a: M); // error: could not find symbol V
+>M : M
 >x : V
 >a : M
 }
@@= skipped -35, +43 lines =@@
 
 // in signatures
 interface testInterface2 {
+>testInterface2 : testInterface2
+
     new (a: Foo<{ x: V }>): Foo<{ x: V }>; //2x: error: could not find symbol V
 >a : Foo<{ x: V; }>
 >x : V
