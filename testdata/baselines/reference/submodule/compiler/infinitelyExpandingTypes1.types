//// [tests/cases/compiler/infinitelyExpandingTypes1.ts] ////

=== infinitelyExpandingTypes1.ts ===
interface List<T> {
>List : List<T>
>T : T

    data: T;
>data : T

    next: List<T>;
>next : List<T>

    owner: List<List<T>>;
>owner : List<List<T>>
}


interface MyList<T> {
>MyList : MyList<T>
>T : T

    data: T;
>data : T

    next: MyList<T>;
>next : MyList<T>

    owner: MyList<MyList<T>>;
>owner : MyList<MyList<T>>
}

var l: List<number>;
>l : List<number>

var m: MyList<number>;
>m : MyList<number>

l == m; // should error
>l == m : boolean
>l : List<number>
>m : MyList<number>

var l2: List<string>;
>l2 : List<string>

l == l2; // should error;
>l == l2 : boolean
>l : List<number>
>l2 : List<string>

l == l; // should not error
>l == l : boolean
>l : List<number>
>l : List<number>

