--- old.uniqueSymbolAssignmentOnGlobalAugmentationSuceeds.errors.txt
+++ new.uniqueSymbolAssignmentOnGlobalAugmentationSuceeds.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+error TS2318: Cannot find global type 'Array'.
+error TS2318: Cannot find global type 'CallableFunction'.
+error TS2318: Cannot find global type 'Function'.
+error TS2318: Cannot find global type 'IArguments'.
+error TS2318: Cannot find global type 'NewableFunction'.
+error TS2318: Cannot find global type 'RegExp'.
+error TS2318: Cannot find global type 'String'.
+error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+uniqueSymbolAssignmentOnGlobalAugmentationSuceeds.ts(1,20): error TS2304: Cannot find name 'Symbol'.
+uniqueSymbolAssignmentOnGlobalAugmentationSuceeds.ts(5,9): error TS1169: A computed property name in an interface must refer to an expression whose type is a literal type or a 'unique symbol' type.
+
+
+!!! error TS2318: Cannot find global type 'Array'.
+!!! error TS2318: Cannot find global type 'CallableFunction'.
+!!! error TS2318: Cannot find global type 'Function'.
+!!! error TS2318: Cannot find global type 'IArguments'.
+!!! error TS2318: Cannot find global type 'NewableFunction'.
+!!! error TS2318: Cannot find global type 'RegExp'.
+!!! error TS2318: Cannot find global type 'String'.
+!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+==== uniqueSymbolAssignmentOnGlobalAugmentationSuceeds.ts (2 errors) ====
+    const FOO_SYMBOL = Symbol('Foo');
+                       ~~~~~~
+!!! error TS2304: Cannot find name 'Symbol'.
+    
+    declare global {
+        interface Promise<T> {
+            [FOO_SYMBOL]?: number;
+            ~~~~~~~~~~~~
+!!! error TS1169: A computed property name in an interface must refer to an expression whose type is a literal type or a 'unique symbol' type.
+        }
+    }
+    
+    export function foo<T>(p: Promise<T>) {
+        p[FOO_SYMBOL] = 3;
+    }
