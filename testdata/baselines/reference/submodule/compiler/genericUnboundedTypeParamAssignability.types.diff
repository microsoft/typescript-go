--- old.genericUnboundedTypeParamAssignability.types
+++ new.genericUnboundedTypeParamAssignability.types
@@= skipped -2, +2 lines =@@
 === genericUnboundedTypeParamAssignability.ts ===
 function f1<T>(o: T) {
 >f1 : <T>(o: T) => void
+>T : T
 >o : T
 
   o.toString(); // error
@@= skipped -11, +12 lines =@@
 
 function f2<T extends {}>(o: T) {
 >f2 : <T extends {}>(o: T) => void
+>T : T
 >o : T
 
   o.toString(); // no error
@@= skipped -11, +12 lines =@@
 
 function f3<T extends Record<string, any>>(o: T) {
 >f3 : <T extends Record<string, any>>(o: T) => void
+>T : T
 >o : T
 
   o.toString(); // no error
@@= skipped -11, +12 lines =@@
 
 function user<T>(t: T) {
 >user : <T>(t: T) => void
+>T : T
 >t : T
 
   f1(t);
 >f1(t) : void
->f1 : <T_1>(o: T_1) => void
+>f1 : <T>(o: T) => void
 >t : T
 
   f2(t); // error in strict, unbounded T doesn't satisfy the constraint
 >f2(t) : void
->f2 : <T_1 extends {}>(o: T_1) => void
+>f2 : <T extends {}>(o: T) => void
 >t : T
 
   f3(t); // error in strict, unbounded T doesn't satisfy the constraint
 >f3(t) : void
->f3 : <T_1 extends Record<string, any>>(o: T_1) => void
+>f3 : <T extends Record<string, any>>(o: T) => void
 >t : T
 
   t.toString();  // error, for the same reason as f1()
