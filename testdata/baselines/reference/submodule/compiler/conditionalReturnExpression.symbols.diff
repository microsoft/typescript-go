--- old.conditionalReturnExpression.symbols
+++ new.conditionalReturnExpression.symbols
@@= skipped -16, +16 lines =@@
 >x : Symbol(x, Decl(conditionalReturnExpression.ts, 6, 17))

     return x.startsWith("a") ? getAny() : 1;
->x.startsWith : Symbol(String.startsWith, Decl(lib.es2015.core.d.ts, --, --))
+>x.startsWith : Symbol(startsWith, Decl(lib.es2015.core.d.ts, --, --))
 >x : Symbol(x, Decl(conditionalReturnExpression.ts, 6, 17))
->startsWith : Symbol(String.startsWith, Decl(lib.es2015.core.d.ts, --, --))
+>startsWith : Symbol(startsWith, Decl(lib.es2015.core.d.ts, --, --))
 >getAny : Symbol(getAny, Decl(conditionalReturnExpression.ts, 2, 1))
 }

@@= skipped -11, +11 lines =@@
 >x : Symbol(x, Decl(conditionalReturnExpression.ts, 10, 17))

     return x.startsWith("a") ? "a" : x;
->x.startsWith : Symbol(String.startsWith, Decl(lib.es2015.core.d.ts, --, --))
+>x.startsWith : Symbol(startsWith, Decl(lib.es2015.core.d.ts, --, --))
 >x : Symbol(x, Decl(conditionalReturnExpression.ts, 10, 17))
->startsWith : Symbol(String.startsWith, Decl(lib.es2015.core.d.ts, --, --))
+>startsWith : Symbol(startsWith, Decl(lib.es2015.core.d.ts, --, --))
 >x : Symbol(x, Decl(conditionalReturnExpression.ts, 10, 17))
 }

@@= skipped -11, +11 lines =@@
 >x : Symbol(x, Decl(conditionalReturnExpression.ts, 14, 17))

     return (x.startsWith("a") ? getAny() : 1) as string;
->x.startsWith : Symbol(String.startsWith, Decl(lib.es2015.core.d.ts, --, --))
+>x.startsWith : Symbol(startsWith, Decl(lib.es2015.core.d.ts, --, --))
 >x : Symbol(x, Decl(conditionalReturnExpression.ts, 14, 17))
->startsWith : Symbol(String.startsWith, Decl(lib.es2015.core.d.ts, --, --))
+>startsWith : Symbol(startsWith, Decl(lib.es2015.core.d.ts, --, --))
 >getAny : Symbol(getAny, Decl(conditionalReturnExpression.ts, 2, 1))
 }

 const return5 = (x: string): string => x.startsWith("a") ? getAny() : 1;
 >return5 : Symbol(return5, Decl(conditionalReturnExpression.ts, 18, 5))
 >x : Symbol(x, Decl(conditionalReturnExpression.ts, 18, 17))
->x.startsWith : Symbol(String.startsWith, Decl(lib.es2015.core.d.ts, --, --))
+>x.startsWith : Symbol(startsWith, Decl(lib.es2015.core.d.ts, --, --))
 >x : Symbol(x, Decl(conditionalReturnExpression.ts, 18, 17))
->startsWith : Symbol(String.startsWith, Decl(lib.es2015.core.d.ts, --, --))
+>startsWith : Symbol(startsWith, Decl(lib.es2015.core.d.ts, --, --))
 >getAny : Symbol(getAny, Decl(conditionalReturnExpression.ts, 2, 1))

 const return6 = (x: string): string => (x.startsWith("a") ? getAny() : 1) as string;
 >return6 : Symbol(return6, Decl(conditionalReturnExpression.ts, 20, 5))
 >x : Symbol(x, Decl(conditionalReturnExpression.ts, 20, 17))
->x.startsWith : Symbol(String.startsWith, Decl(lib.es2015.core.d.ts, --, --))
+>x.startsWith : Symbol(startsWith, Decl(lib.es2015.core.d.ts, --, --))
 >x : Symbol(x, Decl(conditionalReturnExpression.ts, 20, 17))
->startsWith : Symbol(String.startsWith, Decl(lib.es2015.core.d.ts, --, --))
+>startsWith : Symbol(startsWith, Decl(lib.es2015.core.d.ts, --, --))
 >getAny : Symbol(getAny, Decl(conditionalReturnExpression.ts, 2, 1))
