--- old.sourceMapValidationDestructuringForOfArrayBindingPattern.types
+++ new.sourceMapValidationDestructuringForOfArrayBindingPattern.types
@@= skipped -70, +70 lines =@@
 }

 for (let [, nameA] of robots) {
-> : undefined
 >nameA : string
 >robots : Robot[]

@@= skipped -12, +11 lines =@@
 >nameA : string
 }
 for (let [, nameA] of getRobots()) {
-> : undefined
 >nameA : string
 >getRobots() : Robot[]
 >getRobots : () => Robot[]
@@= skipped -13, +12 lines =@@
 >nameA : string
 }
 for (let [, nameA] of [robotA, robotB]) {
-> : undefined
 >nameA : string
 >[robotA, robotB] : Robot[]
 >robotA : Robot
@@= skipped -14, +13 lines =@@
 >nameA : string
 }
 for (let [, [primarySkillA, secondarySkillA]] of multiRobots) {
-> : undefined
 >primarySkillA : string
 >secondarySkillA : string
 >multiRobots : MultiSkilledRobot[]
@@= skipped -13, +12 lines =@@
 >primarySkillA : string
 }
 for (let [, [primarySkillA, secondarySkillA]] of getMultiRobots()) {
-> : undefined
 >primarySkillA : string
 >secondarySkillA : string
 >getMultiRobots() : MultiSkilledRobot[]
@@= skipped -14, +13 lines =@@
 >primarySkillA : string
 }
 for (let [, [primarySkillA, secondarySkillA]] of [multiRobotA, multiRobotB]) {
-> : undefined
 >primarySkillA : string
 >secondarySkillA : string
 >[multiRobotA, multiRobotB] : MultiSkilledRobot[]