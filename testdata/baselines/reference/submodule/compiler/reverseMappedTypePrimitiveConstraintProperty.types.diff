--- old.reverseMappedTypePrimitiveConstraintProperty.types
+++ new.reverseMappedTypePrimitiveConstraintProperty.types
@@= skipped -1, +1 lines =@@
 
 === reverseMappedTypePrimitiveConstraintProperty.ts ===
 declare function test<
->test : <T extends { prop: string; nested: { nestedProp: string; }; }>(obj: { [K in keyof T]: T[K]; }) => T
+>test : <T extends { prop: string; nested: { nestedProp: string; }; }>(obj: { [K in keyof T]: T[K] }) => T
 
   T extends { prop: string; nested: { nestedProp: string } },
+>T : T
 >prop : string
 >nested : { nestedProp: string; }
 >nestedProp : string
 
 >(obj: { [K in keyof T]: T[K] }): T;
->obj : { [K in keyof T]: T[K]; }
+>obj : { [K in keyof T]: T[K] }
+>K : K
 
 const result = test({
 >result : { prop: "foo"; nested: { nestedProp: string; }; extra: string; }
 >test({  prop: "foo", // this one should not widen to string  nested: {    nestedProp: "bar",  },  extra: "baz",}) : { prop: "foo"; nested: { nestedProp: string; }; extra: string; }
->test : <T extends { prop: string; nested: { nestedProp: string; }; }>(obj: { [K in keyof T]: T[K]; }) => T
+>test : <T extends { prop: string; nested: { nestedProp: string; }; }>(obj: { [K in keyof T]: T[K] }) => T
 >{  prop: "foo", // this one should not widen to string  nested: {    nestedProp: "bar",  },  extra: "baz",} : { prop: "foo"; nested: { nestedProp: string; }; extra: string; }
 
   prop: "foo", // this one should not widen to string
