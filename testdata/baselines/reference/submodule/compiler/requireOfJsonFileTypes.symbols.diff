--- old.requireOfJsonFileTypes.symbols
+++ new.requireOfJsonFileTypes.symbols
@@= skipped -30, +30 lines =@@
 
 booleanLiteral = b.a;
 >booleanLiteral : Symbol(booleanLiteral, Decl(file1.ts, 7, 3))
->b.a : Symbol("a", Decl(b.json, 0, 1))
 >b : Symbol(b, Decl(file1.ts, 0, 0))
->a : Symbol("a", Decl(b.json, 0, 1))
 
 stringLiteral = b.b;
 >stringLiteral : Symbol(stringLiteral, Decl(file1.ts, 8, 3))
->b.b : Symbol("b", Decl(b.json, 1, 14))
 >b : Symbol(b, Decl(file1.ts, 0, 0))
->b : Symbol("b", Decl(b.json, 1, 14))
 
 nullLiteral = b.c;
 >nullLiteral : Symbol(nullLiteral, Decl(file1.ts, 7, 28))
->b.c : Symbol("c", Decl(b.json, 2, 17))
 >b : Symbol(b, Decl(file1.ts, 0, 0))
->c : Symbol("c", Decl(b.json, 2, 17))
 
 booleanLiteral = b.d;
 >booleanLiteral : Symbol(booleanLiteral, Decl(file1.ts, 7, 3))
->b.d : Symbol("d", Decl(b.json, 3, 14))
 >b : Symbol(b, Decl(file1.ts, 0, 0))
->d : Symbol("d", Decl(b.json, 3, 14))
 
 const stringOrNumberOrNull: string | number | null = c[0];
 >stringOrNumberOrNull : Symbol(stringOrNumberOrNull, Decl(file1.ts, 15, 5))
@@= skipped -42, +34 lines =@@
 >booleanLiteral : Symbol(booleanLiteral, Decl(file1.ts, 7, 3))
 >g : Symbol(g, Decl(file1.ts, 4, 31))
 
-=== b.json ===
-{
-    "a": true,
->"a" : Symbol("a", Decl(b.json, 0, 1))
-
-    "b": "hello",
->"b" : Symbol("b", Decl(b.json, 1, 14))
-
-    "c": null,
->"c" : Symbol("c", Decl(b.json, 2, 17))
-
-    "d": false
->"d" : Symbol("d", Decl(b.json, 3, 14))
-}
-
-=== c.json ===
-
-["a", null, "string"]
-
-=== d.json ===
-
-"dConfig"
-
-=== e.json ===
-
--10
-
-=== f.json ===
-
-[-10, 30]
-
-=== g.json ===
-
-[true, false]
