--- old.erasableSyntaxOnly.symbols
+++ new.erasableSyntaxOnly.symbols
@@= skipped -5, +5 lines =@@

     // No parameter properties
     constructor(public foo: string) { }
->foo : Symbol(MyClassErr.foo, Decl(index.ts, 2, 16))
+>foo : Symbol(foo, Decl(index.ts, 2, 16))
 }

 namespace IllegalBecauseInstantiated {
@@= skipped -34, +34 lines =@@
 >NotLegalEnum : Symbol(NotLegalEnum, Decl(index.ts, 19, 1))

     B = 1
->B : Symbol(NoGoodAlias, Decl(index.ts, 21, 19))
+>B : Symbol(B, Decl(index.ts, 21, 19))
 }

 import NoGoodAlias = NotLegalEnum.B;
 >NoGoodAlias : Symbol(NoGoodAlias, Decl(index.ts, 23, 1))
 >NotLegalEnum : Symbol(NotLegalEnum, Decl(index.ts, 19, 1))
->B : Symbol(NoGoodAlias, Decl(index.ts, 21, 19))
+>B : Symbol(B, Decl(index.ts, 21, 19))

 const enum NotLegalConstEnum {
 >NotLegalConstEnum : Symbol(NotLegalConstEnum, Decl(index.ts, 25, 36))

     C = 2
->C : Symbol(NotLegalConstEnum.C, Decl(index.ts, 27, 30))
+>C : Symbol(C, Decl(index.ts, 27, 30))
 }

 // No errors after this point
@@= skipped -53, +53 lines =@@
 >LegalEnum : Symbol(LegalEnum, Decl(index.ts, 48, 1))

     A = 1
->A : Symbol(LegalEnum.A, Decl(index.ts, 50, 24))
+>A : Symbol(A, Decl(index.ts, 50, 24))
 }

 declare namespace AmbientStuff {
@@= skipped -16, +16 lines =@@
 >EnumInAmbientContext : Symbol(EnumInAmbientContext, Decl(index.ts, 57, 5))

         B = 1
->B : Symbol(FineAlias, Decl(index.ts, 58, 31))
+>B : Symbol(B, Decl(index.ts, 58, 31))
     }

     import FineAlias = EnumInAmbientContext.B;
 >FineAlias : Symbol(FineAlias, Decl(index.ts, 60, 5))
 >EnumInAmbientContext : Symbol(EnumInAmbientContext, Decl(index.ts, 57, 5))
->B : Symbol(FineAlias, Decl(index.ts, 58, 31))
+>B : Symbol(B, Decl(index.ts, 58, 31))
 }

 // Not erasable