--- old.varianceMeasurement.types
+++ new.varianceMeasurement.types
@@= skipped -4, +4 lines =@@
 // we don't analyze recursive references.
 
 interface Foo1<T> {
+>Foo1 : Foo1<T>
+>T : T
+
   x: T;
 >x : T
 
@@= skipped -22, +25 lines =@@
 // The type below is invariant in T and is measured as such.
 
 interface Foo2<T> {
+>Foo2 : Foo2<T>
+>T : T
+
   x: T;
 >x : T
 
@@= skipped -27, +30 lines =@@
 
 type Foo3<T> = {
 >Foo3 : Foo3<T>
+>T : T
 
   x: T;
 >x : T
@@= skipped -24, +25 lines =@@
 
 type Foo4<T> = {
 >Foo4 : Foo4<T>
+>T : T
 
   x: T;
 >x : T
@@= skipped -26, +27 lines =@@
 // Repro from #3580
 
 interface Fn<A, B> {
+>Fn : Fn<A, B>
+>A : A
+>B : B
+
   (a: A): B;
 >a : A
 
   then<C>(next: Fn<B, C>): Fn<A, C>;
 >then : <C>(next: Fn<B, C>) => Fn<A, C>
+>C : C
 >next : Fn<B, C>
 }
 
@@= skipped -32, +37 lines =@@
 // Repro from #39947
 
 interface I<Dummy, V> {
+>I : I<Dummy, V>
+>Dummy : Dummy
+>V : V
+
   c: C<Dummy, V>;
 >c : C<Dummy, V>
 }
 
 class C<Dummy, V> {
 >C : C<Dummy, V>
+>Dummy : Dummy
+>V : V
 
   declare sub: I<Dummy, V>;
 >sub : I<Dummy, V>
