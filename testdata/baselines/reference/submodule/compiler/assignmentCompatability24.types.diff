--- old.assignmentCompatability24.types
+++ new.assignmentCompatability24.types
@@= skipped -4, +4 lines =@@
 >__test1__ : typeof __test1__
 
     export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
+>interfaceWithPublicAndOptional : interfaceWithPublicAndOptional<T, U>
+>T : T
+>U : U
 >one : T
 >two : U
 >obj4 : interfaceWithPublicAndOptional<number, string>
@@= skipped -18, +21 lines =@@
 >obj : <Tstring>(a: Tstring) => Tstring
 >function f<Tstring>(a: Tstring) { return a; } : <Tstring>(a: Tstring) => Tstring
 >f : <Tstring>(a: Tstring) => Tstring
+>Tstring : Tstring
 >a : Tstring
 >a : Tstring
 
@@= skipped -8, +9 lines =@@
 >obj : <Tstring>(a: Tstring) => Tstring
 }
 __test2__.__val__obj = __test1__.__val__obj4
->__test2__.__val__obj = __test1__.__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
+>__test2__.__val__obj = __test1__.__val__obj4 : interfaceWithPublicAndOptional<number, string>
 >__test2__.__val__obj : <Tstring>(a: Tstring) => Tstring
 >__test2__ : typeof __test2__
 >__val__obj : <Tstring>(a: Tstring) => Tstring
->__test1__.__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
+>__test1__.__val__obj4 : interfaceWithPublicAndOptional<number, string>
 >__test1__ : typeof __test1__
->__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
+>__val__obj4 : interfaceWithPublicAndOptional<number, string>
 
