--- old.declarationEmitUsingAlternativeContainingModules2.types
+++ new.declarationEmitUsingAlternativeContainingModules2.types
@@= skipped -4, +4 lines =@@
 >QueryKey : QueryKey
 
 interface Register {}
+>Register : Register
 
 type DefaultError = Register extends {
 >DefaultError : Error
 
   defaultError: infer TError;
 >defaultError : TError
+>TError : TError
 }
   ? TError
   : Error;
 
 type ShouldRetryFunction<TError = DefaultError> = (
 >ShouldRetryFunction : ShouldRetryFunction<TError>
+>TError : TError
 
   failureCount: number,
 >failureCount : number
@@= skipped -22, +25 lines =@@
 ) => boolean;
 type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>;
 >RetryValue : RetryValue<TError>
+>TError : TError
 
 type QueryFunctionContext<
 >QueryFunctionContext : QueryFunctionContext<TQueryKey, TPageParam>
 
   TQueryKey extends QueryKey = QueryKey,
+>TQueryKey : TQueryKey
+
   TPageParam = never,
+>TPageParam : TPageParam
+
 > = [TPageParam] extends [never]
   ? {
       queryKey: TQueryKey;
@@= skipped -24, +29 lines =@@
 >QueryFunction : QueryFunction<T, TQueryKey, TPageParam>
 
   T = unknown,
+>T : T
+
   TQueryKey extends QueryKey = QueryKey,
+>TQueryKey : TQueryKey
+
   TPageParam = never,
+>TPageParam : TPageParam
+
 > = (context: QueryFunctionContext<TQueryKey, TPageParam>) => T | Promise<T>;
 >context : QueryFunctionContext<TQueryKey, TPageParam>
 
 interface QueryOptions<
+>QueryOptions : QueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>
+
   TQueryFnData = unknown,
+>TQueryFnData : TQueryFnData
+
   TError = DefaultError,
+>TError : TError
+
   TData = TQueryFnData,
+>TData : TData
+
   TQueryKey extends QueryKey = QueryKey,
+>TQueryKey : TQueryKey
+
   TPageParam = never,
+>TPageParam : TPageParam
+
 > {
   retry?: RetryValue<TError>;
 >retry : RetryValue<TError> | undefined
@@= skipped -25, +43 lines =@@
 >initialData : TData | undefined
 
   initialDataUpdatedAt?: number | (() => number | undefined);
->initialDataUpdatedAt : number | (() => number | undefined) | undefined
+>initialDataUpdatedAt : number | () => number | undefined | undefined
 }
 
 interface QueryObserverOptions<
+>QueryObserverOptions : QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey, TPageParam>
+
   TQueryFnData = unknown,
+>TQueryFnData : TQueryFnData
+
   TError = DefaultError,
+>TError : TError
+
   TData = TQueryFnData,
+>TData : TData
+
   TQueryData = TQueryFnData,
+>TQueryData : TQueryData
+
   TQueryKey extends QueryKey = QueryKey,
+>TQueryKey : TQueryKey
+
   TPageParam = never,
+>TPageParam : TPageParam
+
 > extends QueryOptions<
     TQueryFnData,
     TError,
@@= skipped -24, +38 lines =@@
 >refetchInterval : number | undefined
 
   select?: (data: TQueryData) => TData;
->select : ((data: TQueryData) => TData) | undefined
+>select : (data: TQueryData) => TData | undefined
 >data : TQueryData
 }
 
@@= skipped -8, +8 lines =@@
 >UseQueryOptions : UseQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>
 
   TQueryFnData = unknown,
+>TQueryFnData : TQueryFnData
+
   TError = DefaultError,
+>TError : TError
+
   TData = TQueryFnData,
+>TData : TData
+
   TQueryData = TQueryFnData,
+>TQueryData : TQueryData
+
   TQueryKey extends QueryKey = QueryKey,
+>TQueryKey : TQueryKey
+
 > = {
   [Property in keyof QueryObserverOptions<
+>Property : Property
+
     TQueryFnData,
     TError,
     TData,
@@= skipped -24, +36 lines =@@
 >UndefinedInitialQueryOptions : UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>
 
   TQueryFnData = unknown,
+>TQueryFnData : TQueryFnData
+
   TError = DefaultError,
+>TError : TError
+
   TData = TQueryFnData,
+>TData : TData
+
   TQueryKey extends QueryKey = QueryKey,
+>TQueryKey : TQueryKey
+
 > = UseQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey> & {
   initialData?: undefined;
 >initialData : undefined
@@= skipped -10, +18 lines =@@
 };
 
 interface QueryObserverBaseResult<TData = unknown, TError = DefaultError> {
+>QueryObserverBaseResult : QueryObserverBaseResult<TData, TError>
+>TData : TData
+>TError : TError
+
   data: TData | undefined;
 >data : TData | undefined
 
@@= skipped -65, +69 lines =@@
 }
 
 interface QueryObserverSuccessResult<TData = unknown, TError = DefaultError>
+>QueryObserverSuccessResult : QueryObserverSuccessResult<TData, TError>
+>TData : TData
+>TError : TError
+
   extends QueryObserverBaseResult<TData, TError> {
   data: TData;
 >data : TData
@@= skipped -35, +39 lines =@@
 >DefinedQueryObserverResult : DefinedQueryObserverResult<TData, TError>
 
   TData = unknown,
+>TData : TData
+
   TError = DefaultError,
+>TError : TError
+
 > = QueryObserverSuccessResult<TData, TError>;
 type QueryObserverResult<
 >QueryObserverResult : QueryObserverResult<TData, TError>
 
   TData = unknown,
+>TData : TData
+
   TError = DefaultError,
+>TError : TError
+
 > = DefinedQueryObserverResult<TData, TError>;
 
 type ToRef<T> = {
 >ToRef : ToRef<T>
+>T : T
 
   value: T;
 >value : T
@@= skipped -21, +30 lines =@@
 >UseBaseQueryReturnType : UseBaseQueryReturnType<TData, TError, Result>
 
   TData,
+>TData : TData
+
   TError,
+>TError : TError
+
   Result = QueryObserverResult<TData, TError>,
+>Result : Result
+
 > = {
   [K in keyof Result]: K extends
+>K : K
+
     | "fetchNextPage"
     | "fetchPreviousPage"
     | "refetch"
@@= skipped -17, +25 lines =@@
 
 type UseQueryReturnType<TData, TError> = UseBaseQueryReturnType<TData, TError>;
 >UseQueryReturnType : UseQueryReturnType<TData, TError>
+>TData : TData
+>TError : TError
 
 declare function useQuery<
->useQuery : <TQueryFnData = unknown, TError = Error, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>
+>useQuery : <TQueryFnData, TError, TData, TQueryKey extends QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>
 
   TQueryFnData = unknown,
+>TQueryFnData : TQueryFnData
+
   TError = DefaultError,
+>TError : TError
+
   TData = TQueryFnData,
+>TData : TData
+
   TQueryKey extends QueryKey = QueryKey,
+>TQueryKey : TQueryKey
+
 >(
   options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>,
 >options : UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>
@@= skipped -17, +27 lines =@@
 export { type UseQueryReturnType as b, useQuery as u };
 >UseQueryReturnType : any
 >b : any
->useQuery : <TQueryFnData = unknown, TError = Error, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>
->u : <TQueryFnData = unknown, TError = Error, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>
+>useQuery : <TQueryFnData, TError, TData, TQueryKey extends QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>
+>u : <TQueryFnData, TError, TData, TQueryKey extends QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>
 
 === node_modules/@tanstack/vue-query/build/modern/index.d.ts ===
 export { b as UseQueryReturnType, u as useQuery } from './useQuery-CPqkvEsh.js';
 >b : any
 >UseQueryReturnType : any
->u : <TQueryFnData = unknown, TError = Error, TData = TQueryFnData, TQueryKey extends readonly unknown[] = readonly unknown[]>(options: { enabled?: boolean | undefined; refetchInterval?: number | undefined; select?: ((data: TQueryFnData) => TData) | undefined; retry?: (number | boolean | ((failureCount: number, error: TError) => boolean)) | undefined; queryFn?: ((context: { queryKey: TQueryKey; }) => TQueryFnData | Promise<TQueryFnData>) | undefined; queryKey?: TQueryKey | undefined; initialData?: TQueryFnData | undefined; initialDataUpdatedAt?: (number | (() => number | undefined)) | undefined; } & { initialData?: undefined; }) => import("node_modules/@tanstack/vue-query/build/modern/useQuery-CPqkvEsh").b<TData, TError>
->useQuery : <TQueryFnData = unknown, TError = Error, TData = TQueryFnData, TQueryKey extends readonly unknown[] = readonly unknown[]>(options: { enabled?: boolean | undefined; refetchInterval?: number | undefined; select?: ((data: TQueryFnData) => TData) | undefined; retry?: (number | boolean | ((failureCount: number, error: TError) => boolean)) | undefined; queryFn?: ((context: { queryKey: TQueryKey; }) => TQueryFnData | Promise<TQueryFnData>) | undefined; queryKey?: TQueryKey | undefined; initialData?: TQueryFnData | undefined; initialDataUpdatedAt?: (number | (() => number | undefined)) | undefined; } & { initialData?: undefined; }) => import("node_modules/@tanstack/vue-query/build/modern/useQuery-CPqkvEsh").b<TData, TError>
+>u : <TQueryFnData, TError, TData, TQueryKey extends QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>
+>useQuery : <TQueryFnData, TError, TData, TQueryKey extends QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>
 
 === src/index.mts ===
 import { useQuery } from '@tanstack/vue-query'
->useQuery : <TQueryFnData = unknown, TError = Error, TData = TQueryFnData, TQueryKey extends readonly unknown[] = readonly unknown[]>(options: { enabled?: boolean | undefined; refetchInterval?: number | undefined; select?: ((data: TQueryFnData) => TData) | undefined; retry?: (number | boolean | ((failureCount: number, error: TError) => boolean)) | undefined; queryFn?: ((context: { queryKey: TQueryKey; }) => TQueryFnData | Promise<TQueryFnData>) | undefined; queryKey?: TQueryKey | undefined; initialData?: TQueryFnData | undefined; initialDataUpdatedAt?: (number | (() => number | undefined)) | undefined; } & { initialData?: undefined; }) => import("node_modules/@tanstack/vue-query/build/modern/useQuery-CPqkvEsh").b<TData, TError>
+>useQuery : any
 
 const baseUrl = 'https://api.publicapis.org/'
 >baseUrl : "https://api.publicapis.org/"
 >'https://api.publicapis.org/' : "https://api.publicapis.org/"
 
 interface IEntry {
+>IEntry : IEntry
+
   API: string
 >API : string
 
@@= skipped -51, +53 lines =@@
 
     return fetch(baseUrl + 'entries')
 >fetch(baseUrl + 'entries')      .then((res) => res.json())      .then((data) => data.entries)      .catch((err) => console.log(err)) : Promise<any>
->fetch(baseUrl + 'entries')      .then((res) => res.json())      .then((data) => data.entries)      .catch : <TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined) => Promise<any>
+>fetch(baseUrl + 'entries')      .then((res) => res.json())      .then((data) => data.entries)      .catch : <TResult>(onrejected?: (reason: any) => TResult | PromiseLike<TResult> | null | undefined) => Promise<any>
 >fetch(baseUrl + 'entries')      .then((res) => res.json())      .then((data) => data.entries) : Promise<any>
->fetch(baseUrl + 'entries')      .then((res) => res.json())      .then : <TResult1 = any, TResult2 = never>(onfulfilled?: ((value: any) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>
+>fetch(baseUrl + 'entries')      .then((res) => res.json())      .then : <TResult1, TResult2>(onfulfilled?: (value: any) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
 >fetch(baseUrl + 'entries')      .then((res) => res.json()) : Promise<any>
->fetch(baseUrl + 'entries')      .then : <TResult1 = Response, TResult2 = never>(onfulfilled?: ((value: Response) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>
+>fetch(baseUrl + 'entries')      .then : <TResult1, TResult2>(onfulfilled?: (value: Response) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
 >fetch(baseUrl + 'entries') : Promise<Response>
->fetch : (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>
+>fetch : (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>
 >baseUrl + 'entries' : string
 >baseUrl : "https://api.publicapis.org/"
 >'entries' : "entries"
 
       .then((res) => res.json())
->then : <TResult1 = Response, TResult2 = never>(onfulfilled?: ((value: Response) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>
+>then : <TResult1, TResult2>(onfulfilled?: (value: Response) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
 >(res) => res.json() : (res: Response) => Promise<any>
 >res : Response
 >res.json() : Promise<any>
@@= skipped -21, +21 lines =@@
 >json : () => Promise<any>
 
       .then((data) => data.entries)
->then : <TResult1 = any, TResult2 = never>(onfulfilled?: ((value: any) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>
+>then : <TResult1, TResult2>(onfulfilled?: (value: any) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
 >(data) => data.entries : (data: any) => any
 >data : any
 >data.entries : any
@@= skipped -8, +8 lines =@@
 >entries : any
 
       .catch((err) => console.log(err))
->catch : <TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined) => Promise<any>
+>catch : <TResult>(onrejected?: (reason: any) => TResult | PromiseLike<TResult> | null | undefined) => Promise<any>
 >(err) => console.log(err) : (err: any) => void
 >err : any
 >console.log(err) : void
@@= skipped -12, +12 lines =@@
 }
 
 const entryKeys = {
->entryKeys : { all: readonly ["entries"]; list: () => readonly ["entries", "list"]; }
->{  all: ['entries'] as const,  list: () => [...entryKeys.all, 'list'] as const} : { all: readonly ["entries"]; list: () => readonly ["entries", "list"]; }
+>entryKeys : { all: ["entries"]; list: () => ["entries", "list"]; }
+>{  all: ['entries'] as const,  list: () => [...entryKeys.all, 'list'] as const} : { all: ["entries"]; list: () => ["entries", "list"]; }
 
   all: ['entries'] as const,
->all : readonly ["entries"]
->['entries'] as const : readonly ["entries"]
->['entries'] : readonly ["entries"]
+>all : ["entries"]
+>['entries'] as const : ["entries"]
+>['entries'] : ["entries"]
 >'entries' : "entries"
 
   list: () => [...entryKeys.all, 'list'] as const
->list : () => readonly ["entries", "list"]
->() => [...entryKeys.all, 'list'] as const : () => readonly ["entries", "list"]
->[...entryKeys.all, 'list'] as const : readonly ["entries", "list"]
->[...entryKeys.all, 'list'] : readonly ["entries", "list"]
+>list : () => ["entries", "list"]
+>() => [...entryKeys.all, 'list'] as const : () => ["entries", "list"]
+>[...entryKeys.all, 'list'] as const : ["entries", "list"]
+>[...entryKeys.all, 'list'] : ["entries", "list"]
 >...entryKeys.all : "entries"
->entryKeys.all : readonly ["entries"]
->entryKeys : { all: readonly ["entries"]; list: () => readonly ["entries", "list"]; }
->all : readonly ["entries"]
+>entryKeys.all : ["entries"]
+>entryKeys : { all: ["entries"]; list: () => ["entries", "list"]; }
+>all : ["entries"]
 >'list' : "list"
 }
 
 export const useEntries = () => {
->useEntries : () => import("node_modules/@tanstack/vue-query/build/modern/useQuery-CPqkvEsh").b<IEntry[], Error>
->() => {  return useQuery({    queryKey: entryKeys.list(),    queryFn: testApi.getEntries,    select: (data) => data.slice(0, 10)  })} : () => import("node_modules/@tanstack/vue-query/build/modern/useQuery-CPqkvEsh").b<IEntry[], Error>
+>useEntries : () => any
+>() => {  return useQuery({    queryKey: entryKeys.list(),    queryFn: testApi.getEntries,    select: (data) => data.slice(0, 10)  })} : () => any
 
   return useQuery({
->useQuery({    queryKey: entryKeys.list(),    queryFn: testApi.getEntries,    select: (data) => data.slice(0, 10)  }) : import("node_modules/@tanstack/vue-query/build/modern/useQuery-CPqkvEsh").b<IEntry[], Error>
->useQuery : <TQueryFnData = unknown, TError = Error, TData = TQueryFnData, TQueryKey extends readonly unknown[] = readonly unknown[]>(options: { enabled?: boolean | undefined; refetchInterval?: number | undefined; select?: ((data: TQueryFnData) => TData) | undefined; retry?: (number | boolean | ((failureCount: number, error: TError) => boolean)) | undefined; queryFn?: ((context: { queryKey: TQueryKey; }) => TQueryFnData | Promise<TQueryFnData>) | undefined; queryKey?: TQueryKey | undefined; initialData?: TQueryFnData | undefined; initialDataUpdatedAt?: (number | (() => number | undefined)) | undefined; } & { initialData?: undefined; }) => import("node_modules/@tanstack/vue-query/build/modern/useQuery-CPqkvEsh").b<TData, TError>
->{    queryKey: entryKeys.list(),    queryFn: testApi.getEntries,    select: (data) => data.slice(0, 10)  } : { queryKey: readonly ["entries", "list"]; queryFn: () => Promise<IEntry[]>; select: (data: IEntry[]) => IEntry[]; }
+>useQuery({    queryKey: entryKeys.list(),    queryFn: testApi.getEntries,    select: (data) => data.slice(0, 10)  }) : any
+>useQuery : any
+>{    queryKey: entryKeys.list(),    queryFn: testApi.getEntries,    select: (data) => data.slice(0, 10)  } : { queryKey: ["entries", "list"]; queryFn: () => Promise<IEntry[]>; select: (data: any) => any; }
 
     queryKey: entryKeys.list(),
->queryKey : readonly ["entries", "list"]
->entryKeys.list() : readonly ["entries", "list"]
->entryKeys.list : () => readonly ["entries", "list"]
->entryKeys : { all: readonly ["entries"]; list: () => readonly ["entries", "list"]; }
->list : () => readonly ["entries", "list"]
+>queryKey : ["entries", "list"]
+>entryKeys.list() : ["entries", "list"]
+>entryKeys.list : () => ["entries", "list"]
+>entryKeys : { all: ["entries"]; list: () => ["entries", "list"]; }
+>list : () => ["entries", "list"]
 
     queryFn: testApi.getEntries,
 >queryFn : () => Promise<IEntry[]>
@@= skipped -44, +44 lines =@@
 >getEntries : () => Promise<IEntry[]>
 
     select: (data) => data.slice(0, 10)
->select : (data: IEntry[]) => IEntry[]
->(data) => data.slice(0, 10) : (data: IEntry[]) => IEntry[]
->data : IEntry[]
->data.slice(0, 10) : IEntry[]
->data.slice : (start?: number, end?: number) => IEntry[]
->data : IEntry[]
->slice : (start?: number, end?: number) => IEntry[]
+>select : (data: any) => any
+>(data) => data.slice(0, 10) : (data: any) => any
+>data : any
+>data.slice(0, 10) : any
+>data.slice : any
+>data : any
+>slice : any
 >0 : 0
 >10 : 10
 
