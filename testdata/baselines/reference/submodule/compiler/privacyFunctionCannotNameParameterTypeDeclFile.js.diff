--- old.privacyFunctionCannotNameParameterTypeDeclFile.js
+++ new.privacyFunctionCannotNameParameterTypeDeclFile.js
@@= skipped -159, +159 lines =@@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.SpecializedWidget = exports.Widget1 = void 0;
 exports.createWidget1 = createWidget1;
-var Widget1 = /** @class */ (function () {
-    function Widget1() {
-        this.name = 'one';
-    }
-    return Widget1;
-}());
+class Widget1 {
+    name = 'one';
+}
 exports.Widget1 = Widget1;
 function createWidget1() {
     return new Widget1();
 }
 var SpecializedWidget;
 (function (SpecializedWidget) {
-    var Widget2 = /** @class */ (function () {
-        function Widget2() {
-            this.name = 'one';
-        }
-        return Widget2;
-    }());
+    class Widget2 {
+        name = 'one';
+    }
     SpecializedWidget.Widget2 = Widget2;
     function createWidget2() {
         return new Widget2();
@@= skipped -32, +26 lines =@@
 exports.createExportedWidget3 = createExportedWidget3;
 exports.createExportedWidget4 = createExportedWidget4;
 ///<reference path='privacyFunctionCannotNameParameterTypeDeclFile_GlobalWidgets.ts'/>
-var Widgets = require("./privacyFunctionCannotNameParameterTypeDeclFile_Widgets");
-var Widgets1 = require("GlobalWidgets");
+const Widgets = require("./privacyFunctionCannotNameParameterTypeDeclFile_Widgets");
+const Widgets1 = require("GlobalWidgets");
 function createExportedWidget1() {
     return Widgets.createWidget1();
 }
@@= skipped -22, +22 lines =@@
 exports.publicFunctionWithPrivateParmeterTypes1 = publicFunctionWithPrivateParmeterTypes1;
 exports.publicFunctionWithPrivateModuleParameterTypes = publicFunctionWithPrivateModuleParameterTypes;
 exports.publicFunctionWithPrivateModuleParameterTypes1 = publicFunctionWithPrivateModuleParameterTypes1;
-var exporter = require("./privacyFunctionCannotNameParameterTypeDeclFile_exporter");
-var publicClassWithWithPrivateParmeterTypes = /** @class */ (function () {
-    function publicClassWithWithPrivateParmeterTypes(param, param1, param2) {
-        if (param === void 0) { param = exporter.createExportedWidget1(); }
-        if (param1 === void 0) { param1 = exporter.createExportedWidget1(); }
-        if (param2 === void 0) { param2 = exporter.createExportedWidget1(); }
+const exporter = require("./privacyFunctionCannotNameParameterTypeDeclFile_exporter");
+class publicClassWithWithPrivateParmeterTypes {
+    param1;
+    param2;
+    static myPublicStaticMethod(param = exporter.createExportedWidget1()) {
+    }
+    static myPrivateStaticMethod(param = exporter.createExportedWidget1()) {
+    }
+    myPublicMethod(param = exporter.createExportedWidget1()) {
+    }
+    myPrivateMethod(param = exporter.createExportedWidget1()) {
+    }
+    constructor(param = exporter.createExportedWidget1(), param1 = exporter.createExportedWidget1(), param2 = exporter.createExportedWidget1()) {
         this.param1 = param1;
         this.param2 = param2;
     }
-    publicClassWithWithPrivateParmeterTypes.myPublicStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget1(); }
-    };
-    publicClassWithWithPrivateParmeterTypes.myPrivateStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget1(); }
-    };
-    publicClassWithWithPrivateParmeterTypes.prototype.myPublicMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget1(); }
-    };
-    publicClassWithWithPrivateParmeterTypes.prototype.myPrivateMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget1(); }
-    };
-    return publicClassWithWithPrivateParmeterTypes;
-}());
+}
 exports.publicClassWithWithPrivateParmeterTypes = publicClassWithWithPrivateParmeterTypes;
-var publicClassWithWithPrivateParmeterTypes1 = /** @class */ (function () {
-    function publicClassWithWithPrivateParmeterTypes1(param, param1, param2) {
-        if (param === void 0) { param = exporter.createExportedWidget3(); }
-        if (param1 === void 0) { param1 = exporter.createExportedWidget3(); }
-        if (param2 === void 0) { param2 = exporter.createExportedWidget3(); }
+class publicClassWithWithPrivateParmeterTypes1 {
+    param1;
+    param2;
+    static myPublicStaticMethod(param = exporter.createExportedWidget3()) {
+    }
+    static myPrivateStaticMethod(param = exporter.createExportedWidget3()) {
+    }
+    myPublicMethod(param = exporter.createExportedWidget3()) {
+    }
+    myPrivateMethod(param = exporter.createExportedWidget3()) {
+    }
+    constructor(param = exporter.createExportedWidget3(), param1 = exporter.createExportedWidget3(), param2 = exporter.createExportedWidget3()) {
         this.param1 = param1;
         this.param2 = param2;
     }
-    publicClassWithWithPrivateParmeterTypes1.myPublicStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget3(); }
-    };
-    publicClassWithWithPrivateParmeterTypes1.myPrivateStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget3(); }
-    };
-    publicClassWithWithPrivateParmeterTypes1.prototype.myPublicMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget3(); }
-    };
-    publicClassWithWithPrivateParmeterTypes1.prototype.myPrivateMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget3(); }
-    };
-    return publicClassWithWithPrivateParmeterTypes1;
-}());
+}
 exports.publicClassWithWithPrivateParmeterTypes1 = publicClassWithWithPrivateParmeterTypes1;
-var privateClassWithWithPrivateParmeterTypes = /** @class */ (function () {
-    function privateClassWithWithPrivateParmeterTypes(param, param1, param2) {
-        if (param === void 0) { param = exporter.createExportedWidget1(); }
-        if (param1 === void 0) { param1 = exporter.createExportedWidget1(); }
-        if (param2 === void 0) { param2 = exporter.createExportedWidget1(); }
-        this.param1 = param1;
-        this.param2 = param2;
-    }
-    privateClassWithWithPrivateParmeterTypes.myPublicStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget1(); }
-    };
-    privateClassWithWithPrivateParmeterTypes.myPrivateStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget1(); }
-    };
-    privateClassWithWithPrivateParmeterTypes.prototype.myPublicMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget1(); }
-    };
-    privateClassWithWithPrivateParmeterTypes.prototype.myPrivateMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget1(); }
-    };
-    return privateClassWithWithPrivateParmeterTypes;
-}());
-var privateClassWithWithPrivateParmeterTypes2 = /** @class */ (function () {
-    function privateClassWithWithPrivateParmeterTypes2(param, param1, param2) {
-        if (param === void 0) { param = exporter.createExportedWidget3(); }
-        if (param1 === void 0) { param1 = exporter.createExportedWidget3(); }
-        if (param2 === void 0) { param2 = exporter.createExportedWidget3(); }
-        this.param1 = param1;
-        this.param2 = param2;
-    }
-    privateClassWithWithPrivateParmeterTypes2.myPublicStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget3(); }
-    };
-    privateClassWithWithPrivateParmeterTypes2.myPrivateStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget3(); }
-    };
-    privateClassWithWithPrivateParmeterTypes2.prototype.myPublicMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget3(); }
-    };
-    privateClassWithWithPrivateParmeterTypes2.prototype.myPrivateMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget3(); }
-    };
-    return privateClassWithWithPrivateParmeterTypes2;
-}());
-function publicFunctionWithPrivateParmeterTypes(param) {
-    if (param === void 0) { param = exporter.createExportedWidget1(); }
-}
-function privateFunctionWithPrivateParmeterTypes(param) {
-    if (param === void 0) { param = exporter.createExportedWidget1(); }
-}
-function publicFunctionWithPrivateParmeterTypes1(param) {
-    if (param === void 0) { param = exporter.createExportedWidget3(); }
-}
-function privateFunctionWithPrivateParmeterTypes1(param) {
-    if (param === void 0) { param = exporter.createExportedWidget3(); }
-}
-var publicClassWithPrivateModuleParameterTypes = /** @class */ (function () {
-    function publicClassWithPrivateModuleParameterTypes(param, param1, param2) {
-        if (param === void 0) { param = exporter.createExportedWidget2(); }
-        if (param1 === void 0) { param1 = exporter.createExportedWidget2(); }
-        if (param2 === void 0) { param2 = exporter.createExportedWidget2(); }
-        this.param1 = param1;
-        this.param2 = param2;
-    }
-    publicClassWithPrivateModuleParameterTypes.myPublicStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget2(); }
-    };
-    publicClassWithPrivateModuleParameterTypes.prototype.myPublicMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget2(); }
-    };
-    return publicClassWithPrivateModuleParameterTypes;
-}());
+class privateClassWithWithPrivateParmeterTypes {
+    param1;
+    param2;
+    static myPublicStaticMethod(param = exporter.createExportedWidget1()) {
+    }
+    static myPrivateStaticMethod(param = exporter.createExportedWidget1()) {
+    }
+    myPublicMethod(param = exporter.createExportedWidget1()) {
+    }
+    myPrivateMethod(param = exporter.createExportedWidget1()) {
+    }
+    constructor(param = exporter.createExportedWidget1(), param1 = exporter.createExportedWidget1(), param2 = exporter.createExportedWidget1()) {
+        this.param1 = param1;
+        this.param2 = param2;
+    }
+}
+class privateClassWithWithPrivateParmeterTypes2 {
+    param1;
+    param2;
+    static myPublicStaticMethod(param = exporter.createExportedWidget3()) {
+    }
+    static myPrivateStaticMethod(param = exporter.createExportedWidget3()) {
+    }
+    myPublicMethod(param = exporter.createExportedWidget3()) {
+    }
+    myPrivateMethod(param = exporter.createExportedWidget3()) {
+    }
+    constructor(param = exporter.createExportedWidget3(), param1 = exporter.createExportedWidget3(), param2 = exporter.createExportedWidget3()) {
+        this.param1 = param1;
+        this.param2 = param2;
+    }
+}
+function publicFunctionWithPrivateParmeterTypes(param = exporter.createExportedWidget1()) {
+}
+function privateFunctionWithPrivateParmeterTypes(param = exporter.createExportedWidget1()) {
+}
+function publicFunctionWithPrivateParmeterTypes1(param = exporter.createExportedWidget3()) {
+}
+function privateFunctionWithPrivateParmeterTypes1(param = exporter.createExportedWidget3()) {
+}
+class publicClassWithPrivateModuleParameterTypes {
+    param1;
+    param2;
+    static myPublicStaticMethod(param = exporter.createExportedWidget2()) {
+    }
+    myPublicMethod(param = exporter.createExportedWidget2()) {
+    }
+    constructor(param = exporter.createExportedWidget2(), param1 = exporter.createExportedWidget2(), param2 = exporter.createExportedWidget2()) {
+        this.param1 = param1;
+        this.param2 = param2;
+    }
+}
 exports.publicClassWithPrivateModuleParameterTypes = publicClassWithPrivateModuleParameterTypes;
-var publicClassWithPrivateModuleParameterTypes2 = /** @class */ (function () {
-    function publicClassWithPrivateModuleParameterTypes2(param, param1, param2) {
-        if (param === void 0) { param = exporter.createExportedWidget4(); }
-        if (param1 === void 0) { param1 = exporter.createExportedWidget4(); }
-        if (param2 === void 0) { param2 = exporter.createExportedWidget4(); }
+class publicClassWithPrivateModuleParameterTypes2 {
+    param1;
+    param2;
+    static myPublicStaticMethod(param = exporter.createExportedWidget4()) {
+    }
+    myPublicMethod(param = exporter.createExportedWidget4()) {
+    }
+    constructor(param = exporter.createExportedWidget4(), param1 = exporter.createExportedWidget4(), param2 = exporter.createExportedWidget4()) {
         this.param1 = param1;
         this.param2 = param2;
     }
-    publicClassWithPrivateModuleParameterTypes2.myPublicStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget4(); }
-    };
-    publicClassWithPrivateModuleParameterTypes2.prototype.myPublicMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget4(); }
-    };
-    return publicClassWithPrivateModuleParameterTypes2;
-}());
+}
 exports.publicClassWithPrivateModuleParameterTypes2 = publicClassWithPrivateModuleParameterTypes2;
-function publicFunctionWithPrivateModuleParameterTypes(param) {
-    if (param === void 0) { param = exporter.createExportedWidget2(); }
-}
-function publicFunctionWithPrivateModuleParameterTypes1(param) {
-    if (param === void 0) { param = exporter.createExportedWidget4(); }
-}
-var privateClassWithPrivateModuleParameterTypes = /** @class */ (function () {
-    function privateClassWithPrivateModuleParameterTypes(param, param1, param2) {
-        if (param === void 0) { param = exporter.createExportedWidget2(); }
-        if (param1 === void 0) { param1 = exporter.createExportedWidget2(); }
-        if (param2 === void 0) { param2 = exporter.createExportedWidget2(); }
-        this.param1 = param1;
-        this.param2 = param2;
-    }
-    privateClassWithPrivateModuleParameterTypes.myPublicStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget2(); }
-    };
-    privateClassWithPrivateModuleParameterTypes.prototype.myPublicMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget2(); }
-    };
-    return privateClassWithPrivateModuleParameterTypes;
-}());
-var privateClassWithPrivateModuleParameterTypes1 = /** @class */ (function () {
-    function privateClassWithPrivateModuleParameterTypes1(param, param1, param2) {
-        if (param === void 0) { param = exporter.createExportedWidget4(); }
-        if (param1 === void 0) { param1 = exporter.createExportedWidget4(); }
-        if (param2 === void 0) { param2 = exporter.createExportedWidget4(); }
-        this.param1 = param1;
-        this.param2 = param2;
-    }
-    privateClassWithPrivateModuleParameterTypes1.myPublicStaticMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget4(); }
-    };
-    privateClassWithPrivateModuleParameterTypes1.prototype.myPublicMethod = function (param) {
-        if (param === void 0) { param = exporter.createExportedWidget4(); }
-    };
-    return privateClassWithPrivateModuleParameterTypes1;
-}());
-function privateFunctionWithPrivateModuleParameterTypes(param) {
-    if (param === void 0) { param = exporter.createExportedWidget2(); }
-}
-function privateFunctionWithPrivateModuleParameterTypes1(param) {
-    if (param === void 0) { param = exporter.createExportedWidget4(); }
+function publicFunctionWithPrivateModuleParameterTypes(param = exporter.createExportedWidget2()) {
+}
+function publicFunctionWithPrivateModuleParameterTypes1(param = exporter.createExportedWidget4()) {
+}
+class privateClassWithPrivateModuleParameterTypes {
+    param1;
+    param2;
+    static myPublicStaticMethod(param = exporter.createExportedWidget2()) {
+    }
+    myPublicMethod(param = exporter.createExportedWidget2()) {
+    }
+    constructor(param = exporter.createExportedWidget2(), param1 = exporter.createExportedWidget2(), param2 = exporter.createExportedWidget2()) {
+        this.param1 = param1;
+        this.param2 = param2;
+    }
+}
+class privateClassWithPrivateModuleParameterTypes1 {
+    param1;
+    param2;
+    static myPublicStaticMethod(param = exporter.createExportedWidget4()) {
+    }
+    myPublicMethod(param = exporter.createExportedWidget4()) {
+    }
+    constructor(param = exporter.createExportedWidget4(), param1 = exporter.createExportedWidget4(), param2 = exporter.createExportedWidget4()) {
+        this.param1 = param1;
+        this.param2 = param2;
+    }
+}
+function privateFunctionWithPrivateModuleParameterTypes(param = exporter.createExportedWidget2()) {
+}
+function privateFunctionWithPrivateModuleParameterTypes1(param = exporter.createExportedWidget4()) {
 }

