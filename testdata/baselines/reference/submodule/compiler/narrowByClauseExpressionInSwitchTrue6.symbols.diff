--- old.narrowByClauseExpressionInSwitchTrue6.symbols
+++ new.narrowByClauseExpressionInSwitchTrue6.symbols
@@= skipped -4, +4 lines =@@
 >A : Symbol(A, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 0))
 
     kind: "a";
->kind : Symbol(A.kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 13))
+>kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 13))
 
     aProps: string;
->aProps : Symbol(A.aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
+>aProps : Symbol(aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
 }
 
 interface B {
 >B : Symbol(B, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 3, 1))
 
     kind: "b";
->kind : Symbol(B.kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 5, 13))
+>kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 5, 13))
 
     bProps: string;
->bProps : Symbol(B.bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
+>bProps : Symbol(bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
 }
 
 interface C {
 >C : Symbol(C, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 8, 1))
 
     kind: "c";
->kind : Symbol(C.kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 10, 13))
+>kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 10, 13))
 
     cProps: string;
->cProps : Symbol(C.cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
+>cProps : Symbol(cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
 }
 
 
@@= skipped -50, +50 lines =@@
 >kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 5, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 10, 13))
 
             x.aProps;
->x.aProps : Symbol(A.aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
+>x.aProps : Symbol(aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
 >x : Symbol(x, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 18, 13))
->aProps : Symbol(A.aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
+>aProps : Symbol(aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
 
             break;
         case x.kind === "b":
@@= skipped -11, +11 lines =@@
 >kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 5, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 10, 13))
 
             x.bProps;
->x.bProps : Symbol(B.bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
+>x.bProps : Symbol(bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
 >x : Symbol(x, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 18, 13))
->bProps : Symbol(B.bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
+>bProps : Symbol(bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
 
             break;
         case x.kind === "c":
@@= skipped -11, +11 lines =@@
 >kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 5, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 10, 13))
 
             x.cProps;
->x.cProps : Symbol(C.cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
+>x.cProps : Symbol(cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
 >x : Symbol(x, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 18, 13))
->cProps : Symbol(C.cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
+>cProps : Symbol(cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
 
             break;
     }
@@= skipped -19, +19 lines =@@
 >kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 5, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 10, 13))
 
             x.aProps;
->x.aProps : Symbol(A.aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
+>x.aProps : Symbol(aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
 >x : Symbol(x, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 18, 13))
->aProps : Symbol(A.aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
+>aProps : Symbol(aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
 
             break;
         }
@@= skipped -12, +12 lines =@@
 >kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 5, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 10, 13))
 
             x.bProps;
->x.bProps : Symbol(B.bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
+>x.bProps : Symbol(bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
 >x : Symbol(x, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 18, 13))
->bProps : Symbol(B.bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
+>bProps : Symbol(bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
 
             break;
         }
@@= skipped -12, +12 lines =@@
 >kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 5, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 10, 13))
 
             x.cProps;
->x.cProps : Symbol(C.cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
+>x.cProps : Symbol(cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
 >x : Symbol(x, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 18, 13))
->cProps : Symbol(C.cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
+>cProps : Symbol(cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
 
             break;
         }
@@= skipped -11, +11 lines =@@
     switch (true) {
         default:
             x.aProps;
->x.aProps : Symbol(A.aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
+>x.aProps : Symbol(aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
 >x : Symbol(x, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 18, 13))
->aProps : Symbol(A.aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
+>aProps : Symbol(aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
 
             break;
         case x.kind === "b":
@@= skipped -11, +11 lines =@@
 >kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 5, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 10, 13))
 
             x.bProps;
->x.bProps : Symbol(B.bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
+>x.bProps : Symbol(bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
 >x : Symbol(x, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 18, 13))
->bProps : Symbol(B.bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
+>bProps : Symbol(bProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 6, 14))
 
             break;
         case x.kind === "c":
@@= skipped -11, +11 lines =@@
 >kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 5, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 10, 13))
 
             x.cProps;
->x.cProps : Symbol(C.cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
+>x.cProps : Symbol(cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
 >x : Symbol(x, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 18, 13))
->cProps : Symbol(C.cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
+>cProps : Symbol(cProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 11, 14))
 
             break;
     }
@@= skipped -19, +19 lines =@@
 >kind : Symbol(kind, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 0, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 5, 13), Decl(narrowByClauseExpressionInSwitchTrue6.ts, 10, 13))
 
             x.aProps;
->x.aProps : Symbol(A.aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
+>x.aProps : Symbol(aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
 >x : Symbol(x, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 18, 13))
->aProps : Symbol(A.aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
+>aProps : Symbol(aProps, Decl(narrowByClauseExpressionInSwitchTrue6.ts, 1, 14))
 
             // fallthrough
         case x.kind === "b":
