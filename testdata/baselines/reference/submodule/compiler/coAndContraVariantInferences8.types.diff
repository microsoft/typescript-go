--- old.coAndContraVariantInferences8.types
+++ new.coAndContraVariantInferences8.types
@@= skipped -14, +14 lines =@@
 
 fn.call(null, x);
 >fn.call(null, x) : void
->fn.call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
+>fn.call : <T, A extends any[], R>(thisArg: T, ...args: A) => R
 >fn : (() => void) | ((a: number) => void)
->call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
+>call : <T, A extends any[], R>(thisArg: T, ...args: A) => R
 >x : number
 
 fn.call(null, y);
 >fn.call(null, y) : void
->fn.call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
+>fn.call : <T, A extends any[], R>(thisArg: T, ...args: A) => R
 >fn : (() => void) | ((a: number) => void)
->call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
+>call : <T, A extends any[], R>(thisArg: T, ...args: A) => R
 >y : any
 
 export {};
