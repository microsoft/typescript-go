--- old.truthinessCallExpressionCoercion1.symbols
+++ new.truthinessCallExpressionCoercion1.symbols
@@= skipped -8, +8 lines =@@
     // error
     required ? console.log('required') : undefined;
 >required : Symbol(required, Decl(truthinessCallExpressionCoercion1.ts, 0, 54))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >undefined : Symbol(undefined)
 
     // ok
     optional ? console.log('optional') : undefined;
 >optional : Symbol(optional, Decl(truthinessCallExpressionCoercion1.ts, 0, 78))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >undefined : Symbol(undefined)
 
     // ok
     !!required ? console.log('not required') : undefined;
 >required : Symbol(required, Decl(truthinessCallExpressionCoercion1.ts, 0, 54))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >undefined : Symbol(undefined)
 
     // ok
     required() ? console.log('required call') : undefined;
 >required : Symbol(required, Decl(truthinessCallExpressionCoercion1.ts, 0, 54))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >undefined : Symbol(undefined)
 }
 
@@= skipped -35, +35 lines =@@
 
     function test() { return Math.random() > 0.5; }
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion1.ts, 14, 39))
->Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>Math.random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 
     // error
     test ? console.log('test') : undefined;
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion1.ts, 14, 39))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >undefined : Symbol(undefined)
 
     // ok
     test ? console.log(test) : undefined;
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion1.ts, 14, 39))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion1.ts, 14, 39))
 >undefined : Symbol(undefined)
 
@@= skipped -32, +32 lines =@@
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion1.ts, 14, 39))
 
         ? [() => null].forEach(() => { test(); })
->[() => null].forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>[() => null].forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion1.ts, 14, 39))
 
         : undefined;
@@= skipped -12, +12 lines =@@
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion1.ts, 14, 39))
 
         ? [() => null].forEach(test => { test() })
->[() => null].forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>[() => null].forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion1.ts, 33, 31))
 >test : Symbol(test, Decl(truthinessCallExpressionCoercion1.ts, 33, 31))
 
@@= skipped -30, +30 lines =@@
 >x : Symbol(x, Decl(truthinessCallExpressionCoercion1.ts, 38, 9))
 >foo : Symbol(foo, Decl(truthinessCallExpressionCoercion1.ts, 38, 15))
 >bar : Symbol(bar, Decl(truthinessCallExpressionCoercion1.ts, 39, 14))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >undefined : Symbol(undefined)
 
     // ok
@@= skipped -63, +63 lines =@@
 >Foo : Symbol(Foo, Decl(truthinessCallExpressionCoercion1.ts, 64, 1))
 
     maybeIsUser?: () => boolean;
->maybeIsUser : Symbol(Foo.maybeIsUser, Decl(truthinessCallExpressionCoercion1.ts, 66, 11))
+>maybeIsUser : Symbol(maybeIsUser, Decl(truthinessCallExpressionCoercion1.ts, 66, 11))
 
     isUser() {
->isUser : Symbol(Foo.isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
+>isUser : Symbol(isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
 
         return true;
     }
 
     test() {
->test : Symbol(Foo.test, Decl(truthinessCallExpressionCoercion1.ts, 71, 5))
+>test : Symbol(test, Decl(truthinessCallExpressionCoercion1.ts, 71, 5))
 
         // error
         this.isUser ? console.log('this.isUser') : undefined;
->this.isUser : Symbol(Foo.isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
+>this.isUser : Symbol(isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
 >this : Symbol(Foo, Decl(truthinessCallExpressionCoercion1.ts, 64, 1))
->isUser : Symbol(Foo.isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>isUser : Symbol(isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >undefined : Symbol(undefined)
 
         // ok
         this.maybeIsUser ? console.log('this.maybeIsUser') : undefined;
->this.maybeIsUser : Symbol(Foo.maybeIsUser, Decl(truthinessCallExpressionCoercion1.ts, 66, 11))
+>this.maybeIsUser : Symbol(maybeIsUser, Decl(truthinessCallExpressionCoercion1.ts, 66, 11))
 >this : Symbol(Foo, Decl(truthinessCallExpressionCoercion1.ts, 64, 1))
->maybeIsUser : Symbol(Foo.maybeIsUser, Decl(truthinessCallExpressionCoercion1.ts, 66, 11))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>maybeIsUser : Symbol(maybeIsUser, Decl(truthinessCallExpressionCoercion1.ts, 66, 11))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >undefined : Symbol(undefined)
 
         // ok
         if (this.isUser) {
->this.isUser : Symbol(Foo.isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
+>this.isUser : Symbol(isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
 >this : Symbol(Foo, Decl(truthinessCallExpressionCoercion1.ts, 64, 1))
->isUser : Symbol(Foo.isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
+>isUser : Symbol(isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
 
             this.isUser();
->this.isUser : Symbol(Foo.isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
+>this.isUser : Symbol(isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
 >this : Symbol(Foo, Decl(truthinessCallExpressionCoercion1.ts, 64, 1))
->isUser : Symbol(Foo.isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
+>isUser : Symbol(isUser, Decl(truthinessCallExpressionCoercion1.ts, 67, 32))
         }
     }
 }
