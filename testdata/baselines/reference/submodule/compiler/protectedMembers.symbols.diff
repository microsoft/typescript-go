--- old.protectedMembers.symbols
+++ new.protectedMembers.symbols
@@= skipped -5, +5 lines =@@
 >C1 : Symbol(C1, Decl(protectedMembers.ts, 0, 0))
 
     protected x: number;
->x : Symbol(C1.x, Decl(protectedMembers.ts, 1, 10))
+>x : Symbol(x, Decl(protectedMembers.ts, 1, 10))
 
     protected static sx: number;
->sx : Symbol(C1.sx, Decl(protectedMembers.ts, 2, 24))
+>sx : Symbol(sx, Decl(protectedMembers.ts, 2, 24))
 
     protected f() {
->f : Symbol(C1.f, Decl(protectedMembers.ts, 3, 32))
+>f : Symbol(f, Decl(protectedMembers.ts, 3, 32))
 
         return this.x;
->this.x : Symbol(C1.x, Decl(protectedMembers.ts, 1, 10))
+>this.x : Symbol(x, Decl(protectedMembers.ts, 1, 10))
 >this : Symbol(C1, Decl(protectedMembers.ts, 0, 0))
->x : Symbol(C1.x, Decl(protectedMembers.ts, 1, 10))
+>x : Symbol(x, Decl(protectedMembers.ts, 1, 10))
     }
     protected static sf() {
->sf : Symbol(C1.sf, Decl(protectedMembers.ts, 6, 5))
+>sf : Symbol(sf, Decl(protectedMembers.ts, 6, 5))
 
         return this.sx;
->this.sx : Symbol(C1.sx, Decl(protectedMembers.ts, 2, 24))
+>this.sx : Symbol(sx, Decl(protectedMembers.ts, 2, 24))
 >this : Symbol(C1, Decl(protectedMembers.ts, 0, 0))
->sx : Symbol(C1.sx, Decl(protectedMembers.ts, 2, 24))
+>sx : Symbol(sx, Decl(protectedMembers.ts, 2, 24))
     }
 }
 
@@= skipped -29, +29 lines =@@
 >C1 : Symbol(C1, Decl(protectedMembers.ts, 0, 0))
 
     protected f() {
->f : Symbol(C2.f, Decl(protectedMembers.ts, 13, 21))
+>f : Symbol(f, Decl(protectedMembers.ts, 13, 21))
 
         return super.f() + this.x;
->super.f : Symbol(C1.f, Decl(protectedMembers.ts, 3, 32))
+>super.f : Symbol(f, Decl(protectedMembers.ts, 3, 32))
 >super : Symbol(C1, Decl(protectedMembers.ts, 0, 0))
->f : Symbol(C1.f, Decl(protectedMembers.ts, 3, 32))
->this.x : Symbol(C1.x, Decl(protectedMembers.ts, 1, 10))
+>f : Symbol(f, Decl(protectedMembers.ts, 3, 32))
+>this.x : Symbol(x, Decl(protectedMembers.ts, 1, 10))
 >this : Symbol(C2, Decl(protectedMembers.ts, 10, 1))
->x : Symbol(C1.x, Decl(protectedMembers.ts, 1, 10))
+>x : Symbol(x, Decl(protectedMembers.ts, 1, 10))
     }
     protected static sf() {
->sf : Symbol(C2.sf, Decl(protectedMembers.ts, 16, 5))
+>sf : Symbol(sf, Decl(protectedMembers.ts, 16, 5))
 
         return super.sf() + this.sx;
->super.sf : Symbol(C1.sf, Decl(protectedMembers.ts, 6, 5))
+>super.sf : Symbol(sf, Decl(protectedMembers.ts, 6, 5))
 >super : Symbol(C1, Decl(protectedMembers.ts, 0, 0))
->sf : Symbol(C1.sf, Decl(protectedMembers.ts, 6, 5))
->this.sx : Symbol(C1.sx, Decl(protectedMembers.ts, 2, 24))
+>sf : Symbol(sf, Decl(protectedMembers.ts, 6, 5))
+>this.sx : Symbol(sx, Decl(protectedMembers.ts, 2, 24))
 >this : Symbol(C2, Decl(protectedMembers.ts, 10, 1))
->sx : Symbol(C1.sx, Decl(protectedMembers.ts, 2, 24))
+>sx : Symbol(sx, Decl(protectedMembers.ts, 2, 24))
     }
 }
 
@@= skipped -29, +29 lines =@@
 >C2 : Symbol(C2, Decl(protectedMembers.ts, 10, 1))
 
     x: number;
->x : Symbol(C3.x, Decl(protectedMembers.ts, 23, 21))
+>x : Symbol(x, Decl(protectedMembers.ts, 23, 21))
 
     static sx: number;
->sx : Symbol(C3.sx, Decl(protectedMembers.ts, 24, 14))
+>sx : Symbol(sx, Decl(protectedMembers.ts, 24, 14))
 
     f() {
->f : Symbol(C3.f, Decl(protectedMembers.ts, 25, 22))
+>f : Symbol(f, Decl(protectedMembers.ts, 25, 22))
 
         return super.f();
->super.f : Symbol(C2.f, Decl(protectedMembers.ts, 13, 21))
+>super.f : Symbol(f, Decl(protectedMembers.ts, 13, 21))
 >super : Symbol(C2, Decl(protectedMembers.ts, 10, 1))
->f : Symbol(C2.f, Decl(protectedMembers.ts, 13, 21))
+>f : Symbol(f, Decl(protectedMembers.ts, 13, 21))
     }
     static sf() {
->sf : Symbol(C3.sf, Decl(protectedMembers.ts, 28, 5))
+>sf : Symbol(sf, Decl(protectedMembers.ts, 28, 5))
 
         return super.sf();
->super.sf : Symbol(C2.sf, Decl(protectedMembers.ts, 16, 5))
+>super.sf : Symbol(sf, Decl(protectedMembers.ts, 16, 5))
 >super : Symbol(C2, Decl(protectedMembers.ts, 10, 1))
->sf : Symbol(C2.sf, Decl(protectedMembers.ts, 16, 5))
+>sf : Symbol(sf, Decl(protectedMembers.ts, 16, 5))
     }
 }
 
@@= skipped -37, +37 lines =@@
 
 // All of these should be errors
 c1.x;
->c1.x : Symbol(C1.x, Decl(protectedMembers.ts, 1, 10))
+>c1.x : Symbol(x, Decl(protectedMembers.ts, 1, 10))
 >c1 : Symbol(c1, Decl(protectedMembers.ts, 34, 3))
->x : Symbol(C1.x, Decl(protectedMembers.ts, 1, 10))
+>x : Symbol(x, Decl(protectedMembers.ts, 1, 10))
 
 c1.f();
->c1.f : Symbol(C1.f, Decl(protectedMembers.ts, 3, 32))
+>c1.f : Symbol(f, Decl(protectedMembers.ts, 3, 32))
 >c1 : Symbol(c1, Decl(protectedMembers.ts, 34, 3))
->f : Symbol(C1.f, Decl(protectedMembers.ts, 3, 32))
+>f : Symbol(f, Decl(protectedMembers.ts, 3, 32))
 
 C1.sx;
->C1.sx : Symbol(C1.sx, Decl(protectedMembers.ts, 2, 24))
+>C1.sx : Symbol(sx, Decl(protectedMembers.ts, 2, 24))
 >C1 : Symbol(C1, Decl(protectedMembers.ts, 0, 0))
->sx : Symbol(C1.sx, Decl(protectedMembers.ts, 2, 24))
+>sx : Symbol(sx, Decl(protectedMembers.ts, 2, 24))
 
 C1.sf();
->C1.sf : Symbol(C1.sf, Decl(protectedMembers.ts, 6, 5))
+>C1.sf : Symbol(sf, Decl(protectedMembers.ts, 6, 5))
 >C1 : Symbol(C1, Decl(protectedMembers.ts, 0, 0))
->sf : Symbol(C1.sf, Decl(protectedMembers.ts, 6, 5))
+>sf : Symbol(sf, Decl(protectedMembers.ts, 6, 5))
 
 // All of these should be errors
 c2.x;
->c2.x : Symbol(C1.x, Decl(protectedMembers.ts, 1, 10))
+>c2.x : Symbol(x, Decl(protectedMembers.ts, 1, 10))
 >c2 : Symbol(c2, Decl(protectedMembers.ts, 35, 3))
->x : Symbol(C1.x, Decl(protectedMembers.ts, 1, 10))
+>x : Symbol(x, Decl(protectedMembers.ts, 1, 10))
 
 c2.f();
->c2.f : Symbol(C2.f, Decl(protectedMembers.ts, 13, 21))
+>c2.f : Symbol(f, Decl(protectedMembers.ts, 13, 21))
 >c2 : Symbol(c2, Decl(protectedMembers.ts, 35, 3))
->f : Symbol(C2.f, Decl(protectedMembers.ts, 13, 21))
+>f : Symbol(f, Decl(protectedMembers.ts, 13, 21))
 
 C2.sx;
->C2.sx : Symbol(C1.sx, Decl(protectedMembers.ts, 2, 24))
+>C2.sx : Symbol(sx, Decl(protectedMembers.ts, 2, 24))
 >C2 : Symbol(C2, Decl(protectedMembers.ts, 10, 1))
->sx : Symbol(C1.sx, Decl(protectedMembers.ts, 2, 24))
+>sx : Symbol(sx, Decl(protectedMembers.ts, 2, 24))
 
 C2.sf();
->C2.sf : Symbol(C2.sf, Decl(protectedMembers.ts, 16, 5))
+>C2.sf : Symbol(sf, Decl(protectedMembers.ts, 16, 5))
 >C2 : Symbol(C2, Decl(protectedMembers.ts, 10, 1))
->sf : Symbol(C2.sf, Decl(protectedMembers.ts, 16, 5))
+>sf : Symbol(sf, Decl(protectedMembers.ts, 16, 5))
 
 // All of these should be ok
 c3.x;
->c3.x : Symbol(C3.x, Decl(protectedMembers.ts, 23, 21))
+>c3.x : Symbol(x, Decl(protectedMembers.ts, 23, 21))
 >c3 : Symbol(c3, Decl(protectedMembers.ts, 36, 3))
->x : Symbol(C3.x, Decl(protectedMembers.ts, 23, 21))
+>x : Symbol(x, Decl(protectedMembers.ts, 23, 21))
 
 c3.f();
->c3.f : Symbol(C3.f, Decl(protectedMembers.ts, 25, 22))
+>c3.f : Symbol(f, Decl(protectedMembers.ts, 25, 22))
 >c3 : Symbol(c3, Decl(protectedMembers.ts, 36, 3))
->f : Symbol(C3.f, Decl(protectedMembers.ts, 25, 22))
+>f : Symbol(f, Decl(protectedMembers.ts, 25, 22))
 
 C3.sx;
->C3.sx : Symbol(C3.sx, Decl(protectedMembers.ts, 24, 14))
+>C3.sx : Symbol(sx, Decl(protectedMembers.ts, 24, 14))
 >C3 : Symbol(C3, Decl(protectedMembers.ts, 20, 1))
->sx : Symbol(C3.sx, Decl(protectedMembers.ts, 24, 14))
+>sx : Symbol(sx, Decl(protectedMembers.ts, 24, 14))
 
 C3.sf();
->C3.sf : Symbol(C3.sf, Decl(protectedMembers.ts, 28, 5))
+>C3.sf : Symbol(sf, Decl(protectedMembers.ts, 28, 5))
 >C3 : Symbol(C3, Decl(protectedMembers.ts, 20, 1))
->sf : Symbol(C3.sf, Decl(protectedMembers.ts, 28, 5))
+>sf : Symbol(sf, Decl(protectedMembers.ts, 28, 5))
 
 class A {
 >A : Symbol(A, Decl(protectedMembers.ts, 54, 8))
 
     protected x;
->x : Symbol(A.x, Decl(protectedMembers.ts, 56, 9))
+>x : Symbol(x, Decl(protectedMembers.ts, 56, 9))
 }
 
 class B extends A {
@@= skipped -73, +73 lines =@@
 >A : Symbol(A, Decl(protectedMembers.ts, 54, 8))
 
     y;
->y : Symbol(B.y, Decl(protectedMembers.ts, 60, 19))
+>y : Symbol(y, Decl(protectedMembers.ts, 60, 19))
 }
 
 class C extends A {
@@= skipped -8, +8 lines =@@
 >A : Symbol(A, Decl(protectedMembers.ts, 54, 8))
 
     z;
->z : Symbol(C.z, Decl(protectedMembers.ts, 64, 19))
+>z : Symbol(z, Decl(protectedMembers.ts, 64, 19))
 
     static foo(a: A, b: B, c: C, d: D, e: E) {
->foo : Symbol(C.foo, Decl(protectedMembers.ts, 65, 6))
+>foo : Symbol(foo, Decl(protectedMembers.ts, 65, 6))
 >a : Symbol(a, Decl(protectedMembers.ts, 66, 15))
 >A : Symbol(A, Decl(protectedMembers.ts, 54, 8))
 >b : Symbol(b, Decl(protectedMembers.ts, 66, 20))
@@= skipped -16, +16 lines =@@
 >E : Symbol(E, Decl(protectedMembers.ts, 77, 1))
 
         a.x = 1;  // Error, access must be through C or type derived from C
->a.x : Symbol(A.x, Decl(protectedMembers.ts, 56, 9))
+>a.x : Symbol(x, Decl(protectedMembers.ts, 56, 9))
 >a : Symbol(a, Decl(protectedMembers.ts, 66, 15))
->x : Symbol(A.x, Decl(protectedMembers.ts, 56, 9))
+>x : Symbol(x, Decl(protectedMembers.ts, 56, 9))
 
         b.x = 1;  // Error, access must be through C or type derived from C
->b.x : Symbol(A.x, Decl(protectedMembers.ts, 56, 9))
+>b.x : Symbol(x, Decl(protectedMembers.ts, 56, 9))
 >b : Symbol(b, Decl(protectedMembers.ts, 66, 20))
->x : Symbol(A.x, Decl(protectedMembers.ts, 56, 9))
+>x : Symbol(x, Decl(protectedMembers.ts, 56, 9))
 
         c.x = 1;
->c.x : Symbol(A.x, Decl(protectedMembers.ts, 56, 9))
+>c.x : Symbol(x, Decl(protectedMembers.ts, 56, 9))
 >c : Symbol(c, Decl(protectedMembers.ts, 66, 26))
->x : Symbol(A.x, Decl(protectedMembers.ts, 56, 9))
+>x : Symbol(x, Decl(protectedMembers.ts, 56, 9))
 
         d.x = 1;
->d.x : Symbol(A.x, Decl(protectedMembers.ts, 56, 9))
+>d.x : Symbol(x, Decl(protectedMembers.ts, 56, 9))
 >d : Symbol(d, Decl(protectedMembers.ts, 66, 32))
->x : Symbol(A.x, Decl(protectedMembers.ts, 56, 9))
+>x : Symbol(x, Decl(protectedMembers.ts, 56, 9))
 
         e.x = 1;
->e.x : Symbol(A.x, Decl(protectedMembers.ts, 56, 9))
+>e.x : Symbol(x, Decl(protectedMembers.ts, 56, 9))
 >e : Symbol(e, Decl(protectedMembers.ts, 66, 38))
->x : Symbol(A.x, Decl(protectedMembers.ts, 56, 9))
+>x : Symbol(x, Decl(protectedMembers.ts, 56, 9))
     }
 }
 
@@= skipped -31, +31 lines =@@
 >C : Symbol(C, Decl(protectedMembers.ts, 62, 1))
 
     d;
->d : Symbol(D.d, Decl(protectedMembers.ts, 75, 19))
+>d : Symbol(d, Decl(protectedMembers.ts, 75, 19))
 }
 
 interface E extends C {
@@= skipped -8, +8 lines =@@
 >C : Symbol(C, Decl(protectedMembers.ts, 62, 1))
 
     e;
->e : Symbol(E.e, Decl(protectedMembers.ts, 79, 23))
+>e : Symbol(e, Decl(protectedMembers.ts, 79, 23))
 }
 
 class CC {
@@= skipped -14, +14 lines =@@
 >A1 : Symbol(A1, Decl(protectedMembers.ts, 86, 1))
 
     protected x;
->x : Symbol(A1.x, Decl(protectedMembers.ts, 88, 10))
+>x : Symbol(x, Decl(protectedMembers.ts, 88, 10))
 }
 class B1 {
 >B1 : Symbol(B1, Decl(protectedMembers.ts, 90, 1))
 
     x;
->x : Symbol(B1.x, Decl(protectedMembers.ts, 91, 10))
+>x : Symbol(x, Decl(protectedMembers.ts, 91, 10))
 }
 var a1: A1;
 >a1 : Symbol(a1, Decl(protectedMembers.ts, 94, 3))
@@= skipped -28, +28 lines =@@
 >A2 : Symbol(A2, Decl(protectedMembers.ts, 97, 8))
 
     protected x;
->x : Symbol(A2.x, Decl(protectedMembers.ts, 99, 10))
+>x : Symbol(x, Decl(protectedMembers.ts, 99, 10))
 }
 class B2 extends A2 {
 >B2 : Symbol(B2, Decl(protectedMembers.ts, 101, 1))
 >A2 : Symbol(A2, Decl(protectedMembers.ts, 97, 8))
 
     x;
->x : Symbol(B2.x, Decl(protectedMembers.ts, 102, 21))
+>x : Symbol(x, Decl(protectedMembers.ts, 102, 21))
 }
 
 class A3 {
 >A3 : Symbol(A3, Decl(protectedMembers.ts, 104, 1))
 
     x;
->x : Symbol(A3.x, Decl(protectedMembers.ts, 106, 10))
+>x : Symbol(x, Decl(protectedMembers.ts, 106, 10))
 }
 // Error x is protected in B3 but public in A3
 class B3 extends A3 {
@@= skipped -22, +22 lines =@@
 >A3 : Symbol(A3, Decl(protectedMembers.ts, 104, 1))
 
     protected x;
->x : Symbol(B3.x, Decl(protectedMembers.ts, 110, 21))
+>x : Symbol(x, Decl(protectedMembers.ts, 110, 21))
 }
 
 
