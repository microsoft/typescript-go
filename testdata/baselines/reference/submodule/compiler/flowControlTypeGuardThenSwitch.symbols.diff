--- old.flowControlTypeGuardThenSwitch.symbols
+++ new.flowControlTypeGuardThenSwitch.symbols
@@= skipped -4, +4 lines =@@
 >Kind : Symbol(Kind, Decl(flowControlTypeGuardThenSwitch.ts, 0, 0))
 
     A,
->A : Symbol(Kind.A, Decl(flowControlTypeGuardThenSwitch.ts, 0, 11))
+>A : Symbol(A, Decl(flowControlTypeGuardThenSwitch.ts, 0, 11))
 
     B,
->B : Symbol(Kind.B, Decl(flowControlTypeGuardThenSwitch.ts, 1, 6))
+>B : Symbol(B, Decl(flowControlTypeGuardThenSwitch.ts, 1, 6))
 }
 
 interface Base {
 >Base : Symbol(Base, Decl(flowControlTypeGuardThenSwitch.ts, 3, 1))
 
     kind: Kind;
->kind : Symbol(Base.kind, Decl(flowControlTypeGuardThenSwitch.ts, 5, 16))
+>kind : Symbol(kind, Decl(flowControlTypeGuardThenSwitch.ts, 5, 16))
 >Kind : Symbol(Kind, Decl(flowControlTypeGuardThenSwitch.ts, 0, 0))
 }
 
@@= skipped -19, +19 lines =@@
 >Base : Symbol(Base, Decl(flowControlTypeGuardThenSwitch.ts, 3, 1))
 
     kind: Kind.A;
->kind : Symbol(A.kind, Decl(flowControlTypeGuardThenSwitch.ts, 9, 26))
+>kind : Symbol(kind, Decl(flowControlTypeGuardThenSwitch.ts, 9, 26))
 >Kind : Symbol(Kind, Decl(flowControlTypeGuardThenSwitch.ts, 0, 0))
->A : Symbol(Kind.A, Decl(flowControlTypeGuardThenSwitch.ts, 0, 11))
+>A : Symbol(A, Decl(flowControlTypeGuardThenSwitch.ts, 0, 11))
 
     yar: any;
->yar : Symbol(A.yar, Decl(flowControlTypeGuardThenSwitch.ts, 10, 17))
+>yar : Symbol(yar, Decl(flowControlTypeGuardThenSwitch.ts, 10, 17))
 }
 
 interface B extends Base {
@@= skipped -13, +13 lines =@@
 >Base : Symbol(Base, Decl(flowControlTypeGuardThenSwitch.ts, 3, 1))
 
     kind: Kind.B;
->kind : Symbol(B.kind, Decl(flowControlTypeGuardThenSwitch.ts, 14, 26))
+>kind : Symbol(kind, Decl(flowControlTypeGuardThenSwitch.ts, 14, 26))
 >Kind : Symbol(Kind, Decl(flowControlTypeGuardThenSwitch.ts, 0, 0))
->B : Symbol(Kind.B, Decl(flowControlTypeGuardThenSwitch.ts, 1, 6))
+>B : Symbol(B, Decl(flowControlTypeGuardThenSwitch.ts, 1, 6))
 
     gar: any;
->gar : Symbol(B.gar, Decl(flowControlTypeGuardThenSwitch.ts, 15, 17))
+>gar : Symbol(gar, Decl(flowControlTypeGuardThenSwitch.ts, 15, 17))
 }
 
 type Both = A | B;
@@= skipped -38, +38 lines =@@
 >kind : Symbol(kind, Decl(flowControlTypeGuardThenSwitch.ts, 9, 26), Decl(flowControlTypeGuardThenSwitch.ts, 14, 26))
 
         case Kind.A:
->Kind.A : Symbol(Kind.A, Decl(flowControlTypeGuardThenSwitch.ts, 0, 11))
+>Kind.A : Symbol(A, Decl(flowControlTypeGuardThenSwitch.ts, 0, 11))
 >Kind : Symbol(Kind, Decl(flowControlTypeGuardThenSwitch.ts, 0, 0))
->A : Symbol(Kind.A, Decl(flowControlTypeGuardThenSwitch.ts, 0, 11))
+>A : Symbol(A, Decl(flowControlTypeGuardThenSwitch.ts, 0, 11))
 
             const myA: A = foo; // Should not be an error
 >myA : Symbol(myA, Decl(flowControlTypeGuardThenSwitch.ts, 28, 17))
@@= skipped -11, +11 lines =@@
 
             break;
         case Kind.B:
->Kind.B : Symbol(Kind.B, Decl(flowControlTypeGuardThenSwitch.ts, 1, 6))
+>Kind.B : Symbol(B, Decl(flowControlTypeGuardThenSwitch.ts, 1, 6))
 >Kind : Symbol(Kind, Decl(flowControlTypeGuardThenSwitch.ts, 0, 0))
->B : Symbol(Kind.B, Decl(flowControlTypeGuardThenSwitch.ts, 1, 6))
+>B : Symbol(B, Decl(flowControlTypeGuardThenSwitch.ts, 1, 6))
 
             const myB: B = foo;
 >myB : Symbol(myB, Decl(flowControlTypeGuardThenSwitch.ts, 31, 17))
