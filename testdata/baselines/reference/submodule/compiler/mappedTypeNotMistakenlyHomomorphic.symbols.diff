--- old.mappedTypeNotMistakenlyHomomorphic.symbols
+++ new.mappedTypeNotMistakenlyHomomorphic.symbols
@@= skipped -2, +2 lines =@@
 === mappedTypeNotMistakenlyHomomorphic.ts ===
 enum ABC { A, B }
 >ABC : Symbol(ABC, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 0))
->A : Symbol(ABC.A, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 10))
->B : Symbol(ABC.B, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 13))
+>A : Symbol(A, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 10))
+>B : Symbol(B, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 13))
 
 type Gen<T extends ABC> = { v: T; } & (
 >Gen : Symbol(Gen, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 17))
@@= skipped -13, +13 lines =@@
     v: ABC.A,
 >v : Symbol(v, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 3, 3))
 >ABC : Symbol(ABC, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 0))
->A : Symbol(ABC.A, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 10))
+>A : Symbol(A, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 10))
 
     a: string,
 >a : Symbol(a, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 4, 13))
@@= skipped -9, +9 lines =@@
     v: ABC.B,
 >v : Symbol(v, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 6, 7))
 >ABC : Symbol(ABC, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 0))
->B : Symbol(ABC.B, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 13))
+>B : Symbol(B, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 13))
 
     b: string,
 >b : Symbol(b, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 7, 13))
@@= skipped -30, +30 lines =@@
 >gen2TypeA : Symbol(gen2TypeA, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 23, 5))
 >Gen2 : Symbol(Gen2, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 10, 1))
 >ABC : Symbol(ABC, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 0))
->A : Symbol(ABC.A, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 10))
+>A : Symbol(A, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 10))
 >v : Symbol(v, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 23, 32))
 >a : Symbol(a, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 23, 46))
 
@@= skipped -8, +8 lines =@@
 >gen2TypeB : Symbol(gen2TypeB, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 24, 5))
 >Gen2 : Symbol(Gen2, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 10, 1))
 >ABC : Symbol(ABC, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 0))
->B : Symbol(ABC.B, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 13))
+>B : Symbol(B, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 13))
 >v : Symbol(v, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 24, 32))
 >b : Symbol(b, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 24, 46))
 
@@= skipped -9, +9 lines =@@
 >K : Symbol(K, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 24, 55))
 >Gen2 : Symbol(Gen2, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 10, 1))
 >ABC : Symbol(ABC, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 0))
->A : Symbol(ABC.A, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 10))
+>A : Symbol(A, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 10))
 
 // :(
 declare let a: Gen2<ABC.A>;
 >a : Symbol(a, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 30, 11))
 >Gen2 : Symbol(Gen2, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 10, 1))
 >ABC : Symbol(ABC, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 0))
->A : Symbol(ABC.A, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 10))
+>A : Symbol(A, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 10))
 
 declare let b: Gen2<ABC.B>;
 >b : Symbol(b, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 31, 11))
 >Gen2 : Symbol(Gen2, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 10, 1))
 >ABC : Symbol(ABC, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 0))
->B : Symbol(ABC.B, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 13))
+>B : Symbol(B, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 0, 13))
 
 a = b;
 >a : Symbol(a, Decl(mappedTypeNotMistakenlyHomomorphic.ts, 30, 11))
