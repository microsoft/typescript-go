--- old.declarationEmitUsingAlternativeContainingModules1.symbols
+++ new.declarationEmitUsingAlternativeContainingModules1.symbols
@@= skipped -117, +117 lines =@@
 
 > {
   retry?: RetryValue<TError>;
->retry : Symbol(QueryOptions.retry, Decl(useQuery-CPqkvEsh.d.ts, 40, 3))
+>retry : Symbol(retry, Decl(useQuery-CPqkvEsh.d.ts, 40, 3))
 >RetryValue : Symbol(RetryValue, Decl(useQuery-CPqkvEsh.d.ts, 13, 13))
 >TError : Symbol(TError, Decl(useQuery-CPqkvEsh.d.ts, 35, 25))
 
   queryFn?: QueryFunction<TQueryFnData, TQueryKey, TPageParam>;
->queryFn : Symbol(QueryOptions.queryFn, Decl(useQuery-CPqkvEsh.d.ts, 41, 29))
+>queryFn : Symbol(queryFn, Decl(useQuery-CPqkvEsh.d.ts, 41, 29))
 >QueryFunction : Symbol(QueryFunction, Decl(useQuery-CPqkvEsh.d.ts, 26, 6))
 >TQueryFnData : Symbol(TQueryFnData, Decl(useQuery-CPqkvEsh.d.ts, 34, 23))
 >TQueryKey : Symbol(TQueryKey, Decl(useQuery-CPqkvEsh.d.ts, 37, 23))
 >TPageParam : Symbol(TPageParam, Decl(useQuery-CPqkvEsh.d.ts, 38, 40))
 
   queryKey?: TQueryKey;
->queryKey : Symbol(QueryOptions.queryKey, Decl(useQuery-CPqkvEsh.d.ts, 42, 63))
+>queryKey : Symbol(queryKey, Decl(useQuery-CPqkvEsh.d.ts, 42, 63))
 >TQueryKey : Symbol(TQueryKey, Decl(useQuery-CPqkvEsh.d.ts, 37, 23))
 
   initialData?: TData;
->initialData : Symbol(QueryOptions.initialData, Decl(useQuery-CPqkvEsh.d.ts, 43, 23))
+>initialData : Symbol(initialData, Decl(useQuery-CPqkvEsh.d.ts, 43, 23))
 >TData : Symbol(TData, Decl(useQuery-CPqkvEsh.d.ts, 36, 24))
 
   initialDataUpdatedAt?: number | (() => number | undefined);
->initialDataUpdatedAt : Symbol(QueryOptions.initialDataUpdatedAt, Decl(useQuery-CPqkvEsh.d.ts, 44, 22))
+>initialDataUpdatedAt : Symbol(initialDataUpdatedAt, Decl(useQuery-CPqkvEsh.d.ts, 44, 22))
 }
 
 interface QueryObserverOptions<
@@= skipped -69, +69 lines =@@
 
   > {
   enabled?: boolean;
->enabled : Symbol(QueryObserverOptions.enabled, Decl(useQuery-CPqkvEsh.d.ts, 61, 5))
+>enabled : Symbol(enabled, Decl(useQuery-CPqkvEsh.d.ts, 61, 5))
 
   refetchInterval?: number;
->refetchInterval : Symbol(QueryObserverOptions.refetchInterval, Decl(useQuery-CPqkvEsh.d.ts, 62, 20))
+>refetchInterval : Symbol(refetchInterval, Decl(useQuery-CPqkvEsh.d.ts, 62, 20))
 
   select?: (data: TQueryData) => TData;
->select : Symbol(QueryObserverOptions.select, Decl(useQuery-CPqkvEsh.d.ts, 63, 27))
+>select : Symbol(select, Decl(useQuery-CPqkvEsh.d.ts, 63, 27))
 >data : Symbol(data, Decl(useQuery-CPqkvEsh.d.ts, 64, 12))
 >TQueryData : Symbol(TQueryData, Decl(useQuery-CPqkvEsh.d.ts, 51, 23))
 >TData : Symbol(TData, Decl(useQuery-CPqkvEsh.d.ts, 50, 24))
@@= skipped -117, +117 lines =@@
 >DefaultError : Symbol(DefaultError, Decl(useQuery-CPqkvEsh.d.ts, 2, 21))
 
   data: TData | undefined;
->data : Symbol(QueryObserverBaseResult.data, Decl(useQuery-CPqkvEsh.d.ts, 98, 75))
+>data : Symbol(data, Decl(useQuery-CPqkvEsh.d.ts, 98, 75))
 >TData : Symbol(TData, Decl(useQuery-CPqkvEsh.d.ts, 98, 34))
 
   dataUpdatedAt: number;
->dataUpdatedAt : Symbol(QueryObserverBaseResult.dataUpdatedAt, Decl(useQuery-CPqkvEsh.d.ts, 99, 26))
+>dataUpdatedAt : Symbol(dataUpdatedAt, Decl(useQuery-CPqkvEsh.d.ts, 99, 26))
 
   error: TError | null;
->error : Symbol(QueryObserverBaseResult.error, Decl(useQuery-CPqkvEsh.d.ts, 100, 24))
+>error : Symbol(error, Decl(useQuery-CPqkvEsh.d.ts, 100, 24))
 >TError : Symbol(TError, Decl(useQuery-CPqkvEsh.d.ts, 98, 50))
 
   errorUpdatedAt: number;
->errorUpdatedAt : Symbol(QueryObserverBaseResult.errorUpdatedAt, Decl(useQuery-CPqkvEsh.d.ts, 101, 23))
+>errorUpdatedAt : Symbol(errorUpdatedAt, Decl(useQuery-CPqkvEsh.d.ts, 101, 23))
 
   failureCount: number;
->failureCount : Symbol(QueryObserverBaseResult.failureCount, Decl(useQuery-CPqkvEsh.d.ts, 102, 25))
+>failureCount : Symbol(failureCount, Decl(useQuery-CPqkvEsh.d.ts, 102, 25))
 
   failureReason: TError | null;
->failureReason : Symbol(QueryObserverBaseResult.failureReason, Decl(useQuery-CPqkvEsh.d.ts, 103, 23))
+>failureReason : Symbol(failureReason, Decl(useQuery-CPqkvEsh.d.ts, 103, 23))
 >TError : Symbol(TError, Decl(useQuery-CPqkvEsh.d.ts, 98, 50))
 
   errorUpdateCount: number;
->errorUpdateCount : Symbol(QueryObserverBaseResult.errorUpdateCount, Decl(useQuery-CPqkvEsh.d.ts, 104, 31))
+>errorUpdateCount : Symbol(errorUpdateCount, Decl(useQuery-CPqkvEsh.d.ts, 104, 31))
 
   isError: boolean;
->isError : Symbol(QueryObserverBaseResult.isError, Decl(useQuery-CPqkvEsh.d.ts, 105, 27))
+>isError : Symbol(isError, Decl(useQuery-CPqkvEsh.d.ts, 105, 27))
 
   isFetched: boolean;
->isFetched : Symbol(QueryObserverBaseResult.isFetched, Decl(useQuery-CPqkvEsh.d.ts, 106, 19))
+>isFetched : Symbol(isFetched, Decl(useQuery-CPqkvEsh.d.ts, 106, 19))
 
   isFetchedAfterMount: boolean;
->isFetchedAfterMount : Symbol(QueryObserverBaseResult.isFetchedAfterMount, Decl(useQuery-CPqkvEsh.d.ts, 107, 21))
+>isFetchedAfterMount : Symbol(isFetchedAfterMount, Decl(useQuery-CPqkvEsh.d.ts, 107, 21))
 
   isFetching: boolean;
->isFetching : Symbol(QueryObserverBaseResult.isFetching, Decl(useQuery-CPqkvEsh.d.ts, 108, 31))
+>isFetching : Symbol(isFetching, Decl(useQuery-CPqkvEsh.d.ts, 108, 31))
 
   isLoading: boolean;
->isLoading : Symbol(QueryObserverBaseResult.isLoading, Decl(useQuery-CPqkvEsh.d.ts, 109, 22))
+>isLoading : Symbol(isLoading, Decl(useQuery-CPqkvEsh.d.ts, 109, 22))
 
   isPending: boolean;
->isPending : Symbol(QueryObserverBaseResult.isPending, Decl(useQuery-CPqkvEsh.d.ts, 110, 21))
+>isPending : Symbol(isPending, Decl(useQuery-CPqkvEsh.d.ts, 110, 21))
 
   isLoadingError: boolean;
->isLoadingError : Symbol(QueryObserverBaseResult.isLoadingError, Decl(useQuery-CPqkvEsh.d.ts, 111, 21))
+>isLoadingError : Symbol(isLoadingError, Decl(useQuery-CPqkvEsh.d.ts, 111, 21))
 
   isInitialLoading: boolean;
->isInitialLoading : Symbol(QueryObserverBaseResult.isInitialLoading, Decl(useQuery-CPqkvEsh.d.ts, 112, 26))
+>isInitialLoading : Symbol(isInitialLoading, Decl(useQuery-CPqkvEsh.d.ts, 112, 26))
 
   isPaused: boolean;
->isPaused : Symbol(QueryObserverBaseResult.isPaused, Decl(useQuery-CPqkvEsh.d.ts, 113, 28))
+>isPaused : Symbol(isPaused, Decl(useQuery-CPqkvEsh.d.ts, 113, 28))
 
   isPlaceholderData: boolean;
->isPlaceholderData : Symbol(QueryObserverBaseResult.isPlaceholderData, Decl(useQuery-CPqkvEsh.d.ts, 114, 20))
+>isPlaceholderData : Symbol(isPlaceholderData, Decl(useQuery-CPqkvEsh.d.ts, 114, 20))
 
   isRefetchError: boolean;
->isRefetchError : Symbol(QueryObserverBaseResult.isRefetchError, Decl(useQuery-CPqkvEsh.d.ts, 115, 29))
+>isRefetchError : Symbol(isRefetchError, Decl(useQuery-CPqkvEsh.d.ts, 115, 29))
 
   isRefetching: boolean;
->isRefetching : Symbol(QueryObserverBaseResult.isRefetching, Decl(useQuery-CPqkvEsh.d.ts, 116, 26))
+>isRefetching : Symbol(isRefetching, Decl(useQuery-CPqkvEsh.d.ts, 116, 26))
 
   isStale: boolean;
->isStale : Symbol(QueryObserverBaseResult.isStale, Decl(useQuery-CPqkvEsh.d.ts, 117, 24))
+>isStale : Symbol(isStale, Decl(useQuery-CPqkvEsh.d.ts, 117, 24))
 
   isSuccess: boolean;
->isSuccess : Symbol(QueryObserverBaseResult.isSuccess, Decl(useQuery-CPqkvEsh.d.ts, 118, 19))
+>isSuccess : Symbol(isSuccess, Decl(useQuery-CPqkvEsh.d.ts, 118, 19))
 }
 
 interface QueryObserverSuccessResult<TData = unknown, TError = DefaultError>
@@= skipped -78, +78 lines =@@
 >TError : Symbol(TError, Decl(useQuery-CPqkvEsh.d.ts, 122, 53))
 
   data: TData;
->data : Symbol(QueryObserverSuccessResult.data, Decl(useQuery-CPqkvEsh.d.ts, 123, 50))
+>data : Symbol(data, Decl(useQuery-CPqkvEsh.d.ts, 123, 50))
 >TData : Symbol(TData, Decl(useQuery-CPqkvEsh.d.ts, 122, 37))
 
   error: null;
->error : Symbol(QueryObserverSuccessResult.error, Decl(useQuery-CPqkvEsh.d.ts, 124, 14))
+>error : Symbol(error, Decl(useQuery-CPqkvEsh.d.ts, 124, 14))
 
   isError: false;
->isError : Symbol(QueryObserverSuccessResult.isError, Decl(useQuery-CPqkvEsh.d.ts, 125, 14))
+>isError : Symbol(isError, Decl(useQuery-CPqkvEsh.d.ts, 125, 14))
 
   isPending: false;
->isPending : Symbol(QueryObserverSuccessResult.isPending, Decl(useQuery-CPqkvEsh.d.ts, 126, 17))
+>isPending : Symbol(isPending, Decl(useQuery-CPqkvEsh.d.ts, 126, 17))
 
   isLoadingError: false;
->isLoadingError : Symbol(QueryObserverSuccessResult.isLoadingError, Decl(useQuery-CPqkvEsh.d.ts, 127, 19))
+>isLoadingError : Symbol(isLoadingError, Decl(useQuery-CPqkvEsh.d.ts, 127, 19))
 
   isRefetchError: false;
->isRefetchError : Symbol(QueryObserverSuccessResult.isRefetchError, Decl(useQuery-CPqkvEsh.d.ts, 128, 24))
+>isRefetchError : Symbol(isRefetchError, Decl(useQuery-CPqkvEsh.d.ts, 128, 24))
 
   isSuccess: true;
->isSuccess : Symbol(QueryObserverSuccessResult.isSuccess, Decl(useQuery-CPqkvEsh.d.ts, 129, 24))
+>isSuccess : Symbol(isSuccess, Decl(useQuery-CPqkvEsh.d.ts, 129, 24))
 
   status: "success";
->status : Symbol(QueryObserverSuccessResult.status, Decl(useQuery-CPqkvEsh.d.ts, 130, 18))
+>status : Symbol(status, Decl(useQuery-CPqkvEsh.d.ts, 130, 18))
 }
 
 type DefinedQueryObserverResult<
@@= skipped -168, +168 lines =@@
 >IEntry : Symbol(IEntry, Decl(index.mts, 2, 45))
 
   API: string
->API : Symbol(IEntry.API, Decl(index.mts, 4, 18))
+>API : Symbol(API, Decl(index.mts, 4, 18))
 
   Description: string
->Description : Symbol(IEntry.Description, Decl(index.mts, 5, 13))
+>Description : Symbol(Description, Decl(index.mts, 5, 13))
 
   Auth: string
->Auth : Symbol(IEntry.Auth, Decl(index.mts, 6, 21))
+>Auth : Symbol(Auth, Decl(index.mts, 6, 21))
 
   HTTPS: boolean
->HTTPS : Symbol(IEntry.HTTPS, Decl(index.mts, 7, 14))
+>HTTPS : Symbol(HTTPS, Decl(index.mts, 7, 14))
 
   Cors: string
->Cors : Symbol(IEntry.Cors, Decl(index.mts, 8, 16))
+>Cors : Symbol(Cors, Decl(index.mts, 8, 16))
 
   Link: string
->Link : Symbol(IEntry.Link, Decl(index.mts, 9, 14))
+>Link : Symbol(Link, Decl(index.mts, 9, 14))
 
   Category: string
->Category : Symbol(IEntry.Category, Decl(index.mts, 10, 14))
+>Category : Symbol(Category, Decl(index.mts, 10, 14))
 }
 
 const testApi = {
@@= skipped -30, +30 lines =@@
 >IEntry : Symbol(IEntry, Decl(index.mts, 2, 45))
 
     return fetch(baseUrl + 'entries')
->fetch(baseUrl + 'entries')      .then((res) => res.json())      .then((data) => data.entries)      .catch : Symbol(Promise.catch, Decl(lib.es5.d.ts, --, --))
->fetch(baseUrl + 'entries')      .then((res) => res.json())      .then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
->fetch(baseUrl + 'entries')      .then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
+>fetch(baseUrl + 'entries')      .then((res) => res.json())      .then((data) => data.entries)      .catch : Symbol(catch, Decl(lib.es5.d.ts, --, --))
+>fetch(baseUrl + 'entries')      .then((res) => res.json())      .then : Symbol(then, Decl(lib.es5.d.ts, --, --))
+>fetch(baseUrl + 'entries')      .then : Symbol(then, Decl(lib.es5.d.ts, --, --))
 >fetch : Symbol(fetch, Decl(lib.dom.d.ts, --, --))
 >baseUrl : Symbol(baseUrl, Decl(index.mts, 2, 5))
 
       .then((res) => res.json())
->then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
+>then : Symbol(then, Decl(lib.es5.d.ts, --, --))
 >res : Symbol(res, Decl(index.mts, 17, 13))
->res.json : Symbol(Body.json, Decl(lib.dom.d.ts, --, --))
+>res.json : Symbol(json, Decl(lib.dom.d.ts, --, --))
 >res : Symbol(res, Decl(index.mts, 17, 13))
->json : Symbol(Body.json, Decl(lib.dom.d.ts, --, --))
+>json : Symbol(json, Decl(lib.dom.d.ts, --, --))
 
       .then((data) => data.entries)
->then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
+>then : Symbol(then, Decl(lib.es5.d.ts, --, --))
 >data : Symbol(data, Decl(index.mts, 18, 13))
 >data : Symbol(data, Decl(index.mts, 18, 13))
 
       .catch((err) => console.log(err))
->catch : Symbol(Promise.catch, Decl(lib.es5.d.ts, --, --))
+>catch : Symbol(catch, Decl(lib.es5.d.ts, --, --))
 >err : Symbol(err, Decl(index.mts, 19, 14))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >err : Symbol(err, Decl(index.mts, 19, 14))
   }
 }
@@= skipped -64, +64 lines =@@
     select: (data) => data.slice(0, 10)
 >select : Symbol(select, Decl(index.mts, 31, 32))
 >data : Symbol(data, Decl(index.mts, 32, 13))
->data.slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
 >data : Symbol(data, Decl(index.mts, 32, 13))
->slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
 
   })
 }
