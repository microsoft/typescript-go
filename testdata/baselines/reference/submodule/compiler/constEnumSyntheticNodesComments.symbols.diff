--- old.constEnumSyntheticNodesComments.symbols
+++ new.constEnumSyntheticNodesComments.symbols
@@= skipped -2, +2 lines =@@
 === constEnumSyntheticNodesComments.ts ===
 const enum En { A, B, C, D }
 >En : Symbol(En, Decl(constEnumSyntheticNodesComments.ts, 0, 0))
->A : Symbol(En.A, Decl(constEnumSyntheticNodesComments.ts, 0, 15))
->B : Symbol(En.B, Decl(constEnumSyntheticNodesComments.ts, 0, 18))
->C : Symbol(En.C, Decl(constEnumSyntheticNodesComments.ts, 0, 21))
->D : Symbol(En.D, Decl(constEnumSyntheticNodesComments.ts, 0, 24))
+>A : Symbol(A, Decl(constEnumSyntheticNodesComments.ts, 0, 15))
+>B : Symbol(B, Decl(constEnumSyntheticNodesComments.ts, 0, 18))
+>C : Symbol(C, Decl(constEnumSyntheticNodesComments.ts, 0, 21))
+>D : Symbol(D, Decl(constEnumSyntheticNodesComments.ts, 0, 24))
 
 function assert<T>(x: T) {
 >assert : Symbol(assert, Decl(constEnumSyntheticNodesComments.ts, 0, 28))
@@= skipped -24, +24 lines =@@
 >a : Symbol(a, Decl(constEnumSyntheticNodesComments.ts, 6, 16))
 
         case En.A:
->En.A : Symbol(En.A, Decl(constEnumSyntheticNodesComments.ts, 0, 15))
+>En.A : Symbol(A, Decl(constEnumSyntheticNodesComments.ts, 0, 15))
 >En : Symbol(En, Decl(constEnumSyntheticNodesComments.ts, 0, 0))
->A : Symbol(En.A, Decl(constEnumSyntheticNodesComments.ts, 0, 15))
+>A : Symbol(A, Decl(constEnumSyntheticNodesComments.ts, 0, 15))
 
             return assert<0>(a);
 >assert : Symbol(assert, Decl(constEnumSyntheticNodesComments.ts, 0, 28))
@@= skipped -10, +10 lines =@@
 
         case En["B"]:
 >En : Symbol(En, Decl(constEnumSyntheticNodesComments.ts, 0, 0))
->"B" : Symbol(En.B, Decl(constEnumSyntheticNodesComments.ts, 0, 18))
+>"B" : Symbol(B, Decl(constEnumSyntheticNodesComments.ts, 0, 18))
 
             return assert<1>(a);
 >assert : Symbol(assert, Decl(constEnumSyntheticNodesComments.ts, 0, 28))
@@= skipped -8, +8 lines =@@
 
         case En[`C`]:
 >En : Symbol(En, Decl(constEnumSyntheticNodesComments.ts, 0, 0))
->`C` : Symbol(En.C, Decl(constEnumSyntheticNodesComments.ts, 0, 21))
+>`C` : Symbol(C, Decl(constEnumSyntheticNodesComments.ts, 0, 21))
 
             return assert<2>(a);
 >assert : Symbol(assert, Decl(constEnumSyntheticNodesComments.ts, 0, 28))
@@= skipped -8, +8 lines =@@
 
         case En["\u{44}"]:
 >En : Symbol(En, Decl(constEnumSyntheticNodesComments.ts, 0, 0))
->"\u{44}" : Symbol(En.D, Decl(constEnumSyntheticNodesComments.ts, 0, 24))
+>"\u{44}" : Symbol(D, Decl(constEnumSyntheticNodesComments.ts, 0, 24))
 
             return assert<3>(a);
 >assert : Symbol(assert, Decl(constEnumSyntheticNodesComments.ts, 0, 28))
