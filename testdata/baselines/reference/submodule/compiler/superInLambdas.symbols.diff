--- old.superInLambdas.symbols
+++ new.superInLambdas.symbols
@@= skipped -4, +4 lines =@@
 >User : Symbol(User, Decl(superInLambdas.ts, 0, 0))
 
     name: string = "Bob";
->name : Symbol(User.name, Decl(superInLambdas.ts, 0, 12))
+>name : Symbol(name, Decl(superInLambdas.ts, 0, 12))
 
     sayHello(): void {
->sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
 
         //console.log("Hello, " + this.name);
     }
@@= skipped -14, +14 lines =@@
 >User : Symbol(User, Decl(superInLambdas.ts, 0, 0))
 
     name: string = "Frank";
->name : Symbol(RegisteredUser.name, Decl(superInLambdas.ts, 7, 35))
+>name : Symbol(name, Decl(superInLambdas.ts, 7, 35))
 
     constructor() {
         super();
@@= skipped -8, +8 lines =@@
 
         // super call in a constructor
         super.sayHello();
->super.sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>super.sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
 >super : Symbol(User, Decl(superInLambdas.ts, 0, 0))
->sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
 
         // super call in a lambda in a constructor 
         var x = () => super.sayHello();
 >x : Symbol(x, Decl(superInLambdas.ts, 16, 11))
->super.sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>super.sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
 >super : Symbol(User, Decl(superInLambdas.ts, 0, 0))
->sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
     }
     sayHello(): void {
->sayHello : Symbol(RegisteredUser.sayHello, Decl(superInLambdas.ts, 17, 5))
+>sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 17, 5))
 
         // super call in a method
         super.sayHello();
->super.sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>super.sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
 >super : Symbol(User, Decl(superInLambdas.ts, 0, 0))
->sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
 
         // super call in a lambda in a method
        var x = () => super.sayHello();
 >x : Symbol(x, Decl(superInLambdas.ts, 23, 10))
->super.sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>super.sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
 >super : Symbol(User, Decl(superInLambdas.ts, 0, 0))
->sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
     }
 }
 class RegisteredUser2 extends User {
@@= skipped -33, +33 lines =@@
 >User : Symbol(User, Decl(superInLambdas.ts, 0, 0))
 
     name: string = "Joe";
->name : Symbol(RegisteredUser2.name, Decl(superInLambdas.ts, 26, 36))
+>name : Symbol(name, Decl(superInLambdas.ts, 26, 36))
 
     constructor() {
         super();
@@= skipped -9, +9 lines =@@
         // super call in a nested lambda in a constructor 
         var x = () => () => () => super.sayHello();
 >x : Symbol(x, Decl(superInLambdas.ts, 32, 11))
->super.sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>super.sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
 >super : Symbol(User, Decl(superInLambdas.ts, 0, 0))
->sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
     }
     sayHello(): void {
->sayHello : Symbol(RegisteredUser2.sayHello, Decl(superInLambdas.ts, 33, 5))
+>sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 33, 5))
 
         // super call in a nested lambda in a method
         var x = () => () => () => super.sayHello();
 >x : Symbol(x, Decl(superInLambdas.ts, 36, 11))
->super.sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>super.sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
 >super : Symbol(User, Decl(superInLambdas.ts, 0, 0))
->sayHello : Symbol(User.sayHello, Decl(superInLambdas.ts, 1, 25))
+>sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 1, 25))
     }
 }
 
@@= skipped -21, +21 lines =@@
 >User : Symbol(User, Decl(superInLambdas.ts, 0, 0))
 
     name: string = "Sam";
->name : Symbol(RegisteredUser3.name, Decl(superInLambdas.ts, 40, 36))
+>name : Symbol(name, Decl(superInLambdas.ts, 40, 36))
 
     constructor() {
         super();
@@= skipped -9, +9 lines =@@
         // super property in a nested lambda in a constructor 
         var superName = () => () => () => super.name;
 >superName : Symbol(superName, Decl(superInLambdas.ts, 46, 11))
->super.name : Symbol(User.name, Decl(superInLambdas.ts, 0, 12))
+>super.name : Symbol(name, Decl(superInLambdas.ts, 0, 12))
 >super : Symbol(User, Decl(superInLambdas.ts, 0, 0))
->name : Symbol(User.name, Decl(superInLambdas.ts, 0, 12))
+>name : Symbol(name, Decl(superInLambdas.ts, 0, 12))
     }
     sayHello(): void {
->sayHello : Symbol(RegisteredUser3.sayHello, Decl(superInLambdas.ts, 47, 5))
+>sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 47, 5))
 
         // super property in a nested lambda in a method
         var superName = () => () => () => super.name;
 >superName : Symbol(superName, Decl(superInLambdas.ts, 50, 11))
->super.name : Symbol(User.name, Decl(superInLambdas.ts, 0, 12))
+>super.name : Symbol(name, Decl(superInLambdas.ts, 0, 12))
 >super : Symbol(User, Decl(superInLambdas.ts, 0, 0))
->name : Symbol(User.name, Decl(superInLambdas.ts, 0, 12))
+>name : Symbol(name, Decl(superInLambdas.ts, 0, 12))
     }
 }
 
@@= skipped -21, +21 lines =@@
 >User : Symbol(User, Decl(superInLambdas.ts, 0, 0))
 
     name: string = "Mark";
->name : Symbol(RegisteredUser4.name, Decl(superInLambdas.ts, 54, 36))
+>name : Symbol(name, Decl(superInLambdas.ts, 54, 36))
 
     constructor() {
         super();
@@= skipped -12, +12 lines =@@
 >super : Symbol(User, Decl(superInLambdas.ts, 0, 0))
     }
     sayHello(): void {
->sayHello : Symbol(RegisteredUser4.sayHello, Decl(superInLambdas.ts, 61, 5))
+>sayHello : Symbol(sayHello, Decl(superInLambdas.ts, 61, 5))
 
         // super in a nested lambda in a method
         var x = () => () => super;
