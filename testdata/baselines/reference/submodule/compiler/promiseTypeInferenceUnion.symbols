//// [tests/cases/compiler/promiseTypeInferenceUnion.ts] ////

=== promiseTypeInferenceUnion.ts ===
function f1(x: number): number | Promise<number> {
>f1 : Symbol(f1, Decl(promiseTypeInferenceUnion.ts, 0, 0))
>x : Symbol(x, Decl(promiseTypeInferenceUnion.ts, 0, 12))
>Promise : Symbol(Promise)

  return Promise.resolve(x);
>x : Symbol(x, Decl(promiseTypeInferenceUnion.ts, 0, 12))
}

function f2(x: number): number | PromiseLike<number> {
>f2 : Symbol(f2, Decl(promiseTypeInferenceUnion.ts, 2, 1))
>x : Symbol(x, Decl(promiseTypeInferenceUnion.ts, 4, 12))
>PromiseLike : Symbol(PromiseLike)

  return Promise.resolve(x);
>x : Symbol(x, Decl(promiseTypeInferenceUnion.ts, 4, 12))
}

function f3(x: number): number | Promise<number> | PromiseLike<number> {
>f3 : Symbol(f3, Decl(promiseTypeInferenceUnion.ts, 6, 1))
>x : Symbol(x, Decl(promiseTypeInferenceUnion.ts, 8, 12))
>Promise : Symbol(Promise)
>PromiseLike : Symbol(PromiseLike)

  return Promise.resolve(x);
>x : Symbol(x, Decl(promiseTypeInferenceUnion.ts, 8, 12))
}

const g1: Promise<number> = Promise.resolve(f1(42));
>g1 : Symbol(g1, Decl(promiseTypeInferenceUnion.ts, 12, 5))
>Promise : Symbol(Promise)
>f1 : Symbol(f1, Decl(promiseTypeInferenceUnion.ts, 0, 0))

const g2: Promise<number> = Promise.resolve(f2(42));
>g2 : Symbol(g2, Decl(promiseTypeInferenceUnion.ts, 13, 5))
>Promise : Symbol(Promise)
>f2 : Symbol(f2, Decl(promiseTypeInferenceUnion.ts, 2, 1))

const g3: Promise<number> = Promise.resolve(f3(42));
>g3 : Symbol(g3, Decl(promiseTypeInferenceUnion.ts, 14, 5))
>Promise : Symbol(Promise)
>f3 : Symbol(f3, Decl(promiseTypeInferenceUnion.ts, 6, 1))

