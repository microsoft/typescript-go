--- old.noCircularitySelfReferentialGetter2.types
+++ new.noCircularitySelfReferentialGetter2.types
@@= skipped -2, +2 lines =@@
 === noCircularitySelfReferentialGetter2.ts ===
 interface ZodType {
   optional: "true" | "false";
->optional : "true" | "false"
+>optional : "false" | "true"

   output: any;
 >output : any
@@= skipped -21, +21 lines =@@
 >Prettify : { [K in keyof T]: T[K]; }

 type InferObjectType<Shape extends ZodShape> = Prettify<
->InferObjectType : { [k in keyof Shape as Shape[k] extends { optional: "true"; } ? k : never]?: Shape[k]["output"] | undefined; } & { [k_1 in keyof Shape as Shape[k_1] extends { optional: "true"; } ? never : k_1]: Shape[k_1]["output"]; } extends infer T ? { [K in keyof T]: T[K]; } : never
+>InferObjectType : { [k in keyof Shape as Shape[k] extends { optional: "true"; } ? k : never]?: Shape[k]["output"] | undefined; } & { [k in keyof Shape as Shape[k] extends { optional: "true"; } ? never : k]: Shape[k]["output"]; } extends infer T ? { [K in keyof T]: T[K]; } : never
   {
     [k in keyof Shape as Shape[k] extends { optional: "true" }
 >optional : "true"
@@= skipped -20, +20 lines =@@
 >optional : "false"

   output: InferObjectType<T>;
->output : { [k in keyof T as T[k] extends { optional: "true"; } ? k : never]?: T[k]["output"] | undefined; } & { [k_1 in keyof T as T[k_1] extends { optional: "true"; } ? never : k_1]: T[k_1]["output"]; } extends infer T_1 ? { [K in keyof T_1]: T_1[K]; } : never
+>output : { [k in keyof T as T[k] extends { optional: "true"; } ? k : never]?: T[k]["output"] | undefined; } & { [k in keyof T as T[k] extends { optional: "true"; } ? never : k]: T[k]["output"]; } extends infer T_1 ? { [K in keyof T_1]: T_1[K]; } : never
 }

 interface ZodOptional<T extends ZodType> extends ZodType {
@@= skipped -47, +47 lines =@@
 export const name = Category.output.parent?.parent?.parent?.parent?.name;
 >name : string | undefined
 >Category.output.parent?.parent?.parent?.parent?.name : string | undefined
->Category.output.parent?.parent?.parent?.parent : { readonly parent?: any | undefined; name: string; } | undefined
->Category.output.parent?.parent?.parent : { readonly parent?: any | undefined; name: string; } | undefined
->Category.output.parent?.parent : { readonly parent?: any | undefined; name: string; } | undefined
->Category.output.parent : { readonly parent?: any | undefined; name: string; } | undefined
->Category.output : { readonly parent?: any | undefined; name: string; }
+>Category.output.parent?.parent?.parent?.parent : { name: string; readonly parent?: any | undefined; } | undefined
+>Category.output.parent?.parent?.parent : { name: string; readonly parent?: any | undefined; } | undefined
+>Category.output.parent?.parent : { name: string; readonly parent?: any | undefined; } | undefined
+>Category.output.parent : { name: string; readonly parent?: any | undefined; } | undefined
+>Category.output : { name: string; readonly parent?: any | undefined; }
 >Category : ZodObject<{ name: ZodString; readonly parent: ZodOptional<ZodObject<any>>; }>
->output : { readonly parent?: any | undefined; name: string; }
->parent : { readonly parent?: any | undefined; name: string; } | undefined
->parent : { readonly parent?: any | undefined; name: string; } | undefined
->parent : { readonly parent?: any | undefined; name: string; } | undefined
->parent : { readonly parent?: any | undefined; name: string; } | undefined
+>output : { name: string; readonly parent?: any | undefined; }
+>parent : { name: string; readonly parent?: any | undefined; } | undefined
+>parent : { name: string; readonly parent?: any | undefined; } | undefined
+>parent : { name: string; readonly parent?: any | undefined; } | undefined
+>parent : { name: string; readonly parent?: any | undefined; } | undefined
 >name : string | undefined
