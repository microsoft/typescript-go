--- old.multipleInheritance.symbols
+++ new.multipleInheritance.symbols
@@= skipped -4, +4 lines =@@
 >B1 : Symbol(B1, Decl(multipleInheritance.ts, 0, 0))
 
     public x;
->x : Symbol(B1.x, Decl(multipleInheritance.ts, 0, 10))
+>x : Symbol(x, Decl(multipleInheritance.ts, 0, 10))
 }
 
 class B2 {
 >B2 : Symbol(B2, Decl(multipleInheritance.ts, 2, 1))
 
     public x;
->x : Symbol(B2.x, Decl(multipleInheritance.ts, 4, 10))
+>x : Symbol(x, Decl(multipleInheritance.ts, 4, 10))
 }
 
 class C extends B1, B2 { // duplicate member
@@= skipped -36, +36 lines =@@
 >N : Symbol(N, Decl(multipleInheritance.ts, 18, 1))
 
     public y:number;
->y : Symbol(N.y, Decl(multipleInheritance.ts, 20, 9))
+>y : Symbol(y, Decl(multipleInheritance.ts, 20, 9))
 }
 
 class ND extends N { // any is assignable to number
@@= skipped -8, +8 lines =@@
 >N : Symbol(N, Decl(multipleInheritance.ts, 18, 1))
 
     public y;
->y : Symbol(ND.y, Decl(multipleInheritance.ts, 24, 20))
+>y : Symbol(y, Decl(multipleInheritance.ts, 24, 20))
 }
 
 class Good {
 >Good : Symbol(Good, Decl(multipleInheritance.ts, 26, 1))
 
     public f:() => number = function() { return 0; }
->f : Symbol(Good.f, Decl(multipleInheritance.ts, 28, 12))
+>f : Symbol(f, Decl(multipleInheritance.ts, 28, 12))
 
     public g() { return 0; }
->g : Symbol(Good.g, Decl(multipleInheritance.ts, 29, 52))
+>g : Symbol(g, Decl(multipleInheritance.ts, 29, 52))
 }
 
 class Baad extends Good {
@@= skipped -18, +18 lines =@@
 >Good : Symbol(Good, Decl(multipleInheritance.ts, 26, 1))
 
     public f(): number { return 0; }
->f : Symbol(Baad.f, Decl(multipleInheritance.ts, 33, 25))
+>f : Symbol(f, Decl(multipleInheritance.ts, 33, 25))
 
     public g(n:number) { return 0; }
->g : Symbol(Baad.g, Decl(multipleInheritance.ts, 34, 36))
+>g : Symbol(g, Decl(multipleInheritance.ts, 34, 36))
 >n : Symbol(n, Decl(multipleInheritance.ts, 35, 13))
 }
 
