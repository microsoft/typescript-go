--- old.intersectionTypeNormalization.symbols
+++ new.intersectionTypeNormalization.symbols
@@= skipped -2, +2 lines =@@
 === intersectionTypeNormalization.ts ===
 interface A { a: string }
 >A : Symbol(A, Decl(intersectionTypeNormalization.ts, 0, 0))
->a : Symbol(A.a, Decl(intersectionTypeNormalization.ts, 0, 13))
+>a : Symbol(a, Decl(intersectionTypeNormalization.ts, 0, 13))
 
 interface B { b: string }
 >B : Symbol(B, Decl(intersectionTypeNormalization.ts, 0, 25))
->b : Symbol(B.b, Decl(intersectionTypeNormalization.ts, 1, 13))
+>b : Symbol(b, Decl(intersectionTypeNormalization.ts, 1, 13))
 
 interface C { c: string }
 >C : Symbol(C, Decl(intersectionTypeNormalization.ts, 1, 25))
->c : Symbol(C.c, Decl(intersectionTypeNormalization.ts, 2, 13))
+>c : Symbol(c, Decl(intersectionTypeNormalization.ts, 2, 13))
 
 interface D { d: string }
 >D : Symbol(D, Decl(intersectionTypeNormalization.ts, 2, 25))
->d : Symbol(D.d, Decl(intersectionTypeNormalization.ts, 3, 13))
+>d : Symbol(d, Decl(intersectionTypeNormalization.ts, 3, 13))
 
 // Identical ways of writing the same type
 type X1 = (A | B) & (C | D);
@@= skipped -56, +56 lines =@@
 
 interface X { x: string }
 >X : Symbol(X, Decl(intersectionTypeNormalization.ts, 12, 10))
->x : Symbol(X.x, Decl(intersectionTypeNormalization.ts, 14, 13))
+>x : Symbol(x, Decl(intersectionTypeNormalization.ts, 14, 13))
 
 interface Y { y: string }
 >Y : Symbol(Y, Decl(intersectionTypeNormalization.ts, 14, 25))
->y : Symbol(Y.y, Decl(intersectionTypeNormalization.ts, 15, 13))
+>y : Symbol(y, Decl(intersectionTypeNormalization.ts, 15, 13))
 
 // Identical ways of writing the same type
 type Y1 = (A | X & Y) & (C | D);
@@= skipped -52, +52 lines =@@
 
 interface M { m: string }
 >M : Symbol(M, Decl(intersectionTypeNormalization.ts, 24, 10))
->m : Symbol(M.m, Decl(intersectionTypeNormalization.ts, 26, 13))
+>m : Symbol(m, Decl(intersectionTypeNormalization.ts, 26, 13))
 
 interface N { n: string }
 >N : Symbol(N, Decl(intersectionTypeNormalization.ts, 26, 25))
->n : Symbol(N.n, Decl(intersectionTypeNormalization.ts, 27, 13))
+>n : Symbol(n, Decl(intersectionTypeNormalization.ts, 27, 13))
 
 // Identical ways of writing the same type
 type Z1 = (A | X & (M | N)) & (C | D);
@@= skipped -141, +141 lines =@@
 >A : Symbol(A, Decl(intersectionTypeNormalization.ts, 63, 17))
 
         a1,
->a1 : Symbol(A.a1, Decl(intersectionTypeNormalization.ts, 64, 25))
+>a1 : Symbol(a1, Decl(intersectionTypeNormalization.ts, 64, 25))
 
         a2,
->a2 : Symbol(A.a2, Decl(intersectionTypeNormalization.ts, 65, 11))
+>a2 : Symbol(a2, Decl(intersectionTypeNormalization.ts, 65, 11))
 
         a3,
->a3 : Symbol(A.a3, Decl(intersectionTypeNormalization.ts, 66, 11))
+>a3 : Symbol(a3, Decl(intersectionTypeNormalization.ts, 66, 11))
 
        // ... elements omitted for the sake of clarity
         a75,
->a75 : Symbol(A.a75, Decl(intersectionTypeNormalization.ts, 67, 11))
+>a75 : Symbol(a75, Decl(intersectionTypeNormalization.ts, 67, 11))
 
         a76,
->a76 : Symbol(A.a76, Decl(intersectionTypeNormalization.ts, 69, 12))
+>a76 : Symbol(a76, Decl(intersectionTypeNormalization.ts, 69, 12))
 
         a77,
->a77 : Symbol(A.a77, Decl(intersectionTypeNormalization.ts, 70, 12))
+>a77 : Symbol(a77, Decl(intersectionTypeNormalization.ts, 70, 12))
     }
     export const enum B {
 >B : Symbol(B, Decl(intersectionTypeNormalization.ts, 72, 5))
 
         b1,
->b1 : Symbol(B.b1, Decl(intersectionTypeNormalization.ts, 73, 25))
+>b1 : Symbol(b1, Decl(intersectionTypeNormalization.ts, 73, 25))
 
         b2,
->b2 : Symbol(B.b2, Decl(intersectionTypeNormalization.ts, 74, 11))
+>b2 : Symbol(b2, Decl(intersectionTypeNormalization.ts, 74, 11))
 
        // ... elements omitted for the sake of clarity
         b86,
->b86 : Symbol(B.b86, Decl(intersectionTypeNormalization.ts, 75, 11))
+>b86 : Symbol(b86, Decl(intersectionTypeNormalization.ts, 75, 11))
 
         b87,
->b87 : Symbol(B.b87, Decl(intersectionTypeNormalization.ts, 77, 12))
+>b87 : Symbol(b87, Decl(intersectionTypeNormalization.ts, 77, 12))
     }
     export const enum C {
 >C : Symbol(C, Decl(intersectionTypeNormalization.ts, 79, 5))
 
         c1,
->c1 : Symbol(C.c1, Decl(intersectionTypeNormalization.ts, 80, 25))
+>c1 : Symbol(c1, Decl(intersectionTypeNormalization.ts, 80, 25))
 
         c2,
->c2 : Symbol(C.c2, Decl(intersectionTypeNormalization.ts, 81, 11))
+>c2 : Symbol(c2, Decl(intersectionTypeNormalization.ts, 81, 11))
 
        // ... elements omitted for the sake of clarity
         c210,
->c210 : Symbol(C.c210, Decl(intersectionTypeNormalization.ts, 82, 11))
+>c210 : Symbol(c210, Decl(intersectionTypeNormalization.ts, 82, 11))
 
         c211,
->c211 : Symbol(C.c211, Decl(intersectionTypeNormalization.ts, 84, 13))
+>c211 : Symbol(c211, Decl(intersectionTypeNormalization.ts, 84, 13))
     }
     export type Genre = A | B | C;
 >Genre : Symbol(Genre, Decl(intersectionTypeNormalization.ts, 86, 5))
@@= skipped -63, +63 lines =@@
     genreId: enums.Genre;
 >genreId : Symbol(genreId, Decl(intersectionTypeNormalization.ts, 90, 12))
 >enums : Symbol(enums, Decl(intersectionTypeNormalization.ts, 59, 1))
->Genre : Symbol(enums.Genre, Decl(intersectionTypeNormalization.ts, 86, 5))
+>Genre : Symbol(Genre, Decl(intersectionTypeNormalization.ts, 86, 5))
 
 };
 
@@= skipped -10, +10 lines =@@
     genreId: enums.Genre;
 >genreId : Symbol(genreId, Decl(intersectionTypeNormalization.ts, 94, 12))
 >enums : Symbol(enums, Decl(intersectionTypeNormalization.ts, 59, 1))
->Genre : Symbol(enums.Genre, Decl(intersectionTypeNormalization.ts, 86, 5))
+>Genre : Symbol(Genre, Decl(intersectionTypeNormalization.ts, 86, 5))
 
 };
 
