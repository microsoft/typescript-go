--- old.thisInFunctionCall.symbols
+++ new.thisInFunctionCall.symbols
@@= skipped -4, +4 lines =@@
 >Test : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
 
   data: number[]
->data : Symbol(Test.data, Decl(thisInFunctionCall.ts, 0, 12))
+>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
 
   constructor() {
     this.data = [1, 2, 3]
->this.data : Symbol(Test.data, Decl(thisInFunctionCall.ts, 0, 12))
+>this.data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
 >this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
->data : Symbol(Test.data, Decl(thisInFunctionCall.ts, 0, 12))
+>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
   }
 
   finderRaw() {
->finderRaw : Symbol(Test.finderRaw, Decl(thisInFunctionCall.ts, 5, 3))
+>finderRaw : Symbol(finderRaw, Decl(thisInFunctionCall.ts, 5, 3))
 
     this.data.find(function (d) {
->this.data.find : Symbol(Array.find, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --))
->this.data : Symbol(Test.data, Decl(thisInFunctionCall.ts, 0, 12))
+>this.data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
 >this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
->data : Symbol(Test.data, Decl(thisInFunctionCall.ts, 0, 12))
->find : Symbol(Array.find, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --))
+>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
 >d : Symbol(d, Decl(thisInFunctionCall.ts, 8, 29))
 
       return d === this.data.length
@@= skipped -27, +25 lines =@@
   }
 
   forEacherRaw() {
->forEacherRaw : Symbol(Test.forEacherRaw, Decl(thisInFunctionCall.ts, 11, 3))
+>forEacherRaw : Symbol(forEacherRaw, Decl(thisInFunctionCall.ts, 11, 3))
 
     this.data.forEach(function (d) {
->this.data.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
->this.data : Symbol(Test.data, Decl(thisInFunctionCall.ts, 0, 12))
+>this.data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
 >this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
->data : Symbol(Test.data, Decl(thisInFunctionCall.ts, 0, 12))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
 >d : Symbol(d, Decl(thisInFunctionCall.ts, 14, 32))
 
       console.log(d === this.data.length)
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
 >d : Symbol(d, Decl(thisInFunctionCall.ts, 14, 32))
 
     })
   }
 
   forEacher() {
->forEacher : Symbol(Test.forEacher, Decl(thisInFunctionCall.ts, 17, 3))
+>forEacher : Symbol(forEacher, Decl(thisInFunctionCall.ts, 17, 3))
 
     this.data.forEach(
->this.data.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
->this.data : Symbol(Test.data, Decl(thisInFunctionCall.ts, 0, 12))
+>this.data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
 >this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
->data : Symbol(Test.data, Decl(thisInFunctionCall.ts, 0, 12))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
 
     /** @this {Test} */
     function (d) {
 >d : Symbol(d, Decl(thisInFunctionCall.ts, 22, 14))
 
       console.log(d === this.data.length)
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
->console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
 >d : Symbol(d, Decl(thisInFunctionCall.ts, 22, 14))
 
     }, this)
@@= skipped -44, +34 lines =@@
   }
 
   finder() {
->finder : Symbol(Test.finder, Decl(thisInFunctionCall.ts, 25, 3))
+>finder : Symbol(finder, Decl(thisInFunctionCall.ts, 25, 3))
 
     this.data.find(
->this.data.find : Symbol(Array.find, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --))
->this.data : Symbol(Test.data, Decl(thisInFunctionCall.ts, 0, 12))
+>this.data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
 >this : Symbol(Test, Decl(thisInFunctionCall.ts, 0, 0))
->data : Symbol(Test.data, Decl(thisInFunctionCall.ts, 0, 12))
->find : Symbol(Array.find, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --))
+>data : Symbol(data, Decl(thisInFunctionCall.ts, 0, 12))
 
     /** @this {Test} */
     function (d) {
