//// [tests/cases/compiler/coAndContraVariantInferences6.ts] ////

=== coAndContraVariantInferences6.ts ===
// https://github.com/microsoft/TypeScript/issues/57911

interface ExactProps {
>ExactProps : ExactProps

  value: "A" | "B";
>value : "A" | "B"
}
interface FunctionComponent<P = {}> {
>FunctionComponent : FunctionComponent<P>
>P : P

  (props: P): ReactElement<any> | null;
>props : P
}
declare class Component<P> {
>Component : Component<P>
>P : P

  constructor(props: P);
>props : P
}
interface ComponentClass<P = {}> {
>ComponentClass : ComponentClass<P>
>P : P

  new (props: P): Component<P>;
>props : P
}

interface ReactElement<
>ReactElement : ReactElement<T>

  T extends string | JSXElementConstructor<any> =
>T : T

    | string
    | JSXElementConstructor<any>,
> {
  type: T;
>type : T
}

type JSXElementConstructor<P> =
>JSXElementConstructor : JSXElementConstructor<P>
>P : P

  | ((props: P) => ReactElement<any> | null)
>props : P

  | (new (props: P) => Component<any>);
>props : P

declare function createElementIsolated<P extends {}>(
>createElementIsolated : <P extends {}>(type: string | ComponentClass<P> | FunctionComponent<P>, props?: P | null | undefined) => void
>P : P

  type: FunctionComponent<P> | ComponentClass<P> | string,
>type : string | ComponentClass<P> | FunctionComponent<P>

  props?: P | null,
>props : P | null | undefined

): void;

declare let WrapperIsolated: JSXElementConstructor<ExactProps>;
>WrapperIsolated : JSXElementConstructor<ExactProps>

createElementIsolated(WrapperIsolated, { value: "C" });
>createElementIsolated(WrapperIsolated, { value: "C" }) : void
>createElementIsolated : <P extends {}>(type: string | ComponentClass<P> | FunctionComponent<P>, props?: P | null | undefined) => void
>WrapperIsolated : JSXElementConstructor<ExactProps>
>{ value: "C" } : { value: "C"; }
>value : "C"
>"C" : "C"

declare const props: any[];
>props : any[]

declare const stat: any;
>stat : any

[].push.apply(props, stat.properties);
>[].push.apply(props, stat.properties) : number
>[].push.apply : { <T, R>(thisArg: T): R; <T, A extends any[], R>(thisArg: T, args: A): R; }
>[].push : (...items: never[]) => number
>[] : never[]
>push : (...items: never[]) => number
>apply : { <T, R>(thisArg: T): R; <T, A extends any[], R>(thisArg: T, args: A): R; }
>props : any[]
>stat.properties : any
>stat : any
>properties : any

