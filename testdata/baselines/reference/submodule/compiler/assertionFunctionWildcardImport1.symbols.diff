--- old.assertionFunctionWildcardImport1.symbols
+++ new.assertionFunctionWildcardImport1.symbols
@@= skipped -21, +21 lines =@@
 >Debug : Symbol(Debug, Decl(foo.ts, 1, 8))
 
 ts.Debug.assert(true);
->ts.Debug.assert : Symbol(ts.Debug.assert, Decl(debug.ts, 0, 0))
->ts.Debug : Symbol(ts.Debug, Decl(ts.ts, 1, 8))
+>ts.Debug.assert : Symbol(assert, Decl(debug.ts, 0, 0))
+>ts.Debug : Symbol(Debug, Decl(ts.ts, 1, 8))
 >ts : Symbol(ts, Decl(foo.ts, 0, 6))
->Debug : Symbol(ts.Debug, Decl(ts.ts, 1, 8))
->assert : Symbol(ts.Debug.assert, Decl(debug.ts, 0, 0))
+>Debug : Symbol(Debug, Decl(ts.ts, 1, 8))
+>assert : Symbol(assert, Decl(debug.ts, 0, 0))
 
 Debug.assert(true);
->Debug.assert : Symbol(ts.Debug.assert, Decl(debug.ts, 0, 0))
+>Debug.assert : Symbol(assert, Decl(debug.ts, 0, 0))
 >Debug : Symbol(Debug, Decl(foo.ts, 1, 8))
->assert : Symbol(ts.Debug.assert, Decl(debug.ts, 0, 0))
+>assert : Symbol(assert, Decl(debug.ts, 0, 0))
 
 
 === src/other/_namespaces/ts.ts ===
@@= skipped -25, +25 lines =@@
 >Debug : Symbol(Debug, Decl(bar.ts, 1, 8))
 
 ts.Debug.assert(true);
->ts.Debug.assert : Symbol(Debug.assert, Decl(debug.ts, 0, 0))
->ts.Debug : Symbol(ts.Debug, Decl(ts.ts, 1, 8))
+>ts.Debug.assert : Symbol(assert, Decl(debug.ts, 0, 0))
+>ts.Debug : Symbol(Debug, Decl(ts.ts, 1, 8))
 >ts : Symbol(ts, Decl(bar.ts, 0, 6))
->Debug : Symbol(ts.Debug, Decl(ts.ts, 1, 8))
->assert : Symbol(Debug.assert, Decl(debug.ts, 0, 0))
+>Debug : Symbol(Debug, Decl(ts.ts, 1, 8))
+>assert : Symbol(assert, Decl(debug.ts, 0, 0))
 
 Debug.assert(true);
->Debug.assert : Symbol(Debug.assert, Decl(debug.ts, 0, 0))
+>Debug.assert : Symbol(assert, Decl(debug.ts, 0, 0))
 >Debug : Symbol(Debug, Decl(bar.ts, 1, 8))
->assert : Symbol(Debug.assert, Decl(debug.ts, 0, 0))
+>assert : Symbol(assert, Decl(debug.ts, 0, 0))
 
