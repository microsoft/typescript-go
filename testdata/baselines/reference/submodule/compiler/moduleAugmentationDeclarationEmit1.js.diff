--- old.moduleAugmentationDeclarationEmit1.js
+++ new.moduleAugmentationDeclarationEmit1.js
@@= skipped -30, +30 lines =@@
 let x: Observable<number>;
 let y = x.map(x => x + 1);
 
-//// [observable.js]
+//// [main.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.Observable = void 0;
-var Observable;
-(function (Observable) {
-    var someValue;
-})(Observable || (exports.Observable = Observable = {}));
+require("./map");
+let x;
+let y = x.map(x => x + 1);
 //// [map.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var observable_1 = require("./observable");
+const observable_1 = require("./observable");
 observable_1.Observable.prototype.map = function () { };
-//// [main.js]
+//// [observable.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-require("./map");
-var x;
-var y = x.map(function (x) { return x + 1; });
-
-
-//// [observable.d.ts]
-export declare class Observable<T> {
-    filter(pred: (e: T) => boolean): Observable<T>;
-}
-export declare namespace Observable {
-}
-//// [map.d.ts]
-declare module "./observable" {
-    interface Observable<T> {
-        map<U>(proj: (e: T) => U): Observable<U>;
-    }
-    namespace Observable {
-        let someAnotherValue: number;
-    }
-}
-export {};
-//// [main.d.ts]
-import "./map";
+exports.Observable = void 0;
+var Observable;
+(function (Observable) {
+    let someValue;
+})(Observable || (exports.Observable = Observable = {}));
