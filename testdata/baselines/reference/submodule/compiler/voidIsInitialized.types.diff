--- old.voidIsInitialized.types
+++ new.voidIsInitialized.types
@@= skipped -2, +2 lines =@@
 === voidIsInitialized.ts ===
 const x: void = undefined;
 >x : void
->  : ^^^^
 >undefined : undefined
->          : ^^^^^^^^^
 
 const y: void = undefined;
 >y : void
->  : ^^^^
 >undefined : undefined
->          : ^^^^^^^^^
 
 if(typeof x === "undefined") {
 >typeof x === "undefined" : boolean
->                         : ^^^^^^^
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : void
->  : ^^^^
 >"undefined" : "undefined"
->            : ^^^^^^^^^^^
 
     x // no error: assume x2 is initialised
 >x : undefined
->  : ^^^^^^^^^
 }
 
 if(typeof y !== "undefined") {
 >typeof y !== "undefined" : boolean
->                         : ^^^^^^^
->typeof y : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>typeof y : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >y : void
->  : ^^^^
 >"undefined" : "undefined"
->            : ^^^^^^^^^^^
 
     y // no error: do not narrow void
 >y : never
->  : ^^^^^
 }
 
