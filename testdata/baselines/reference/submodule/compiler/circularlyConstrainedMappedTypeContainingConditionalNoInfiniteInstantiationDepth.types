//// [tests/cases/compiler/circularlyConstrainedMappedTypeContainingConditionalNoInfiniteInstantiationDepth.ts] ////

=== circularlyConstrainedMappedTypeContainingConditionalNoInfiniteInstantiationDepth.ts ===
declare class Component<P> {
>Component : Component<P>
>P : P

    constructor(props: Readonly<P>);
>props : Readonly<P>

    constructor(props: P, context?: any);
>props : P
>context : any

    readonly props: Readonly<P> & Readonly<{ children?: {} }>;
>props : Readonly<P> & Readonly<{ children?: {} | undefined; }>
>children : {} | undefined
}
interface ComponentClass<P = {}> {
>ComponentClass : ComponentClass<P>
>P : P

    new (props: P, context?: any): Component<P>;
>props : P
>context : any

    propTypes?: WeakValidationMap<P>;
>propTypes : WeakValidationMap<P> | undefined

    defaultProps?: Partial<P>;
>defaultProps : Partial<P> | undefined

    displayName?: string;
>displayName : string | undefined
}
interface FunctionComponent<P = {}> {
>FunctionComponent : FunctionComponent<P>
>P : P

    (props: P & { children?: {} }, context?: any): {} | null;
>props : P & { children?: {} | undefined; }
>children : {} | undefined
>context : any

    propTypes?: WeakValidationMap<P>;
>propTypes : WeakValidationMap<P> | undefined

    defaultProps?: Partial<P>;
>defaultProps : Partial<P> | undefined

    displayName?: string;
>displayName : string | undefined
}

export declare const nominalTypeHack: unique symbol;
>nominalTypeHack : unique symbol

export interface Validator<T> {
>Validator : Validator<T>
>T : T

    (props: object, propName: string, componentName: string, location: string, propFullName: string): Error | null;
>props : object
>propName : string
>componentName : string
>location : string
>propFullName : string

    [nominalTypeHack]?: T;
>[nominalTypeHack] : T | undefined
>nominalTypeHack : unique symbol
}
type WeakValidationMap<T> = {
>WeakValidationMap : WeakValidationMap<T>
>T : T

    [K in keyof T]?: null extends T[K]
>K : K

        ? Validator<T[K] | null | undefined>
        : undefined extends T[K]
        ? Validator<T[K] | null | undefined>
        : Validator<T[K]>
};
type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;
>ComponentType : ComponentType<P>
>P : P

export type Shared<
>Shared : Shared<InjectedProps, DecorationTargetProps>

    InjectedProps,
>InjectedProps : InjectedProps

    DecorationTargetProps extends Shared<InjectedProps, DecorationTargetProps>
>DecorationTargetProps : DecorationTargetProps

    > = {
        [P in Extract<keyof InjectedProps, keyof DecorationTargetProps>]?: InjectedProps[P] extends DecorationTargetProps[P] ? DecorationTargetProps[P] : never;
>P : P

    };

// Infers prop type from component C
export type GetProps<C> = C extends ComponentType<infer P> ? P : never;
>GetProps : GetProps<C>
>C : C
>P : P

export type ConnectedComponentClass<
>ConnectedComponentClass : ConnectedComponentClass<C, P>

    C extends ComponentType<any>,
>C : C

    P
>P : P

> = ComponentClass<P> & {
    WrappedComponent: C;
>WrappedComponent : C

};

export type Matching<InjectedProps, DecorationTargetProps> = {
>Matching : Matching<InjectedProps, DecorationTargetProps>
>InjectedProps : InjectedProps
>DecorationTargetProps : DecorationTargetProps

    [P in keyof DecorationTargetProps]: P extends keyof InjectedProps
>P : P

        ? InjectedProps[P] extends DecorationTargetProps[P]
            ? DecorationTargetProps[P]
            : InjectedProps[P]
        : DecorationTargetProps[P];
};

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
>Omit : Omit<T, K>
>T : T
>K : K

export type InferableComponentEnhancerWithProps<TInjectedProps, TNeedsProps> =
>InferableComponentEnhancerWithProps : InferableComponentEnhancerWithProps<TInjectedProps, TNeedsProps>
>TInjectedProps : TInjectedProps
>TNeedsProps : TNeedsProps

    <C extends ComponentType<Matching<TInjectedProps, GetProps<C>>>>(
>C : C

        component: C
>component : C

    ) => ConnectedComponentClass<C, Omit<GetProps<C>, keyof Shared<TInjectedProps, GetProps<C>>> & TNeedsProps>;

