--- old.infinitelyGenerativeInheritance1.symbols
+++ new.infinitelyGenerativeInheritance1.symbols
@@= skipped -5, +5 lines =@@
 >T : Symbol(T, Decl(infinitelyGenerativeInheritance1.ts, 0, 16))
 
       pop(): T
->pop : Symbol(Stack.pop, Decl(infinitelyGenerativeInheritance1.ts, 0, 20))
+>pop : Symbol(pop, Decl(infinitelyGenerativeInheritance1.ts, 0, 20))
 >T : Symbol(T, Decl(infinitelyGenerativeInheritance1.ts, 0, 16))
 
       zip<S>(a: Stack<S>): Stack<{ x: T; y: S }>
->zip : Symbol(Stack.zip, Decl(infinitelyGenerativeInheritance1.ts, 1, 14))
+>zip : Symbol(zip, Decl(infinitelyGenerativeInheritance1.ts, 1, 14))
 >S : Symbol(S, Decl(infinitelyGenerativeInheritance1.ts, 2, 10))
 >a : Symbol(a, Decl(infinitelyGenerativeInheritance1.ts, 2, 13))
 >Stack : Symbol(Stack, Decl(infinitelyGenerativeInheritance1.ts, 0, 0))
@@= skipped -23, +23 lines =@@
 >T : Symbol(T, Decl(infinitelyGenerativeInheritance1.ts, 5, 18))
 
       zip<S>(a: Stack<S>): Stack<{ x: T; y: S }>
->zip : Symbol(MyStack.zip, Decl(infinitelyGenerativeInheritance1.ts, 5, 39))
+>zip : Symbol(zip, Decl(infinitelyGenerativeInheritance1.ts, 5, 39))
 >S : Symbol(S, Decl(infinitelyGenerativeInheritance1.ts, 6, 10))
 >a : Symbol(a, Decl(infinitelyGenerativeInheritance1.ts, 6, 13))
 >Stack : Symbol(Stack, Decl(infinitelyGenerativeInheritance1.ts, 0, 0))
