--- old.assignmentCompatability5.types
+++ new.assignmentCompatability5.types
@@= skipped -4, +4 lines =@@
 >__test1__ : typeof __test1__
 
     export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
+>interfaceWithPublicAndOptional : interfaceWithPublicAndOptional<T, U>
+>T : T
+>U : U
 >one : T
 >two : U
 >obj4 : interfaceWithPublicAndOptional<number, string>
@@= skipped -15, +18 lines =@@
 >__test2__ : typeof __test2__
 
     export                   interface interfaceOne<T> { one: T; };                var obj1: interfaceOne<number> = { one: 1 };;
+>interfaceOne : interfaceOne<T>
+>T : T
 >one : T
 >obj1 : interfaceOne<number>
 >{ one: 1 } : { one: number; }
@@= skipped -11, +13 lines =@@
 >obj1 : interfaceOne<number>
 }
 __test2__.__val__obj1 = __test1__.__val__obj4
->__test2__.__val__obj1 = __test1__.__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
->__test2__.__val__obj1 : __test2__.interfaceOne<number>
+>__test2__.__val__obj1 = __test1__.__val__obj4 : interfaceWithPublicAndOptional<number, string>
+>__test2__.__val__obj1 : interfaceOne<number>
 >__test2__ : typeof __test2__
->__val__obj1 : __test2__.interfaceOne<number>
->__test1__.__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
+>__val__obj1 : interfaceOne<number>
+>__test1__.__val__obj4 : interfaceWithPublicAndOptional<number, string>
 >__test1__ : typeof __test1__
->__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
+>__val__obj4 : interfaceWithPublicAndOptional<number, string>
 
