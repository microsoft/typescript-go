--- old.infinitelyExpandingTypes3.symbols
+++ new.infinitelyExpandingTypes3.symbols
@@= skipped -5, +5 lines =@@
 >T : Symbol(T, Decl(infinitelyExpandingTypes3.ts, 0, 15))
 
     data: T;
->data : Symbol(List.data, Decl(infinitelyExpandingTypes3.ts, 0, 19))
+>data : Symbol(data, Decl(infinitelyExpandingTypes3.ts, 0, 19))
 >T : Symbol(T, Decl(infinitelyExpandingTypes3.ts, 0, 15))
 
     next: List<T>; // will be recursive reference when OwnerList is expanded
->next : Symbol(List.next, Decl(infinitelyExpandingTypes3.ts, 1, 12))
+>next : Symbol(next, Decl(infinitelyExpandingTypes3.ts, 1, 12))
 >List : Symbol(List, Decl(infinitelyExpandingTypes3.ts, 0, 0))
 >T : Symbol(T, Decl(infinitelyExpandingTypes3.ts, 0, 15))
 
     owner: OwnerList<T>;
->owner : Symbol(List.owner, Decl(infinitelyExpandingTypes3.ts, 2, 18))
+>owner : Symbol(owner, Decl(infinitelyExpandingTypes3.ts, 2, 18))
 >OwnerList : Symbol(OwnerList, Decl(infinitelyExpandingTypes3.ts, 4, 1))
 >T : Symbol(T, Decl(infinitelyExpandingTypes3.ts, 0, 15))
 }
@@= skipped -22, +22 lines =@@
 >U : Symbol(U, Decl(infinitelyExpandingTypes3.ts, 6, 20))
 
     name: string;
->name : Symbol(OwnerList.name, Decl(infinitelyExpandingTypes3.ts, 6, 46))
+>name : Symbol(name, Decl(infinitelyExpandingTypes3.ts, 6, 46))
 }
 
 interface OwnerList2<U> extends List<List<U>> {
@@= skipped -11, +11 lines =@@
 >U : Symbol(U, Decl(infinitelyExpandingTypes3.ts, 10, 21))
 
     name: string;
->name : Symbol(OwnerList2.name, Decl(infinitelyExpandingTypes3.ts, 10, 47))
+>name : Symbol(name, Decl(infinitelyExpandingTypes3.ts, 10, 47))
 }
 
 var o1: OwnerList<number>;
