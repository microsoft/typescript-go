--- old.indexedAccessConstraints.types
+++ new.indexedAccessConstraints.types
@@= skipped -2, +2 lines =@@
 === indexedAccessConstraints.ts ===
 function foo<T extends object>(a: T[keyof T]) {
 >foo : <T extends object>(a: T[keyof T]) => void
+>T : T
 >a : T[keyof T]
 
     let b: number = a;  // Error
@@= skipped -11, +12 lines =@@
 
 export function methodFnLength<T extends {}, K extends keyof T>(obj: T, methodKey: K): number {
 >methodFnLength : <T extends {}, K extends keyof T>(obj: T, methodKey: K) => number
+>T : T
+>K : K
 >obj : T
 >methodKey : K
 
@@= skipped -11, +13 lines =@@
 
     if (typeof fn !== 'function') {
 >typeof fn !== 'function' : boolean
->typeof fn : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof fn : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >fn : T[K]
 >'function' : "function"
 
@@= skipped -17, +17 lines =@@
 
 function getField<T extends object>(x: T | null, k: keyof T) {
 >getField : <T extends object>(x: T | null, k: keyof T) => T[keyof T] | null
+>T : T
 >x : T | null
 >k : keyof T
 
