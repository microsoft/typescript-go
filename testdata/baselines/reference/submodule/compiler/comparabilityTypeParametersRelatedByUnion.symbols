//// [tests/cases/compiler/comparabilityTypeParametersRelatedByUnion.ts] ////

=== comparabilityTypeParametersRelatedByUnion.ts ===
class C<T> {
>C : Symbol(C, Decl(comparabilityTypeParametersRelatedByUnion.ts, 0, 0))
>T : Symbol(T, Decl(comparabilityTypeParametersRelatedByUnion.ts, 0, 8))

  constructor(readonly x: T) {}
>x : Symbol(x, Decl(comparabilityTypeParametersRelatedByUnion.ts, 1, 14))
>T : Symbol(T, Decl(comparabilityTypeParametersRelatedByUnion.ts, 0, 8))

  good<U extends T>(y: U) {
>good : Symbol(good, Decl(comparabilityTypeParametersRelatedByUnion.ts, 1, 31))
>U : Symbol(U, Decl(comparabilityTypeParametersRelatedByUnion.ts, 3, 7))
>T : Symbol(T, Decl(comparabilityTypeParametersRelatedByUnion.ts, 0, 8))
>y : Symbol(y, Decl(comparabilityTypeParametersRelatedByUnion.ts, 3, 20))
>U : Symbol(U, Decl(comparabilityTypeParametersRelatedByUnion.ts, 3, 7))

      if (y === this.x) {}
>y : Symbol(y, Decl(comparabilityTypeParametersRelatedByUnion.ts, 3, 20))
>this.x : Symbol(x, Decl(comparabilityTypeParametersRelatedByUnion.ts, 1, 14))
>this : Symbol(C, Decl(comparabilityTypeParametersRelatedByUnion.ts, 0, 0))
>x : Symbol(x, Decl(comparabilityTypeParametersRelatedByUnion.ts, 1, 14))
  }

  bad<U extends T | string>(y: U) {
>bad : Symbol(bad, Decl(comparabilityTypeParametersRelatedByUnion.ts, 5, 3))
>U : Symbol(U, Decl(comparabilityTypeParametersRelatedByUnion.ts, 7, 6))
>T : Symbol(T, Decl(comparabilityTypeParametersRelatedByUnion.ts, 0, 8))
>y : Symbol(y, Decl(comparabilityTypeParametersRelatedByUnion.ts, 7, 28))
>U : Symbol(U, Decl(comparabilityTypeParametersRelatedByUnion.ts, 7, 6))

      if (y === this.x) {}
>y : Symbol(y, Decl(comparabilityTypeParametersRelatedByUnion.ts, 7, 28))
>this.x : Symbol(x, Decl(comparabilityTypeParametersRelatedByUnion.ts, 1, 14))
>this : Symbol(C, Decl(comparabilityTypeParametersRelatedByUnion.ts, 0, 0))
>x : Symbol(x, Decl(comparabilityTypeParametersRelatedByUnion.ts, 1, 14))
  }
}

