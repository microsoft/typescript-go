--- old.contextualTypingReturnStatementWithReturnTypeAnnotation.types
+++ new.contextualTypingReturnStatementWithReturnTypeAnnotation.types
@@= skipped -2, +2 lines =@@
 === contextualTypingReturnStatementWithReturnTypeAnnotation.ts ===
 type PropOfRaw<T> = readonly T[] | "not-array" | "no-prop";
 >PropOfRaw : PropOfRaw<T>
+>T : T
 
 declare function isString(text: unknown): text is string;
 >isString : (text: unknown) => text is string
 >text : unknown
 
 declare function getPropFromRaw<T>(
->getPropFromRaw : <T>(prop: "files" | "include" | "exclude" | "references", validateElement: (value: unknown) => boolean, elementTypeName: string) => PropOfRaw<T>
+>getPropFromRaw : <T>(prop: "exclude" | "files" | "include" | "references", validateElement: (value: unknown) => boolean, elementTypeName: string) => PropOfRaw<T>
+>T : T
 
   prop: "files" | "include" | "exclude" | "references",
->prop : "files" | "include" | "exclude" | "references"
+>prop : "exclude" | "files" | "include" | "references"
 
   validateElement: (value: unknown) => boolean,
 >validateElement : (value: unknown) => boolean
@@= skipped -21, +23 lines =@@
 ): PropOfRaw<T>;
 
 function getSpecsFromRaw(
->getSpecsFromRaw : (prop: "files" | "include" | "exclude") => PropOfRaw<string>
+>getSpecsFromRaw : (prop: "exclude" | "files" | "include") => PropOfRaw<string>
 
   prop: "files" | "include" | "exclude"
->prop : "files" | "include" | "exclude"
+>prop : "exclude" | "files" | "include"
 
 ): PropOfRaw<string> {
   return getPropFromRaw(prop, isString, "string");
 >getPropFromRaw(prop, isString, "string") : PropOfRaw<string>
->getPropFromRaw : <T>(prop: "files" | "include" | "exclude" | "references", validateElement: (value: unknown) => boolean, elementTypeName: string) => PropOfRaw<T>
->prop : "files" | "include" | "exclude"
+>getPropFromRaw : <T>(prop: "exclude" | "files" | "include" | "references", validateElement: (value: unknown) => boolean, elementTypeName: string) => PropOfRaw<T>
+>prop : "exclude" | "files" | "include"
 >isString : (text: unknown) => text is string
 >"string" : "string"
 }
