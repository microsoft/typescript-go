--- old.implementArrayInterface.symbols
+++ new.implementArrayInterface.symbols
@@= skipped -7, +7 lines =@@
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     toString(): string;
->toString : Symbol(MyArray.toString, Decl(implementArrayInterface.ts, 0, 46))
+>toString : Symbol(toString, Decl(implementArrayInterface.ts, 0, 46))
 
     toLocaleString(): string;
->toLocaleString : Symbol(MyArray.toLocaleString, Decl(implementArrayInterface.ts, 1, 23))
+>toLocaleString : Symbol(toLocaleString, Decl(implementArrayInterface.ts, 1, 23))
 
     concat<U extends T[]>(...items: U[]): T[];
->concat : Symbol(MyArray.concat, Decl(implementArrayInterface.ts, 2, 29), Decl(implementArrayInterface.ts, 3, 46))
+>concat : Symbol(concat, Decl(implementArrayInterface.ts, 2, 29), Decl(implementArrayInterface.ts, 3, 46))
 >U : Symbol(U, Decl(implementArrayInterface.ts, 3, 11))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 >items : Symbol(items, Decl(implementArrayInterface.ts, 3, 26))
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     concat(...items: T[]): T[];
->concat : Symbol(MyArray.concat, Decl(implementArrayInterface.ts, 2, 29), Decl(implementArrayInterface.ts, 3, 46))
+>concat : Symbol(concat, Decl(implementArrayInterface.ts, 2, 29), Decl(implementArrayInterface.ts, 3, 46))
 >items : Symbol(items, Decl(implementArrayInterface.ts, 4, 11))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     join(separator?: string): string;
->join : Symbol(MyArray.join, Decl(implementArrayInterface.ts, 4, 31))
+>join : Symbol(join, Decl(implementArrayInterface.ts, 4, 31))
 >separator : Symbol(separator, Decl(implementArrayInterface.ts, 5, 9))
 
     pop(): T;
->pop : Symbol(MyArray.pop, Decl(implementArrayInterface.ts, 5, 37))
+>pop : Symbol(pop, Decl(implementArrayInterface.ts, 5, 37))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     push(...items: T[]): number;
->push : Symbol(MyArray.push, Decl(implementArrayInterface.ts, 6, 13))
+>push : Symbol(push, Decl(implementArrayInterface.ts, 6, 13))
 >items : Symbol(items, Decl(implementArrayInterface.ts, 7, 9))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     reverse(): T[];
->reverse : Symbol(MyArray.reverse, Decl(implementArrayInterface.ts, 7, 32))
+>reverse : Symbol(reverse, Decl(implementArrayInterface.ts, 7, 32))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     shift(): T;
->shift : Symbol(MyArray.shift, Decl(implementArrayInterface.ts, 8, 19))
+>shift : Symbol(shift, Decl(implementArrayInterface.ts, 8, 19))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     slice(start?: number, end?: number): T[];
->slice : Symbol(MyArray.slice, Decl(implementArrayInterface.ts, 9, 15))
+>slice : Symbol(slice, Decl(implementArrayInterface.ts, 9, 15))
 >start : Symbol(start, Decl(implementArrayInterface.ts, 10, 10))
 >end : Symbol(end, Decl(implementArrayInterface.ts, 10, 25))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     sort(compareFn?: (a: T, b: T) => number): this;
->sort : Symbol(MyArray.sort, Decl(implementArrayInterface.ts, 10, 45))
+>sort : Symbol(sort, Decl(implementArrayInterface.ts, 10, 45))
 >compareFn : Symbol(compareFn, Decl(implementArrayInterface.ts, 11, 9))
 >a : Symbol(a, Decl(implementArrayInterface.ts, 11, 22))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
@@= skipped -41, +41 lines =@@
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     splice(start: number): T[];
->splice : Symbol(MyArray.splice, Decl(implementArrayInterface.ts, 11, 51), Decl(implementArrayInterface.ts, 12, 31))
+>splice : Symbol(splice, Decl(implementArrayInterface.ts, 11, 51), Decl(implementArrayInterface.ts, 12, 31))
 >start : Symbol(start, Decl(implementArrayInterface.ts, 12, 11))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     splice(start: number, deleteCount: number, ...items: T[]): T[];
->splice : Symbol(MyArray.splice, Decl(implementArrayInterface.ts, 11, 51), Decl(implementArrayInterface.ts, 12, 31))
+>splice : Symbol(splice, Decl(implementArrayInterface.ts, 11, 51), Decl(implementArrayInterface.ts, 12, 31))
 >start : Symbol(start, Decl(implementArrayInterface.ts, 13, 11))
 >deleteCount : Symbol(deleteCount, Decl(implementArrayInterface.ts, 13, 25))
 >items : Symbol(items, Decl(implementArrayInterface.ts, 13, 46))
@@= skipped -13, +13 lines =@@
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     unshift(...items: T[]): number;
->unshift : Symbol(MyArray.unshift, Decl(implementArrayInterface.ts, 13, 67))
+>unshift : Symbol(unshift, Decl(implementArrayInterface.ts, 13, 67))
 >items : Symbol(items, Decl(implementArrayInterface.ts, 14, 12))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     indexOf(searchElement: T, fromIndex?: number): number;
->indexOf : Symbol(MyArray.indexOf, Decl(implementArrayInterface.ts, 14, 35))
+>indexOf : Symbol(indexOf, Decl(implementArrayInterface.ts, 14, 35))
 >searchElement : Symbol(searchElement, Decl(implementArrayInterface.ts, 16, 12))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 >fromIndex : Symbol(fromIndex, Decl(implementArrayInterface.ts, 16, 29))
 
     lastIndexOf(searchElement: T, fromIndex?: number): number;
->lastIndexOf : Symbol(MyArray.lastIndexOf, Decl(implementArrayInterface.ts, 16, 58))
+>lastIndexOf : Symbol(lastIndexOf, Decl(implementArrayInterface.ts, 16, 58))
 >searchElement : Symbol(searchElement, Decl(implementArrayInterface.ts, 17, 16))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 >fromIndex : Symbol(fromIndex, Decl(implementArrayInterface.ts, 17, 33))
 
     every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;
->every : Symbol(MyArray.every, Decl(implementArrayInterface.ts, 17, 62))
+>every : Symbol(every, Decl(implementArrayInterface.ts, 17, 62))
 >callbackfn : Symbol(callbackfn, Decl(implementArrayInterface.ts, 18, 10))
 >value : Symbol(value, Decl(implementArrayInterface.ts, 18, 23))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
@@= skipped -27, +27 lines =@@
 >thisArg : Symbol(thisArg, Decl(implementArrayInterface.ts, 18, 71))
 
     some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;
->some : Symbol(MyArray.some, Decl(implementArrayInterface.ts, 18, 96))
+>some : Symbol(some, Decl(implementArrayInterface.ts, 18, 96))
 >callbackfn : Symbol(callbackfn, Decl(implementArrayInterface.ts, 19, 9))
 >value : Symbol(value, Decl(implementArrayInterface.ts, 19, 22))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
@@= skipped -10, +10 lines =@@
 >thisArg : Symbol(thisArg, Decl(implementArrayInterface.ts, 19, 70))
 
     forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;
->forEach : Symbol(MyArray.forEach, Decl(implementArrayInterface.ts, 19, 95))
+>forEach : Symbol(forEach, Decl(implementArrayInterface.ts, 19, 95))
 >callbackfn : Symbol(callbackfn, Decl(implementArrayInterface.ts, 20, 12))
 >value : Symbol(value, Decl(implementArrayInterface.ts, 20, 25))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
@@= skipped -10, +10 lines =@@
 >thisArg : Symbol(thisArg, Decl(implementArrayInterface.ts, 20, 70))
 
     map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];
->map : Symbol(MyArray.map, Decl(implementArrayInterface.ts, 20, 92))
+>map : Symbol(map, Decl(implementArrayInterface.ts, 20, 92))
 >U : Symbol(U, Decl(implementArrayInterface.ts, 21, 8))
 >callbackfn : Symbol(callbackfn, Decl(implementArrayInterface.ts, 21, 11))
 >value : Symbol(value, Decl(implementArrayInterface.ts, 21, 24))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(implementArrayInterface.ts, 21, 8))
 
     filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];
->filter : Symbol(MyArray.filter, Decl(implementArrayInterface.ts, 21, 87))
+>filter : Symbol(filter, Decl(implementArrayInterface.ts, 21, 87))
 >callbackfn : Symbol(callbackfn, Decl(implementArrayInterface.ts, 22, 11))
 >value : Symbol(value, Decl(implementArrayInterface.ts, 22, 24))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;
->reduce : Symbol(MyArray.reduce, Decl(implementArrayInterface.ts, 22, 93), Decl(implementArrayInterface.ts, 23, 120))
+>reduce : Symbol(reduce, Decl(implementArrayInterface.ts, 22, 93), Decl(implementArrayInterface.ts, 23, 120))
 >callbackfn : Symbol(callbackfn, Decl(implementArrayInterface.ts, 23, 11))
 >previousValue : Symbol(previousValue, Decl(implementArrayInterface.ts, 23, 24))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;
->reduce : Symbol(MyArray.reduce, Decl(implementArrayInterface.ts, 22, 93), Decl(implementArrayInterface.ts, 23, 120))
+>reduce : Symbol(reduce, Decl(implementArrayInterface.ts, 22, 93), Decl(implementArrayInterface.ts, 23, 120))
 >U : Symbol(U, Decl(implementArrayInterface.ts, 24, 11))
 >callbackfn : Symbol(callbackfn, Decl(implementArrayInterface.ts, 24, 14))
 >previousValue : Symbol(previousValue, Decl(implementArrayInterface.ts, 24, 27))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(implementArrayInterface.ts, 24, 11))
 
     reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;
->reduceRight : Symbol(MyArray.reduceRight, Decl(implementArrayInterface.ts, 24, 122), Decl(implementArrayInterface.ts, 25, 125))
+>reduceRight : Symbol(reduceRight, Decl(implementArrayInterface.ts, 24, 122), Decl(implementArrayInterface.ts, 25, 125))
 >callbackfn : Symbol(callbackfn, Decl(implementArrayInterface.ts, 25, 16))
 >previousValue : Symbol(previousValue, Decl(implementArrayInterface.ts, 25, 29))
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(implementArrayInterface.ts, 0, 22))
 
     reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;
->reduceRight : Symbol(MyArray.reduceRight, Decl(implementArrayInterface.ts, 24, 122), Decl(implementArrayInterface.ts, 25, 125))
+>reduceRight : Symbol(reduceRight, Decl(implementArrayInterface.ts, 24, 122), Decl(implementArrayInterface.ts, 25, 125))
 >U : Symbol(U, Decl(implementArrayInterface.ts, 26, 16))
 >callbackfn : Symbol(callbackfn, Decl(implementArrayInterface.ts, 26, 19))
 >previousValue : Symbol(previousValue, Decl(implementArrayInterface.ts, 26, 32))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(implementArrayInterface.ts, 26, 16))
 
     length: number;
->length : Symbol(MyArray.length, Decl(implementArrayInterface.ts, 26, 127))
+>length : Symbol(length, Decl(implementArrayInterface.ts, 26, 127))
 
     [n: number]: T;
 >n : Symbol(n, Decl(implementArrayInterface.ts, 30, 5))
