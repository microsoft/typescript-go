--- old.classWithMultipleBaseClasses.symbols
+++ new.classWithMultipleBaseClasses.symbols
@@= skipped -4, +4 lines =@@
 >A : Symbol(A, Decl(classWithMultipleBaseClasses.ts, 0, 0))
 
     foo() { }
->foo : Symbol(A.foo, Decl(classWithMultipleBaseClasses.ts, 0, 9))
+>foo : Symbol(foo, Decl(classWithMultipleBaseClasses.ts, 0, 9))
 }
 
 class B {
 >B : Symbol(B, Decl(classWithMultipleBaseClasses.ts, 2, 1))
 
     bar() { }
->bar : Symbol(B.bar, Decl(classWithMultipleBaseClasses.ts, 4, 9))
+>bar : Symbol(bar, Decl(classWithMultipleBaseClasses.ts, 4, 9))
 }
 
 interface I {
 >I : Symbol(I, Decl(classWithMultipleBaseClasses.ts, 6, 1), Decl(classWithMultipleBaseClasses.ts, 20, 1))
 
     baz();
->baz : Symbol(I.baz, Decl(classWithMultipleBaseClasses.ts, 8, 13))
+>baz : Symbol(baz, Decl(classWithMultipleBaseClasses.ts, 8, 13))
 }
 
 interface J {
 >J : Symbol(J, Decl(classWithMultipleBaseClasses.ts, 10, 1))
 
     bat();
->bat : Symbol(J.bat, Decl(classWithMultipleBaseClasses.ts, 12, 13))
+>bat : Symbol(bat, Decl(classWithMultipleBaseClasses.ts, 12, 13))
 }
 
 
@@= skipped -31, +31 lines =@@
 >J : Symbol(J, Decl(classWithMultipleBaseClasses.ts, 10, 1))
 
     baz() { }
->baz : Symbol(D.baz, Decl(classWithMultipleBaseClasses.ts, 17, 25))
+>baz : Symbol(baz, Decl(classWithMultipleBaseClasses.ts, 17, 25))
 
     bat() { }
->bat : Symbol(D.bat, Decl(classWithMultipleBaseClasses.ts, 18, 13))
+>bat : Symbol(bat, Decl(classWithMultipleBaseClasses.ts, 18, 13))
 }
 
 interface I extends A, B {
