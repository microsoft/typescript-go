error TS2318: Cannot find global type 'Array'.
error TS2318: Cannot find global type 'Function'.
error TS2318: Cannot find global type 'IArguments'.
error TS2318: Cannot find global type 'RegExp'.
error TS2318: Cannot find global type 'String'.
error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
error TS2552: Cannot find name 'Number'. Did you mean 'number'?
error TS2552: Cannot find name 'Object'. Did you mean 'object'?
keyRemappingKeyofResult.ts(1,13): error TS2304: Cannot find name 'Symbol'.
keyRemappingKeyofResult.ts(4,13): error TS2304: Cannot find name 'Exclude'.
keyRemappingKeyofResult.ts(7,50): error TS2304: Cannot find name 'Record'.
keyRemappingKeyofResult.ts(14,13): error TS2304: Cannot find name 'Exclude'.
keyRemappingKeyofResult.ts(31,54): error TS2304: Cannot find name 'Record'.
keyRemappingKeyofResult.ts(41,5): error TS2322: Type 'string' is not assignable to type 'keyof Remapped'.
  Type '"str"' is not assignable to type 'never'.
keyRemappingKeyofResult.ts(55,29): error TS2304: Cannot find name 'PropertyKey'.
keyRemappingKeyofResult.ts(55,55): error TS2304: Cannot find name 'Record'.
keyRemappingKeyofResult.ts(56,41): error TS2304: Cannot find name 'PropertyKey'.
keyRemappingKeyofResult.ts(68,5): error TS2322: Type 'string' is not assignable to type 'keyof Remapped'.
  Type 'string' is not assignable to type 'DistributiveNonIndex<K>'.


!!! error TS2318: Cannot find global type 'Array'.
!!! error TS2318: Cannot find global type 'Function'.
!!! error TS2318: Cannot find global type 'IArguments'.
!!! error TS2318: Cannot find global type 'RegExp'.
!!! error TS2318: Cannot find global type 'String'.
!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
==== keyRemappingKeyofResult.ts (10 errors) ====
    const sym = Symbol("")
                ~~~~~~
!!! error TS2304: Cannot find name 'Symbol'.
    type Orig = { [k: string]: any, str: any, [sym]: any }
    
    type Okay = Exclude<keyof Orig, never>
                ~~~~~~~
!!! error TS2304: Cannot find name 'Exclude'.
    // type Okay = string | number | typeof sym
    
    type Remapped = { [K in keyof Orig as {} extends Record<K, any> ? never : K]: any }
                                                     ~~~~~~
!!! error TS2304: Cannot find name 'Record'.
    /* type Remapped = {
        str: any;
        [sym]: any;
    } */
    // no string index signature, right?
    
    type Oops = Exclude<keyof Remapped, never>
                ~~~~~~~
!!! error TS2304: Cannot find name 'Exclude'.
    declare let x: Oops;
    x = sym;
    x = "str";
    // type Oops = typeof sym <-- what happened to "str"?
    
    // equivalently, with an unresolved generic (no `exclude` shenanigans, since conditions won't execute):
    function f<T>() {
        type Orig = { [k: string]: any, str: any, [sym]: any } & T;
        
        type Okay = keyof Orig;
        let a: Okay;
        a = "str";
        a = sym;
        a = "whatever";
        // type Okay = string | number | typeof sym
        
        type Remapped = { [K in keyof Orig as {} extends Record<K, any> ? never : K]: any }
                                                         ~~~~~~
!!! error TS2304: Cannot find name 'Record'.
        /* type Remapped = {
            str: any;
            [sym]: any;
        } */
        // no string index signature, right?
        
        type Oops = keyof Remapped;
        let x: Oops;
        x = sym;
        x = "str";
        ~
!!! error TS2322: Type 'string' is not assignable to type 'keyof Remapped'.
!!! error TS2322:   Type '"str"' is not assignable to type 'never'.
    }
    
    // and another generic case with a _distributive_ mapping, to trigger a different branch in `getIndexType`
    function g<T>() {
        type Orig = { [k: string]: any, str: any, [sym]: any } & T;
        
        type Okay = keyof Orig;
        let a: Okay;
        a = "str";
        a = sym;
        a = "whatever";
        // type Okay = string | number | typeof sym
    
        type NonIndex<T extends PropertyKey> = {} extends Record<T, any> ? never : T;
                                ~~~~~~~~~~~
!!! error TS2304: Cannot find name 'PropertyKey'.
                                                          ~~~~~~
!!! error TS2304: Cannot find name 'Record'.
        type DistributiveNonIndex<T extends PropertyKey> = T extends unknown ? NonIndex<T> : never;
                                            ~~~~~~~~~~~
!!! error TS2304: Cannot find name 'PropertyKey'.
        
        type Remapped = { [K in keyof Orig as DistributiveNonIndex<K>]: any }
        /* type Remapped = {
            str: any;
            [sym]: any;
        } */
        // no string index signature, right?
        
        type Oops = keyof Remapped;
        let x: Oops;
        x = sym;
        x = "str";
        ~
!!! error TS2322: Type 'string' is not assignable to type 'keyof Remapped'.
!!! error TS2322:   Type 'string' is not assignable to type 'DistributiveNonIndex<K>'.
    }
    
    export {};