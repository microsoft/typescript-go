--- old.enumLiteralUnionNotWidened.symbols
+++ new.enumLiteralUnionNotWidened.symbols
@@= skipped -3, +3 lines =@@
 // repro from #22093
 enum A { one = "one", two = "two" };
 >A : Symbol(A, Decl(enumLiteralUnionNotWidened.ts, 0, 0))
->one : Symbol(A.one, Decl(enumLiteralUnionNotWidened.ts, 1, 8))
->two : Symbol(A.two, Decl(enumLiteralUnionNotWidened.ts, 1, 21))
+>one : Symbol(one, Decl(enumLiteralUnionNotWidened.ts, 1, 8))
+>two : Symbol(two, Decl(enumLiteralUnionNotWidened.ts, 1, 21))
 
 enum B { foo = "foo", bar = "bar" };
 >B : Symbol(B, Decl(enumLiteralUnionNotWidened.ts, 1, 36))
->foo : Symbol(B.foo, Decl(enumLiteralUnionNotWidened.ts, 2, 8))
->bar : Symbol(B.bar, Decl(enumLiteralUnionNotWidened.ts, 2, 21))
+>foo : Symbol(foo, Decl(enumLiteralUnionNotWidened.ts, 2, 8))
+>bar : Symbol(bar, Decl(enumLiteralUnionNotWidened.ts, 2, 21))
 
 type C = A | B.foo;
 >C : Symbol(C, Decl(enumLiteralUnionNotWidened.ts, 2, 36))
 >A : Symbol(A, Decl(enumLiteralUnionNotWidened.ts, 0, 0))
 >B : Symbol(B, Decl(enumLiteralUnionNotWidened.ts, 1, 36))
->foo : Symbol(B.foo, Decl(enumLiteralUnionNotWidened.ts, 2, 8))
+>foo : Symbol(foo, Decl(enumLiteralUnionNotWidened.ts, 2, 8))
 
 type D = A | "foo";
 >D : Symbol(D, Decl(enumLiteralUnionNotWidened.ts, 4, 19))
@@= skipped -23, +23 lines =@@
 >T : Symbol(T, Decl(enumLiteralUnionNotWidened.ts, 7, 11))
 {
 	private readonly items: T[] = [];
->items : Symbol(List.items, Decl(enumLiteralUnionNotWidened.ts, 8, 1))
+>items : Symbol(items, Decl(enumLiteralUnionNotWidened.ts, 8, 1))
 >T : Symbol(T, Decl(enumLiteralUnionNotWidened.ts, 7, 11))
 }
 
