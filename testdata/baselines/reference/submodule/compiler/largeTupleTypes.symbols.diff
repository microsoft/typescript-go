--- old.largeTupleTypes.symbols
+++ new.largeTupleTypes.symbols
@@= skipped -23, +23 lines =@@
 type Shift<A extends Array<any>> = ((...args: A) => void) extends (...args: [A[0], ...infer R]) => void ? R : never;
 >Shift : Symbol(Shift, Decl(largeTupleTypes.ts, 3, 118))
 >A : Symbol(A, Decl(largeTupleTypes.ts, 4, 11))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >args : Symbol(args, Decl(largeTupleTypes.ts, 4, 37))
 >A : Symbol(A, Decl(largeTupleTypes.ts, 4, 11))
 >args : Symbol(args, Decl(largeTupleTypes.ts, 4, 67))
@@= skipped -11, +11 lines =@@
 type GrowExpRev<A extends Array<any>, N extends number, P extends Array<Array<any>>> = A['length'] extends N ? A : GrowExpRev<[...A, ...P[0]][N] extends undefined ? [...A, ...P[0]] : A, N, Shift<P>>;
 >GrowExpRev : Symbol(GrowExpRev, Decl(largeTupleTypes.ts, 4, 116))
 >A : Symbol(A, Decl(largeTupleTypes.ts, 5, 16))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >N : Symbol(N, Decl(largeTupleTypes.ts, 5, 37))
 >P : Symbol(P, Decl(largeTupleTypes.ts, 5, 55))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >A : Symbol(A, Decl(largeTupleTypes.ts, 5, 16))
 >N : Symbol(N, Decl(largeTupleTypes.ts, 5, 37))
 >A : Symbol(A, Decl(largeTupleTypes.ts, 5, 16))
@@= skipped -22, +22 lines =@@
 type GrowExp<A extends Array<any>, N extends number, P extends Array<Array<any>>> = [...A, ...A][N] extends undefined ? GrowExp<[...A, ...A], N, [A, ...P]> : GrowExpRev<A, N, P>;
 >GrowExp : Symbol(GrowExp, Decl(largeTupleTypes.ts, 5, 199))
 >A : Symbol(A, Decl(largeTupleTypes.ts, 6, 13))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >N : Symbol(N, Decl(largeTupleTypes.ts, 6, 34))
 >P : Symbol(P, Decl(largeTupleTypes.ts, 6, 52))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >A : Symbol(A, Decl(largeTupleTypes.ts, 6, 13))
 >A : Symbol(A, Decl(largeTupleTypes.ts, 6, 13))
 >N : Symbol(N, Decl(largeTupleTypes.ts, 6, 34))
@@= skipped -24, +24 lines =@@
 >T : Symbol(T, Decl(largeTupleTypes.ts, 7, 11))
 >N : Symbol(N, Decl(largeTupleTypes.ts, 7, 13))
 >N : Symbol(N, Decl(largeTupleTypes.ts, 7, 13))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(largeTupleTypes.ts, 7, 11))
 >N : Symbol(N, Decl(largeTupleTypes.ts, 7, 13))
 >N : Symbol(N, Decl(largeTupleTypes.ts, 7, 13))