//// [tests/cases/compiler/typedArrays.ts] ////

=== typedArrays.ts ===
function CreateTypedArrayTypes() {
>CreateTypedArrayTypes : Symbol(CreateTypedArrayTypes, Decl(typedArrays.ts, 0, 0))

    var typedArrays = [];
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 1, 7))

    typedArrays[0] = Int8Array;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 1, 7))

    typedArrays[1] = Uint8Array;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 1, 7))

    typedArrays[2] = Int16Array;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 1, 7))

    typedArrays[3] = Uint16Array;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 1, 7))

    typedArrays[4] = Int32Array;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 1, 7))

    typedArrays[5] = Uint32Array;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 1, 7))

    typedArrays[6] = Float32Array;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 1, 7))

    typedArrays[7] = Float64Array;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 1, 7))

    typedArrays[8] = Uint8ClampedArray;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 1, 7))

    return typedArrays;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 1, 7))
}

function CreateTypedArrayInstancesFromLength(obj: number) {
>CreateTypedArrayInstancesFromLength : Symbol(CreateTypedArrayInstancesFromLength, Decl(typedArrays.ts, 13, 1))
>obj : Symbol(obj, Decl(typedArrays.ts, 15, 45))

    var typedArrays = [];
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 16, 7))

    typedArrays[0] = new Int8Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 16, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 15, 45))

    typedArrays[1] = new Uint8Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 16, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 15, 45))

    typedArrays[2] = new Int16Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 16, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 15, 45))

    typedArrays[3] = new Uint16Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 16, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 15, 45))

    typedArrays[4] = new Int32Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 16, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 15, 45))

    typedArrays[5] = new Uint32Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 16, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 15, 45))

    typedArrays[6] = new Float32Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 16, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 15, 45))

    typedArrays[7] = new Float64Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 16, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 15, 45))

    typedArrays[8] = new Uint8ClampedArray(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 16, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 15, 45))

    return typedArrays;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 16, 7))
}

function CreateTypedArrayInstancesFromArray(obj: number[]) {
>CreateTypedArrayInstancesFromArray : Symbol(CreateTypedArrayInstancesFromArray, Decl(typedArrays.ts, 28, 1))
>obj : Symbol(obj, Decl(typedArrays.ts, 30, 44))

    var typedArrays = [];
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 31, 7))

    typedArrays[0] = new Int8Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 31, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 30, 44))

    typedArrays[1] = new Uint8Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 31, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 30, 44))

    typedArrays[2] = new Int16Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 31, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 30, 44))

    typedArrays[3] = new Uint16Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 31, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 30, 44))

    typedArrays[4] = new Int32Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 31, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 30, 44))

    typedArrays[5] = new Uint32Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 31, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 30, 44))

    typedArrays[6] = new Float32Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 31, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 30, 44))

    typedArrays[7] = new Float64Array(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 31, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 30, 44))

    typedArrays[8] = new Uint8ClampedArray(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 31, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 30, 44))

    return typedArrays;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 31, 7))
}

function CreateIntegerTypedArraysFromArray2(obj:number[]) {
>CreateIntegerTypedArraysFromArray2 : Symbol(CreateIntegerTypedArraysFromArray2, Decl(typedArrays.ts, 43, 1))
>obj : Symbol(obj, Decl(typedArrays.ts, 45, 44))

    var typedArrays = [];
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 46, 7))

    typedArrays[0] = Int8Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 46, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 45, 44))

    typedArrays[1] = Uint8Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 46, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 45, 44))

    typedArrays[2] = Int16Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 46, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 45, 44))

    typedArrays[3] = Uint16Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 46, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 45, 44))

    typedArrays[4] = Int32Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 46, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 45, 44))

    typedArrays[5] = Uint32Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 46, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 45, 44))

    typedArrays[6] = Float32Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 46, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 45, 44))

    typedArrays[7] = Float64Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 46, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 45, 44))

    typedArrays[8] = Uint8ClampedArray.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 46, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 45, 44))

    return typedArrays;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 46, 7))
}

function CreateIntegerTypedArraysFromArrayLike(obj:ArrayLike<number>) {
>CreateIntegerTypedArraysFromArrayLike : Symbol(CreateIntegerTypedArraysFromArrayLike, Decl(typedArrays.ts, 58, 1))
>obj : Symbol(obj, Decl(typedArrays.ts, 60, 47))
>ArrayLike : Symbol(ArrayLike)

    var typedArrays = [];
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 61, 7))

    typedArrays[0] = Int8Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 61, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 60, 47))

    typedArrays[1] = Uint8Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 61, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 60, 47))

    typedArrays[2] = Int16Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 61, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 60, 47))

    typedArrays[3] = Uint16Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 61, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 60, 47))

    typedArrays[4] = Int32Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 61, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 60, 47))

    typedArrays[5] = Uint32Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 61, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 60, 47))

    typedArrays[6] = Float32Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 61, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 60, 47))

    typedArrays[7] = Float64Array.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 61, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 60, 47))

    typedArrays[8] = Uint8ClampedArray.from(obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 61, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 60, 47))

    return typedArrays;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 61, 7))
}

function CreateTypedArraysOf(obj) {
>CreateTypedArraysOf : Symbol(CreateTypedArraysOf, Decl(typedArrays.ts, 73, 1))
>obj : Symbol(obj, Decl(typedArrays.ts, 75, 29))

    var typedArrays = [];
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 76, 7))

    typedArrays[0] = Int8Array.of(...obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 76, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 75, 29))

    typedArrays[1] = Uint8Array.of(...obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 76, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 75, 29))

    typedArrays[2] = Int16Array.of(...obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 76, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 75, 29))

    typedArrays[3] = Uint16Array.of(...obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 76, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 75, 29))

    typedArrays[4] = Int32Array.of(...obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 76, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 75, 29))

    typedArrays[5] = Uint32Array.of(...obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 76, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 75, 29))

    typedArrays[6] = Float32Array.of(...obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 76, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 75, 29))

    typedArrays[7] = Float64Array.of(...obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 76, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 75, 29))

    typedArrays[8] = Uint8ClampedArray.of(...obj);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 76, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 75, 29))

    return typedArrays;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 76, 7))
}

function CreateTypedArraysOf2() {
>CreateTypedArraysOf2 : Symbol(CreateTypedArraysOf2, Decl(typedArrays.ts, 88, 1))

    var typedArrays = [];
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 91, 7))

    typedArrays[0] = Int8Array.of(1,2,3,4);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 91, 7))

    typedArrays[1] = Uint8Array.of(1,2,3,4);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 91, 7))

    typedArrays[2] = Int16Array.of(1,2,3,4);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 91, 7))

    typedArrays[3] = Uint16Array.of(1,2,3,4);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 91, 7))

    typedArrays[4] = Int32Array.of(1,2,3,4);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 91, 7))

    typedArrays[5] = Uint32Array.of(1,2,3,4);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 91, 7))

    typedArrays[6] = Float32Array.of(1,2,3,4);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 91, 7))

    typedArrays[7] = Float64Array.of(1,2,3,4);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 91, 7))

    typedArrays[8] = Uint8ClampedArray.of(1,2,3,4);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 91, 7))

    return typedArrays;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 91, 7))
}

function CreateTypedArraysFromMapFn2<T>(obj:ArrayLike<T>, mapFn: (n:T, v:number)=> number) {
>CreateTypedArraysFromMapFn2 : Symbol(CreateTypedArraysFromMapFn2, Decl(typedArrays.ts, 103, 1))
>T : Symbol(T, Decl(typedArrays.ts, 105, 37))
>obj : Symbol(obj, Decl(typedArrays.ts, 105, 40))
>ArrayLike : Symbol(ArrayLike)
>T : Symbol(T, Decl(typedArrays.ts, 105, 37))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 105, 57))
>n : Symbol(n, Decl(typedArrays.ts, 105, 66))
>T : Symbol(T, Decl(typedArrays.ts, 105, 37))
>v : Symbol(v, Decl(typedArrays.ts, 105, 70))

    var typedArrays = [];
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 106, 7))

    typedArrays[0] = Int8Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 106, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 105, 40))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 105, 57))

    typedArrays[1] = Uint8Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 106, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 105, 40))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 105, 57))

    typedArrays[2] = Int16Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 106, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 105, 40))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 105, 57))

    typedArrays[3] = Uint16Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 106, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 105, 40))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 105, 57))

    typedArrays[4] = Int32Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 106, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 105, 40))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 105, 57))

    typedArrays[5] = Uint32Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 106, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 105, 40))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 105, 57))

    typedArrays[6] = Float32Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 106, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 105, 40))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 105, 57))

    typedArrays[7] = Float64Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 106, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 105, 40))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 105, 57))

    typedArrays[8] = Uint8ClampedArray.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 106, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 105, 40))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 105, 57))

    return typedArrays;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 106, 7))
}

function CreateTypedArraysFromMapFn(obj:ArrayLike<number>, mapFn: (n:number, v:number)=> number) {
>CreateTypedArraysFromMapFn : Symbol(CreateTypedArraysFromMapFn, Decl(typedArrays.ts, 118, 1))
>obj : Symbol(obj, Decl(typedArrays.ts, 120, 36))
>ArrayLike : Symbol(ArrayLike)
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 120, 58))
>n : Symbol(n, Decl(typedArrays.ts, 120, 67))
>v : Symbol(v, Decl(typedArrays.ts, 120, 76))

    var typedArrays = [];
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 121, 7))

    typedArrays[0] = Int8Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 121, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 120, 36))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 120, 58))

    typedArrays[1] = Uint8Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 121, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 120, 36))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 120, 58))

    typedArrays[2] = Int16Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 121, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 120, 36))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 120, 58))

    typedArrays[3] = Uint16Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 121, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 120, 36))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 120, 58))

    typedArrays[4] = Int32Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 121, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 120, 36))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 120, 58))

    typedArrays[5] = Uint32Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 121, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 120, 36))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 120, 58))

    typedArrays[6] = Float32Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 121, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 120, 36))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 120, 58))

    typedArrays[7] = Float64Array.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 121, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 120, 36))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 120, 58))

    typedArrays[8] = Uint8ClampedArray.from(obj, mapFn);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 121, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 120, 36))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 120, 58))

    return typedArrays;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 121, 7))
}

function CreateTypedArraysFromThisObj(obj:ArrayLike<number>, mapFn: (n:number, v:number)=> number, thisArg: {}) {
>CreateTypedArraysFromThisObj : Symbol(CreateTypedArraysFromThisObj, Decl(typedArrays.ts, 133, 1))
>obj : Symbol(obj, Decl(typedArrays.ts, 135, 38))
>ArrayLike : Symbol(ArrayLike)
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 135, 60))
>n : Symbol(n, Decl(typedArrays.ts, 135, 69))
>v : Symbol(v, Decl(typedArrays.ts, 135, 78))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 135, 98))

    var typedArrays = [];
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 136, 7))

    typedArrays[0] = Int8Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 136, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 135, 38))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 135, 60))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 135, 98))

    typedArrays[1] = Uint8Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 136, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 135, 38))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 135, 60))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 135, 98))

    typedArrays[2] = Int16Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 136, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 135, 38))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 135, 60))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 135, 98))

    typedArrays[3] = Uint16Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 136, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 135, 38))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 135, 60))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 135, 98))

    typedArrays[4] = Int32Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 136, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 135, 38))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 135, 60))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 135, 98))

    typedArrays[5] = Uint32Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 136, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 135, 38))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 135, 60))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 135, 98))

    typedArrays[6] = Float32Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 136, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 135, 38))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 135, 60))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 135, 98))

    typedArrays[7] = Float64Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 136, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 135, 38))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 135, 60))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 135, 98))

    typedArrays[8] = Uint8ClampedArray.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 136, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 135, 38))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 135, 60))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 135, 98))

    return typedArrays;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 136, 7))
}

function CreateTypedArraysFromThisObj2<T>(obj:ArrayLike<T>, mapFn: (n:T, v:number)=> number, thisArg: {}) {
>CreateTypedArraysFromThisObj2 : Symbol(CreateTypedArraysFromThisObj2, Decl(typedArrays.ts, 148, 1))
>T : Symbol(T, Decl(typedArrays.ts, 150, 39))
>obj : Symbol(obj, Decl(typedArrays.ts, 150, 42))
>ArrayLike : Symbol(ArrayLike)
>T : Symbol(T, Decl(typedArrays.ts, 150, 39))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 150, 59))
>n : Symbol(n, Decl(typedArrays.ts, 150, 68))
>T : Symbol(T, Decl(typedArrays.ts, 150, 39))
>v : Symbol(v, Decl(typedArrays.ts, 150, 72))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 150, 92))

    var typedArrays = [];
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 151, 7))

    typedArrays[0] = Int8Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 151, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 150, 42))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 150, 59))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 150, 92))

    typedArrays[1] = Uint8Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 151, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 150, 42))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 150, 59))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 150, 92))

    typedArrays[2] = Int16Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 151, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 150, 42))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 150, 59))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 150, 92))

    typedArrays[3] = Uint16Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 151, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 150, 42))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 150, 59))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 150, 92))

    typedArrays[4] = Int32Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 151, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 150, 42))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 150, 59))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 150, 92))

    typedArrays[5] = Uint32Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 151, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 150, 42))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 150, 59))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 150, 92))

    typedArrays[6] = Float32Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 151, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 150, 42))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 150, 59))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 150, 92))

    typedArrays[7] = Float64Array.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 151, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 150, 42))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 150, 59))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 150, 92))

    typedArrays[8] = Uint8ClampedArray.from(obj, mapFn, thisArg);
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 151, 7))
>obj : Symbol(obj, Decl(typedArrays.ts, 150, 42))
>mapFn : Symbol(mapFn, Decl(typedArrays.ts, 150, 59))
>thisArg : Symbol(thisArg, Decl(typedArrays.ts, 150, 92))

    return typedArrays;
>typedArrays : Symbol(typedArrays, Decl(typedArrays.ts, 151, 7))
}
