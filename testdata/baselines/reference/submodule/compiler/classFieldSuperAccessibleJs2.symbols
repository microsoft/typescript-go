//// [tests/cases/compiler/classFieldSuperAccessibleJs2.ts] ////

=== index.js ===
class C {
>C : Symbol(C, Decl(index.js, 0, 0))

  constructor() {
    this.foo = () => {
>this.foo : Symbol(foo, Decl(index.js, 5, 3))
>this : Symbol(C, Decl(index.js, 0, 0))
>foo : Symbol(foo, Decl(index.js, 5, 3))

      console.log("called arrow");
>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(log, Decl(lib.dom.d.ts, --, --))

    };
  }
  foo() {
>foo : Symbol(foo, Decl(index.js, 5, 3))

    console.log("called method");
>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
  }
}

class D extends C {
>D : Symbol(D, Decl(index.js, 9, 1))
>C : Symbol(C, Decl(index.js, 0, 0))

  foo() {
>foo : Symbol(foo, Decl(index.js, 11, 19))

    console.log("SUPER:");
>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(log, Decl(lib.dom.d.ts, --, --))

    super.foo();
>super.foo : Symbol(foo, Decl(index.js, 5, 3))
>super : Symbol(C, Decl(index.js, 0, 0))
>foo : Symbol(foo, Decl(index.js, 5, 3))

    console.log("THIS:");
>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(log, Decl(lib.dom.d.ts, --, --))

    this.foo();
>this.foo : Symbol(foo, Decl(index.js, 11, 19))
>this : Symbol(D, Decl(index.js, 9, 1))
>foo : Symbol(foo, Decl(index.js, 11, 19))
  }
}

const obj = new D();
>obj : Symbol(obj, Decl(index.js, 20, 5))
>D : Symbol(D, Decl(index.js, 9, 1))

obj.foo();
>obj.foo : Symbol(foo, Decl(index.js, 11, 19))
>obj : Symbol(obj, Decl(index.js, 20, 5))
>foo : Symbol(foo, Decl(index.js, 11, 19))

D.prototype.foo.call(obj);
>D.prototype.foo.call : Symbol(call, Decl(lib.es5.d.ts, --, --))
>D.prototype.foo : Symbol(foo, Decl(index.js, 11, 19))
>D.prototype : Symbol(prototype)
>D : Symbol(D, Decl(index.js, 9, 1))
>prototype : Symbol(prototype)
>foo : Symbol(foo, Decl(index.js, 11, 19))
>call : Symbol(call, Decl(lib.es5.d.ts, --, --))
>obj : Symbol(obj, Decl(index.js, 20, 5))

