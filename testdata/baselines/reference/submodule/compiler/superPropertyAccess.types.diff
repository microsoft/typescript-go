--- old.superPropertyAccess.types
+++ new.superPropertyAccess.types
@@= skipped -50, +50 lines =@@
         var l2 = super.m1.bind(this);                       // Should be allowed, can access properties as well as invoke
 >l2 : any
 >super.m1.bind(this) : any
->super.m1.bind : (this: Function, thisArg: any, ...argArray: any[]) => any
+>super.m1.bind : (thisArg: any, ...argArray: any[]) => any
 >super.m1 : (a: string) => string
 >super : MyBase
 >m1 : (a: string) => string
->bind : (this: Function, thisArg: any, ...argArray: any[]) => any
+>bind : (thisArg: any, ...argArray: any[]) => any
 >this : this
 
         var x: (a: string) => string = super.m1;            // Should be allowed, can assign to var with compatible signature
@@= skipped -16, +16 lines =@@
 
         super.m2.bind(this);                                // Should error, instance property, not a public instance member function
 >super.m2.bind(this) : any
->super.m2.bind : (this: Function, thisArg: any, ...argArray: any[]) => any
+>super.m2.bind : (thisArg: any, ...argArray: any[]) => any
 >super.m2 : () => void
 >super : MyBase
 >m2 : () => void
->bind : (this: Function, thisArg: any, ...argArray: any[]) => any
+>bind : (thisArg: any, ...argArray: any[]) => any
 >this : this
 
         super.p1();                                         // Should error, private not public instance member function
