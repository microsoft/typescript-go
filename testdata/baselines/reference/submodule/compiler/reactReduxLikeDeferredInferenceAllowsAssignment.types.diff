--- old.reactReduxLikeDeferredInferenceAllowsAssignment.types
+++ new.reactReduxLikeDeferredInferenceAllowsAssignment.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/reactReduxLikeDeferredInferenceAllowsAssignment.ts] ////
 
-=== Performance Stats ===
-Instantiation count: 2,500
-
 === reactReduxLikeDeferredInferenceAllowsAssignment.ts ===
 declare class Component<P> {
 >Component : Component<P>
+>P : P
 
   constructor(props: Readonly<P>);
 >props : Readonly<P>
@@= skipped -14, +12 lines =@@
 >context : any
 
   readonly props: Readonly<P> & Readonly<{ children?: {} }>;
->props : Readonly<P> & Readonly<{ children?: {}; }>
+>props : Readonly<P> & Readonly<{ children?: {} | undefined; }>
 >children : {} | undefined
 }
 interface ComponentClass<P = {}> {
+>ComponentClass : ComponentClass<P>
+>P : P
+
   new (props: P, context?: any): Component<P>;
 >props : P
 >context : any
@@= skipped -18, +21 lines =@@
 >displayName : string | undefined
 }
 interface FunctionComponent<P = {}> {
+>FunctionComponent : FunctionComponent<P>
+>P : P
+
   (props: P & { children?: {} }, context?: any): {} | null;
->props : P & { children?: {}; }
+>props : P & { children?: {} | undefined; }
 >children : {} | undefined
 >context : any
 
@@= skipped -19, +22 lines =@@
 >nominalTypeHack : unique symbol
 
 interface Validator<T> {
+>Validator : Validator<T>
+>T : T
+
   (
     props: object,
 >props : object
@@= skipped -23, +26 lines =@@
 }
 type WeakValidationMap<T> = {
 >WeakValidationMap : WeakValidationMap<T>
+>T : T
 
   [K in keyof T]?: null extends T[K]
+>K : K
+
     ? Validator<T[K] | null | undefined>
     : undefined extends T[K]
     ? Validator<T[K] | null | undefined>
@@= skipped -9, +12 lines =@@
 };
 type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;
 >ComponentType : ComponentType<P>
+>P : P
 
 type Shared<
 >Shared : Shared<InjectedProps, DecorationTargetProps>
 
   InjectedProps,
+>InjectedProps : InjectedProps
+
   DecorationTargetProps extends Shared<InjectedProps, DecorationTargetProps>
+>DecorationTargetProps : DecorationTargetProps
+
 > = {
   [P in Extract<
+>P : P
+
     keyof InjectedProps,
     keyof DecorationTargetProps
   >]?: InjectedProps[P] extends DecorationTargetProps[P]
@@= skipped -18, +25 lines =@@
 // Infers prop type from component C
 type GetProps<C> = C extends ComponentType<infer P> ? P : never;
 >GetProps : GetProps<C>
+>C : C
+>P : P
 
 type ConnectedComponentClass<C extends ComponentType<any>, P> = ComponentClass<
 >ConnectedComponentClass : ConnectedComponentClass<C, P>
+>C : C
+>P : P
 
   P
 > & {
@@= skipped -13, +17 lines =@@
 
 type Matching<InjectedProps, DecorationTargetProps> = {
 >Matching : Matching<InjectedProps, DecorationTargetProps>
+>InjectedProps : InjectedProps
+>DecorationTargetProps : DecorationTargetProps
 
   [P in keyof DecorationTargetProps]: P extends keyof InjectedProps
+>P : P
+
     ? InjectedProps[P] extends DecorationTargetProps[P]
       ? DecorationTargetProps[P]
       : InjectedProps[P]
@@= skipped -10, +14 lines =@@
 
 type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
 >Omit : Omit<T, K>
+>T : T
+>K : K
 
 type InferableComponentEnhancerWithProps<TInjectedProps, TNeedsProps> = <
 >InferableComponentEnhancerWithProps : InferableComponentEnhancerWithProps<TInjectedProps, TNeedsProps>
+>TInjectedProps : TInjectedProps
+>TNeedsProps : TNeedsProps
 
   C extends ComponentType<Matching<TInjectedProps, GetProps<C>>>
+>C : C
+
 >(
   component: C
 >component : C
@@= skipped -15, +21 lines =@@
 >;
 
 declare const connect: {
->connect : <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(mapStateToProps: null | undefined, mapDispatchToProps: TDispatchProps) => InferableComponentEnhancerWithProps<ResolveThunks<TDispatchProps>, TOwnProps>
+>connect : <no_state, TDispatchProps, TOwnProps>(mapStateToProps: null | undefined, mapDispatchToProps: TDispatchProps) => InferableComponentEnhancerWithProps<ResolveThunks<TDispatchProps>, TOwnProps>
 
   <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(
+>no_state : no_state
+>TDispatchProps : TDispatchProps
+>TOwnProps : TOwnProps
+
     mapStateToProps: null | undefined,
 >mapStateToProps : null | undefined
 
@@= skipped -19, +23 lines =@@
 >InferThunkActionCreatorType : InferThunkActionCreatorType<TActionCreator>
 
   TActionCreator extends (...args: any[]) => any
+>TActionCreator : TActionCreator
 >args : any[]
 
 > = TActionCreator extends (
   ...args: infer TParams
 >args : TParams
+>TParams : TParams
 
 ) => (...args: any[]) => infer TReturn
 >args : any[]
+>TReturn : TReturn
 
   ? (...args: TParams) => TReturn
 >args : TParams
@@= skipped -16, +19 lines =@@
 
 type HandleThunkActionCreator<TActionCreator> = TActionCreator extends (
 >HandleThunkActionCreator : HandleThunkActionCreator<TActionCreator>
+>TActionCreator : TActionCreator
 
   ...args: any[]
 >args : any[]
@@= skipped -10, +11 lines =@@
 
 type ResolveThunks<TDispatchProps> = TDispatchProps extends {
 >ResolveThunks : ResolveThunks<TDispatchProps>
+>TDispatchProps : TDispatchProps
 
   [key: string]: any;
 >key : string
 }
   ? { [C in keyof TDispatchProps]: HandleThunkActionCreator<TDispatchProps[C]> }
+>C : C
+
   : TDispatchProps;
 
 interface Dispatch<A extends Action = AnyAction> {
+>Dispatch : Dispatch<A>
+>A : A
+
   <T extends A>(action: T): T;
+>T : T
 >action : T
 }
 interface Action<T = any> {
+>Action : Action<T>
+>T : T
+
   type: T;
 >type : T
 }
 interface AnyAction extends Action {
+>AnyAction : AnyAction
+
   [extraProps: string]: any;
 >extraProps : string
 }
@@= skipped -36, +48 lines =@@
 
 });
 const thunkAction = (param1: number, param2: string) => async (
->thunkAction : (param1: number, param2: string) => (dispatch: Dispatch, { foo }: OwnProps) => Promise<string>
->(param1: number, param2: string) => async (  dispatch: Dispatch,  { foo }: OwnProps) => {  return foo;} : (param1: number, param2: string) => (dispatch: Dispatch, { foo }: OwnProps) => Promise<string>
+>thunkAction : (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>
+>(param1: number, param2: string) => async (  dispatch: Dispatch,  { foo }: OwnProps) => {  return foo;} : (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>
 >param1 : number
 >param2 : string
->async (  dispatch: Dispatch,  { foo }: OwnProps) => {  return foo;} : (dispatch: Dispatch, { foo }: OwnProps) => Promise<string>
+>async (  dispatch: Dispatch,  { foo }: OwnProps) => {  return foo;} : (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>
 
   dispatch: Dispatch,
 >dispatch : Dispatch<AnyAction>
@@= skipped -18, +18 lines =@@
 
 };
 interface OwnProps {
+>OwnProps : OwnProps
+
   foo: string;
 >foo : string
 }
 interface TestComponentProps extends OwnProps {
+>TestComponentProps : TestComponentProps
+
   simpleAction: typeof simpleAction;
 >simpleAction : (payload: boolean) => { type: string; payload: boolean; }
->simpleAction : (payload: boolean) => { type: string; payload: boolean; }
 
   thunkAction(param1: number, param2: string): Promise<string>;
 >thunkAction : (param1: number, param2: string) => Promise<string>
@@= skipped -18, +21 lines =@@
 >Component : Component<TestComponentProps>
 
 const mapDispatchToProps = { simpleAction, thunkAction };
->mapDispatchToProps : { simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (param1: number, param2: string) => (dispatch: Dispatch, { foo }: OwnProps) => Promise<string>; }
->{ simpleAction, thunkAction } : { simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (param1: number, param2: string) => (dispatch: Dispatch, { foo }: OwnProps) => Promise<string>; }
+>mapDispatchToProps : { simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>; }
+>{ simpleAction, thunkAction } : { simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>; }
 >simpleAction : (payload: boolean) => { type: string; payload: boolean; }
->thunkAction : (param1: number, param2: string) => (dispatch: Dispatch, { foo }: OwnProps) => Promise<string>
+>thunkAction : (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>
 
 type Q = HandleThunkActionCreator<typeof simpleAction>;
 >Q : (payload: boolean) => { type: string; payload: boolean; }
->simpleAction : (payload: boolean) => { type: string; payload: boolean; }
 
 const Test1 = connect(
 >Test1 : ConnectedComponentClass<typeof TestComponent, Omit<TestComponentProps, "simpleAction" | "thunkAction">>
 >connect(  null,  mapDispatchToProps)(TestComponent) : ConnectedComponentClass<typeof TestComponent, Omit<TestComponentProps, "simpleAction" | "thunkAction">>
->connect(  null,  mapDispatchToProps) : InferableComponentEnhancerWithProps<{ simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (param1: number, param2: string) => Promise<string>; }, {}>
->connect : <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(mapStateToProps: null | undefined, mapDispatchToProps: TDispatchProps) => InferableComponentEnhancerWithProps<ResolveThunks<TDispatchProps>, TOwnProps>
+>connect(  null,  mapDispatchToProps) : InferableComponentEnhancerWithProps<{ simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (...args: [param1: number, param2: string]) => Promise<string>; }, {}>
+>connect : <no_state, TDispatchProps, TOwnProps>(mapStateToProps: null | undefined, mapDispatchToProps: TDispatchProps) => InferableComponentEnhancerWithProps<ResolveThunks<TDispatchProps>, TOwnProps>
 
   null,
   mapDispatchToProps
->mapDispatchToProps : { simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (param1: number, param2: string) => (dispatch: Dispatch, { foo }: OwnProps) => Promise<string>; }
+>mapDispatchToProps : { simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>; }
 
 )(TestComponent);
 >TestComponent : typeof TestComponent
