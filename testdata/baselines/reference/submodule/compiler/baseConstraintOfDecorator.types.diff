--- old.baseConstraintOfDecorator.types
+++ new.baseConstraintOfDecorator.types
@@= skipped -2, +2 lines =@@
 === baseConstraintOfDecorator.ts ===
 export function classExtender<TFunction>(superClass: TFunction, _instanceModifier: (instance: any, args: any[]) => void): TFunction {
 >classExtender : <TFunction>(superClass: TFunction, _instanceModifier: (instance: any, args: any[]) => void) => TFunction
+>TFunction : TFunction
 >superClass : TFunction
 >_instanceModifier : (instance: any, args: any[]) => void
 >instance : any
@@= skipped -34, +35 lines =@@
 
 export function classExtender2<TFunction extends new (...args: string[]) => MyClass>(superClass: TFunction, _instanceModifier: (instance: any, args: any[]) => void): TFunction {
 >classExtender2 : <TFunction extends new (...args: string[]) => MyClass>(superClass: TFunction, _instanceModifier: (instance: any, args: any[]) => void) => TFunction
+>TFunction : TFunction
 >args : string[]
 >superClass : TFunction
 >_instanceModifier : (instance: any, args: any[]) => void
@@= skipped -7, +8 lines =@@
 >args : any[]
 
     return class decoratorFunc extends superClass {
->class decoratorFunc extends superClass {        constructor(...args: any[]) {            super(...args);            _instanceModifier(this, args);        }    } : { new (...args: any[]): decoratorFunc; prototype: classExtender2<any>.decoratorFunc; } & TFunction
->decoratorFunc : { new (...args: any[]): decoratorFunc; prototype: classExtender2<any>.decoratorFunc; } & TFunction
+>class decoratorFunc extends superClass {        constructor(...args: any[]) {            super(...args);            _instanceModifier(this, args);        }    } : { new (...args: any[]): decoratorFunc<TFunction>; prototype: decoratorFunc<any>; } & TFunction
+>decoratorFunc : { new (...args: any[]): decoratorFunc<TFunction>; prototype: decoratorFunc<any>; } & TFunction
 >superClass : MyClass
 
         constructor(...args: any[]) {
