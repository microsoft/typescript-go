--- old.classPropInitializationInferenceWithElementAccess.errors.txt
+++ new.classPropInitializationInferenceWithElementAccess.errors.txt
@@= skipped -0, +0 lines =@@
-<no content>
+classPropInitializationInferenceWithElementAccess.ts(3,5): error TS7022: 'x' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
+classPropInitializationInferenceWithElementAccess.ts(4,5): error TS7022: 'y' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
+classPropInitializationInferenceWithElementAccess.ts(5,5): error TS7022: 'z' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
+classPropInitializationInferenceWithElementAccess.ts(7,5): error TS7022: '0' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
+
+
+==== classPropInitializationInferenceWithElementAccess.ts (4 errors) ====
+    // repro #49339
+    export class Cls {
+        x;
+        ~
+!!! error TS7022: 'x' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
+        y;
+        ~
+!!! error TS7022: 'y' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
+        z;
+        ~
+!!! error TS7022: 'z' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
+        
+        0;
+        ~
+!!! error TS7022: '0' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
+    
+        constructor(seed: number) {
+            this['x'] = [seed];
+            this['y'] = { seed };
+            this['z'] = `${seed}`;
+    
+            this[0] = [seed];
+        }
+    }