//// [tests/cases/compiler/modularizeLibrary_NoErrorDuplicateLibOptions2.ts] ////

=== modularizeLibrary_NoErrorDuplicateLibOptions2.ts ===
// Using Es6 array
function f(x: number, y: number, z: number) {
>f : Symbol(f, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 0, 0))
>x : Symbol(x, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 1, 11))
>y : Symbol(y, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 1, 21))
>z : Symbol(z, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 1, 32))

    return Array.from(arguments);
>arguments : Symbol(arguments)
}

f(1, 2, 3);  // no error
>f : Symbol(f, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 0, 0))

// Using ES6 collection
var m = new Map<string, number>();
>m : Symbol(m, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 8, 3))

m.clear();
>m : Symbol(m, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 8, 3))

// Using ES6 iterable
m.keys();
>m : Symbol(m, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 8, 3))

// Using ES6 function
function Baz() { }
>Baz : Symbol(Baz, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 11, 9))

Baz.name;
>Baz : Symbol(Baz, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 11, 9))

// Using ES6 generator
function* gen() {
>gen : Symbol(gen, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 15, 9))

    let i = 0;
>i : Symbol(i, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 19, 7))

    while (i < 10) {
>i : Symbol(i, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 19, 7))

        yield i;
>i : Symbol(i, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 19, 7))

        i++;
>i : Symbol(i, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 19, 7))
    }
}

function* gen2() {
>gen2 : Symbol(gen2, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 24, 1))

    let i = 0;
>i : Symbol(i, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 27, 7))

    while (i < 10) {
>i : Symbol(i, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 27, 7))

        yield i;
>i : Symbol(i, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 27, 7))

        i++;
>i : Symbol(i, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 27, 7))
    }
}

// Using ES6 math
Math.sign(1);

// Using ES6 object
var o = {
>o : Symbol(o, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 38, 3))

    a: 2,
>a : Symbol(a, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 38, 9))

    [Symbol.hasInstance](value: any) {
>[Symbol.hasInstance] : Symbol([Symbol.hasInstance], Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 39, 9))
>value : Symbol(value, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 40, 25))

        return false;
    }
};
o.hasOwnProperty(Symbol.hasInstance);
>o : Symbol(o, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 38, 3))

// Using ES6 promise
async function out() {
>out : Symbol(out, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 44, 37))

    return new Promise(function (resolve, reject) {});
>resolve : Symbol(resolve, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 48, 33))
>reject : Symbol(reject, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 48, 41))
}

declare var console: any;
>console : Symbol(console, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 51, 11))

out().then(() => {
>out : Symbol(out, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 44, 37))

    console.log("Yea!");
>console : Symbol(console, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 51, 11))

});

// Using Es6 proxy
var t = {}
>t : Symbol(t, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 57, 3))

var p = new Proxy(t, {});
>p : Symbol(p, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 58, 3))
>t : Symbol(t, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 57, 3))

// Using ES6 reflect
Reflect.isExtensible({});

// Using Es6 regexp
var reg = new RegExp("/s");
>reg : Symbol(reg, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 64, 3))

reg.flags;
>reg : Symbol(reg, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 64, 3))

// Using ES6 string
var str = "Hello world";
>str : Symbol(str, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 68, 3))

str.includes("hello", 0);
>str : Symbol(str, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 68, 3))

// Using ES6 symbol
var s = Symbol();
>s : Symbol(s, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 72, 3))

// Using ES6 wellknown-symbol
const o1 = {
>o1 : Symbol(o1, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 75, 5))

    [Symbol.hasInstance](value: any) {
>[Symbol.hasInstance] : Symbol([Symbol.hasInstance], Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 75, 12))
>value : Symbol(value, Decl(modularizeLibrary_NoErrorDuplicateLibOptions2.ts, 76, 25))

        return false;
    }
}
