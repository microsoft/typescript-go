--- old.typeArgumentInferenceWithConstraintAsCommonRoot.symbols
+++ new.typeArgumentInferenceWithConstraintAsCommonRoot.symbols
@@= skipped -2, +2 lines =@@
 === typeArgumentInferenceWithConstraintAsCommonRoot.ts ===
 interface Animal { x }
 >Animal : Symbol(Animal, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 0, 0))
->x : Symbol(Animal.x, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 0, 18))
+>x : Symbol(x, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 0, 18))
 
 interface Giraffe extends Animal { y }
 >Giraffe : Symbol(Giraffe, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 0, 22))
 >Animal : Symbol(Animal, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 0, 0))
->y : Symbol(Giraffe.y, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 1, 34))
+>y : Symbol(y, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 1, 34))
 
 interface Elephant extends Animal { z }
 >Elephant : Symbol(Elephant, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 1, 38))
 >Animal : Symbol(Animal, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 0, 0))
->z : Symbol(Elephant.z, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 2, 35))
+>z : Symbol(z, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 2, 35))
 
 function f<T extends Animal>(x: T, y: T): T { return undefined; }
 >f : Symbol(f, Decl(typeArgumentInferenceWithConstraintAsCommonRoot.ts, 2, 39))
