--- old.importedAliasedConditionalTypeInstantiation.types
+++ new.importedAliasedConditionalTypeInstantiation.types
@@= skipped -2, +2 lines =@@
 === node_modules/aws-lambda/index.d.ts ===
 export type Handler<TEvent = any, TResult = any> = (
 >Handler : Handler<TEvent, TResult>
+>TEvent : TEvent
+>TResult : TResult
 
     event: TEvent,
 >event : TEvent
@@= skipped -14, +16 lines =@@
 
 export type Callback<TResult = any> = (error?: Error | string | null, result?: TResult) => void;
 >Callback : Callback<TResult>
+>TResult : TResult
 >error : string | Error
 >result : TResult
 
@@= skipped -13, +14 lines =@@
 
     type HandlerEvent<T extends Handler> = T extends Handler<infer TEvent> ? TEvent : never;
 >HandlerEvent : HandlerEvent<T>
+>T : T
+>TEvent : TEvent
 
     type HandlerResult<T extends Handler> = T extends Handler<any, infer TResult> ? TResult : never;
 >HandlerResult : HandlerResult<T>
+>T : T
+>TResult : TResult
 
     type HandlerError<T extends Handler> = T extends Handler<any, infer TResult>
 >HandlerError : HandlerError<T>
+>T : T
+>TResult : TResult
 
         ? NonNullable<Parameters<Callback<TResult>>['0']>
         : never;
 
     interface VerifierFn<S> {
+>VerifierFn : VerifierFn<S>
+>S : S
+
         (result: S, additional?: any): void | Promise<void>;
 >result : S
 >additional : any
@@= skipped -22, +31 lines =@@
     }
     type Verifier<S> = S extends HandlerError<Handler>
 >Verifier : Verifier<S>
+>S : S
 
         ? S extends string
             ? VerifierFn<string>
@@= skipped -10, +11 lines =@@
 
     class LambdaTester<T extends Handler> {
 >LambdaTester : LambdaTester<T>
+>T : T
 
         event(event: HandlerEvent<T>): this;
 >event : (event: HandlerEvent<T>) => this
@@= skipped -9, +10 lines =@@
 
 declare function lambdaTester<T extends Handler>(handler: T): lambdaTester.LambdaTester<T>;
 >lambdaTester : typeof lambdaTester
+>T : T
 >handler : T
 >lambdaTester : any
 
@@= skipped -14, +15 lines =@@
 >Handler : any
 
 type Actual = lambdaTester.Verifier<lambdaTester.HandlerResult<Handler>>;
->Actual : lambdaTester.VerifierFn<string> | lambdaTester.VerifierFn<Error> | lambdaTester.VerifierFn<any>
+>Actual : VerifierFn<any> | VerifierFn<string> | VerifierFn<Error>
 >lambdaTester : any
 >lambdaTester : any
 
 type Expected = lambdaTester.Verifier<lambdaTester.HandlerResult<Handler<any, any>>>;
->Expected : lambdaTester.VerifierFn<string> | lambdaTester.VerifierFn<Error> | lambdaTester.VerifierFn<any>
+>Expected : VerifierFn<any> | VerifierFn<string> | VerifierFn<Error>
 >lambdaTester : any
 >lambdaTester : any
 
