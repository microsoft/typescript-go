--- old.tupleTypeInference2.types
+++ new.tupleTypeInference2.types
@@= skipped -4, +4 lines =@@
 
 type A<R> = [R] | [R, string];
 >A : A<R>
+>R : R
 
 declare function f<T>(x: A<T>): T;
 >f : <T>(x: A<T>) => T
+>T : T
 >x : A<T>
 
 f([undefined, ''] as [never, string]); // T: never
@@= skipped -25, +27 lines =@@
 
 type B<R, S> = [R] | [R, S];
 >B : B<R, S>
+>R : R
+>S : S
 
 declare function g<T, U>(f: B<T, U>): U;
 >g : <T, U>(f: B<T, U>) => U
+>T : T
+>U : U
 >f : B<T, U>
 
 g([[]] as [void[]]); // U: {}
@@= skipped -14, +18 lines =@@
 
 type C<R, S> = [R[]] | [R[], S];
 >C : C<R, S>
+>R : R
+>S : S
 
 declare function h<T, U>(f: C<T, U>): U;
 >h : <T, U>(f: C<T, U>) => U
+>T : T
+>U : U
 >f : C<T, U>
 
 h([[]] as [void[]]); // U: {}
@@= skipped -16, +20 lines =@@
 
 type C2<R> = [R[]] | [R[], void];
 >C2 : C2<R>
+>R : R
 
 declare function h2<T>(f: C2<T>): T;
 >h2 : <T>(f: C2<T>) => T
+>T : T
 >f : C2<T>
 
 h2([[]] as [never[]]); // T: never
