--- old.symbolLinkDeclarationEmitModuleNames.types
+++ new.symbolLinkDeclarationEmitModuleNames.types
@@= skipped -16, +16 lines =@@
 export const CONTROLLER_CLASS = BindingKey.create<ControllerClass>(null as any); // line in question
 >CONTROLLER_CLASS : BindingKey<ControllerClass>
 >BindingKey.create<ControllerClass>(null as any) : BindingKey<ControllerClass>
->BindingKey.create : <T extends import("monorepo/context/index").Constructor<any>>(ctor: T) => BindingKey<T>
+>BindingKey.create : <T extends Constructor<any>>(ctor: T) => BindingKey<T>
 >BindingKey : typeof BindingKey
->create : <T extends import("monorepo/context/index").Constructor<any>>(ctor: T) => BindingKey<T>
+>create : <T extends Constructor<any>>(ctor: T) => BindingKey<T>
 >null as any : any
 
 === monorepo/context/src/value-promise.ts ===
 export type Constructor<T> = (...args: any[]) => T;
 >Constructor : Constructor<T>
+>T : T
 >args : any[]
 
 === monorepo/context/src/bindingkey.ts ===
@@= skipped -16, +17 lines =@@
 
 export class BindingKey<T> {
 >BindingKey : BindingKey<T>
+>T : T
 
   readonly __type: T;
 >__type : T
 
   static create<T extends Constructor<any>>(ctor: T) {
 >create : <T extends Constructor<any>>(ctor: T) => BindingKey<T>
+>T : T
 >ctor : T
 
     return new BindingKey<T>();
