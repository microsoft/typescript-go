--- old.classUpdateTests.symbols
+++ new.classUpdateTests.symbols
@@= skipped -7, +7 lines =@@
 >A : Symbol(A, Decl(classUpdateTests.ts, 0, 0))
 
 	public p1 = 0;
->p1 : Symbol(A.p1, Decl(classUpdateTests.ts, 3, 9))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 3, 9))
 
 	private p2 = 0;
->p2 : Symbol(A.p2, Decl(classUpdateTests.ts, 4, 15))
+>p2 : Symbol(p2, Decl(classUpdateTests.ts, 4, 15))
 
 	p3;
->p3 : Symbol(A.p3, Decl(classUpdateTests.ts, 5, 16))
+>p3 : Symbol(p3, Decl(classUpdateTests.ts, 5, 16))
 }
 
 class B {
 >B : Symbol(B, Decl(classUpdateTests.ts, 7, 1))
 
 	public p1 = 0;
->p1 : Symbol(B.p1, Decl(classUpdateTests.ts, 9, 9))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 9, 9))
 
 	private p2 = 0;
->p2 : Symbol(B.p2, Decl(classUpdateTests.ts, 10, 15))
+>p2 : Symbol(p2, Decl(classUpdateTests.ts, 10, 15))
 
 	p3;
->p3 : Symbol(B.p3, Decl(classUpdateTests.ts, 11, 16))
+>p3 : Symbol(p3, Decl(classUpdateTests.ts, 11, 16))
 
 	constructor() {}
 }
@@= skipped -28, +28 lines =@@
 >C : Symbol(C, Decl(classUpdateTests.ts, 15, 1))
 
 	constructor(public p1=0, private p2=0, p3=0) {}
->p1 : Symbol(C.p1, Decl(classUpdateTests.ts, 18, 13))
->p2 : Symbol(C.p2, Decl(classUpdateTests.ts, 18, 25))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 18, 13))
+>p2 : Symbol(p2, Decl(classUpdateTests.ts, 18, 25))
 >p3 : Symbol(p3, Decl(classUpdateTests.ts, 18, 39))
 }
 
@@= skipped -18, +18 lines =@@
 >D : Symbol(D, Decl(classUpdateTests.ts, 19, 1))
 
 	public p1 = 0;
->p1 : Symbol(E.p1, Decl(classUpdateTests.ts, 28, 19))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 28, 19))
 }
 
 class F extends E {
@@= skipped -15, +15 lines =@@
 >D : Symbol(D, Decl(classUpdateTests.ts, 19, 1))
 
 	public p1 = 0;
->p1 : Symbol(G.p1, Decl(classUpdateTests.ts, 36, 19))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 36, 19))
 
 	constructor() { super(); } // NO ERROR
 >super : Symbol(D, Decl(classUpdateTests.ts, 19, 1))
@@= skipped -25, +25 lines =@@
 >G : Symbol(G, Decl(classUpdateTests.ts, 34, 1))
 
 	constructor(public p1:number) {
->p1 : Symbol(J.p1, Decl(classUpdateTests.ts, 50, 13))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 50, 13))
 
 		super(); // NO ERROR
 >super : Symbol(G, Decl(classUpdateTests.ts, 34, 1))
@@= skipped -12, +12 lines =@@
 >G : Symbol(G, Decl(classUpdateTests.ts, 34, 1))
 
 	constructor(public p1:number) { // ERROR
->p1 : Symbol(K.p1, Decl(classUpdateTests.ts, 56, 13))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 56, 13))
 
 		var i = 0;
 >i : Symbol(i, Decl(classUpdateTests.ts, 57, 5))
@@= skipped -15, +15 lines =@@
 >G : Symbol(G, Decl(classUpdateTests.ts, 34, 1))
 
 	constructor(private p1:number) {
->p1 : Symbol(L.p1, Decl(classUpdateTests.ts, 63, 13))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 63, 13))
 
 		super(); // NO ERROR
 >super : Symbol(G, Decl(classUpdateTests.ts, 34, 1))
@@= skipped -12, +12 lines =@@
 >G : Symbol(G, Decl(classUpdateTests.ts, 34, 1))
 
 	constructor(private p1:number) { // ERROR
->p1 : Symbol(M.p1, Decl(classUpdateTests.ts, 69, 13))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 69, 13))
 
 		var i = 0;
 >i : Symbol(i, Decl(classUpdateTests.ts, 70, 5))
@@= skipped -17, +17 lines =@@
 >N : Symbol(N, Decl(classUpdateTests.ts, 73, 1))
 
 	public p1 = 0;
->p1 : Symbol(N.p1, Decl(classUpdateTests.ts, 78, 9))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 78, 9))
 
 	public p2 = this.p1;
->p2 : Symbol(N.p2, Decl(classUpdateTests.ts, 79, 15))
->this.p1 : Symbol(N.p1, Decl(classUpdateTests.ts, 78, 9))
+>p2 : Symbol(p2, Decl(classUpdateTests.ts, 79, 15))
+>this.p1 : Symbol(p1, Decl(classUpdateTests.ts, 78, 9))
 >this : Symbol(N, Decl(classUpdateTests.ts, 73, 1))
->p1 : Symbol(N.p1, Decl(classUpdateTests.ts, 78, 9))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 78, 9))
 
 	constructor() {
 		this.p2 = 0;
->this.p2 : Symbol(N.p2, Decl(classUpdateTests.ts, 79, 15))
+>this.p2 : Symbol(p2, Decl(classUpdateTests.ts, 79, 15))
 >this : Symbol(N, Decl(classUpdateTests.ts, 73, 1))
->p2 : Symbol(N.p2, Decl(classUpdateTests.ts, 79, 15))
+>p2 : Symbol(p2, Decl(classUpdateTests.ts, 79, 15))
 	}
 }
 
@@= skipped -24, +24 lines =@@
 
 	constructor() {
 		public p1 = 0; // ERROR
->p1 : Symbol(O.p1, Decl(classUpdateTests.ts, 91, 16))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 91, 16))
 	}
 }
 
@@= skipped -9, +9 lines =@@
 
 	constructor() {
 		private p1 = 0; // ERROR
->p1 : Symbol(P.p1, Decl(classUpdateTests.ts, 97, 16))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 97, 16))
 	}
 }
 
@@= skipped -9, +9 lines =@@
 
 	constructor() {
 		public this.p1 = 0; // ERROR
->this : Symbol(Q.this, Decl(classUpdateTests.ts, 103, 16))
->p1 : Symbol(Q.p1, Decl(classUpdateTests.ts, 104, 14))
+>this : Symbol(this, Decl(classUpdateTests.ts, 103, 16))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 104, 14))
 	}
 }
 
@@= skipped -10, +10 lines =@@
 
 	constructor() {
 		private this.p1 = 0; // ERROR
->this : Symbol(R.this, Decl(classUpdateTests.ts, 109, 16))
->p1 : Symbol(R.p1, Decl(classUpdateTests.ts, 110, 15))
+>this : Symbol(this, Decl(classUpdateTests.ts, 109, 16))
+>p1 : Symbol(p1, Decl(classUpdateTests.ts, 110, 15))
 	}
 }
