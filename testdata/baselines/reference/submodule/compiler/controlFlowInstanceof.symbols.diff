--- old.controlFlowInstanceof.symbols
+++ new.controlFlowInstanceof.symbols
@@= skipped -26, +26 lines =@@
 >s : Symbol(s, Decl(controlFlowInstanceof.ts, 2, 12))
 
     s.add(42);
->s.add : Symbol(Set.add, Decl(lib.es2015.collection.d.ts, --, --))
+>s.add : Symbol(add, Decl(lib.es2015.collection.d.ts, --, --))
 >s : Symbol(s, Decl(controlFlowInstanceof.ts, 2, 12))
->add : Symbol(Set.add, Decl(lib.es2015.collection.d.ts, --, --))
+>add : Symbol(add, Decl(lib.es2015.collection.d.ts, --, --))
 }
 
 function f2(s: Set<string> | Set<number>) {
@@= skipped -29, +29 lines =@@
 >s : Symbol(s, Decl(controlFlowInstanceof.ts, 12, 12))
 
     s.add(42);
->s.add : Symbol(Set.add, Decl(lib.es2015.collection.d.ts, --, --))
+>s.add : Symbol(add, Decl(lib.es2015.collection.d.ts, --, --))
 >s : Symbol(s, Decl(controlFlowInstanceof.ts, 12, 12))
->add : Symbol(Set.add, Decl(lib.es2015.collection.d.ts, --, --))
+>add : Symbol(add, Decl(lib.es2015.collection.d.ts, --, --))
 }
 
 function f3(s: Set<string> | Set<number>) {
@@= skipped -57, +57 lines =@@
 
 class A { a: string }
 >A : Symbol(A, Decl(controlFlowInstanceof.ts, 41, 1))
->a : Symbol(A.a, Decl(controlFlowInstanceof.ts, 45, 9))
+>a : Symbol(a, Decl(controlFlowInstanceof.ts, 45, 9))
 
 class B extends A { b: string }
 >B : Symbol(B, Decl(controlFlowInstanceof.ts, 45, 21))
 >A : Symbol(A, Decl(controlFlowInstanceof.ts, 41, 1))
->b : Symbol(B.b, Decl(controlFlowInstanceof.ts, 46, 19))
+>b : Symbol(b, Decl(controlFlowInstanceof.ts, 46, 19))
 
 class C extends A { c: string }
 >C : Symbol(C, Decl(controlFlowInstanceof.ts, 46, 31))
 >A : Symbol(A, Decl(controlFlowInstanceof.ts, 41, 1))
->c : Symbol(C.c, Decl(controlFlowInstanceof.ts, 47, 19))
+>c : Symbol(c, Decl(controlFlowInstanceof.ts, 47, 19))
 
 function foo(x: A | undefined) {
 >foo : Symbol(foo, Decl(controlFlowInstanceof.ts, 47, 31))
@@= skipped -88, +88 lines =@@
 >X : Symbol(X, Decl(controlFlowInstanceof.ts, 77, 1))
 
     x?: string;
->x : Symbol(X.x, Decl(controlFlowInstanceof.ts, 82, 13))
+>x : Symbol(x, Decl(controlFlowInstanceof.ts, 82, 13))
 }
 
 class Y {
 >Y : Symbol(Y, Decl(controlFlowInstanceof.ts, 84, 1))
 
     y: string;
->y : Symbol(Y.y, Decl(controlFlowInstanceof.ts, 86, 9))
+>y : Symbol(y, Decl(controlFlowInstanceof.ts, 86, 9))
 }
 
 function goo(x: X) {
@@= skipped -23, +23 lines =@@
 >Y : Symbol(Y, Decl(controlFlowInstanceof.ts, 84, 1))
 
         x.y;
->x.y : Symbol(Y.y, Decl(controlFlowInstanceof.ts, 86, 9))
+>x.y : Symbol(y, Decl(controlFlowInstanceof.ts, 86, 9))
 >x : Symbol(x, Decl(controlFlowInstanceof.ts, 90, 13))
->y : Symbol(Y.y, Decl(controlFlowInstanceof.ts, 86, 9))
+>y : Symbol(y, Decl(controlFlowInstanceof.ts, 86, 9))
     }
     x;
 >x : Symbol(x, Decl(controlFlowInstanceof.ts, 90, 13))
@@= skipped -31, +31 lines =@@
 function AtTop(val) { this.val = val }
 >AtTop : Symbol(AtTop, Decl(uglify.js, 0, 0))
 >val : Symbol(val, Decl(uglify.js, 1, 15))
->this.val : Symbol(AtTop.val, Decl(uglify.js, 1, 21))
->this : Symbol(AtTop, Decl(uglify.js, 0, 0))
->val : Symbol(AtTop.val, Decl(uglify.js, 1, 21))
 >val : Symbol(val, Decl(uglify.js, 1, 15))
 
 /** @type {*} */
@@= skipped -14, +11 lines =@@
 >AtTop : Symbol(AtTop, Decl(uglify.js, 0, 0))
 
     v.val
->v.val : Symbol(AtTop.val, Decl(uglify.js, 1, 21))
 >v : Symbol(v, Decl(uglify.js, 3, 3))
->val : Symbol(AtTop.val, Decl(uglify.js, 1, 21))
 }
 
