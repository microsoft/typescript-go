--- old.quickinfoTypeAtReturnPositionsInaccurate.types
+++ new.quickinfoTypeAtReturnPositionsInaccurate.types
@@= skipped -2, +2 lines =@@
 === quickinfoTypeAtReturnPositionsInaccurate.ts ===
 class NumClass<T extends number> {
 >NumClass : NumClass<T>
+>T : T
 
     private value!: T;
 >value : T
@@= skipped -18, +19 lines =@@
 
 class StrClass<T extends string> {
 >StrClass : StrClass<T>
+>T : T
 
     private value!: T;
 >value : T
@@= skipped -19, +20 lines =@@
 const isNumClass = <Item extends NumClass<number> | StrClass<string>> (
 >isNumClass : <Item extends NumClass<number> | StrClass<string>>(item: Item) => item is Extract<Item, NumClass<any>>
 ><Item extends NumClass<number> | StrClass<string>> (        item: Item    ): item is Extract<Item, NumClass<any>> => {        return (item instanceof NumClass);    } : <Item extends NumClass<number> | StrClass<string>>(item: Item) => item is Extract<Item, NumClass<any>>
+>Item : Item
 
         item: Item
 >item : Item
@@= skipped -18, +19 lines =@@
  */
 class SimpleStore<Entries extends { [index: string]: NumClass<number> | StrClass<string> }> {
 >SimpleStore : SimpleStore<Entries>
+>Entries : Entries
 >index : string
 
     private entries = { } as Entries;
@@= skipped -9, +10 lines =@@
 
     public get<EntryId extends keyof Entries>(entryId: EntryId): Entries[EntryId] {
 >get : <EntryId extends keyof Entries>(entryId: EntryId) => Entries[EntryId]
+>EntryId : EntryId
 >entryId : EntryId
 
         let entry = this.entries[entryId];
@@= skipped -52, +53 lines =@@
  */
 class ComplexStore<Slices extends { [index: string]: Slice }> {
 >ComplexStore : ComplexStore<Slices>
+>Slices : Slices
 >index : string
 
     private slices = { } as Slices;
@@= skipped -9, +10 lines =@@
 
     public get<SliceId extends keyof Slices, SliceKey extends keyof Slices[SliceId]>(
 >get : <SliceId extends keyof Slices, SliceKey extends keyof Slices[SliceId]>(sliceId: SliceId, sliceKey: SliceKey) => Slices[SliceId][SliceKey]
+>SliceId : SliceId
+>SliceKey : SliceKey
 
         sliceId: SliceId, sliceKey: SliceKey
 >sliceId : SliceId
@@= skipped -30, +32 lines =@@
 
         item.get();
 >item.get() : string | number
->item.get : (() => number) | (() => string)
+>item.get : () => number | () => string
 >item : NumClass<number> | StrClass<string>
->get : (() => number) | (() => string)
+>get : () => number | () => string
 
         // unfortunately, doesn't work completely.
         // it seems like item's predicated type leaks outside the bracket...
@@= skipped -13, +13 lines =@@
 
     public get2<SliceId extends keyof Slices, SliceKey extends keyof Slices[SliceId]>(
 >get2 : <SliceId extends keyof Slices, SliceKey extends keyof Slices[SliceId]>(sliceId: SliceId, sliceKey: SliceKey) => Slices[SliceId][SliceKey]
+>SliceId : SliceId
+>SliceKey : SliceKey
 
         sliceId: SliceId, sliceKey: SliceKey
 >sliceId : SliceId
@@= skipped -29, +31 lines =@@
 
         item.get();
 >item.get() : string | number
->item.get : (() => number) | (() => string)
+>item.get : () => number | () => string
 >item : NumClass<number> | StrClass<string>
->get : (() => number) | (() => string)
+>get : () => number | () => string
 
         return item; // type is never
 >item : Slices[SliceId][SliceKey]
@@= skipped -11, +11 lines =@@
 
 // from the compiler itself
 interface BuilderProgram {
+>BuilderProgram : BuilderProgram
+
     getProgram(): Program;
 >getProgram : () => Program
 }
 interface Program {
+>Program : Program
+
     state: any;
 >state : any
 }
 declare function isBuilderProgram<T extends BuilderProgram>(program: Program | T): program is T;
->isBuilderProgram : <T extends BuilderProgram>(program: Program | T) => program is T
->program : Program | T
+>isBuilderProgram : <T extends BuilderProgram>(program: T | Program) => program is T
+>T : T
+>program : T | Program
 
 export function listFiles<T extends BuilderProgram>(program: Program | T) {
->listFiles : <T extends BuilderProgram>(program: Program | T) => void
->program : Program | T
+>listFiles : <T extends BuilderProgram>(program: T | Program) => void
+>T : T
+>program : T | Program
 
     const x: Program = isBuilderProgram(program) ? program.getProgram() : program;
 >x : Program
 >isBuilderProgram(program) ? program.getProgram() : program : Program
 >isBuilderProgram(program) : boolean
->isBuilderProgram : <T_1 extends BuilderProgram>(program: Program | T_1) => program is T_1
->program : Program | T
+>isBuilderProgram : <T extends BuilderProgram>(program: T | Program) => program is T
+>program : T | Program
 >program.getProgram() : Program
 >program.getProgram : () => Program
 >program : T
