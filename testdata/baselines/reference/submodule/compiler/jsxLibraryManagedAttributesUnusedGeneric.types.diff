--- old.jsxLibraryManagedAttributesUnusedGeneric.types
+++ new.jsxLibraryManagedAttributesUnusedGeneric.types
@@= skipped -3, +3 lines =@@
 // @ts-ignore
 import React from 'react'
 >React : any
->      : ^^^
 
 declare const jsx: typeof React.createElement
->jsx : error
->React.createElement : error
+>jsx : any
 >React : any
->      : ^^^
->createElement : any
->              : ^^^
 
 namespace jsx {
+>jsx : any
+
     export namespace JSX {
+>JSX : any
+
         export interface Element {}
+>Element : Element
+
         export interface ElementClass {}
+>ElementClass : ElementClass
+
         export interface ElementAttributesProperty {}
+>ElementAttributesProperty : ElementAttributesProperty
+
         export interface ElementChildrenAttribute {}
+>ElementChildrenAttribute : ElementChildrenAttribute
+
         export interface IntrinsicAttributes {}
+>IntrinsicAttributes : IntrinsicAttributes
+
         export interface IntrinsicClassAttributes<T> {}
+>IntrinsicClassAttributes : IntrinsicClassAttributes<T>
+>T : T
+
         export type IntrinsicElements = {
 >IntrinsicElements : IntrinsicElements
->                  : ^^^^^^^^^^^^^^^^^
 
             div: { className: string }
 >div : { className: string; }
->    : ^^^^^^^^^^^^^      ^^^
 >className : string
->          : ^^^^^^
         }
         // Works
         // export type LibraryManagedAttributes<C, P> = P & { css: string };
@@= skipped -34, +43 lines =@@
         // Equivalent to above, but fails
         export type WithCSSProp<P> = P & { css: string }
 >WithCSSProp : WithCSSProp<P>
->            : ^^^^^^^^^^^^^^
+>P : P
 >css : string
->    : ^^^^^^
 
         export type LibraryManagedAttributes<C, P> = WithCSSProp<P>
 >LibraryManagedAttributes : LibraryManagedAttributes<C, P>
->                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>C : C
+>P : P
 
     }
 }
 
 declare const Comp: (p: { className?: string }) => null
 >Comp : (p: { className?: string; }) => null
->     : ^ ^^                       ^^^^^    
 >p : { className?: string; }
->  : ^^^^^^^^^^^^^^      ^^^
 >className : string
->          : ^^^^^^
 
 ;<Comp css="color:hotpink;" />
-><Comp css="color:hotpink;" /> : jsx.JSX.Element
->                              : ^^^^^^^^^^^^^^^
+><Comp css="color:hotpink;" /> : any
 >Comp : (p: { className?: string; }) => null
->     : ^ ^^                       ^^^^^    
->css : string
->    : ^^^^^^
+>css : any
 
