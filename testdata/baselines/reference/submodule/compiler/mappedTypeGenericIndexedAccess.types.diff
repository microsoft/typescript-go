--- old.mappedTypeGenericIndexedAccess.types
+++ new.mappedTypeGenericIndexedAccess.types
@@= skipped -26, +26 lines =@@
 
     entries: { [T in keyof Types]?: Types[T][] };
 >entries : { first?: { a1: true; }[] | undefined; second?: { a2: true; }[] | undefined; third?: { a3: true; }[] | undefined; }
+>T : T
 
     constructor() {
         this.entries = {};
@@= skipped -12, +13 lines =@@
 
     addEntry<T extends keyof Types>(name: T, entry: Types[T]) {
 >addEntry : <T extends keyof Types>(name: T, entry: Types[T]) => void
+>T : T
 >name : T
 >entry : Types[T]
 
@@= skipped -52, +53 lines =@@
 
 type P<T extends keyof TypesMap> = { t: T; } & TypesMap[T];
 >P : P<T>
+>T : T
 >t : T
 
 type TypeHandlers = {
 >TypeHandlers : TypeHandlers
 
     [T in keyof TypesMap]?: (p: P<T>) => void;
+>T : T
 >p : P<T>
 
 };
 
 const typeHandlers: TypeHandlers = {
 >typeHandlers : TypeHandlers
->{    [0]: (p) => console.log(p.foo),    [1]: (p) => console.log(p.a),} : { 0: (p: P<0>) => void; 1: (p: P<1>) => void; }
+>{    [0]: (p) => console.log(p.foo),    [1]: (p) => console.log(p.a),} : { [0]: (p: P<0>) => void; [1]: (p: P<1>) => void; }
 
     [0]: (p) => console.log(p.foo),
 >[0] : (p: P<0>) => void
@@= skipped -45, +47 lines =@@
 const onSomeEvent = <T extends keyof TypesMap>(p: P<T>) =>
 >onSomeEvent : <T extends keyof TypesMap>(p: P<T>) => void | undefined
 ><T extends keyof TypesMap>(p: P<T>) =>    typeHandlers[p.t]?.(p) : <T extends keyof TypesMap>(p: P<T>) => void | undefined
+>T : T
 >p : P<T>
 
     typeHandlers[p.t]?.(p);
 >typeHandlers[p.t]?.(p) : void | undefined
->typeHandlers[p.t] : ((p: P<T>) => void) | undefined
+>typeHandlers[p.t] : (p: P<T>) => void | undefined
 >typeHandlers : TypeHandlers
 >p.t : T
 >p : { t: T; } & ({ foo: "bar"; } | { a: "b"; })
