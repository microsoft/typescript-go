--- old.enumAssignmentCompat3.symbols
+++ new.enumAssignmentCompat3.symbols
@@= skipped -7, +7 lines =@@
 >E : Symbol(E, Decl(enumAssignmentCompat3.ts, 0, 17))
 
         a, b, c,
->a : Symbol(E.a, Decl(enumAssignmentCompat3.ts, 1, 19))
->b : Symbol(E.b, Decl(enumAssignmentCompat3.ts, 2, 10))
->c : Symbol(E.c, Decl(enumAssignmentCompat3.ts, 2, 13))
+>a : Symbol(a, Decl(enumAssignmentCompat3.ts, 1, 19))
+>b : Symbol(b, Decl(enumAssignmentCompat3.ts, 2, 10))
+>c : Symbol(c, Decl(enumAssignmentCompat3.ts, 2, 13))
     }
 }
 namespace Abc {
@@= skipped -12, +12 lines =@@
 >E : Symbol(E, Decl(enumAssignmentCompat3.ts, 5, 15))
 
         a, b, c,
->a : Symbol(E.a, Decl(enumAssignmentCompat3.ts, 6, 19))
->b : Symbol(E.b, Decl(enumAssignmentCompat3.ts, 7, 10))
->c : Symbol(E.c, Decl(enumAssignmentCompat3.ts, 7, 13))
+>a : Symbol(a, Decl(enumAssignmentCompat3.ts, 6, 19))
+>b : Symbol(b, Decl(enumAssignmentCompat3.ts, 7, 10))
+>c : Symbol(c, Decl(enumAssignmentCompat3.ts, 7, 13))
     }
     export enum Nope {
 >Nope : Symbol(Nope, Decl(enumAssignmentCompat3.ts, 8, 5))
 
         a, b, c,
->a : Symbol(Nope.a, Decl(enumAssignmentCompat3.ts, 9, 22))
->b : Symbol(Nope.b, Decl(enumAssignmentCompat3.ts, 10, 10))
->c : Symbol(Nope.c, Decl(enumAssignmentCompat3.ts, 10, 13))
+>a : Symbol(a, Decl(enumAssignmentCompat3.ts, 9, 22))
+>b : Symbol(b, Decl(enumAssignmentCompat3.ts, 10, 10))
+>c : Symbol(c, Decl(enumAssignmentCompat3.ts, 10, 13))
     }
 }
 namespace Abcd {
@@= skipped -20, +20 lines =@@
 >E : Symbol(E, Decl(enumAssignmentCompat3.ts, 13, 16))
 
         a, b, c, d,
->a : Symbol(E.a, Decl(enumAssignmentCompat3.ts, 14, 19))
->b : Symbol(E.b, Decl(enumAssignmentCompat3.ts, 15, 10))
->c : Symbol(E.c, Decl(enumAssignmentCompat3.ts, 15, 13))
->d : Symbol(E.d, Decl(enumAssignmentCompat3.ts, 15, 16))
+>a : Symbol(a, Decl(enumAssignmentCompat3.ts, 14, 19))
+>b : Symbol(b, Decl(enumAssignmentCompat3.ts, 15, 10))
+>c : Symbol(c, Decl(enumAssignmentCompat3.ts, 15, 13))
+>d : Symbol(d, Decl(enumAssignmentCompat3.ts, 15, 16))
     }
 }
 namespace Ab {
@@= skipped -13, +13 lines =@@
 >E : Symbol(E, Decl(enumAssignmentCompat3.ts, 18, 14))
 
         a, b,
->a : Symbol(E.a, Decl(enumAssignmentCompat3.ts, 19, 19))
->b : Symbol(E.b, Decl(enumAssignmentCompat3.ts, 20, 10))
+>a : Symbol(a, Decl(enumAssignmentCompat3.ts, 19, 19))
+>b : Symbol(b, Decl(enumAssignmentCompat3.ts, 20, 10))
     }
 }
 namespace Cd {
@@= skipped -11, +11 lines =@@
 >E : Symbol(E, Decl(enumAssignmentCompat3.ts, 23, 14))
 
         c, d,
->c : Symbol(E.c, Decl(enumAssignmentCompat3.ts, 24, 19))
->d : Symbol(E.d, Decl(enumAssignmentCompat3.ts, 25, 10))
+>c : Symbol(c, Decl(enumAssignmentCompat3.ts, 24, 19))
+>d : Symbol(d, Decl(enumAssignmentCompat3.ts, 25, 10))
     }
 }
 namespace Const {
@@= skipped -11, +11 lines =@@
 >E : Symbol(E, Decl(enumAssignmentCompat3.ts, 28, 17))
 
         a, b, c,
->a : Symbol(E.a, Decl(enumAssignmentCompat3.ts, 29, 25))
->b : Symbol(E.b, Decl(enumAssignmentCompat3.ts, 30, 10))
->c : Symbol(E.c, Decl(enumAssignmentCompat3.ts, 30, 13))
+>a : Symbol(a, Decl(enumAssignmentCompat3.ts, 29, 25))
+>b : Symbol(b, Decl(enumAssignmentCompat3.ts, 30, 10))
+>c : Symbol(c, Decl(enumAssignmentCompat3.ts, 30, 13))
     }
 }
 namespace Decl {
@@= skipped -12, +12 lines =@@
 >E : Symbol(E, Decl(enumAssignmentCompat3.ts, 33, 16))
 
         a, b, c = 3,
->a : Symbol(E.a, Decl(enumAssignmentCompat3.ts, 34, 27))
->b : Symbol(E.b, Decl(enumAssignmentCompat3.ts, 35, 10))
->c : Symbol(E.c, Decl(enumAssignmentCompat3.ts, 35, 13))
+>a : Symbol(a, Decl(enumAssignmentCompat3.ts, 34, 27))
+>b : Symbol(b, Decl(enumAssignmentCompat3.ts, 35, 10))
+>c : Symbol(c, Decl(enumAssignmentCompat3.ts, 35, 13))
     }
 }
 namespace Merged {
@@= skipped -12, +12 lines =@@
 >E : Symbol(E, Decl(enumAssignmentCompat3.ts, 38, 18), Decl(enumAssignmentCompat3.ts, 41, 5))
 
         a, b, 
->a : Symbol(E.a, Decl(enumAssignmentCompat3.ts, 39, 19))
->b : Symbol(E.b, Decl(enumAssignmentCompat3.ts, 40, 10))
+>a : Symbol(a, Decl(enumAssignmentCompat3.ts, 39, 19))
+>b : Symbol(b, Decl(enumAssignmentCompat3.ts, 40, 10))
     }
     export enum E {
 >E : Symbol(E, Decl(enumAssignmentCompat3.ts, 38, 18), Decl(enumAssignmentCompat3.ts, 41, 5))
 
         c = 3, d,
->c : Symbol(E.c, Decl(enumAssignmentCompat3.ts, 42, 19))
->d : Symbol(E.d, Decl(enumAssignmentCompat3.ts, 43, 14))
+>c : Symbol(c, Decl(enumAssignmentCompat3.ts, 42, 19))
+>d : Symbol(d, Decl(enumAssignmentCompat3.ts, 43, 14))
     }
 }
 
@@= skipped -19, +19 lines =@@
 >E : Symbol(E, Decl(enumAssignmentCompat3.ts, 47, 19), Decl(enumAssignmentCompat3.ts, 50, 5))
 
         a, b, c
->a : Symbol(E.a, Decl(enumAssignmentCompat3.ts, 48, 19))
->b : Symbol(E.b, Decl(enumAssignmentCompat3.ts, 49, 10))
->c : Symbol(E.c, Decl(enumAssignmentCompat3.ts, 49, 13))
+>a : Symbol(a, Decl(enumAssignmentCompat3.ts, 48, 19))
+>b : Symbol(b, Decl(enumAssignmentCompat3.ts, 49, 10))
+>c : Symbol(c, Decl(enumAssignmentCompat3.ts, 49, 13))
     }
     export module E {
 >E : Symbol(E, Decl(enumAssignmentCompat3.ts, 47, 19), Decl(enumAssignmentCompat3.ts, 50, 5))
@@= skipped -15, +15 lines =@@
 var abc: First.E;
 >abc : Symbol(abc, Decl(enumAssignmentCompat3.ts, 56, 3))
 >First : Symbol(First, Decl(enumAssignmentCompat3.ts, 0, 0))
->E : Symbol(First.E, Decl(enumAssignmentCompat3.ts, 0, 17))
+>E : Symbol(E, Decl(enumAssignmentCompat3.ts, 0, 17))
 
 var secondAbc: Abc.E;
 >secondAbc : Symbol(secondAbc, Decl(enumAssignmentCompat3.ts, 57, 3))
 >Abc : Symbol(Abc, Decl(enumAssignmentCompat3.ts, 4, 1))
->E : Symbol(Abc.E, Decl(enumAssignmentCompat3.ts, 5, 15))
+>E : Symbol(E, Decl(enumAssignmentCompat3.ts, 5, 15))
 
 var secondAbcd: Abcd.E;
 >secondAbcd : Symbol(secondAbcd, Decl(enumAssignmentCompat3.ts, 58, 3))
 >Abcd : Symbol(Abcd, Decl(enumAssignmentCompat3.ts, 12, 1))
->E : Symbol(Abcd.E, Decl(enumAssignmentCompat3.ts, 13, 16))
+>E : Symbol(E, Decl(enumAssignmentCompat3.ts, 13, 16))
 
 var secondAb: Ab.E;
 >secondAb : Symbol(secondAb, Decl(enumAssignmentCompat3.ts, 59, 3))
 >Ab : Symbol(Ab, Decl(enumAssignmentCompat3.ts, 17, 1))
->E : Symbol(Ab.E, Decl(enumAssignmentCompat3.ts, 18, 14))
+>E : Symbol(E, Decl(enumAssignmentCompat3.ts, 18, 14))
 
 var secondCd: Cd.E;
 >secondCd : Symbol(secondCd, Decl(enumAssignmentCompat3.ts, 60, 3))
 >Cd : Symbol(Cd, Decl(enumAssignmentCompat3.ts, 22, 1))
->E : Symbol(Cd.E, Decl(enumAssignmentCompat3.ts, 23, 14))
+>E : Symbol(E, Decl(enumAssignmentCompat3.ts, 23, 14))
 
 var nope: Abc.Nope;
 >nope : Symbol(nope, Decl(enumAssignmentCompat3.ts, 61, 3))
 >Abc : Symbol(Abc, Decl(enumAssignmentCompat3.ts, 4, 1))
->Nope : Symbol(Abc.Nope, Decl(enumAssignmentCompat3.ts, 8, 5))
+>Nope : Symbol(Nope, Decl(enumAssignmentCompat3.ts, 8, 5))
 
 var k: Const.E;
 >k : Symbol(k, Decl(enumAssignmentCompat3.ts, 62, 3))
 >Const : Symbol(Const, Decl(enumAssignmentCompat3.ts, 27, 1))
->E : Symbol(Const.E, Decl(enumAssignmentCompat3.ts, 28, 17))
+>E : Symbol(E, Decl(enumAssignmentCompat3.ts, 28, 17))
 
 var decl: Decl.E;
 >decl : Symbol(decl, Decl(enumAssignmentCompat3.ts, 63, 3))
 >Decl : Symbol(Decl, Decl(enumAssignmentCompat3.ts, 32, 1))
->E : Symbol(Decl.E, Decl(enumAssignmentCompat3.ts, 33, 16))
+>E : Symbol(E, Decl(enumAssignmentCompat3.ts, 33, 16))
 
 var merged: Merged.E;
 >merged : Symbol(merged, Decl(enumAssignmentCompat3.ts, 64, 3))
 >Merged : Symbol(Merged, Decl(enumAssignmentCompat3.ts, 37, 1))
->E : Symbol(Merged.E, Decl(enumAssignmentCompat3.ts, 38, 18), Decl(enumAssignmentCompat3.ts, 41, 5))
+>E : Symbol(E, Decl(enumAssignmentCompat3.ts, 38, 18), Decl(enumAssignmentCompat3.ts, 41, 5))
 
 var merged2: Merged2.E;
 >merged2 : Symbol(merged2, Decl(enumAssignmentCompat3.ts, 65, 3))
 >Merged2 : Symbol(Merged2, Decl(enumAssignmentCompat3.ts, 45, 1))
->E : Symbol(Merged2.E, Decl(enumAssignmentCompat3.ts, 47, 19), Decl(enumAssignmentCompat3.ts, 50, 5))
+>E : Symbol(E, Decl(enumAssignmentCompat3.ts, 47, 19), Decl(enumAssignmentCompat3.ts, 50, 5))
 
 abc = secondAbc; // ok
 >abc : Symbol(abc, Decl(enumAssignmentCompat3.ts, 56, 3))
