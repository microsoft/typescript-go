--- old.inferenceExactOptionalProperties2.types
+++ new.inferenceExactOptionalProperties2.types
@@= skipped -70, +70 lines =@@
   }>;

 declare function setup<
->setup : <TActors extends Record<string, UnknownActorLogic> = {}>(implementations?: { actors?: { [K in keyof TActors]: TActors[K]; }; }) => { createMachine: <const TConfig extends MachineConfig<ToProvidedActor<TActors>>>(config: TConfig) => void; }
+>setup : <TActors extends Record<string, UnknownActorLogic> = {}>(implementations?: { actors?: { [K in keyof TActors]: TActors[K]; }; } | undefined) => { createMachine: <const TConfig extends MachineConfig<ToProvidedActor<TActors>>>(config: TConfig) => void; }

   TActors extends Record<string, UnknownActorLogic> = {},
 >(implementations?: {
@@= skipped -30, +30 lines =@@
 >setup({  actors: { counter: counterLogic },}).createMachine({  entry: assign((spawn) => {    spawn("counter"); // ok    spawn("alarm"); // error    return {};  }),}) : void
 >setup({  actors: { counter: counterLogic },}).createMachine : <const TConfig extends MachineConfig<{ src: "counter"; logic: ActorLogic<{ type: "INCREMENT"; }>; }>>(config: TConfig) => void
 >setup({  actors: { counter: counterLogic },}) : { createMachine: <const TConfig extends MachineConfig<{ src: "counter"; logic: ActorLogic<{ type: "INCREMENT"; }>; }>>(config: TConfig) => void; }
->setup : <TActors extends Record<string, UnknownActorLogic> = {}>(implementations?: { actors?: { [K in keyof TActors]: TActors[K]; }; }) => { createMachine: <const TConfig extends MachineConfig<ToProvidedActor<TActors>>>(config: TConfig) => void; }
+>setup : <TActors extends Record<string, UnknownActorLogic> = {}>(implementations?: { actors?: { [K in keyof TActors]: TActors[K]; }; } | undefined) => { createMachine: <const TConfig extends MachineConfig<ToProvidedActor<TActors>>>(config: TConfig) => void; }
 >{  actors: { counter: counterLogic },} : { actors: { counter: ActorLogic<{ type: "INCREMENT"; }>; }; }

   actors: { counter: counterLogic },
@@= skipped -39, +39 lines =@@
 // no provided actors, `assign` should still work
 setup().createMachine({
 >setup().createMachine({  entry: assign(() => ({})),}) : void
->setup().createMachine : <const TConfig extends MachineConfig<never>>(config: TConfig) => void
->setup() : { createMachine: <const TConfig extends MachineConfig<never>>(config: TConfig) => void; }
->setup : <TActors extends Record<string, UnknownActorLogic> = {}>(implementations?: { actors?: { [K in keyof TActors]: TActors[K]; }; }) => { createMachine: <const TConfig extends MachineConfig<ToProvidedActor<TActors>>>(config: TConfig) => void; }
->createMachine : <const TConfig extends MachineConfig<never>>(config: TConfig) => void
->{  entry: assign(() => ({})),} : { entry: AssignAction<never>; }
+>setup().createMachine : <const TConfig extends MachineConfig<{ src: string; logic: UnknownActorLogic; }>>(config: TConfig) => void
+>setup() : { createMachine: <const TConfig extends MachineConfig<{ src: string; logic: UnknownActorLogic; }>>(config: TConfig) => void; }
+>setup : <TActors extends Record<string, UnknownActorLogic> = {}>(implementations?: { actors?: { [K in keyof TActors]: TActors[K]; }; } | undefined) => { createMachine: <const TConfig extends MachineConfig<ToProvidedActor<TActors>>>(config: TConfig) => void; }
+>createMachine : <const TConfig extends MachineConfig<{ src: string; logic: UnknownActorLogic; }>>(config: TConfig) => void
+>{  entry: assign(() => ({})),} : { entry: AssignAction<{ src: string; logic: UnknownActorLogic; }>; }

   entry: assign(() => ({})),
->entry : AssignAction<never>
->assign(() => ({})) : AssignAction<never>
+>entry : AssignAction<{ src: string; logic: UnknownActorLogic; }>
+>assign(() => ({})) : AssignAction<{ src: string; logic: UnknownActorLogic; }>
 >assign : <TActor extends ProvidedActor>(_: (spawn: (actor: TActor["src"]) => void) => {}) => AssignAction<TActor>
 >() => ({}) : () => {}
 >({}) : {}