--- old.wideningWithTopLevelTypeParameter.types
+++ new.wideningWithTopLevelTypeParameter.types
@@= skipped -2, +2 lines =@@
 === wideningWithTopLevelTypeParameter.ts ===
 type C1<T> = T extends unknown ? T | undefined : never;
 >C1 : C1<T>
+>T : T
 
 type C2<T> = T extends unknown ? T | undefined : never;
 >C2 : C2<T>
+>T : T
 
 type C3<T> = T extends unknown ? T | undefined : never;
 >C3 : C3<T>
+>T : T
 
 type C4<T> = T extends unknown ? T | undefined : never;
 >C4 : C4<T>
+>T : T
 
 declare function f0<T>(x: T): [T];
 >f0 : <T>(x: T) => [T]
+>T : T
 >x : T
 
 declare function f1<T>(x: C1<T>): [T];
 >f1 : <T>(x: C1<T>) => [T]
+>T : T
 >x : C1<T>
 
 declare function f2<T>(x: C1<C2<T>>): [T];
 >f2 : <T>(x: C1<C2<T>>) => [T]
+>T : T
 >x : C1<C2<T>>
 
 declare function f3<T>(x: C1<C2<C3<T>>>): [T];
 >f3 : <T>(x: C1<C2<C3<T>>>) => [T]
+>T : T
 >x : C1<C2<C3<T>>>
 
 declare function f4<T>(x: C1<C2<C3<C4<T>>>>): [T];
 >f4 : <T>(x: C1<C2<C3<C4<T>>>>) => [T]
+>T : T
 >x : C1<C2<C3<C4<T>>>>
 
 const c0 = f0(7);  // [number]
@@= skipped -64, +73 lines =@@
 
 class FormControl<T> {
 >FormControl : FormControl<T>
+>T : T
 
     constructor(t: T extends undefined ? never : T) {}
 >t : T extends undefined ? never : T
@@= skipped -13, +14 lines =@@
 
 class FormControl2<T> {
 >FormControl2 : FormControl2<T>
+>T : T
 
     constructor(t: T | string) {}
 >t : string | T
@@= skipped -13, +14 lines =@@
 
 class FormControl3<T> {
 >FormControl3 : FormControl3<T>
+>T : T
 
     constructor(t: T extends undefined ? never : T | string) {}
 >t : T extends undefined ? never : string | T
