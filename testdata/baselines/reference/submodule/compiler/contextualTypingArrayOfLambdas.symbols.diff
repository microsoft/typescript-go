--- old.contextualTypingArrayOfLambdas.symbols
+++ new.contextualTypingArrayOfLambdas.symbols
@@= skipped -4, +4 lines =@@
 >A : Symbol(A, Decl(contextualTypingArrayOfLambdas.ts, 0, 0))
 
     foo: string;
->foo : Symbol(A.foo, Decl(contextualTypingArrayOfLambdas.ts, 0, 9))
+>foo : Symbol(foo, Decl(contextualTypingArrayOfLambdas.ts, 0, 9))
 }
 
 class B extends A {
@@= skipped -8, +8 lines =@@
 >A : Symbol(A, Decl(contextualTypingArrayOfLambdas.ts, 0, 0))
 
     bar: string;
->bar : Symbol(B.bar, Decl(contextualTypingArrayOfLambdas.ts, 4, 19))
+>bar : Symbol(bar, Decl(contextualTypingArrayOfLambdas.ts, 4, 19))
 }
 
 class C extends A {
@@= skipped -8, +8 lines =@@
 >A : Symbol(A, Decl(contextualTypingArrayOfLambdas.ts, 0, 0))
 
     baz: string;
->baz : Symbol(C.baz, Decl(contextualTypingArrayOfLambdas.ts, 8, 19))
+>baz : Symbol(baz, Decl(contextualTypingArrayOfLambdas.ts, 8, 19))
 }
 
 var xs = [(x: A) => { }, (x: B) => { }, (x: C) => { }];
