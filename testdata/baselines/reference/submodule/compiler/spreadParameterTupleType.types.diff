--- old.spreadParameterTupleType.types
+++ new.spreadParameterTupleType.types
@@= skipped -1, +1 lines =@@
 
 === spreadParameterTupleType.ts ===
 function f1() {
->f1 : () => (s: string, s_1: string) => void
+>f1 : () => (...args: [s: string, s: string]) => void
 
     type A = [s: string];
->A : [s: string]
+>A : A
 
     type C = [...A, ...A];
 >C : [s: string, s: string]
 
     return function fn(...args: C) { }
->function fn(...args: C) { } : (s: string, s_1: string) => void
->fn : (s: string, s_1: string) => void
+>function fn(...args: C) { } : (...args: [s: string, s: string]) => void
+>fn : (...args: [s: string, s: string]) => void
 >args : [s: string, s: string]
 }
 
 function f2() {
->f2 : () => (a: string, a_1: string, b: string, a_2: string, b_1: string, b_2: string, a_3: string, c: string) => void
+>f2 : () => (...args: [a: string, a: string, b: string, a: string, b: string, b: string, a: string, c: string]) => void
 
     type A = [a: string];
->A : [a: string]
+>A : A
 
     type B = [b: string];
->B : [b: string]
+>B : B
 
     type C = [c: string];
->C : [c: string]
+>C : C
 
     type D = [...A, ...A, ...B, ...A, ...B, ...B, ...A, ...C];
 >D : [a: string, a: string, b: string, a: string, b: string, b: string, a: string, c: string]
 
     return function fn(...args: D) { }
->function fn(...args: D) { } : (a: string, a_1: string, b: string, a_2: string, b_1: string, b_2: string, a_3: string, c: string) => void
->fn : (a: string, a_1: string, b: string, a_2: string, b_1: string, b_2: string, a_3: string, c: string) => void
+>function fn(...args: D) { } : (...args: [a: string, a: string, b: string, a: string, b: string, b: string, a: string, c: string]) => void
+>fn : (...args: [a: string, a: string, b: string, a: string, b: string, b: string, a: string, c: string]) => void
 >args : [a: string, a: string, b: string, a: string, b: string, b: string, a: string, c: string]
 }
 
