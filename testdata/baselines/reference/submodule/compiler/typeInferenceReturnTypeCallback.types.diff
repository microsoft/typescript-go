--- old.typeInferenceReturnTypeCallback.types
+++ new.typeInferenceReturnTypeCallback.types
@@= skipped -1, +1 lines =@@
 
 === typeInferenceReturnTypeCallback.ts ===
 interface IList<A> {
+>IList : IList<A>
+>A : A
+
     map<B>(f: (t: A) => B): IList<B>;
 >map : <B>(f: (t: A) => B) => IList<B>
+>B : B
 >f : (t: A) => B
 >t : A
 }
 
 class Nil<C> implements IList<C>{
 >Nil : Nil<C>
+>C : C
 
     map<D>(f: (t: C) => D): IList<D> {
 >map : <D>(f: (t: C) => D) => IList<D>
+>D : D
 >f : (t: C) => D
 >t : C
 
@@= skipped -20, +26 lines =@@
 
 class Cons<T> implements IList<T>{
 >Cons : Cons<T>
+>T : T
 
     map<U>(f: (t: T) => U): IList<U> {
 >map : <U>(f: (t: T) => U) => IList<U>
+>U : U
 >f : (t: T) => U
 >t : T
 
@@= skipped -26, +28 lines =@@
 
     foldRight<E>(z: E, f: (t: T, acc: E) => E): E {
 >foldRight : <E>(z: E, f: (t: T, acc: E) => E) => E
+>E : E
 >z : E
 >f : (t: T, acc: E) => E
 >t : T
