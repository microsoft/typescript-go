--- old.controlFlowInstanceofWithSymbolHasInstance.types
+++ new.controlFlowInstanceofWithSymbolHasInstance.types
@@= skipped -1, +1 lines =@@
 
 === controlFlowInstanceofWithSymbolHasInstance.ts ===
 interface PromiseConstructor {
+>PromiseConstructor : PromiseConstructor
+
     [Symbol.hasInstance](value: any): value is Promise<any>;
 >[Symbol.hasInstance] : (value: any) => value is Promise<any>
 >Symbol.hasInstance : unique symbol
@@= skipped -9, +11 lines =@@
 }
 
 interface SetConstructor {
+>SetConstructor : SetConstructor
+
     [Symbol.hasInstance](value: any): value is Set<any>;
 >[Symbol.hasInstance] : (value: any) => value is Set<any>
 >Symbol.hasInstance : unique symbol
@@= skipped -129, +131 lines =@@
 >a : string
 
     static [Symbol.hasInstance]<T>(this: T, value: unknown): value is (
->[Symbol.hasInstance] : <T>(this: T, value: unknown) => value is (T extends (abstract new (...args: any) => infer U) ? U : never)
+>[Symbol.hasInstance] : <T>(value: unknown) => value is T extends new (...args: any) => infer U ? U : never
 >Symbol.hasInstance : unique symbol
 >Symbol : SymbolConstructor
 >hasInstance : unique symbol
+>T : T
 >this : T
 >value : unknown
 
         T extends (abstract new (...args: any) => infer U) ? U :
 >args : any
+>U : U
 
         never
     ) {
         return Function.prototype[Symbol.hasInstance].call(this, value);
 >Function.prototype[Symbol.hasInstance].call(this, value) : any
->Function.prototype[Symbol.hasInstance].call : (this: Function, thisArg: any, ...argArray: any[]) => any
+>Function.prototype[Symbol.hasInstance].call : (thisArg: any, ...argArray: any[]) => any
 >Function.prototype[Symbol.hasInstance] : (value: any) => boolean
 >Function.prototype : Function
 >Function : FunctionConstructor
@@= skipped -22, +24 lines =@@
 >Symbol.hasInstance : unique symbol
 >Symbol : SymbolConstructor
 >hasInstance : unique symbol
->call : (this: Function, thisArg: any, ...argArray: any[]) => any
+>call : (thisArg: any, ...argArray: any[]) => any
 >this : T
 >value : unknown
     }
@@= skipped -96, +96 lines =@@
 // Y is assignable to X, but not a subtype of X
 
 interface X {
+>X : X
+
     x?: string;
 >x : string | undefined
 }
