//// [tests/cases/compiler/implementGenericWithMismatchedTypes.ts] ////

=== implementGenericWithMismatchedTypes.ts ===
// no errors because in the derived types the best common type for T's value is Object
// and that matches the original signature for assignability since we treat its T's as Object

interface IFoo<T> {
>IFoo : IFoo<T>
>T : T

    foo(x: T): T;
>foo : (x: T) => T
>x : T
}
class C<T> implements IFoo<T> { // error
>C : C<T>
>T : T

    foo(x: string): number {
>foo : (x: string) => number
>x : string

        return null;
    }
}

interface IFoo2<T> {
>IFoo2 : IFoo2<T>
>T : T

    foo(x: T): T;
>foo : (x: T) => T
>x : T
}
class C2<T> implements IFoo2<T> { // error
>C2 : C2<T>
>T : T

    foo<Tstring>(x: Tstring): number {
>foo : <Tstring>(x: Tstring) => number
>Tstring : Tstring
>x : Tstring

        return null;
    }
}
