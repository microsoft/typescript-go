--- old.jsFileImportPreservedWhenUsed.types
+++ new.jsFileImportPreservedWhenUsed.types
@@= skipped -2, +2 lines =@@
 === dash.d.ts ===
 type ObjectIterator<TObject, TResult> = (value: TObject[keyof TObject], key: string, collection: TObject) => TResult;
 >ObjectIterator : ObjectIterator<TObject, TResult>
+>TObject : TObject
+>TResult : TResult
 >value : TObject[keyof TObject]
 >key : string
 >collection : TObject
 
 interface LoDashStatic {
+>LoDashStatic : LoDashStatic
+
     mapValues<T extends object, TResult>(obj: T | null | undefined, callback: ObjectIterator<T, TResult>): { [P in keyof T]: TResult };
->mapValues : <T extends object, TResult>(obj: T | null | undefined, callback: ObjectIterator<T, TResult>) => { [P in keyof T]: TResult; }
+>mapValues : <T extends object, TResult>(obj: T | null | undefined, callback: ObjectIterator<T, TResult>) => { [P in keyof T]: TResult }
+>T : T
+>TResult : TResult
 >obj : T | null | undefined
 >callback : ObjectIterator<T, TResult>
+>P : P
 }
 declare const _: LoDashStatic;
 >_ : LoDashStatic
@@= skipped -36, +43 lines =@@
      * @param {object} vm
      */
     test(obj, vm) {
->test : (obj: object, vm: object) => void
->obj : object
->vm : object
+>test : (obj: any, vm: any) => void
+>obj : any
+>vm : any
 
         let index = 0;
 >index : number
 >0 : 0
 
         vm.objects = _.mapValues(
->vm.objects = _.mapValues(            obj,            object => ({ ...object, [INDEX_FIELD]: index++ }),        ) : object
->vm.objects : error
->vm : object
+>vm.objects = _.mapValues(            obj,            object => ({ ...object, [INDEX_FIELD]: index++ }),        ) : { [x: string]: any; }
+>vm.objects : any
+>vm : any
 >objects : any
->_.mapValues(            obj,            object => ({ ...object, [INDEX_FIELD]: index++ }),        ) : object
->_.mapValues : <T extends object, TResult>(obj: T | null | undefined, callback: (value: T[keyof T], key: string, collection: T) => TResult) => { [P in keyof T]: TResult; }
+>_.mapValues(            obj,            object => ({ ...object, [INDEX_FIELD]: index++ }),        ) : { [x: string]: any; }
+>_.mapValues : <T extends object, TResult>(obj: T | null | undefined, callback: ObjectIterator<T, TResult>) => { [P in keyof T]: TResult }
 >_ : LoDashStatic
->mapValues : <T extends object, TResult>(obj: T | null | undefined, callback: (value: T[keyof T], key: string, collection: T) => TResult) => { [P in keyof T]: TResult; }
+>mapValues : <T extends object, TResult>(obj: T | null | undefined, callback: ObjectIterator<T, TResult>) => { [P in keyof T]: TResult }
 
             obj,
->obj : object
+>obj : any
 
             object => ({ ...object, [INDEX_FIELD]: index++ }),
->object => ({ ...object, [INDEX_FIELD]: index++ }) : (object: never) => any
->object : never
->({ ...object, [INDEX_FIELD]: index++ }) : error
->{ ...object, [INDEX_FIELD]: index++ } : error
->object : never
+>object => ({ ...object, [INDEX_FIELD]: index++ }) : (object: any) => any
+>object : any
+>({ ...object, [INDEX_FIELD]: index++ }) : any
+>{ ...object, [INDEX_FIELD]: index++ } : any
+>object : any
 >[INDEX_FIELD] : number
 >INDEX_FIELD : "__INDEX"
 >index++ : number
