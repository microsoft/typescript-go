--- old.conditionalTypesSimplifyWhenTrivial.types
+++ new.conditionalTypesSimplifyWhenTrivial.types
@@= skipped -3, +3 lines =@@
 const fn1 = <Params>(
 >fn1 : <Params>(params: Pick<Params, Exclude<keyof Params, never>>) => Params
 ><Params>(    params: Pick<Params, Exclude<keyof Params, never>>,): Params => params : <Params>(params: Pick<Params, Exclude<keyof Params, never>>) => Params
+>Params : Params
 
     params: Pick<Params, Exclude<keyof Params, never>>,
 >params : Pick<Params, Exclude<keyof Params, never>>
@@= skipped -9, +10 lines =@@
 
 function fn2<T>(x: Exclude<T, never>) {
 >fn2 : <T>(x: Exclude<T, never>) => void
+>T : T
 >x : Exclude<T, never>
 
     var y: T = x;
@@= skipped -15, +16 lines =@@
 const fn3 = <Params>(
 >fn3 : <Params>(params: Pick<Params, Extract<keyof Params, keyof Params>>) => Params
 ><Params>(    params: Pick<Params, Extract<keyof Params, keyof Params>>,): Params => params : <Params>(params: Pick<Params, Extract<keyof Params, keyof Params>>) => Params
+>Params : Params
 
     params: Pick<Params, Extract<keyof Params, keyof Params>>,
 >params : Pick<Params, Extract<keyof Params, keyof Params>>
@@= skipped -9, +10 lines =@@
 
 function fn4<T>(x: Extract<T, T>) {
 >fn4 : <T>(x: Extract<T, T>) => void
+>T : T
 >x : Extract<T, T>
 
     var y: T = x;
@@= skipped -17, +18 lines =@@
 
 type ExtractWithDefault<T, U, D = never> = T extends U ? T : D;
 >ExtractWithDefault : ExtractWithDefault<T, U, D>
+>T : T
+>U : U
+>D : D
 
 type ExcludeWithDefault<T, U, D = never> = T extends U ? D : T;
 >ExcludeWithDefault : ExcludeWithDefault<T, U, D>
+>T : T
+>U : U
+>D : D
 
 const fn5 = <Params>(
->fn5 : <Params>(params: Pick<Params, ExcludeWithDefault<keyof Params, never>>) => Params
-><Params>(    params: Pick<Params, ExcludeWithDefault<keyof Params, never>>,): Params => params : <Params>(params: Pick<Params, ExcludeWithDefault<keyof Params, never>>) => Params
+>fn5 : <Params>(params: Pick<Params, ExcludeWithDefault<keyof Params, never, never>>) => Params
+><Params>(    params: Pick<Params, ExcludeWithDefault<keyof Params, never>>,): Params => params : <Params>(params: Pick<Params, ExcludeWithDefault<keyof Params, never, never>>) => Params
+>Params : Params
 
     params: Pick<Params, ExcludeWithDefault<keyof Params, never>>,
 >params : Pick<Params, ExcludeWithDefault<keyof Params, never, never>>
@@= skipped -15, +22 lines =@@
 >params : Pick<Params, ExcludeWithDefault<keyof Params, never, never>>
 
 function fn6<T>(x: ExcludeWithDefault<T, never>) {
->fn6 : <T>(x: ExcludeWithDefault<T, never>) => void
+>fn6 : <T>(x: ExcludeWithDefault<T, never, never>) => void
+>T : T
 >x : ExcludeWithDefault<T, never, never>
 
     var y: T = x;
@@= skipped -14, +15 lines =@@
 }
 
 const fn7 = <Params>(
->fn7 : <Params>(params: Pick<Params, ExtractWithDefault<keyof Params, keyof Params>>) => Params
-><Params>(    params: Pick<Params, ExtractWithDefault<keyof Params, keyof Params>>,): Params => params : <Params>(params: Pick<Params, ExtractWithDefault<keyof Params, keyof Params>>) => Params
+>fn7 : <Params>(params: Pick<Params, ExtractWithDefault<keyof Params, keyof Params, never>>) => Params
+><Params>(    params: Pick<Params, ExtractWithDefault<keyof Params, keyof Params>>,): Params => params : <Params>(params: Pick<Params, ExtractWithDefault<keyof Params, keyof Params, never>>) => Params
+>Params : Params
 
     params: Pick<Params, ExtractWithDefault<keyof Params, keyof Params>>,
 >params : Pick<Params, ExtractWithDefault<keyof Params, keyof Params, never>>
@@= skipped -10, +11 lines =@@
 >params : Pick<Params, ExtractWithDefault<keyof Params, keyof Params, never>>
 
 function fn8<T>(x: ExtractWithDefault<T, T>) {
->fn8 : <T>(x: ExtractWithDefault<T, T>) => void
+>fn8 : <T>(x: ExtractWithDefault<T, T, never>) => void
+>T : T
 >x : ExtractWithDefault<T, T, never>
 
     var y: T = x;
@@= skipped -15, +16 lines =@@
 
 type TemplatedConditional<TCheck, TExtends, TTrue, TFalse> = TCheck extends TExtends ? TTrue : TFalse;
 >TemplatedConditional : TemplatedConditional<TCheck, TExtends, TTrue, TFalse>
+>TCheck : TCheck
+>TExtends : TExtends
+>TTrue : TTrue
+>TFalse : TFalse
 
 const fn9 = <Params>(
 >fn9 : <Params>(params: Pick<Params, TemplatedConditional<keyof Params, never, never, keyof Params>>) => Params
 ><Params>(    params: Pick<Params, TemplatedConditional<keyof Params, never, never, keyof Params>>,): Params => params : <Params>(params: Pick<Params, TemplatedConditional<keyof Params, never, never, keyof Params>>) => Params
+>Params : Params
 
     params: Pick<Params, TemplatedConditional<keyof Params, never, never, keyof Params>>,
 >params : Pick<Params, TemplatedConditional<keyof Params, never, never, keyof Params>>
@@= skipped -13, +18 lines =@@
 
 function fn10<T>(x: TemplatedConditional<T, never, never, T>) {
 >fn10 : <T>(x: TemplatedConditional<T, never, never, T>) => void
+>T : T
 >x : TemplatedConditional<T, never, never, T>
 
     var y: T = x;
@@= skipped -15, +16 lines =@@
 const fn11 = <Params>(
 >fn11 : <Params>(params: Pick<Params, TemplatedConditional<keyof Params, keyof Params, keyof Params, never>>) => Params
 ><Params>(    params: Pick<Params, TemplatedConditional<keyof Params, keyof Params, keyof Params, never>>,): Params => params : <Params>(params: Pick<Params, TemplatedConditional<keyof Params, keyof Params, keyof Params, never>>) => Params
+>Params : Params
 
     params: Pick<Params, TemplatedConditional<keyof Params, keyof Params, keyof Params, never>>,
 >params : Pick<Params, TemplatedConditional<keyof Params, keyof Params, keyof Params, never>>
@@= skipped -9, +10 lines =@@
 
 function fn12<T>(x: TemplatedConditional<T, T, T, never>) {
 >fn12 : <T>(x: TemplatedConditional<T, T, T, never>) => void
+>T : T
 >x : TemplatedConditional<T, T, T, never>
 
     var y: T = x;
