--- old.inDoesNotOperateOnPrimitiveTypes.types
+++ new.inDoesNotOperateOnPrimitiveTypes.types
@@= skipped -3, +3 lines =@@
 const validHasKey = <T extends object>(
 >validHasKey : <T extends object>(thing: T, key: string) => boolean
 ><T extends object>(  thing: T,  key: string,): boolean => {  return key in thing; // Ok} : <T extends object>(thing: T, key: string) => boolean
+>T : T
 
   thing: T,
 >thing : T
@@= skipped -18, +19 lines =@@
 const alsoValidHasKey = <T>(
 >alsoValidHasKey : <T>(thing: T, key: string) => boolean
 ><T>(  thing: T,  key: string,): boolean => {  return key in thing; // Ok (as T may be instantiated with a valid type)} : <T>(thing: T, key: string) => boolean
+>T : T
 
   thing: T,
 >thing : T
@@= skipped -17, +18 lines =@@
 
 function invalidHasKey<T extends string | number>(
 >invalidHasKey : <T extends string | number>(thing: T, key: string) => boolean
+>T : T
 
   thing: T,
 >thing : T
@@= skipped -16, +17 lines =@@
 
 function union1<T extends string | number, U extends boolean>(thing: T | U) {
 >union1 : <T extends string | number, U extends boolean>(thing: T | U) => void
+>T : T
+>U : U
 >thing : T | U
 
   "key" in thing; // Error (because all possible instantiations are errors)
@@= skipped -10, +12 lines =@@
 
 function union2<T extends object, U extends string | number>(thing: T | U) {
 >union2 : <T extends object, U extends string | number>(thing: T | U) => void
+>T : T
+>U : U
 >thing : T | U
 
   "key" in thing; // Error (because narrowing is possible)
@@= skipped -9, +11 lines =@@
 
   if (typeof thing === "object") {
 >typeof thing === "object" : boolean
->typeof thing : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof thing : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >thing : T | U
 >"object" : "object"
 
@@= skipped -12, +12 lines =@@
 }
 
 function union3<T>(thing: T | string | number) {
->union3 : <T>(thing: T | string | number) => void
+>union3 : <T>(thing: string | number | T) => void
+>T : T
 >thing : string | number | T
 
   "key" in thing; // Error (because narrowing is possible)
@@= skipped -11, +12 lines =@@
   if (typeof thing !== "string" && typeof thing !== "number") {
 >typeof thing !== "string" && typeof thing !== "number" : boolean
 >typeof thing !== "string" : boolean
->typeof thing : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof thing : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >thing : string | number | T
 >"string" : "string"
 >typeof thing !== "number" : boolean
->typeof thing : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof thing : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >thing : number | T
 >"number" : "number"
 
@@= skipped -16, +16 lines =@@
 }
 
 function union4<T extends object | "hello">(thing: T) {
->union4 : <T extends object | "hello">(thing: T) => void
+>union4 : <T extends "hello" | object>(thing: T) => void
+>T : T
 >thing : T
 
   "key" in thing; // Ok (because narrowing is impossible)
@@= skipped -10, +11 lines =@@
 }
 
 function union5<T extends object | string, U extends object | number>(p: T | U) {
->union5 : <T extends object | string, U extends object | number>(p: T | U) => void
+>union5 : <T extends string | object, U extends number | object>(p: T | U) => void
+>T : T
+>U : U
 >p : T | U
 
     // For consistency, this should probably not be an error, because useful
@@= skipped -18, +20 lines =@@
 
     if (typeof p === "object") {
 >typeof p === "object" : boolean
->typeof p : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof p : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >p : T | U
 >"object" : "object"
 
         "key" in p;
 >"key" in p : boolean
 >"key" : "key"
->p : (T & object) | (U & object)
+>p : T & object | U & object
     }
 }
 
 function intersection1<T extends number, U extends 0 | 1 | 2>(thing: T & U) {
 >intersection1 : <T extends number, U extends 0 | 1 | 2>(thing: T & U) => void
+>T : T
+>U : U
 >thing : T & U
 
   "key" in thing; // Error (because all possible instantiations are errors)
@@= skipped -23, +25 lines =@@
 
 function intersection2<T>(thing: T & (0 | 1 | 2)) {
 >intersection2 : <T>(thing: T & (0 | 1 | 2)) => void
+>T : T
 >thing : T & (0 | 1 | 2)
 
   "key" in thing; // Error (because all possible instantations are errors)
