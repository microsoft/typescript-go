--- old.typeGuardConstructorPrimitiveTypes.types
+++ new.typeGuardConstructorPrimitiveTypes.types
@@= skipped -2, +2 lines =@@
 === typeGuardConstructorPrimitiveTypes.ts ===
 // Narrow a union of primitive types
 let var1: string | number | boolean | any[] | symbol | bigint;
->var1 : string | number | bigint | boolean | symbol | any[]
+>var1 : string | number | bigint | symbol | boolean | any[]
 
 if (var1.constructor === String) {
 >var1.constructor === String : boolean
 >var1.constructor : Function
->var1 : string | number | bigint | boolean | symbol | any[]
+>var1 : string | number | bigint | symbol | boolean | any[]
 >constructor : Function
 >String : StringConstructor
 
@@= skipped -15, +15 lines =@@
 if (var1.constructor === Number) {
 >var1.constructor === Number : boolean
 >var1.constructor : Function
->var1 : string | number | bigint | boolean | symbol | any[]
+>var1 : string | number | bigint | symbol | boolean | any[]
 >constructor : Function
 >Number : NumberConstructor
 
@@= skipped -10, +10 lines =@@
 if (var1.constructor === Boolean) {
 >var1.constructor === Boolean : boolean
 >var1.constructor : Function
->var1 : string | number | bigint | boolean | symbol | any[]
+>var1 : string | number | bigint | symbol | boolean | any[]
 >constructor : Function
 >Boolean : BooleanConstructor
 
@@= skipped -10, +10 lines =@@
 if (var1.constructor === Array) {
 >var1.constructor === Array : boolean
 >var1.constructor : Function
->var1 : string | number | bigint | boolean | symbol | any[]
+>var1 : string | number | bigint | symbol | boolean | any[]
 >constructor : Function
 >Array : ArrayConstructor
 
@@= skipped -10, +10 lines =@@
 if (var1.constructor === Symbol) {
 >var1.constructor === Symbol : boolean
 >var1.constructor : Function
->var1 : string | number | bigint | boolean | symbol | any[]
+>var1 : string | number | bigint | symbol | boolean | any[]
 >constructor : Function
 >Symbol : SymbolConstructor
 
@@= skipped -10, +10 lines =@@
 if (var1.constructor === BigInt) {
 >var1.constructor === BigInt : boolean
 >var1.constructor : Function
->var1 : string | number | bigint | boolean | symbol | any[]
+>var1 : string | number | bigint | symbol | boolean | any[]
 >constructor : Function
 >BigInt : BigIntConstructor
 
@@= skipped -10, +10 lines =@@
 
 // Narrow a union of primitive object types
 let var2: String | Number | Boolean | Symbol | BigInt;
->var2 : String | Number | Boolean | BigInt | Symbol
+>var2 : BigInt | Boolean | Number | String | Symbol
 
 if (var2.constructor === String) {
 >var2.constructor === String : boolean
 >var2.constructor : Function
->var2 : String | Number | Boolean | BigInt | Symbol
+>var2 : BigInt | Boolean | Number | String | Symbol
 >constructor : Function
 >String : StringConstructor
 
@@= skipped -15, +15 lines =@@
 if (var2.constructor === Number) {
 >var2.constructor === Number : boolean
 >var2.constructor : Function
->var2 : String | Number | Boolean | BigInt | Symbol
+>var2 : BigInt | Boolean | Number | String | Symbol
 >constructor : Function
 >Number : NumberConstructor
 
@@= skipped -10, +10 lines =@@
 if (var2.constructor === Boolean) {
 >var2.constructor === Boolean : boolean
 >var2.constructor : Function
->var2 : String | Number | Boolean | BigInt | Symbol
+>var2 : BigInt | Boolean | Number | String | Symbol
 >constructor : Function
 >Boolean : BooleanConstructor
 
@@= skipped -10, +10 lines =@@
 if (var2.constructor === Symbol) {
 >var2.constructor === Symbol : boolean
 >var2.constructor : Function
->var2 : String | Number | Boolean | BigInt | Symbol
+>var2 : BigInt | Boolean | Number | String | Symbol
 >constructor : Function
 >Symbol : SymbolConstructor
 
@@= skipped -10, +10 lines =@@
 if (var2.constructor === BigInt) {
 >var2.constructor === BigInt : boolean
 >var2.constructor : Function
->var2 : String | Number | Boolean | BigInt | Symbol
+>var2 : BigInt | Boolean | Number | String | Symbol
 >constructor : Function
 >BigInt : BigIntConstructor
 
