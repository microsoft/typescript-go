--- old.decoratorMetadataPromise.symbols
+++ new.decoratorMetadataPromise.symbols
@@ -3,7 +3,7 @@
 === decoratorMetadataPromise.ts ===
 declare const decorator: MethodDecorator;
 >decorator : Symbol(decorator, Decl(decoratorMetadataPromise.ts, 0, 13))
->MethodDecorator : Symbol(MethodDecorator, Decl(lib.decorators.legacy.d.ts, --, --))
+>MethodDecorator : Symbol(MethodDecorator)
 
 class A {
 >A : Symbol(A, Decl(decoratorMetadataPromise.ts, 0, 41))
@@ -12,23 +12,23 @@
 >decorator : Symbol(decorator, Decl(decoratorMetadataPromise.ts, 0, 13))
 
     async foo() {}
->foo : Symbol(A.foo, Decl(decoratorMetadataPromise.ts, 2, 9))
+>foo : Symbol(foo, Decl(decoratorMetadataPromise.ts, 2, 9))
 
     @decorator
 >decorator : Symbol(decorator, Decl(decoratorMetadataPromise.ts, 0, 13))
 
     async bar(): Promise<number> { return 0; }
->bar : Symbol(A.bar, Decl(decoratorMetadataPromise.ts, 4, 18))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>bar : Symbol(bar, Decl(decoratorMetadataPromise.ts, 4, 18))
+>Promise : Symbol(Promise)
 
     @decorator
 >decorator : Symbol(decorator, Decl(decoratorMetadataPromise.ts, 0, 13))
 
     baz(n: Promise<number>): Promise<number> { return n; }
->baz : Symbol(A.baz, Decl(decoratorMetadataPromise.ts, 6, 46))
+>baz : Symbol(baz, Decl(decoratorMetadataPromise.ts, 6, 46))
 >n : Symbol(n, Decl(decoratorMetadataPromise.ts, 8, 8))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Promise : Symbol(Promise)
+>Promise : Symbol(Promise)
 >n : Symbol(n, Decl(decoratorMetadataPromise.ts, 8, 8))
 }
 
