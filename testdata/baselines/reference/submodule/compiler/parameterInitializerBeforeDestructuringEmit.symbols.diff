--- old.parameterInitializerBeforeDestructuringEmit.symbols
+++ new.parameterInitializerBeforeDestructuringEmit.symbols
@@= skipped -4, +4 lines =@@
 >Foo : Symbol(Foo, Decl(parameterInitializerBeforeDestructuringEmit.ts, 0, 0))
 
     bar?: any;
->bar : Symbol(Foo.bar, Decl(parameterInitializerBeforeDestructuringEmit.ts, 0, 15))
+>bar : Symbol(bar, Decl(parameterInitializerBeforeDestructuringEmit.ts, 0, 15))
 
     baz?: any;
->baz : Symbol(Foo.baz, Decl(parameterInitializerBeforeDestructuringEmit.ts, 1, 14))
+>baz : Symbol(baz, Decl(parameterInitializerBeforeDestructuringEmit.ts, 1, 14))
 }
 
 function foobar({ bar = {}, ...opts }: Foo = {}) {
@@= skipped -15, +15 lines =@@
     "use strict";
     "Some other prologue";
     opts.baz(bar);
->opts.baz : Symbol(Foo.baz, Decl(parameterInitializerBeforeDestructuringEmit.ts, 1, 14))
+>opts.baz : Symbol(baz, Decl(parameterInitializerBeforeDestructuringEmit.ts, 1, 14))
 >opts : Symbol(opts, Decl(parameterInitializerBeforeDestructuringEmit.ts, 5, 27))
->baz : Symbol(Foo.baz, Decl(parameterInitializerBeforeDestructuringEmit.ts, 1, 14))
+>baz : Symbol(baz, Decl(parameterInitializerBeforeDestructuringEmit.ts, 1, 14))
 >bar : Symbol(bar, Decl(parameterInitializerBeforeDestructuringEmit.ts, 5, 17))
 }
 
@@= skipped -17, +17 lines =@@
         "use strict";
         "Some other prologue";
         opts.baz(bar);
->opts.baz : Symbol(Foo.baz, Decl(parameterInitializerBeforeDestructuringEmit.ts, 1, 14))
+>opts.baz : Symbol(baz, Decl(parameterInitializerBeforeDestructuringEmit.ts, 1, 14))
 >opts : Symbol(opts, Decl(parameterInitializerBeforeDestructuringEmit.ts, 12, 27))
->baz : Symbol(Foo.baz, Decl(parameterInitializerBeforeDestructuringEmit.ts, 1, 14))
+>baz : Symbol(baz, Decl(parameterInitializerBeforeDestructuringEmit.ts, 1, 14))
 >bar : Symbol(bar, Decl(parameterInitializerBeforeDestructuringEmit.ts, 12, 17))
     }
 }
