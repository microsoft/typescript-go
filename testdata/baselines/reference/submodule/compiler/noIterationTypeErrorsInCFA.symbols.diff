--- old.noIterationTypeErrorsInCFA.symbols
+++ new.noIterationTypeErrorsInCFA.symbols
@@= skipped -4, +4 lines =@@
 >F : Symbol(F, Decl(noIterationTypeErrorsInCFA.ts, 0, 0))
 
     d(): void
->d : Symbol(F.d, Decl(noIterationTypeErrorsInCFA.ts, 0, 13))
+>d : Symbol(d, Decl(noIterationTypeErrorsInCFA.ts, 0, 13))
 }
 export function doRemove(dds: F | F[]) {
 >doRemove : Symbol(doRemove, Decl(noIterationTypeErrorsInCFA.ts, 2, 1))
@@= skipped -9, +9 lines =@@
 >F : Symbol(F, Decl(noIterationTypeErrorsInCFA.ts, 0, 0))
 
     if (!Array.isArray(dds)) {
->Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
+>Array.isArray : Symbol(isArray, Decl(lib.es5.d.ts, --, --))
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 4 more)
->isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
+>isArray : Symbol(isArray, Decl(lib.es5.d.ts, --, --))
 >dds : Symbol(dds, Decl(noIterationTypeErrorsInCFA.ts, 3, 25))
 
         dds = [dds]
@@= skipped -14, +14 lines =@@
 >dds : Symbol(dds, Decl(noIterationTypeErrorsInCFA.ts, 3, 25))
 
         n.d()
->n.d : Symbol(F.d, Decl(noIterationTypeErrorsInCFA.ts, 0, 13))
+>n.d : Symbol(d, Decl(noIterationTypeErrorsInCFA.ts, 0, 13))
 >n : Symbol(n, Decl(noIterationTypeErrorsInCFA.ts, 7, 12))
->d : Symbol(F.d, Decl(noIterationTypeErrorsInCFA.ts, 0, 13))
+>d : Symbol(d, Decl(noIterationTypeErrorsInCFA.ts, 0, 13))
     }
     return dds
 >dds : Symbol(dds, Decl(noIterationTypeErrorsInCFA.ts, 3, 25))
