//// [tests/cases/compiler/reactReduxLikeDeferredInferenceAllowsAssignment.ts] ////

=== reactReduxLikeDeferredInferenceAllowsAssignment.ts ===
declare class Component<P> {
>Component : Component<P>
>P : P

  constructor(props: Readonly<P>);
>props : Readonly<P>

  constructor(props: P, context?: any);
>props : P
>context : any

  readonly props: Readonly<P> & Readonly<{ children?: {} }>;
>props : Readonly<P> & Readonly<{ children?: {} | undefined; }>
>children : {} | undefined
}
interface ComponentClass<P = {}> {
>ComponentClass : ComponentClass<P>
>P : P

  new (props: P, context?: any): Component<P>;
>props : P
>context : any

  propTypes?: WeakValidationMap<P>;
>propTypes : WeakValidationMap<P> | undefined

  defaultProps?: Partial<P>;
>defaultProps : Partial<P> | undefined

  displayName?: string;
>displayName : string | undefined
}
interface FunctionComponent<P = {}> {
>FunctionComponent : FunctionComponent<P>
>P : P

  (props: P & { children?: {} }, context?: any): {} | null;
>props : P & { children?: {} | undefined; }
>children : {} | undefined
>context : any

  propTypes?: WeakValidationMap<P>;
>propTypes : WeakValidationMap<P> | undefined

  defaultProps?: Partial<P>;
>defaultProps : Partial<P> | undefined

  displayName?: string;
>displayName : string | undefined
}

declare const nominalTypeHack: unique symbol;
>nominalTypeHack : unique symbol

interface Validator<T> {
>Validator : Validator<T>
>T : T

  (
    props: object,
>props : object

    propName: string,
>propName : string

    componentName: string,
>componentName : string

    location: string,
>location : string

    propFullName: string
>propFullName : string

  ): Error | null;
  [nominalTypeHack]?: T;
>[nominalTypeHack] : T | undefined
>nominalTypeHack : unique symbol
}
type WeakValidationMap<T> = {
>WeakValidationMap : WeakValidationMap<T>
>T : T

  [K in keyof T]?: null extends T[K]
>K : K

    ? Validator<T[K] | null | undefined>
    : undefined extends T[K]
    ? Validator<T[K] | null | undefined>
    : Validator<T[K]>
};
type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;
>ComponentType : ComponentType<P>
>P : P

type Shared<
>Shared : Shared<InjectedProps, DecorationTargetProps>

  InjectedProps,
>InjectedProps : InjectedProps

  DecorationTargetProps extends Shared<InjectedProps, DecorationTargetProps>
>DecorationTargetProps : DecorationTargetProps

> = {
  [P in Extract<
>P : P

    keyof InjectedProps,
    keyof DecorationTargetProps
  >]?: InjectedProps[P] extends DecorationTargetProps[P]
    ? DecorationTargetProps[P]
    : never
};

// Infers prop type from component C
type GetProps<C> = C extends ComponentType<infer P> ? P : never;
>GetProps : GetProps<C>
>C : C
>P : P

type ConnectedComponentClass<C extends ComponentType<any>, P> = ComponentClass<
>ConnectedComponentClass : ConnectedComponentClass<C, P>
>C : C
>P : P

  P
> & {
  WrappedComponent: C;
>WrappedComponent : C

};

type Matching<InjectedProps, DecorationTargetProps> = {
>Matching : Matching<InjectedProps, DecorationTargetProps>
>InjectedProps : InjectedProps
>DecorationTargetProps : DecorationTargetProps

  [P in keyof DecorationTargetProps]: P extends keyof InjectedProps
>P : P

    ? InjectedProps[P] extends DecorationTargetProps[P]
      ? DecorationTargetProps[P]
      : InjectedProps[P]
    : DecorationTargetProps[P]
};

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
>Omit : Omit<T, K>
>T : T
>K : K

type InferableComponentEnhancerWithProps<TInjectedProps, TNeedsProps> = <
>InferableComponentEnhancerWithProps : InferableComponentEnhancerWithProps<TInjectedProps, TNeedsProps>
>TInjectedProps : TInjectedProps
>TNeedsProps : TNeedsProps

  C extends ComponentType<Matching<TInjectedProps, GetProps<C>>>
>C : C

>(
  component: C
>component : C

) => ConnectedComponentClass<
  C,
  Omit<GetProps<C>, keyof Shared<TInjectedProps, GetProps<C>>> & TNeedsProps
>;

declare const connect: {
>connect : <no_state, TDispatchProps, TOwnProps>(mapStateToProps: null | undefined, mapDispatchToProps: TDispatchProps) => InferableComponentEnhancerWithProps<ResolveThunks<TDispatchProps>, TOwnProps>

  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(
>no_state : no_state
>TDispatchProps : TDispatchProps
>TOwnProps : TOwnProps

    mapStateToProps: null | undefined,
>mapStateToProps : null | undefined

    mapDispatchToProps: TDispatchProps
>mapDispatchToProps : TDispatchProps

  ): InferableComponentEnhancerWithProps<
    ResolveThunks<TDispatchProps>,
    TOwnProps
  >;
};

type InferThunkActionCreatorType<
>InferThunkActionCreatorType : InferThunkActionCreatorType<TActionCreator>

  TActionCreator extends (...args: any[]) => any
>TActionCreator : TActionCreator
>args : any[]

> = TActionCreator extends (
  ...args: infer TParams
>args : TParams
>TParams : TParams

) => (...args: any[]) => infer TReturn
>args : any[]
>TReturn : TReturn

  ? (...args: TParams) => TReturn
>args : TParams

  : TActionCreator;

type HandleThunkActionCreator<TActionCreator> = TActionCreator extends (
>HandleThunkActionCreator : HandleThunkActionCreator<TActionCreator>
>TActionCreator : TActionCreator

  ...args: any[]
>args : any[]

) => any
  ? InferThunkActionCreatorType<TActionCreator>
  : TActionCreator;

type ResolveThunks<TDispatchProps> = TDispatchProps extends {
>ResolveThunks : ResolveThunks<TDispatchProps>
>TDispatchProps : TDispatchProps

  [key: string]: any;
>key : string
}
  ? { [C in keyof TDispatchProps]: HandleThunkActionCreator<TDispatchProps[C]> }
>C : C

  : TDispatchProps;

interface Dispatch<A extends Action = AnyAction> {
>Dispatch : Dispatch<A>
>A : A

  <T extends A>(action: T): T;
>T : T
>action : T
}
interface Action<T = any> {
>Action : Action<T>
>T : T

  type: T;
>type : T
}
interface AnyAction extends Action {
>AnyAction : AnyAction

  [extraProps: string]: any;
>extraProps : string
}

const simpleAction = (payload: boolean) => ({
>simpleAction : (payload: boolean) => { type: string; payload: boolean; }
>(payload: boolean) => ({  type: "SIMPLE_ACTION",  payload}) : (payload: boolean) => { type: string; payload: boolean; }
>payload : boolean
>({  type: "SIMPLE_ACTION",  payload}) : { type: string; payload: boolean; }
>{  type: "SIMPLE_ACTION",  payload} : { type: string; payload: boolean; }

  type: "SIMPLE_ACTION",
>type : string
>"SIMPLE_ACTION" : "SIMPLE_ACTION"

  payload
>payload : boolean

});
const thunkAction = (param1: number, param2: string) => async (
>thunkAction : (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>
>(param1: number, param2: string) => async (  dispatch: Dispatch,  { foo }: OwnProps) => {  return foo;} : (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>
>param1 : number
>param2 : string
>async (  dispatch: Dispatch,  { foo }: OwnProps) => {  return foo;} : (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>

  dispatch: Dispatch,
>dispatch : Dispatch<AnyAction>

  { foo }: OwnProps
>foo : string

) => {
  return foo;
>foo : string

};
interface OwnProps {
>OwnProps : OwnProps

  foo: string;
>foo : string
}
interface TestComponentProps extends OwnProps {
>TestComponentProps : TestComponentProps

  simpleAction: typeof simpleAction;
>simpleAction : (payload: boolean) => { type: string; payload: boolean; }

  thunkAction(param1: number, param2: string): Promise<string>;
>thunkAction : (param1: number, param2: string) => Promise<string>
>param1 : number
>param2 : string
}
class TestComponent extends Component<TestComponentProps> {}
>TestComponent : TestComponent
>Component : Component<TestComponentProps>

const mapDispatchToProps = { simpleAction, thunkAction };
>mapDispatchToProps : { simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>; }
>{ simpleAction, thunkAction } : { simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>; }
>simpleAction : (payload: boolean) => { type: string; payload: boolean; }
>thunkAction : (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>

type Q = HandleThunkActionCreator<typeof simpleAction>;
>Q : (payload: boolean) => { type: string; payload: boolean; }

const Test1 = connect(
>Test1 : ConnectedComponentClass<typeof TestComponent, Omit<TestComponentProps, "simpleAction" | "thunkAction">>
>connect(  null,  mapDispatchToProps)(TestComponent) : ConnectedComponentClass<typeof TestComponent, Omit<TestComponentProps, "simpleAction" | "thunkAction">>
>connect(  null,  mapDispatchToProps) : InferableComponentEnhancerWithProps<{ simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (...args: [param1: number, param2: string]) => Promise<string>; }, {}>
>connect : <no_state, TDispatchProps, TOwnProps>(mapStateToProps: null | undefined, mapDispatchToProps: TDispatchProps) => InferableComponentEnhancerWithProps<ResolveThunks<TDispatchProps>, TOwnProps>

  null,
  mapDispatchToProps
>mapDispatchToProps : { simpleAction: (payload: boolean) => { type: string; payload: boolean; }; thunkAction: (param1: number, param2: string) => (dispatch: Dispatch<AnyAction>, __1: OwnProps) => Promise<string>; }

)(TestComponent);
>TestComponent : typeof TestComponent

export {};

