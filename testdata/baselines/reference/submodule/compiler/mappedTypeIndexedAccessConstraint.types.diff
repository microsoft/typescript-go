--- old.mappedTypeIndexedAccessConstraint.types
+++ new.mappedTypeIndexedAccessConstraint.types
@@= skipped -2, +2 lines =@@
 === mappedTypeIndexedAccessConstraint.ts ===
 type Identity<T> = { [K in keyof T]: T[K] };
 >Identity : Identity<T>
+>T : T
+>K : K
 
 type M0 = { a: 1, b: 2 };
 >M0 : M0
@@= skipped -8, +10 lines =@@
 
 type M1 = { [K in keyof Partial<M0>]: M0[K] };
 >M1 : M1
+>K : K
 
 type M2 = { [K in keyof Required<M1>]: M1[K] };
 >M2 : M2
+>K : K
 
 type M3 = { [K in keyof Identity<Partial<M0>>]: M0[K] };
 >M3 : M3
+>K : K
 
 function foo<K extends keyof M0>(m1: M1[K], m2: M2[K], m3: M3[K]) {
 >foo : <K extends keyof M0>(m1: M1[K], m2: M2[K], m3: M3[K]) => void
+>K : K
 >m1 : M1[K]
 >m2 : M2[K]
 >m3 : M3[K]
 
     m1.toString();  // Error
 >m1.toString() : string
->m1.toString : (radix?: number) => string
+>m1.toString : (radix?: number | undefined) => string
 >m1 : 1 | 2 | undefined
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string
 
     m1?.toString();
 >m1?.toString() : string | undefined
->m1?.toString : ((radix?: number) => string) | undefined
+>m1?.toString : (radix?: number | undefined) => string | undefined
 >m1 : 1 | 2 | undefined
->toString : ((radix?: number) => string) | undefined
+>toString : (radix?: number | undefined) => string | undefined
 
     m2.toString();  // Error
 >m2.toString() : string
->m2.toString : (radix?: number) => string
+>m2.toString : (radix?: number | undefined) => string
 >m2 : 1 | 2 | undefined
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string
 
     m2?.toString();
 >m2?.toString() : string | undefined
->m2?.toString : ((radix?: number) => string) | undefined
+>m2?.toString : (radix?: number | undefined) => string | undefined
 >m2 : 1 | 2 | undefined
->toString : ((radix?: number) => string) | undefined
+>toString : (radix?: number | undefined) => string | undefined
 
     m3.toString();  // Error
 >m3.toString() : string
->m3.toString : (radix?: number) => string
+>m3.toString : (radix?: number | undefined) => string
 >m3 : 1 | 2 | undefined
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string
 
     m3?.toString();
 >m3?.toString() : string | undefined
->m3?.toString : ((radix?: number) => string) | undefined
+>m3?.toString : (radix?: number | undefined) => string | undefined
 >m3 : 1 | 2 | undefined
->toString : ((radix?: number) => string) | undefined
+>toString : (radix?: number | undefined) => string | undefined
 }
 
 // Repro from #57487
@@= skipped -65, +69 lines =@@
 
 const mapped: { [K in keyof Partial<Obj>]: Obj[K] } = {};
 >mapped : { a?: 1 | undefined; b?: 2 | undefined; }
+>K : K
 >{} : {}
 
 const resolveMapped = <K extends keyof typeof mapped>(key: K) => mapped[key].toString();  // Error
->resolveMapped : <K extends keyof typeof mapped>(key: K) => string
-><K extends keyof typeof mapped>(key: K) => mapped[key].toString() : <K extends keyof typeof mapped>(key: K) => string
->mapped : { a?: 1 | undefined; b?: 2 | undefined; }
+>resolveMapped : <K extends keyof Obj>(key: K) => string
+><K extends keyof typeof mapped>(key: K) => mapped[key].toString() : <K extends keyof Obj>(key: K) => string
+>K : K
 >key : K
 >mapped[key].toString() : string
->mapped[key].toString : (radix?: number) => string
+>mapped[key].toString : (radix?: number | undefined) => string
 >mapped[key] : 1 | 2 | undefined
 >mapped : { a?: 1 | undefined; b?: 2 | undefined; }
 >key : K
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string
 
 // Additional repro from #57487
 
 const arr = ["foo", "12", 42] as const;
->arr : readonly ["foo", "12", 42]
->["foo", "12", 42] as const : readonly ["foo", "12", 42]
->["foo", "12", 42] : readonly ["foo", "12", 42]
+>arr : ["foo", "12", 42]
+>["foo", "12", 42] as const : ["foo", "12", 42]
+>["foo", "12", 42] : ["foo", "12", 42]
 >"foo" : "foo"
 >"12" : "12"
 >42 : 42
@@= skipped -32, +33 lines =@@
 
 type MapperArgs<K extends (typeof arr)[number]> = {
 >MapperArgs : MapperArgs<K>
->arr : readonly ["foo", "12", 42]
+>K : K
 
     v: K,
 >v : K
@@= skipped -12, +12 lines =@@
 
 type SetOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
 >SetOptional : SetOptional<T, K>
+>T : T
+>K : K
 
 type PartMappings = SetOptional<Mappings, "foo">;
 >PartMappings : PartMappings
 
 const mapper: { [K in keyof PartMappings]: (o: MapperArgs<K>) => PartMappings[K] } = {
->mapper : { "12": (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; foo?: ((o: MapperArgs<"foo">) => boolean | undefined) | undefined; }
+>mapper : { foo?: (o: MapperArgs<"foo">) => boolean | undefined | undefined; 12: (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; }
+>K : K
 >o : MapperArgs<K>
->{    foo: ({ v, i }) => v.length + i > 4,    "12": ({ v, i }) => Number(v) + i,    42: ({ v, i }) => `${v}${i}`,} : { foo: ({ v, i }: MapperArgs<"foo">) => boolean; "12": ({ v, i }: MapperArgs<"12">) => number; 42: ({ v, i }: MapperArgs<42>) => string; }
+>{    foo: ({ v, i }) => v.length + i > 4,    "12": ({ v, i }) => Number(v) + i,    42: ({ v, i }) => `${v}${i}`,} : { foo: (__0: MapperArgs<"foo">) => boolean; "12": (__0: MapperArgs<"12">) => number; 42: (__0: MapperArgs<42>) => string; }
 
     foo: ({ v, i }) => v.length + i > 4,
->foo : ({ v, i }: MapperArgs<"foo">) => boolean
->({ v, i }) => v.length + i > 4 : ({ v, i }: MapperArgs<"foo">) => boolean
+>foo : (__0: MapperArgs<"foo">) => boolean
+>({ v, i }) => v.length + i > 4 : (__0: MapperArgs<"foo">) => boolean
 >v : "foo"
 >i : number
 >v.length + i > 4 : boolean
@@= skipped -23, +26 lines =@@
 >4 : 4
 
     "12": ({ v, i }) => Number(v) + i,
->"12" : ({ v, i }: MapperArgs<"12">) => number
->({ v, i }) => Number(v) + i : ({ v, i }: MapperArgs<"12">) => number
+>"12" : (__0: MapperArgs<"12">) => number
+>({ v, i }) => Number(v) + i : (__0: MapperArgs<"12">) => number
 >v : "12"
 >i : number
 >Number(v) + i : number
@@= skipped -11, +11 lines =@@
 >i : number
 
     42: ({ v, i }) => `${v}${i}`,
->42 : ({ v, i }: MapperArgs<42>) => string
->({ v, i }) => `${v}${i}` : ({ v, i }: MapperArgs<42>) => string
+>42 : (__0: MapperArgs<42>) => string
+>({ v, i }) => `${v}${i}` : (__0: MapperArgs<42>) => string
 >v : 42
 >i : number
 >`${v}${i}` : string
@@= skipped -10, +10 lines =@@
 }
 
 const resolveMapper1 = <K extends keyof typeof mapper>(
->resolveMapper1 : <K extends keyof typeof mapper>(key: K, o: MapperArgs<K>) => PartMappings[K]
-><K extends keyof typeof mapper>(    key: K, o: MapperArgs<K>) => mapper[key](o) : <K extends keyof typeof mapper>(key: K, o: MapperArgs<K>) => PartMappings[K]
->mapper : { "12": (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; foo?: ((o: MapperArgs<"foo">) => boolean | undefined) | undefined; }
+>resolveMapper1 : <K extends "12" | "foo" | 42>(key: K, o: MapperArgs<K>) => PartMappings[K]
+><K extends keyof typeof mapper>(    key: K, o: MapperArgs<K>) => mapper[key](o) : <K extends "12" | "foo" | 42>(key: K, o: MapperArgs<K>) => PartMappings[K]
+>K : K
 
     key: K, o: MapperArgs<K>) => mapper[key](o);  // Error
 >key : K
 >o : MapperArgs<K>
 >mapper[key](o) : PartMappings[K]
->mapper[key] : ((o: MapperArgs<K>) => PartMappings[K]) | undefined
->mapper : { "12": (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; foo?: ((o: MapperArgs<"foo">) => boolean | undefined) | undefined; }
+>mapper[key] : (o: MapperArgs<K>) => PartMappings[K] | undefined
+>mapper : { foo?: (o: MapperArgs<"foo">) => boolean | undefined | undefined; 12: (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; }
 >key : K
 >o : MapperArgs<K>
 
 const resolveMapper2 = <K extends keyof typeof mapper>(
->resolveMapper2 : <K extends keyof typeof mapper>(key: K, o: MapperArgs<K>) => PartMappings[K] | undefined
-><K extends keyof typeof mapper>(    key: K, o: MapperArgs<K>) => mapper[key]?.(o) : <K extends keyof typeof mapper>(key: K, o: MapperArgs<K>) => PartMappings[K] | undefined
->mapper : { "12": (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; foo?: ((o: MapperArgs<"foo">) => boolean | undefined) | undefined; }
+>resolveMapper2 : <K extends "12" | "foo" | 42>(key: K, o: MapperArgs<K>) => PartMappings[K] | undefined
+><K extends keyof typeof mapper>(    key: K, o: MapperArgs<K>) => mapper[key]?.(o) : <K extends "12" | "foo" | 42>(key: K, o: MapperArgs<K>) => PartMappings[K] | undefined
+>K : K
 
     key: K, o: MapperArgs<K>) => mapper[key]?.(o)
 >key : K
 >o : MapperArgs<K>
 >mapper[key]?.(o) : PartMappings[K] | undefined
->mapper[key] : ((o: MapperArgs<K>) => PartMappings[K]) | undefined
->mapper : { "12": (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; foo?: ((o: MapperArgs<"foo">) => boolean | undefined) | undefined; }
+>mapper[key] : (o: MapperArgs<K>) => PartMappings[K] | undefined
+>mapper : { foo?: (o: MapperArgs<"foo">) => boolean | undefined | undefined; 12: (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; }
 >key : K
 >o : MapperArgs<K>
 
@@= skipped -55, +55 lines =@@
 >mapIntersection : { a?: number | undefined; b: number; c: number; }
 
     [K in keyof (Partial<Obj1> & Required<Obj2>)]: number;
+>K : K
+
 };
 
 const accessMapped = <K extends keyof Obj2>(key: K) => mapIntersection[key].toString();
 >accessMapped : <K extends keyof Obj2>(key: K) => string
 ><K extends keyof Obj2>(key: K) => mapIntersection[key].toString() : <K extends keyof Obj2>(key: K) => string
+>K : K
 >key : K
 >mapIntersection[key].toString() : string
->mapIntersection[key].toString : (radix?: number) => string
+>mapIntersection[key].toString : (radix?: number | undefined) => string
 >mapIntersection[key] : { a?: number | undefined; b: number; c: number; }[K]
 >mapIntersection : { a?: number | undefined; b: number; c: number; }
 >key : K
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string
 
 declare const resolved: { a?: number | undefined; b: number; c: number };
 >resolved : { a?: number | undefined; b: number; c: number; }
@@= skipped -22, +25 lines =@@
 const accessResolved = <K extends keyof Obj2>(key: K) => resolved[key].toString();
 >accessResolved : <K extends keyof Obj2>(key: K) => string
 ><K extends keyof Obj2>(key: K) => resolved[key].toString() : <K extends keyof Obj2>(key: K) => string
+>K : K
 >key : K
 >resolved[key].toString() : string
->resolved[key].toString : (radix?: number) => string
+>resolved[key].toString : (radix?: number | undefined) => string
 >resolved[key] : { a?: number | undefined; b: number; c: number; }[K]
 >resolved : { a?: number | undefined; b: number; c: number; }
 >key : K
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string
 
 // Additional repro from #57860
 
@@= skipped -18, +19 lines =@@
 }
 
 function test<K extends keyof Foo>(obj: Pick<Required<Foo> & Partial<Foo>, K>, key: K) {
->test : <K extends keyof Foo>(obj: Pick<Required<Foo> & Partial<Foo>, K>, key: K) => void
+>test : <K extends "prop">(obj: Pick<Required<Foo> & Partial<Foo>, K>, key: K) => void
+>K : K
 >obj : Pick<Required<Foo> & Partial<Foo>, K>
 >key : K
 
