--- old.conditionalTypeAssignabilityWhenDeferred.types
+++ new.conditionalTypeAssignabilityWhenDeferred.types
@@= skipped -2, +2 lines =@@
 === conditionalTypeAssignabilityWhenDeferred.ts ===
 export type FilterPropsByType<T, TT> = {
 >FilterPropsByType : FilterPropsByType<T, TT>
+>T : T
+>TT : TT
 
   [K in keyof T]: T[K] extends TT ? K : never
+>K : K
+
 }[keyof T];
 
 function select<
 >select : <T extends string | number, TList extends object, TValueProp extends FilterPropsByType<TList, T>>(property: T, list: TList[], valueProp: TValueProp) => void
 
   T extends string | number,
+>T : T
+
   TList extends object,
+>TList : TList
+
   TValueProp extends FilterPropsByType<TList, T>
+>TValueProp : TValueProp
+
 >(property: T, list: TList[], valueProp: TValueProp) {}
 >property : T
 >list : TList[]
@@= skipped -17, +27 lines =@@
 
 export function func<XX extends string>(x: XX, tipos: { value: XX }[]) {
 >func : <XX extends string>(x: XX, tipos: { value: XX; }[]) => void
+>XX : XX
 >x : XX
 >tipos : { value: XX; }[]
 >value : XX
@@= skipped -14, +15 lines =@@
 
 declare function onlyNullablePlease<T extends null extends T ? any : never>(
 >onlyNullablePlease : <T extends null extends T ? any : never>(value: T) => void
+>T : T
 
   value: T
 >value : T
@@= skipped -10, +11 lines =@@
 >onlyNullablePlease2 : <T extends [null] extends [T] ? any : never>(value: T) => void
 
   T extends [null] extends [T] ? any : never
+>T : T
+
 >(value: T): void;
 >value : T
 
@@= skipped -31, +33 lines =@@
 
 function f<T>(t: T) {
 >f : <T>(t: T) => void
+>T : T
 >t : T
 
   var x: T | null = Math.random() > 0.5 ? null : t;
@@= skipped -15, +16 lines =@@
 
   onlyNullablePlease(x); // should work
 >onlyNullablePlease(x) : void
->onlyNullablePlease : <T_1 extends null extends T_1 ? any : never>(value: T_1) => void
+>onlyNullablePlease : <T extends null extends T ? any : never>(value: T) => void
 >x : T | null
 
   onlyNullablePlease2(x); // should work
 >onlyNullablePlease2(x) : void
->onlyNullablePlease2 : <T_1 extends [null] extends [T_1] ? any : never>(value: T_1) => void
+>onlyNullablePlease2 : <T extends [null] extends [T] ? any : never>(value: T) => void
 >x : T | null
 }
 
 function f2<T>(t1: { x: T; y: T }, t2: T extends T ? { x: T; y: T } : never) {
 >f2 : <T>(t1: { x: T; y: T; }, t2: T extends T ? { x: T; y: T; } : never) => void
+>T : T
 >t1 : { x: T; y: T; }
 >x : T
 >y : T
@@= skipped -31, +32 lines =@@
 
 type Foo<T> = T extends true ? string : "a";
 >Foo : Foo<T>
+>T : T
 >true : true
 
 function test<T>(x: Foo<T>, s: string) {
 >test : <T>(x: Foo<T>, s: string) => void
+>T : T
 >x : Foo<T>
 >s : string
 
@@= skipped -21, +23 lines =@@
 // #26933
 type Distributive<T> = T extends { a: number } ? { a: number } : { b: number };
 >Distributive : Distributive<T>
+>T : T
 >a : number
 >a : number
 >b : number
 
 function testAssignabilityToConditionalType<T>() {
 >testAssignabilityToConditionalType : <T>() => void
+>T : T
 
   const o = { a: 1, b: 2 };
 >o : { a: number; b: number; }
@@= skipped -50, +52 lines =@@
   // Infer type parameters: no good
   const o2: [T] extends [[infer U]] ? U : { b: number } = o;
 >o2 : [T] extends [[infer U]] ? U : { b: number; }
+>U : U
 >b : number
 >o : { a: number; b: number; }
 
@@= skipped -35, +36 lines =@@
 
 type Wrapped<T> = { ___secret: T };
 >Wrapped : Wrapped<T>
+>T : T
 >___secret : T
 
 type Unwrap<T> = T extends Wrapped<infer U> ? U : T;
 >Unwrap : Unwrap<T>
+>T : T
+>U : U
 
 declare function set<T, K extends keyof T>(
 >set : <T, K extends keyof T>(obj: T, key: K, value: Unwrap<T[K]>) => Unwrap<T[K]>
+>T : T
+>K : K
 
   obj: T,
 >obj : T
@@= skipped -47, +52 lines =@@
 
 type InferBecauseWhyNot<T> = [T] extends [(p: infer P1) => any]
 >InferBecauseWhyNot : InferBecauseWhyNot<T>
+>T : T
 >p : P1
+>P1 : P1
 
   ? P1 | T
   : never;
 
 function f3<Q extends (arg: any) => any>(x: Q): InferBecauseWhyNot<Q> {
 >f3 : <Q extends (arg: any) => any>(x: Q) => InferBecauseWhyNot<Q>
+>Q : Q
 >arg : any
 >x : Q
 
@@= skipped -16, +19 lines =@@
 
 type InferBecauseWhyNotDistributive<T> = T extends (p: infer P1) => any
 >InferBecauseWhyNotDistributive : InferBecauseWhyNotDistributive<T>
+>T : T
 >p : P1
+>P1 : P1
 
   ? P1 | T
   : never;
 
 function f4<Q extends (arg: any) => any>(
 >f4 : <Q extends (arg: any) => any>(x: Q) => InferBecauseWhyNotDistributive<Q>
+>Q : Q
 >arg : any
 
   x: Q
