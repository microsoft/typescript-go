--- old.classAttributeInferenceTemplate.symbols
+++ new.classAttributeInferenceTemplate.symbols
@@= skipped -4, +4 lines =@@
 >MyClass : Symbol(MyClass, Decl(classAttributeInferenceTemplate.ts, 0, 0))

     property;
->property : Symbol(MyClass.property, Decl(classAttributeInferenceTemplate.ts, 0, 15))
+>property : Symbol(property, Decl(classAttributeInferenceTemplate.ts, 0, 15))

     property2;
->property2 : Symbol(MyClass.property2, Decl(classAttributeInferenceTemplate.ts, 1, 13))
+>property2 : Symbol(property2, Decl(classAttributeInferenceTemplate.ts, 1, 13))

     constructor() {
         const variable = 'something'
 >variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 5, 13))

         this.property = `foo`; // Correctly inferred as `string`
->this.property : Symbol(MyClass.property, Decl(classAttributeInferenceTemplate.ts, 0, 15))
+>this.property : Symbol(property, Decl(classAttributeInferenceTemplate.ts, 0, 15))
 >this : Symbol(MyClass, Decl(classAttributeInferenceTemplate.ts, 0, 0))
->property : Symbol(MyClass.property, Decl(classAttributeInferenceTemplate.ts, 0, 15))
+>property : Symbol(property, Decl(classAttributeInferenceTemplate.ts, 0, 15))

         this.property2 = `foo-${variable}`; // Causes an error
->this.property2 : Symbol(MyClass.property2, Decl(classAttributeInferenceTemplate.ts, 1, 13))
+>this.property2 : Symbol(property2, Decl(classAttributeInferenceTemplate.ts, 1, 13))
 >this : Symbol(MyClass, Decl(classAttributeInferenceTemplate.ts, 0, 0))
->property2 : Symbol(MyClass.property2, Decl(classAttributeInferenceTemplate.ts, 1, 13))
+>property2 : Symbol(property2, Decl(classAttributeInferenceTemplate.ts, 1, 13))
 >variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 5, 13))

         const localProperty = `foo-${variable}`; // Correctly inferred as `string`
@@= skipped -30, +30 lines =@@
 >MyClass2 : Symbol(MyClass2, Decl(classAttributeInferenceTemplate.ts, 12, 1))

     accessor property;
->property : Symbol(MyClass2.property, Decl(classAttributeInferenceTemplate.ts, 14, 16))
+>property : Symbol(property, Decl(classAttributeInferenceTemplate.ts, 14, 16))

     accessor property2;
->property2 : Symbol(MyClass2.property2, Decl(classAttributeInferenceTemplate.ts, 15, 22))
+>property2 : Symbol(property2, Decl(classAttributeInferenceTemplate.ts, 15, 22))

     constructor() {
         const variable = 'something'
 >variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 19, 13))

         this.property = `foo`; // Correctly inferred as `string`
->this.property : Symbol(MyClass2.property, Decl(classAttributeInferenceTemplate.ts, 14, 16))
+>this.property : Symbol(property, Decl(classAttributeInferenceTemplate.ts, 14, 16))
 >this : Symbol(MyClass2, Decl(classAttributeInferenceTemplate.ts, 12, 1))
->property : Symbol(MyClass2.property, Decl(classAttributeInferenceTemplate.ts, 14, 16))
+>property : Symbol(property, Decl(classAttributeInferenceTemplate.ts, 14, 16))

         this.property2 = `foo-${variable}`; // Causes an error
->this.property2 : Symbol(MyClass2.property2, Decl(classAttributeInferenceTemplate.ts, 15, 22))
+>this.property2 : Symbol(property2, Decl(classAttributeInferenceTemplate.ts, 15, 22))
 >this : Symbol(MyClass2, Decl(classAttributeInferenceTemplate.ts, 12, 1))
->property2 : Symbol(MyClass2.property2, Decl(classAttributeInferenceTemplate.ts, 15, 22))
+>property2 : Symbol(property2, Decl(classAttributeInferenceTemplate.ts, 15, 22))
 >variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 19, 13))

         const localProperty = `foo-${variable}`; // Correctly inferred as `string`