--- old.genericSpecializationToTypeLiteral1.symbols
+++ new.genericSpecializationToTypeLiteral1.symbols
@@ -6,7 +6,7 @@
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
 
     zip<TResult>(second: IEnumerable<T>, resultSelector: (first: T, second: T, index: number) => TResult): IEnumerable<TResult>;
->zip : Symbol(IEnumerable.zip, Decl(genericSpecializationToTypeLiteral1.ts, 0, 26), Decl(genericSpecializationToTypeLiteral1.ts, 2, 128), Decl(genericSpecializationToTypeLiteral1.ts, 3, 117))
+>zip : Symbol(zip, Decl(genericSpecializationToTypeLiteral1.ts, 0, 26), Decl(genericSpecializationToTypeLiteral1.ts, 2, 128), Decl(genericSpecializationToTypeLiteral1.ts, 3, 117))
 >TResult : Symbol(TResult, Decl(genericSpecializationToTypeLiteral1.ts, 2, 8))
 >second : Symbol(second, Decl(genericSpecializationToTypeLiteral1.ts, 2, 17))
 >IEnumerable : Symbol(IEnumerable, Decl(genericSpecializationToTypeLiteral1.ts, 0, 0))
@@ -22,7 +22,7 @@
 >TResult : Symbol(TResult, Decl(genericSpecializationToTypeLiteral1.ts, 2, 8))
 
     zip<TResult>(second: T[], resultSelector: (first: T, second: T, index: number) => TResult): IEnumerable<TResult>;
->zip : Symbol(IEnumerable.zip, Decl(genericSpecializationToTypeLiteral1.ts, 0, 26), Decl(genericSpecializationToTypeLiteral1.ts, 2, 128), Decl(genericSpecializationToTypeLiteral1.ts, 3, 117))
+>zip : Symbol(zip, Decl(genericSpecializationToTypeLiteral1.ts, 0, 26), Decl(genericSpecializationToTypeLiteral1.ts, 2, 128), Decl(genericSpecializationToTypeLiteral1.ts, 3, 117))
 >TResult : Symbol(TResult, Decl(genericSpecializationToTypeLiteral1.ts, 3, 8))
 >second : Symbol(second, Decl(genericSpecializationToTypeLiteral1.ts, 3, 17))
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
@@ -37,14 +37,14 @@
 >TResult : Symbol(TResult, Decl(genericSpecializationToTypeLiteral1.ts, 3, 8))
 
     zip<TResult>(...params: any[]): IEnumerable<TResult>; // last one is selector
->zip : Symbol(IEnumerable.zip, Decl(genericSpecializationToTypeLiteral1.ts, 0, 26), Decl(genericSpecializationToTypeLiteral1.ts, 2, 128), Decl(genericSpecializationToTypeLiteral1.ts, 3, 117))
+>zip : Symbol(zip, Decl(genericSpecializationToTypeLiteral1.ts, 0, 26), Decl(genericSpecializationToTypeLiteral1.ts, 2, 128), Decl(genericSpecializationToTypeLiteral1.ts, 3, 117))
 >TResult : Symbol(TResult, Decl(genericSpecializationToTypeLiteral1.ts, 4, 8))
 >params : Symbol(params, Decl(genericSpecializationToTypeLiteral1.ts, 4, 17))
 >IEnumerable : Symbol(IEnumerable, Decl(genericSpecializationToTypeLiteral1.ts, 0, 0))
 >TResult : Symbol(TResult, Decl(genericSpecializationToTypeLiteral1.ts, 4, 8))
 
     merge<TResult>(...params: IEnumerable<T>[]): IEnumerable<T>;
->merge : Symbol(IEnumerable.merge, Decl(genericSpecializationToTypeLiteral1.ts, 4, 57), Decl(genericSpecializationToTypeLiteral1.ts, 6, 64))
+>merge : Symbol(merge, Decl(genericSpecializationToTypeLiteral1.ts, 4, 57), Decl(genericSpecializationToTypeLiteral1.ts, 6, 64))
 >TResult : Symbol(TResult, Decl(genericSpecializationToTypeLiteral1.ts, 6, 10))
 >params : Symbol(params, Decl(genericSpecializationToTypeLiteral1.ts, 6, 19))
 >IEnumerable : Symbol(IEnumerable, Decl(genericSpecializationToTypeLiteral1.ts, 0, 0))
@@ -53,7 +53,7 @@
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
 
     merge<TResult>(...params: T[][]): IEnumerable<T>;
->merge : Symbol(IEnumerable.merge, Decl(genericSpecializationToTypeLiteral1.ts, 4, 57), Decl(genericSpecializationToTypeLiteral1.ts, 6, 64))
+>merge : Symbol(merge, Decl(genericSpecializationToTypeLiteral1.ts, 4, 57), Decl(genericSpecializationToTypeLiteral1.ts, 6, 64))
 >TResult : Symbol(TResult, Decl(genericSpecializationToTypeLiteral1.ts, 7, 10))
 >params : Symbol(params, Decl(genericSpecializationToTypeLiteral1.ts, 7, 19))
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
@@ -62,7 +62,7 @@
 
 
     concat(...sequences: IEnumerable<T>[]): IEnumerable<T>;
->concat : Symbol(IEnumerable.concat, Decl(genericSpecializationToTypeLiteral1.ts, 7, 53), Decl(genericSpecializationToTypeLiteral1.ts, 10, 59))
+>concat : Symbol(concat, Decl(genericSpecializationToTypeLiteral1.ts, 7, 53), Decl(genericSpecializationToTypeLiteral1.ts, 10, 59))
 >sequences : Symbol(sequences, Decl(genericSpecializationToTypeLiteral1.ts, 10, 11))
 >IEnumerable : Symbol(IEnumerable, Decl(genericSpecializationToTypeLiteral1.ts, 0, 0))
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
@@ -70,14 +70,14 @@
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
 
     concat(...sequences: T[]): IEnumerable<T>;
->concat : Symbol(IEnumerable.concat, Decl(genericSpecializationToTypeLiteral1.ts, 7, 53), Decl(genericSpecializationToTypeLiteral1.ts, 10, 59))
+>concat : Symbol(concat, Decl(genericSpecializationToTypeLiteral1.ts, 7, 53), Decl(genericSpecializationToTypeLiteral1.ts, 10, 59))
 >sequences : Symbol(sequences, Decl(genericSpecializationToTypeLiteral1.ts, 11, 11))
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
 >IEnumerable : Symbol(IEnumerable, Decl(genericSpecializationToTypeLiteral1.ts, 0, 0))
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
 
     insert(index: number, second: IEnumerable<T>): IEnumerable<T>;
->insert : Symbol(IEnumerable.insert, Decl(genericSpecializationToTypeLiteral1.ts, 11, 46))
+>insert : Symbol(insert, Decl(genericSpecializationToTypeLiteral1.ts, 11, 46))
 >index : Symbol(index, Decl(genericSpecializationToTypeLiteral1.ts, 13, 11))
 >second : Symbol(second, Decl(genericSpecializationToTypeLiteral1.ts, 13, 25))
 >IEnumerable : Symbol(IEnumerable, Decl(genericSpecializationToTypeLiteral1.ts, 0, 0))
@@ -86,13 +86,13 @@
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
 
     sequenceEqual(second: IEnumerable<T>): boolean;
->sequenceEqual : Symbol(IEnumerable.sequenceEqual, Decl(genericSpecializationToTypeLiteral1.ts, 13, 66), Decl(genericSpecializationToTypeLiteral1.ts, 15, 51), Decl(genericSpecializationToTypeLiteral1.ts, 16, 104), Decl(genericSpecializationToTypeLiteral1.ts, 17, 40))
+>sequenceEqual : Symbol(sequenceEqual, Decl(genericSpecializationToTypeLiteral1.ts, 13, 66), Decl(genericSpecializationToTypeLiteral1.ts, 15, 51), Decl(genericSpecializationToTypeLiteral1.ts, 16, 104), Decl(genericSpecializationToTypeLiteral1.ts, 17, 40))
 >second : Symbol(second, Decl(genericSpecializationToTypeLiteral1.ts, 15, 18))
 >IEnumerable : Symbol(IEnumerable, Decl(genericSpecializationToTypeLiteral1.ts, 0, 0))
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
 
     sequenceEqual<TCompare>(second: IEnumerable<T>, compareSelector: (element: T) => TCompare): boolean;
->sequenceEqual : Symbol(IEnumerable.sequenceEqual, Decl(genericSpecializationToTypeLiteral1.ts, 13, 66), Decl(genericSpecializationToTypeLiteral1.ts, 15, 51), Decl(genericSpecializationToTypeLiteral1.ts, 16, 104), Decl(genericSpecializationToTypeLiteral1.ts, 17, 40))
+>sequenceEqual : Symbol(sequenceEqual, Decl(genericSpecializationToTypeLiteral1.ts, 13, 66), Decl(genericSpecializationToTypeLiteral1.ts, 15, 51), Decl(genericSpecializationToTypeLiteral1.ts, 16, 104), Decl(genericSpecializationToTypeLiteral1.ts, 17, 40))
 >TCompare : Symbol(TCompare, Decl(genericSpecializationToTypeLiteral1.ts, 16, 18))
 >second : Symbol(second, Decl(genericSpecializationToTypeLiteral1.ts, 16, 28))
 >IEnumerable : Symbol(IEnumerable, Decl(genericSpecializationToTypeLiteral1.ts, 0, 0))
@@ -103,12 +103,12 @@
 >TCompare : Symbol(TCompare, Decl(genericSpecializationToTypeLiteral1.ts, 16, 18))
 
     sequenceEqual(second: T[]): boolean;
->sequenceEqual : Symbol(IEnumerable.sequenceEqual, Decl(genericSpecializationToTypeLiteral1.ts, 13, 66), Decl(genericSpecializationToTypeLiteral1.ts, 15, 51), Decl(genericSpecializationToTypeLiteral1.ts, 16, 104), Decl(genericSpecializationToTypeLiteral1.ts, 17, 40))
+>sequenceEqual : Symbol(sequenceEqual, Decl(genericSpecializationToTypeLiteral1.ts, 13, 66), Decl(genericSpecializationToTypeLiteral1.ts, 15, 51), Decl(genericSpecializationToTypeLiteral1.ts, 16, 104), Decl(genericSpecializationToTypeLiteral1.ts, 17, 40))
 >second : Symbol(second, Decl(genericSpecializationToTypeLiteral1.ts, 17, 18))
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
 
     sequenceEqual<TCompare>(second: T[], compareSelector: (element: T) => TCompare): boolean;   
->sequenceEqual : Symbol(IEnumerable.sequenceEqual, Decl(genericSpecializationToTypeLiteral1.ts, 13, 66), Decl(genericSpecializationToTypeLiteral1.ts, 15, 51), Decl(genericSpecializationToTypeLiteral1.ts, 16, 104), Decl(genericSpecializationToTypeLiteral1.ts, 17, 40))
+>sequenceEqual : Symbol(sequenceEqual, Decl(genericSpecializationToTypeLiteral1.ts, 13, 66), Decl(genericSpecializationToTypeLiteral1.ts, 15, 51), Decl(genericSpecializationToTypeLiteral1.ts, 16, 104), Decl(genericSpecializationToTypeLiteral1.ts, 17, 40))
 >TCompare : Symbol(TCompare, Decl(genericSpecializationToTypeLiteral1.ts, 18, 18))
 >second : Symbol(second, Decl(genericSpecializationToTypeLiteral1.ts, 18, 28))
 >T : Symbol(T, Decl(genericSpecializationToTypeLiteral1.ts, 0, 22))
@@ -118,7 +118,7 @@
 >TCompare : Symbol(TCompare, Decl(genericSpecializationToTypeLiteral1.ts, 18, 18))
     
     toDictionary<TKey>(keySelector: (element: T) => TKey): IDictionary<TKey, any>;
->toDictionary : Symbol(IEnumerable.toDictionary, Decl(genericSpecializationToTypeLiteral1.ts, 18, 93), Decl(genericSpecializationToTypeLiteral1.ts, 20, 82), Decl(genericSpecializationToTypeLiteral1.ts, 21, 134))
+>toDictionary : Symbol(toDictionary, Decl(genericSpecializationToTypeLiteral1.ts, 18, 93), Decl(genericSpecializationToTypeLiteral1.ts, 20, 82), Decl(genericSpecializationToTypeLiteral1.ts, 21, 134))
 >TKey : Symbol(TKey, Decl(genericSpecializationToTypeLiteral1.ts, 20, 17))
 >keySelector : Symbol(keySelector, Decl(genericSpecializationToTypeLiteral1.ts, 20, 23))
 >element : Symbol(element, Decl(genericSpecializationToTypeLiteral1.ts, 20, 37))
@@ -128,7 +128,7 @@
 >TKey : Symbol(TKey, Decl(genericSpecializationToTypeLiteral1.ts, 20, 17))
 
     toDictionary<TKey, TValue>(keySelector: (element: T) => TKey, elementSelector: (element: T) => TValue): IDictionary<TKey, TValue>;
->toDictionary : Symbol(IEnumerable.toDictionary, Decl(genericSpecializationToTypeLiteral1.ts, 18, 93), Decl(genericSpecializationToTypeLiteral1.ts, 20, 82), Decl(genericSpecializationToTypeLiteral1.ts, 21, 134))
+>toDictionary : Symbol(toDictionary, Decl(genericSpecializationToTypeLiteral1.ts, 18, 93), Decl(genericSpecializationToTypeLiteral1.ts, 20, 82), Decl(genericSpecializationToTypeLiteral1.ts, 21, 134))
 >TKey : Symbol(TKey, Decl(genericSpecializationToTypeLiteral1.ts, 21, 17))
 >TValue : Symbol(TValue, Decl(genericSpecializationToTypeLiteral1.ts, 21, 22))
 >keySelector : Symbol(keySelector, Decl(genericSpecializationToTypeLiteral1.ts, 21, 31))
@@ -144,7 +144,7 @@
 >TValue : Symbol(TValue, Decl(genericSpecializationToTypeLiteral1.ts, 21, 22))
 
     toDictionary<TKey, TValue, TCompare>(keySelector: (element: T) => TKey, elementSelector: (element: T) => TValue, compareSelector: (key: TKey) => TCompare): IDictionary<TKey, TValue>;
->toDictionary : Symbol(IEnumerable.toDictionary, Decl(genericSpecializationToTypeLiteral1.ts, 18, 93), Decl(genericSpecializationToTypeLiteral1.ts, 20, 82), Decl(genericSpecializationToTypeLiteral1.ts, 21, 134))
+>toDictionary : Symbol(toDictionary, Decl(genericSpecializationToTypeLiteral1.ts, 18, 93), Decl(genericSpecializationToTypeLiteral1.ts, 20, 82), Decl(genericSpecializationToTypeLiteral1.ts, 21, 134))
 >TKey : Symbol(TKey, Decl(genericSpecializationToTypeLiteral1.ts, 22, 17))
 >TValue : Symbol(TValue, Decl(genericSpecializationToTypeLiteral1.ts, 22, 22))
 >TCompare : Symbol(TCompare, Decl(genericSpecializationToTypeLiteral1.ts, 22, 30))
@@ -171,7 +171,7 @@
 >TValue : Symbol(TValue, Decl(genericSpecializationToTypeLiteral1.ts, 25, 27))
 
     toEnumerable(): IEnumerable<{ key: TKey; value: TValue }>;
->toEnumerable : Symbol(IDictionary.toEnumerable, Decl(genericSpecializationToTypeLiteral1.ts, 25, 37))
+>toEnumerable : Symbol(toEnumerable, Decl(genericSpecializationToTypeLiteral1.ts, 25, 37))
 >IEnumerable : Symbol(IEnumerable, Decl(genericSpecializationToTypeLiteral1.ts, 0, 0))
 >key : Symbol(key, Decl(genericSpecializationToTypeLiteral1.ts, 26, 33))
 >TKey : Symbol(TKey, Decl(genericSpecializationToTypeLiteral1.ts, 25, 22))
