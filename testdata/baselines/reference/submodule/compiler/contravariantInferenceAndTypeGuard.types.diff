--- old.contravariantInferenceAndTypeGuard.types
+++ new.contravariantInferenceAndTypeGuard.types
@@= skipped -1, +1 lines =@@
 
 === contravariantInferenceAndTypeGuard.ts ===
 interface ListItem<TData> {
+>ListItem : ListItem<TData>
+>TData : TData
+
     prev: ListItem<TData> | null;
 >prev : ListItem<TData> | null
 
@@= skipped -11, +14 lines =@@
 }
 type IteratorFn<TData, TResult, TContext = List<TData>> = (this: TContext, item: TData, node: ListItem<TData>, list: List<TData>) => TResult;
 >IteratorFn : IteratorFn<TData, TResult, TContext>
+>TData : TData
+>TResult : TResult
+>TContext : TContext
 >this : TContext
 >item : TData
 >node : ListItem<TData>
@@= skipped -7, +10 lines =@@
 
 type FilterFn<TData, TResult extends TData, TContext = List<TData>> = (this: TContext, item: TData, node: ListItem<TData>, list: List<TData>) => item is TResult;
 >FilterFn : FilterFn<TData, TResult, TContext>
+>TData : TData
+>TResult : TResult
+>TContext : TContext
 >this : TContext
 >item : TData
 >node : ListItem<TData>
@@= skipped -7, +10 lines =@@
 
 declare class List<TData> {
 >List : List<TData>
+>TData : TData
 
     filter<TContext, TResult extends TData>(fn: FilterFn<TData, TResult, TContext>, context: TContext): List<TResult>;
->filter : { <TContext, TResult extends TData>(fn: FilterFn<TData, TResult, TContext>, context: TContext): List<TResult>; <TResult_1 extends TData>(fn: FilterFn<TData, TResult_1>): List<TResult_1>; <TContext_1>(fn: IteratorFn<TData, boolean, TContext_1>, context: TContext_1): List<TData>; (fn: IteratorFn<TData, boolean>): List<TData>; }
+>filter : { <TContext, TResult extends TData>(fn: FilterFn<TData, TResult, TContext>, context: TContext): List<TResult>; <TResult extends TData>(fn: FilterFn<TData, TResult, List<TData>>): List<TResult>; <TContext>(fn: IteratorFn<TData, boolean, TContext>, context: TContext): List<TData>; (fn: IteratorFn<TData, boolean, List<TData>>): List<TData>; }
+>TContext : TContext
+>TResult : TResult
 >fn : FilterFn<TData, TResult, TContext>
 >context : TContext
 
     filter<TResult extends TData>(fn: FilterFn<TData, TResult>): List<TResult>;
->filter : { <TContext, TResult_1 extends TData>(fn: FilterFn<TData, TResult_1, TContext>, context: TContext): List<TResult_1>; <TResult extends TData>(fn: FilterFn<TData, TResult>): List<TResult>; <TContext>(fn: IteratorFn<TData, boolean, TContext>, context: TContext): List<TData>; (fn: IteratorFn<TData, boolean>): List<TData>; }
+>filter : { <TContext, TResult extends TData>(fn: FilterFn<TData, TResult, TContext>, context: TContext): List<TResult>; <TResult extends TData>(fn: FilterFn<TData, TResult, List<TData>>): List<TResult>; <TContext>(fn: IteratorFn<TData, boolean, TContext>, context: TContext): List<TData>; (fn: IteratorFn<TData, boolean, List<TData>>): List<TData>; }
+>TResult : TResult
 >fn : FilterFn<TData, TResult, List<TData>>
 
     filter<TContext>(fn: IteratorFn<TData, boolean, TContext>, context: TContext): List<TData>;
->filter : { <TContext_1, TResult extends TData>(fn: FilterFn<TData, TResult, TContext_1>, context: TContext_1): List<TResult>; <TResult extends TData>(fn: FilterFn<TData, TResult>): List<TResult>; <TContext>(fn: IteratorFn<TData, boolean, TContext>, context: TContext): List<TData>; (fn: IteratorFn<TData, boolean>): List<TData>; }
+>filter : { <TContext, TResult extends TData>(fn: FilterFn<TData, TResult, TContext>, context: TContext): List<TResult>; <TResult extends TData>(fn: FilterFn<TData, TResult, List<TData>>): List<TResult>; <TContext>(fn: IteratorFn<TData, boolean, TContext>, context: TContext): List<TData>; (fn: IteratorFn<TData, boolean, List<TData>>): List<TData>; }
+>TContext : TContext
 >fn : IteratorFn<TData, boolean, TContext>
 >context : TContext
 
     filter(fn: IteratorFn<TData, boolean>): List<TData>;
->filter : { <TContext, TResult extends TData>(fn: FilterFn<TData, TResult, TContext>, context: TContext): List<TResult>; <TResult extends TData>(fn: FilterFn<TData, TResult>): List<TResult>; <TContext>(fn: IteratorFn<TData, boolean, TContext>, context: TContext): List<TData>; (fn: IteratorFn<TData, boolean>): List<TData>; }
+>filter : { <TContext, TResult extends TData>(fn: FilterFn<TData, TResult, TContext>, context: TContext): List<TResult>; <TResult extends TData>(fn: FilterFn<TData, TResult, List<TData>>): List<TResult>; <TContext>(fn: IteratorFn<TData, boolean, TContext>, context: TContext): List<TData>; (fn: IteratorFn<TData, boolean, List<TData>>): List<TData>; }
 >fn : IteratorFn<TData, boolean, List<TData>>
 }
 interface Test {
+>Test : Test
+
     a: string;
 >a : string
 }
@@= skipped -34, +41 lines =@@
 >list2.filter : { <TContext, TResult extends Test | null>(fn: FilterFn<Test | null, TResult, TContext>, context: TContext): List<TResult>; <TResult extends Test | null>(fn: FilterFn<Test | null, TResult, List<Test | null>>): List<TResult>; <TContext>(fn: IteratorFn<Test | null, boolean, TContext>, context: TContext): List<Test | null>; (fn: IteratorFn<Test | null, boolean, List<Test | null>>): List<Test | null>; }
 >list2 : List<Test | null>
 >filter : { <TContext, TResult extends Test | null>(fn: FilterFn<Test | null, TResult, TContext>, context: TContext): List<TResult>; <TResult extends Test | null>(fn: FilterFn<Test | null, TResult, List<Test | null>>): List<TResult>; <TContext>(fn: IteratorFn<Test | null, boolean, TContext>, context: TContext): List<Test | null>; (fn: IteratorFn<Test | null, boolean, List<Test | null>>): List<Test | null>; }
->function(item, node, list): item is Test {    this.b; // $ExpectType string    item; // $ExpectType Test | null    node; // $ExpectType ListItem<Test | null>    list; // $ExpectType List<Test | null>    return !!item;} : (this: { b: string; }, item: Test | null, node: ListItem<Test | null>, list: List<Test | null>) => item is Test
+>function(item, node, list): item is Test {    this.b; // $ExpectType string    item; // $ExpectType Test | null    node; // $ExpectType ListItem<Test | null>    list; // $ExpectType List<Test | null>    return !!item;} : (item: Test | null, node: ListItem<Test | null>, list: List<Test | null>) => item is Test
 >item : Test | null
 >node : ListItem<Test | null>
 >list : List<Test | null>
