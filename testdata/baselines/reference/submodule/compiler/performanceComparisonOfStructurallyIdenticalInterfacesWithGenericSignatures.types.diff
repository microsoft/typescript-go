--- old.performanceComparisonOfStructurallyIdenticalInterfacesWithGenericSignatures.types
+++ new.performanceComparisonOfStructurallyIdenticalInterfacesWithGenericSignatures.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/performanceComparisonOfStructurallyIdenticalInterfacesWithGenericSignatures.ts] ////
 
-=== Performance Stats ===
-Type Count: 5,000
-Instantiation count: 10,000
-
 === performanceComparisonOfStructurallyIdenticalInterfacesWithGenericSignatures.ts ===
 export declare type ThenArg<T> = T extends any ? any : T extends PromiseLike<infer U> ? U : T;
 >ThenArg : ThenArg<T>
+>T : T
+>U : U
 
 export interface InterfaceA<T> {
+>InterfaceA : InterfaceA<T>
+>T : T
+
     filter(callback: (newValue: T, oldValue: T) => boolean): InterfaceA<T>;
 >filter : (callback: (newValue: T, oldValue: T) => boolean) => InterfaceA<T>
 >callback : (newValue: T, oldValue: T) => boolean
@@= skipped -16, +17 lines =@@
 
     map<D>(callback: (value: T) => D): InterfaceA<D>;
 >map : <D>(callback: (value: T) => D) => InterfaceA<D>
+>D : D
 >callback : (value: T) => D
 >value : T
 
     await<R extends ThenArg<T>>(): InterfaceA<R>;
 >await : <R extends ThenArg<T>>() => InterfaceA<R>
+>R : R
 
     awaitLatest<R extends ThenArg<T>>(): InterfaceA<R>;
 >awaitLatest : <R extends ThenArg<T>>() => InterfaceA<R>
+>R : R
 
     awaitOrdered<R extends ThenArg<T>>(): InterfaceA<R>;
 >awaitOrdered : <R extends ThenArg<T>>() => InterfaceA<R>
+>R : R
 
     awaitOrdered2<R extends ThenArg<T>>(): InterfaceA<R>;
 >awaitOrdered2 : <R extends ThenArg<T>>() => InterfaceA<R>
+>R : R
 
     awaitOrdered3<R extends ThenArg<T>>(): InterfaceA<R>;
 >awaitOrdered3 : <R extends ThenArg<T>>() => InterfaceA<R>
+>R : R
 
     awaitOrdered4<R extends ThenArg<T>>(): InterfaceA<R>;
 >awaitOrdered4 : <R extends ThenArg<T>>() => InterfaceA<R>
+>R : R
 
     awaitOrdered5<R extends ThenArg<T>>(): InterfaceA<R>;
 >awaitOrdered5 : <R extends ThenArg<T>>() => InterfaceA<R>
+>R : R
 
     awaitOrdered6<R extends ThenArg<T>>(): InterfaceA<R>;
 >awaitOrdered6 : <R extends ThenArg<T>>() => InterfaceA<R>
+>R : R
 
     awaitOrdered7<R extends ThenArg<T>>(): InterfaceA<R>;
 >awaitOrdered7 : <R extends ThenArg<T>>() => InterfaceA<R>
+>R : R
 
     awaitOrdered8<R extends ThenArg<T>>(): InterfaceA<R>;
 >awaitOrdered8 : <R extends ThenArg<T>>() => InterfaceA<R>
+>R : R
 
     awaitOrdered9<R extends ThenArg<T>>(): InterfaceA<R>;
 >awaitOrdered9 : <R extends ThenArg<T>>() => InterfaceA<R>
+>R : R
 }
 
 export interface InterfaceB<T> extends InterfaceA<T> {
+>InterfaceB : InterfaceB<T>
+>T : T
+
     map<D>(callback: (value: T) => D): InterfaceB<D>;
 >map : <D>(callback: (value: T) => D) => InterfaceB<D>
+>D : D
 >callback : (value: T) => D
 >value : T
 
     await<R extends ThenArg<T>>(): InterfaceB<R>;
 >await : <R extends ThenArg<T>>() => InterfaceB<R>
+>R : R
 
     awaitLatest<R extends ThenArg<T>>(): InterfaceB<R>;
 >awaitLatest : <R extends ThenArg<T>>() => InterfaceB<R>
+>R : R
 
     awaitOrdered<R extends ThenArg<T>>(): InterfaceB<R>;
 >awaitOrdered : <R extends ThenArg<T>>() => InterfaceB<R>
+>R : R
 
     awaitOrdered2<R extends ThenArg<T>>(): InterfaceB<R>;
 >awaitOrdered2 : <R extends ThenArg<T>>() => InterfaceB<R>
+>R : R
 
     awaitOrdered3<R extends ThenArg<T>>(): InterfaceB<R>;
 >awaitOrdered3 : <R extends ThenArg<T>>() => InterfaceB<R>
+>R : R
 
     awaitOrdered4<R extends ThenArg<T>>(): InterfaceB<R>;
 >awaitOrdered4 : <R extends ThenArg<T>>() => InterfaceB<R>
+>R : R
 
     awaitOrdered5<R extends ThenArg<T>>(): InterfaceB<R>;
 >awaitOrdered5 : <R extends ThenArg<T>>() => InterfaceB<R>
+>R : R
 
     awaitOrdered6<R extends ThenArg<T>>(): InterfaceB<R>;
 >awaitOrdered6 : <R extends ThenArg<T>>() => InterfaceB<R>
+>R : R
 
     awaitOrdered7<R extends ThenArg<T>>(): InterfaceB<R>;
 >awaitOrdered7 : <R extends ThenArg<T>>() => InterfaceB<R>
+>R : R
 
     awaitOrdered8<R extends ThenArg<T>>(): InterfaceB<R>;
 >awaitOrdered8 : <R extends ThenArg<T>>() => InterfaceB<R>
+>R : R
 
     awaitOrdered9<R extends ThenArg<T>>(): InterfaceB<R>;
 >awaitOrdered9 : <R extends ThenArg<T>>() => InterfaceB<R>
+>R : R
 }
 
 export class A<T> implements InterfaceB<T> {
 >A : A<T>
+>T : T
 
     public filter(callback: (newValue: T, oldValue: T) => boolean): B<T> {
 >filter : (callback: (newValue: T, oldValue: T) => boolean) => B<T>
@@= skipped -93, +121 lines =@@
 
     public map<D>(callback: (value: T) => D): B<D> {
 >map : <D>(callback: (value: T) => D) => B<D>
+>D : D
 >callback : (value: T) => D
 >value : T
 
@@= skipped -10, +11 lines =@@
 
     public await<R extends ThenArg<T>>(): B<R> {
 >await : <R extends ThenArg<T>>() => B<R>
+>R : R
 
         return undefined as any;
 >undefined as any : any
@@= skipped -8, +9 lines =@@
 
     public awaitOrdered<R extends ThenArg<T>>(): B<R> {
 >awaitOrdered : <R extends ThenArg<T>>() => B<R>
+>R : R
 
         return undefined as any;
 >undefined as any : any
@@= skipped -8, +9 lines =@@
 
     public awaitOrdered2<R extends ThenArg<T>>(): B<R> {
 >awaitOrdered2 : <R extends ThenArg<T>>() => B<R>
+>R : R
 
         return undefined as any;
 >undefined as any : any
@@= skipped -8, +9 lines =@@
 
     public awaitOrdered3<R extends ThenArg<T>>(): B<R> {
 >awaitOrdered3 : <R extends ThenArg<T>>() => B<R>
+>R : R
 
         return undefined as any;
 >undefined as any : any
@@= skipped -8, +9 lines =@@
 
     public awaitOrdered4<R extends ThenArg<T>>(): B<R> {
 >awaitOrdered4 : <R extends ThenArg<T>>() => B<R>
+>R : R
 
         return undefined as any;
 >undefined as any : any
@@= skipped -8, +9 lines =@@
 
     public awaitOrdered5<R extends ThenArg<T>>(): B<R> {
 >awaitOrdered5 : <R extends ThenArg<T>>() => B<R>
+>R : R
 
         return undefined as any;
 >undefined as any : any
@@= skipped -8, +9 lines =@@
 
     public awaitOrdered6<R extends ThenArg<T>>(): B<R> {
 >awaitOrdered6 : <R extends ThenArg<T>>() => B<R>
+>R : R
 
         return undefined as any;
 >undefined as any : any
@@= skipped -8, +9 lines =@@
 
     public awaitOrdered7<R extends ThenArg<T>>(): B<R> {
 >awaitOrdered7 : <R extends ThenArg<T>>() => B<R>
+>R : R
 
         return undefined as any;
 >undefined as any : any
@@= skipped -8, +9 lines =@@
 
     public awaitOrdered8<R extends ThenArg<T>>(): B<R> {
 >awaitOrdered8 : <R extends ThenArg<T>>() => B<R>
+>R : R
 
         return undefined as any;
 >undefined as any : any
@@= skipped -8, +9 lines =@@
 
     public awaitOrdered9<R extends ThenArg<T>>(): B<R> {
 >awaitOrdered9 : <R extends ThenArg<T>>() => B<R>
+>R : R
 
         return undefined as any;
 >undefined as any : any
@@= skipped -8, +9 lines =@@
 
     public awaitLatest<R extends ThenArg<T>>(): B<R> {
 >awaitLatest : <R extends ThenArg<T>>() => B<R>
+>R : R
 
         return undefined as any;
 >undefined as any : any
@@= skipped -9, +10 lines =@@
 
 export class B<T> extends A<T> { }
 >B : B<T>
+>T : T
 >A : A<T>
 
