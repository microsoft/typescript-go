--- old.arrayAssignmentTest6.symbols
+++ new.arrayAssignmentTest6.symbols
@@= skipped -10, +10 lines =@@
 >IToken : Symbol(IToken, Decl(arrayAssignmentTest6.ts, 2, 5))
 
         startIndex: number;
->startIndex : Symbol(IToken.startIndex, Decl(arrayAssignmentTest6.ts, 3, 22))
+>startIndex : Symbol(startIndex, Decl(arrayAssignmentTest6.ts, 3, 22))
     }
     interface ILineTokens {
 >ILineTokens : Symbol(ILineTokens, Decl(arrayAssignmentTest6.ts, 5, 5))
 
         tokens: IToken[];
->tokens : Symbol(ILineTokens.tokens, Decl(arrayAssignmentTest6.ts, 6, 27))
+>tokens : Symbol(tokens, Decl(arrayAssignmentTest6.ts, 6, 27))
 >IToken : Symbol(IToken, Decl(arrayAssignmentTest6.ts, 2, 5))
 
         endState: IState;
->endState : Symbol(ILineTokens.endState, Decl(arrayAssignmentTest6.ts, 7, 25))
+>endState : Symbol(endState, Decl(arrayAssignmentTest6.ts, 7, 25))
 >IState : Symbol(IState, Decl(arrayAssignmentTest6.ts, 0, 13))
     }
     interface IMode {
 >IMode : Symbol(IMode, Decl(arrayAssignmentTest6.ts, 9, 5))
 
         tokenize(line:string, state:IState, includeStates:boolean):ILineTokens;
->tokenize : Symbol(IMode.tokenize, Decl(arrayAssignmentTest6.ts, 10, 21))
+>tokenize : Symbol(tokenize, Decl(arrayAssignmentTest6.ts, 10, 21))
 >line : Symbol(line, Decl(arrayAssignmentTest6.ts, 11, 17))
 >state : Symbol(state, Decl(arrayAssignmentTest6.ts, 11, 29))
 >IState : Symbol(IState, Decl(arrayAssignmentTest6.ts, 0, 13))
@@= skipped -29, +29 lines =@@
 >IMode : Symbol(IMode, Decl(arrayAssignmentTest6.ts, 9, 5))
 
         public tokenize(line:string, tokens:IToken[], includeStates:boolean):ILineTokens {
->tokenize : Symbol(Bug.tokenize, Decl(arrayAssignmentTest6.ts, 13, 39))
+>tokenize : Symbol(tokenize, Decl(arrayAssignmentTest6.ts, 13, 39))
 >line : Symbol(line, Decl(arrayAssignmentTest6.ts, 14, 24))
 >tokens : Symbol(tokens, Decl(arrayAssignmentTest6.ts, 14, 36))
 >IToken : Symbol(IToken, Decl(arrayAssignmentTest6.ts, 2, 5))
