--- old.nonInferrableTypePropagation2.types
+++ new.nonInferrableTypePropagation2.types
@@= skipped -1, +1 lines =@@
 
 === nonInferrableTypePropagation2.ts ===
 export interface Predicate<A> {
+>Predicate : Predicate<A>
+>A : A
+
     (a: A): boolean
 >a : A
 }
 
 interface Left<E> {
+>Left : Left<E>
+>E : E
+
     readonly _tag: 'Left'
 >_tag : "Left"
 
@@= skipped -13, +19 lines =@@
 }
   
 interface Right<A> {
+>Right : Right<A>
+>A : A
+
     readonly _tag: 'Right'
 >_tag : "Right"
 
@@= skipped -9, +12 lines =@@
 
 type Either<E, A> = Left<E> | Right<A>;
 >Either : Either<E, A>
+>E : E
+>A : A
 
 interface Refinement<A, B extends A> {
+>Refinement : Refinement<A, B>
+>A : A
+>B : B
+
     (a: A): a is B
 >a : A
 }
 
 declare const filter: {
->filter : { <A, B extends A>(refinement: Refinement<A, B>): (as: ReadonlyArray<A>) => ReadonlyArray<B>; <A>(predicate: Predicate<A>): <B extends A>(bs: ReadonlyArray<B>) => ReadonlyArray<B>; <A>(predicate: Predicate<A>): (as: ReadonlyArray<A>) => ReadonlyArray<A>; }
+>filter : { <A, B extends A>(refinement: Refinement<A, B>): (as: readonly A[]) => readonly B[]; <A>(predicate: Predicate<A>): <B extends A>(bs: readonly B[]) => readonly B[]; <A>(predicate: Predicate<A>): (as: readonly A[]) => readonly A[]; }
 
     <A, B extends A>(refinement: Refinement<A, B>): (as: ReadonlyArray<A>) => ReadonlyArray<B>
+>A : A
+>B : B
 >refinement : Refinement<A, B>
 >as : readonly A[]
 
     <A>(predicate: Predicate<A>): <B extends A>(bs: ReadonlyArray<B>) => ReadonlyArray<B>
+>A : A
 >predicate : Predicate<A>
+>B : B
 >bs : readonly B[]
 
     <A>(predicate: Predicate<A>): (as: ReadonlyArray<A>) => ReadonlyArray<A>
+>A : A
 >predicate : Predicate<A>
 >as : readonly A[]
 
@@= skipped -25, +36 lines =@@
 
 declare function pipe<A, B>(a: A, ab: (a: A) => B): B;
 >pipe : <A, B>(a: A, ab: (a: A) => B) => B
+>A : A
+>B : B
 >a : A
 >ab : (a: A) => B
 >a : A
 
 declare function exists<A>(predicate: Predicate<A>): <E>(ma: Either<E, A>) => boolean;
 >exists : <A>(predicate: Predicate<A>) => <E>(ma: Either<E, A>) => boolean
+>A : A
 >predicate : Predicate<A>
+>E : E
 >ma : Either<E, A>
 
 declare const es: Either<string, number>[];
@@= skipped -18, +22 lines =@@
 >pipe : <A, B>(a: A, ab: (a: A) => B) => B
 >es : Either<string, number>[]
 >filter(exists((n) => n > 0)) : (as: readonly Either<string, number>[]) => readonly Either<string, number>[]
->filter : { <A, B extends A>(refinement: Refinement<A, B>): (as: ReadonlyArray<A>) => ReadonlyArray<B>; <A>(predicate: Predicate<A>): <B extends A>(bs: ReadonlyArray<B>) => ReadonlyArray<B>; <A>(predicate: Predicate<A>): (as: ReadonlyArray<A>) => ReadonlyArray<A>; }
+>filter : { <A, B extends A>(refinement: Refinement<A, B>): (as: readonly A[]) => readonly B[]; <A>(predicate: Predicate<A>): <B extends A>(bs: readonly B[]) => readonly B[]; <A>(predicate: Predicate<A>): (as: readonly A[]) => readonly A[]; }
 >exists((n) => n > 0) : <E>(ma: Either<E, number>) => boolean
 >exists : <A>(predicate: Predicate<A>) => <E>(ma: Either<E, A>) => boolean
 >(n) => n > 0 : (n: number) => boolean
