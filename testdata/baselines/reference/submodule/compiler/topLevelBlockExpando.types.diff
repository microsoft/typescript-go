--- old.topLevelBlockExpando.types
+++ new.topLevelBlockExpando.types
@@= skipped -2, +2 lines =@@
 === check.ts ===
 // https://github.com/microsoft/TypeScript/issues/31972
 interface Person {
+>Person : Person
+
   first: string;
 >first : string
->      : ^^^^^^
 
   last: string;
 >last : string
->     : ^^^^^^
 }
 
 {
   const dice = () => Math.floor(Math.random() * 6);
 >dice : { (): number; first: string; last: string; }
->     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >() => Math.floor(Math.random() * 6) : { (): number; first: string; last: string; }
->                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >Math.floor(Math.random() * 6) : number
->                              : ^^^^^^
 >Math.floor : (x: number) => number
->           : ^ ^^      ^^^^^      
 >Math : Math
->     : ^^^^
 >floor : (x: number) => number
->      : ^ ^^      ^^^^^      
 >Math.random() * 6 : number
->                  : ^^^^^^
 >Math.random() : number
->              : ^^^^^^
 >Math.random : () => number
->            : ^^^^^^      
 >Math : Math
->     : ^^^^
 >random : () => number
->       : ^^^^^^      
 >6 : 6
->  : ^
 
   dice.first = 'Rando';  
 >dice.first = 'Rando' : "Rando"
->                     : ^^^^^^^
 >dice.first : string
->           : ^^^^^^
 >dice : { (): number; first: string; last: string; }
->     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >first : string
->      : ^^^^^^
 >'Rando' : "Rando"
->        : ^^^^^^^
 
   dice.last = 'Calrissian';
 >dice.last = 'Calrissian' : "Calrissian"
->                         : ^^^^^^^^^^^^
 >dice.last : string
->          : ^^^^^^
 >dice : { (): number; first: string; last: string; }
->     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >last : string
->     : ^^^^^^
 >'Calrissian' : "Calrissian"
->             : ^^^^^^^^^^^^
 
   const diceP: Person = dice;  
 >diceP : Person
->      : ^^^^^^
 >dice : { (): number; first: string; last: string; }
->     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 }
 
 === check.js ===
@@= skipped -79, +55 lines =@@
  * @param {Human} param used as a validation tool
  */
 function doHumanThings(param) {}
->doHumanThings : (param: Human) => void
->              : ^     ^^     ^^^^^^^^^
->param : Human
->      : ^^^^^
+>doHumanThings : (param: any) => void
+>param : any
 
 const dice1 = () => Math.floor(Math.random() * 6);
 >dice1 : { (): number; last: string; }
->      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >() => Math.floor(Math.random() * 6) : { (): number; last: string; }
->                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >Math.floor(Math.random() * 6) : number
->                              : ^^^^^^
 >Math.floor : (x: number) => number
->           : ^ ^^      ^^^^^      
 >Math : Math
->     : ^^^^
 >floor : (x: number) => number
->      : ^ ^^      ^^^^^      
 >Math.random() * 6 : number
->                  : ^^^^^^
 >Math.random() : number
->              : ^^^^^^
 >Math.random : () => number
->            : ^^^^^^      
 >Math : Math
->     : ^^^^
 >random : () => number
->       : ^^^^^^      
 >6 : 6
->  : ^
 
 // dice1.first = 'Rando';
 dice1.last = 'Calrissian';
 >dice1.last = 'Calrissian' : "Calrissian"
->                          : ^^^^^^^^^^^^
 >dice1.last : string
->           : ^^^^^^
 >dice1 : { (): number; last: string; }
->      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >last : string
->     : ^^^^^^
 >'Calrissian' : "Calrissian"
->             : ^^^^^^^^^^^^
 
 // doHumanThings(dice)
 
@@= skipped -50, +31 lines =@@
 {
   const dice2 = () => Math.floor(Math.random() * 6);
 >dice2 : { (): number; first: string; last: string; }
->      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >() => Math.floor(Math.random() * 6) : { (): number; first: string; last: string; }
->                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >Math.floor(Math.random() * 6) : number
->                              : ^^^^^^
 >Math.floor : (x: number) => number
->           : ^ ^^      ^^^^^      
 >Math : Math
->     : ^^^^
 >floor : (x: number) => number
->      : ^ ^^      ^^^^^      
 >Math.random() * 6 : number
->                  : ^^^^^^
 >Math.random() : number
->              : ^^^^^^
 >Math.random : () => number
->            : ^^^^^^      
 >Math : Math
->     : ^^^^
 >random : () => number
->       : ^^^^^^      
 >6 : 6
->  : ^
 
   dice2.first = 'Rando';
 >dice2.first = 'Rando' : "Rando"
->                      : ^^^^^^^
 >dice2.first : string
->            : ^^^^^^
 >dice2 : { (): number; first: string; last: string; }
->      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >first : string
->      : ^^^^^^
 >'Rando' : "Rando"
->        : ^^^^^^^
 
   dice2.last = 'Calrissian'; 
 >dice2.last = 'Calrissian' : "Calrissian"
->                          : ^^^^^^^^^^^^
 >dice2.last : string
->           : ^^^^^^
 >dice2 : { (): number; first: string; last: string; }
->      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >last : string
->     : ^^^^^^
 >'Calrissian' : "Calrissian"
->             : ^^^^^^^^^^^^
   
   doHumanThings(dice2)
 >doHumanThings(dice2) : void
->                     : ^^^^
->doHumanThings : (param: Human) => void
->              : ^     ^^     ^^^^^^^^^
+>doHumanThings : (param: any) => void
 >dice2 : { (): number; first: string; last: string; }
->      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 }
 
