--- old.contextualTypeBasedOnIntersectionWithAnyInTheMix1.types
+++ new.contextualTypeBasedOnIntersectionWithAnyInTheMix1.types
@@= skipped -2, +2 lines =@@
 === contextualTypeBasedOnIntersectionWithAnyInTheMix1.ts ===
 type ComponentType<P> = (p: P) => any;
 >ComponentType : ComponentType<P>
+>P : P
 >p : P
 
 type ComponentProps<C> = C extends ComponentType<infer P> ? P : never;
 >ComponentProps : ComponentProps<C>
+>C : C
+>P : P
 
 type Attrs<P, A extends Partial<P>> = A;
 >Attrs : A
+>P : P
+>A : A
 
 interface StyledFunction<
+>StyledFunction : StyledFunction<C, O, A>
+
   C extends ComponentType<any>,
+>C : C
+
   O extends object = {},
+>O : O
+
   A extends keyof any = never,
+>A : A
+
 > {
   attrs<
->attrs : <U, NewA extends Partial<ComponentProps<C> & U> & { [others: string]: any; } = {}>(attrs: Attrs<ComponentProps<C> & U, NewA>) => StyledFunction<C, O & NewA, A | keyof NewA>
+>attrs : <U, NewA extends Partial<ComponentProps<C> & U> & { [others: string]: any; }>(attrs: NewA) => StyledFunction<C, O & NewA, A | keyof NewA>
 
     U,
+>U : U
+
     NewA extends Partial<ComponentProps<C> & U> & {
+>NewA : NewA
+
       [others: string]: any;
 >others : string
 
@@= skipped -30, +47 lines =@@
 }
 
 interface StyledInterface {
+>StyledInterface : StyledInterface
+
   <C extends ComponentType<any>>(component: C): StyledFunction<C>;
+>C : C
 >component : C
 }
 
@@= skipped -8, +11 lines =@@
 >styled : StyledInterface
 
 interface BaseProps {
+>BaseProps : BaseProps
+
   as?: "select" | "input";
->as : "select" | "input" | undefined
+>as : "input" | "select" | undefined
 }
 
 declare const Flex: (props: BaseProps) => null;
@@= skipped -11, +13 lines =@@
 export const StyledSelect = styled(Flex).attrs({
 >StyledSelect : StyledFunction<(props: BaseProps) => null, { as: "select"; }, "as">
 >styled(Flex).attrs({  as: "select",}) : StyledFunction<(props: BaseProps) => null, { as: "select"; }, "as">
->styled(Flex).attrs : <U, NewA extends Partial<BaseProps & U> & { [others: string]: any; } = {}>(attrs: NewA) => StyledFunction<(props: BaseProps) => null, {} & NewA, keyof NewA>
+>styled(Flex).attrs : <U, NewA extends Partial<BaseProps & U> & { [others: string]: any; }>(attrs: NewA) => StyledFunction<(props: BaseProps) => null, {} & NewA, keyof NewA>
 >styled(Flex) : StyledFunction<(props: BaseProps) => null, {}, never>
 >styled : StyledInterface
 >Flex : (props: BaseProps) => null
->attrs : <U, NewA extends Partial<BaseProps & U> & { [others: string]: any; } = {}>(attrs: NewA) => StyledFunction<(props: BaseProps) => null, {} & NewA, keyof NewA>
+>attrs : <U, NewA extends Partial<BaseProps & U> & { [others: string]: any; }>(attrs: NewA) => StyledFunction<(props: BaseProps) => null, {} & NewA, keyof NewA>
 >{  as: "select",} : { as: "select"; }
 
   as: "select",
