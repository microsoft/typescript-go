--- old.erasableSyntaxOnlyDeclaration.symbols
+++ new.erasableSyntaxOnlyDeclaration.symbols
@@= skipped -28, +28 lines =@@
 >NotLegalEnum : Symbol(NotLegalEnum, Decl(index.d.ts, 8, 1))

     B = 1
->B : Symbol(NoGoodAlias, Decl(index.d.ts, 10, 19))
+>B : Symbol(B, Decl(index.d.ts, 10, 19))
 }

 import NoGoodAlias = NotLegalEnum.B;
 >NoGoodAlias : Symbol(NoGoodAlias, Decl(index.d.ts, 12, 1))
 >NotLegalEnum : Symbol(NotLegalEnum, Decl(index.d.ts, 8, 1))
->B : Symbol(NoGoodAlias, Decl(index.d.ts, 10, 19))
+>B : Symbol(B, Decl(index.d.ts, 10, 19))

 const enum NotLegalConstEnum {
 >NotLegalConstEnum : Symbol(NotLegalConstEnum, Decl(index.d.ts, 14, 36))

     C = 2
->C : Symbol(NotLegalConstEnum.C, Decl(index.d.ts, 16, 30))
+>C : Symbol(C, Decl(index.d.ts, 16, 30))
 }

 // No errors after this point
@@= skipped -43, +43 lines =@@
 >LegalEnum : Symbol(LegalEnum, Decl(index.d.ts, 31, 1))

     A = 1
->A : Symbol(LegalEnum.A, Decl(index.d.ts, 33, 24))
+>A : Symbol(A, Decl(index.d.ts, 33, 24))
 }

 declare namespace AmbientStuff {
@@= skipped -16, +16 lines =@@
 >EnumInAmbientContext : Symbol(EnumInAmbientContext, Decl(index.d.ts, 40, 5))

         B = 1
->B : Symbol(FineAlias, Decl(index.d.ts, 41, 31))
+>B : Symbol(B, Decl(index.d.ts, 41, 31))
     }

     import FineAlias = EnumInAmbientContext.B;
 >FineAlias : Symbol(FineAlias, Decl(index.d.ts, 43, 5))
 >EnumInAmbientContext : Symbol(EnumInAmbientContext, Decl(index.d.ts, 40, 5))
->B : Symbol(FineAlias, Decl(index.d.ts, 41, 31))
+>B : Symbol(B, Decl(index.d.ts, 41, 31))
 }

 === commonjs.d.cts ===