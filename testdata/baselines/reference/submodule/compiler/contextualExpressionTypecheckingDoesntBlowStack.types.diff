--- old.contextualExpressionTypecheckingDoesntBlowStack.types
+++ new.contextualExpressionTypecheckingDoesntBlowStack.types
@@= skipped -2, +2 lines =@@
 === contextualExpressionTypecheckingDoesntBlowStack.ts ===
 // repro for: https://github.com/Microsoft/TypeScript/issues/23661
 export interface IValidationError {
+>IValidationError : IValidationError
+
     message: string;
 >message : string
 }
 
 export default class Operation {
->Operation : Operation
+>Operation : default
 
     validateParameters(parameterValues: any) : IValidationError[] | null {
 >validateParameters : (parameterValues: any) => IValidationError[] | null
@@= skipped -68, +70 lines =@@
 >result = (result || []).concat(innerResult) : IValidationError[]
 >result : IValidationError[] | null
 >(result || []).concat(innerResult) : IValidationError[]
->(result || []).concat : { (...items: ConcatArray<IValidationError>[]): IValidationError[]; (...items: (IValidationError | ConcatArray<IValidationError>)[]): IValidationError[]; }
+>(result || []).concat : { (...items: ConcatArray<IValidationError>[]): IValidationError[]; (...items: (ConcatArray<IValidationError> | IValidationError)[]): IValidationError[]; }
 >(result || []) : IValidationError[]
 >result || [] : IValidationError[]
 >result : IValidationError[] | null
 >[] : never[]
->concat : { (...items: ConcatArray<IValidationError>[]): IValidationError[]; (...items: (IValidationError | ConcatArray<IValidationError>)[]): IValidationError[]; }
+>concat : { (...items: ConcatArray<IValidationError>[]): IValidationError[]; (...items: (ConcatArray<IValidationError> | IValidationError)[]): IValidationError[]; }
 >innerResult : any
             }
         }
