//// [tests/cases/compiler/infinitelyExpandingTypes4.ts] ////

=== infinitelyExpandingTypes4.ts ===
interface Query<T> {
>Query : Query<T>
>T : T

    // ...
    groupBy<K>(keySelector: (item: T) => K): Query<Grouping<K, T>>;
>groupBy : <K>(keySelector: (item: T) => K) => Query<Grouping<K, T>>
>K : K
>keySelector : (item: T) => K
>item : T

    // ...
}

interface QueryEnumerator<T> {
>QueryEnumerator : QueryEnumerator<T>
>T : T

    // ...
    groupBy<K>(keySelector: (item: T) => K): QueryEnumerator<Grouping<K, T>>;
>groupBy : <K>(keySelector: (item: T) => K) => QueryEnumerator<Grouping<K, T>>
>K : K
>keySelector : (item: T) => K
>item : T

    // ...
}

interface Grouping<K, T> extends Query<T> {
>Grouping : Grouping<K, T>
>K : K
>T : T

    key(): K;
>key : () => K
}

var q1: Query<number>;
>q1 : Query<number>

var q2: QueryEnumerator<number>;
>q2 : QueryEnumerator<number>

var q3: Query<number>;
>q3 : Query<number>

q1 = q2; // should error
>q1 = q2 : QueryEnumerator<number>
>q1 : Query<number>
>q2 : QueryEnumerator<number>

q1 = q3; // should not error
>q1 = q3 : Query<number>
>q1 : Query<number>
>q3 : Query<number>

