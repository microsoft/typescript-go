//// [tests/cases/compiler/checkInfiniteExpansionTermination2.ts] ////

=== checkInfiniteExpansionTermination2.ts ===
// Regression test for #1002
// Before fix this code would cause infinite loop

interface IObservable<T> {
>IObservable : IObservable<T>
>T : T

    n: IObservable<T[]>;
>n : IObservable<T[]>
}
interface ISubject<T> extends IObservable<T> { }
>ISubject : ISubject<T>
>T : T

declare function combineLatest<TOther>(x: IObservable<TOther>[]): void;
>combineLatest : { <TOther>(x: IObservable<TOther>[]): void; (): void; }
>TOther : TOther
>x : IObservable<TOther>[]

declare function combineLatest(): void;
>combineLatest : { <TOther>(x: IObservable<TOther>[]): void; (): void; }

function fn<T>() {
>fn : <T>() => void
>T : T

    var values: ISubject<any>[] = [];
>values : ISubject<any>[]
>[] : undefined[]

    // Hang when using <T>, but not <any>
    combineLatest<T>(values);
>combineLatest<T>(values) : void
>combineLatest : { <TOther>(x: IObservable<TOther>[]): void; (): void; }
>values : ISubject<any>[]
}

