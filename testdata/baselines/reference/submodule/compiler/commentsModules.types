//// [tests/cases/compiler/commentsModules.ts] ////

=== commentsModules.ts ===
/** Module comment*/
module m1 {
>m1 : typeof m1

    /** b's comment*/
    export var b: number;
>b : number

    /** foo's comment*/
    function foo() {
>foo : () => number

        return b;
>b : number
    }
    /** m2 comments*/
    export module m2 {
>m2 : typeof m2

        /** class comment;*/
        export class c {
>c : c

        };
        /** i*/
        export var i = new c();
>i : c
>new c() : c
>c : typeof c
    }
    /** exported function*/
    export function fooExport() {
>fooExport : () => number

        return foo();
>foo() : number
>foo : () => number
    }

    // shouldn't appear
    export function foo2Export(/**hm*/ a: string) {
>foo2Export : (a: string) => void
>a : string
    }

    /** foo3Export
     * comment
     */
    export function foo3Export() {
>foo3Export : () => void
    }

    /** foo4Export
     * comment
     */
    function foo4Export() {
>foo4Export : () => void
    }
} // trailing comment module
m1.fooExport();
>m1.fooExport() : number
>m1.fooExport : () => number
>m1 : typeof m1
>fooExport : () => number

var myvar = new m1.m2.c();
>myvar : c
>new m1.m2.c() : c
>m1.m2.c : typeof c
>m1.m2 : typeof m2
>m1 : typeof m1
>m2 : typeof m2
>c : typeof c

/** module comment of m2.m3*/
module m2.m3 {
>m2 : typeof m2
>m3 : typeof m3

    /** Exported class comment*/
    export class c {
>c : c
    }
} /* trailing dotted module comment*/
new m2.m3.c();
>new m2.m3.c() : any
>m2.m3.c : any
>m2.m3 : any
>m2 : typeof m2
>m3 : any
>c : any

/** module comment of m3.m4.m5*/
module m3.m4.m5 {
>m3 : typeof m3
>m4 : typeof m4
>m5 : typeof m5

    /** Exported class comment*/
    export class c {
>c : c
    }
} // trailing dotted module 2
new m3.m4.m5.c();
>new m3.m4.m5.c() : any
>m3.m4.m5.c : any
>m3.m4.m5 : any
>m3.m4 : any
>m3 : typeof m3
>m4 : any
>m5 : any
>c : any

/** module comment of m4.m5.m6*/
module m4.m5.m6 {
>m4 : typeof m4
>m5 : typeof m5
>m6 : typeof m6

    export module m7 {
>m7 : typeof m7

        /** Exported class comment*/
        export class c {
>c : c
        }
    } /* trailing inner module */ /* multiple comments*/
}
new m4.m5.m6.m7.c();
>new m4.m5.m6.m7.c() : any
>m4.m5.m6.m7.c : any
>m4.m5.m6.m7 : any
>m4.m5.m6 : any
>m4.m5 : any
>m4 : typeof m4
>m5 : any
>m6 : any
>m7 : any
>c : any

/** module comment of m5.m6.m7*/
module m5.m6.m7 {
>m5 : typeof m5
>m6 : typeof m6
>m7 : typeof m7

    /** module m8 comment*/
    export module m8 {
>m8 : typeof m8

        /** Exported class comment*/
        export class c {
>c : c
        }
    }
}
new m5.m6.m7.m8.c();
>new m5.m6.m7.m8.c() : any
>m5.m6.m7.m8.c : any
>m5.m6.m7.m8 : any
>m5.m6.m7 : any
>m5.m6 : any
>m5 : typeof m5
>m6 : any
>m7 : any
>m8 : any
>c : any

module m6.m7 {
>m6 : typeof m6
>m7 : typeof m7

    export module m8 {
>m8 : typeof m8

        /** Exported class comment*/
        export class c {
>c : c
        }
    }
}
new m6.m7.m8.c();
>new m6.m7.m8.c() : any
>m6.m7.m8.c : any
>m6.m7.m8 : any
>m6.m7 : any
>m6 : typeof m6
>m7 : any
>m8 : any
>c : any

module m7.m8 {
>m7 : typeof m7
>m8 : typeof m8

    /** module m9 comment*/
    export module m9 {
>m9 : typeof m9

        /** Exported class comment*/
        export class c {
>c : c
        }

        /** class d */
        class d {
>d : d
        }

        // class e
        export class e {
>e : e
        }
    }
}
new m7.m8.m9.c();
>new m7.m8.m9.c() : any
>m7.m8.m9.c : any
>m7.m8.m9 : any
>m7.m8 : any
>m7 : typeof m7
>m8 : any
>m9 : any
>c : any

