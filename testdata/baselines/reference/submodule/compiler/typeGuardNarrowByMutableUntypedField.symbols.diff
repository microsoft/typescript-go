--- old.typeGuardNarrowByMutableUntypedField.symbols
+++ new.typeGuardNarrowByMutableUntypedField.symbols
@@ -4,7 +4,7 @@
 declare function hasOwnProperty<P extends PropertyKey>(target: {}, property: P): target is { [K in P]: unknown };
 >hasOwnProperty : Symbol(hasOwnProperty, Decl(typeGuardNarrowByMutableUntypedField.ts, 0, 0))
 >P : Symbol(P, Decl(typeGuardNarrowByMutableUntypedField.ts, 0, 32))
->PropertyKey : Symbol(PropertyKey, Decl(lib.es5.d.ts, --, --))
+>PropertyKey : Symbol(PropertyKey)
 >target : Symbol(target, Decl(typeGuardNarrowByMutableUntypedField.ts, 0, 55))
 >property : Symbol(property, Decl(typeGuardNarrowByMutableUntypedField.ts, 0, 66))
 >P : Symbol(P, Decl(typeGuardNarrowByMutableUntypedField.ts, 0, 32))
@@ -14,8 +14,8 @@
 
 declare const arrayLikeOrIterable: ArrayLike<any> | Iterable<any>;
 >arrayLikeOrIterable : Symbol(arrayLikeOrIterable, Decl(typeGuardNarrowByMutableUntypedField.ts, 1, 13))
->ArrayLike : Symbol(ArrayLike, Decl(lib.es5.d.ts, --, --))
->Iterable : Symbol(Iterable, Decl(lib.es2015.iterable.d.ts, --, --))
+>ArrayLike : Symbol(ArrayLike)
+>Iterable : Symbol(Iterable)
 
 if (hasOwnProperty(arrayLikeOrIterable, 'length')) {
 >hasOwnProperty : Symbol(hasOwnProperty, Decl(typeGuardNarrowByMutableUntypedField.ts, 0, 0))
@@ -23,7 +23,5 @@
 
     let x: number = arrayLikeOrIterable.length;
 >x : Symbol(x, Decl(typeGuardNarrowByMutableUntypedField.ts, 3, 7))
->arrayLikeOrIterable.length : Symbol(ArrayLike.length, Decl(lib.es5.d.ts, --, --))
 >arrayLikeOrIterable : Symbol(arrayLikeOrIterable, Decl(typeGuardNarrowByMutableUntypedField.ts, 1, 13))
->length : Symbol(ArrayLike.length, Decl(lib.es5.d.ts, --, --))
 }
