--- old.inKeywordAndIntersection.types
+++ new.inKeywordAndIntersection.types
@@= skipped -11, +11 lines =@@
 >0 : 0
 
 function f10(obj: A & { x: string } | B) {
->f10 : (obj: (A & { x: string; }) | B) => void
->obj : B | (A & { x: string; })
+>f10 : (obj: B | A & { x: string; }) => void
+>obj : B | A & { x: string; }
 >x : string
 
     if (obj instanceof Object) {
 >obj instanceof Object : boolean
->obj : B | (A & { x: string; })
+>obj : B | A & { x: string; }
 >Object : ObjectConstructor
 
         obj;  // A & { x: string } | B
->obj : B | (A & { x: string; })
+>obj : B | A & { x: string; }
     }
     else {
         obj;  // Error
@@= skipped -21, +21 lines =@@
 // Repro from #50844
 
 interface InstanceOne {
+>InstanceOne : InstanceOne
+
     one(): void
 >one : () => void
 }
 
 interface InstanceTwo {
+>InstanceTwo : InstanceTwo
+
     two(): void
 >two : () => void
 }
@@= skipped -15, +19 lines =@@
 >{} : {}
 
 const ClassOne = {} as { new(): InstanceOne } & { foo: true };
->ClassOne : (new () => InstanceOne) & { foo: true; }
->{} as { new(): InstanceOne } & { foo: true } : (new () => InstanceOne) & { foo: true; }
+>ClassOne : new () => InstanceOne & { foo: true; }
+>{} as { new(): InstanceOne } & { foo: true } : new () => InstanceOne & { foo: true; }
 >{} : {}
 >foo : true
 >true : true
@@= skipped -9, +9 lines =@@
 if (instance instanceof ClassOne) {
 >instance instanceof ClassOne : boolean
 >instance : InstanceOne | InstanceTwo
->ClassOne : (new () => InstanceOne) & { foo: true; }
+>ClassOne : new () => InstanceOne & { foo: true; }
 
     instance.one();
 >instance.one() : void
