--- old.overloadOnConstInheritance1.symbols
+++ new.overloadOnConstInheritance1.symbols
@@= skipped -4, +4 lines =@@
 >Base : Symbol(Base, Decl(overloadOnConstInheritance1.ts, 0, 0))
 
     addEventListener(x: string): any;
->addEventListener : Symbol(Base.addEventListener, Decl(overloadOnConstInheritance1.ts, 0, 16), Decl(overloadOnConstInheritance1.ts, 1, 37))
+>addEventListener : Symbol(addEventListener, Decl(overloadOnConstInheritance1.ts, 0, 16), Decl(overloadOnConstInheritance1.ts, 1, 37))
 >x : Symbol(x, Decl(overloadOnConstInheritance1.ts, 1, 21))
 
     addEventListener(x: 'foo'): string;
->addEventListener : Symbol(Base.addEventListener, Decl(overloadOnConstInheritance1.ts, 0, 16), Decl(overloadOnConstInheritance1.ts, 1, 37))
+>addEventListener : Symbol(addEventListener, Decl(overloadOnConstInheritance1.ts, 0, 16), Decl(overloadOnConstInheritance1.ts, 1, 37))
 >x : Symbol(x, Decl(overloadOnConstInheritance1.ts, 2, 21))
 }
 interface Deriver extends Base {
@@= skipped -12, +12 lines =@@
 >Base : Symbol(Base, Decl(overloadOnConstInheritance1.ts, 0, 0))
 
     addEventListener(x: string): any;
->addEventListener : Symbol(Deriver.addEventListener, Decl(overloadOnConstInheritance1.ts, 4, 32), Decl(overloadOnConstInheritance1.ts, 5, 37))
+>addEventListener : Symbol(addEventListener, Decl(overloadOnConstInheritance1.ts, 4, 32), Decl(overloadOnConstInheritance1.ts, 5, 37))
 >x : Symbol(x, Decl(overloadOnConstInheritance1.ts, 5, 21))
 
     addEventListener(x: 'bar'): string;
->addEventListener : Symbol(Deriver.addEventListener, Decl(overloadOnConstInheritance1.ts, 4, 32), Decl(overloadOnConstInheritance1.ts, 5, 37))
+>addEventListener : Symbol(addEventListener, Decl(overloadOnConstInheritance1.ts, 4, 32), Decl(overloadOnConstInheritance1.ts, 5, 37))
 >x : Symbol(x, Decl(overloadOnConstInheritance1.ts, 6, 21))
 }
 
