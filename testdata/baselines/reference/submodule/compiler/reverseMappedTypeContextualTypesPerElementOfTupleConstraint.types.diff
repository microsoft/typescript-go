--- old.reverseMappedTypeContextualTypesPerElementOfTupleConstraint.types
+++ new.reverseMappedTypeContextualTypesPerElementOfTupleConstraint.types
@@= skipped -36, +36 lines =@@
 >bindAll : <TTarget extends EventTarget, TTypes extends Tuple<keyof TTarget & `on${any}`>>(target: TTarget, bindings: { [K in keyof TTypes]: { type: TTypes[K]; listener: (ev: Parameters<Extract<TTarget[TTypes[K]], (...args: any[]) => any>>[0]) => void; }; }) => void
 >{} as HTMLButtonElement : HTMLButtonElement
 >{} : {}
->[  {    type: "onclick",    listener: (event) => {},  },  {    type: "onkeydown",    listener: (event) => {},  },] : [{ type: "onclick"; listener: (event: MouseEvent) => void; }, { type: "onkeydown"; listener: (event: KeyboardEvent) => void; }]
+>[  {    type: "onclick",    listener: (event) => {},  },  {    type: "onkeydown",    listener: (event) => {},  },] : [{ type: "onclick"; listener: (event: PointerEvent) => void; }, { type: "onkeydown"; listener: (event: KeyboardEvent) => void; }]
   {
->{    type: "onclick",    listener: (event) => {},  } : { type: "onclick"; listener: (event: MouseEvent) => void; }
+>{    type: "onclick",    listener: (event) => {},  } : { type: "onclick"; listener: (event: PointerEvent) => void; }

     type: "onclick",
 >type : "onclick"
 >"onclick" : "onclick"

     listener: (event) => {},
->listener : (event: MouseEvent) => void
->(event) => {} : (event: MouseEvent) => void
->event : MouseEvent
+>listener : (event: PointerEvent) => void
+>(event) => {} : (event: PointerEvent) => void
+>event : PointerEvent

   },
   {