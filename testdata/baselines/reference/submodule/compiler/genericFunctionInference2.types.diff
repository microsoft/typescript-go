--- old.genericFunctionInference2.types
+++ new.genericFunctionInference2.types
@@= skipped -4, +4 lines =@@
 
 type Reducer<S> = (state: S) => S;
 >Reducer : Reducer<S>
+>S : S
 >state : S
 
 declare function combineReducers<S>(reducers: { [K in keyof S]: Reducer<S[K]> }): Reducer<S>;
->combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
->reducers : { [K in keyof S]: Reducer<S[K]>; }
+>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]> }) => Reducer<S>
+>S : S
+>reducers : { [K in keyof S]: Reducer<S[K]> }
+>K : K
 
 type MyState = { combined: { foo: number } };
 >MyState : MyState
@@= skipped -17, +20 lines =@@
 const myReducer1: Reducer<MyState> = combineReducers({
 >myReducer1 : Reducer<MyState>
 >combineReducers({    combined: combineReducers({ foo }),}) : Reducer<{ combined: { foo: number; }; }>
->combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
+>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]> }) => Reducer<S>
 >{    combined: combineReducers({ foo }),} : { combined: Reducer<{ foo: number; }>; }
 
     combined: combineReducers({ foo }),
 >combined : Reducer<{ foo: number; }>
 >combineReducers({ foo }) : Reducer<{ foo: number; }>
->combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
+>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]> }) => Reducer<S>
 >{ foo } : { foo: Reducer<number>; }
 >foo : Reducer<number>
 
@@= skipped -15, +15 lines =@@
 const myReducer2 = combineReducers({
 >myReducer2 : Reducer<{ combined: { foo: number; }; }>
 >combineReducers({    combined: combineReducers({ foo }),}) : Reducer<{ combined: { foo: number; }; }>
->combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
+>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]> }) => Reducer<S>
 >{    combined: combineReducers({ foo }),} : { combined: Reducer<{ foo: number; }>; }
 
     combined: combineReducers({ foo }),
 >combined : Reducer<{ foo: number; }>
 >combineReducers({ foo }) : Reducer<{ foo: number; }>
->combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
+>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]> }) => Reducer<S>
 >{ foo } : { foo: Reducer<number>; }
 >foo : Reducer<number>
 
@@= skipped -16, +16 lines =@@
 
 declare function withH<T, U>(handlerCreators: HandleCreatorsFactory<T, U>): U;
 >withH : <T, U>(handlerCreators: HandleCreatorsFactory<T, U>) => U
+>T : T
+>U : U
 >handlerCreators : HandleCreatorsFactory<T, U>
 
 type Props = { out: number }
@@= skipped -8, +10 lines =@@
 
 type HandleCreatorsFactory<T, U> = (initialProps: T) => { [P in keyof U]: (props: T) => U[P] };
 >HandleCreatorsFactory : HandleCreatorsFactory<T, U>
+>T : T
+>U : U
 >initialProps : T
+>P : P
 >props : T
 
 const enhancer4 = withH((props: Props) => ({
