--- old.privacyTypeParametersOfInterfaceDeclFile.types
+++ new.privacyTypeParametersOfInterfaceDeclFile.types
@@= skipped -10, +10 lines =@@
 
 class privateClassT<T> {
 >privateClassT : privateClassT<T>
+>T : T
 }
 
 export class publicClassT<T> {
 >publicClassT : publicClassT<T>
+>T : T
 }
 
 export interface publicInterfaceWithPrivateTypeParameters<T extends privateClass> { // Error
+>publicInterfaceWithPrivateTypeParameters : publicInterfaceWithPrivateTypeParameters<T>
+>T : T
+
     myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -28, +33 lines =@@
 }
 
 export interface publicInterfaceWithPublicTypeParameters<T extends publicClass> {
+>publicInterfaceWithPublicTypeParameters : publicInterfaceWithPublicTypeParameters<T>
+>T : T
+
     myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
 }
 
 interface privateInterfaceWithPrivateTypeParameters<T extends privateClass> {
+>privateInterfaceWithPrivateTypeParameters : privateInterfaceWithPrivateTypeParameters<T>
+>T : T
+
     myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
 }
 
 interface privateInterfaceWithPublicTypeParameters<T extends publicClass> {
+>privateInterfaceWithPublicTypeParameters : privateInterfaceWithPublicTypeParameters<T>
+>T : T
+
     myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
 }
 
 export interface publicInterfaceWithPublicTypeParametersWithoutExtends<T> {
+>publicInterfaceWithPublicTypeParametersWithoutExtends : publicInterfaceWithPublicTypeParametersWithoutExtends<T>
+>T : T
+
     myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -9, +12 lines =@@
 }
 
 interface privateInterfaceWithPublicTypeParametersWithoutExtends<T> {
+>privateInterfaceWithPublicTypeParametersWithoutExtends : privateInterfaceWithPublicTypeParametersWithoutExtends<T>
+>T : T
+
     myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -10, +13 lines =@@
 
 
 export interface publicInterfaceWithPrivateModuleTypeParameterConstraints<T extends privateModule.publicClassInPrivateModule> { // Error
+>publicInterfaceWithPrivateModuleTypeParameterConstraints : publicInterfaceWithPrivateModuleTypeParameterConstraints<T>
+>T : T
 >privateModule : any
 }
 
 interface privateInterfaceWithPrivateModuleTypeParameterConstraints<T extends privateModule.publicClassInPrivateModule> { // Error
+>privateInterfaceWithPrivateModuleTypeParameterConstraints : privateInterfaceWithPrivateModuleTypeParameterConstraints<T>
+>T : T
 >privateModule : any
 }
 
@@= skipped -20, +24 lines =@@
 
     class privateClassInPublicModuleT<T> {
 >privateClassInPublicModuleT : privateClassInPublicModuleT<T>
+>T : T
     }
 
     export class publicClassInPublicModuleT<T> {
 >publicClassInPublicModuleT : publicClassInPublicModuleT<T>
+>T : T
     }
 
     export interface publicInterfaceWithPrivateTypeParameters<T extends privateClassInPublicModule> { // Error
+>publicInterfaceWithPrivateTypeParameters : publicInterfaceWithPrivateTypeParameters<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -28, +33 lines =@@
     }
 
     export interface publicInterfaceWithPublicTypeParameters<T extends publicClassInPublicModule> {
+>publicInterfaceWithPublicTypeParameters : publicInterfaceWithPublicTypeParameters<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
     }
 
     interface privateInterfaceWithPrivateTypeParameters<T extends privateClassInPublicModule> {
+>privateInterfaceWithPrivateTypeParameters : privateInterfaceWithPrivateTypeParameters<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
     }
 
     interface privateInterfaceWithPublicTypeParameters<T extends publicClassInPublicModule> {
+>privateInterfaceWithPublicTypeParameters : privateInterfaceWithPublicTypeParameters<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
     }
 
     export interface publicInterfaceWithPublicTypeParametersWithoutExtends<T> {
+>publicInterfaceWithPublicTypeParametersWithoutExtends : publicInterfaceWithPublicTypeParametersWithoutExtends<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -9, +12 lines =@@
     }
 
     interface privateInterfaceWithPublicTypeParametersWithoutExtends<T> {
+>privateInterfaceWithPublicTypeParametersWithoutExtends : privateInterfaceWithPublicTypeParametersWithoutExtends<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -9, +12 lines =@@
     }
 
     export interface publicInterfaceWithPrivateModuleTypeParameterConstraints<T extends privateModule.publicClassInPrivateModule> { // Error
+>publicInterfaceWithPrivateModuleTypeParameterConstraints : publicInterfaceWithPrivateModuleTypeParameterConstraints<T>
+>T : T
 >privateModule : any
     }
 
     interface privateInterfaceWithPrivateModuleTypeParameterConstraints<T extends privateModule.publicClassInPrivateModule> { // Error
+>privateInterfaceWithPrivateModuleTypeParameterConstraints : privateInterfaceWithPrivateModuleTypeParameterConstraints<T>
+>T : T
 >privateModule : any
     }
 }
@@= skipped -21, +25 lines =@@
 
     class privateClassInPrivateModuleT<T> {
 >privateClassInPrivateModuleT : privateClassInPrivateModuleT<T>
+>T : T
     }
 
     export class publicClassInPrivateModuleT<T> {
 >publicClassInPrivateModuleT : publicClassInPrivateModuleT<T>
+>T : T
     }
 
     export interface publicInterfaceWithPrivateTypeParameters<T extends privateClassInPrivateModule> {
+>publicInterfaceWithPrivateTypeParameters : publicInterfaceWithPrivateTypeParameters<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -28, +33 lines =@@
     }
 
     export interface publicInterfaceWithPublicTypeParameters<T extends publicClassInPrivateModule> {
+>publicInterfaceWithPublicTypeParameters : publicInterfaceWithPublicTypeParameters<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
     }
 
     interface privateInterfaceWithPrivateTypeParameters<T extends privateClassInPrivateModule> {
+>privateInterfaceWithPrivateTypeParameters : privateInterfaceWithPrivateTypeParameters<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
     }
 
     interface privateInterfaceWithPublicTypeParameters<T extends publicClassInPrivateModule> {
+>privateInterfaceWithPublicTypeParameters : privateInterfaceWithPublicTypeParameters<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -21, +24 lines =@@
     }
 
     export interface publicInterfaceWithPublicTypeParametersWithoutExtends<T> {
+>publicInterfaceWithPublicTypeParametersWithoutExtends : publicInterfaceWithPublicTypeParametersWithoutExtends<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
@@= skipped -9, +12 lines =@@
     }
 
     interface privateInterfaceWithPublicTypeParametersWithoutExtends<T> {
+>privateInterfaceWithPublicTypeParametersWithoutExtends : privateInterfaceWithPublicTypeParametersWithoutExtends<T>
+>T : T
+
         myMethod(val: T): T;
 >myMethod : (val: T) => T
 >val : T
