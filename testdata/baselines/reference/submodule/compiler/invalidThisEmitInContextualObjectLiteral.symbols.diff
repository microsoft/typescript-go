--- old.invalidThisEmitInContextualObjectLiteral.symbols
+++ new.invalidThisEmitInContextualObjectLiteral.symbols
@@= skipped -4, +4 lines =@@
 >IDef : Symbol(IDef, Decl(invalidThisEmitInContextualObjectLiteral.ts, 0, 0))
 
 	p1: (e:string) => void;
->p1 : Symbol(IDef.p1, Decl(invalidThisEmitInContextualObjectLiteral.ts, 0, 16))
+>p1 : Symbol(p1, Decl(invalidThisEmitInContextualObjectLiteral.ts, 0, 16))
 >e : Symbol(e, Decl(invalidThisEmitInContextualObjectLiteral.ts, 1, 6))
 
 	p2: () => (n: number) => any;
->p2 : Symbol(IDef.p2, Decl(invalidThisEmitInContextualObjectLiteral.ts, 1, 24))
+>p2 : Symbol(p2, Decl(invalidThisEmitInContextualObjectLiteral.ts, 1, 24))
 >n : Symbol(n, Decl(invalidThisEmitInContextualObjectLiteral.ts, 2, 12))
 }
 
@@= skipped -12, +12 lines =@@
 >TestController : Symbol(TestController, Decl(invalidThisEmitInContextualObjectLiteral.ts, 3, 1))
 
 	public m(def: IDef) { }
->m : Symbol(TestController.m, Decl(invalidThisEmitInContextualObjectLiteral.ts, 5, 22))
+>m : Symbol(m, Decl(invalidThisEmitInContextualObjectLiteral.ts, 5, 22))
 >def : Symbol(def, Decl(invalidThisEmitInContextualObjectLiteral.ts, 6, 10))
 >IDef : Symbol(IDef, Decl(invalidThisEmitInContextualObjectLiteral.ts, 0, 0))
 
 	public p = this.m({
->p : Symbol(TestController.p, Decl(invalidThisEmitInContextualObjectLiteral.ts, 6, 24))
->this.m : Symbol(TestController.m, Decl(invalidThisEmitInContextualObjectLiteral.ts, 5, 22))
+>p : Symbol(p, Decl(invalidThisEmitInContextualObjectLiteral.ts, 6, 24))
+>this.m : Symbol(m, Decl(invalidThisEmitInContextualObjectLiteral.ts, 5, 22))
 >this : Symbol(TestController, Decl(invalidThisEmitInContextualObjectLiteral.ts, 3, 1))
->m : Symbol(TestController.m, Decl(invalidThisEmitInContextualObjectLiteral.ts, 5, 22))
+>m : Symbol(m, Decl(invalidThisEmitInContextualObjectLiteral.ts, 5, 22))
 
 		p1: e => { },
 >p1 : Symbol(p1, Decl(invalidThisEmitInContextualObjectLiteral.ts, 7, 20))
