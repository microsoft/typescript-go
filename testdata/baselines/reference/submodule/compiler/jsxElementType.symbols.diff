--- old.jsxElementType.symbols
+++ new.jsxElementType.symbols
@@= skipped -6, +6 lines =@@

 type React18ReactFragment = ReadonlyArray<React18ReactNode>;
 >React18ReactFragment : Symbol(React18ReactFragment, Decl(jsxElementType.tsx, 1, 31))
->ReadonlyArray : Symbol(ReadonlyArray, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>ReadonlyArray : Symbol(ReadonlyArray, Decl(lib.es5.d.ts, --, --))
 >React18ReactNode : Symbol(React18ReactNode, Decl(jsxElementType.tsx, 3, 60))

 type React18ReactNode =
@@= skipped -23, +23 lines =@@
   | null
   | undefined
   | Promise<React18ReactNode>;
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --))
 >React18ReactNode : Symbol(React18ReactNode, Decl(jsxElementType.tsx, 3, 60))

 // // React.JSXElementConstructor but it now can return React nodes from function components.
@@= skipped -34, +34 lines =@@
 >IntrinsicElements : Symbol(IntrinsicElements, Decl(react16.d.ts, 2514, 86), Decl(jsxElementType.tsx, 22, 67), Decl(jsxElementType.tsx, 101, 19))

       ['my-custom-element']: React.DOMAttributes<unknown>;
->['my-custom-element'] : Symbol(IntrinsicElements['my-custom-element'], Decl(jsxElementType.tsx, 23, 33))
->'my-custom-element' : Symbol(IntrinsicElements['my-custom-element'], Decl(jsxElementType.tsx, 23, 33))
+>['my-custom-element'] : Symbol(IntrinsicElements["my-custom-element"], Decl(jsxElementType.tsx, 23, 33))
+>'my-custom-element' : Symbol(IntrinsicElements["my-custom-element"], Decl(jsxElementType.tsx, 23, 33))
 >React : Symbol(React, Decl(jsxElementType.tsx, 1, 6))
 >DOMAttributes : Symbol(React.DOMAttributes, Decl(react16.d.ts, 844, 9))
     }
@@= skipped -161, +161 lines =@@
 >div : Symbol(JSX.IntrinsicElements.div, Decl(react16.d.ts, 2546, 114))

 <my-custom-element />;
->my-custom-element : Symbol(JSX.IntrinsicElements['my-custom-element'], Decl(jsxElementType.tsx, 23, 33))
+>my-custom-element : Symbol(JSX.IntrinsicElements["my-custom-element"], Decl(jsxElementType.tsx, 23, 33))

 // Undeclared host element types are still rejected
 <boop />;
@@= skipped -59, +59 lines =@@
 >IntrinsicElements : Symbol(IntrinsicElements, Decl(react16.d.ts, 2514, 86), Decl(jsxElementType.tsx, 22, 67), Decl(jsxElementType.tsx, 101, 19))

           ['a:b']: { a: string };
->['a:b'] : Symbol(IntrinsicElements['a:b'], Decl(jsxElementType.tsx, 102, 35))
->'a:b' : Symbol(IntrinsicElements['a:b'], Decl(jsxElementType.tsx, 102, 35))
+>['a:b'] : Symbol(IntrinsicElements["a:b"], Decl(jsxElementType.tsx, 102, 35))
+>'a:b' : Symbol(IntrinsicElements["a:b"], Decl(jsxElementType.tsx, 102, 35))
 >a : Symbol(a, Decl(jsxElementType.tsx, 103, 20))
       }
   }