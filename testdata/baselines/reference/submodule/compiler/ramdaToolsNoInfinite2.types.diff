--- old.ramdaToolsNoInfinite2.types
+++ new.ramdaToolsNoInfinite2.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/ramdaToolsNoInfinite2.ts] ////
 
-=== Performance Stats ===
-Assignability cache: 5,000
-Type Count: 10,000
-Instantiation count: 25,000
-
 === ramdaToolsNoInfinite2.ts ===
 declare module "Any/Kind" {
 >"Any/Kind" : typeof import("Any/Kind")
@@= skipped -16, +11 lines =@@
 
     export type Kind<A extends any> = Extends<A, Function> extends 1 ? 'function' : Extends<A, List> extends 1 ? 'array' : Extends<A, object> extends 1 ? 'object' : Extends<A, string> extends 1 ? 'string' : Extends<A, number> extends 1 ? 'number' : Extends<A, boolean> extends 1 ? 'boolean' : 'unknown';
 >Kind : Kind<A>
+>A : A
 }
 declare module "Any/Compute" {
 >"Any/Compute" : typeof import("Any/Compute")
 
     export type Compute<A extends any> = A extends Function ? A : {
 >Compute : Compute<A>
+>A : A
 
         [K in keyof A]: A[K];
+>K : K
+
     } & {};
 }
 declare module "Object/Pick" {
@@= skipped -17, +21 lines =@@
 >Key : any
 
     type __Pick<O extends object, K extends keyof O> = {
->__Pick : { [P in K]: O[P]; }
+>__Pick : { [P in K]: O[P] }
+>O : O
+>K : K
 
         [P in K]: O[P];
+>P : P
+
     } & {};
 
     export type _Pick<O extends object, K extends Key> = __Pick<O, keyof O & K>;
 >_Pick : _Pick<O, K>
+>O : O
+>K : K
 
     export type Pick<O extends object, K extends Key> = O extends unknown ? _Pick<O, K & keyof O> : never;
 >Pick : Pick<O, K>
+>O : O
+>K : K
 }
 declare module "Object/Keys" {
 >"Object/Keys" : typeof import("Object/Keys")
@@= skipped -20, +28 lines =@@
 
     export type Keys<O extends object> = UKeys<O>;
 >Keys : Keys<O>
+>O : O
 }
 declare module "Object/Omit" {
 >"Object/Omit" : typeof import("Object/Omit")
@@= skipped -18, +19 lines =@@
 
     export type _Omit<O extends object, K extends Key> = _Pick<O, Exclude<Keys<O>, K>>;
 >_Omit : _Omit<O, K>
+>O : O
+>K : K
 
     export type Omit<O extends object, K extends Key> = O extends unknown ? _Omit<O, K> : never;
 >Omit : Omit<O, K>
+>O : O
+>K : K
 }
 declare module "Object/At" {
 >"Object/At" : typeof import("Object/At")
@@= skipped -15, +19 lines =@@
 
     type AtStrict<O extends object, K extends Key> = [K & keyof O] extends [never] ? never : O[K & keyof O];
 >AtStrict : AtStrict<O, K>
+>O : O
+>K : K
 
     type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
 >AtLoose : AtLoose<O, K>
+>O : O
+>K : K
 
     export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
 >At : At<O, K, strict>
+>O : O
+>K : K
+>strict : strict
 
         1: AtStrict<O, K>;
 >1 : AtStrict<O, K>
@@= skipped -35, +42 lines =@@
 
     export type Not<B extends Boolean> = {
 >Not : Not<B>
+>B : B
 
         0: 1;
 >0 : 1
@@= skipped -23, +24 lines =@@
 
     export type Has<U extends Union, U1 extends Union> = Not<Extends<Exclude<U1, U>, U1>>;
 >Has : Has<U, U1>
+>U : U
+>U1 : U1
 }
 declare module "Union/Union" {
 >"Union/Union" : typeof import("Union/Union")
@@= skipped -15, +17 lines =@@
 
     export type Exclude<U extends Union, M extends Union> = U extends M ? never : U;
 >Exclude : Exclude<U, M>
+>U : U
+>M : M
 }
 declare module "Any/_Internal" {
 >"Any/_Internal" : typeof import("Any/_Internal")
@@= skipped -12, +14 lines =@@
 
     export type NumberOf<N extends any> = N extends number ? _NumberOf<N> : N;
 >NumberOf : NumberOf<N>
+>N : N
 }
 declare module "Any/Implements" {
 >"Any/Implements" : typeof import("Any/Implements")
@@= skipped -9, +10 lines =@@
 
     export type Implements<A1 extends any, A2 extends any> = Extends<A1, A2> extends 1 ? 1 : 0;
 >Implements : Implements<A1, A2>
+>A1 : A1
+>A2 : A2
 }
 declare module "Any/Key" {
 >"Any/Key" : typeof import("Any/Key")
@@= skipped -18, +20 lines =@@
 
     export type Keys<U extends Union> = (U extends unknown ? keyof U : never) & Key;
 >Keys : Keys<U>
+>U : U
 }
 declare module "List/ObjectOf" {
 >"List/ObjectOf" : typeof import("List/ObjectOf")
@@= skipped -18, +19 lines =@@
 
     export type _ObjectOf<L extends object> = Has<keyof L, keyof List> extends 1 ? number extends At<L, 'length'> ? _Omit<L, Exclude<keyof any[], number>> : _Omit<L, keyof any[]> : L;
 >_ObjectOf : _ObjectOf<L>
+>L : L
 
     export type ObjectOf<L extends object> = L extends unknown ? _ObjectOf<L> : never;
 >ObjectOf : ObjectOf<L>
+>L : L
 }
 declare module "List/Keys" {
 >"List/Keys" : typeof import("List/Keys")
@@= skipped -19, +21 lines =@@
 
     export type Keys<L extends List> = Exclude<UKeys<L>, keyof any[]> | number;
 >Keys : Keys<L>
+>L : L
 }
 declare module "Object/Merge" {
 >"Object/Merge" : typeof import("Object/Merge")
@@= skipped -21, +22 lines =@@
 
     export type MergeFlat<O extends object, O1 extends object> = Compute<O & _Omit<O1, keyof O>>;
 >MergeFlat : MergeFlat<O, O1>
+>O : O
+>O1 : O1
 
     export type MergeDeep<O, O1> = (Kind<(O | O1)> extends 'object' ? MergeFlat<O & {}, O1 & {}> extends infer M ? {
 >MergeDeep : MergeDeep<O, O1>
+>O : O
+>O1 : O1
+>M : M
 
         [K in keyof M]: MergeDeep<M[K], At<O1 & {}, K>>;
+>K : K
+
     } & {} : never : O);
 
     export type Merge<O extends object, O1 extends object, depth extends Depth = 'flat'> = {
 >Merge : Merge<O, O1, depth>
+>O : O
+>O1 : O1
+>depth : depth
 
         'flat': MergeFlat<O, O1>;
 >'flat' : Compute<O & _Omit<O1, keyof O>>
@@= skipped -29, +39 lines =@@
 
     export type NonNullable<U extends Union> = Exclude<U, undefined | null>;
 >NonNullable : NonNullable<U>
+>U : U
 }
 declare module "Object/ListOf" {
 >"Object/ListOf" : typeof import("Object/ListOf")
@@= skipped -33, +34 lines =@@
 
     type PickIfEntry<O extends object, LN extends List, I extends Iteration> = Key<I> extends keyof O ? _Append<LN, O[Cast<Key<I>, keyof O>]> : LN;
 >PickIfEntry : PickIfEntry<O, LN, I>
+>O : O
+>LN : LN
+>I : I
 
     type __ListOf<O extends object, K, LN extends List = [], I extends Iteration = IterationOf<'0'>> = {
 >__ListOf : __ListOf<O, K, LN, I>
+>O : O
+>K : K
+>LN : LN
+>I : I
 
         0: __ListOf<O, Exclude<K, Key<I>>, PickIfEntry<O, LN, I>, Next<I>>;
 >0 : __ListOf<O, Exclude<K, Key<I>>, PickIfEntry<O, LN, I>, Next<I>>
@@= skipped -14, +21 lines =@@
 
     export type _ListOf<O extends object> = __ListOf<O, keyof O> extends infer X ? Cast<X, List> : never;
 >_ListOf : _ListOf<O>
+>O : O
+>X : X
 
     export type ListOf<O extends object> = O extends unknown ? _ListOf<O> : never;
 >ListOf : ListOf<O>
+>O : O
 }
 declare module "Object/NonNullable" {
 >"Object/NonNullable" : typeof import("Object/NonNullable")
@@= skipped -30, +33 lines =@@
 >Keys : any
 
     export type NonNullableFlat<O> = {
->NonNullableFlat : { [K in keyof O]: UNonNullable<O[K]>; }
+>NonNullableFlat : { [K in keyof O]: NonNullable<O[K]> }
+>O : O
 
         [K in keyof O]: UNonNullable<O[K]>;
+>K : K
+
     } & {};
 
     export type NonNullableDeep<O> = {
 >NonNullableDeep : NonNullableDeep<O>
+>O : O
 
         [K in keyof O]: NonNullableDeep<UNonNullable<O[K]>>;
+>K : K
+
     };
 
     type NonNullablePart<O extends object, depth extends Depth> = {
 >NonNullablePart : NonNullablePart<O, depth>
+>O : O
+>depth : depth
 
         'flat': NonNullableFlat<O>;
->'flat' : { [K in keyof O]: import("Union/Exclude").Exclude<O[K], null | undefined>; }
+>'flat' : { [K in keyof O]: Exclude<O[K], null | undefined> }
 
         'deep': NonNullableDeep<O>;
 >'deep' : NonNullableDeep<O>
@@= skipped -24, +32 lines =@@
 
     export type NonNullable<O extends object, K extends Key = Key, depth extends Depth = 'flat'> = {
 >NonNullable : NonNullable<O, K, depth>
+>O : O
+>K : K
+>depth : depth
 
         1: NonNullablePart<O, depth>;
 >1 : NonNullablePart<O, depth>
@@= skipped -13, +16 lines =@@
 >"Object/Overwrite" : typeof import("Object/Overwrite")
 
     export type Overwrite<O extends object, O1 extends object> = {
->Overwrite : { [K in keyof O]: K extends keyof O1 ? O1[K] : O[K]; }
+>Overwrite : { [K in keyof O]: K extends keyof O1 ? O1[K] : O[K] }
+>O : O
+>O1 : O1
 
         [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
+>K : K
+
     } & {};
 }
 declare module "Number/_Internal" {
@@= skipped -30, +34 lines =@@
 >Numbers : Numbers
 
         'string': {
->'string' : { all: Format<IterationMap[KnownIterationMapKeys], "s">; '+': Format<IterationMap[PositiveIterationKeys], "s">; '-': Format<IterationMap[NegativeIterationKeys], "s">; '0': Format<IterationMap["0"], "s">; }
+>'string' : { all: "-1" | "-10" | "-11" | "-12" | "-13" | "-14" | "-15" | "-16" | "-17" | "-18" | "-19" | "-2" | "-20" | "-21" | "-22" | "-23" | "-24" | "-25" | "-26" | "-27" | "-28" | "-29" | "-3" | "-30" | "-31" | "-32" | "-33" | "-34" | "-35" | "-36" | "-37" | "-38" | "-39" | "-4" | "-40" | "-5" | "-6" | "-7" | "-8" | "-9" | "0" | "1" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "2" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "3" | "30" | "31" | "32" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "4" | "40" | "5" | "6" | "7" | "8" | "9"; '+': "1" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "2" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "3" | "30" | "31" | "32" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "4" | "40" | "5" | "6" | "7" | "8" | "9"; '-': "-1" | "-10" | "-11" | "-12" | "-13" | "-14" | "-15" | "-16" | "-17" | "-18" | "-19" | "-2" | "-20" | "-21" | "-22" | "-23" | "-24" | "-25" | "-26" | "-27" | "-28" | "-29" | "-3" | "-30" | "-31" | "-32" | "-33" | "-34" | "-35" | "-36" | "-37" | "-38" | "-39" | "-4" | "-40" | "-5" | "-6" | "-7" | "-8" | "-9"; '0': "0"; }
 
             'all': Format<IterationMap[KnownIterationMapKeys], 's'>;
->'all' : "-40" | "-39" | "-38" | "-37" | "-36" | "-35" | "-34" | "-33" | "-32" | "-31" | "-30" | "-29" | "-28" | "-27" | "-26" | "-25" | "-24" | "-23" | "-22" | "-21" | "-20" | "-19" | "-18" | "-17" | "-16" | "-15" | "-14" | "-13" | "-12" | "-11" | "-10" | "-9" | "-8" | "-7" | "-6" | "-5" | "-4" | "-3" | "-2" | "-1" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "32" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "40"
+>'all' : "-1" | "-10" | "-11" | "-12" | "-13" | "-14" | "-15" | "-16" | "-17" | "-18" | "-19" | "-2" | "-20" | "-21" | "-22" | "-23" | "-24" | "-25" | "-26" | "-27" | "-28" | "-29" | "-3" | "-30" | "-31" | "-32" | "-33" | "-34" | "-35" | "-36" | "-37" | "-38" | "-39" | "-4" | "-40" | "-5" | "-6" | "-7" | "-8" | "-9" | "0" | "1" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "2" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "3" | "30" | "31" | "32" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "4" | "40" | "5" | "6" | "7" | "8" | "9"
 
             '+': Format<IterationMap[PositiveIterationKeys], 's'>;
->'+' : "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "32" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "40"
+>'+' : "1" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "2" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "3" | "30" | "31" | "32" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "4" | "40" | "5" | "6" | "7" | "8" | "9"
 
             '-': Format<IterationMap[NegativeIterationKeys], 's'>;
->'-' : "-40" | "-39" | "-38" | "-37" | "-36" | "-35" | "-34" | "-33" | "-32" | "-31" | "-30" | "-29" | "-28" | "-27" | "-26" | "-25" | "-24" | "-23" | "-22" | "-21" | "-20" | "-19" | "-18" | "-17" | "-16" | "-15" | "-14" | "-13" | "-12" | "-11" | "-10" | "-9" | "-8" | "-7" | "-6" | "-5" | "-4" | "-3" | "-2" | "-1"
+>'-' : "-1" | "-10" | "-11" | "-12" | "-13" | "-14" | "-15" | "-16" | "-17" | "-18" | "-19" | "-2" | "-20" | "-21" | "-22" | "-23" | "-24" | "-25" | "-26" | "-27" | "-28" | "-29" | "-3" | "-30" | "-31" | "-32" | "-33" | "-34" | "-35" | "-36" | "-37" | "-38" | "-39" | "-4" | "-40" | "-5" | "-6" | "-7" | "-8" | "-9"
 
             '0': Format<IterationMap['0'], 's'>;
 >'0' : "0"
 
         };
         'number': {
->'number' : { all: Format<IterationMap[KnownIterationMapKeys], "n">; '+': Format<IterationMap[PositiveIterationKeys], "n">; '-': Format<IterationMap[NegativeIterationKeys], "n">; '0': Format<IterationMap["0"], "n">; }
+>'number' : { all: -40 | -39 | -38 | -37 | -36 | -35 | -34 | -33 | -32 | -31 | -30 | -29 | -28 | -27 | -26 | -25 | -24 | -23 | -22 | -21 | -20 | -19 | -18 | -17 | -16 | -15 | -14 | -13 | -12 | -11 | -10 | -9 | -8 | -7 | -6 | -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40; '+': 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40; '-': -40 | -39 | -38 | -37 | -36 | -35 | -34 | -33 | -32 | -31 | -30 | -29 | -28 | -27 | -26 | -25 | -24 | -23 | -22 | -21 | -20 | -19 | -18 | -17 | -16 | -15 | -14 | -13 | -12 | -11 | -10 | -9 | -8 | -7 | -6 | -5 | -4 | -3 | -2 | -1; '0': 0; }
 
             'all': Format<IterationMap[KnownIterationMapKeys], 'n'>;
->'all' : 0 | 1 | 3 | 5 | 40 | -40 | 39 | -39 | 38 | -38 | 37 | -37 | 36 | -36 | 35 | -35 | 34 | -34 | 33 | -33 | 32 | -32 | 31 | -31 | 30 | -30 | 29 | -29 | 28 | -28 | 27 | -27 | 26 | -26 | 25 | -25 | 24 | -24 | 23 | -23 | 22 | -22 | 21 | -21 | 20 | -20 | 19 | -19 | 18 | -18 | 17 | -17 | 16 | -16 | 15 | -15 | 14 | -14 | 13 | -13 | 12 | -12 | 11 | -11 | 10 | -10 | 9 | -9 | 8 | -8 | 7 | -7 | 6 | -6 | -5 | 4 | -4 | -3 | 2 | -2 | -1
+>'all' : -40 | -39 | -38 | -37 | -36 | -35 | -34 | -33 | -32 | -31 | -30 | -29 | -28 | -27 | -26 | -25 | -24 | -23 | -22 | -21 | -20 | -19 | -18 | -17 | -16 | -15 | -14 | -13 | -12 | -11 | -10 | -9 | -8 | -7 | -6 | -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40
 
             '+': Format<IterationMap[PositiveIterationKeys], 'n'>;
->'+' : 1 | 3 | 5 | 40 | 39 | 38 | 37 | 36 | 35 | 34 | 33 | 32 | 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 9 | 8 | 7 | 6 | 4 | 2
+>'+' : 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40
 
             '-': Format<IterationMap[NegativeIterationKeys], 'n'>;
 >'-' : -40 | -39 | -38 | -37 | -36 | -35 | -34 | -33 | -32 | -31 | -30 | -29 | -28 | -27 | -26 | -25 | -24 | -23 | -22 | -21 | -20 | -19 | -18 | -17 | -16 | -15 | -14 | -13 | -12 | -11 | -10 | -9 | -8 | -7 | -6 | -5 | -4 | -3 | -2 | -1
@@= skipped -56, +56 lines =@@
 
     export type Prepend<L extends List, A extends any> = ((head: A, ...args: L) => any) extends ((...args: infer U) => any) ? U : L;
 >Prepend : [head: A, ...args: L]
+>L : L
+>A : A
 >head : A
 >args : L
 >args : U
+>U : U
 }
 declare module "List/_Internal" {
 >"List/_Internal" : typeof import("List/_Internal")
@@= skipped -14, +17 lines =@@
 >List : any
 
     export type Naked<L extends List> = Overwrite<Required<L>, L>;
->Naked : { [K in keyof Required<L>]: K extends keyof L ? L[K] : Required<L>[K]; }
+>Naked : { [K in keyof L]: K extends keyof L ? L[K] : Required<L>[K] }
+>L : L
 }
 declare module "List/Tail" {
 >"List/Tail" : typeof import("List/Tail")
@@= skipped -10, +11 lines =@@
 
     export type Tail<L extends List> = ((...t: L) => any) extends ((head: any, ...tail: infer LTail) => any) ? LTail : never;
 >Tail : Tail<L>
+>L : L
 >t : L
 >head : any
 >tail : LTail
+>LTail : LTail
 }
 declare module "Iteration/Format" {
 >"Iteration/Format" : typeof import("Iteration/Format")
@@= skipped -15, +17 lines =@@
 
     export type Format<I extends Iteration, fmt extends Formats> = {
 >Format : Format<I, fmt>
+>I : I
+>fmt : fmt
 
         's': I[2];
 >'s' : I[2]
@@= skipped -20, +22 lines =@@
 
     export type Pos<I extends Iteration> = Format<I, 'n'>;
 >Pos : I[3]
+>I : I
 }
 declare module "List/Append" {
 >"List/Append" : typeof import("List/Append")
@@= skipped -12, +13 lines =@@
 
     export type _Append<L extends List, A extends any> = _Concat<L, [A]>;
 >_Append : _Append<L, A>
+>L : L
+>A : A
 
     export type Append<L extends List, A extends any> = L extends unknown ? A extends unknown ? _Append<L, A> : never : never;
 >Append : Append<L, A>
+>L : L
+>A : A
 }
 declare module "List/Reverse" {
 >"List/Reverse" : typeof import("List/Reverse")
@@= skipped -39, +43 lines =@@
 
     type __Reverse<L extends List, LO extends List, I extends Iteration = IterationOf<'0'>> = {
 >__Reverse : __Reverse<L, LO, I>
+>L : L
+>LO : LO
+>I : I
 
         0: __Reverse<L, Prepend<LO, L[Pos<I>]>, Next<I>>;
 >0 : __Reverse<L, [head: L[Pos<I>], ...args: LO], Next<I>>
@@= skipped -11, +14 lines =@@
 
     export type _Reverse<L extends List, LO extends List = []> = __Reverse<Naked<L>, LO> extends infer X ? Cast<X, List> : never;
 >_Reverse : _Reverse<L, LO>
+>L : L
+>LO : LO
+>X : X
 
     export type Reverse<L extends List, LO extends List = []> = L extends unknown ? LO extends unknown ? _Reverse<L, LO> : never : never;
 >Reverse : Reverse<L, LO>
+>L : L
+>LO : LO
 }
 declare module "List/Concat" {
 >"List/Concat" : typeof import("List/Concat")
@@= skipped -15, +20 lines =@@
 
     export type _Concat<L extends List, L1 extends List> = _Reverse<_Reverse<L>, L1>;
 >_Concat : _Concat<L, L1>
+>L : L
+>L1 : L1
 
     export type Concat<L extends List, L1 extends List> = L extends unknown ? L1 extends L1 ? _Concat<L, L1> : never : never;
 >Concat : Concat<L, L1>
+>L : L
+>L1 : L1
 }
 declare module "List/Drop" {
 >"List/Drop" : typeof import("List/Drop")
@@= skipped -45, +49 lines =@@
 
     type DropForth<L extends List, N extends Iteration> = {
 >DropForth : DropForth<L, N>
+>L : L
+>N : N
 
         0: DropForth<Tail<L>, Prev<N>>;
 >0 : DropForth<Tail<L>, Prev<N>>
@@= skipped -11, +13 lines =@@
 
     type DropBack<L extends List, N extends Iteration, I extends Iteration = Prev<N>, LN extends List = []> = {
 >DropBack : DropBack<L, N, I, LN>
+>L : L
+>N : N
+>I : I
+>LN : LN
 
         0: DropBack<L, N, Prev<I>, Prepend<LN, L[Pos<I>]>>;
 >0 : DropBack<L, N, Prev<I>, [head: L[Pos<I>], ...args: LN]>
@@= skipped -13, +17 lines =@@
 
     type __Drop<L extends List, N extends Iteration, way extends Way = '->'> = {
 >__Drop : __Drop<L, N, way>
+>L : L
+>N : N
+>way : way
 
         '->': DropForth<L, N>;
 >'->' : DropForth<L, N>
@@= skipped -11, +14 lines =@@
 
     export type _Drop<L extends List, N extends Number, way extends Way = '->'> = __Drop<Naked<L>, IterationOf<N>, way> extends infer X ? Cast<X, List> : never;
 >_Drop : _Drop<L, N, way>
+>L : L
+>N : N
+>way : way
+>X : X
 
     export type Drop<L extends List, N extends Number, way extends Way = '->'> = L extends unknown ? N extends unknown ? _Drop<L, N, way> : never : never;
 >Drop : Drop<L, N, way>
+>L : L
+>N : N
+>way : way
 }
 declare module "List/Length" {
 >"List/Length" : typeof import("List/Length")
@@= skipped -18, +25 lines =@@
 
     export type Length<L extends List, fmt extends Formats = 'n'> = {
 >Length : Length<L, fmt>
+>L : L
+>fmt : fmt
 
         's': NumberOf<L['length']>;
 >'s' : NumberOf<L["length"]>
@@= skipped -20, +22 lines =@@
 
     export type Next<I extends Iteration> = IterationMap[I[1]];
 >Next : Next<I>
+>I : I
 }
 declare module "Any/Cast" {
 >"Any/Cast" : typeof import("Any/Cast")
 
     export type Cast<A1 extends any, A2 extends any> = A1 extends A2 ? A1 : A2;
 >Cast : Cast<A1, A2>
+>A1 : A1
+>A2 : A2
 }
 declare module "Function/Parameters" {
 >"Function/Parameters" : typeof import("Function/Parameters")
@@= skipped -15, +18 lines =@@
 
     export type Parameters<F extends Function> = F extends ((...args: infer L) => any) ? L : never;
 >Parameters : Parameters<F>
+>F : F
 >args : L
+>L : L
 }
 declare module "Function/Return" {
 >"Function/Return" : typeof import("Function/Return")
@@= skipped -10, +12 lines =@@
 
     export type Return<F extends Function> = F extends ((...args: any[]) => infer R) ? R : never;
 >Return : Return<F>
+>F : F
 >args : any[]
+>R : R
 }
 declare module "Iteration/Prev" {
 >"Iteration/Prev" : typeof import("Iteration/Prev")
@@= skipped -13, +15 lines =@@
 
     export type Prev<I extends Iteration> = IterationMap[I[0]];
 >Prev : Prev<I>
+>I : I
 }
 declare module "Number/NumberOf" {
 >"Number/NumberOf" : typeof import("Number/NumberOf")
@@= skipped -18, +19 lines =@@
 
     export type _NumberOf<N extends number> = {
 >_NumberOf : _NumberOf<N>
+>N : N
 
         [K in keyof IterationMap]: Pos<IterationMap[K]> extends N ? Key<IterationMap[K]> : never;
+>K : K
+
     }[keyof IterationMap];
 
     export type NumberOf<N extends number> = N extends Numbers['number']['all'] ? _NumberOf<N> : string;
 >NumberOf : NumberOf<N>
+>N : N
 }
 declare module "Object/_Internal" {
 >"Object/_Internal" : typeof import("Object/_Internal")
@@= skipped -18, +22 lines =@@
 
     export type Empty<O extends object> = {
 >Empty : Empty<O>
+>O : O
 
         [K in keyof O]: undefined;
+>K : K
+
     };
 }
 declare module "Iteration/IterationOf" {
@@= skipped -337, +340 lines =@@
 >'40' : ["39", "__", "40", 40, "+"]
 
         '__': ['__', '__', string, number, '-' | '0' | '+'];
->'__' : ["__", "__", string, number, "0" | "-" | "+"]
+>'__' : ["__", "__", string, number, "+" | "-" | "0"]
 
     };
 
     export type IterationOf<N extends Number> = N extends keyof IterationMap ? IterationMap[N] : IterationMap['__'];
 >IterationOf : IterationOf<N>
+>N : N
 }
 declare module "Iteration/Iteration" {
 >"Iteration/Iteration" : typeof import("Iteration/Iteration")
@@= skipped -27, +28 lines =@@
 
     export type Key<I extends Iteration> = Format<I, 's'>;
 >Key : I[2]
+>I : I
 }
 declare module "List/NonNullable" {
 >"List/NonNullable" : typeof import("List/NonNullable")
@@= skipped -37, +38 lines =@@
 
     export type NonNullable<L extends List, K extends Key = Key, depth extends Depth = 'flat'> = {
 >NonNullable : NonNullable<L, K, depth>
+>L : L
+>K : K
+>depth : depth
 
         1: Cast<ONonNullable<L, Key, depth>, List>;
->1 : Cast<ONonNullable<L, Key, depth>, List>
+>1 : Cast<NonNullable<L, Key, depth>, List>
 
         0: ListOf<ONonNullable<ObjectOf<L>, NumberOf<K>, depth>>;
->0 : ListOf<ONonNullable<ObjectOf<L>, NumberOf<K>, depth>>
+>0 : ListOf<NonNullable<ObjectOf<L>, NumberOf<K>, depth>>
 
     }[Implements<Keys<L>, K>] & {};
 }
@@= skipped -17, +20 lines =@@
 
     export type Type<A extends any, Id extends string> = A & {
 >Type : Type<A, Id>
+>A : A
+>Id : Id
 
         [K in typeof symbol]: Id;
->symbol : unique symbol
+>K : K
 
     };
 }
@@= skipped -13, +15 lines =@@
 >Type : any
 
     export type x = Type<{}, 'x'>;
->x : { [symbol]: "x"; }
+>x : { (Unique symbol): "x"; }
 }
 declare module "List/List" {
 >"List/List" : typeof import("List/List")
 
     export type List<A = any> = ReadonlyArray<A>;
 >List : List<A>
+>A : A
 }
 declare module "Function/Function" {
 >"Function/Function" : typeof import("Function/Function")
@@= skipped -15, +16 lines =@@
 >List : any
 
     export interface Function<P extends List = any, R extends any = any> {
+>Function : Function<P, R>
+>P : P
+>R : R
+
         (...args: P): R;
 >args : P
     }
@@= skipped -9, +13 lines =@@
 
     export type Extends<A1 extends any, A2 extends any> = [A1] extends [never] ? 0 : A1 extends A2 ? 1 : 0;
 >Extends : Extends<A1, A2>
+>A1 : A1
+>A2 : A2
 }
 
 declare module "Function/Curry" {
@@= skipped -58, +60 lines =@@
 
     type GapOf<L1 extends List, L2 extends List, LN extends List, I extends Iteration = IterationOf<'0'>> = L1[Pos<I>] extends x ? _Append<LN, L2[Pos<I>]> : LN;
 >GapOf : GapOf<L1, L2, LN, I>
+>L1 : L1
+>L2 : L2
+>LN : LN
+>I : I
 
     type _GapsOf<L1 extends List, L2 extends List, LN extends List = [], I extends Iteration = IterationOf<'0'>> = {
 >_GapsOf : _GapsOf<L1, L2, LN, I>
+>L1 : L1
+>L2 : L2
+>LN : LN
+>I : I
 
         0: _GapsOf<L1, L2, GapOf<L1, L2, LN, I>, Next<I>>;
 >0 : _GapsOf<L1, L2, GapOf<L1, L2, LN, I>, Next<I>>
@@= skipped -14, +22 lines =@@
 
     type GapsOf<L1 extends List, L2 extends List> = _GapsOf<L1, L2> extends infer X ? Cast<X, List> : never;
 >GapsOf : GapsOf<L1, L2>
+>L1 : L1
+>L2 : L2
+>X : X
 
     type Gaps<L extends List> = NonNullable<{
 >Gaps : Gaps<L>
+>L : L
 
         [K in keyof L]?: L[K] | x;
+>K : K
+
     }>;
 
     export type Curry<F extends Function> = <L extends List>(...args: Cast<L, Gaps<Parameters<F>>>) => GapsOf<L, Parameters<F>> extends infer G ? Length<Cast<G, List>> extends infer L ? L extends 0 ? Return<F> : L extends 1 ? Curry<(...args: Cast<G, List>) => Return<F>> & ((...args: Cast<G, List>) => Return<F>) : Curry<(...args: Cast<G, List>) => Return<F>> : never : never;
 >Curry : Curry<F>
+>F : F
+>L : L
 >args : Cast<L, Gaps<Parameters<F>>>
+>G : G
+>L : L
 >args : Cast<G, List>
 >args : Cast<G, List>
 >args : Cast<G, List>
