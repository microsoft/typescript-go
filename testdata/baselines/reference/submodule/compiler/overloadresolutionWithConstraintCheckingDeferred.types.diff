--- old.overloadresolutionWithConstraintCheckingDeferred.types
+++ new.overloadresolutionWithConstraintCheckingDeferred.types
@@= skipped -1, +1 lines =@@
 
 === overloadresolutionWithConstraintCheckingDeferred.ts ===
 interface A { x }
+>A : A
 >x : any
 
 interface B { x; y }
+>B : B
 >x : any
 >y : any
 
 interface C { z }
+>C : C
 >z : any
 
 interface D { q }
+>D : D
 >q : any
 
 class G<T extends A> {
 >G : G<T>
+>T : T
 
     constructor(x: T) { }
 >x : T
@@= skipped -53, +58 lines =@@
 >new G<typeof x>(x) : G<D>
 >G : typeof G
 >x : D
->x : D
 
 var result3: string = foo(x => { // x has type D
 >result3 : string
@@= skipped -11, +10 lines =@@
 
     var y: G<typeof x>; // error that D does not satisfy constraint, y is of type G<D>, entire call to foo is an error
 >y : G<D>
->x : D
 
     return y;
 >y : G<D>
