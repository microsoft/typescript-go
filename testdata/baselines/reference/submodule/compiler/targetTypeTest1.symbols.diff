--- old.targetTypeTest1.symbols
+++ new.targetTypeTest1.symbols
@@= skipped -1, +1 lines =@@
 
 === targetTypeTest1.ts ===
 declare class Point
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 {
       constructor(x: number, y: number);
 >x : Symbol(x, Decl(targetTypeTest1.ts, 2, 18))
 >y : Symbol(y, Decl(targetTypeTest1.ts, 2, 28))
 
       public x: number;
->x : Symbol(Point.x, Decl(targetTypeTest1.ts, 2, 40))
+>x : Symbol(x, Decl(targetTypeTest1.ts, 2, 40))
 
       public y: number;
->y : Symbol(Point.y, Decl(targetTypeTest1.ts, 3, 23))
+>y : Symbol(y, Decl(targetTypeTest1.ts, 3, 23))
 
       public add(dx: number, dy: number): Point;
->add : Symbol(Point.add, Decl(targetTypeTest1.ts, 4, 23))
+>add : Symbol(add, Decl(targetTypeTest1.ts, 4, 23))
 >dx : Symbol(dx, Decl(targetTypeTest1.ts, 5, 17))
 >dy : Symbol(dy, Decl(targetTypeTest1.ts, 5, 28))
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 
       static origin: Point;
->origin : Symbol(Point.origin, Decl(targetTypeTest1.ts, 5, 48), Decl(targetTypeTest1.ts, 22, 17))
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>origin : Symbol(origin, Decl(targetTypeTest1.ts, 5, 48), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 
 }
 
@@= skipped -28, +28 lines =@@
 // Because Point is a constructor function, this is inferred
 // to be Point and return type is inferred to be void
 function Point(x, y) {
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 >x : Symbol(x, Decl(targetTypeTest1.ts, 13, 15))
 >y : Symbol(y, Decl(targetTypeTest1.ts, 13, 17))
 
@@= skipped -29, +29 lines =@@
 
 // Point.origin declared as type Point
 Point.origin = new Point(0, 0);
->Point.origin : Symbol(Point.origin, Decl(targetTypeTest1.ts, 5, 48), Decl(targetTypeTest1.ts, 22, 17))
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
->origin : Symbol(Point.origin, Decl(targetTypeTest1.ts, 5, 48), Decl(targetTypeTest1.ts, 22, 17))
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point.origin : Symbol(origin, Decl(targetTypeTest1.ts, 5, 48), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
+>origin : Symbol(origin, Decl(targetTypeTest1.ts, 5, 48), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 
 // Point.prototype declared as type Point
 // this inferred as Point because of obj.prop assignment
 // dx, dy, and return type inferred using target typing
 Point.prototype.add = function(dx, dy) {
->Point.prototype.add : Symbol(Point.add, Decl(targetTypeTest1.ts, 4, 23))
->Point.prototype : Symbol(Point.prototype)
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
->prototype : Symbol(Point.prototype)
->add : Symbol(Point.add, Decl(targetTypeTest1.ts, 4, 23))
+>Point.prototype.add : Symbol(add, Decl(targetTypeTest1.ts, 4, 23))
+>Point.prototype : Symbol(prototype, Decl(targetTypeTest1.ts, 34, 19))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
+>prototype : Symbol(prototype, Decl(targetTypeTest1.ts, 34, 19))
+>add : Symbol(add, Decl(targetTypeTest1.ts, 4, 23))
 >dx : Symbol(dx, Decl(targetTypeTest1.ts, 30, 31))
 >dy : Symbol(dy, Decl(targetTypeTest1.ts, 30, 34))
 
     return new Point(this.x + dx, this.y + dy);
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 >dx : Symbol(dx, Decl(targetTypeTest1.ts, 30, 31))
 >dy : Symbol(dy, Decl(targetTypeTest1.ts, 30, 34))
 
@@= skipped -31, +31 lines =@@
 // this in function add inferred to be type of object literal (i.e. Point)
 // dx, dy, and return type of add inferred using target typing
 Point.prototype = {
->Point.prototype : Symbol(Point.prototype)
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
->prototype : Symbol(Point.prototype)
+>Point.prototype : Symbol(prototype, Decl(targetTypeTest1.ts, 34, 19))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
+>prototype : Symbol(prototype, Decl(targetTypeTest1.ts, 34, 19))
 
     x: 0,
 >x : Symbol(x, Decl(targetTypeTest1.ts, 39, 19))
@@= skipped -16, +16 lines =@@
 >dy : Symbol(dy, Decl(targetTypeTest1.ts, 42, 21))
 
         return new Point(this.x + dx, this.y + dy);
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 >dx : Symbol(dx, Decl(targetTypeTest1.ts, 42, 18))
 >dy : Symbol(dy, Decl(targetTypeTest1.ts, 42, 21))
     }
@@= skipped -25, +25 lines =@@
 >b : Symbol(b, Decl(targetTypeTest1.ts, 53, 25))
 
 	public a : number;
->a : Symbol(C.a, Decl(targetTypeTest1.ts, 53, 36))
+>a : Symbol(a, Decl(targetTypeTest1.ts, 53, 36))
 
 	public b: number;    
->b : Symbol(C.b, Decl(targetTypeTest1.ts, 54, 19))
+>b : Symbol(b, Decl(targetTypeTest1.ts, 54, 19))
 
 	C1M1(c:number,d:number):number;
->C1M1 : Symbol(C.C1M1, Decl(targetTypeTest1.ts, 55, 18))
+>C1M1 : Symbol(C1M1, Decl(targetTypeTest1.ts, 55, 18))
 >c : Symbol(c, Decl(targetTypeTest1.ts, 56, 6))
 >d : Symbol(d, Decl(targetTypeTest1.ts, 56, 15))
 } 
@@= skipped -24, +24 lines =@@
 }
 
 C.prototype = 
->C.prototype : Symbol(C.prototype)
+>C.prototype : Symbol(prototype, Decl(targetTypeTest1.ts, 62, 1))
 >C : Symbol(C, Decl(targetTypeTest1.ts, 57, 1), Decl(targetTypeTest1.ts, 50, 1))
->prototype : Symbol(C.prototype)
+>prototype : Symbol(prototype, Decl(targetTypeTest1.ts, 62, 1))
 
 	{	a:0,
 >a : Symbol(a, Decl(targetTypeTest1.ts, 65, 2))
