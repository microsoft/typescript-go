--- old.identicalGenericConditionalsWithInferRelated.types
+++ new.identicalGenericConditionalsWithInferRelated.types
@@= skipped -2, +2 lines =@@
 === identicalGenericConditionalsWithInferRelated.ts ===
 function f<X>(arg: X) {
 >f : <X>(arg: X) => void
+>X : X
 >arg : X
 
     type Cond1 = X extends [infer A] ? A : never;
->Cond1 : X extends [infer A] ? A : never
+>Cond1 : Cond1
+>A : A
 
     type Cond2 = X extends [infer A] ? A : never;
->Cond2 : X extends [infer A] ? A : never
+>Cond2 : Cond2
+>A : A
 
     let x: Cond1 = null as any;
->x : X extends [infer A] ? A : never
+>x : Cond1
 >null as any : any
 
     let y: Cond2 = null as any;
->y : X extends [infer A] ? A : never
+>y : Cond2
 >null as any : any
 
     x = y; // is err, should be ok
->x = y : X extends [infer A] ? A : never
->x : X extends [infer A] ? A : never
->y : X extends [infer A] ? A : never
+>x = y : Cond2
+>x : Cond1
+>y : Cond2
 
     y = x; // is err, should be ok
->y = x : X extends [infer A] ? A : never
->y : X extends [infer A] ? A : never
->x : X extends [infer A] ? A : never
+>y = x : Cond1
+>y : Cond2
+>x : Cond1
 }
 
 // repro from https://github.com/microsoft/TypeScript/issues/26627
 export type Constructor<T> = new (...args: any[]) => T
 >Constructor : Constructor<T>
+>T : T
 >args : any[]
 
 export type MappedResult<T> =
 >MappedResult : MappedResult<T>
+>T : T
 
     T extends Boolean ? boolean :
     T extends Number ? number :
@@= skipped -42, +47 lines =@@
 
 
 interface X {
+>X : X
+
     decode<C extends Constructor<any>>(ctor: C): MappedResult<C extends Constructor<infer T> ? T : never>
 >decode : <C extends Constructor<any>>(ctor: C) => MappedResult<C extends Constructor<infer T> ? T : never>
+>C : C
 >ctor : C
+>T : T
 }
 
 class Y implements X {
@@= skipped -10, +14 lines =@@
 
     decode<C extends Constructor<any>>(ctor: C): MappedResult<C extends Constructor<infer T> ? T : never> {
 >decode : <C extends Constructor<any>>(ctor: C) => MappedResult<C extends Constructor<infer T> ? T : never>
+>C : C
 >ctor : C
+>T : T
 
         throw new Error()
 >new Error() : Error
