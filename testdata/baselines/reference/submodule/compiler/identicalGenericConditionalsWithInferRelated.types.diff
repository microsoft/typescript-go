--- old.identicalGenericConditionalsWithInferRelated.types
+++ new.identicalGenericConditionalsWithInferRelated.types
@@= skipped -5, +5 lines =@@
 >arg : X

     type Cond1 = X extends [infer A] ? A : never;
->Cond1 : X extends [infer A] ? A : never
+>Cond1 : X extends [infer A] ? infer A : never

     type Cond2 = X extends [infer A] ? A : never;
->Cond2 : X extends [infer A] ? A : never
+>Cond2 : X extends [infer A] ? infer A : never

     let x: Cond1 = null as any;
->x : X extends [infer A] ? A : never
+>x : X extends [infer A] ? infer A : never
 >null as any : any

     let y: Cond2 = null as any;
->y : X extends [infer A] ? A : never
+>y : X extends [infer A] ? infer A : never
 >null as any : any

     x = y; // is err, should be ok
->x = y : X extends [infer A] ? A : never
->x : X extends [infer A] ? A : never
->y : X extends [infer A] ? A : never
+>x = y : X extends [infer A] ? infer A : never
+>x : X extends [infer A] ? infer A : never
+>y : X extends [infer A] ? infer A : never

     y = x; // is err, should be ok
->y = x : X extends [infer A] ? A : never
->y : X extends [infer A] ? A : never
->x : X extends [infer A] ? A : never
+>y = x : X extends [infer A] ? infer A : never
+>y : X extends [infer A] ? infer A : never
+>x : X extends [infer A] ? infer A : never
 }

 // repro from https://github.com/microsoft/TypeScript/issues/26627
@@= skipped -40, +40 lines =@@

 interface X {
     decode<C extends Constructor<any>>(ctor: C): MappedResult<C extends Constructor<infer T> ? T : never>
->decode : <C extends Constructor<any>>(ctor: C) => MappedResult<C extends Constructor<infer T> ? T : never>
+>decode : <C extends Constructor<any>>(ctor: C) => MappedResult<C extends Constructor<infer T> ? infer T : never>
 >ctor : C
 }

@@= skipped -8, +8 lines =@@
 >Y : Y

     decode<C extends Constructor<any>>(ctor: C): MappedResult<C extends Constructor<infer T> ? T : never> {
->decode : <C extends Constructor<any>>(ctor: C) => MappedResult<C extends Constructor<infer T> ? T : never>
+>decode : <C extends Constructor<any>>(ctor: C) => MappedResult<C extends Constructor<infer T> ? infer T : never>
 >ctor : C

         throw new Error()