--- old.consistentAliasVsNonAliasRecordBehavior.types
+++ new.consistentAliasVsNonAliasRecordBehavior.types
@@= skipped -6, +6 lines =@@
 
 type Record2<K extends keyof any, T> = {
 >Record2 : Record2<K, T>
+>K : K
+>T : T
 
     [P in K]: T;
+>P : P
+
 };
 
 function defaultRecord(x: Record<'a', string>, y: Record<string, string>) {
@@= skipped -50, +54 lines =@@
 
 function defaultRecord2<T>(x: Record<'a', T>, y: Record<string, T>) {
 >defaultRecord2 : <T>(x: Record<"a", T>, y: Record<string, T>) => void
+>T : T
 >x : Record<"a", T>
 >y : Record<string, T>
 
@@= skipped -11, +12 lines =@@
 
 function customRecord2<T>(x: Record2<'a', T>, y: Record2<string, T>) {
 >customRecord2 : <T>(x: Record2<"a", T>, y: Record2<string, T>) => void
+>T : T
 >x : Record2<"a", T>
 >y : Record2<string, T>
 
@@= skipped -11, +12 lines =@@
 
 function mixed3<T>(x: Record2<'a', T>, y: Record<string, T>) {
 >mixed3 : <T>(x: Record2<"a", T>, y: Record<string, T>) => void
+>T : T
 >x : Record2<"a", T>
 >y : Record<string, T>
 
@@= skipped -11, +12 lines =@@
 
 function mixed4<T>(x: Record<'a', T>, y: Record2<string, T>) {
 >mixed4 : <T>(x: Record<"a", T>, y: Record2<string, T>) => void
+>T : T
 >x : Record<"a", T>
 >y : Record2<string, T>
 
