--- old.consistentAliasVsNonAliasRecordBehavior.types
+++ new.consistentAliasVsNonAliasRecordBehavior.types
@@= skipped -6, +6 lines =@@
 
 type Record2<K extends keyof any, T> = {
 >Record2 : Record2<K, T>
->        : ^^^^^^^^^^^^^
+>K : K
+>T : T
 
     [P in K]: T;
+>P : P
+
 };
 
 function defaultRecord(x: Record<'a', string>, y: Record<string, string>) {
 >defaultRecord : (x: Record<"a", string>, y: Record<string, string>) => void
->              : ^ ^^                   ^^ ^^                      ^^^^^^^^^
 >x : Record<"a", string>
->  : ^^^^^^^^^^^^^^^^^^^
 >y : Record<string, string>
->  : ^^^^^^^^^^^^^^^^^^^^^^
 
     x = y; // no error, but error expected.
 >x = y : Record<string, string>
->      : ^^^^^^^^^^^^^^^^^^^^^^
 >x : Record<"a", string>
->  : ^^^^^^^^^^^^^^^^^^^
 >y : Record<string, string>
->  : ^^^^^^^^^^^^^^^^^^^^^^
 }
 
 function customRecord(x: Record2<'a', string>, y: Record2<string, string>) {
 >customRecord : (x: Record2<"a", string>, y: Record2<string, string>) => void
->             : ^ ^^                    ^^ ^^                       ^^^^^^^^^
 >x : Record2<"a", string>
->  : ^^^^^^^^^^^^^^^^^^^^
 >y : Record2<string, string>
->  : ^^^^^^^^^^^^^^^^^^^^^^^
 
     x = y; // no error, but error expected.
 >x = y : Record2<string, string>
->      : ^^^^^^^^^^^^^^^^^^^^^^^
 >x : Record2<"a", string>
->  : ^^^^^^^^^^^^^^^^^^^^
 >y : Record2<string, string>
->  : ^^^^^^^^^^^^^^^^^^^^^^^
 }
 
 function mixed1(x: Record2<'a', string>, y: Record<string, string>) {
 >mixed1 : (x: Record2<"a", string>, y: Record<string, string>) => void
->       : ^ ^^                    ^^ ^^                      ^^^^^^^^^
 >x : Record2<"a", string>
->  : ^^^^^^^^^^^^^^^^^^^^
 >y : Record<string, string>
->  : ^^^^^^^^^^^^^^^^^^^^^^
 
     x = y; // error
 >x = y : Record<string, string>
->      : ^^^^^^^^^^^^^^^^^^^^^^
 >x : Record2<"a", string>
->  : ^^^^^^^^^^^^^^^^^^^^
 >y : Record<string, string>
->  : ^^^^^^^^^^^^^^^^^^^^^^
 }
 
 function mixed2(x: Record<'a', string>, y: Record2<string, string>) {
 >mixed2 : (x: Record<"a", string>, y: Record2<string, string>) => void
->       : ^ ^^                   ^^ ^^                       ^^^^^^^^^
 >x : Record<"a", string>
->  : ^^^^^^^^^^^^^^^^^^^
 >y : Record2<string, string>
->  : ^^^^^^^^^^^^^^^^^^^^^^^
 
     x = y; // error
 >x = y : Record2<string, string>
->      : ^^^^^^^^^^^^^^^^^^^^^^^
 >x : Record<"a", string>
->  : ^^^^^^^^^^^^^^^^^^^
 >y : Record2<string, string>
->  : ^^^^^^^^^^^^^^^^^^^^^^^
 }
 
 function defaultRecord2<T>(x: Record<'a', T>, y: Record<string, T>) {
 >defaultRecord2 : <T>(x: Record<"a", T>, y: Record<string, T>) => void
->               : ^ ^^ ^^              ^^ ^^                 ^^^^^^^^^
+>T : T
 >x : Record<"a", T>
->  : ^^^^^^^^^^^^^^
 >y : Record<string, T>
->  : ^^^^^^^^^^^^^^^^^
 
     x = y; // no error, but error expected.
 >x = y : Record<string, T>
->      : ^^^^^^^^^^^^^^^^^
 >x : Record<"a", T>
->  : ^^^^^^^^^^^^^^
 >y : Record<string, T>
->  : ^^^^^^^^^^^^^^^^^
 }
 
 function customRecord2<T>(x: Record2<'a', T>, y: Record2<string, T>) {
 >customRecord2 : <T>(x: Record2<"a", T>, y: Record2<string, T>) => void
->              : ^ ^^ ^^               ^^ ^^                  ^^^^^^^^^
+>T : T
 >x : Record2<"a", T>
->  : ^^^^^^^^^^^^^^^
 >y : Record2<string, T>
->  : ^^^^^^^^^^^^^^^^^^
 
     x = y; // no error, but error expected.
 >x = y : Record2<string, T>
->      : ^^^^^^^^^^^^^^^^^^
 >x : Record2<"a", T>
->  : ^^^^^^^^^^^^^^^
 >y : Record2<string, T>
->  : ^^^^^^^^^^^^^^^^^^
 }
 
 function mixed3<T>(x: Record2<'a', T>, y: Record<string, T>) {
 >mixed3 : <T>(x: Record2<"a", T>, y: Record<string, T>) => void
->       : ^ ^^ ^^               ^^ ^^                 ^^^^^^^^^
+>T : T
 >x : Record2<"a", T>
->  : ^^^^^^^^^^^^^^^
 >y : Record<string, T>
->  : ^^^^^^^^^^^^^^^^^
 
     x = y; // error
 >x = y : Record<string, T>
->      : ^^^^^^^^^^^^^^^^^
 >x : Record2<"a", T>
->  : ^^^^^^^^^^^^^^^
 >y : Record<string, T>
->  : ^^^^^^^^^^^^^^^^^
 }
 
 function mixed4<T>(x: Record<'a', T>, y: Record2<string, T>) {
 >mixed4 : <T>(x: Record<"a", T>, y: Record2<string, T>) => void
->       : ^ ^^ ^^              ^^ ^^                  ^^^^^^^^^
+>T : T
 >x : Record<"a", T>
->  : ^^^^^^^^^^^^^^
 >y : Record2<string, T>
->  : ^^^^^^^^^^^^^^^^^^
 
     x = y; // error
 >x = y : Record2<string, T>
->      : ^^^^^^^^^^^^^^^^^^
 >x : Record<"a", T>
->  : ^^^^^^^^^^^^^^
 >y : Record2<string, T>
->  : ^^^^^^^^^^^^^^^^^^
 }
 
