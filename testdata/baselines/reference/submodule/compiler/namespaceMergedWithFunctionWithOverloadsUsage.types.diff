--- old.namespaceMergedWithFunctionWithOverloadsUsage.types
+++ new.namespaceMergedWithFunctionWithOverloadsUsage.types
@@= skipped -1, +1 lines =@@
 
 === index.ts ===
 import X = require("./file");
->X : { (opts?: X.Whatever): void; (cb: Function, opts?: X.Whatever): void; }
+>X : { (opts?: Whatever): void; (cb: Function, opts?: Whatever): void; }
 
 X(0); // shouldn't cause a crash
 >X(0) : void
->X : { (opts?: X.Whatever): void; (cb: Function, opts?: X.Whatever): void; }
+>X : { (opts?: Whatever): void; (cb: Function, opts?: Whatever): void; }
 >0 : 0
 
 === file.d.ts ===
 declare namespace Foo {
+>Foo : { (opts?: Whatever): void; (cb: Function, opts?: Whatever): void; }
+
     interface Whatever {
+>Whatever : Whatever
+
         prop: any;
 >prop : any
     }
 }
 
 declare function Foo(opts?: Foo.Whatever): void;
->Foo : { (opts?: Foo.Whatever): void; (cb: Function, opts?: Foo.Whatever): void; }
->opts : Foo.Whatever
+>Foo : { (opts?: Whatever): void; (cb: Function, opts?: Whatever): void; }
+>opts : Whatever
 >Foo : any
 
 declare function Foo(cb: Function, opts?: Foo.Whatever): void;
->Foo : { (opts?: Foo.Whatever): void; (cb: Function, opts?: Foo.Whatever): void; }
+>Foo : { (opts?: Whatever): void; (cb: Function, opts?: Whatever): void; }
 >cb : Function
->opts : Foo.Whatever
+>opts : Whatever
 >Foo : any
 
 export = Foo;
->Foo : { (opts?: Foo.Whatever): void; (cb: Function, opts?: Foo.Whatever): void; }
+>Foo : { (opts?: Whatever): void; (cb: Function, opts?: Whatever): void; }
 
