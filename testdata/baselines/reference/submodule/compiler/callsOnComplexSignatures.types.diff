--- old.callsOnComplexSignatures.types
+++ new.callsOnComplexSignatures.types
@@= skipped -9, +9 lines =@@
 >test1 : () => void

     type stringType1 = "foo" | "bar";
->stringType1 : "foo" | "bar"
+>stringType1 : "bar" | "foo"

     type stringType2 = "baz" | "bar";
 >stringType2 : "bar" | "baz"

     interface Temp1 {
         getValue(name: stringType1): number;
->getValue : (name: "foo" | "bar") => number
->name : "foo" | "bar"
+>getValue : (name: "bar" | "foo") => number
+>name : "bar" | "foo"
     }

     interface Temp2 {
@@= skipped -24, +24 lines =@@
         const z = t.getValue("bar"); // Should be fine
 >z : string | number
 >t.getValue("bar") : string | number
->t.getValue : ((name: "foo" | "bar") => number) | ((name: "bar" | "baz") => string)
+>t.getValue : ((name: "bar" | "foo") => number) | ((name: "bar" | "baz") => string)
 >t : Temp1 | Temp2
->getValue : ((name: "foo" | "bar") => number) | ((name: "bar" | "baz") => string)
+>getValue : ((name: "bar" | "foo") => number) | ((name: "bar" | "baz") => string)
 >"bar" : "bar"
     }
 }
@@= skipped -43, +43 lines =@@
     };

     const test1 = (type: "foo" | "bar") =>
->test1 : (type: "foo" | "bar") => string
->(type: "foo" | "bar") =>        messages[type]({ a: "A", b: 0 }) : (type: "foo" | "bar") => string
->type : "foo" | "bar"
+>test1 : (type: "bar" | "foo") => string
+>(type: "foo" | "bar") =>        messages[type]({ a: "A", b: 0 }) : (type: "bar" | "foo") => string
+>type : "bar" | "foo"

         messages[type]({ a: "A", b: 0 });
 >messages[type]({ a: "A", b: 0 }) : string
 >messages[type] : ((options: { [key: string]: any; b: number; }) => string) | ((options: { [key: string]: any; a: string; }) => string)
 >messages : Messages
->type : "foo" | "bar"
+>type : "bar" | "foo"
 >{ a: "A", b: 0 } : { a: string; b: number; }
 >a : string
 >"A" : "A"
@@= skipped -35, +35 lines =@@
 }

 function test4(
->test4 : (arg1: ((...objs: { x: number; }[]) => number) | ((...objs: { y: number; }[]) => number), arg2: ((a: { x: number; }, b: object) => number) | ((a: object, b: { x: number; }) => number), arg3: ((a: { x: number; }, ...objs: { y: number; }[]) => number) | ((...objs: { x: number; }[]) => number), arg4: ((a?: { x: number; }, b?: { x: number; }) => number) | ((a?: { y: number; }) => number), arg5: ((a?: { x: number; }, ...b: { x: number; }[]) => number) | ((a?: { y: number; }) => number), arg6: ((a?: { x: number; }, b?: { x: number; }) => number) | ((...a: { y: number; }[]) => number)) => void
+>test4 : (arg1: ((...objs: { x: number; }[]) => number) | ((...objs: { y: number; }[]) => number), arg2: ((a: { x: number; }, b: object) => number) | ((a: object, b: { x: number; }) => number), arg3: ((a: { x: number; }, ...objs: { y: number; }[]) => number) | ((...objs: { x: number; }[]) => number), arg4: ((a?: { x: number; } | undefined, b?: { x: number; } | undefined) => number) | ((a?: { y: number; } | undefined) => number), arg5: ((a?: { x: number; } | undefined, ...b: { x: number; }[]) => number) | ((a?: { y: number; } | undefined) => number), arg6: ((a?: { x: number; } | undefined, b?: { x: number; } | undefined) => number) | ((...a: { y: number; }[]) => number)) => void

     arg1: ((...objs: {x: number}[]) => number) | ((...objs: {y: number}[]) => number),
 >arg1 : ((...objs: { x: number; }[]) => number) | ((...objs: { y: number; }[]) => number)
@@= skipped -28, +28 lines =@@
 >x : number

     arg4: ((a?: {x: number}, b?: {x: number}) => number) | ((a?: {y: number}) => number),
->arg4 : ((a?: { x: number; }, b?: { x: number; }) => number) | ((a?: { y: number; }) => number)
+>arg4 : ((a?: { x: number; } | undefined, b?: { x: number; } | undefined) => number) | ((a?: { y: number; } | undefined) => number)
 >a : { x: number; } | undefined
 >x : number
 >b : { x: number; } | undefined
@@= skipped -9, +9 lines =@@
 >y : number

     arg5: ((a?: {x: number}, ...b: {x: number}[]) => number) | ((a?: {y: number}) => number),
->arg5 : ((a?: { x: number; }, ...b: { x: number; }[]) => number) | ((a?: { y: number; }) => number)
+>arg5 : ((a?: { x: number; } | undefined, ...b: { x: number; }[]) => number) | ((a?: { y: number; } | undefined) => number)
 >a : { x: number; } | undefined
 >x : number
 >b : { x: number; }[]
@@= skipped -9, +9 lines =@@
 >y : number

     arg6: ((a?: {x: number}, b?: {x: number}) => number) | ((...a: {y: number}[]) => number),
->arg6 : ((a?: { x: number; }, b?: { x: number; }) => number) | ((...a: { y: number; }[]) => number)
+>arg6 : ((a?: { x: number; } | undefined, b?: { x: number; } | undefined) => number) | ((...a: { y: number; }[]) => number)
 >a : { x: number; } | undefined
 >x : number
 >b : { x: number; } | undefined
@@= skipped -84, +84 lines =@@

     arg4();
 >arg4() : number
->arg4 : ((a?: { x: number; }, b?: { x: number; }) => number) | ((a?: { y: number; }) => number)
+>arg4 : ((a?: { x: number; } | undefined, b?: { x: number; } | undefined) => number) | ((a?: { y: number; } | undefined) => number)

     arg4({x: 0, y: 0});
 >arg4({x: 0, y: 0}) : number
->arg4 : ((a?: { x: number; }, b?: { x: number; }) => number) | ((a?: { y: number; }) => number)
+>arg4 : ((a?: { x: number; } | undefined, b?: { x: number; } | undefined) => number) | ((a?: { y: number; } | undefined) => number)
 >{x: 0, y: 0} : { x: number; y: number; }
 >x : number
 >0 : 0
@@= skipped -13, +13 lines =@@

     arg4({x: 0, y: 0}, {x: 0});
 >arg4({x: 0, y: 0}, {x: 0}) : number
->arg4 : ((a?: { x: number; }, b?: { x: number; }) => number) | ((a?: { y: number; }) => number)
+>arg4 : ((a?: { x: number; } | undefined, b?: { x: number; } | undefined) => number) | ((a?: { y: number; } | undefined) => number)
 >{x: 0, y: 0} : { x: number; y: number; }
 >x : number
 >0 : 0
@@= skipped -12, +12 lines =@@

     arg5();
 >arg5() : number
->arg5 : ((a?: { x: number; }, ...b: { x: number; }[]) => number) | ((a?: { y: number; }) => number)
+>arg5 : ((a?: { x: number; } | undefined, ...b: { x: number; }[]) => number) | ((a?: { y: number; } | undefined) => number)

     arg5({x: 0, y: 0});
 >arg5({x: 0, y: 0}) : number
->arg5 : ((a?: { x: number; }, ...b: { x: number; }[]) => number) | ((a?: { y: number; }) => number)
+>arg5 : ((a?: { x: number; } | undefined, ...b: { x: number; }[]) => number) | ((a?: { y: number; } | undefined) => number)
 >{x: 0, y: 0} : { x: number; y: number; }
 >x : number
 >0 : 0
@@= skipped -13, +13 lines =@@

     arg5({x: 0, y: 0}, {x: 0});
 >arg5({x: 0, y: 0}, {x: 0}) : number
->arg5 : ((a?: { x: number; }, ...b: { x: number; }[]) => number) | ((a?: { y: number; }) => number)
+>arg5 : ((a?: { x: number; } | undefined, ...b: { x: number; }[]) => number) | ((a?: { y: number; } | undefined) => number)
 >{x: 0, y: 0} : { x: number; y: number; }
 >x : number
 >0 : 0
@@= skipped -12, +12 lines =@@

     arg6();
 >arg6() : number
->arg6 : ((a?: { x: number; }, b?: { x: number; }) => number) | ((...a: { y: number; }[]) => number)
+>arg6 : ((a?: { x: number; } | undefined, b?: { x: number; } | undefined) => number) | ((...a: { y: number; }[]) => number)

     arg6({x: 0, y: 0});
 >arg6({x: 0, y: 0}) : number
->arg6 : ((a?: { x: number; }, b?: { x: number; }) => number) | ((...a: { y: number; }[]) => number)
+>arg6 : ((a?: { x: number; } | undefined, b?: { x: number; } | undefined) => number) | ((...a: { y: number; }[]) => number)
 >{x: 0, y: 0} : { x: number; y: number; }
 >x : number
 >0 : 0
@@= skipped -13, +13 lines =@@

     arg6({x: 0, y: 0}, {x: 0, y: 0});
 >arg6({x: 0, y: 0}, {x: 0, y: 0}) : number
->arg6 : ((a?: { x: number; }, b?: { x: number; }) => number) | ((...a: { y: number; }[]) => number)
+>arg6 : ((a?: { x: number; } | undefined, b?: { x: number; } | undefined) => number) | ((...a: { y: number; }[]) => number)
 >{x: 0, y: 0} : { x: number; y: number; }
 >x : number
 >0 : 0
@@= skipped -14, +14 lines =@@

     arg6({x: 0, y: 0}, {x: 0, y: 0}, {y: 0});
 >arg6({x: 0, y: 0}, {x: 0, y: 0}, {y: 0}) : number
->arg6 : ((a?: { x: number; }, b?: { x: number; }) => number) | ((...a: { y: number; }[]) => number)
+>arg6 : ((a?: { x: number; } | undefined, b?: { x: number; } | undefined) => number) | ((...a: { y: number; }[]) => number)
 >{x: 0, y: 0} : { x: number; y: number; }
 >x : number
 >0 : 0
@@= skipped -22, +22 lines =@@

     // Pair of non-like intrinsics
     function render(url?: string): React.ReactNode {
->render : (url?: string) => React.ReactNode
+>render : (url?: string | undefined) => React.ReactNode
 >url : string | undefined
 >React : any

@@= skipped -19, +19 lines =@@

     // Union of all intrinsics and components of `any`
     function App(props: { component:React.ReactType }) {
->App : (props: { component: React.ReactType; }) => JSX.Element
->props : { component: React.ReactType; }
+>App : (props: { component: React.ReactType<any>; }) => JSX.Element
+>props : { component: React.ReactType<any>; }
 >component : React.ReactType<any>
 >React : any

@@= skipped -9, +9 lines =@@
 >Comp : React.ReactType<any>
 >React : any
 >props.component : React.ReactType<any>
->props : { component: React.ReactType; }
+>props : { component: React.ReactType<any>; }
 >component : React.ReactType<any>

         return (<Comp />);