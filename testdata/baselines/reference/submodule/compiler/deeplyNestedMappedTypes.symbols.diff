--- old.deeplyNestedMappedTypes.symbols
+++ new.deeplyNestedMappedTypes.symbols
@@= skipped -183, +183 lines =@@
 
 export const Input = Type.Object({
 >Input : Symbol(Input, Decl(deeplyNestedMappedTypes.ts, 44, 24), Decl(deeplyNestedMappedTypes.ts, 49, 12))
->Type.Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Type.Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 >Type : Symbol(Type, Decl(deeplyNestedMappedTypes.ts, 129, 96))
->Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 
     level1: Type.Object({
 >level1 : Symbol(level1, Decl(deeplyNestedMappedTypes.ts, 49, 34))
->Type.Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Type.Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 >Type : Symbol(Type, Decl(deeplyNestedMappedTypes.ts, 129, 96))
->Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 
         level2: Type.Object({
 >level2 : Symbol(level2, Decl(deeplyNestedMappedTypes.ts, 50, 25))
->Type.Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Type.Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 >Type : Symbol(Type, Decl(deeplyNestedMappedTypes.ts, 129, 96))
->Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 
             foo: Type.String(),
 >foo : Symbol(foo, Decl(deeplyNestedMappedTypes.ts, 51, 29))
->Type.String : Symbol(Type.String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
+>Type.String : Symbol(String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
 >Type : Symbol(Type, Decl(deeplyNestedMappedTypes.ts, 129, 96))
->String : Symbol(Type.String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
+>String : Symbol(String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
 
         })
     })
@@= skipped -33, +33 lines =@@
 
 export const Output = Type.Object({
 >Output : Symbol(Output, Decl(deeplyNestedMappedTypes.ts, 55, 2), Decl(deeplyNestedMappedTypes.ts, 58, 12))
->Type.Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Type.Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 >Type : Symbol(Type, Decl(deeplyNestedMappedTypes.ts, 129, 96))
->Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 
     level1: Type.Object({
 >level1 : Symbol(level1, Decl(deeplyNestedMappedTypes.ts, 58, 35))
->Type.Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Type.Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 >Type : Symbol(Type, Decl(deeplyNestedMappedTypes.ts, 129, 96))
->Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 
         level2: Type.Object({
 >level2 : Symbol(level2, Decl(deeplyNestedMappedTypes.ts, 59, 25))
->Type.Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Type.Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 >Type : Symbol(Type, Decl(deeplyNestedMappedTypes.ts, 129, 96))
->Object : Symbol(Type.Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
+>Object : Symbol(Object, Decl(deeplyNestedMappedTypes.ts, 131, 24))
 
             foo: Type.String(),
 >foo : Symbol(foo, Decl(deeplyNestedMappedTypes.ts, 60, 29))
->Type.String : Symbol(Type.String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
+>Type.String : Symbol(String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
 >Type : Symbol(Type, Decl(deeplyNestedMappedTypes.ts, 129, 96))
->String : Symbol(Type.String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
+>String : Symbol(String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
 
             bar: Type.String(),
 >bar : Symbol(bar, Decl(deeplyNestedMappedTypes.ts, 61, 31))
->Type.String : Symbol(Type.String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
+>Type.String : Symbol(String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
 >Type : Symbol(Type, Decl(deeplyNestedMappedTypes.ts, 129, 96))
->String : Symbol(Type.String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
+>String : Symbol(String, Decl(deeplyNestedMappedTypes.ts, 132, 65))
 
         })
     })
@@= skipped -57, +57 lines =@@
 function problematicFunction3(ors: (typeof Input.static)[]): Output[] {
 >problematicFunction3 : Symbol(problematicFunction3, Decl(deeplyNestedMappedTypes.ts, 73, 1))
 >ors : Symbol(ors, Decl(deeplyNestedMappedTypes.ts, 75, 30))
->Input.static : Symbol(TObject.static, Decl(deeplyNestedMappedTypes.ts, 123, 20))
+>Input.static : Symbol(static, Decl(deeplyNestedMappedTypes.ts, 123, 20))
 >Input : Symbol(Input, Decl(deeplyNestedMappedTypes.ts, 44, 24), Decl(deeplyNestedMappedTypes.ts, 49, 12))
->static : Symbol(TObject.static, Decl(deeplyNestedMappedTypes.ts, 123, 20))
+>static : Symbol(static, Decl(deeplyNestedMappedTypes.ts, 123, 20))
 >Output : Symbol(Output, Decl(deeplyNestedMappedTypes.ts, 55, 2), Decl(deeplyNestedMappedTypes.ts, 58, 12))
 
     return ors;  // Error
@@= skipped -35, +35 lines =@@
 >TKind : Symbol(TKind, Decl(deeplyNestedMappedTypes.ts, 84, 41))
 
     [Kind]: string
->[Kind] : Symbol(TKind[Kind], Decl(deeplyNestedMappedTypes.ts, 86, 24))
+>[Kind] : Symbol([Kind], Decl(deeplyNestedMappedTypes.ts, 86, 24))
 >Kind : Symbol(Kind, Decl(deeplyNestedMappedTypes.ts, 84, 20))
 }
 export interface TSchema extends TKind {
@@= skipped -8, +8 lines =@@
 >TKind : Symbol(TKind, Decl(deeplyNestedMappedTypes.ts, 84, 41))
 
     [Readonly]?: string
->[Readonly] : Symbol(TSchema[Readonly], Decl(deeplyNestedMappedTypes.ts, 89, 40))
+>[Readonly] : Symbol([Readonly], Decl(deeplyNestedMappedTypes.ts, 89, 40))
 >Readonly : Symbol(Readonly, Decl(deeplyNestedMappedTypes.ts, 81, 20))
 
     [Optional]?: string
->[Optional] : Symbol(TSchema[Optional], Decl(deeplyNestedMappedTypes.ts, 90, 23))
+>[Optional] : Symbol([Optional], Decl(deeplyNestedMappedTypes.ts, 90, 23))
 >Optional : Symbol(Optional, Decl(deeplyNestedMappedTypes.ts, 82, 20))
 
     [Hint]?: string
->[Hint] : Symbol(TSchema[Hint], Decl(deeplyNestedMappedTypes.ts, 91, 23))
+>[Hint] : Symbol([Hint], Decl(deeplyNestedMappedTypes.ts, 91, 23))
 >Hint : Symbol(Hint, Decl(deeplyNestedMappedTypes.ts, 83, 20))
 
     params: unknown[]
->params : Symbol(TSchema.params, Decl(deeplyNestedMappedTypes.ts, 92, 19))
+>params : Symbol(params, Decl(deeplyNestedMappedTypes.ts, 92, 19))
 
     static: unknown
->static : Symbol(TSchema.static, Decl(deeplyNestedMappedTypes.ts, 93, 21))
+>static : Symbol(static, Decl(deeplyNestedMappedTypes.ts, 93, 21))
 }
 
 export type TReadonlyOptional<T extends TSchema> = TOptional<T> & TReadonly<T>
@@= skipped -48, +48 lines =@@
 >TSchema : Symbol(TSchema, Decl(deeplyNestedMappedTypes.ts, 88, 1))
 
     [Kind]: 'String';
->[Kind] : Symbol(TString[Kind], Decl(deeplyNestedMappedTypes.ts, 101, 42))
+>[Kind] : Symbol([Kind], Decl(deeplyNestedMappedTypes.ts, 101, 42))
 >Kind : Symbol(Kind, Decl(deeplyNestedMappedTypes.ts, 84, 20))
 
     static: string;
->static : Symbol(TString.static, Decl(deeplyNestedMappedTypes.ts, 102, 21))
+>static : Symbol(static, Decl(deeplyNestedMappedTypes.ts, 102, 21))
 
     type: 'string';
->type : Symbol(TString.type, Decl(deeplyNestedMappedTypes.ts, 103, 19))
+>type : Symbol(type, Decl(deeplyNestedMappedTypes.ts, 103, 19))
 }
 
 export type ReadonlyOptionalPropertyKeys<T extends TProperties> = { [K in keyof T]: T[K] extends TReadonly<TSchema> ? (T[K] extends TOptional<T[K]> ? K : never) : never }[keyof T]
@@= skipped -149, +149 lines =@@
 >TSchema : Symbol(TSchema, Decl(deeplyNestedMappedTypes.ts, 88, 1))
 
     [Kind]: 'Object'
->[Kind] : Symbol(TObject[Kind], Decl(deeplyNestedMappedTypes.ts, 122, 79))
+>[Kind] : Symbol([Kind], Decl(deeplyNestedMappedTypes.ts, 122, 79))
 >Kind : Symbol(Kind, Decl(deeplyNestedMappedTypes.ts, 84, 20))
 
     static: PropertiesReduce<T, this['params']>
->static : Symbol(TObject.static, Decl(deeplyNestedMappedTypes.ts, 123, 20))
+>static : Symbol(static, Decl(deeplyNestedMappedTypes.ts, 123, 20))
 >PropertiesReduce : Symbol(PropertiesReduce, Decl(deeplyNestedMappedTypes.ts, 116, 2))
 >T : Symbol(T, Decl(deeplyNestedMappedTypes.ts, 122, 25))
 
     type: 'object'
->type : Symbol(TObject.type, Decl(deeplyNestedMappedTypes.ts, 124, 47))
+>type : Symbol(type, Decl(deeplyNestedMappedTypes.ts, 124, 47))
 
     properties: T
->properties : Symbol(TObject.properties, Decl(deeplyNestedMappedTypes.ts, 125, 18))
+>properties : Symbol(properties, Decl(deeplyNestedMappedTypes.ts, 125, 18))
 >T : Symbol(T, Decl(deeplyNestedMappedTypes.ts, 122, 25))
 }
 
