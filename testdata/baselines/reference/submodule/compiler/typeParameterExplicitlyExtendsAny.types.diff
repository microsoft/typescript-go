--- old.typeParameterExplicitlyExtendsAny.types
+++ new.typeParameterExplicitlyExtendsAny.types
@@= skipped -2, +2 lines =@@
 === typeParameterExplicitlyExtendsAny.ts ===
 function fee<T>() {
 >fee : <T>() => void
+>T : T
 
     var t: T;
 >t : T
@@= skipped -17, +18 lines =@@
 
 function fee2<T extends any>() {
 >fee2 : <T extends unknown>() => void
+>T : T
 
     var t: T;
 >t : T
@@= skipped -17, +18 lines =@@
 
 function f<T extends any>(x: T) {
 >f : <T extends unknown>(x: T) => void
+>T : T
 >x : T
 
     x.children;
@@= skipped -30, +31 lines =@@
 // Generic Tree structure
 type Tree<T> = T & {
 >Tree : Tree<T>
+>T : T
 
     children?: Tree<T>[];
 >children : Tree<T>[]
@@= skipped -10, +11 lines =@@
 
     public static displayTree1<T extends Tree<any>>(tree: T) {
 >displayTree1 : <T extends unknown>(tree: T) => void
+>T : T
 >tree : T
 
         // error "Property 'children' does not exist on type 'T'"
