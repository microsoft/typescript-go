--- old.recursiveTypeComparison2.types
+++ new.recursiveTypeComparison2.types
@@= skipped -6, +6 lines =@@
 >Bacon : typeof Bacon
 
     interface Event<T> {
+>Event : Event<T>
+>T : T
     }
     interface Error<T> extends Event<T> {
+>Error : Error<T>
+>T : T
     }
     interface Observable<T> {
+>Observable : Observable<T>
+>T : T
+
         zip<U, V>(other: EventStream<U>, f: (a: T, b: U) => V): EventStream<V>;
 >zip : <U, V>(other: EventStream<U>, f: (a: T, b: U) => V) => EventStream<V>
+>U : U
+>V : V
 >other : EventStream<U>
 >f : (a: T, b: U) => V
 >a : T
@@= skipped -21, +30 lines =@@
 
         combine<U, V>(other: Observable<U>, f: (a: T, b: U) => V): Property<V>;
 >combine : <U, V>(other: Observable<U>, f: (a: T, b: U) => V) => Property<V>
+>U : U
+>V : V
 >other : Observable<U>
 >f : (a: T, b: U) => V
 >a : T
@@= skipped -7, +9 lines =@@
 
         withStateMachine<U, V>(initState: U, f: (state: U, event: Event<T>) => StateValue<U, V>): EventStream<V>;
 >withStateMachine : <U, V>(initState: U, f: (state: U, event: Event<T>) => StateValue<U, V>) => EventStream<V>
+>U : U
+>V : V
 >initState : U
 >f : (state: U, event: Event<T>) => StateValue<U, V>
 >state : U
@@= skipped -11, +13 lines =@@
 
         awaiting<U>(other: Observable<U>): Property<boolean>;
 >awaiting : <U>(other: Observable<U>) => Property<boolean>
+>U : U
 >other : Observable<U>
 
         endOnError(f?: (value: T) => boolean): Observable<T>;
@@= skipped -21, +22 lines =@@
 >args : any[]
     }
     interface Property<T> extends Observable<T> {
+>Property : Property<T>
+>T : T
     }
     interface EventStream<T> extends Observable<T> {
+>EventStream : EventStream<T>
+>T : T
     }
     interface Bus<T> extends EventStream<T> {
+>Bus : Bus<T>
+>T : T
     }
     var Bus: new <T>() => Bus<T>;
 >Bus : new <T>() => Bus<T>
+>T : T
 }
 
 var stuck: Bacon.Bus<number> = new Bacon.Bus();
->stuck : Bacon.Bus<number>
+>stuck : Bus<number>
 >Bacon : any
->new Bacon.Bus() : Bacon.Bus<number>
->Bacon.Bus : new <T>() => Bacon.Bus<T>
+>new Bacon.Bus() : Bus<number>
+>Bacon.Bus : new <T>() => Bus<T>
 >Bacon : typeof Bacon
->Bus : new <T>() => Bacon.Bus<T>
+>Bus : new <T>() => Bus<T>
 
