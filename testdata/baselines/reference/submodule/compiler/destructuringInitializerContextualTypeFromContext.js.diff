--- old.destructuringInitializerContextualTypeFromContext.js
+++ new.destructuringInitializerContextualTypeFromContext.js
@@= skipped -27, +27 lines =@@


 //// [destructuringInitializerContextualTypeFromContext.js]
-"use strict";
 var __assign = (this && this.__assign) || function () {
     __assign = Object.assign || function(t) {
         for (var s, i = 1, n = arguments.length; i < n; i++) {
@@= skipped -23, +22 lines =@@
         }
     return t;
 };
-var Parent = function (_a) {
-    var children = _a.children, _b = _a.name, name = _b === void 0 ? "Artemis" : _b, props = __rest(_a, ["children", "name"]);
-    return Child(__assign({ name: name }, props));
-};
-var Child = function (_a) {
-    var children = _a.children, _b = _a.name, name = _b === void 0 ? "Artemis" : _b, props = __rest(_a, ["children", "name"]);
-    return "name: ".concat(name, " props: ").concat(JSON.stringify(props));
-};
-f(function (_a) {
-    var _1 = _a[0], _b = _a[1], _2 = _b === void 0 ? undefined : _b;
-    return undefined;
-});
+const Parent = (_a) => {
+    var { children, name = "Artemis" } = _a, props = __rest(_a, ["children", "name"]);
+    return Child(__assign({ name }, props));
+};
+const Child = (_a) => {
+    var { children, name = "Artemis" } = _a, props = __rest(_a, ["children", "name"]);
+    return `name: ${name} props: ${JSON.stringify(props)}`;
+};
+f(([_1, _2 = undefined]) => undefined);