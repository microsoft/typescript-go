--- old.declarationEmitNameConflicts2.symbols
+++ new.declarationEmitNameConflicts2.symbols
@@= skipped -2, +2 lines =@@
 === declarationEmitNameConflicts2.ts ===
 module X.Y.base {
 >X : Symbol(X, Decl(declarationEmitNameConflicts2.ts, 0, 0), Decl(declarationEmitNameConflicts2.ts, 7, 1))
->Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 0, 9), Decl(declarationEmitNameConflicts2.ts, 9, 9))
->base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 0, 11), Decl(declarationEmitNameConflicts2.ts, 9, 11))
+>Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 0, 9))
+>base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 0, 11))
 
     export function f() { }
 >f : Symbol(f, Decl(declarationEmitNameConflicts2.ts, 0, 17))
@@= skipped -21, +21 lines =@@
 
 module X.Y.base.Z {
 >X : Symbol(X, Decl(declarationEmitNameConflicts2.ts, 0, 0), Decl(declarationEmitNameConflicts2.ts, 7, 1))
->Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 0, 9), Decl(declarationEmitNameConflicts2.ts, 9, 9))
->base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 0, 11), Decl(declarationEmitNameConflicts2.ts, 9, 11))
+>Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 9, 9))
+>base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 9, 11))
 >Z : Symbol(Z, Decl(declarationEmitNameConflicts2.ts, 9, 16))
 
     export var f = X.Y.base.f; // Should be base.f
 >f : Symbol(f, Decl(declarationEmitNameConflicts2.ts, 10, 14))
->X.Y.base.f : Symbol(f, Decl(declarationEmitNameConflicts2.ts, 0, 17))
->X.Y.base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 0, 11), Decl(declarationEmitNameConflicts2.ts, 9, 11))
->X.Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 0, 9), Decl(declarationEmitNameConflicts2.ts, 9, 9))
 >X : Symbol(X, Decl(declarationEmitNameConflicts2.ts, 0, 0), Decl(declarationEmitNameConflicts2.ts, 7, 1))
->Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 0, 9), Decl(declarationEmitNameConflicts2.ts, 9, 9))
->base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 0, 11), Decl(declarationEmitNameConflicts2.ts, 9, 11))
->f : Symbol(f, Decl(declarationEmitNameConflicts2.ts, 0, 17))
 
     export var C = X.Y.base.C; // Should be base.C
 >C : Symbol(C, Decl(declarationEmitNameConflicts2.ts, 11, 14))
->X.Y.base.C : Symbol(C, Decl(declarationEmitNameConflicts2.ts, 1, 27))
->X.Y.base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 0, 11), Decl(declarationEmitNameConflicts2.ts, 9, 11))
->X.Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 0, 9), Decl(declarationEmitNameConflicts2.ts, 9, 9))
 >X : Symbol(X, Decl(declarationEmitNameConflicts2.ts, 0, 0), Decl(declarationEmitNameConflicts2.ts, 7, 1))
->Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 0, 9), Decl(declarationEmitNameConflicts2.ts, 9, 9))
->base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 0, 11), Decl(declarationEmitNameConflicts2.ts, 9, 11))
->C : Symbol(C, Decl(declarationEmitNameConflicts2.ts, 1, 27))
 
     export var M = X.Y.base.M; // Should be base.M
 >M : Symbol(M, Decl(declarationEmitNameConflicts2.ts, 12, 14))
->X.Y.base.M : Symbol(M, Decl(declarationEmitNameConflicts2.ts, 2, 22))
->X.Y.base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 0, 11), Decl(declarationEmitNameConflicts2.ts, 9, 11))
->X.Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 0, 9), Decl(declarationEmitNameConflicts2.ts, 9, 9))
 >X : Symbol(X, Decl(declarationEmitNameConflicts2.ts, 0, 0), Decl(declarationEmitNameConflicts2.ts, 7, 1))
->Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 0, 9), Decl(declarationEmitNameConflicts2.ts, 9, 9))
->base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 0, 11), Decl(declarationEmitNameConflicts2.ts, 9, 11))
->M : Symbol(M, Decl(declarationEmitNameConflicts2.ts, 2, 22))
 
     export var E = X.Y.base.E; // Should be base.E
 >E : Symbol(E, Decl(declarationEmitNameConflicts2.ts, 13, 14))
->X.Y.base.E : Symbol(E, Decl(declarationEmitNameConflicts2.ts, 5, 5))
->X.Y.base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 0, 11), Decl(declarationEmitNameConflicts2.ts, 9, 11))
->X.Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 0, 9), Decl(declarationEmitNameConflicts2.ts, 9, 9))
 >X : Symbol(X, Decl(declarationEmitNameConflicts2.ts, 0, 0), Decl(declarationEmitNameConflicts2.ts, 7, 1))
->Y : Symbol(Y, Decl(declarationEmitNameConflicts2.ts, 0, 9), Decl(declarationEmitNameConflicts2.ts, 9, 9))
->base : Symbol(base, Decl(declarationEmitNameConflicts2.ts, 0, 11), Decl(declarationEmitNameConflicts2.ts, 9, 11))
->E : Symbol(E, Decl(declarationEmitNameConflicts2.ts, 5, 5))
 }
