--- old.unknownLikeUnionObjectFlagsNotPropagated.types
+++ new.unknownLikeUnionObjectFlagsNotPropagated.types
@@= skipped -10, +10 lines =@@
 >null as MyType : MyType
 
 myVar?.toLocaleString;
->myVar?.toLocaleString : (() => string) | undefined
+>myVar?.toLocaleString : () => string | undefined
 >myVar : MyType
->toLocaleString : (() => string) | undefined
+>toLocaleString : () => string | undefined
 
 myVar;
 >myVar : MyType
@@= skipped -24, +24 lines =@@
 >data1 : string[]
 >await Promise.all([fetch1]) : [string[]]
 >Promise.all([fetch1]) : Promise<[string[]]>
->Promise.all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>Promise.all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >Promise : PromiseConstructor
->all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >[fetch1] : [Promise<string[]>]
 >fetch1 : Promise<string[]>
 
