--- old.moduleAugmentationExtendAmbientModule1.types
+++ new.moduleAugmentationExtendAmbientModule1.types
@@= skipped -10, +10 lines =@@
 >x : Observable<number>
 
 let y = x.map(x => x + 1);
->y : Observable<number>
->x.map(x => x + 1) : Observable<number>
->x.map : <U>(proj: (e: number) => U) => Observable<U>
+>y : any
+>x.map(x => x + 1) : any
+>x.map : any
 >x : Observable<number>
->map : <U>(proj: (e: number) => U) => Observable<U>
->x => x + 1 : (x: number) => number
->x : number
->x + 1 : number
->x : number
+>map : any
+>x => x + 1 : (x: any) => any
+>x : any
+>x + 1 : any
+>x : any
 >1 : 1
 
 === map.ts ===
@@= skipped -30, +30 lines =@@
 >"observable" : typeof import("observable")
 
     interface Observable<T> {
+>Observable : Observable<T, T>
+>T : T
+
         map<U>(proj: (e:T) => U): Observable<U>
->map : <U>(proj: (e: T) => U) => Observable<U>
+>map : <U>(proj: (e: T) => U) => any
+>U : U
 >proj : (e: T) => U
 >e : T
     }
@@= skipped -19, +23 lines =@@
 
     class Observable<T> {
 >Observable : Observable<T>
+>T : T
 
         filter(pred: (e:T) => boolean): Observable<T>;
 >filter : (pred: (e: T) => boolean) => Observable<T>
