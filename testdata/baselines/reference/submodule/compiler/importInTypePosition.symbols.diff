--- old.importInTypePosition.symbols
+++ new.importInTypePosition.symbols
@@= skipped -7, +7 lines =@@
 >Point : Symbol(Point, Decl(importInTypePosition.ts, 0, 10))
 
         constructor(public x: number, public y: number) { }
->x : Symbol(Point.x, Decl(importInTypePosition.ts, 2, 20))
->y : Symbol(Point.y, Decl(importInTypePosition.ts, 2, 37))
+>x : Symbol(x, Decl(importInTypePosition.ts, 2, 20))
+>y : Symbol(y, Decl(importInTypePosition.ts, 2, 37))
     }
     export var Origin = new Point(0, 0);
 >Origin : Symbol(Origin, Decl(importInTypePosition.ts, 4, 14))
@@= skipped -14, +14 lines =@@
 
     import a = A; //Error generates 'var <Alias> = <EntityName>;'
 >a : Symbol(a, Decl(importInTypePosition.ts, 8, 10))
->A : Symbol(a, Decl(importInTypePosition.ts, 0, 0))
+>A : Symbol(A, Decl(importInTypePosition.ts, 0, 0))
 }
 // no code gen expected
 module C {
@@= skipped -8, +8 lines =@@
 
     import a = A; //Error generates 'var <Alias> = <EntityName>;'
 >a : Symbol(a, Decl(importInTypePosition.ts, 13, 10))
->A : Symbol(a, Decl(importInTypePosition.ts, 0, 0))
+>A : Symbol(A, Decl(importInTypePosition.ts, 0, 0))
 
     var m: typeof a;
 >m : Symbol(m, Decl(importInTypePosition.ts, 16, 7))
@@= skipped -9, +9 lines =@@
     var p: a.Point;
 >p : Symbol(p, Decl(importInTypePosition.ts, 17, 7), Decl(importInTypePosition.ts, 18, 7))
 >a : Symbol(a, Decl(importInTypePosition.ts, 13, 10))
->Point : Symbol(a.Point, Decl(importInTypePosition.ts, 0, 10))
+>Point : Symbol(Point, Decl(importInTypePosition.ts, 0, 10))
 
     var p = { x: 0, y: 0 };
 >p : Symbol(p, Decl(importInTypePosition.ts, 17, 7), Decl(importInTypePosition.ts, 18, 7))
