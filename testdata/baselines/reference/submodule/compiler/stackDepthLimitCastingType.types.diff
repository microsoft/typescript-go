--- old.stackDepthLimitCastingType.types
+++ new.stackDepthLimitCastingType.types
@@= skipped -4, +4 lines =@@
 >global : typeof global
 
     interface JQueryXHR { }
+>JQueryXHR : JQueryXHR
+
     class Model<T = any, E = {}> {
 >Model : Model<T, E>
+>T : T
+>E : E
 
         initialize(attributes?: T, options?: CombinedModelConstructorOptions<E, this>): void;
->initialize : (attributes?: T, options?: CombinedModelConstructorOptions<E, this>) => void
+>initialize : (attributes?: T | undefined, options?: CombinedModelConstructorOptions<E, this> | undefined) => void
 >attributes : T | undefined
 >options : CombinedModelConstructorOptions<E, this> | undefined
 
@@= skipped -13, +17 lines =@@
 >options : any
     }
     interface ModelConstructorOptions<TModel extends Model = Model> {
+>ModelConstructorOptions : ModelConstructorOptions<TModel>
+>TModel : TModel
+
         collection?: Collection<TModel>;
 >collection : Collection<TModel> | undefined
     }
     class Collection<TModel extends Model = Model> {
 >Collection : Collection<TModel>
+>TModel : TModel
 
         without(...values: TModel[]): TModel[];
 >without : (...values: TModel[]) => TModel[]
@@= skipped -12, +16 lines =@@
     }
     type CombinedModelConstructorOptions<E, M extends Model<any, E> = Model> = ModelConstructorOptions<M> & E;
 >CombinedModelConstructorOptions : CombinedModelConstructorOptions<E, M>
+>E : E
+>M : M
 }
 
 export {
@@= skipped -12, +14 lines =@@
 
 === node_modules/backbone-fetch-cache/index.d.ts ===
 import * as Backbone from "backbone";
->Backbone : typeof Backbone
+>Backbone : typeof import("node_modules/backbone/index")
 
 declare module "backbone" {
->"backbone" : typeof Backbone
+>"backbone" : typeof import("node_modules/backbone/index")
 
     interface ModelWithCache extends Model {
+>ModelWithCache : ModelWithCache
+
         fetch(options?: any): JQueryXHR;
 >fetch : (options?: any) => JQueryXHR
 >options : any
@@= skipped -17, +19 lines =@@
 
 === index.ts ===
 import * as Backbone from "backbone";
->Backbone : typeof Backbone
+>Backbone : typeof import("node_modules/backbone/index")
 
 import * as BackboneFetchCache from "backbone-fetch-cache";
->BackboneFetchCache : typeof BackboneFetchCache
+>BackboneFetchCache : typeof import("node_modules/backbone-fetch-cache/index")
 
 
 const hoge = new Backbone.Model() as Backbone.ModelWithCache;
->hoge : Backbone.ModelWithCache
->new Backbone.Model() as Backbone.ModelWithCache : Backbone.ModelWithCache
->new Backbone.Model() : Backbone.Model<any, ModelConstructorOptions<Backbone.ModelWithCache>>
->Backbone.Model : typeof Backbone.Model
->Backbone : typeof Backbone
->Model : typeof Backbone.Model
+>hoge : ModelWithCache
+>new Backbone.Model() as Backbone.ModelWithCache : ModelWithCache
+>new Backbone.Model() : Model<any, ModelConstructorOptions<ModelWithCache>>
+>Backbone.Model : typeof Model
+>Backbone : typeof import("node_modules/backbone/index")
+>Model : typeof Model
 >Backbone : any
 
 hoge.fetch(null as any);
 >hoge.fetch(null as any) : JQueryXHR
 >hoge.fetch : (options?: any) => JQueryXHR
->hoge : Backbone.ModelWithCache
+>hoge : ModelWithCache
 >fetch : (options?: any) => JQueryXHR
 >null as any : any
 
