--- old.contravariantInferenceAndTypeGuard.symbols
+++ new.contravariantInferenceAndTypeGuard.symbols
@@= skipped -5, +5 lines =@@
 >TData : Symbol(TData, Decl(contravariantInferenceAndTypeGuard.ts, 0, 19))
 
     prev: ListItem<TData> | null;
->prev : Symbol(ListItem.prev, Decl(contravariantInferenceAndTypeGuard.ts, 0, 27))
+>prev : Symbol(prev, Decl(contravariantInferenceAndTypeGuard.ts, 0, 27))
 >ListItem : Symbol(ListItem, Decl(contravariantInferenceAndTypeGuard.ts, 0, 0))
 >TData : Symbol(TData, Decl(contravariantInferenceAndTypeGuard.ts, 0, 19))
 
     next: ListItem<TData> | null;
->next : Symbol(ListItem.next, Decl(contravariantInferenceAndTypeGuard.ts, 1, 33))
+>next : Symbol(next, Decl(contravariantInferenceAndTypeGuard.ts, 1, 33))
 >ListItem : Symbol(ListItem, Decl(contravariantInferenceAndTypeGuard.ts, 0, 0))
 >TData : Symbol(TData, Decl(contravariantInferenceAndTypeGuard.ts, 0, 19))
 
     data: TData;
->data : Symbol(ListItem.data, Decl(contravariantInferenceAndTypeGuard.ts, 2, 33))
+>data : Symbol(data, Decl(contravariantInferenceAndTypeGuard.ts, 2, 33))
 >TData : Symbol(TData, Decl(contravariantInferenceAndTypeGuard.ts, 0, 19))
 }
 type IteratorFn<TData, TResult, TContext = List<TData>> = (this: TContext, item: TData, node: ListItem<TData>, list: List<TData>) => TResult;
@@= skipped -58, +58 lines =@@
 >TData : Symbol(TData, Decl(contravariantInferenceAndTypeGuard.ts, 8, 19))
 
     filter<TContext, TResult extends TData>(fn: FilterFn<TData, TResult, TContext>, context: TContext): List<TResult>;
->filter : Symbol(List.filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
+>filter : Symbol(filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
 >TContext : Symbol(TContext, Decl(contravariantInferenceAndTypeGuard.ts, 9, 11))
 >TResult : Symbol(TResult, Decl(contravariantInferenceAndTypeGuard.ts, 9, 20))
 >TData : Symbol(TData, Decl(contravariantInferenceAndTypeGuard.ts, 8, 19))
@@= skipped -15, +15 lines =@@
 >TResult : Symbol(TResult, Decl(contravariantInferenceAndTypeGuard.ts, 9, 20))
 
     filter<TResult extends TData>(fn: FilterFn<TData, TResult>): List<TResult>;
->filter : Symbol(List.filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
+>filter : Symbol(filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
 >TResult : Symbol(TResult, Decl(contravariantInferenceAndTypeGuard.ts, 10, 11))
 >TData : Symbol(TData, Decl(contravariantInferenceAndTypeGuard.ts, 8, 19))
 >fn : Symbol(fn, Decl(contravariantInferenceAndTypeGuard.ts, 10, 34))
@@= skipped -11, +11 lines =@@
 >TResult : Symbol(TResult, Decl(contravariantInferenceAndTypeGuard.ts, 10, 11))
 
     filter<TContext>(fn: IteratorFn<TData, boolean, TContext>, context: TContext): List<TData>;
->filter : Symbol(List.filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
+>filter : Symbol(filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
 >TContext : Symbol(TContext, Decl(contravariantInferenceAndTypeGuard.ts, 11, 11))
 >fn : Symbol(fn, Decl(contravariantInferenceAndTypeGuard.ts, 11, 21))
 >IteratorFn : Symbol(IteratorFn, Decl(contravariantInferenceAndTypeGuard.ts, 4, 1))
@@= skipped -12, +12 lines =@@
 >TData : Symbol(TData, Decl(contravariantInferenceAndTypeGuard.ts, 8, 19))
 
     filter(fn: IteratorFn<TData, boolean>): List<TData>;
->filter : Symbol(List.filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
+>filter : Symbol(filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
 >fn : Symbol(fn, Decl(contravariantInferenceAndTypeGuard.ts, 12, 11))
 >IteratorFn : Symbol(IteratorFn, Decl(contravariantInferenceAndTypeGuard.ts, 4, 1))
 >TData : Symbol(TData, Decl(contravariantInferenceAndTypeGuard.ts, 8, 19))
@@= skipped -11, +11 lines =@@
 >Test : Symbol(Test, Decl(contravariantInferenceAndTypeGuard.ts, 13, 1))
 
     a: string;
->a : Symbol(Test.a, Decl(contravariantInferenceAndTypeGuard.ts, 14, 16))
+>a : Symbol(a, Decl(contravariantInferenceAndTypeGuard.ts, 14, 16))
 }
 const list2 = new List<Test | null>();
 >list2 : Symbol(list2, Decl(contravariantInferenceAndTypeGuard.ts, 17, 5))
@@= skipped -9, +9 lines =@@
 
 const filter1 = list2.filter(function(item, node, list): item is Test {
 >filter1 : Symbol(filter1, Decl(contravariantInferenceAndTypeGuard.ts, 18, 5))
->list2.filter : Symbol(List.filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
+>list2.filter : Symbol(filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
 >list2 : Symbol(list2, Decl(contravariantInferenceAndTypeGuard.ts, 17, 5))
->filter : Symbol(List.filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
+>filter : Symbol(filter, Decl(contravariantInferenceAndTypeGuard.ts, 8, 27), Decl(contravariantInferenceAndTypeGuard.ts, 9, 118), Decl(contravariantInferenceAndTypeGuard.ts, 10, 79), Decl(contravariantInferenceAndTypeGuard.ts, 11, 95))
 >item : Symbol(item, Decl(contravariantInferenceAndTypeGuard.ts, 18, 38))
 >node : Symbol(node, Decl(contravariantInferenceAndTypeGuard.ts, 18, 43))
 >list : Symbol(list, Decl(contravariantInferenceAndTypeGuard.ts, 18, 49))
