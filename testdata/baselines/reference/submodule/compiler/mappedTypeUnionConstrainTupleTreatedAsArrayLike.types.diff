--- old.mappedTypeUnionConstrainTupleTreatedAsArrayLike.types
+++ new.mappedTypeUnionConstrainTupleTreatedAsArrayLike.types
@@= skipped -2, +2 lines =@@
 === mappedTypeUnionConstrainTupleTreatedAsArrayLike.ts ===
 type HomomorphicMappedType<T> = { [P in keyof T]: T[P] extends string ? boolean : null }
 >HomomorphicMappedType : HomomorphicMappedType<T>
+>T : T
+>P : P
 
 function test1<T extends [number] | [string]>(args: T) {
->test1 : <T extends [number] | [string]>(args: T) => void
+>test1 : <T extends [string] | [number]>(args: T) => void
+>T : T
 >args : T
 
   const arr: any[] = [] as HomomorphicMappedType<T>
@@= skipped -17, +20 lines =@@
 }
 
 function test2<T extends [number] | readonly [string]>(args: T) {
->test2 : <T extends [number] | readonly [string]>(args: T) => void
+>test2 : <T extends [number] | [string]>(args: T) => void
+>T : T
 >args : T
 
   const arr: any[] = [] as HomomorphicMappedType<T> // error
