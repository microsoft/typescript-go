--- old.overloadOnConstInheritance3.symbols
+++ new.overloadOnConstInheritance3.symbols
@@= skipped -4, +4 lines =@@
 >Base : Symbol(Base, Decl(overloadOnConstInheritance3.ts, 0, 0))
 
     addEventListener(x: string): any;
->addEventListener : Symbol(Base.addEventListener, Decl(overloadOnConstInheritance3.ts, 0, 16))
+>addEventListener : Symbol(addEventListener, Decl(overloadOnConstInheritance3.ts, 0, 16))
 >x : Symbol(x, Decl(overloadOnConstInheritance3.ts, 1, 21))
 }
 interface Deriver extends Base {
@@= skipped -9, +9 lines =@@
 
     // shouldn't need to redeclare the string overload
     addEventListener(x: 'bar'): string;
->addEventListener : Symbol(Deriver.addEventListener, Decl(overloadOnConstInheritance3.ts, 3, 32), Decl(overloadOnConstInheritance3.ts, 5, 39))
+>addEventListener : Symbol(addEventListener, Decl(overloadOnConstInheritance3.ts, 3, 32), Decl(overloadOnConstInheritance3.ts, 5, 39))
 >x : Symbol(x, Decl(overloadOnConstInheritance3.ts, 5, 21))
 
     addEventListener(x: 'foo'): string;
->addEventListener : Symbol(Deriver.addEventListener, Decl(overloadOnConstInheritance3.ts, 3, 32), Decl(overloadOnConstInheritance3.ts, 5, 39))
+>addEventListener : Symbol(addEventListener, Decl(overloadOnConstInheritance3.ts, 3, 32), Decl(overloadOnConstInheritance3.ts, 5, 39))
 >x : Symbol(x, Decl(overloadOnConstInheritance3.ts, 6, 21))
 }
 
