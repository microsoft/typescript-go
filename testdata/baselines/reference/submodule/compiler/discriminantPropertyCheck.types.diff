--- old.discriminantPropertyCheck.types
+++ new.discriminantPropertyCheck.types
@@= skipped -4, +4 lines =@@
 >Item : Item
 
 interface Base {
+>Base : Base
+
     bar: boolean;
 >bar : boolean
 }
 
 interface Item1 extends Base {
+>Item1 : Item1
+
     kind: "A";
 >kind : "A"
 
@@= skipped -20, +24 lines =@@
 }
 
 interface Item2 extends Base {
+>Item2 : Item2
+
     kind: "B";
 >kind : "B"
 
@@= skipped -223, +225 lines =@@
 >Instance : Instance
 
 interface StrType {
+>StrType : StrType
+
     type: Types.Str;
 >type : Types.Str
 >Types : any
@@= skipped -12, +14 lines =@@
 }
 
 interface NumType {
+>NumType : NumType
+
     type: Types.Num;
 >type : Types.Num
 >Types : any
@@= skipped -40, +42 lines =@@
 >Num : Types.Num
 
                 inst.value.toExponential;
->inst.value.toExponential : (fractionDigits?: number) => string
+>inst.value.toExponential : (fractionDigits?: number | undefined) => string
 >inst.value : number
 >inst : NumType
 >value : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
                 break;
             }
@@= skipped -21, +21 lines =@@
 >_b : string
 
 interface A {
+>A : A
+
   a?: string;
 >a : string | undefined
 
@@= skipped -8, +10 lines =@@
 }
 
 interface B {
+>B : B
+
   a: string;
 >a : string
 
@@= skipped -60, +62 lines =@@
 >Multiplicative : Multiplicative
 
 interface AdditiveObj {
+>AdditiveObj : AdditiveObj
+
     key: Additive
 >key : Additive
 }
 
 interface MultiplicativeObj {
+>MultiplicativeObj : MultiplicativeObj
+
     key: Multiplicative
 >key : Multiplicative
 }
@@= skipped -117, +121 lines =@@
 // Repro from #30557
 
 interface TypeA {
+>TypeA : TypeA
+
     Name: "TypeA";
 >Name : "TypeA"
 
@@= skipped -8, +10 lines =@@
 }
 
 interface TypeB {
+>TypeB : TypeB
+
     Name: "TypeB";
 >Name : "TypeB"
 
