--- old.bindingPatternCannotBeOnlyInferenceSource.types
+++ new.bindingPatternCannotBeOnlyInferenceSource.types
@@= skipped -2, +2 lines =@@
 === bindingPatternCannotBeOnlyInferenceSource.ts ===
 declare function f<T>(): T;
 >f : <T>() => T
+>T : T
 
 const {} = f();       // error (only in strictNullChecks)
 >f() : unknown
@@= skipped -23, +24 lines =@@
 // Repro from #43605
 type Dispatch<A = { type: any; [extraProps: string]: any }> = { <T extends A>(action: T): T };
 >Dispatch : Dispatch<A>
+>A : A
 >type : any
 >extraProps : string
+>T : T
 >action : T
 
 type IFuncs = { readonly [key: string]: (...p: any) => void };
@@= skipped -11, +13 lines =@@
 
 type IDestructuring<T extends IFuncs> = { readonly [key in keyof T]?: (...p: Parameters<T[key]>) => void };
 >IDestructuring : IDestructuring<T>
+>T : T
+>key : key
 >p : Parameters<T[key]>
 
 type Destructuring<T extends IFuncs, U extends IDestructuring<T>> = (dispatch: Dispatch<any>, funcs: T) => U;
 >Destructuring : Destructuring<T, U>
+>T : T
+>U : U
 >dispatch : Dispatch<any>
 >funcs : T
 
@@= skipped -32, +36 lines =@@
 };
 type TFuncs1 = typeof funcs1;
 >TFuncs1 : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
->funcs1 : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
 
 declare function useReduxDispatch1<T extends IDestructuring<TFuncs1>>(destructuring: Destructuring<TFuncs1, T>): T;
->useReduxDispatch1 : <T extends IDestructuring<TFuncs1>>(destructuring: Destructuring<TFuncs1, T>) => T
+>useReduxDispatch1 : <T extends IDestructuring<{ funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }>>(destructuring: Destructuring<{ funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }, T>) => T
+>T : T
 >destructuring : Destructuring<{ funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }, T>
 
 const {} = useReduxDispatch1(
->useReduxDispatch1(    (d, f) => ({        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    })) : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
->useReduxDispatch1 : <T extends IDestructuring<TFuncs1>>(destructuring: Destructuring<TFuncs1, T>) => T
+>useReduxDispatch1(    (d, f) => ({        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    })) : { funcA: (...p: [a: boolean]) => void; funcB: (...p: [b: string, bb: string]) => void; funcC: (...p: [c: number, cc: number, ccc: boolean]) => void; }
+>useReduxDispatch1 : <T extends IDestructuring<{ funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }>>(destructuring: Destructuring<{ funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }, T>) => T
 
     (d, f) => ({
->(d, f) => ({        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    }) : (d: Dispatch<any>, f: { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }) => { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
+>(d, f) => ({        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    }) : (d: Dispatch<any>, f: { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }) => { funcA: (...p: [a: boolean]) => void; funcB: (...p: [b: string, bb: string]) => void; funcC: (...p: [c: number, cc: number, ccc: boolean]) => void; }
 >d : Dispatch<any>
 >f : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
->({        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    }) : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
->{        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    } : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
+>({        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    }) : { funcA: (...p: [a: boolean]) => void; funcB: (...p: [b: string, bb: string]) => void; funcC: (...p: [c: number, cc: number, ccc: boolean]) => void; }
+>{        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    } : { funcA: (...p: [a: boolean]) => void; funcB: (...p: [b: string, bb: string]) => void; funcC: (...p: [c: number, cc: number, ccc: boolean]) => void; }
 
         funcA: (...p) => d(f.funcA(...p)), // p should be inferrable
->funcA : (a: boolean) => void
->(...p) => d(f.funcA(...p)) : (a: boolean) => void
+>funcA : (...p: [a: boolean]) => void
+>(...p) => d(f.funcA(...p)) : (...p: [a: boolean]) => void
 >p : [a: boolean]
 >d(f.funcA(...p)) : void
 >d : Dispatch<any>
@@= skipped -31, +31 lines =@@
 >p : [a: boolean]
 
         funcB: (...p) => d(f.funcB(...p)),
->funcB : (b: string, bb: string) => void
->(...p) => d(f.funcB(...p)) : (b: string, bb: string) => void
+>funcB : (...p: [b: string, bb: string]) => void
+>(...p) => d(f.funcB(...p)) : (...p: [b: string, bb: string]) => void
 >p : [b: string, bb: string]
 >d(f.funcB(...p)) : void
 >d : Dispatch<any>
@@= skipped -13, +13 lines =@@
 >p : [b: string, bb: string]
 
         funcC: (...p) => d(f.funcC(...p)),
->funcC : (c: number, cc: number, ccc: boolean) => void
->(...p) => d(f.funcC(...p)) : (c: number, cc: number, ccc: boolean) => void
+>funcC : (...p: [c: number, cc: number, ccc: boolean]) => void
+>(...p) => d(f.funcC(...p)) : (...p: [c: number, cc: number, ccc: boolean]) => void
 >p : [c: number, cc: number, ccc: boolean]
 >d(f.funcC(...p)) : void
 >d : Dispatch<any>
