--- old.conditionalTypeSimplification.types
+++ new.conditionalTypeSimplification.types
@@= skipped -3, +3 lines =@@
 // Repro from #30794
 
 interface AbstractSchema<S, V> {
+>AbstractSchema : AbstractSchema<S, V>
+>S : S
+>V : V
+
   m1<T> (v: T): SchemaType<S, Exclude<V, T>>;
 >m1 : <T>(v: T) => SchemaType<S, Exclude<V, T>>
+>T : T
 >v : T
 
   m2<T> (v: T): SchemaType<S, T>;
 >m2 : <T>(v: T) => SchemaType<S, T>
+>T : T
 >v : T
 }
 
 type SchemaType<S, V> = S extends object ? AnySchema<V> : never;
 >SchemaType : SchemaType<S, V>
+>S : S
+>V : V
 
 interface AnySchema<V> extends AnySchemaType<AnySchema<undefined>, V> { }
+>AnySchema : AnySchema<V>
+>V : V
+
 interface AnySchemaType<S extends AbstractSchema<any, any>, V> extends AbstractSchema<S, V> { }
+>AnySchemaType : AnySchemaType<S, V>
+>S : S
+>V : V
 
