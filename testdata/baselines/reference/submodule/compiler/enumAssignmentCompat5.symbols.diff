--- old.enumAssignmentCompat5.symbols
+++ new.enumAssignmentCompat5.symbols
@@= skipped -4, +4 lines =@@
 >E : Symbol(E, Decl(enumAssignmentCompat5.ts, 0, 0))
 
     A, B, C
->A : Symbol(E.A, Decl(enumAssignmentCompat5.ts, 0, 8))
->B : Symbol(E.B, Decl(enumAssignmentCompat5.ts, 1, 6))
->C : Symbol(E.C, Decl(enumAssignmentCompat5.ts, 1, 9))
+>A : Symbol(A, Decl(enumAssignmentCompat5.ts, 0, 8))
+>B : Symbol(B, Decl(enumAssignmentCompat5.ts, 1, 6))
+>C : Symbol(C, Decl(enumAssignmentCompat5.ts, 1, 9))
 }
 enum Computed {
 >Computed : Symbol(Computed, Decl(enumAssignmentCompat5.ts, 2, 1))
 
     A = 1 << 1,
->A : Symbol(Computed.A, Decl(enumAssignmentCompat5.ts, 3, 15))
+>A : Symbol(A, Decl(enumAssignmentCompat5.ts, 3, 15))
 
     B = 1 << 2,
->B : Symbol(Computed.B, Decl(enumAssignmentCompat5.ts, 4, 15))
+>B : Symbol(B, Decl(enumAssignmentCompat5.ts, 4, 15))
 
     C = 1 << 3,
->C : Symbol(Computed.C, Decl(enumAssignmentCompat5.ts, 5, 15))
+>C : Symbol(C, Decl(enumAssignmentCompat5.ts, 5, 15))
 }
 let n: number;
 >n : Symbol(n, Decl(enumAssignmentCompat5.ts, 8, 3))
@@= skipped -33, +33 lines =@@
 let a: E.A = 0; // ok, A === 0
 >a : Symbol(a, Decl(enumAssignmentCompat5.ts, 12, 3))
 >E : Symbol(E, Decl(enumAssignmentCompat5.ts, 0, 0))
->A : Symbol(E.A, Decl(enumAssignmentCompat5.ts, 0, 8))
+>A : Symbol(A, Decl(enumAssignmentCompat5.ts, 0, 8))
 
 a = 2; // error, 2 !== 0
 >a : Symbol(a, Decl(enumAssignmentCompat5.ts, 12, 3))
@@= skipped -24, +24 lines =@@
 let ca: Computed.A = 1; // error, Computed.A isn't a literal type because Computed has no enum literals
 >ca : Symbol(ca, Decl(enumAssignmentCompat5.ts, 19, 3))
 >Computed : Symbol(Computed, Decl(enumAssignmentCompat5.ts, 2, 1))
->A : Symbol(Computed.A, Decl(enumAssignmentCompat5.ts, 3, 15))
+>A : Symbol(A, Decl(enumAssignmentCompat5.ts, 3, 15))
 
 
 
