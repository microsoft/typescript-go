--- old.contextualSignatureInstantiation1.symbols
+++ new.contextualSignatureInstantiation1.symbols
@@= skipped -18, +18 lines =@@
 >x : Symbol(x, Decl(contextualSignatureInstantiation1.ts, 1, 12))
 >y : Symbol(y, Decl(contextualSignatureInstantiation1.ts, 1, 22))
 >K : Symbol(K, Decl(contextualSignatureInstantiation1.ts, 1, 9))
->x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(contextualSignatureInstantiation1.ts, 1, 12))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
 var r99 = map(e); // should be {}[] for S since a generic lambda is not inferentially typed
 >r99 : Symbol(r99, Decl(contextualSignatureInstantiation1.ts, 2, 3))
@@= skipped -28, +28 lines =@@
 >x : Symbol(x, Decl(contextualSignatureInstantiation1.ts, 5, 13))
 >y : Symbol(y, Decl(contextualSignatureInstantiation1.ts, 5, 23))
 >K : Symbol(K, Decl(contextualSignatureInstantiation1.ts, 5, 10))
->x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(contextualSignatureInstantiation1.ts, 5, 13))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
 var r100 = map2(e2); // type arg inference should fail for S since a generic lambda is not inferentially typed. Falls back to { length: number }
 >r100 : Symbol(r100, Decl(contextualSignatureInstantiation1.ts, 6, 3))
