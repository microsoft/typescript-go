--- old.objectCreationOfElementAccessExpression.symbols
+++ new.objectCreationOfElementAccessExpression.symbols
@@= skipped -4, +4 lines =@@
 >Food : Symbol(Food, Decl(objectCreationOfElementAccessExpression.ts, 0, 0))
 
     private amount: number;
->amount : Symbol(Food.amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
+>amount : Symbol(amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
 
     constructor(public name: string) {
->name : Symbol(Food.name, Decl(objectCreationOfElementAccessExpression.ts, 2, 16))
+>name : Symbol(name, Decl(objectCreationOfElementAccessExpression.ts, 2, 16))
 
         this.amount = 100;
->this.amount : Symbol(Food.amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
+>this.amount : Symbol(amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
 >this : Symbol(Food, Decl(objectCreationOfElementAccessExpression.ts, 0, 0))
->amount : Symbol(Food.amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
+>amount : Symbol(amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
     }
     public eat(amountToEat: number): boolean {
->eat : Symbol(Food.eat, Decl(objectCreationOfElementAccessExpression.ts, 4, 5))
+>eat : Symbol(eat, Decl(objectCreationOfElementAccessExpression.ts, 4, 5))
 >amountToEat : Symbol(amountToEat, Decl(objectCreationOfElementAccessExpression.ts, 5, 15))
 
         this.amount -= amountToEat;
->this.amount : Symbol(Food.amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
+>this.amount : Symbol(amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
 >this : Symbol(Food, Decl(objectCreationOfElementAccessExpression.ts, 0, 0))
->amount : Symbol(Food.amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
+>amount : Symbol(amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
 >amountToEat : Symbol(amountToEat, Decl(objectCreationOfElementAccessExpression.ts, 5, 15))
 
         if (this.amount <= 0) {
->this.amount : Symbol(Food.amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
+>this.amount : Symbol(amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
 >this : Symbol(Food, Decl(objectCreationOfElementAccessExpression.ts, 0, 0))
->amount : Symbol(Food.amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
+>amount : Symbol(amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
 
             this.amount = 0;
->this.amount : Symbol(Food.amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
+>this.amount : Symbol(amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
 >this : Symbol(Food, Decl(objectCreationOfElementAccessExpression.ts, 0, 0))
->amount : Symbol(Food.amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
+>amount : Symbol(amount, Decl(objectCreationOfElementAccessExpression.ts, 0, 12))
 
             return false;
         }
@@= skipped -43, +43 lines =@@
 
     constructor(name: string, public flavor: string) {
 >name : Symbol(name, Decl(objectCreationOfElementAccessExpression.ts, 17, 16))
->flavor : Symbol(MonsterFood.flavor, Decl(objectCreationOfElementAccessExpression.ts, 17, 29))
+>flavor : Symbol(flavor, Decl(objectCreationOfElementAccessExpression.ts, 17, 29))
 
         super(name);
 >super : Symbol(Food, Decl(objectCreationOfElementAccessExpression.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >MonsterFood : Symbol(MonsterFood, Decl(objectCreationOfElementAccessExpression.ts, 15, 1))
 
     private isDairyFree: boolean;
->isDairyFree : Symbol(IceCream.isDairyFree, Decl(objectCreationOfElementAccessExpression.ts, 21, 36))
+>isDairyFree : Symbol(isDairyFree, Decl(objectCreationOfElementAccessExpression.ts, 21, 36))
 
     constructor(public flavor: string) {
->flavor : Symbol(IceCream.flavor, Decl(objectCreationOfElementAccessExpression.ts, 23, 16))
+>flavor : Symbol(flavor, Decl(objectCreationOfElementAccessExpression.ts, 23, 16))
 
         super("Ice Cream", flavor);
 >super : Symbol(MonsterFood, Decl(objectCreationOfElementAccessExpression.ts, 15, 1))
@@= skipped -15, +15 lines =@@
 >MonsterFood : Symbol(MonsterFood, Decl(objectCreationOfElementAccessExpression.ts, 15, 1))
 
     constructor(public flavor: string, public isGlutenFree: boolean) {
->flavor : Symbol(Cookie.flavor, Decl(objectCreationOfElementAccessExpression.ts, 28, 16))
->isGlutenFree : Symbol(Cookie.isGlutenFree, Decl(objectCreationOfElementAccessExpression.ts, 28, 38))
+>flavor : Symbol(flavor, Decl(objectCreationOfElementAccessExpression.ts, 28, 16))
+>isGlutenFree : Symbol(isGlutenFree, Decl(objectCreationOfElementAccessExpression.ts, 28, 38))
 
         super("Cookie", flavor);
 >super : Symbol(MonsterFood, Decl(objectCreationOfElementAccessExpression.ts, 15, 1))
@@= skipped -14, +14 lines =@@
 
     constructor(name: string, public whereToBuy: number) {
 >name : Symbol(name, Decl(objectCreationOfElementAccessExpression.ts, 33, 16))
->whereToBuy : Symbol(PetFood.whereToBuy, Decl(objectCreationOfElementAccessExpression.ts, 33, 29))
+>whereToBuy : Symbol(whereToBuy, Decl(objectCreationOfElementAccessExpression.ts, 33, 29))
 
         super(name);
 >super : Symbol(Food, Decl(objectCreationOfElementAccessExpression.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >PetFood : Symbol(PetFood, Decl(objectCreationOfElementAccessExpression.ts, 31, 1))
 
     constructor(public whereToBuy: number) {
->whereToBuy : Symbol(ExpensiveOrganicDogFood.whereToBuy, Decl(objectCreationOfElementAccessExpression.ts, 38, 16))
+>whereToBuy : Symbol(whereToBuy, Decl(objectCreationOfElementAccessExpression.ts, 38, 16))
 
         super("Origen", whereToBuy);
 >super : Symbol(PetFood, Decl(objectCreationOfElementAccessExpression.ts, 31, 1))
@@= skipped -12, +12 lines =@@
 >PetFood : Symbol(PetFood, Decl(objectCreationOfElementAccessExpression.ts, 31, 1))
 
     constructor(public whereToBuy: number, public containsFish: boolean) {
->whereToBuy : Symbol(ExpensiveOrganicCatFood.whereToBuy, Decl(objectCreationOfElementAccessExpression.ts, 43, 16))
->containsFish : Symbol(ExpensiveOrganicCatFood.containsFish, Decl(objectCreationOfElementAccessExpression.ts, 43, 42))
+>whereToBuy : Symbol(whereToBuy, Decl(objectCreationOfElementAccessExpression.ts, 43, 16))
+>containsFish : Symbol(containsFish, Decl(objectCreationOfElementAccessExpression.ts, 43, 42))
 
         super("Nature's Logic", whereToBuy);
 >super : Symbol(PetFood, Decl(objectCreationOfElementAccessExpression.ts, 31, 1))
