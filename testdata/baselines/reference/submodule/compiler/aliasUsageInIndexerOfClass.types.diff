--- old.aliasUsageInIndexerOfClass.types
+++ new.aliasUsageInIndexerOfClass.types
@@= skipped -1, +1 lines =@@
 
 === aliasUsageInIndexerOfClass_main.ts ===
 import Backbone = require("./aliasUsageInIndexerOfClass_backbone");
->Backbone : typeof Backbone
+>Backbone : typeof import("aliasUsageInIndexerOfClass_backbone")
 
 import moduleA = require("./aliasUsageInIndexerOfClass_moduleA");
->moduleA : typeof moduleA
+>moduleA : typeof import("aliasUsageInIndexerOfClass_moduleA")
 
 interface IHasVisualizationModel {
+>IHasVisualizationModel : IHasVisualizationModel
+
     VisualizationModel: typeof Backbone.Model;
->VisualizationModel : typeof Backbone.Model
->Backbone.Model : typeof Backbone.Model
->Backbone : typeof Backbone
->Model : typeof Backbone.Model
+>VisualizationModel : typeof Model
+>Backbone : typeof import("aliasUsageInIndexerOfClass_backbone")
 }
 class N {
 >N : N
@@= skipped -19, +19 lines =@@
 >idx : string
 
     x = moduleA;
->x : typeof moduleA
->moduleA : typeof moduleA
+>x : typeof import("aliasUsageInIndexerOfClass_moduleA")
+>moduleA : typeof import("aliasUsageInIndexerOfClass_moduleA")
 }
 class N2 {
 >N2 : N2
 
     [idx: string]: typeof moduleA
 >idx : string
->moduleA : typeof moduleA
 
     x: IHasVisualizationModel;
 >x : IHasVisualizationModel
@@= skipped -23, +22 lines =@@
 
 === aliasUsageInIndexerOfClass_moduleA.ts ===
 import Backbone = require("./aliasUsageInIndexerOfClass_backbone");
->Backbone : typeof Backbone
+>Backbone : typeof import("aliasUsageInIndexerOfClass_backbone")
 
 export class VisualizationModel extends Backbone.Model {
 >VisualizationModel : VisualizationModel
->Backbone.Model : Backbone.Model
->Backbone : typeof Backbone
->Model : typeof Backbone.Model
+>Backbone.Model : Model
+>Backbone : typeof import("aliasUsageInIndexerOfClass_backbone")
+>Model : typeof Model
 
     // interesting stuff here
 }
