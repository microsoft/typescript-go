--- old.flatArrayNoExcessiveStackDepth.symbols
+++ new.flatArrayNoExcessiveStackDepth.symbols
@@= skipped -7, +7 lines =@@
 
 const bar = foo.flatMap(bar => bar as Foo);
 >bar : Symbol(bar, Decl(flatArrayNoExcessiveStackDepth.ts, 3, 5))
->foo.flatMap : Symbol(Array.flatMap, Decl(lib.es2019.array.d.ts, --, --))
+>foo.flatMap : Symbol(flatMap, Decl(lib.es2019.array.d.ts, --, --))
 >foo : Symbol(foo, Decl(flatArrayNoExcessiveStackDepth.ts, 2, 13))
->flatMap : Symbol(Array.flatMap, Decl(lib.es2019.array.d.ts, --, --))
+>flatMap : Symbol(flatMap, Decl(lib.es2019.array.d.ts, --, --))
 >bar : Symbol(bar, Decl(flatArrayNoExcessiveStackDepth.ts, 3, 24))
 >bar : Symbol(bar, Decl(flatArrayNoExcessiveStackDepth.ts, 3, 24))
 >Foo : Symbol(Foo, Decl(flatArrayNoExcessiveStackDepth.ts, 3, 43))
@@= skipped -25, +25 lines =@@
     }
     const match = value.match(/anything/) || [];
 >match : Symbol(match, Decl(flatArrayNoExcessiveStackDepth.ts, 13, 9))
->value.match : Symbol(String.match, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>value.match : Symbol(match, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 >value : Symbol(value, Decl(flatArrayNoExcessiveStackDepth.ts, 9, 21))
->match : Symbol(String.match, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>match : Symbol(match, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 
     const [, extracted] = match;
 >extracted : Symbol(extracted, Decl(flatArrayNoExcessiveStackDepth.ts, 14, 12))
