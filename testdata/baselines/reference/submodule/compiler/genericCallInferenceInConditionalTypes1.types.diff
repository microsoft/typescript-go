--- old.genericCallInferenceInConditionalTypes1.types
+++ new.genericCallInferenceInConditionalTypes1.types
@@= skipped -33, +33 lines =@@
   PropsWithoutRef<ComponentProps<T>>;

 declare function forwardRef<T, P>(
->forwardRef : <T, P>(component: (props: P, ref: Ref<T>) => unknown) => (props: P & { ref?: Ref<T>; }) => unknown
+>forwardRef : <T, P>(component: (props: P, ref: Ref<T>) => unknown) => (props: P & { ref?: Ref<T> | undefined; }) => unknown

   component: (props: P, ref: Ref<T>) => unknown,
 >component : (props: P, ref: Ref<T>) => unknown
@@= skipped -8, +8 lines =@@
 >ref : Ref<T>

 ): (props: P & { ref?: Ref<T> }) => unknown;
->props : P & { ref?: Ref<T>; }
+>props : P & { ref?: Ref<T> | undefined; }
 >ref : Ref<T> | undefined

 const ComponentWithForwardRef = forwardRef(
 >ComponentWithForwardRef : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { ref?: Ref<HTMLElement> | undefined; }) => unknown
 >forwardRef(  <T extends FunctionComponent<any>>(    props: ComponentPropsWithoutRef<T>,    ref: Ref<HTMLElement>,  ) => {    return null;  },) : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { ref?: Ref<HTMLElement> | undefined; }) => unknown
->forwardRef : <T, P>(component: (props: P, ref: Ref<T>) => unknown) => (props: P & { ref?: Ref<T>; }) => unknown
+>forwardRef : <T, P>(component: (props: P, ref: Ref<T>) => unknown) => (props: P & { ref?: Ref<T> | undefined; }) => unknown

   <T extends FunctionComponent<any>>(
-><T extends FunctionComponent<any>>(    props: ComponentPropsWithoutRef<T>,    ref: Ref<HTMLElement>,  ) => {    return null;  } : <T extends FunctionComponent<any>>(props: ComponentPropsWithoutRef<T>, ref: Ref<HTMLElement>) => null
+><T extends FunctionComponent<any>>(    props: ComponentPropsWithoutRef<T>,    ref: Ref<HTMLElement>,  ) => {    return null;  } : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>>, ref: Ref<HTMLElement>) => null

     props: ComponentPropsWithoutRef<T>,
 >props : PropsWithoutRef<ComponentProps<T>>
@@= skipped -44, +44 lines =@@

 // same as ComponentWithForwardRef above but using a resolved signature instead of a direct inferred result of `forwardRef`
 declare const ComponentWithForwardRef2: <T extends FunctionComponent<any>>(
->ComponentWithForwardRef2 : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown
+>ComponentWithForwardRef2 : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string | undefined; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown

   props: PropsWithoutRef<ComponentProps<T>> & {
->props : PropsWithoutRef<ComponentProps<T>> & { className?: string; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }
+>props : PropsWithoutRef<ComponentProps<T>> & { className?: string | undefined; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }

     className?: string;
 >className : string | undefined
@@= skipped -19, +19 lines =@@
 ) => unknown;

 type Result3 = ComponentProps<typeof ComponentWithForwardRef2>;
->Result3 : Omit<any, "ref"> & { className?: string; as?: FunctionComponent<any> | undefined; } & { ref?: Ref<HTMLElement> | undefined; }
->ComponentWithForwardRef2 : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown
+>Result3 : Omit<any, "ref"> & { className?: string | undefined; as?: FunctionComponent<any> | undefined; } & { ref?: Ref<HTMLElement> | undefined; }
+>ComponentWithForwardRef2 : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string | undefined; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown

 type Result4 = Test<{ component: typeof ComponentWithForwardRef2 }>;
->Result4 : Omit<any, "ref"> & { className?: string; as?: FunctionComponent<any> | undefined; } & { ref?: Ref<HTMLElement> | undefined; }
->component : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown
->ComponentWithForwardRef2 : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown
+>Result4 : Omit<any, "ref"> & { className?: string | undefined; as?: FunctionComponent<any> | undefined; } & { ref?: Ref<HTMLElement> | undefined; }
+>component : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string | undefined; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown
+>ComponentWithForwardRef2 : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string | undefined; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown
