--- old.nestedBlockScopedBindings5.types
+++ new.nestedBlockScopedBindings5.types
@@= skipped -2, +2 lines =@@
 === nestedBlockScopedBindings5.ts ===
 function a0() {
 >a0 : () => void
->   : ^^^^^^^^^^
 
     for (let x in []) {
 >x : string
->  : ^^^^^^
 >[] : undefined[]
->   : ^^^^^^^^^^^
 
         x = x + 1;
 >x = x + 1 : string
->          : ^^^^^^
 >x : string
->  : ^^^^^^
 >x + 1 : string
->      : ^^^^^^
 >x : string
->  : ^^^^^^
 >1 : 1
->  : ^
     }
     for (let x;;) {
 >x : any
@@= skipped -29, +21 lines =@@
 >x + 2 : any
 >x : any
 >2 : 2
->  : ^
     }
 }
 
 function a1() {
 >a1 : () => void
->   : ^^^^^^^^^^
 
     for (let x in []) {
 >x : string
->  : ^^^^^^
 >[] : undefined[]
->   : ^^^^^^^^^^^
 
         x = x + 1;
 >x = x + 1 : string
->          : ^^^^^^
 >x : string
->  : ^^^^^^
 >x + 1 : string
->      : ^^^^^^
 >x : string
->  : ^^^^^^
 >1 : 1
->  : ^
 
         () => x;
 >() => x : () => string
->        : ^^^^^^^^^^^^
 >x : string
->  : ^^^^^^
     }
     for (let x;;) {
 >x : any
@@= skipped -41, +30 lines =@@
 >x + 2 : any
 >x : any
 >2 : 2
->  : ^
     }
 }
 
 function a2() {
 >a2 : () => void
->   : ^^^^^^^^^^
 
     for (let x in []) {
 >x : string
->  : ^^^^^^
 >[] : undefined[]
->   : ^^^^^^^^^^^
 
         x = x + 1;
 >x = x + 1 : string
->          : ^^^^^^
 >x : string
->  : ^^^^^^
 >x + 1 : string
->      : ^^^^^^
 >x : string
->  : ^^^^^^
 >1 : 1
->  : ^
     }
     for (let x;;) {
 >x : any
@@= skipped -35, +26 lines =@@
 >x + 2 : any
 >x : any
 >2 : 2
->  : ^
 
         () => x;
 >() => x : () => any
->        : ^^^^^^^^^
 >x : any
     }
 }
@@= skipped -12, +10 lines =@@
 
 function a3() {
 >a3 : () => void
->   : ^^^^^^^^^^
 
     for (let x in []) {
 >x : string
->  : ^^^^^^
 >[] : undefined[]
->   : ^^^^^^^^^^^
 
         x = x + 1;
 >x = x + 1 : string
->          : ^^^^^^
 >x : string
->  : ^^^^^^
 >x + 1 : string
->      : ^^^^^^
 >x : string
->  : ^^^^^^
 >1 : 1
->  : ^
 
         () => x;
 >() => x : () => string
->        : ^^^^^^^^^^^^
 >x : string
->  : ^^^^^^
     }
     for (let x;false;) {
 >x : any
 >false : false
->      : ^^^^^
 
         x = x + 2;
 >x = x + 2 : any
@@= skipped -37, +26 lines =@@
 >x + 2 : any
 >x : any
 >2 : 2
->  : ^
 
         () => x;
 >() => x : () => any
->        : ^^^^^^^^^
 >x : any
     }
     switch (1) {
 >1 : 1
->  : ^
 
         case 1:
 >1 : 1
->  : ^
 
             let x;
 >x : any
 
             () => x;
 >() => x : () => any
->        : ^^^^^^^^^
 >x : any
 
             break;
@@= skipped -30, +25 lines =@@
 
 function a4() {
 >a4 : () => void
->   : ^^^^^^^^^^
 
     for (let x in []) {
 >x : string
->  : ^^^^^^
 >[] : undefined[]
->   : ^^^^^^^^^^^
 
         x = x + 1;
 >x = x + 1 : string
->          : ^^^^^^
 >x : string
->  : ^^^^^^
 >x + 1 : string
->      : ^^^^^^
 >x : string
->  : ^^^^^^
 >1 : 1
->  : ^
     }
     for (let x;false;) {
 >x : any
 >false : false
->      : ^^^^^
 
         x = x + 2;
 >x = x + 2 : any
@@= skipped -31, +22 lines =@@
 >x + 2 : any
 >x : any
 >2 : 2
->  : ^
     }
     switch (1) {
 >1 : 1
->  : ^
 
         case 1:
 >1 : 1
->  : ^
 
             let x;
 >x : any
 
             () => x;
 >() => x : () => any
->        : ^^^^^^^^^
 >x : any
 
             break;
@@= skipped -25, +21 lines =@@
 
 function a5() {
 >a5 : () => void
->   : ^^^^^^^^^^
 
     let y;
 >y : any
 
     for (let x in []) {
 >x : string
->  : ^^^^^^
 >[] : undefined[]
->   : ^^^^^^^^^^^
 
         x = x + 1;
 >x = x + 1 : string
->          : ^^^^^^
 >x : string
->  : ^^^^^^
 >x + 1 : string
->      : ^^^^^^
 >x : string
->  : ^^^^^^
 >1 : 1
->  : ^
     }
     for (let x;false;) {
 >x : any
 >false : false
->      : ^^^^^
 
         x = x + 2;
 >x = x + 2 : any
@@= skipped -34, +25 lines =@@
 >x + 2 : any
 >x : any
 >2 : 2
->  : ^
 
         () => x;
 >() => x : () => any
->        : ^^^^^^^^^
 >x : any
     }
     switch (1) {
 >1 : 1
->  : ^
 
         case 1:
 >1 : 1
->  : ^
 
             let x;
 >x : any
