//// [tests/cases/compiler/expandoFunctionContextualTypesJs.ts] ////

=== input.js ===
/** @typedef {{ color: "red" | "blue" }} MyComponentProps */

/**
 * @template P 
 * @typedef {{ (): any; defaultProps?: Partial<P> }} StatelessComponent */

 /**
  * @type {StatelessComponent<MyComponentProps>}
  */
const MyComponent = () => /* @type {any} */(null);
>MyComponent : { (): any; defaultProps?: P; }
>() => /* @type {any} */(null) : { (): any; defaultProps: { color: string; }; }
>(null) : null

MyComponent.defaultProps = {
>MyComponent.defaultProps = {    color: "red"} : { color: string; }
>MyComponent.defaultProps : P
>MyComponent : { (): any; defaultProps?: P; }
>defaultProps : P
>{    color: "red"} : { color: string; }

    color: "red"
>color : string
>"red" : "red"

};

const MyComponent2 = () => null;
>MyComponent2 : { (): any; defaultProps: { color: "blue" | "red"; }; }
>() => null : { (): any; defaultProps: { color: "blue" | "red"; }; }

/**
 * @type {MyComponentProps}
 */
MyComponent2.defaultProps = {
>MyComponent2.defaultProps = {    color: "red"} : { color: "blue" | "red"; }
>MyComponent2.defaultProps : { color: "blue" | "red"; }
>MyComponent2 : { (): any; defaultProps: { color: "blue" | "red"; }; }
>defaultProps : { color: "blue" | "red"; }
>{    color: "red"} : { color: "blue" | "red"; }
>{    color: "red"} : { color: "red"; }

    color: "red"
>color : "red"
>"red" : "red"
}

/**
  * @type {StatelessComponent<MyComponentProps>}
 */
const check = MyComponent2;
>check : { (): any; defaultProps?: P; }
>MyComponent2 : { (): any; defaultProps: { color: "blue" | "red"; }; }

/**
 * 
 * @param {{ props: MyComponentProps }} p 
 */
function expectLiteral(p) {}
>expectLiteral : (p: { props: { color: "blue" | "red"; }; }) => void
>p : { props: { color: "blue" | "red"; }; }

function foo() {
>foo : () => void

    /**
     * @type {MyComponentProps}
     */
    this.props = { color: "red" };
>this.props = { color: "red" } : { color: "blue" | "red"; }
>this.props : any
>this : any
>props : any
>{ color: "red" } : { color: "blue" | "red"; }
>{ color: "red" } : { color: "red"; }
>color : "red"
>"red" : "red"

    expectLiteral(this);
>expectLiteral(this) : void
>expectLiteral : (p: { props: { color: "blue" | "red"; }; }) => void
>this : any
}

/**
 * @type {MyComponentProps}
 */
module.exports = {
>module.exports = {    color: "red"} : { color: "blue" | "red"; }
>module.exports : { color: "blue" | "red"; }
>module : { "export=": { color: "blue" | "red"; }; }
>exports : { color: "blue" | "red"; }
>{    color: "red"} : { color: "blue" | "red"; }
>{    color: "red"} : { color: "red"; }

    color: "red"
>color : "red"
>"red" : "red"
}

expectLiteral({ props: module.exports });
>expectLiteral({ props: module.exports }) : void
>expectLiteral : (p: { props: { color: "blue" | "red"; }; }) => void
>{ props: module.exports } : { props: { color: "blue" | "red"; }; }
>props : { color: "blue" | "red"; }
>module.exports : { color: "blue" | "red"; }
>module : { "export=": { color: "blue" | "red"; }; }
>exports : { color: "blue" | "red"; }

