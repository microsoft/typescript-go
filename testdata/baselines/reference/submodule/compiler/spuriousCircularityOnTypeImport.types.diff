--- old.spuriousCircularityOnTypeImport.types
+++ new.spuriousCircularityOnTypeImport.types
@@= skipped -2, +2 lines =@@
 === types.ts ===
 export type SelectorMap<T extends Record<string, (...params: unknown[]) => unknown>> = {
 >SelectorMap : SelectorMap<T>
+>T : T
 >params : unknown[]
 
     [key in keyof T]: T[key];
+>key : key
+
 };
 
 === index.ts ===
 export type SelectorMap<T extends Record<string, (...params: unknown[]) => unknown>> = {
 >SelectorMap : SelectorMap<T>
+>T : T
 >params : unknown[]
 
     [key in keyof T]: T[key];
+>key : key
+
 };
 
 export declare const value2: {
->value2 : { sliceSelectors: <FuncMap extends import("./types").SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]>; }; }
+>value2 : { sliceSelectors: <FuncMap extends SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]> }; }
 
     sliceSelectors: <FuncMap extends import('./types').SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]> };
->sliceSelectors : <FuncMap extends import("./types").SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]>; }
+>sliceSelectors : <FuncMap extends SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]> }
+>FuncMap : FuncMap
 >selectorsBySlice : FuncMap
+>P : P
 
 };
 
 export declare const value3: {
->value3 : { sliceSelectors: <FuncMap extends SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]>; }; }
+>value3 : { sliceSelectors: <FuncMap extends SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]> }; }
 
     sliceSelectors: <FuncMap extends SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]> };
->sliceSelectors : <FuncMap extends SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]>; }
+>sliceSelectors : <FuncMap extends SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]> }
+>FuncMap : FuncMap
 >selectorsBySlice : FuncMap
+>P : P
 
 };
 
