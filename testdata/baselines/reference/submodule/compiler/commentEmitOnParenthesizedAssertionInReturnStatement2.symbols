//// [tests/cases/compiler/commentEmitOnParenthesizedAssertionInReturnStatement2.ts] ////

=== commentEmitOnParenthesizedAssertionInReturnStatement2.ts ===
export class Foo {
>Foo : Symbol(Foo, Decl(commentEmitOnParenthesizedAssertionInReturnStatement2.ts, 0, 0))

    client = {
>client : Symbol(client, Decl(commentEmitOnParenthesizedAssertionInReturnStatement2.ts, 0, 18))

      getThing: () => Promise.resolve('')
>getThing : Symbol(getThing, Decl(commentEmitOnParenthesizedAssertionInReturnStatement2.ts, 1, 14))
    }
  
    foo() {
>foo : Symbol(foo, Decl(commentEmitOnParenthesizedAssertionInReturnStatement2.ts, 3, 5))

      return (
        /* TODO: please refactor */ this.client
>this.client          .getThing : Symbol(getThing, Decl(commentEmitOnParenthesizedAssertionInReturnStatement2.ts, 1, 14))
>this.client : Symbol(client, Decl(commentEmitOnParenthesizedAssertionInReturnStatement2.ts, 0, 18))
>this : Symbol(Foo, Decl(commentEmitOnParenthesizedAssertionInReturnStatement2.ts, 0, 0))
>client : Symbol(client, Decl(commentEmitOnParenthesizedAssertionInReturnStatement2.ts, 0, 18))

          .getThing() satisfies Promise<string>);
>getThing : Symbol(getThing, Decl(commentEmitOnParenthesizedAssertionInReturnStatement2.ts, 1, 14))
>Promise : Symbol(Promise)
    }
  }
