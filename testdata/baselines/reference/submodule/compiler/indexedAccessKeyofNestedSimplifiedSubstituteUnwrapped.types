//// [tests/cases/compiler/indexedAccessKeyofNestedSimplifiedSubstituteUnwrapped.ts] ////

=== indexedAccessKeyofNestedSimplifiedSubstituteUnwrapped.ts ===
type AnyFunction = (...args: any[]) => any;
>AnyFunction : AnyFunction
>args : any[]

type Params<T> = Parameters<Extract<T, AnyFunction>>;
>Params : Params<T>
>T : T

interface Wrapper<T> {
>Wrapper : Wrapper<T>
>T : T

	call<K extends keyof T>(event: K, ...args: Params<T[K]>): void;
>call : <K extends keyof T>(event: K, ...args: Parameters<Extract<T[K], AnyFunction>>) => void
>K : K
>event : K
>args : Parameters<Extract<T[K], AnyFunction>>
}

interface AWrapped {
>AWrapped : AWrapped

	foo(): void;
>foo : () => void
}

class A {
>A : A

	foo: Wrapper<AWrapped>;
>foo : Wrapper<AWrapped>
}

interface BWrapped extends AWrapped {
>BWrapped : BWrapped

	bar(): void;
>bar : () => void
}

class B extends A {
>B : B
>A : A

	foo: Wrapper<BWrapped>;
>foo : Wrapper<BWrapped>
}
