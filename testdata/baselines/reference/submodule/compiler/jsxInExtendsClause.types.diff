--- old.jsxInExtendsClause.types
+++ new.jsxInExtendsClause.types
@@= skipped -5, +5 lines =@@
 >React : typeof React
 
   interface ComponentClass<P> { new (): Component<P, {}>; }
+>ComponentClass : ComponentClass<P>
+>P : P
+
   class Component<A, B> {}
 >Component : Component<A, B>
+>A : A
+>B : B
 }
 declare function createComponentClass<P>(factory: () => React.ComponentClass<P>): React.ComponentClass<P>;
->createComponentClass : <P>(factory: () => React.ComponentClass<P>) => React.ComponentClass<P>
->factory : () => React.ComponentClass<P>
+>createComponentClass : <P>(factory: () => ComponentClass<P>) => ComponentClass<P>
+>P : P
+>factory : () => ComponentClass<P>
 >React : any
 >React : any
 
 class Foo extends createComponentClass(() => class extends React.Component<{}, {}> {
 >Foo : Foo
->createComponentClass(() => class extends React.Component<{}, {}> {  render() {    return <span>Hello, world!</span>;  }}) : React.Component<unknown, {}>
->createComponentClass : <P>(factory: () => React.ComponentClass<P>) => React.ComponentClass<P>
+>createComponentClass(() => class extends React.Component<{}, {}> {  render() {    return <span>Hello, world!</span>;  }}) : Component<unknown, {}>
+>createComponentClass : <P>(factory: () => ComponentClass<P>) => ComponentClass<P>
 >() => class extends React.Component<{}, {}> {  render() {    return <span>Hello, world!</span>;  }} : () => typeof (Anonymous class)
 >class extends React.Component<{}, {}> {  render() {    return <span>Hello, world!</span>;  }} : typeof (Anonymous class)
->React.Component : React.Component<{}, {}>
+>React.Component : Component<{}, {}>
 >React : typeof React
->Component : typeof React.Component
+>Component : typeof Component
 
   render() {
 >render : () => any
 
     return <span>Hello, world!</span>;
-><span>Hello, world!</span> : error
+><span>Hello, world!</span> : any
 >span : any
 >span : any
   }
