--- old.underscoreMapFirst.types
+++ new.underscoreMapFirst.types
@@= skipped -4, +4 lines =@@
 >_ : typeof _
 
     interface Collection<T> { }
+>Collection : Collection<T>
+>T : T
+
     interface List<T> extends Collection<T> {
+>List : List<T>
+>T : T
+
         [index: number]: T;
 >index : number
 
@@= skipped -9, +15 lines =@@
     }
 
     interface ListIterator<T, TResult> {
+>ListIterator : ListIterator<T, TResult>
+>T : T
+>TResult : TResult
+
         (value: T, index: number, list: T[]): TResult;
 >value : T
 >index : number
@@= skipped -7, +11 lines =@@
     }
 
     interface Dictionary<T> extends Collection<T> {
+>Dictionary : Dictionary<T>
+>T : T
+
         [index: string]: T;
 >index : string
     }
     export function pluck<T extends {}>(
 >pluck : <T extends {}>(list: Collection<T>, propertyName: string) => any[]
+>T : T
 
         list: Collection<T>,
 >list : Collection<T>
@@= skipped -14, +18 lines =@@
 
     export function map<T, TResult>(
 >map : <T, TResult>(list: List<T>, iterator: ListIterator<T, TResult>, context?: any) => TResult[]
+>T : T
+>TResult : TResult
 
         list: List<T>,
 >list : List<T>
@@= skipped -12, +14 lines =@@
 
     export function first<T>(array: List<T>): T;
 >first : <T>(array: List<T>) => T
+>T : T
 >array : List<T>
 }
 
@@= skipped -11, +12 lines =@@
 }
 
 interface IData {
+>IData : IData
+
     series: ISeries[];
 >series : ISeries[]
 }
 
 interface ISeries {
+>ISeries : ISeries
+
     items: any[];
 >items : any[]
 
@@= skipped -32, +36 lines =@@
         var allSeries: ISeries[][] = _.pluck(data, "series");
 >allSeries : ISeries[][]
 >_.pluck(data, "series") : any[]
->_.pluck : <T extends {}>(list: _.Collection<T>, propertyName: string) => any[]
+>_.pluck : <T extends {}>(list: Collection<T>, propertyName: string) => any[]
 >_ : typeof _
->pluck : <T extends {}>(list: _.Collection<T>, propertyName: string) => any[]
+>pluck : <T extends {}>(list: Collection<T>, propertyName: string) => any[]
 >data : IData[]
 >"series" : "series"
 
         return _.map(allSeries, _.first);
 >_.map(allSeries, _.first) : ISeries[]
->_.map : <T, TResult>(list: _.List<T>, iterator: _.ListIterator<T, TResult>, context?: any) => TResult[]
+>_.map : <T, TResult>(list: List<T>, iterator: ListIterator<T, TResult>, context?: any) => TResult[]
 >_ : typeof _
->map : <T, TResult>(list: _.List<T>, iterator: _.ListIterator<T, TResult>, context?: any) => TResult[]
+>map : <T, TResult>(list: List<T>, iterator: ListIterator<T, TResult>, context?: any) => TResult[]
 >allSeries : ISeries[][]
->_.first : <T>(array: _.List<T>) => T
+>_.first : <T>(array: List<T>) => T
 >_ : typeof _
->first : <T>(array: _.List<T>) => T
+>first : <T>(array: List<T>) => T
     }
 }
 
