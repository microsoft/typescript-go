--- old.constructorWithIncompleteTypeAnnotation.symbols
+++ new.constructorWithIncompleteTypeAnnotation.symbols
@@= skipped -10, +10 lines =@@
 >filename : Symbol(filename, Decl(constructorWithIncompleteTypeAnnotation.ts, 2, 20))
 
         public ReadAllText(): string;
->ReadAllText : Symbol(File.ReadAllText, Decl(constructorWithIncompleteTypeAnnotation.ts, 2, 38))
+>ReadAllText : Symbol(ReadAllText, Decl(constructorWithIncompleteTypeAnnotation.ts, 2, 38))
     }
     export interface IFile {
 >IFile : Symbol(IFile, Decl(constructorWithIncompleteTypeAnnotation.ts, 4, 5))
@@= skipped -21, +21 lines =@@
 >Program : Symbol(Program, Decl(constructorWithIncompleteTypeAnnotation.ts, 13, 27))
 
         static Main(...args: string[]) {
->Main : Symbol(Program.Main, Decl(constructorWithIncompleteTypeAnnotation.ts, 14, 26))
+>Main : Symbol(Main, Decl(constructorWithIncompleteTypeAnnotation.ts, 14, 26))
 >args : Symbol(args, Decl(constructorWithIncompleteTypeAnnotation.ts, 15, 20))
 
             try {
@@= skipped -13, +13 lines =@@
 
                 retValue = bfs.VARIABLES();
 >retValue : Symbol(retValue, Decl(constructorWithIncompleteTypeAnnotation.ts, 18, 19))
->bfs.VARIABLES : Symbol(BasicFeatures.VARIABLES, Decl(constructorWithIncompleteTypeAnnotation.ts, 59, 25))
+>bfs.VARIABLES : Symbol(VARIABLES, Decl(constructorWithIncompleteTypeAnnotation.ts, 59, 25))
 >bfs : Symbol(bfs, Decl(constructorWithIncompleteTypeAnnotation.ts, 17, 19))
->VARIABLES : Symbol(BasicFeatures.VARIABLES, Decl(constructorWithIncompleteTypeAnnotation.ts, 59, 25))
+>VARIABLES : Symbol(VARIABLES, Decl(constructorWithIncompleteTypeAnnotation.ts, 59, 25))
 
                 if (retValue != 0 ^=  {
 >retValue : Symbol(retValue, Decl(constructorWithIncompleteTypeAnnotation.ts, 18, 19))
@@= skipped -12, +12 lines =@@
                 }
 
                  case  = bfs.STATEMENTS(4);
->case : Symbol(Program.case, Decl(constructorWithIncompleteTypeAnnotation.ts, 24, 17))
+>case : Symbol(case, Decl(constructorWithIncompleteTypeAnnotation.ts, 24, 17))
 
                 if (retValue != 0) {
->if : Symbol(Program.if, Decl(constructorWithIncompleteTypeAnnotation.ts, 26, 43))
+>if : Symbol(if, Decl(constructorWithIncompleteTypeAnnotation.ts, 26, 43))
 >retValue : Symbol(retValue, Decl(constructorWithIncompleteTypeAnnotation.ts, 27, 20))
 
                     return 1;
@@= skipped -47, +47 lines =@@
         /// </summary>
         /// <returns></returns>
         public VARIABLES(): number {
->VARIABLES : Symbol(BasicFeatures.VARIABLES, Decl(constructorWithIncompleteTypeAnnotation.ts, 59, 25))
+>VARIABLES : Symbol(VARIABLES, Decl(constructorWithIncompleteTypeAnnotation.ts, 59, 25))
 
             var local = Number.MAX_VALUE;
 >local : Symbol(local, Decl(constructorWithIncompleteTypeAnnotation.ts, 65, 15))
->Number.MAX_VALUE : Symbol(NumberConstructor.MAX_VALUE, Decl(lib.es5.d.ts, --, --))
+>Number.MAX_VALUE : Symbol(MAX_VALUE, Decl(lib.es5.d.ts, --, --))
 >Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->MAX_VALUE : Symbol(NumberConstructor.MAX_VALUE, Decl(lib.es5.d.ts, --, --))
+>MAX_VALUE : Symbol(MAX_VALUE, Decl(lib.es5.d.ts, --, --))
 
             var min = Number.MIN_VALUE;
 >min : Symbol(min, Decl(constructorWithIncompleteTypeAnnotation.ts, 66, 15))
->Number.MIN_VALUE : Symbol(NumberConstructor.MIN_VALUE, Decl(lib.es5.d.ts, --, --))
+>Number.MIN_VALUE : Symbol(MIN_VALUE, Decl(lib.es5.d.ts, --, --))
 >Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->MIN_VALUE : Symbol(NumberConstructor.MIN_VALUE, Decl(lib.es5.d.ts, --, --))
+>MIN_VALUE : Symbol(MIN_VALUE, Decl(lib.es5.d.ts, --, --))
 
             var inf = Number.NEGATIVE_INFINITY - 
 >inf : Symbol(inf, Decl(constructorWithIncompleteTypeAnnotation.ts, 67, 15))
->Number.NEGATIVE_INFINITY : Symbol(NumberConstructor.NEGATIVE_INFINITY, Decl(lib.es5.d.ts, --, --))
+>Number.NEGATIVE_INFINITY : Symbol(NEGATIVE_INFINITY, Decl(lib.es5.d.ts, --, --))
 >Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->NEGATIVE_INFINITY : Symbol(NumberConstructor.NEGATIVE_INFINITY, Decl(lib.es5.d.ts, --, --))
+>NEGATIVE_INFINITY : Symbol(NEGATIVE_INFINITY, Decl(lib.es5.d.ts, --, --))
 
             var nan = Number.NaN;
 >nan : Symbol(nan, Decl(constructorWithIncompleteTypeAnnotation.ts, 68, 15))
->Number.NaN : Symbol(NumberConstructor.NaN, Decl(lib.es5.d.ts, --, --))
+>Number.NaN : Symbol(NaN, Decl(lib.es5.d.ts, --, --))
 >Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->NaN : Symbol(NumberConstructor.NaN, Decl(lib.es5.d.ts, --, --))
+>NaN : Symbol(NaN, Decl(lib.es5.d.ts, --, --))
 
             var undef = undefined;
 >undef : Symbol(undef, Decl(constructorWithIncompleteTypeAnnotation.ts, 69, 15))
 >undefined : Symbol(undefined)
 
             var  _\uD4A5\u7204\uC316\uE59F  = local;
->_\uD4A5\u7204\uC316 : Symbol(_\uD4A5\u7204\uC316, Decl(constructorWithIncompleteTypeAnnotation.ts, 71, 15))
+>_\uD4A5\u7204\uC316 : Symbol(_풥爄쌖, Decl(constructorWithIncompleteTypeAnnotation.ts, 71, 15))
 >uE59F : Symbol(uE59F, Decl(constructorWithIncompleteTypeAnnotation.ts, 71, 37))
 >local : Symbol(local, Decl(constructorWithIncompleteTypeAnnotation.ts, 65, 15))
 
@@= skipped -42, +42 lines =@@
             var local5 = <fs.File>null;
 >local5 : Symbol(local5, Decl(constructorWithIncompleteTypeAnnotation.ts, 74, 15))
 >fs : Symbol(fs, Decl(constructorWithIncompleteTypeAnnotation.ts, 8, 1))
->File : Symbol(fs.File)
+>File : Symbol(File)
 
             var local6 = local5 instanceof fs.File;
 >local6 : Symbol(local6, Decl(constructorWithIncompleteTypeAnnotation.ts, 75, 15))
@@= skipped -17, +17 lines =@@
 
             var char = 'c', \u0066 = '\u0066', hexchar = '\x42' != 
 >char : Symbol(char, Decl(constructorWithIncompleteTypeAnnotation.ts, 79, 15))
->\u0066 : Symbol(\u0066, Decl(constructorWithIncompleteTypeAnnotation.ts, 79, 27))
+>\u0066 : Symbol(f, Decl(constructorWithIncompleteTypeAnnotation.ts, 79, 27))
 >hexchar : Symbol(hexchar, Decl(constructorWithIncompleteTypeAnnotation.ts, 79, 46))
 
             var quoted = '"', quoted2 = "'";
@@= skipped -12, +12 lines =@@
 
             var objLit = { "var": number = 42, equals: function (x) { return x["var"] === 42; },  instanceof : () => 'objLit{42}' };
 >objLit : Symbol(objLit, Decl(constructorWithIncompleteTypeAnnotation.ts, 82, 15))
->"var" : Symbol("var", Decl(constructorWithIncompleteTypeAnnotation.ts, 82, 26))
+>"var" : Symbol(var, Decl(constructorWithIncompleteTypeAnnotation.ts, 82, 26))
 >number : Symbol(number, Decl(constructorWithIncompleteTypeAnnotation.ts, 97, 15))
 >equals : Symbol(equals, Decl(constructorWithIncompleteTypeAnnotation.ts, 82, 46))
 >x : Symbol(x, Decl(constructorWithIncompleteTypeAnnotation.ts, 82, 65))
@@= skipped -9, +9 lines =@@
 
             var weekday = Weekdays.Monday;
 >weekday : Symbol(weekday, Decl(constructorWithIncompleteTypeAnnotation.ts, 83, 15))
->Weekdays.Monday : Symbol(Weekdays.Monday, Decl(constructorWithIncompleteTypeAnnotation.ts, 262, 15))
+>Weekdays.Monday : Symbol(Monday, Decl(constructorWithIncompleteTypeAnnotation.ts, 262, 15))
 >Weekdays : Symbol(Weekdays, Decl(constructorWithIncompleteTypeAnnotation.ts, 260, 1))
->Monday : Symbol(Weekdays.Monday, Decl(constructorWithIncompleteTypeAnnotation.ts, 262, 15))
+>Monday : Symbol(Monday, Decl(constructorWithIncompleteTypeAnnotation.ts, 262, 15))
 
             var con = char + f + hexchar + float.toString() + float2.toString() + reg.toString() + objLit + weekday;
 >con : Symbol(con, Decl(constructorWithIncompleteTypeAnnotation.ts, 85, 15))
 >char : Symbol(char, Decl(constructorWithIncompleteTypeAnnotation.ts, 79, 15))
->f : Symbol(\u0066, Decl(constructorWithIncompleteTypeAnnotation.ts, 79, 27))
+>f : Symbol(f, Decl(constructorWithIncompleteTypeAnnotation.ts, 79, 27))
 >hexchar : Symbol(hexchar, Decl(constructorWithIncompleteTypeAnnotation.ts, 79, 46))
->float.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>float.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >float : Symbol(float, Decl(constructorWithIncompleteTypeAnnotation.ts, 78, 15))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
->float2.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
+>float2.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >float2 : Symbol(float2, Decl(constructorWithIncompleteTypeAnnotation.ts, 78, 32))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
->reg.toString : Symbol(Object.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
+>reg.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >reg : Symbol(reg, Decl(constructorWithIncompleteTypeAnnotation.ts, 81, 15))
->toString : Symbol(Object.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >objLit : Symbol(objLit, Decl(constructorWithIncompleteTypeAnnotation.ts, 82, 15))
 >weekday : Symbol(weekday, Decl(constructorWithIncompleteTypeAnnotation.ts, 83, 15))
 
@@= skipped -106, +106 lines =@@
         /// <param name="i"></param>
         /// <returns></returns>
         STATEMENTS(i: number): number {
->STATEMENTS : Symbol(BasicFeatures.STATEMENTS, Decl(constructorWithIncompleteTypeAnnotation.ts, 110, 9))
+>STATEMENTS : Symbol(STATEMENTS, Decl(constructorWithIncompleteTypeAnnotation.ts, 110, 9))
 >i : Symbol(i, Decl(constructorWithIncompleteTypeAnnotation.ts, 117, 19))
 
             var retVal = 0;
@@= skipped -61, +61 lines =@@
         /// </summary>
         /// <returns></returns>
         public TYPES(): number {
->TYPES : Symbol(BasicFeatures.TYPES, Decl(constructorWithIncompleteTypeAnnotation.ts, 148, 9))
+>TYPES : Symbol(TYPES, Decl(constructorWithIncompleteTypeAnnotation.ts, 148, 9))
 
             var retVal = 0;
 >retVal : Symbol(retVal, Decl(constructorWithIncompleteTypeAnnotation.ts, 155, 15))
@@= skipped -19, +19 lines =@@
 
             retVal += c.Member();
 >retVal : Symbol(retVal, Decl(constructorWithIncompleteTypeAnnotation.ts, 155, 15))
->c.Member : Symbol(CLASS.Member, Decl(constructorWithIncompleteTypeAnnotation.ts, 218, 43))
+>c.Member : Symbol(Member, Decl(constructorWithIncompleteTypeAnnotation.ts, 218, 43))
 >c : Symbol(c, Decl(constructorWithIncompleteTypeAnnotation.ts, 156, 15))
->Member : Symbol(CLASS.Member, Decl(constructorWithIncompleteTypeAnnotation.ts, 218, 43))
+>Member : Symbol(Member, Decl(constructorWithIncompleteTypeAnnotation.ts, 218, 43))
 
             retVal += xx.Foo() ? 0 : 1;
 >retVal : Symbol(retVal, Decl(constructorWithIncompleteTypeAnnotation.ts, 155, 15))
->xx.Foo : Symbol(IF.Foo, Decl(constructorWithIncompleteTypeAnnotation.ts, 211, 18))
+>xx.Foo : Symbol(Foo, Decl(constructorWithIncompleteTypeAnnotation.ts, 211, 18))
 >xx : Symbol(xx, Decl(constructorWithIncompleteTypeAnnotation.ts, 157, 15))
->Foo : Symbol(IF.Foo, Decl(constructorWithIncompleteTypeAnnotation.ts, 211, 18))
+>Foo : Symbol(Foo, Decl(constructorWithIncompleteTypeAnnotation.ts, 211, 18))
 
             //anonymous type
             var anony = { a: new CLASS() };
@@= skipped -18, +18 lines =@@
 
             retVal += anony.a.d();
 >retVal : Symbol(retVal, Decl(constructorWithIncompleteTypeAnnotation.ts, 155, 15))
->anony.a.d : Symbol(CLASS.d, Decl(constructorWithIncompleteTypeAnnotation.ts, 217, 13))
+>anony.a.d : Symbol(d, Decl(constructorWithIncompleteTypeAnnotation.ts, 217, 13))
 >anony.a : Symbol(a, Decl(constructorWithIncompleteTypeAnnotation.ts, 163, 25))
 >anony : Symbol(anony, Decl(constructorWithIncompleteTypeAnnotation.ts, 163, 15))
 >a : Symbol(a, Decl(constructorWithIncompleteTypeAnnotation.ts, 163, 25))
->d : Symbol(CLASS.d, Decl(constructorWithIncompleteTypeAnnotation.ts, 217, 13))
+>d : Symbol(d, Decl(constructorWithIncompleteTypeAnnotation.ts, 217, 13))
 
             return retVal;
 >retVal : Symbol(retVal, Decl(constructorWithIncompleteTypeAnnotation.ts, 155, 15))
@@= skipped -16, +16 lines =@@
         ///// </summary>
         ///// <returns></returns>
         public OPERATOR(): number {
->OPERATOR : Symbol(BasicFeatures.OPERATOR, Decl(constructorWithIncompleteTypeAnnotation.ts, 168, 9))
+>OPERATOR : Symbol(OPERATOR, Decl(constructorWithIncompleteTypeAnnotation.ts, 168, 9))
 
             var a: number[] = [1, 2, 3, 4, 5, ];/*[] bug*/ // YES []
 >a : Symbol(a, Decl(constructorWithIncompleteTypeAnnotation.ts, 176, 15))
@@= skipped -134, +134 lines =@@
 >IF : Symbol(IF, Decl(constructorWithIncompleteTypeAnnotation.ts, 209, 5))
 
         Foo(): bool;
->Foo : Symbol(IF.Foo, Decl(constructorWithIncompleteTypeAnnotation.ts, 211, 18))
+>Foo : Symbol(Foo, Decl(constructorWithIncompleteTypeAnnotation.ts, 211, 18))
 >bool : Symbol(bool)
     }
 
@@= skipped -9, +9 lines =@@
 >IF : Symbol(IF, Decl(constructorWithIncompleteTypeAnnotation.ts, 209, 5))
 
          case  d = () => {  yield  0; };
->d : Symbol(CLASS.d, Decl(constructorWithIncompleteTypeAnnotation.ts, 217, 13))
+>d : Symbol(d, Decl(constructorWithIncompleteTypeAnnotation.ts, 217, 13))
 
         public get Property() { return 0; }
->Property : Symbol(CLASS.Property, Decl(constructorWithIncompleteTypeAnnotation.ts, 217, 40))
+>Property : Symbol(Property, Decl(constructorWithIncompleteTypeAnnotation.ts, 217, 40))
 
         public Member() {
->Member : Symbol(CLASS.Member, Decl(constructorWithIncompleteTypeAnnotation.ts, 218, 43))
+>Member : Symbol(Member, Decl(constructorWithIncompleteTypeAnnotation.ts, 218, 43))
 
             return 0;
         }
         public Foo(): bool {
->Foo : Symbol(CLASS.Foo, Decl(constructorWithIncompleteTypeAnnotation.ts, 221, 9))
+>Foo : Symbol(Foo, Decl(constructorWithIncompleteTypeAnnotation.ts, 221, 9))
 >bool : Symbol(bool)
 
             var myEvent = () => { return 1; };
@@= skipped -45, +45 lines =@@
 >A : Symbol(A, Decl(constructorWithIncompleteTypeAnnotation.ts, 229, 5))
 
         public method2() {
->method2 : Symbol(B.method2, Decl(constructorWithIncompleteTypeAnnotation.ts, 242, 23))
+>method2 : Symbol(method2, Decl(constructorWithIncompleteTypeAnnotation.ts, 242, 23))
 
             return this.method1(2);
 >this : Symbol(B, Decl(constructorWithIncompleteTypeAnnotation.ts, 240, 5))
@@= skipped -11, +11 lines =@@
 >Overloading : Symbol(Overloading, Decl(constructorWithIncompleteTypeAnnotation.ts, 247, 5))
 
         private otherValue = 42;
->otherValue : Symbol(Overloading.otherValue, Decl(constructorWithIncompleteTypeAnnotation.ts, 249, 23))
+>otherValue : Symbol(otherValue, Decl(constructorWithIncompleteTypeAnnotation.ts, 249, 23))
 
         constructor(private value: number, public name: string)  :  }
->value : Symbol(Overloading.value, Decl(constructorWithIncompleteTypeAnnotation.ts, 253, 20))
->name : Symbol(Overloading.name, Decl(constructorWithIncompleteTypeAnnotation.ts, 253, 42))
-> : Symbol(fs)
+>value : Symbol(value, Decl(constructorWithIncompleteTypeAnnotation.ts, 253, 20))
+>name : Symbol(name, Decl(constructorWithIncompleteTypeAnnotation.ts, 253, 42))
+> : Symbol(unknown)
        
         public Overloads(value: string);
         public Overloads( while : string, ...rest: string[]) {  & 
@@= skipped -18, +18 lines =@@
 >Weekdays : Symbol(Weekdays, Decl(constructorWithIncompleteTypeAnnotation.ts, 260, 1))
 
     Monday,
->Monday : Symbol(Weekdays.Monday, Decl(constructorWithIncompleteTypeAnnotation.ts, 262, 15))
+>Monday : Symbol(Monday, Decl(constructorWithIncompleteTypeAnnotation.ts, 262, 15))
 
     Tuesday,
->Tuesday : Symbol(Weekdays.Tuesday, Decl(constructorWithIncompleteTypeAnnotation.ts, 263, 11))
+>Tuesday : Symbol(Tuesday, Decl(constructorWithIncompleteTypeAnnotation.ts, 263, 11))
 
     Weekend,
->Weekend : Symbol(Weekdays.Weekend, Decl(constructorWithIncompleteTypeAnnotation.ts, 264, 12))
+>Weekend : Symbol(Weekend, Decl(constructorWithIncompleteTypeAnnotation.ts, 264, 12))
 }
 
 enum Fruit {
 >Fruit : Symbol(Fruit, Decl(constructorWithIncompleteTypeAnnotation.ts, 266, 1))
 
     Apple,
->Apple : Symbol(Fruit.Apple, Decl(constructorWithIncompleteTypeAnnotation.ts, 268, 12))
+>Apple : Symbol(Apple, Decl(constructorWithIncompleteTypeAnnotation.ts, 268, 12))
 
     Pear
->Pear : Symbol(Fruit.Pear, Decl(constructorWithIncompleteTypeAnnotation.ts, 269, 10))
+>Pear : Symbol(Pear, Decl(constructorWithIncompleteTypeAnnotation.ts, 269, 10))
 }
 
 interface IDisposable {
 >IDisposable : Symbol(IDisposable, Decl(constructorWithIncompleteTypeAnnotation.ts, 271, 1))
 
     Dispose(): void;
->Dispose : Symbol(IDisposable.Dispose, Decl(constructorWithIncompleteTypeAnnotation.ts, 273, 23))
+>Dispose : Symbol(Dispose, Decl(constructorWithIncompleteTypeAnnotation.ts, 273, 23))
 }
 
 TypeScriptAllInOne.Program.Main();
->TypeScriptAllInOne.Program.Main : Symbol(TypeScriptAllInOne.Program.Main, Decl(constructorWithIncompleteTypeAnnotation.ts, 14, 26))
->TypeScriptAllInOne.Program : Symbol(TypeScriptAllInOne.Program, Decl(constructorWithIncompleteTypeAnnotation.ts, 13, 27))
+>TypeScriptAllInOne.Program.Main : Symbol(Main, Decl(constructorWithIncompleteTypeAnnotation.ts, 14, 26))
+>TypeScriptAllInOne.Program : Symbol(Program, Decl(constructorWithIncompleteTypeAnnotation.ts, 13, 27))
 >TypeScriptAllInOne : Symbol(TypeScriptAllInOne, Decl(constructorWithIncompleteTypeAnnotation.ts, 10, 25))
->Program : Symbol(TypeScriptAllInOne.Program, Decl(constructorWithIncompleteTypeAnnotation.ts, 13, 27))
->Main : Symbol(TypeScriptAllInOne.Program.Main, Decl(constructorWithIncompleteTypeAnnotation.ts, 14, 26))
+>Program : Symbol(Program, Decl(constructorWithIncompleteTypeAnnotation.ts, 13, 27))
+>Main : Symbol(Main, Decl(constructorWithIncompleteTypeAnnotation.ts, 14, 26))
 
