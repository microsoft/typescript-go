--- old.constructorArgWithGenericCallSignature.types
+++ new.constructorArgWithGenericCallSignature.types
@@= skipped -4, +4 lines =@@
 >Test : typeof Test
 
     export interface MyFunc {
+>MyFunc : MyFunc
+
         <T>(value1: T): T;
+>T : T
 >value1 : T
     }
     export class MyClass {
@@= skipped -15, +18 lines =@@
 >func : MyFunc
 }
 var func: Test.MyFunc;
->func : Test.MyFunc
+>func : MyFunc
 >Test : any
 
 Test.F(func); // OK
 >Test.F(func) : void
->Test.F : (func: Test.MyFunc) => void
+>Test.F : (func: MyFunc) => void
 >Test : typeof Test
->F : (func: Test.MyFunc) => void
->func : Test.MyFunc
+>F : (func: MyFunc) => void
+>func : MyFunc
 
 var test = new Test.MyClass(func); // Should be OK
->test : Test.MyClass
->new Test.MyClass(func) : Test.MyClass
->Test.MyClass : typeof Test.MyClass
+>test : MyClass
+>new Test.MyClass(func) : MyClass
+>Test.MyClass : typeof MyClass
 >Test : typeof Test
->MyClass : typeof Test.MyClass
->func : Test.MyFunc
+>MyClass : typeof MyClass
+>func : MyFunc
 
