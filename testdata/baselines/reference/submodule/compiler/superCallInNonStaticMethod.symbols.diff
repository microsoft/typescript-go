--- old.superCallInNonStaticMethod.symbols
+++ new.superCallInNonStaticMethod.symbols
@@= skipped -4, +4 lines =@@
 >Doing : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
 
     public instanceMethod() {
->instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
     }
 }
 
@@= skipped -10, +10 lines =@@
 
     // in instance method
     public instanceMethod() {
->instanceMethod : Symbol(Other.instanceMethod, Decl(superCallInNonStaticMethod.ts, 5, 27))
+>instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 5, 27))
 
         super.instanceMethod();
->super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>super.instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 >super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
->instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
     }
 
     // in a lambda inside a instance method
     public lambdaInsideAnInstanceMethod() {
->lambdaInsideAnInstanceMethod : Symbol(Other.lambdaInsideAnInstanceMethod, Decl(superCallInNonStaticMethod.ts, 9, 5))
+>lambdaInsideAnInstanceMethod : Symbol(lambdaInsideAnInstanceMethod, Decl(superCallInNonStaticMethod.ts, 9, 5))
 
         () => {
             super.instanceMethod();
->super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>super.instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 >super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
->instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
         }
     }
 
     // in an object literal inside a instance method
     public objectLiteralInsideAnInstanceMethod() {
->objectLiteralInsideAnInstanceMethod : Symbol(Other.objectLiteralInsideAnInstanceMethod, Decl(superCallInNonStaticMethod.ts, 16, 5))
+>objectLiteralInsideAnInstanceMethod : Symbol(objectLiteralInsideAnInstanceMethod, Decl(superCallInNonStaticMethod.ts, 16, 5))
 
         return {
             a: () => {
 >a : Symbol(a, Decl(superCallInNonStaticMethod.ts, 20, 16))
 
                 super.instanceMethod();
->super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>super.instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 >super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
->instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 
             },
             b: super.instanceMethod()
 >b : Symbol(b, Decl(superCallInNonStaticMethod.ts, 23, 14))
->super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>super.instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 >super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
->instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 
         };
     }
 
     // in a getter
     public get accessor() {
->accessor : Symbol(Other.accessor, Decl(superCallInNonStaticMethod.ts, 26, 5), Decl(superCallInNonStaticMethod.ts, 33, 5))
+>accessor : Symbol(accessor, Decl(superCallInNonStaticMethod.ts, 26, 5), Decl(superCallInNonStaticMethod.ts, 33, 5))
 
         super.instanceMethod();
->super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>super.instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 >super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
->instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 
         return 0;
     }
 
     // in a setter
     public set accessor(value: number) {
->accessor : Symbol(Other.accessor, Decl(superCallInNonStaticMethod.ts, 26, 5), Decl(superCallInNonStaticMethod.ts, 33, 5))
+>accessor : Symbol(accessor, Decl(superCallInNonStaticMethod.ts, 26, 5), Decl(superCallInNonStaticMethod.ts, 33, 5))
 >value : Symbol(value, Decl(superCallInNonStaticMethod.ts, 36, 24))
 
         super.instanceMethod();
->super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>super.instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 >super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
->instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
     }
     
     constructor() {
@@= skipped -71, +71 lines =@@
 >super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
 
         super.instanceMethod();
->super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>super.instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 >super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
->instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
     }
     
     public propertyInitializer = super.instanceMethod();
->propertyInitializer : Symbol(Other.propertyInitializer, Decl(superCallInNonStaticMethod.ts, 43, 5))
->super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>propertyInitializer : Symbol(propertyInitializer, Decl(superCallInNonStaticMethod.ts, 43, 5))
+>super.instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 >super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
->instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
     
     public functionProperty = () => {super.instanceMethod(); };
->functionProperty : Symbol(Other.functionProperty, Decl(superCallInNonStaticMethod.ts, 45, 56))
->super.instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>functionProperty : Symbol(functionProperty, Decl(superCallInNonStaticMethod.ts, 45, 56))
+>super.instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 >super : Symbol(Doing, Decl(superCallInNonStaticMethod.ts, 0, 0))
->instanceMethod : Symbol(Doing.instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
+>instanceMethod : Symbol(instanceMethod, Decl(superCallInNonStaticMethod.ts, 0, 13))
 }
 
