--- old.potentiallyUncalledDecorators.symbols
+++ new.potentiallyUncalledDecorators.symbols
@@= skipped -10, +10 lines =@@
 
     @Input foo: string;
 >Input : Symbol(Input, Decl(potentiallyUncalledDecorators.ts, 0, 0))
->foo : Symbol(FooComponent.foo, Decl(potentiallyUncalledDecorators.ts, 2, 20))
+>foo : Symbol(foo, Decl(potentiallyUncalledDecorators.ts, 2, 20))
 }
 
 // Glimmer-style tracked API:
@@= skipped -14, +14 lines =@@
 
     @tracked person; any;
 >tracked : Symbol(tracked, Decl(potentiallyUncalledDecorators.ts, 7, 13))
->person : Symbol(Person.person, Decl(potentiallyUncalledDecorators.ts, 9, 14))
->any : Symbol(Person.any, Decl(potentiallyUncalledDecorators.ts, 10, 20))
+>person : Symbol(person, Decl(potentiallyUncalledDecorators.ts, 9, 14))
+>any : Symbol(any, Decl(potentiallyUncalledDecorators.ts, 10, 20))
 }
 
 class MultiplyByTwo {
 >MultiplyByTwo : Symbol(MultiplyByTwo, Decl(potentiallyUncalledDecorators.ts, 11, 1))
 
     args: any;
->args : Symbol(MultiplyByTwo.args, Decl(potentiallyUncalledDecorators.ts, 13, 21))
+>args : Symbol(args, Decl(potentiallyUncalledDecorators.ts, 13, 21))
 
     @tracked('args')
 >tracked : Symbol(tracked, Decl(potentiallyUncalledDecorators.ts, 7, 13))
 
     get multiplied() {
->multiplied : Symbol(MultiplyByTwo.multiplied, Decl(potentiallyUncalledDecorators.ts, 14, 14))
+>multiplied : Symbol(multiplied, Decl(potentiallyUncalledDecorators.ts, 14, 14))
 
         return this.args.number * 2;
->this.args : Symbol(MultiplyByTwo.args, Decl(potentiallyUncalledDecorators.ts, 13, 21))
+>this.args : Symbol(args, Decl(potentiallyUncalledDecorators.ts, 13, 21))
 >this : Symbol(MultiplyByTwo, Decl(potentiallyUncalledDecorators.ts, 11, 1))
->args : Symbol(MultiplyByTwo.args, Decl(potentiallyUncalledDecorators.ts, 13, 21))
+>args : Symbol(args, Decl(potentiallyUncalledDecorators.ts, 13, 21))
     }
 }
 
@@= skipped -76, +76 lines =@@
 
     @noArgs foo: any;
 >noArgs : Symbol(noArgs, Decl(potentiallyUncalledDecorators.ts, 24, 1))
->foo : Symbol(A.foo, Decl(potentiallyUncalledDecorators.ts, 35, 9))
+>foo : Symbol(foo, Decl(potentiallyUncalledDecorators.ts, 35, 9))
 
     @noArgs bar() { }
 >noArgs : Symbol(noArgs, Decl(potentiallyUncalledDecorators.ts, 24, 1))
->bar : Symbol(A.bar, Decl(potentiallyUncalledDecorators.ts, 36, 21))
+>bar : Symbol(bar, Decl(potentiallyUncalledDecorators.ts, 36, 21))
 }
 
 @allRest
@@= skipped -15, +15 lines =@@
 
     @allRest foo: any;
 >allRest : Symbol(allRest, Decl(potentiallyUncalledDecorators.ts, 26, 41))
->foo : Symbol(B.foo, Decl(potentiallyUncalledDecorators.ts, 41, 9))
+>foo : Symbol(foo, Decl(potentiallyUncalledDecorators.ts, 41, 9))
 
     @allRest bar() { }
 >allRest : Symbol(allRest, Decl(potentiallyUncalledDecorators.ts, 26, 41))
->bar : Symbol(B.bar, Decl(potentiallyUncalledDecorators.ts, 42, 22))
+>bar : Symbol(bar, Decl(potentiallyUncalledDecorators.ts, 42, 22))
 }
 
 @oneOptional
@@= skipped -15, +15 lines =@@
 
     @oneOptional foo: any;
 >oneOptional : Symbol(oneOptional, Decl(potentiallyUncalledDecorators.ts, 27, 56))
->foo : Symbol(C.foo, Decl(potentiallyUncalledDecorators.ts, 47, 9))
+>foo : Symbol(foo, Decl(potentiallyUncalledDecorators.ts, 47, 9))
 
     @oneOptional bar() { }
 >oneOptional : Symbol(oneOptional, Decl(potentiallyUncalledDecorators.ts, 27, 56))
->bar : Symbol(C.bar, Decl(potentiallyUncalledDecorators.ts, 48, 26))
+>bar : Symbol(bar, Decl(potentiallyUncalledDecorators.ts, 48, 26))
 }
 
 @twoOptional
@@= skipped -15, +15 lines =@@
 
     @twoOptional foo: any;
 >twoOptional : Symbol(twoOptional, Decl(potentiallyUncalledDecorators.ts, 28, 53))
->foo : Symbol(D.foo, Decl(potentiallyUncalledDecorators.ts, 53, 9))
+>foo : Symbol(foo, Decl(potentiallyUncalledDecorators.ts, 53, 9))
 
     @twoOptional bar() { }
 >twoOptional : Symbol(twoOptional, Decl(potentiallyUncalledDecorators.ts, 28, 53))
->bar : Symbol(D.bar, Decl(potentiallyUncalledDecorators.ts, 54, 26))
+>bar : Symbol(bar, Decl(potentiallyUncalledDecorators.ts, 54, 26))
 }
 
 @threeOptional
@@= skipped -15, +15 lines =@@
 
     @threeOptional foo: any;
 >threeOptional : Symbol(threeOptional, Decl(potentiallyUncalledDecorators.ts, 29, 62))
->foo : Symbol(E.foo, Decl(potentiallyUncalledDecorators.ts, 59, 9))
+>foo : Symbol(foo, Decl(potentiallyUncalledDecorators.ts, 59, 9))
 
     @threeOptional bar() { }
 >threeOptional : Symbol(threeOptional, Decl(potentiallyUncalledDecorators.ts, 29, 62))
->bar : Symbol(E.bar, Decl(potentiallyUncalledDecorators.ts, 60, 28))
+>bar : Symbol(bar, Decl(potentiallyUncalledDecorators.ts, 60, 28))
 }
 
 @oneOptionalWithRest
@@= skipped -15, +15 lines =@@
 
     @oneOptionalWithRest foo: any;
 >oneOptionalWithRest : Symbol(oneOptionalWithRest, Decl(potentiallyUncalledDecorators.ts, 30, 73))
->foo : Symbol(F.foo, Decl(potentiallyUncalledDecorators.ts, 65, 9))
+>foo : Symbol(foo, Decl(potentiallyUncalledDecorators.ts, 65, 9))
 
     @oneOptionalWithRest bar() { }
 >oneOptionalWithRest : Symbol(oneOptionalWithRest, Decl(potentiallyUncalledDecorators.ts, 30, 73))
->bar : Symbol(F.bar, Decl(potentiallyUncalledDecorators.ts, 66, 34))
+>bar : Symbol(bar, Decl(potentiallyUncalledDecorators.ts, 66, 34))
 }
 
 @anyDec
@@= skipped -15, +15 lines =@@
 
     @anyDec foo: any;
 >anyDec : Symbol(anyDec, Decl(potentiallyUncalledDecorators.ts, 32, 13))
->foo : Symbol(G.foo, Decl(potentiallyUncalledDecorators.ts, 71, 9))
+>foo : Symbol(foo, Decl(potentiallyUncalledDecorators.ts, 71, 9))
 
     @anyDec bar() { }
 >anyDec : Symbol(anyDec, Decl(potentiallyUncalledDecorators.ts, 32, 13))
->bar : Symbol(G.bar, Decl(potentiallyUncalledDecorators.ts, 72, 21))
+>bar : Symbol(bar, Decl(potentiallyUncalledDecorators.ts, 72, 21))
 }
 
 export { };
